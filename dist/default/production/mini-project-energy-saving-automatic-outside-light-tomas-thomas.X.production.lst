

Microchip MPLAB XC8 Assembler V2.45 build 20230818022343 
                                                                                               Thu Feb 08 20:23:23 2024

Microchip MPLAB XC8 C Compiler v2.45 (Free license) build 20230818022343 Og1 
     1                           	processor	18F67K40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1
    14                           	psect	text4,global,reloc=2,class=CODE,delta=1
    15                           	psect	text5,global,reloc=2,class=CODE,delta=1
    16                           	psect	text6,global,reloc=2,class=CODE,delta=1
    17                           	psect	text7,global,reloc=2,class=CODE,delta=1
    18                           	psect	text8,global,reloc=2,class=CODE,delta=1
    19                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    20                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
    21                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    22                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    23                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    24                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    25   000000                     
    26                           ; Generated 21/07/2023 GMT
    27                           ; 
    28                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    29                           ; All rights reserved.
    30                           ; 
    31                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    32                           ; 
    33                           ; Redistribution and use in source and binary forms, with or without modification, are
    34                           ; permitted provided that the following conditions are met:
    35                           ; 
    36                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    37                           ;        conditions and the following disclaimer.
    38                           ; 
    39                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    40                           ;        of conditions and the following disclaimer in the documentation and/or other
    41                           ;        materials provided with the distribution. Publication is not required when
    42                           ;        this file is used in an embedded application.
    43                           ; 
    44                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    45                           ;        software without specific prior written permission.
    46                           ; 
    47                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    48                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    49                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    50                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    51                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    52                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    53                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    54                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    55                           ; 
    56                           ; 
    57                           ; Code-generator required, PIC18F67K40 Definitions
    58                           ; 
    59                           ; SFR Addresses
    60   000000                     _T0CON0bits	set	4053
    61   000000                     _T0CON1bits	set	4054
    62   000000                     _CM1CON1bits	set	3793
    63                           
    64                           	psect	nvBANK0
    65   0000F6                     __pnvBANK0:
    66                           	callstack 0
    67   0000F6                     _GLOBALsecs:
    68                           	callstack 0
    69   0000F6                     	ds	2
    70   000000                     _IPR0bits	set	3615
    71   000000                     _PIE0bits	set	3625
    72   000000                     _ANSELAbits	set	3730
    73   000000                     _LATDbits	set	3964
    74   000000                     _TRISDbits	set	3972
    75   000000                     _TRISFbits	set	3974
    76   000000                     _TRISGbits	set	3975
    77   000000                     _TRISHbits	set	3976
    78   000000                     _LATFbits	set	3966
    79   000000                     _LATGbits	set	3967
    80   000000                     _LATHbits	set	3968
    81   000000                     _TMR0L	set	4051
    82   000000                     _TMR0H	set	4052
    83   000000                     _INTCONbits	set	4082
    84   000000                     _TRISBbits	set	3970
    85   000000                     _TRISAbits	set	3969
    86   000000                     _DAC1CON0bits	set	3782
    87   000000                     _ADREFbits	set	3928
    88   000000                     _ADPCH	set	3935
    89   000000                     _ADRESH	set	3940
    90   000000                     _ADCON0bits	set	3936
    91   000000                     _LATAbits	set	3961
    92   000000                     _LATBbits	set	3962
    93   000000                     _CM1CON0bits	set	3792
    94   000000                     _CM1NCHbits	set	3794
    95   000000                     _DAC1CON1bits	set	3783
    96   000000                     _CM1PCHbits	set	3795
    97   000000                     _PIR0bits	set	3635
    98                           
    99                           ; #config settings
   100                           
   101                           	psect	cinit
   102   0014AA                     __pcinit:
   103                           	callstack 0
   104   0014AA                     start_initialization:
   105                           	callstack 0
   106   0014AA                     __initialization:
   107                           	callstack 0
   108                           
   109                           ; Clear objects allocated to COMRAM (56 bytes)
   110   0014AA  EE00  F001         	lfsr	0,__pbssCOMRAM
   111   0014AE  0E38               	movlw	56
   112   0014B0                     clear_0:
   113   0014B0  6AEE               	clrf	postinc0,c
   114   0014B2  06E8               	decf	wreg,f,c
   115   0014B4  E1FD               	bnz	clear_0
   116   0014B6                     end_of_initialization:
   117                           	callstack 0
   118   0014B6                     __end_of__initialization:
   119                           	callstack 0
   120   0014B6  9043               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   121   0014B8  9243               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   122   0014BA  0100               	movlb	0
   123   0014BC  EF01  F007         	goto	_main	;jump to C main() function
   124                           
   125                           	psect	bssCOMRAM
   126   000001                     __pbssCOMRAM:
   127                           	callstack 0
   128   000001                     	ds	14
   129   00000F                     	ds	14
   130   00001D                     	ds	14
   131   00002B                     	ds	14
   132                           
   133                           	psect	cstackBANK0
   134   000060                     __pcstackBANK0:
   135                           	callstack 0
   136   000060                     main@DawnHours:
   137                           	callstack 0
   138                           
   139                           ; 14 bytes @ 0x0
   140   000060                     	ds	14
   141   00006E                     main@DawnMinutes:
   142                           	callstack 0
   143                           
   144                           ; 14 bytes @ 0xE
   145   00006E                     	ds	14
   146   00007C                     main@DuskHours:
   147                           	callstack 0
   148                           
   149                           ; 14 bytes @ 0x1C
   150   00007C                     	ds	14
   151   00008A                     main@DuskMinutes:
   152                           	callstack 0
   153                           
   154                           ; 14 bytes @ 0x2A
   155   00008A                     	ds	14
   156   000098                     main@light_threshold:
   157                           	callstack 0
   158                           
   159                           ; 2 bytes @ 0x38
   160   000098                     	ds	2
   161   00009A                     main@curval:
   162                           	callstack 0
   163                           
   164                           ; 2 bytes @ 0x3A
   165   00009A                     	ds	2
   166   00009C                     main@Jan:
   167                           	callstack 0
   168                           
   169                           ; 6 bytes @ 0x3C
   170   00009C                     	ds	6
   171   0000A2                     main@Feb:
   172                           	callstack 0
   173                           
   174                           ; 6 bytes @ 0x42
   175   0000A2                     	ds	6
   176   0000A8                     main@Mar:
   177                           	callstack 0
   178                           
   179                           ; 6 bytes @ 0x48
   180   0000A8                     	ds	6
   181   0000AE                     main@Apr:
   182                           	callstack 0
   183                           
   184                           ; 6 bytes @ 0x4E
   185   0000AE                     	ds	6
   186   0000B4                     main@May:
   187                           	callstack 0
   188                           
   189                           ; 6 bytes @ 0x54
   190   0000B4                     	ds	6
   191   0000BA                     main@Jun:
   192                           	callstack 0
   193                           
   194                           ; 6 bytes @ 0x5A
   195   0000BA                     	ds	6
   196   0000C0                     main@Jul:
   197                           	callstack 0
   198                           
   199                           ; 6 bytes @ 0x60
   200   0000C0                     	ds	6
   201   0000C6                     main@Aug:
   202                           	callstack 0
   203                           
   204                           ; 6 bytes @ 0x66
   205   0000C6                     	ds	6
   206   0000CC                     main@Sep:
   207                           	callstack 0
   208                           
   209                           ; 6 bytes @ 0x6C
   210   0000CC                     	ds	6
   211   0000D2                     main@Oct:
   212                           	callstack 0
   213                           
   214                           ; 6 bytes @ 0x72
   215   0000D2                     	ds	6
   216   0000D8                     main@Nov:
   217                           	callstack 0
   218                           
   219                           ; 6 bytes @ 0x78
   220   0000D8                     	ds	6
   221   0000DE                     main@Dec:
   222                           	callstack 0
   223                           
   224                           ; 6 bytes @ 0x7E
   225   0000DE                     	ds	6
   226   0000E4                     main@size:
   227                           	callstack 0
   228                           
   229                           ; 2 bytes @ 0x84
   230   0000E4                     	ds	2
   231   0000E6                     main@DSTon:
   232                           	callstack 0
   233                           
   234                           ; 8 bytes @ 0x86
   235   0000E6                     	ds	8
   236   0000EE                     main@clock:
   237                           	callstack 0
   238                           
   239                           ; 8 bytes @ 0x8E
   240   0000EE                     	ds	8
   241                           
   242                           	psect	cstackCOMRAM
   243   000039                     __pcstackCOMRAM:
   244                           	callstack 0
   245   000039                     ?_ADC_getval:
   246                           	callstack 0
   247   000039                     UpdateClock@seconds:
   248                           	callstack 0
   249   000039                     ArrayAppend@arrayTime:
   250                           	callstack 0
   251   000039                     LEDarray_disp_bin@number:
   252                           	callstack 0
   253                           
   254                           ; 2 bytes @ 0x0
   255   000039                     	ds	1
   256   00003A                     UpdateClock@minutes:
   257                           	callstack 0
   258   00003A                     ArrayAppend@size:
   259                           	callstack 0
   260                           
   261                           ; 2 bytes @ 0x1
   262   00003A                     	ds	1
   263   00003B                     UpdateClock@hours:
   264                           	callstack 0
   265   00003B                     ADC_getval@tmpval:
   266                           	callstack 0
   267                           
   268                           ; 2 bytes @ 0x2
   269   00003B                     	ds	1
   270   00003C                     UpdateClock@days:
   271                           	callstack 0
   272   00003C                     ArrayAppend@Time:
   273                           	callstack 0
   274                           
   275                           ; 2 bytes @ 0x3
   276   00003C                     	ds	1
   277   00003D                     ??_UpdateClock:
   278                           
   279                           ; 1 bytes @ 0x4
   280   00003D                     	ds	1
   281   00003E                     ??_ArrayAppend:
   282                           
   283                           ; 1 bytes @ 0x5
   284   00003E                     	ds	3
   285   000041                     ArrayAppend@i:
   286                           	callstack 0
   287                           
   288                           ; 2 bytes @ 0x8
   289   000041                     	ds	2
   290   000043                     
   291                           ; 1 bytes @ 0xA
   292 ;;
   293 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   294 ;;
   295 ;; *************** function _main *****************
   296 ;; Defined at:
   297 ;;		line 28 in file "main.c"
   298 ;; Parameters:    Size  Location     Type
   299 ;;		None
   300 ;; Auto vars:     Size  Location     Type
   301 ;;  curval          2   58[BANK0 ] unsigned int 
   302 ;;  DuskMinutes    14   42[BANK0 ] int [7]
   303 ;;  DuskHours      14   28[BANK0 ] int [7]
   304 ;;  DawnMinutes    14   14[BANK0 ] int [7]
   305 ;;  DawnHours      14    0[BANK0 ] int [7]
   306 ;;  clock           8  142[BANK0 ] struct time_structure
   307 ;;  DSTon           8  134[BANK0 ] struct time_structure
   308 ;;  Dec             6  126[BANK0 ] struct month_structure
   309 ;;  Nov             6  120[BANK0 ] struct month_structure
   310 ;;  Oct             6  114[BANK0 ] struct month_structure
   311 ;;  Sep             6  108[BANK0 ] struct month_structure
   312 ;;  Aug             6  102[BANK0 ] struct month_structure
   313 ;;  Jul             6   96[BANK0 ] struct month_structure
   314 ;;  Jun             6   90[BANK0 ] struct month_structure
   315 ;;  May             6   84[BANK0 ] struct month_structure
   316 ;;  Apr             6   78[BANK0 ] struct month_structure
   317 ;;  Mar             6   72[BANK0 ] struct month_structure
   318 ;;  Feb             6   66[BANK0 ] struct month_structure
   319 ;;  Jan             6   60[BANK0 ] struct month_structure
   320 ;;  size            2  132[BANK0 ] int 
   321 ;;  light_thresh    2   56[BANK0 ] unsigned int 
   322 ;; Return value:  Size  Location     Type
   323 ;;                  1    wreg      void 
   324 ;; Registers used:
   325 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
   326 ;; Tracked objects:
   327 ;;		On entry : 0/0
   328 ;;		On exit  : 0/0
   329 ;;		Unchanged: 0/0
   330 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   331 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   332 ;;      Locals:         0     150       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   333 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   334 ;;      Totals:         0     150       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   335 ;;Total ram usage:      150 bytes
   336 ;; Hardware stack levels required when called: 2
   337 ;; This function calls:
   338 ;;		_ADC_getval
   339 ;;		_ADC_init
   340 ;;		_ArrayAppend
   341 ;;		_Interrupts_init
   342 ;;		_LEDarray_disp_bin
   343 ;;		_LEDarray_init
   344 ;;		_Timer0_init
   345 ;;		_UpdateClock
   346 ;; This function is called by:
   347 ;;		Startup code after reset
   348 ;; This function uses a non-reentrant model
   349 ;;
   350                           
   351                           	psect	text0
   352   000E02                     __ptext0:
   353                           	callstack 0
   354   000E02                     _main:
   355                           	callstack 29
   356   000E02                     
   357                           ;main.c: 31:     LEDarray_init();
   358   000E02  EC25  F00A         	call	_LEDarray_init	;wreg free
   359   000E06                     
   360                           ;main.c: 32:     Timer0_init();
   361   000E06  EC38  F00A         	call	_Timer0_init	;wreg free
   362   000E0A                     
   363                           ;main.c: 33:     Interrupts_init();
   364   000E0A  EC60  F00A         	call	_Interrupts_init	;wreg free
   365   000E0E                     
   366                           ;main.c: 37:     TRISDbits.TRISD7 = 0;
   367   000E0E  9E84               	bcf	132,7,c	;volatile
   368   000E10                     
   369                           ;main.c: 38:     LATDbits.LATD7 = 0;
   370   000E10  9E7C               	bcf	124,7,c	;volatile
   371   000E12                     
   372                           ;main.c: 41:     TRISHbits.TRISH3 = 0;
   373   000E12  9688               	bcf	136,3,c	;volatile
   374   000E14                     
   375                           ;main.c: 42:     LATHbits.LATH3 = 0;
   376   000E14  9680               	bcf	128,3,c	;volatile
   377   000E16                     
   378                           ;main.c: 54:     struct time_structure clock;;main.c: 56:         GLOBALsecs = 50;
   379   000E16  0E00               	movlw	0
   380   000E18  0100               	movlb	0	; () banked
   381   000E1A  6FF7               	movwf	(_GLOBALsecs+1)& (0+255),b
   382   000E1C  0E32               	movlw	50
   383   000E1E  6FF6               	movwf	_GLOBALsecs& (0+255),b
   384   000E20                     
   385                           ; BSR set to: 0
   386                           ;main.c: 57:         clock.minutes = 59;
   387   000E20  0E00               	movlw	0
   388   000E22  6FF1               	movwf	(main@clock+3)& (0+255),b
   389   000E24  0E3B               	movlw	59
   390   000E26  6FF0               	movwf	(main@clock+2)& (0+255),b
   391   000E28                     
   392                           ; BSR set to: 0
   393                           ;main.c: 58:         clock.hours = 12;
   394   000E28  0E00               	movlw	0
   395   000E2A  6FF3               	movwf	(main@clock+5)& (0+255),b
   396   000E2C  0E0C               	movlw	12
   397   000E2E  6FF2               	movwf	(main@clock+4)& (0+255),b
   398   000E30                     
   399                           ; BSR set to: 0
   400                           ;main.c: 59:         clock.days = 1;
   401   000E30  0E00               	movlw	0
   402   000E32  6FF5               	movwf	(main@clock+7)& (0+255),b
   403   000E34  0E01               	movlw	1
   404   000E36  6FF4               	movwf	(main@clock+6)& (0+255),b
   405   000E38                     
   406                           ; BSR set to: 0
   407                           ;main.c: 63:     struct time_structure DSTon;;main.c: 64:         DSTon.minutes = 0;
   408   000E38  0E00               	movlw	0
   409   000E3A  6FE9               	movwf	(main@DSTon+3)& (0+255),b
   410   000E3C  0E00               	movlw	0
   411   000E3E  6FE8               	movwf	(main@DSTon+2)& (0+255),b
   412   000E40                     
   413                           ; BSR set to: 0
   414                           ;main.c: 65:         DSTon.hours = 0;
   415   000E40  0E00               	movlw	0
   416   000E42  6FEB               	movwf	(main@DSTon+5)& (0+255),b
   417   000E44  0E00               	movlw	0
   418   000E46  6FEA               	movwf	(main@DSTon+4)& (0+255),b
   419   000E48                     
   420                           ; BSR set to: 0
   421                           ;main.c: 66:         DSTon.days = 0;
   422   000E48  0E00               	movlw	0
   423   000E4A  6FED               	movwf	(main@DSTon+7)& (0+255),b
   424   000E4C  0E00               	movlw	0
   425   000E4E  6FEC               	movwf	(main@DSTon+6)& (0+255),b
   426   000E50                     
   427                           ; BSR set to: 0
   428                           ;main.c: 72:         GLOBALsecs = clock.hours;
   429   000E50  C0F2  F0F6         	movff	main@clock+4,_GLOBALsecs
   430   000E54  C0F3  F0F7         	movff	main@clock+5,_GLOBALsecs+1
   431   000E58                     
   432                           ; BSR set to: 0
   433                           ;main.c: 130:     struct month_structure Jan;;main.c: 132:         Jan.days = 31;
   434   000E58  0E00               	movlw	0
   435   000E5A  6FA1               	movwf	(main@Jan+5)& (0+255),b
   436   000E5C  0E1F               	movlw	31
   437   000E5E  6FA0               	movwf	(main@Jan+4)& (0+255),b
   438   000E60                     
   439                           ; BSR set to: 0
   440                           ;main.c: 133:         Jan.solarMidHours = 0;
   441   000E60  0E00               	movlw	0
   442   000E62  6F9F               	movwf	(main@Jan+3)& (0+255),b
   443   000E64  0E00               	movlw	0
   444   000E66  6F9E               	movwf	(main@Jan+2)& (0+255),b
   445   000E68                     
   446                           ; BSR set to: 0
   447                           ;main.c: 134:         Jan.solarMidMinutes = 9;
   448   000E68  0E00               	movlw	0
   449   000E6A  6F9D               	movwf	(main@Jan+1)& (0+255),b
   450   000E6C  0E09               	movlw	9
   451   000E6E  6F9C               	movwf	main@Jan& (0+255),b
   452   000E70                     
   453                           ; BSR set to: 0
   454                           ;main.c: 136:     struct month_structure Feb;;main.c: 138:         Feb.days = 28;
   455   000E70  0E00               	movlw	0
   456   000E72  6FA7               	movwf	(main@Feb+5)& (0+255),b
   457   000E74  0E1C               	movlw	28
   458   000E76  6FA6               	movwf	(main@Feb+4)& (0+255),b
   459   000E78                     
   460                           ; BSR set to: 0
   461                           ;main.c: 139:         Feb.solarMidHours = 0;
   462   000E78  0E00               	movlw	0
   463   000E7A  6FA5               	movwf	(main@Feb+3)& (0+255),b
   464   000E7C  0E00               	movlw	0
   465   000E7E  6FA4               	movwf	(main@Feb+2)& (0+255),b
   466   000E80                     
   467                           ; BSR set to: 0
   468                           ;main.c: 140:         Feb.solarMidMinutes = 13;
   469   000E80  0E00               	movlw	0
   470   000E82  6FA3               	movwf	(main@Feb+1)& (0+255),b
   471   000E84  0E0D               	movlw	13
   472   000E86  6FA2               	movwf	main@Feb& (0+255),b
   473   000E88                     
   474                           ; BSR set to: 0
   475                           ;main.c: 142:     struct month_structure Mar;;main.c: 144:         Mar.days = 31;
   476   000E88  0E00               	movlw	0
   477   000E8A  6FAD               	movwf	(main@Mar+5)& (0+255),b
   478   000E8C  0E1F               	movlw	31
   479   000E8E  6FAC               	movwf	(main@Mar+4)& (0+255),b
   480   000E90                     
   481                           ; BSR set to: 0
   482                           ;main.c: 145:         Mar.solarMidHours = 0;
   483   000E90  0E00               	movlw	0
   484   000E92  6FAB               	movwf	(main@Mar+3)& (0+255),b
   485   000E94  0E00               	movlw	0
   486   000E96  6FAA               	movwf	(main@Mar+2)& (0+255),b
   487   000E98                     
   488                           ; BSR set to: 0
   489                           ;main.c: 146:         Mar.solarMidMinutes = 8;
   490   000E98  0E00               	movlw	0
   491   000E9A  6FA9               	movwf	(main@Mar+1)& (0+255),b
   492   000E9C  0E08               	movlw	8
   493   000E9E  6FA8               	movwf	main@Mar& (0+255),b
   494   000EA0                     
   495                           ; BSR set to: 0
   496                           ;main.c: 148:     struct month_structure Apr;;main.c: 150:         Apr.days = 30;
   497   000EA0  0E00               	movlw	0
   498   000EA2  6FB3               	movwf	(main@Apr+5)& (0+255),b
   499   000EA4  0E1E               	movlw	30
   500   000EA6  6FB2               	movwf	(main@Apr+4)& (0+255),b
   501   000EA8                     
   502                           ; BSR set to: 0
   503                           ;main.c: 151:         Apr.solarMidHours = 0;
   504   000EA8  0E00               	movlw	0
   505   000EAA  6FB1               	movwf	(main@Apr+3)& (0+255),b
   506   000EAC  0E00               	movlw	0
   507   000EAE  6FB0               	movwf	(main@Apr+2)& (0+255),b
   508   000EB0                     
   509                           ; BSR set to: 0
   510                           ;main.c: 152:         Apr.solarMidMinutes = 1;
   511   000EB0  0E00               	movlw	0
   512   000EB2  6FAF               	movwf	(main@Apr+1)& (0+255),b
   513   000EB4  0E01               	movlw	1
   514   000EB6  6FAE               	movwf	main@Apr& (0+255),b
   515   000EB8                     
   516                           ; BSR set to: 0
   517                           ;main.c: 154:     struct month_structure May;;main.c: 156:         May.days = 31;
   518   000EB8  0E00               	movlw	0
   519   000EBA  6FB9               	movwf	(main@May+5)& (0+255),b
   520   000EBC  0E1F               	movlw	31
   521   000EBE  6FB8               	movwf	(main@May+4)& (0+255),b
   522   000EC0                     
   523                           ; BSR set to: 0
   524                           ;main.c: 157:         May.solarMidHours = 23;
   525   000EC0  0E00               	movlw	0
   526   000EC2  6FB7               	movwf	(main@May+3)& (0+255),b
   527   000EC4  0E17               	movlw	23
   528   000EC6  6FB6               	movwf	(main@May+2)& (0+255),b
   529   000EC8                     
   530                           ; BSR set to: 0
   531                           ;main.c: 158:         May.solarMidMinutes = 57;
   532   000EC8  0E00               	movlw	0
   533   000ECA  6FB5               	movwf	(main@May+1)& (0+255),b
   534   000ECC  0E39               	movlw	57
   535   000ECE  6FB4               	movwf	main@May& (0+255),b
   536   000ED0                     
   537                           ; BSR set to: 0
   538                           ;main.c: 160:     struct month_structure Jun;;main.c: 162:         Jun.days = 30;
   539   000ED0  0E00               	movlw	0
   540   000ED2  6FBF               	movwf	(main@Jun+5)& (0+255),b
   541   000ED4  0E1E               	movlw	30
   542   000ED6  6FBE               	movwf	(main@Jun+4)& (0+255),b
   543   000ED8                     
   544                           ; BSR set to: 0
   545                           ;main.c: 163:         Jun.solarMidHours = 0;
   546   000ED8  0E00               	movlw	0
   547   000EDA  6FBD               	movwf	(main@Jun+3)& (0+255),b
   548   000EDC  0E00               	movlw	0
   549   000EDE  6FBC               	movwf	(main@Jun+2)& (0+255),b
   550   000EE0                     
   551                           ; BSR set to: 0
   552                           ;main.c: 164:         Jun.solarMidMinutes = 1;
   553   000EE0  0E00               	movlw	0
   554   000EE2  6FBB               	movwf	(main@Jun+1)& (0+255),b
   555   000EE4  0E01               	movlw	1
   556   000EE6  6FBA               	movwf	main@Jun& (0+255),b
   557   000EE8                     
   558                           ; BSR set to: 0
   559                           ;main.c: 166:     struct month_structure Jul;;main.c: 168:         Jul.days = 31;
   560   000EE8  0E00               	movlw	0
   561   000EEA  6FC5               	movwf	(main@Jul+5)& (0+255),b
   562   000EEC  0E1F               	movlw	31
   563   000EEE  6FC4               	movwf	(main@Jul+4)& (0+255),b
   564   000EF0                     
   565                           ; BSR set to: 0
   566                           ;main.c: 169:         Jul.solarMidHours = 0;
   567   000EF0  0E00               	movlw	0
   568   000EF2  6FC3               	movwf	(main@Jul+3)& (0+255),b
   569   000EF4  0E00               	movlw	0
   570   000EF6  6FC2               	movwf	(main@Jul+2)& (0+255),b
   571   000EF8                     
   572                           ; BSR set to: 0
   573                           ;main.c: 170:         Jul.solarMidMinutes = 5;
   574   000EF8  0E00               	movlw	0
   575   000EFA  6FC1               	movwf	(main@Jul+1)& (0+255),b
   576   000EFC  0E05               	movlw	5
   577   000EFE  6FC0               	movwf	main@Jul& (0+255),b
   578   000F00                     
   579                           ; BSR set to: 0
   580                           ;main.c: 172:     struct month_structure Aug;;main.c: 174:         Aug.days = 31;
   581   000F00  0E00               	movlw	0
   582   000F02  6FCB               	movwf	(main@Aug+5)& (0+255),b
   583   000F04  0E1F               	movlw	31
   584   000F06  6FCA               	movwf	(main@Aug+4)& (0+255),b
   585   000F08                     
   586                           ; BSR set to: 0
   587                           ;main.c: 175:         Aug.solarMidHours = 0;
   588   000F08  0E00               	movlw	0
   589   000F0A  6FC9               	movwf	(main@Aug+3)& (0+255),b
   590   000F0C  0E00               	movlw	0
   591   000F0E  6FC8               	movwf	(main@Aug+2)& (0+255),b
   592   000F10                     
   593                           ; BSR set to: 0
   594                           ;main.c: 176:         Aug.solarMidMinutes = 3;
   595   000F10  0E00               	movlw	0
   596   000F12  6FC7               	movwf	(main@Aug+1)& (0+255),b
   597   000F14  0E03               	movlw	3
   598   000F16  6FC6               	movwf	main@Aug& (0+255),b
   599   000F18                     
   600                           ; BSR set to: 0
   601                           ;main.c: 178:     struct month_structure Sep;;main.c: 180:         Sep.days = 30;
   602   000F18  0E00               	movlw	0
   603   000F1A  6FD1               	movwf	(main@Sep+5)& (0+255),b
   604   000F1C  0E1E               	movlw	30
   605   000F1E  6FD0               	movwf	(main@Sep+4)& (0+255),b
   606   000F20                     
   607                           ; BSR set to: 0
   608                           ;main.c: 181:         Sep.solarMidHours = 23;
   609   000F20  0E00               	movlw	0
   610   000F22  6FCF               	movwf	(main@Sep+3)& (0+255),b
   611   000F24  0E17               	movlw	23
   612   000F26  6FCE               	movwf	(main@Sep+2)& (0+255),b
   613   000F28                     
   614                           ; BSR set to: 0
   615                           ;main.c: 182:         Sep.solarMidMinutes = 55;
   616   000F28  0E00               	movlw	0
   617   000F2A  6FCD               	movwf	(main@Sep+1)& (0+255),b
   618   000F2C  0E37               	movlw	55
   619   000F2E  6FCC               	movwf	main@Sep& (0+255),b
   620   000F30                     
   621                           ; BSR set to: 0
   622                           ;main.c: 184:     struct month_structure Oct;;main.c: 186:         Oct.days = 31;
   623   000F30  0E00               	movlw	0
   624   000F32  6FD7               	movwf	(main@Oct+5)& (0+255),b
   625   000F34  0E1F               	movlw	31
   626   000F36  6FD6               	movwf	(main@Oct+4)& (0+255),b
   627   000F38                     
   628                           ; BSR set to: 0
   629                           ;main.c: 187:         Oct.solarMidHours = 23;
   630   000F38  0E00               	movlw	0
   631   000F3A  6FD5               	movwf	(main@Oct+3)& (0+255),b
   632   000F3C  0E17               	movlw	23
   633   000F3E  6FD4               	movwf	(main@Oct+2)& (0+255),b
   634   000F40                     
   635                           ; BSR set to: 0
   636                           ;main.c: 188:         Oct.solarMidMinutes = 47;
   637   000F40  0E00               	movlw	0
   638   000F42  6FD3               	movwf	(main@Oct+1)& (0+255),b
   639   000F44  0E2F               	movlw	47
   640   000F46  6FD2               	movwf	main@Oct& (0+255),b
   641   000F48                     
   642                           ; BSR set to: 0
   643                           ;main.c: 190:     struct month_structure Nov;;main.c: 192:         Nov.days = 30;
   644   000F48  0E00               	movlw	0
   645   000F4A  6FDD               	movwf	(main@Nov+5)& (0+255),b
   646   000F4C  0E1E               	movlw	30
   647   000F4E  6FDC               	movwf	(main@Nov+4)& (0+255),b
   648   000F50                     
   649                           ; BSR set to: 0
   650                           ;main.c: 193:         Nov.solarMidHours = 23;
   651   000F50  0E00               	movlw	0
   652   000F52  6FDB               	movwf	(main@Nov+3)& (0+255),b
   653   000F54  0E17               	movlw	23
   654   000F56  6FDA               	movwf	(main@Nov+2)& (0+255),b
   655   000F58                     
   656                           ; BSR set to: 0
   657                           ;main.c: 194:         Nov.solarMidMinutes = 46;
   658   000F58  0E00               	movlw	0
   659   000F5A  6FD9               	movwf	(main@Nov+1)& (0+255),b
   660   000F5C  0E2E               	movlw	46
   661   000F5E  6FD8               	movwf	main@Nov& (0+255),b
   662   000F60                     
   663                           ; BSR set to: 0
   664                           ;main.c: 196:     struct month_structure Dec;;main.c: 198:         Dec.days = 31;
   665   000F60  0E00               	movlw	0
   666   000F62  6FE3               	movwf	(main@Dec+5)& (0+255),b
   667   000F64  0E1F               	movlw	31
   668   000F66  6FE2               	movwf	(main@Dec+4)& (0+255),b
   669   000F68                     
   670                           ; BSR set to: 0
   671                           ;main.c: 199:         Dec.solarMidHours = 23;
   672   000F68  0E00               	movlw	0
   673   000F6A  6FE1               	movwf	(main@Dec+3)& (0+255),b
   674   000F6C  0E17               	movlw	23
   675   000F6E  6FE0               	movwf	(main@Dec+2)& (0+255),b
   676   000F70                     
   677                           ; BSR set to: 0
   678                           ;main.c: 200:         Dec.solarMidMinutes = 56;
   679   000F70  0E00               	movlw	0
   680   000F72  6FDF               	movwf	(main@Dec+1)& (0+255),b
   681   000F74  0E38               	movlw	56
   682   000F76  6FDE               	movwf	main@Dec& (0+255),b
   683   000F78                     
   684                           ; BSR set to: 0
   685                           ;main.c: 208:     int size = 7;
   686   000F78  0E00               	movlw	0
   687   000F7A  6FE5               	movwf	(main@size+1)& (0+255),b
   688   000F7C  0E07               	movlw	7
   689   000F7E  6FE4               	movwf	main@size& (0+255),b
   690   000F80                     
   691                           ; BSR set to: 0
   692                           ;main.c: 209:     int DawnHours[7] = {0,0,0,0,0,0,0};
   693   000F80  EE20  F060         	lfsr	2,main@DawnHours
   694   000F84  0E0D               	movlw	13
   695   000F86                     u901:
   696   000F86  6ADE               	clrf	postinc2,c
   697   000F88  06E8               	decf	wreg,f,c
   698   000F8A  E2FD               	bc	u901
   699   000F8C                     
   700                           ; BSR set to: 0
   701                           ;main.c: 210:     int DawnMinutes[7] = {0,0,0,0,0,0,0};
   702   000F8C  EE20  F06E         	lfsr	2,main@DawnMinutes
   703   000F90  0E0D               	movlw	13
   704   000F92                     u911:
   705   000F92  6ADE               	clrf	postinc2,c
   706   000F94  06E8               	decf	wreg,f,c
   707   000F96  E2FD               	bc	u911
   708   000F98                     
   709                           ; BSR set to: 0
   710                           ;main.c: 211:     int DuskHours[7] = {0,0,0,0,0,0,0};
   711   000F98  EE20  F07C         	lfsr	2,main@DuskHours
   712   000F9C  0E0D               	movlw	13
   713   000F9E                     u921:
   714   000F9E  6ADE               	clrf	postinc2,c
   715   000FA0  06E8               	decf	wreg,f,c
   716   000FA2  E2FD               	bc	u921
   717   000FA4                     
   718                           ; BSR set to: 0
   719                           ;main.c: 212:     int DuskMinutes[7] = {0,0,0,0,0,0,0};
   720   000FA4  EE20  F08A         	lfsr	2,main@DuskMinutes
   721   000FA8  0E0D               	movlw	13
   722   000FAA                     u931:
   723   000FAA  6ADE               	clrf	postinc2,c
   724   000FAC  06E8               	decf	wreg,f,c
   725   000FAE  E2FD               	bc	u931
   726                           
   727                           ;main.c: 217:     ADC_init();
   728   000FB0  EC48  F00A         	call	_ADC_init	;wreg free
   729   000FB4                     
   730                           ;main.c: 220:     unsigned int light_threshold = 70;
   731   000FB4  0E00               	movlw	0
   732   000FB6  0100               	movlb	0	; () banked
   733   000FB8  6F99               	movwf	(main@light_threshold+1)& (0+255),b
   734   000FBA  0E46               	movlw	70
   735   000FBC  6F98               	movwf	main@light_threshold& (0+255),b
   736   000FBE                     l1574:
   737                           
   738                           ;main.c: 229:         clock.seconds = GLOBALsecs;
   739   000FBE  C0F6  F0EE         	movff	_GLOBALsecs,main@clock
   740   000FC2  C0F7  F0EF         	movff	_GLOBALsecs+1,main@clock+1
   741   000FC6                     
   742                           ;main.c: 230:         UpdateClock(&GLOBALsecs, &clock.minutes, &clock.hours, &clock.days
      +                          );
   743   000FC6  0EF6               	movlw	low _GLOBALsecs
   744   000FC8  6E39               	movwf	UpdateClock@seconds^0,c
   745   000FCA  0EF0               	movlw	low (main@clock+2)
   746   000FCC  6E3A               	movwf	UpdateClock@minutes^0,c
   747   000FCE  0EF2               	movlw	low (main@clock+4)
   748   000FD0  6E3B               	movwf	UpdateClock@hours^0,c
   749   000FD2  0EF4               	movlw	low (main@clock+6)
   750   000FD4  6E3C               	movwf	UpdateClock@days^0,c
   751   000FD6  ECB8  F008         	call	_UpdateClock	;wreg free
   752   000FDA                     
   753                           ;main.c: 233:         LEDarray_disp_bin(clock.hours);
   754   000FDA  C0F2  F039         	movff	main@clock+4,LEDarray_disp_bin@number
   755   000FDE  C0F3  F03A         	movff	main@clock+5,LEDarray_disp_bin@number+1
   756   000FE2  EC70  F009         	call	_LEDarray_disp_bin	;wreg free
   757   000FE6                     
   758                           ;main.c: 246:         unsigned int curval = ADC_getval();
   759   000FE6  EC0D  F00A         	call	_ADC_getval	;wreg free
   760   000FEA  C039  F09A         	movff	?_ADC_getval,main@curval
   761   000FEE  C03A  F09B         	movff	?_ADC_getval+1,main@curval+1
   762   000FF2                     
   763                           ;main.c: 249:         if (curval < light_threshold){
   764   000FF2  0100               	movlb	0	; () banked
   765   000FF4  5198               	movf	main@light_threshold& (0+255),w,b
   766   000FF6  5D9A               	subwf	main@curval& (0+255),w,b
   767   000FF8  5199               	movf	(main@light_threshold+1)& (0+255),w,b
   768   000FFA  599B               	subwfb	(main@curval+1)& (0+255),w,b
   769   000FFC  B0D8               	btfsc	status,0,c
   770   000FFE  EF03  F008         	goto	u941
   771   001002  EF05  F008         	goto	u940
   772   001006                     u941:
   773   001006  EF74  F008         	goto	l1604
   774   00100A                     u940:
   775   00100A                     
   776                           ; BSR set to: 0
   777                           ;main.c: 250:             LATHbits.LATH3 = 1;
   778   00100A  8680               	bsf	128,3,c	;volatile
   779   00100C                     
   780                           ; BSR set to: 0
   781                           ;main.c: 252:             if (clock.hours >=15 && clock.hours < 23) {
   782   00100C  BFF3               	btfsc	(main@clock+5)& (0+255),7,b
   783   00100E  EF12  F008         	goto	u951
   784   001012  51F3               	movf	(main@clock+5)& (0+255),w,b
   785   001014  E109               	bnz	u950
   786   001016  0E0F               	movlw	15
   787   001018  5DF2               	subwf	(main@clock+4)& (0+255),w,b
   788   00101A  A0D8               	btfss	status,0,c
   789   00101C  EF12  F008         	goto	u951
   790   001020  EF14  F008         	goto	u950
   791   001024                     u951:
   792   001024  EF3A  F008         	goto	l1592
   793   001028                     u950:
   794   001028                     
   795                           ; BSR set to: 0
   796   001028  BFF3               	btfsc	(main@clock+5)& (0+255),7,b
   797   00102A  EF22  F008         	goto	u960
   798   00102E  51F3               	movf	(main@clock+5)& (0+255),w,b
   799   001030  E107               	bnz	u961
   800   001032  0E17               	movlw	23
   801   001034  5DF2               	subwf	(main@clock+4)& (0+255),w,b
   802   001036  B0D8               	btfsc	status,0,c
   803   001038  EF20  F008         	goto	u961
   804   00103C  EF22  F008         	goto	u960
   805   001040                     u961:
   806   001040  EF3A  F008         	goto	l1592
   807   001044                     u960:
   808   001044                     
   809                           ; BSR set to: 0
   810                           ;main.c: 253:                 ArrayAppend(DuskHours, size, clock.hours);
   811   001044  0E7C               	movlw	low main@DuskHours
   812   001046  6E39               	movwf	ArrayAppend@arrayTime^0,c
   813   001048  C0E4  F03A         	movff	main@size,ArrayAppend@size
   814   00104C  C0E5  F03B         	movff	main@size+1,ArrayAppend@size+1
   815   001050  C0F2  F03C         	movff	main@clock+4,ArrayAppend@Time
   816   001054  C0F3  F03D         	movff	main@clock+5,ArrayAppend@Time+1
   817   001058  ECD4  F009         	call	_ArrayAppend	;wreg free
   818                           
   819                           ;main.c: 254:                 ArrayAppend(DuskMinutes, size, clock.minutes);
   820   00105C  0E8A               	movlw	low main@DuskMinutes
   821   00105E  6E39               	movwf	ArrayAppend@arrayTime^0,c
   822   001060  C0E4  F03A         	movff	main@size,ArrayAppend@size
   823   001064  C0E5  F03B         	movff	main@size+1,ArrayAppend@size+1
   824   001068  C0F0  F03C         	movff	main@clock+2,ArrayAppend@Time
   825   00106C  C0F1  F03D         	movff	main@clock+3,ArrayAppend@Time+1
   826   001070  ECD4  F009         	call	_ArrayAppend	;wreg free
   827   001074                     l1592:
   828                           
   829                           ;main.c: 257:             if (clock.hours >= 1 && clock.hours <= 5){
   830   001074  0100               	movlb	0	; () banked
   831   001076  BFF3               	btfsc	(main@clock+5)& (0+255),7,b
   832   001078  EF46  F008         	goto	u971
   833   00107C  51F3               	movf	(main@clock+5)& (0+255),w,b
   834   00107E  E108               	bnz	u970
   835   001080  05F2               	decf	(main@clock+4)& (0+255),w,b
   836   001082  A0D8               	btfss	status,0,c
   837   001084  EF46  F008         	goto	u971
   838   001088  EF48  F008         	goto	u970
   839   00108C                     u971:
   840   00108C  EF57  F008         	goto	l1598
   841   001090                     u970:
   842   001090                     
   843                           ; BSR set to: 0
   844   001090  BFF3               	btfsc	(main@clock+5)& (0+255),7,b
   845   001092  EF56  F008         	goto	u980
   846   001096  51F3               	movf	(main@clock+5)& (0+255),w,b
   847   001098  E107               	bnz	u981
   848   00109A  0E06               	movlw	6
   849   00109C  5DF2               	subwf	(main@clock+4)& (0+255),w,b
   850   00109E  B0D8               	btfsc	status,0,c
   851   0010A0  EF54  F008         	goto	u981
   852   0010A4  EF56  F008         	goto	u980
   853   0010A8                     u981:
   854   0010A8  EF57  F008         	goto	l1598
   855   0010AC                     u980:
   856   0010AC                     
   857                           ; BSR set to: 0
   858                           ;main.c: 258:                 LATHbits.LATH3 = 0;
   859   0010AC  9680               	bcf	128,3,c	;volatile
   860   0010AE                     l1598:
   861                           
   862                           ; BSR set to: 0
   863                           ;main.c: 261:             if (clock.hours >= 8 && clock.hours < 15){
   864   0010AE  BFF3               	btfsc	(main@clock+5)& (0+255),7,b
   865   0010B0  EF63  F008         	goto	u991
   866   0010B4  51F3               	movf	(main@clock+5)& (0+255),w,b
   867   0010B6  E109               	bnz	u990
   868   0010B8  0E08               	movlw	8
   869   0010BA  5DF2               	subwf	(main@clock+4)& (0+255),w,b
   870   0010BC  A0D8               	btfss	status,0,c
   871   0010BE  EF63  F008         	goto	u991
   872   0010C2  EF65  F008         	goto	u990
   873   0010C6                     u991:
   874   0010C6  EF74  F008         	goto	l1604
   875   0010CA                     u990:
   876   0010CA                     
   877                           ; BSR set to: 0
   878   0010CA  BFF3               	btfsc	(main@clock+5)& (0+255),7,b
   879   0010CC  EF73  F008         	goto	u1000
   880   0010D0  51F3               	movf	(main@clock+5)& (0+255),w,b
   881   0010D2  E107               	bnz	u1001
   882   0010D4  0E0F               	movlw	15
   883   0010D6  5DF2               	subwf	(main@clock+4)& (0+255),w,b
   884   0010D8  B0D8               	btfsc	status,0,c
   885   0010DA  EF71  F008         	goto	u1001
   886   0010DE  EF73  F008         	goto	u1000
   887   0010E2                     u1001:
   888   0010E2  EF74  F008         	goto	l1604
   889   0010E6                     u1000:
   890   0010E6                     
   891                           ; BSR set to: 0
   892                           ;main.c: 262:                 LATHbits.LATH3 = 0;
   893   0010E6  9680               	bcf	128,3,c	;volatile
   894   0010E8                     l1604:
   895                           
   896                           ; BSR set to: 0
   897                           ;main.c: 269:         if (curval > light_threshold){
   898   0010E8  519A               	movf	main@curval& (0+255),w,b
   899   0010EA  5D98               	subwf	main@light_threshold& (0+255),w,b
   900   0010EC  519B               	movf	(main@curval+1)& (0+255),w,b
   901   0010EE  5999               	subwfb	(main@light_threshold+1)& (0+255),w,b
   902   0010F0  B0D8               	btfsc	status,0,c
   903   0010F2  EF7D  F008         	goto	u1011
   904   0010F6  EF7F  F008         	goto	u1010
   905   0010FA                     u1011:
   906   0010FA  EFDF  F007         	goto	l1574
   907   0010FE                     u1010:
   908   0010FE                     
   909                           ; BSR set to: 0
   910                           ;main.c: 270:             LATHbits.LATH3 = 0;
   911   0010FE  9680               	bcf	128,3,c	;volatile
   912   001100                     
   913                           ; BSR set to: 0
   914                           ;main.c: 272:             if (clock.hours >=4 && clock.hours < 8) {
   915   001100  BFF3               	btfsc	(main@clock+5)& (0+255),7,b
   916   001102  EF8C  F008         	goto	u1021
   917   001106  51F3               	movf	(main@clock+5)& (0+255),w,b
   918   001108  E109               	bnz	u1020
   919   00110A  0E04               	movlw	4
   920   00110C  5DF2               	subwf	(main@clock+4)& (0+255),w,b
   921   00110E  A0D8               	btfss	status,0,c
   922   001110  EF8C  F008         	goto	u1021
   923   001114  EF8E  F008         	goto	u1020
   924   001118                     u1021:
   925   001118  EFDF  F007         	goto	l1574
   926   00111C                     u1020:
   927   00111C                     
   928                           ; BSR set to: 0
   929   00111C  BFF3               	btfsc	(main@clock+5)& (0+255),7,b
   930   00111E  EF9C  F008         	goto	u1030
   931   001122  51F3               	movf	(main@clock+5)& (0+255),w,b
   932   001124  E107               	bnz	u1031
   933   001126  0E08               	movlw	8
   934   001128  5DF2               	subwf	(main@clock+4)& (0+255),w,b
   935   00112A  B0D8               	btfsc	status,0,c
   936   00112C  EF9A  F008         	goto	u1031
   937   001130  EF9C  F008         	goto	u1030
   938   001134                     u1031:
   939   001134  EFDF  F007         	goto	l1574
   940   001138                     u1030:
   941   001138                     
   942                           ; BSR set to: 0
   943                           ;main.c: 273:                 ArrayAppend(DawnHours, size, clock.hours);
   944   001138  0E60               	movlw	low main@DawnHours
   945   00113A  6E39               	movwf	ArrayAppend@arrayTime^0,c
   946   00113C  C0E4  F03A         	movff	main@size,ArrayAppend@size
   947   001140  C0E5  F03B         	movff	main@size+1,ArrayAppend@size+1
   948   001144  C0F2  F03C         	movff	main@clock+4,ArrayAppend@Time
   949   001148  C0F3  F03D         	movff	main@clock+5,ArrayAppend@Time+1
   950   00114C  ECD4  F009         	call	_ArrayAppend	;wreg free
   951                           
   952                           ;main.c: 274:                 ArrayAppend(DawnMinutes, size, clock.minutes);
   953   001150  0E6E               	movlw	low main@DawnMinutes
   954   001152  6E39               	movwf	ArrayAppend@arrayTime^0,c
   955   001154  C0E4  F03A         	movff	main@size,ArrayAppend@size
   956   001158  C0E5  F03B         	movff	main@size+1,ArrayAppend@size+1
   957   00115C  C0F0  F03C         	movff	main@clock+2,ArrayAppend@Time
   958   001160  C0F1  F03D         	movff	main@clock+3,ArrayAppend@Time+1
   959   001164  ECD4  F009         	call	_ArrayAppend	;wreg free
   960   001168  EFDF  F007         	goto	l1574
   961   00116C  EF18  F000         	goto	start
   962   001170                     __end_of_main:
   963                           	callstack 0
   964                           
   965 ;; *************** function _UpdateClock *****************
   966 ;; Defined at:
   967 ;;		line 24 in file "clock.c"
   968 ;; Parameters:    Size  Location     Type
   969 ;;  seconds         1    0[COMRAM] PTR int 
   970 ;;		 -> GLOBALsecs(2), 
   971 ;;  minutes         1    1[COMRAM] PTR int 
   972 ;;		 -> main@clock(8), 
   973 ;;  hours           1    2[COMRAM] PTR int 
   974 ;;		 -> main@clock(8), 
   975 ;;  days            1    3[COMRAM] PTR int 
   976 ;;		 -> main@clock(8), 
   977 ;; Auto vars:     Size  Location     Type
   978 ;;		None
   979 ;; Return value:  Size  Location     Type
   980 ;;                  1    wreg      void 
   981 ;; Registers used:
   982 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
   983 ;; Tracked objects:
   984 ;;		On entry : 0/0
   985 ;;		On exit  : 0/0
   986 ;;		Unchanged: 0/0
   987 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   988 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   989 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   990 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   991 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   992 ;;Total ram usage:        6 bytes
   993 ;; Hardware stack levels used: 1
   994 ;; Hardware stack levels required when called: 1
   995 ;; This function calls:
   996 ;;		Nothing
   997 ;; This function is called by:
   998 ;;		_main
   999 ;; This function uses a non-reentrant model
  1000 ;;
  1001                           
  1002                           	psect	text1
  1003   001170                     __ptext1:
  1004                           	callstack 0
  1005   001170                     _UpdateClock:
  1006                           	callstack 29
  1007   001170                     
  1008                           ;clock.c: 27:             *hours = *seconds;
  1009   001170  5039               	movf	UpdateClock@seconds^0,w,c
  1010   001172  6ED9               	movwf	fsr2l,c
  1011   001174  6ADA               	clrf	fsr2h,c
  1012   001176  503B               	movf	UpdateClock@hours^0,w,c
  1013   001178  6EE1               	movwf	fsr1l,c
  1014   00117A  6AE2               	clrf	fsr1h,c
  1015   00117C  CFDE FFE6          	movff	postinc2,postinc1
  1016   001180  CFDD FFE5          	movff	postdec2,postdec1
  1017   001184                     
  1018                           ;clock.c: 28:             if (*seconds >= 24 ){
  1019   001184  5039               	movf	UpdateClock@seconds^0,w,c
  1020   001186  6ED9               	movwf	fsr2l,c
  1021   001188  6ADA               	clrf	fsr2h,c
  1022   00118A  0E01               	movlw	1
  1023   00118C  BEDB               	btfsc	plusw2,7,c
  1024   00118E  EFD3  F008         	goto	u751
  1025   001192  0E01               	movlw	1
  1026   001194  50DB               	movf	plusw2,w,c
  1027   001196  E109               	bnz	u750
  1028   001198  0E18               	movlw	24
  1029   00119A  5CDE               	subwf	postinc2,w,c
  1030   00119C  A0D8               	btfss	status,0,c
  1031   00119E  EFD3  F008         	goto	u751
  1032   0011A2  EFD5  F008         	goto	u750
  1033   0011A6                     u751:
  1034   0011A6  EFF1  F008         	goto	l1400
  1035   0011AA                     u750:
  1036   0011AA                     
  1037                           ;clock.c: 29:                 *seconds = 0;
  1038   0011AA  5039               	movf	UpdateClock@seconds^0,w,c
  1039   0011AC  6ED9               	movwf	fsr2l,c
  1040   0011AE  6ADA               	clrf	fsr2h,c
  1041   0011B0  6ADE               	clrf	postinc2,c
  1042   0011B2  6ADD               	clrf	postdec2,c
  1043                           
  1044                           ;clock.c: 30:                 *hours = 0;
  1045   0011B4  503B               	movf	UpdateClock@hours^0,w,c
  1046   0011B6  6ED9               	movwf	fsr2l,c
  1047   0011B8  6ADA               	clrf	fsr2h,c
  1048   0011BA  6ADE               	clrf	postinc2,c
  1049   0011BC  6ADD               	clrf	postdec2,c
  1050   0011BE                     
  1051                           ;clock.c: 31:                 *days = *days + 1;
  1052   0011BE  503C               	movf	UpdateClock@days^0,w,c
  1053   0011C0  6ED9               	movwf	fsr2l,c
  1054   0011C2  6ADA               	clrf	fsr2h,c
  1055   0011C4  CFDE F03D          	movff	postinc2,??_UpdateClock
  1056   0011C8  CFDD F03E          	movff	postdec2,??_UpdateClock+1
  1057   0011CC  0E01               	movlw	1
  1058   0011CE  263D               	addwf	??_UpdateClock^0,f,c
  1059   0011D0  0E00               	movlw	0
  1060   0011D2  223E               	addwfc	(??_UpdateClock+1)^0,f,c
  1061   0011D4  503C               	movf	UpdateClock@days^0,w,c
  1062   0011D6  6ED9               	movwf	fsr2l,c
  1063   0011D8  6ADA               	clrf	fsr2h,c
  1064   0011DA  C03D  FFDE         	movff	??_UpdateClock,postinc2
  1065   0011DE  C03E  FFDD         	movff	??_UpdateClock+1,postdec2
  1066   0011E2                     l1400:
  1067                           
  1068                           ;clock.c: 35:     if (*seconds >= 60 ){
  1069   0011E2  5039               	movf	UpdateClock@seconds^0,w,c
  1070   0011E4  6ED9               	movwf	fsr2l,c
  1071   0011E6  6ADA               	clrf	fsr2h,c
  1072   0011E8  0E01               	movlw	1
  1073   0011EA  BEDB               	btfsc	plusw2,7,c
  1074   0011EC  EF02  F009         	goto	u761
  1075   0011F0  0E01               	movlw	1
  1076   0011F2  50DB               	movf	plusw2,w,c
  1077   0011F4  E109               	bnz	u760
  1078   0011F6  0E3C               	movlw	60
  1079   0011F8  5CDE               	subwf	postinc2,w,c
  1080   0011FA  A0D8               	btfss	status,0,c
  1081   0011FC  EF02  F009         	goto	u761
  1082   001200  EF04  F009         	goto	u760
  1083   001204                     u761:
  1084   001204  EF1B  F009         	goto	l1406
  1085   001208                     u760:
  1086   001208                     
  1087                           ;clock.c: 36:         *seconds = 0;
  1088   001208  5039               	movf	UpdateClock@seconds^0,w,c
  1089   00120A  6ED9               	movwf	fsr2l,c
  1090   00120C  6ADA               	clrf	fsr2h,c
  1091   00120E  6ADE               	clrf	postinc2,c
  1092   001210  6ADD               	clrf	postdec2,c
  1093   001212                     
  1094                           ;clock.c: 37:         *minutes = *minutes + 1;
  1095   001212  503A               	movf	UpdateClock@minutes^0,w,c
  1096   001214  6ED9               	movwf	fsr2l,c
  1097   001216  6ADA               	clrf	fsr2h,c
  1098   001218  CFDE F03D          	movff	postinc2,??_UpdateClock
  1099   00121C  CFDD F03E          	movff	postdec2,??_UpdateClock+1
  1100   001220  0E01               	movlw	1
  1101   001222  263D               	addwf	??_UpdateClock^0,f,c
  1102   001224  0E00               	movlw	0
  1103   001226  223E               	addwfc	(??_UpdateClock+1)^0,f,c
  1104   001228  503A               	movf	UpdateClock@minutes^0,w,c
  1105   00122A  6ED9               	movwf	fsr2l,c
  1106   00122C  6ADA               	clrf	fsr2h,c
  1107   00122E  C03D  FFDE         	movff	??_UpdateClock,postinc2
  1108   001232  C03E  FFDD         	movff	??_UpdateClock+1,postdec2
  1109   001236                     l1406:
  1110                           
  1111                           ;clock.c: 40:     if (*minutes >= 60){
  1112   001236  503A               	movf	UpdateClock@minutes^0,w,c
  1113   001238  6ED9               	movwf	fsr2l,c
  1114   00123A  6ADA               	clrf	fsr2h,c
  1115   00123C  0E01               	movlw	1
  1116   00123E  BEDB               	btfsc	plusw2,7,c
  1117   001240  EF2C  F009         	goto	u771
  1118   001244  0E01               	movlw	1
  1119   001246  50DB               	movf	plusw2,w,c
  1120   001248  E109               	bnz	u770
  1121   00124A  0E3C               	movlw	60
  1122   00124C  5CDE               	subwf	postinc2,w,c
  1123   00124E  A0D8               	btfss	status,0,c
  1124   001250  EF2C  F009         	goto	u771
  1125   001254  EF2E  F009         	goto	u770
  1126   001258                     u771:
  1127   001258  EF45  F009         	goto	l1412
  1128   00125C                     u770:
  1129   00125C                     
  1130                           ;clock.c: 41:     *minutes = 0;
  1131   00125C  503A               	movf	UpdateClock@minutes^0,w,c
  1132   00125E  6ED9               	movwf	fsr2l,c
  1133   001260  6ADA               	clrf	fsr2h,c
  1134   001262  6ADE               	clrf	postinc2,c
  1135   001264  6ADD               	clrf	postdec2,c
  1136   001266                     
  1137                           ;clock.c: 42:     *hours = *hours + 1;
  1138   001266  503B               	movf	UpdateClock@hours^0,w,c
  1139   001268  6ED9               	movwf	fsr2l,c
  1140   00126A  6ADA               	clrf	fsr2h,c
  1141   00126C  CFDE F03D          	movff	postinc2,??_UpdateClock
  1142   001270  CFDD F03E          	movff	postdec2,??_UpdateClock+1
  1143   001274  0E01               	movlw	1
  1144   001276  263D               	addwf	??_UpdateClock^0,f,c
  1145   001278  0E00               	movlw	0
  1146   00127A  223E               	addwfc	(??_UpdateClock+1)^0,f,c
  1147   00127C  503B               	movf	UpdateClock@hours^0,w,c
  1148   00127E  6ED9               	movwf	fsr2l,c
  1149   001280  6ADA               	clrf	fsr2h,c
  1150   001282  C03D  FFDE         	movff	??_UpdateClock,postinc2
  1151   001286  C03E  FFDD         	movff	??_UpdateClock+1,postdec2
  1152   00128A                     l1412:
  1153                           
  1154                           ;clock.c: 45:     if (*hours >= 24){
  1155   00128A  503B               	movf	UpdateClock@hours^0,w,c
  1156   00128C  6ED9               	movwf	fsr2l,c
  1157   00128E  6ADA               	clrf	fsr2h,c
  1158   001290  0E01               	movlw	1
  1159   001292  BEDB               	btfsc	plusw2,7,c
  1160   001294  EF56  F009         	goto	u781
  1161   001298  0E01               	movlw	1
  1162   00129A  50DB               	movf	plusw2,w,c
  1163   00129C  E109               	bnz	u780
  1164   00129E  0E18               	movlw	24
  1165   0012A0  5CDE               	subwf	postinc2,w,c
  1166   0012A2  A0D8               	btfss	status,0,c
  1167   0012A4  EF56  F009         	goto	u781
  1168   0012A8  EF58  F009         	goto	u780
  1169   0012AC                     u781:
  1170   0012AC  EF6F  F009         	goto	l252
  1171   0012B0                     u780:
  1172   0012B0                     
  1173                           ;clock.c: 46:     *hours = 0;
  1174   0012B0  503B               	movf	UpdateClock@hours^0,w,c
  1175   0012B2  6ED9               	movwf	fsr2l,c
  1176   0012B4  6ADA               	clrf	fsr2h,c
  1177   0012B6  6ADE               	clrf	postinc2,c
  1178   0012B8  6ADD               	clrf	postdec2,c
  1179   0012BA                     
  1180                           ;clock.c: 47:     *days = *days + 1;
  1181   0012BA  503C               	movf	UpdateClock@days^0,w,c
  1182   0012BC  6ED9               	movwf	fsr2l,c
  1183   0012BE  6ADA               	clrf	fsr2h,c
  1184   0012C0  CFDE F03D          	movff	postinc2,??_UpdateClock
  1185   0012C4  CFDD F03E          	movff	postdec2,??_UpdateClock+1
  1186   0012C8  0E01               	movlw	1
  1187   0012CA  263D               	addwf	??_UpdateClock^0,f,c
  1188   0012CC  0E00               	movlw	0
  1189   0012CE  223E               	addwfc	(??_UpdateClock+1)^0,f,c
  1190   0012D0  503C               	movf	UpdateClock@days^0,w,c
  1191   0012D2  6ED9               	movwf	fsr2l,c
  1192   0012D4  6ADA               	clrf	fsr2h,c
  1193   0012D6  C03D  FFDE         	movff	??_UpdateClock,postinc2
  1194   0012DA  C03E  FFDD         	movff	??_UpdateClock+1,postdec2
  1195   0012DE                     l252:
  1196   0012DE  0012               	return		;funcret
  1197   0012E0                     __end_of_UpdateClock:
  1198                           	callstack 0
  1199                           
  1200 ;; *************** function _Timer0_init *****************
  1201 ;; Defined at:
  1202 ;;		line 8 in file "timers.c"
  1203 ;; Parameters:    Size  Location     Type
  1204 ;;		None
  1205 ;; Auto vars:     Size  Location     Type
  1206 ;;		None
  1207 ;; Return value:  Size  Location     Type
  1208 ;;                  1    wreg      void 
  1209 ;; Registers used:
  1210 ;;		wreg, status,2
  1211 ;; Tracked objects:
  1212 ;;		On entry : 0/0
  1213 ;;		On exit  : 0/0
  1214 ;;		Unchanged: 0/0
  1215 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1216 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1217 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1218 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1219 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1220 ;;Total ram usage:        0 bytes
  1221 ;; Hardware stack levels used: 1
  1222 ;; Hardware stack levels required when called: 1
  1223 ;; This function calls:
  1224 ;;		Nothing
  1225 ;; This function is called by:
  1226 ;;		_main
  1227 ;; This function uses a non-reentrant model
  1228 ;;
  1229                           
  1230                           	psect	text2
  1231   001470                     __ptext2:
  1232                           	callstack 0
  1233   001470                     _Timer0_init:
  1234                           	callstack 29
  1235   001470                     
  1236                           ;timers.c: 10:     T0CON1bits.T0CS=0b010;
  1237   001470  50D6               	movf	214,w,c	;volatile
  1238   001472  0B1F               	andlw	-225
  1239   001474  0940               	iorlw	64
  1240   001476  6ED6               	movwf	214,c	;volatile
  1241   001478                     
  1242                           ;timers.c: 11:     T0CON1bits.T0ASYNC=1;
  1243   001478  88D6               	bsf	214,4,c	;volatile
  1244                           
  1245                           ;timers.c: 13:     T0CON1bits.T0CKPS=0b1000;
  1246   00147A  50D6               	movf	214,w,c	;volatile
  1247   00147C  0BF0               	andlw	-16
  1248   00147E  0908               	iorlw	8
  1249   001480  6ED6               	movwf	214,c	;volatile
  1250   001482                     
  1251                           ;timers.c: 15:     T0CON0bits.T016BIT=1;
  1252   001482  88D5               	bsf	213,4,c	;volatile
  1253                           
  1254                           ;timers.c: 18:     TMR0H = 0b00001011;
  1255   001484  0E0B               	movlw	11
  1256   001486  6ED4               	movwf	212,c	;volatile
  1257                           
  1258                           ;timers.c: 19:     TMR0L = 0b11011100;
  1259   001488  0EDC               	movlw	220
  1260   00148A  6ED3               	movwf	211,c	;volatile
  1261   00148C                     
  1262                           ;timers.c: 35:     T0CON0bits.T0EN=1;
  1263   00148C  8ED5               	bsf	213,7,c	;volatile
  1264   00148E  0012               	return		;funcret
  1265   001490                     __end_of_Timer0_init:
  1266                           	callstack 0
  1267                           
  1268 ;; *************** function _LEDarray_init *****************
  1269 ;; Defined at:
  1270 ;;		line 8 in file "LEDarray.c"
  1271 ;; Parameters:    Size  Location     Type
  1272 ;;		None
  1273 ;; Auto vars:     Size  Location     Type
  1274 ;;		None
  1275 ;; Return value:  Size  Location     Type
  1276 ;;                  1    wreg      void 
  1277 ;; Registers used:
  1278 ;;		None
  1279 ;; Tracked objects:
  1280 ;;		On entry : 0/0
  1281 ;;		On exit  : 0/0
  1282 ;;		Unchanged: 0/0
  1283 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1284 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1285 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1286 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1287 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1288 ;;Total ram usage:        0 bytes
  1289 ;; Hardware stack levels used: 1
  1290 ;; Hardware stack levels required when called: 1
  1291 ;; This function calls:
  1292 ;;		Nothing
  1293 ;; This function is called by:
  1294 ;;		_main
  1295 ;; This function uses a non-reentrant model
  1296 ;;
  1297                           
  1298                           	psect	text3
  1299   00144A                     __ptext3:
  1300                           	callstack 0
  1301   00144A                     _LEDarray_init:
  1302                           	callstack 29
  1303   00144A                     
  1304                           ;LEDarray.c: 16:     TRISGbits.TRISG0 = 0;
  1305   00144A  9087               	bcf	135,0,c	;volatile
  1306                           
  1307                           ;LEDarray.c: 17:     LATGbits.LATG0 = 0;
  1308   00144C  907F               	bcf	127,0,c	;volatile
  1309                           
  1310                           ;LEDarray.c: 19:     TRISGbits.TRISG1 = 0;
  1311   00144E  9287               	bcf	135,1,c	;volatile
  1312                           
  1313                           ;LEDarray.c: 20:     LATGbits.LATG1 = 0;
  1314   001450  927F               	bcf	127,1,c	;volatile
  1315                           
  1316                           ;LEDarray.c: 22:     TRISAbits.TRISA2 = 0;
  1317   001452  9481               	bcf	129,2,c	;volatile
  1318                           
  1319                           ;LEDarray.c: 23:     LATAbits.LATA2 = 0;
  1320   001454  9479               	bcf	121,2,c	;volatile
  1321                           
  1322                           ;LEDarray.c: 25:     TRISFbits.TRISF6 = 0;
  1323   001456  9C86               	bcf	134,6,c	;volatile
  1324                           
  1325                           ;LEDarray.c: 26:     LATFbits.LATF6 = 0;
  1326   001458  9C7E               	bcf	126,6,c	;volatile
  1327                           
  1328                           ;LEDarray.c: 28:     TRISAbits.TRISA4 = 0;
  1329   00145A  9881               	bcf	129,4,c	;volatile
  1330                           
  1331                           ;LEDarray.c: 29:     LATAbits.LATA4 = 0;
  1332   00145C  9879               	bcf	121,4,c	;volatile
  1333                           
  1334                           ;LEDarray.c: 31:     TRISAbits.TRISA5 = 0;
  1335   00145E  9A81               	bcf	129,5,c	;volatile
  1336                           
  1337                           ;LEDarray.c: 32:     LATAbits.LATA5 = 0;
  1338   001460  9A79               	bcf	121,5,c	;volatile
  1339                           
  1340                           ;LEDarray.c: 34:     TRISFbits.TRISF0 = 0;
  1341   001462  9086               	bcf	134,0,c	;volatile
  1342                           
  1343                           ;LEDarray.c: 35:     LATFbits.LATF0 = 0;
  1344   001464  907E               	bcf	126,0,c	;volatile
  1345                           
  1346                           ;LEDarray.c: 37:     TRISBbits.TRISB0 = 0;
  1347   001466  9082               	bcf	130,0,c	;volatile
  1348                           
  1349                           ;LEDarray.c: 38:     LATBbits.LATB0 = 0;
  1350   001468  907A               	bcf	122,0,c	;volatile
  1351                           
  1352                           ;LEDarray.c: 40:     TRISBbits.TRISB1 = 0;
  1353   00146A  9282               	bcf	130,1,c	;volatile
  1354                           
  1355                           ;LEDarray.c: 41:     LATBbits.LATB1 = 0;
  1356   00146C  927A               	bcf	122,1,c	;volatile
  1357   00146E  0012               	return		;funcret
  1358   001470                     __end_of_LEDarray_init:
  1359                           	callstack 0
  1360                           
  1361 ;; *************** function _LEDarray_disp_bin *****************
  1362 ;; Defined at:
  1363 ;;		line 49 in file "LEDarray.c"
  1364 ;; Parameters:    Size  Location     Type
  1365 ;;  number          2    0[COMRAM] unsigned int 
  1366 ;; Auto vars:     Size  Location     Type
  1367 ;;		None
  1368 ;; Return value:  Size  Location     Type
  1369 ;;                  1    wreg      void 
  1370 ;; Registers used:
  1371 ;;		None
  1372 ;; Tracked objects:
  1373 ;;		On entry : 0/0
  1374 ;;		On exit  : 0/0
  1375 ;;		Unchanged: 0/0
  1376 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1377 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1378 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1379 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1380 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1381 ;;Total ram usage:        2 bytes
  1382 ;; Hardware stack levels used: 1
  1383 ;; Hardware stack levels required when called: 1
  1384 ;; This function calls:
  1385 ;;		Nothing
  1386 ;; This function is called by:
  1387 ;;		_main
  1388 ;; This function uses a non-reentrant model
  1389 ;;
  1390                           
  1391                           	psect	text4
  1392   0012E0                     __ptext4:
  1393                           	callstack 0
  1394   0012E0                     _LEDarray_disp_bin:
  1395                           	callstack 29
  1396   0012E0                     
  1397                           ;LEDarray.c: 49: void LEDarray_disp_bin(unsigned int number);LEDarray.c: 50: {;LEDarray.
      +                          c: 53:     if (number & 0b000000001){ LATGbits.LATG0 = 1 ; }
  1398   0012E0  A039               	btfss	LEDarray_disp_bin@number^0,0,c
  1399   0012E2  EF75  F009         	goto	u791
  1400   0012E6  EF77  F009         	goto	u790
  1401   0012EA                     u791:
  1402   0012EA  EF7A  F009         	goto	l91
  1403   0012EE                     u790:
  1404   0012EE  807F               	bsf	127,0,c	;volatile
  1405   0012F0  EF7B  F009         	goto	l92
  1406   0012F4                     l91:
  1407   0012F4  907F               	bcf	127,0,c	;volatile
  1408   0012F6                     l92:
  1409                           
  1410                           ;LEDarray.c: 56:     if (number & 0b000000010){ LATGbits.LATG1 = 1 ; }
  1411   0012F6  A239               	btfss	LEDarray_disp_bin@number^0,1,c
  1412   0012F8  EF80  F009         	goto	u801
  1413   0012FC  EF82  F009         	goto	u800
  1414   001300                     u801:
  1415   001300  EF85  F009         	goto	l93
  1416   001304                     u800:
  1417   001304  827F               	bsf	127,1,c	;volatile
  1418   001306  EF86  F009         	goto	l94
  1419   00130A                     l93:
  1420   00130A  927F               	bcf	127,1,c	;volatile
  1421   00130C                     l94:
  1422                           
  1423                           ;LEDarray.c: 59:     if (number & 0b000000100){ LATAbits.LATA2 = 1 ; }
  1424   00130C  A439               	btfss	LEDarray_disp_bin@number^0,2,c
  1425   00130E  EF8B  F009         	goto	u811
  1426   001312  EF8D  F009         	goto	u810
  1427   001316                     u811:
  1428   001316  EF90  F009         	goto	l95
  1429   00131A                     u810:
  1430   00131A  8479               	bsf	121,2,c	;volatile
  1431   00131C  EF91  F009         	goto	l96
  1432   001320                     l95:
  1433   001320  9479               	bcf	121,2,c	;volatile
  1434   001322                     l96:
  1435                           
  1436                           ;LEDarray.c: 62:     if (number & 0b000001000){ LATFbits.LATF6 = 1 ; }
  1437   001322  A639               	btfss	LEDarray_disp_bin@number^0,3,c
  1438   001324  EF96  F009         	goto	u821
  1439   001328  EF98  F009         	goto	u820
  1440   00132C                     u821:
  1441   00132C  EF9B  F009         	goto	l97
  1442   001330                     u820:
  1443   001330  8C7E               	bsf	126,6,c	;volatile
  1444   001332  EF9C  F009         	goto	l98
  1445   001336                     l97:
  1446   001336  9C7E               	bcf	126,6,c	;volatile
  1447   001338                     l98:
  1448                           
  1449                           ;LEDarray.c: 65:     if (number & 0b000010000){ LATAbits.LATA4 = 1 ; }
  1450   001338  A839               	btfss	LEDarray_disp_bin@number^0,4,c
  1451   00133A  EFA1  F009         	goto	u831
  1452   00133E  EFA3  F009         	goto	u830
  1453   001342                     u831:
  1454   001342  EFA6  F009         	goto	l99
  1455   001346                     u830:
  1456   001346  8879               	bsf	121,4,c	;volatile
  1457   001348  EFA7  F009         	goto	l100
  1458   00134C                     l99:
  1459   00134C  9879               	bcf	121,4,c	;volatile
  1460   00134E                     l100:
  1461                           
  1462                           ;LEDarray.c: 68:     if (number & 0b000100000){ LATAbits.LATA5 = 1 ; }
  1463   00134E  AA39               	btfss	LEDarray_disp_bin@number^0,5,c
  1464   001350  EFAC  F009         	goto	u841
  1465   001354  EFAE  F009         	goto	u840
  1466   001358                     u841:
  1467   001358  EFB1  F009         	goto	l101
  1468   00135C                     u840:
  1469   00135C  8A79               	bsf	121,5,c	;volatile
  1470   00135E  EFB2  F009         	goto	l102
  1471   001362                     l101:
  1472   001362  9A79               	bcf	121,5,c	;volatile
  1473   001364                     l102:
  1474                           
  1475                           ;LEDarray.c: 71:     if (number & 0b001000000){ LATFbits.LATF0 = 1 ; }
  1476   001364  AC39               	btfss	LEDarray_disp_bin@number^0,6,c
  1477   001366  EFB7  F009         	goto	u851
  1478   00136A  EFB9  F009         	goto	u850
  1479   00136E                     u851:
  1480   00136E  EFBC  F009         	goto	l103
  1481   001372                     u850:
  1482   001372  807E               	bsf	126,0,c	;volatile
  1483   001374  EFBD  F009         	goto	l104
  1484   001378                     l103:
  1485   001378  907E               	bcf	126,0,c	;volatile
  1486   00137A                     l104:
  1487                           
  1488                           ;LEDarray.c: 74:     if (number & 0b010000000){ LATBbits.LATB0 = 1 ; }
  1489   00137A  AE39               	btfss	LEDarray_disp_bin@number^0,7,c
  1490   00137C  EFC2  F009         	goto	u861
  1491   001380  EFC4  F009         	goto	u860
  1492   001384                     u861:
  1493   001384  EFC7  F009         	goto	l105
  1494   001388                     u860:
  1495   001388  807A               	bsf	122,0,c	;volatile
  1496   00138A  EFC8  F009         	goto	l106
  1497   00138E                     l105:
  1498   00138E  907A               	bcf	122,0,c	;volatile
  1499   001390                     l106:
  1500                           
  1501                           ;LEDarray.c: 77:     if (number & 0b100000000){ LATBbits.LATB1 = 1 ; }
  1502   001390  A03A               	btfss	(LEDarray_disp_bin@number+1)^0,0,c
  1503   001392  EFCD  F009         	goto	u871
  1504   001396  EFCF  F009         	goto	u870
  1505   00139A                     u871:
  1506   00139A  EFD2  F009         	goto	l107
  1507   00139E                     u870:
  1508   00139E  827A               	bsf	122,1,c	;volatile
  1509   0013A0  EFD3  F009         	goto	l109
  1510   0013A4                     l107:
  1511   0013A4  927A               	bcf	122,1,c	;volatile
  1512   0013A6                     l109:
  1513   0013A6  0012               	return		;funcret
  1514   0013A8                     __end_of_LEDarray_disp_bin:
  1515                           	callstack 0
  1516                           
  1517 ;; *************** function _Interrupts_init *****************
  1518 ;; Defined at:
  1519 ;;		line 9 in file "interrupts.c"
  1520 ;; Parameters:    Size  Location     Type
  1521 ;;		None
  1522 ;; Auto vars:     Size  Location     Type
  1523 ;;		None
  1524 ;; Return value:  Size  Location     Type
  1525 ;;                  1    wreg      void 
  1526 ;; Registers used:
  1527 ;;		None
  1528 ;; Tracked objects:
  1529 ;;		On entry : 0/0
  1530 ;;		On exit  : 0/0
  1531 ;;		Unchanged: 0/0
  1532 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1533 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1534 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1535 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1536 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1537 ;;Total ram usage:        0 bytes
  1538 ;; Hardware stack levels used: 1
  1539 ;; Hardware stack levels required when called: 1
  1540 ;; This function calls:
  1541 ;;		Nothing
  1542 ;; This function is called by:
  1543 ;;		_main
  1544 ;; This function uses a non-reentrant model
  1545 ;;
  1546                           
  1547                           	psect	text5
  1548   0014C0                     __ptext5:
  1549                           	callstack 0
  1550   0014C0                     _Interrupts_init:
  1551                           	callstack 29
  1552   0014C0                     
  1553                           ;interrupts.c: 15:   INTCONbits.PEIE = 1;
  1554   0014C0  8CF2               	bsf	242,6,c	;volatile
  1555                           
  1556                           ;interrupts.c: 19:     PIE0bits.TMR0IE = 1;
  1557   0014C2  010E               	movlb	14	; () banked
  1558   0014C4  8B29               	bsf	41,5,b	;volatile
  1559                           
  1560                           ;interrupts.c: 20:     PIR0bits.TMR0IF = 0;
  1561   0014C6  9B33               	bcf	51,5,b	;volatile
  1562                           
  1563                           ;interrupts.c: 21:     IPR0bits.TMR0IP = 1;
  1564   0014C8  8B1F               	bsf	31,5,b	;volatile
  1565                           
  1566                           ;interrupts.c: 24:     INTCONbits.GIE=1;
  1567   0014CA  8EF2               	bsf	242,7,c	;volatile
  1568   0014CC                     
  1569                           ; BSR set to: 14
  1570   0014CC  0012               	return		;funcret
  1571   0014CE                     __end_of_Interrupts_init:
  1572                           	callstack 0
  1573                           
  1574 ;; *************** function _ArrayAppend *****************
  1575 ;; Defined at:
  1576 ;;		line 6 in file "synchronisation.c"
  1577 ;; Parameters:    Size  Location     Type
  1578 ;;  arrayTime       1    0[COMRAM] PTR int 
  1579 ;;		 -> main@DuskMinutes(14), main@DuskHours(14), main@DawnMinutes(14), main@DawnHours(14), 
  1580 ;;  size            2    1[COMRAM] int 
  1581 ;;  Time            2    3[COMRAM] int 
  1582 ;; Auto vars:     Size  Location     Type
  1583 ;;  i               2    8[COMRAM] int 
  1584 ;; Return value:  Size  Location     Type
  1585 ;;                  2    0[COMRAM] int 
  1586 ;; Registers used:
  1587 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  1588 ;; Tracked objects:
  1589 ;;		On entry : 0/0
  1590 ;;		On exit  : 0/0
  1591 ;;		Unchanged: 0/0
  1592 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1593 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1594 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1595 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1596 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1597 ;;Total ram usage:       10 bytes
  1598 ;; Hardware stack levels used: 1
  1599 ;; Hardware stack levels required when called: 1
  1600 ;; This function calls:
  1601 ;;		Nothing
  1602 ;; This function is called by:
  1603 ;;		_main
  1604 ;; This function uses a non-reentrant model
  1605 ;;
  1606                           
  1607                           	psect	text6
  1608   0013A8                     __ptext6:
  1609                           	callstack 0
  1610   0013A8                     _ArrayAppend:
  1611                           	callstack 29
  1612   0013A8                     
  1613                           ;synchronisation.c: 8:         for (int i = 1; i <= size-1; i++) {
  1614   0013A8  0E00               	movlw	0
  1615   0013AA  6E42               	movwf	(ArrayAppend@i+1)^0,c
  1616   0013AC  0E01               	movlw	1
  1617   0013AE  6E41               	movwf	ArrayAppend@i^0,c
  1618   0013B0  EFF7  F009         	goto	l1458
  1619   0013B4                     l1448:
  1620                           
  1621                           ;synchronisation.c: 10:             if (i = 6) {
  1622   0013B4  0E00               	movlw	0
  1623   0013B6  6E42               	movwf	(ArrayAppend@i+1)^0,c
  1624   0013B8  0E06               	movlw	6
  1625   0013BA  6E41               	movwf	ArrayAppend@i^0,c
  1626   0013BC                     
  1627                           ;synchronisation.c: 11:                 arrayTime[i-1] = arrayTime[i];
  1628   0013BC  5039               	movf	ArrayAppend@arrayTime^0,w,c
  1629   0013BE  6ED9               	movwf	fsr2l,c
  1630   0013C0  6ADA               	clrf	fsr2h,c
  1631   0013C2  0E0C               	movlw	12
  1632   0013C4  26D9               	addwf	fsr2l,f,c
  1633   0013C6  5039               	movf	ArrayAppend@arrayTime^0,w,c
  1634   0013C8  6EE1               	movwf	fsr1l,c
  1635   0013CA  6AE2               	clrf	fsr1h,c
  1636   0013CC  0E0A               	movlw	10
  1637   0013CE  26E1               	addwf	fsr1l,f,c
  1638   0013D0  CFDE FFE6          	movff	postinc2,postinc1
  1639   0013D4  CFDD FFE5          	movff	postdec2,postdec1
  1640   0013D8                     
  1641                           ;synchronisation.c: 12:                 arrayTime[i] = Time;
  1642   0013D8  5039               	movf	ArrayAppend@arrayTime^0,w,c
  1643   0013DA  6ED9               	movwf	fsr2l,c
  1644   0013DC  6ADA               	clrf	fsr2h,c
  1645   0013DE  0E0C               	movlw	12
  1646   0013E0  26D9               	addwf	fsr2l,f,c
  1647   0013E2  C03C  FFDE         	movff	ArrayAppend@Time,postinc2
  1648   0013E6  C03D  FFDD         	movff	ArrayAppend@Time+1,postdec2
  1649   0013EA                     
  1650                           ;synchronisation.c: 18:         }
  1651   0013EA  4A41               	infsnz	ArrayAppend@i^0,f,c
  1652   0013EC  2A42               	incf	(ArrayAppend@i+1)^0,f,c
  1653   0013EE                     l1458:
  1654   0013EE  0EFF               	movlw	255
  1655   0013F0  243A               	addwf	ArrayAppend@size^0,w,c
  1656   0013F2  6E3E               	movwf	??_ArrayAppend^0,c
  1657   0013F4  0EFF               	movlw	255
  1658   0013F6  203B               	addwfc	(ArrayAppend@size+1)^0,w,c
  1659   0013F8  6E3F               	movwf	(??_ArrayAppend+1)^0,c
  1660   0013FA  5041               	movf	ArrayAppend@i^0,w,c
  1661   0013FC  5C3E               	subwf	??_ArrayAppend^0,w,c
  1662   0013FE  503F               	movf	(??_ArrayAppend+1)^0,w,c
  1663   001400  0A80               	xorlw	128
  1664   001402  6E40               	movwf	(??_ArrayAppend+2)^0,c
  1665   001404  5042               	movf	(ArrayAppend@i+1)^0,w,c
  1666   001406  0A80               	xorlw	128
  1667   001408  5840               	subwfb	(??_ArrayAppend+2)^0,w,c
  1668   00140A  B0D8               	btfsc	status,0,c
  1669   00140C  EF0A  F00A         	goto	u891
  1670   001410  EF0C  F00A         	goto	u890
  1671   001414                     u891:
  1672   001414  EFDA  F009         	goto	l1448
  1673   001418                     u890:
  1674   001418  0012               	return		;funcret
  1675   00141A                     __end_of_ArrayAppend:
  1676                           	callstack 0
  1677                           
  1678 ;; *************** function _ADC_init *****************
  1679 ;; Defined at:
  1680 ;;		line 9 in file "ADC.c"
  1681 ;; Parameters:    Size  Location     Type
  1682 ;;		None
  1683 ;; Auto vars:     Size  Location     Type
  1684 ;;		None
  1685 ;; Return value:  Size  Location     Type
  1686 ;;                  1    wreg      void 
  1687 ;; Registers used:
  1688 ;;		wreg, status,2
  1689 ;; Tracked objects:
  1690 ;;		On entry : 0/0
  1691 ;;		On exit  : 0/0
  1692 ;;		Unchanged: 0/0
  1693 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1694 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1695 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1696 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1697 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1698 ;;Total ram usage:        0 bytes
  1699 ;; Hardware stack levels used: 1
  1700 ;; Hardware stack levels required when called: 1
  1701 ;; This function calls:
  1702 ;;		Nothing
  1703 ;; This function is called by:
  1704 ;;		_main
  1705 ;; This function uses a non-reentrant model
  1706 ;;
  1707                           
  1708                           	psect	text7
  1709   001490                     __ptext7:
  1710                           	callstack 0
  1711   001490                     _ADC_init:
  1712                           	callstack 29
  1713   001490                     
  1714                           ;ADC.c: 11:     TRISAbits.TRISA3=1;
  1715   001490  8681               	bsf	129,3,c	;volatile
  1716                           
  1717                           ;ADC.c: 12:     ANSELAbits.ANSELA3=1;
  1718   001492  010E               	movlb	14	; () banked
  1719   001494  8792               	bsf	146,3,b	;volatile
  1720                           
  1721                           ;ADC.c: 14:     ADREFbits.ADNREF = 0;
  1722   001496  010F               	movlb	15	; () banked
  1723   001498  9958               	bcf	88,4,b	;volatile
  1724   00149A                     
  1725                           ; BSR set to: 15
  1726                           ;ADC.c: 15:     ADREFbits.ADPREF = 0b00;
  1727   00149A  0EFC               	movlw	-4
  1728   00149C  1758               	andwf	88,f,b	;volatile
  1729                           
  1730                           ;ADC.c: 16:     ADPCH=0b11;
  1731   00149E  0E03               	movlw	3
  1732   0014A0  6F5F               	movwf	95,b	;volatile
  1733   0014A2                     
  1734                           ; BSR set to: 15
  1735                           ;ADC.c: 17:     ADCON0bits.ADFM = 0;
  1736   0014A2  9460               	bcf	96,2,c	;volatile
  1737   0014A4                     
  1738                           ; BSR set to: 15
  1739                           ;ADC.c: 18:     ADCON0bits.ADCS = 1;
  1740   0014A4  8860               	bsf	96,4,c	;volatile
  1741   0014A6                     
  1742                           ; BSR set to: 15
  1743                           ;ADC.c: 19:     ADCON0bits.ADON = 1;
  1744   0014A6  8E60               	bsf	96,7,c	;volatile
  1745   0014A8                     
  1746                           ; BSR set to: 15
  1747   0014A8  0012               	return		;funcret
  1748   0014AA                     __end_of_ADC_init:
  1749                           	callstack 0
  1750                           
  1751 ;; *************** function _ADC_getval *****************
  1752 ;; Defined at:
  1753 ;;		line 22 in file "ADC.c"
  1754 ;; Parameters:    Size  Location     Type
  1755 ;;		None
  1756 ;; Auto vars:     Size  Location     Type
  1757 ;;  tmpval          2    2[COMRAM] unsigned int 
  1758 ;; Return value:  Size  Location     Type
  1759 ;;                  2    0[COMRAM] unsigned int 
  1760 ;; Registers used:
  1761 ;;		wreg, status,2, status,0
  1762 ;; Tracked objects:
  1763 ;;		On entry : 0/0
  1764 ;;		On exit  : 0/0
  1765 ;;		Unchanged: 0/0
  1766 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1767 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1768 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1769 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1770 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1771 ;;Total ram usage:        4 bytes
  1772 ;; Hardware stack levels used: 1
  1773 ;; Hardware stack levels required when called: 1
  1774 ;; This function calls:
  1775 ;;		Nothing
  1776 ;; This function is called by:
  1777 ;;		_main
  1778 ;; This function uses a non-reentrant model
  1779 ;;
  1780                           
  1781                           	psect	text8
  1782   00141A                     __ptext8:
  1783                           	callstack 0
  1784   00141A                     _ADC_getval:
  1785                           	callstack 29
  1786   00141A                     
  1787                           ;ADC.c: 24:     unsigned int tmpval;;ADC.c: 26:     ADCON0bits.GO = 1;
  1788   00141A  8060               	bsf	96,0,c	;volatile
  1789   00141C                     l66:
  1790   00141C  B060               	btfsc	96,0,c	;volatile
  1791   00141E  EF13  F00A         	goto	u881
  1792   001422  EF15  F00A         	goto	u880
  1793   001426                     u881:
  1794   001426  EF0E  F00A         	goto	l66
  1795   00142A                     u880:
  1796   00142A                     
  1797                           ;ADC.c: 30:     tmpval = ADRESH;
  1798   00142A  CF64 F03B          	movff	3940,ADC_getval@tmpval	;volatile
  1799   00142E  6A3C               	clrf	(ADC_getval@tmpval+1)^0,c
  1800   001430                     
  1801                           ;ADC.c: 34:     tmpval = 255 - tmpval;
  1802   001430  503B               	movf	ADC_getval@tmpval^0,w,c
  1803   001432  08FF               	sublw	255
  1804   001434  6E3B               	movwf	ADC_getval@tmpval^0,c
  1805   001436  503C               	movf	(ADC_getval@tmpval+1)^0,w,c
  1806   001438  A0D8               	btfss	status,0,c
  1807   00143A  2AE8               	incf	wreg,f,c
  1808   00143C  0800               	sublw	0
  1809   00143E  6E3C               	movwf	(ADC_getval@tmpval+1)^0,c
  1810   001440                     
  1811                           ;ADC.c: 36:     return tmpval;
  1812   001440  C03B  F039         	movff	ADC_getval@tmpval,?_ADC_getval
  1813   001444  C03C  F03A         	movff	ADC_getval@tmpval+1,?_ADC_getval+1
  1814   001448  0012               	return		;funcret
  1815   00144A                     __end_of_ADC_getval:
  1816                           	callstack 0
  1817                           
  1818 ;; *************** function _HighISR *****************
  1819 ;; Defined at:
  1820 ;;		line 31 in file "interrupts.c"
  1821 ;; Parameters:    Size  Location     Type
  1822 ;;		None
  1823 ;; Auto vars:     Size  Location     Type
  1824 ;;		None
  1825 ;; Return value:  Size  Location     Type
  1826 ;;                  1    wreg      void 
  1827 ;; Registers used:
  1828 ;;		wreg, status,2, status,0
  1829 ;; Tracked objects:
  1830 ;;		On entry : 0/0
  1831 ;;		On exit  : 0/0
  1832 ;;		Unchanged: 0/0
  1833 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1834 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1835 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1836 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1837 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1838 ;;Total ram usage:        0 bytes
  1839 ;; Hardware stack levels used: 1
  1840 ;; This function calls:
  1841 ;;		Nothing
  1842 ;; This function is called by:
  1843 ;;		Interrupt level 2
  1844 ;; This function uses a non-reentrant model
  1845 ;;
  1846                           
  1847                           	psect	intcode
  1848   000008                     __pintcode:
  1849                           	callstack 0
  1850   000008                     _HighISR:
  1851                           	callstack 29
  1852                           
  1853                           ;incstack = 0
  1854   000008  8243               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  1855   00000A                     
  1856                           ;interrupts.c: 35:     if(PIR0bits.TMR0IF){
  1857   00000A  010E               	movlb	14	; () banked
  1858   00000C  AB33               	btfss	51,5,b	;volatile
  1859   00000E  EF0B  F000         	goto	i2u104_41
  1860   000012  EF0D  F000         	goto	i2u104_40
  1861   000016                     i2u104_41:
  1862   000016  EF16  F000         	goto	i2l224
  1863   00001A                     i2u104_40:
  1864   00001A                     
  1865                           ; BSR set to: 14
  1866                           ;interrupts.c: 37:         TMR0H = 0b00001011;
  1867   00001A  0E0B               	movlw	11
  1868   00001C  6ED4               	movwf	212,c	;volatile
  1869                           
  1870                           ;interrupts.c: 38:         TMR0L = 0b11011100;
  1871   00001E  0EDC               	movlw	220
  1872   000020  6ED3               	movwf	211,c	;volatile
  1873   000022                     
  1874                           ; BSR set to: 14
  1875                           ;interrupts.c: 39:         GLOBALsecs++;
  1876   000022  0100               	movlb	0	; () banked
  1877   000024  4BF6               	infsnz	_GLOBALsecs& (0+255),f,b
  1878   000026  2BF7               	incf	(_GLOBALsecs+1)& (0+255),f,b
  1879   000028                     
  1880                           ; BSR set to: 0
  1881                           ;interrupts.c: 40:         PIR0bits.TMR0IF=0;
  1882   000028  010E               	movlb	14	; () banked
  1883   00002A  9B33               	bcf	51,5,b	;volatile
  1884   00002C                     i2l224:
  1885                           
  1886                           ; BSR set to: 14
  1887   00002C  9243               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1888   00002E  0011               	retfie		f
  1889   000030                     __end_of_HighISR:
  1890                           	callstack 0
  1891                           
  1892                           	psect	smallconst
  1893   000E00                     __psmallconst:
  1894                           	callstack 0
  1895   000E00  00                 	db	0
  1896   000E01  00                 	db	0	; dummy byte at the end
  1897   000000                     
  1898                           	psect	rparam
  1899   000000                     
  1900                           	psect	temp
  1901   000043                     btemp:
  1902                           	callstack 0
  1903   000043                     	ds	1
  1904   000000                     int$flags	set	btemp
  1905   000000                     wtemp8	set	btemp+1
  1906   000000                     ttemp5	set	btemp+1
  1907   000000                     ttemp6	set	btemp+4
  1908   000000                     ttemp7	set	btemp+8
  1909                           
  1910                           	psect	config
  1911                           
  1912                           ;Config register CONFIG1L @ 0x300000
  1913                           ;	External Oscillator mode Selection bits
  1914                           ;	FEXTOSC = HS, HS (crystal oscillator) above 8 MHz; PFM set to high power
  1915                           ;	Power-up default value for COSC bits
  1916                           ;	RSTOSC = EXTOSC_4PLL, EXTOSC with 4x PLL, with EXTOSC operating per FEXTOSC bits
  1917   300000                     	org	3145728
  1918   300000  AA                 	db	170
  1919                           
  1920                           ;Config register CONFIG1H @ 0x300001
  1921                           ;	unspecified, using default values
  1922                           ;	Clock Out Enable bit
  1923                           ;	CLKOUTEN = 0x1, unprogrammed default
  1924                           ;	Clock Switch Enable bit
  1925                           ;	CSWEN = 0x1, unprogrammed default
  1926                           ;	Fail-Safe Clock Monitor Enable bit
  1927                           ;	FCMEN = 0x1, unprogrammed default
  1928   300001                     	org	3145729
  1929   300001  FF                 	db	255
  1930                           
  1931                           ;Config register CONFIG3L @ 0x300004
  1932                           ;	WDT Period Select bits
  1933                           ;	WDTCPS = 0x1F, unprogrammed default
  1934                           ;	WDT operating mode
  1935                           ;	WDTE = OFF, WDT Disabled
  1936   300004                     	org	3145732
  1937   300004  9F                 	db	159
  1938                           
  1939                           ;Config register CONFIG3H @ 0x300005
  1940                           ;	unspecified, using default values
  1941                           ;	WDT Window Select bits
  1942                           ;	WDTCWS = 0x7, unprogrammed default
  1943                           ;	WDT input clock selector
  1944                           ;	WDTCCS = 0x7, unprogrammed default
  1945   300005                     	org	3145733
  1946   300005  FF                 	db	255
  1947                           tosu	equ	0xFFF
  1948                           tosh	equ	0xFFE
  1949                           tosl	equ	0xFFD
  1950                           stkptr	equ	0xFFC
  1951                           pclatu	equ	0xFFB
  1952                           pclath	equ	0xFFA
  1953                           pcl	equ	0xFF9
  1954                           tblptru	equ	0xFF8
  1955                           tblptrh	equ	0xFF7
  1956                           tblptrl	equ	0xFF6
  1957                           tablat	equ	0xFF5
  1958                           prodh	equ	0xFF4
  1959                           prodl	equ	0xFF3
  1960                           indf0	equ	0xFEF
  1961                           postinc0	equ	0xFEE
  1962                           postdec0	equ	0xFED
  1963                           preinc0	equ	0xFEC
  1964                           plusw0	equ	0xFEB
  1965                           fsr0h	equ	0xFEA
  1966                           fsr0l	equ	0xFE9
  1967                           wreg	equ	0xFE8
  1968                           indf1	equ	0xFE7
  1969                           postinc1	equ	0xFE6
  1970                           postdec1	equ	0xFE5
  1971                           preinc1	equ	0xFE4
  1972                           plusw1	equ	0xFE3
  1973                           fsr1h	equ	0xFE2
  1974                           fsr1l	equ	0xFE1
  1975                           bsr	equ	0xFE0
  1976                           indf2	equ	0xFDF
  1977                           postinc2	equ	0xFDE
  1978                           postdec2	equ	0xFDD
  1979                           preinc2	equ	0xFDC
  1980                           plusw2	equ	0xFDB
  1981                           fsr2h	equ	0xFDA
  1982                           fsr2l	equ	0xFD9
  1983                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         56
    Persistent  2
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     10      66
    BANK0           160    150     152
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          234      0       0

Pointer List with Targets:

    ArrayAppend@arrayTime	PTR int  size(1) Largest target is 14
		 -> main@DawnHours(BANK0[14]), main@DawnMinutes(BANK0[14]), main@DuskHours(BANK0[14]), main@DuskMinutes(BANK0[14]), 

    UpdateClock@days	PTR int  size(1) Largest target is 8
		 -> main@clock(BANK0[8]), 

    UpdateClock@hours	PTR int  size(1) Largest target is 8
		 -> main@clock(BANK0[8]), 

    UpdateClock@minutes	PTR int  size(1) Largest target is 8
		 -> main@clock(BANK0[8]), 

    UpdateClock@seconds	PTR int  size(1) Largest target is 2
		 -> GLOBALsecs(BANK0[2]), 


Critical Paths under _main in COMRAM

    _main->_ArrayAppend

Critical Paths under _HighISR in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _HighISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _HighISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _HighISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _HighISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _HighISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _HighISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _HighISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _HighISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _HighISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _HighISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _HighISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _HighISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _HighISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _HighISR in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                               150   150      0    3695
                                              0 BANK0    150   150      0
                         _ADC_getval
                           _ADC_init
                        _ArrayAppend
                    _Interrupts_init
                  _LEDarray_disp_bin
                      _LEDarray_init
                        _Timer0_init
                        _UpdateClock
 ---------------------------------------------------------------------------------
 (1) _UpdateClock                                          6     2      4     722
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _Timer0_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LEDarray_init                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LEDarray_disp_bin                                    2     0      2     274
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _Interrupts_init                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ArrayAppend                                         10     5      5    1207
                                              0 COMRAM    10     5      5
 ---------------------------------------------------------------------------------
 (1) _ADC_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ADC_getval                                           4     2      2      46
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (2) _HighISR                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_getval
   _ADC_init
   _ArrayAppend
   _Interrupts_init
   _LEDarray_disp_bin
   _LEDarray_init
   _Timer0_init
   _UpdateClock

 _HighISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             DE9      0       0      50        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK13           EA      0       0      30        0.0%
BANK13              EA      0       0      31        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     96      98       5       95.0%
BITBIGSFRllhlhh     84      0       0      42        0.0%
BITBIGSFRlllhh      5E      0       0      45        0.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E      A      42       1       70.2%
BITBIGSFRhhll       4A      0       0      34        0.0%
BITBIGSFRllhll      33      0       0      44        0.0%
BITBIGSFRlllll      30      0       0      48        0.0%
BITBIGSFRhhlhh      1B      0       0      33        0.0%
BITBIGSFRllhhhh     14      0       0      39        0.0%
BITBIGSFRhhh         D      0       0      32        0.0%
BITBIGSFRllllh       9      0       0      47        0.0%
BITBIGSFRlllhl       9      0       0      46        0.0%
BITBIGSFRllhlhl      8      0       0      43        0.0%
BITBIGSFRllhhl       6      0       0      41        0.0%
BITBIGSFRllhhhl      3      0       0      40        0.0%
BITBIGSFRllhhhh      1      0       0      38        0.0%
BITBIGSFRlhh         1      0       0      36        0.0%
BITBIGSFRlhl         1      0       0      37        0.0%
BITBIGSFRhl          1      0       0      35        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      DA      49        0.0%
DATA                 0      0      DA       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.45 build 20230818022343 
Symbol Table                                                                                   Thu Feb 08 20:23:23 2024

                       l63 14A8                         l66 141C                         l91 12F4  
                       l68 142A                         l92 12F6                         l69 1448  
                       l93 130A                         l94 130C                         l95 1320  
                       l96 1322                         l88 146E                         l97 1336  
                       l98 1338                         l99 134C              main@DawnHours 0060  
        ??_Interrupts_init 0039                        l100 134E                        l101 1362  
                      l102 1364                        l103 1378                        l104 137A  
                      l105 138E                        l106 1390                        l107 13A4  
                      l109 13A6                        l218 14CC                        l260 1418  
                      l252 12DE                        l237 148E                        u800 1304  
                      u801 1300                        u810 131A                        u811 1316  
                      u820 1330                        u821 132C                        u901 0F86  
                      u830 1346                        u750 11AA                        u831 1342  
                      u751 11A6                        u911 0F92                        u840 135C  
                      u760 1208                        u841 1358                        u761 1204  
                      u921 0F9E                        u850 1372                        u770 125C  
                      u851 136E                        u771 1258                        u931 0FAA  
                      u860 1388                        u780 12B0                        u940 100A  
                      u861 1384                        u781 12AC                        u941 1006  
                      u870 139E                        u790 12EE                        u950 1028  
                      u871 139A                        u791 12EA                        u951 1024  
                      u880 142A                        u960 1044                        u881 1426  
                      u961 1040                        u890 1418                        u970 1090  
                      u891 1414                        u971 108C                        u980 10AC  
                      u981 10A8                        u990 10CA                        u991 10C6  
                      wreg 0FE8                       l1400 11E2                       l1410 1266  
                     l1402 1208                       l1420 12EE                       l1412 128A  
                     l1404 1212                       l1500 0E80                       l1430 135C  
                     l1422 1304                       l1414 12B0                       l1406 1236  
                     l1510 0EA8                       l1502 0E88                       l1440 1430  
                     l1432 1372                       l1424 131A                       l1416 12BA  
                     l1408 125C                       l1600 10CA                       l1520 0ED0  
                     l1512 0EB0                       l1504 0E90                       l1442 1440  
                     l1450 13BC                       l1434 1388                       l1426 1330  
                     l1418 12E0                       l1370 144A                       l1610 111C  
                     l1602 10E6                       l1530 0EF8                       l1522 0ED8  
                     l1514 0EB8                       l1506 0E98                       l1452 13D8  
                     l1380 14C0                       l1436 139E                       l1428 1346  
                     l1372 1470                       l1612 1138                       l1604 10E8  
                     l1540 0F20                       l1532 0F00                       l1524 0EE0  
                     l1516 0EC0                       l1508 0EA0                       l1460 0E02  
                     l1438 141A                       l1390 14A6                       l1382 1490  
                     l1446 13A8                       l1374 1478                       l1606 10FE  
                     l1550 0F48                       l1542 0F28                       l1534 0F08  
                     l1526 0EE8                       l1518 0EC8                       l1470 0E12  
                     l1462 0E06                       l1384 149A                       l1456 13EA  
                     l1448 13B4                       l1376 1482                       l1392 1170  
                     l1608 1100                       l1560 0F70                       l1552 0F50  
                     l1544 0F30                       l1536 0F10                       l1528 0EF0  
                     l1480 0E30                       l1472 0E14                       l1464 0E0A  
                     l1386 14A2                       l1458 13EE                       l1378 148C  
                     l1394 1184                       l1570 0FA4                       l1562 0F78  
                     l1554 0F58                       l1546 0F38                       l1538 0F18  
                     l1490 0E58                       l1482 0E38                       l1474 0E16  
                     l1466 0E0E                       l1388 14A4                       l1396 11AA  
                     l1580 0FE6                       l1572 0FB4                       l1564 0F80  
                     l1556 0F60                       l1548 0F40                       l1492 0E60  
                     l1484 0E40                       l1476 0E20                       l1468 0E10  
                     l1398 11BE                       l1590 1044                       l1582 0FF2  
                     l1574 0FBE                       l1566 0F8C                       l1558 0F68  
                     l1494 0E68                       l1486 0E48                       l1478 0E28  
                     l1592 1074                       l1584 100A                       l1576 0FC6  
                     l1568 0F98                       l1496 0E70                       l1488 0E50  
                     l1594 1090                       l1586 100C                       l1578 0FDA  
                     l1498 0E78                       l1596 10AC                       l1588 1028  
                     l1598 10AE                       u1000 10E6                       u1001 10E2  
                     u1010 10FE                       u1011 10FA                       u1020 111C  
                     u1021 1118                       u1030 1138                       u1031 1134  
            main@DuskHours 007C                       _main 0E02            main@DawnMinutes 006E  
                     fsr1h 0FE2                       fsr2h 0FDA                       fsr1l 0FE1  
                     fsr2l 0FD9                       btemp 0043                       start 0030  
         __end_of_ADC_init 14AA        main@light_threshold 0098            __end_of_HighISR 0030  
             ___param_bank 0000        __end_of_ArrayAppend 141A                      ?_main 0039  
                    _ADPCH 0F5F                      i2l224 002C                      _TMR0H 0FD4  
                    _TMR0L 0FD3                      plusw2 0FDB                      ttemp5 0044  
                    ttemp6 0047                      ttemp7 004B                      status 0FD8  
                    wtemp8 0044            __initialization 14AA            ArrayAppend@Time 003C  
             __end_of_main 1170            ArrayAppend@size 003A                     ??_main 0043  
            __activetblptr 0000                     _ADRESH 0F64           UpdateClock@hours 003B  
                   i2l1620 0028                     i2l1614 000A                     i2l1616 001A  
                   i2l1618 0022                  ??_HighISR 0039                _ArrayAppend 13A8  
        _LEDarray_disp_bin 12E0         ?_LEDarray_disp_bin 0039               ??_ADC_getval 003B  
            ??_Timer0_init 0039            main@DuskMinutes 008A        ??_LEDarray_disp_bin 003B  
                   clear_0 14B0                     isa$std 0001               __mediumconst 0000  
                ?_ADC_init 0039         __end_of_ADC_getval 144A  __end_of_LEDarray_disp_bin 13A8  
               __accesstop 0060              ??_UpdateClock 003D    __end_of__initialization 14B6  
            ___rparam_used 0001              _LEDarray_init 144A            _Interrupts_init 14C0  
           __pcstackCOMRAM 0039        __end_of_Timer0_init 1490                 ??_ADC_init 0039  
           ?_LEDarray_init 0039        __end_of_UpdateClock 12E0    __end_of_Interrupts_init 14CE  
                  _HighISR 0008       ArrayAppend@arrayTime 0039                  _ADREFbits 0F58  
                  __Hparam 0000                    __Lparam 0000                _Timer0_init 1470  
             __psmallconst 0E00                    __pcinit 14AA                    __ramtop 0E00  
                  __ptext0 0E02                    __ptext1 1170                    __ptext2 1470  
                  __ptext3 144A                    __ptext4 12E0                    __ptext5 14C0  
                  __ptext6 13A8                    __ptext7 1490                    __ptext8 141A  
                  main@Dec 00DE                    main@Feb 00A2                    main@Aug 00C6  
                  main@Apr 00AE                    main@Jan 009C                    main@Mar 00A8  
                  main@May 00B4                    main@Oct 00D2                    main@Jul 00C0  
                  main@Jun 00BA                    main@Sep 00CC                    main@Nov 00D8  
     end_of_initialization 14B6           ADC_getval@tmpval 003B            ??_LEDarray_init 0039  
              _UpdateClock 1170               ?_ArrayAppend 0039                    postdec1 0FE5  
                  postdec2 0FDD                    postinc0 0FEE                    postinc1 0FE6  
                  postinc2 0FDE                 main@F14191 001D                 main@F14193 000F  
               main@F14195 0001                 main@F14189 002B                  _TRISAbits 0F81  
                _TRISBbits 0F82                  _TRISDbits 0F84                  _TRISFbits 0F86  
                _TRISGbits 0F87                  _TRISHbits 0F88                _CM1CON0bits 0ED0  
              _CM1CON1bits 0ED1           ?_Interrupts_init 0039                 main@curval 009A  
      start_initialization 14AA            UpdateClock@days 003C                __pbssCOMRAM 0001  
            __pcstackBANK0 0060                   ?_HighISR 0039                  __pnvBANK0 00F6  
             ?_Timer0_init 0039                  __pintcode 0008                __smallconst 0E00  
                 _ADC_init 1490               ?_UpdateClock 0039                   _LATAbits 0F79  
       UpdateClock@minutes 003A         UpdateClock@seconds 0039                   _LATBbits 0F7A  
                 _LATDbits 0F7C                   _LATFbits 0F7E                   _LATGbits 0F7F  
                 _LATHbits 0F80                   _IPR0bits 0E1F                   _PIE0bits 0E29  
                 i2u104_40 001A                   i2u104_41 0016                   _PIR0bits 0E33  
                main@DSTon 00E6                 _ADCON0bits 0F60                  main@clock 00EE  
               _CM1NCHbits 0ED2                 _CM1PCHbits 0ED3      __end_of_LEDarray_init 1470  
                 __Hrparam 0000                 _ADC_getval 141A                   __Lrparam 0000  
               _ANSELAbits 0E92                 _T0CON0bits 0FD5                 _T0CON1bits 0FD6  
  LEDarray_disp_bin@number 0039                 _GLOBALsecs 00F6                   isa$xinst 0000  
                 int$flags 0043                   main@size 00E4               ArrayAppend@i 0041  
               _INTCONbits 0FF2                   intlevel2 0000               _DAC1CON0bits 0EC6  
             _DAC1CON1bits 0EC7                ?_ADC_getval 0039              ??_ArrayAppend 003E  
