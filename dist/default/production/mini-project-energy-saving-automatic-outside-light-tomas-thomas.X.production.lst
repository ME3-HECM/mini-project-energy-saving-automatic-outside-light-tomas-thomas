

Microchip MPLAB XC8 Assembler V2.45 build 20230818022343 
                                                                                               Fri Feb 09 01:01:52 2024

Microchip MPLAB XC8 C Compiler v2.45 (Free license) build 20230818022343 Og1 
     1                           	processor	18F67K40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1,group=3
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=2
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=3
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=3
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=3
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=3
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=2
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=2
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    43                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    44                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    45                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    46                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    47   000000                     
    48                           ; Generated 21/07/2023 GMT
    49                           ; 
    50                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    51                           ; All rights reserved.
    52                           ; 
    53                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    54                           ; 
    55                           ; Redistribution and use in source and binary forms, with or without modification, are
    56                           ; permitted provided that the following conditions are met:
    57                           ; 
    58                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    59                           ;        conditions and the following disclaimer.
    60                           ; 
    61                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    62                           ;        of conditions and the following disclaimer in the documentation and/or other
    63                           ;        materials provided with the distribution. Publication is not required when
    64                           ;        this file is used in an embedded application.
    65                           ; 
    66                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    67                           ;        software without specific prior written permission.
    68                           ; 
    69                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    70                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    71                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    72                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    73                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    74                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    75                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    76                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    77                           ; 
    78                           ; 
    79                           ; Code-generator required, PIC18F67K40 Definitions
    80                           ; 
    81                           ; SFR Addresses
    82   000000                     
    83                           	psect	idataBANK0
    84   0023BC                     __pidataBANK0:
    85                           	callstack 0
    86                           
    87                           ;initializer for UpdateClock@F14152
    88   0023BC  001F               	dw	31
    89   0023BE  001C               	dw	28
    90   0023C0  001F               	dw	31
    91   0023C2  001E               	dw	30
    92   0023C4  001F               	dw	31
    93   0023C6  001E               	dw	30
    94   0023C8  001F               	dw	31
    95   0023CA  001F               	dw	31
    96   0023CC  001E               	dw	30
    97   0023CE  001F               	dw	31
    98   0023D0  001E               	dw	30
    99   0023D2  001F               	dw	31
   100   000000                     _TRISCbits	set	3971
   101   000000                     _TRISEbits	set	3973
   102   000000                     _LATEbits	set	3965
   103   000000                     _LATCbits	set	3963
   104   000000                     _LATBbits	set	3962
   105   000000                     _TRISBbits	set	3970
   106   000000                     _LATFbits	set	3966
   107   000000                     _TRISAbits	set	3969
   108   000000                     _LATGbits	set	3967
   109   000000                     _TRISGbits	set	3975
   110   000000                     _CM1CON1bits	set	3793
   111   000000                     _TRISFbits	set	3974
   112   000000                     _LATHbits	set	3968
   113   000000                     _TRISHbits	set	3976
   114   000000                     _IPR0bits	set	3615
   115   000000                     _PIE0bits	set	3625
   116   000000                     _LATDbits	set	3964
   117   000000                     _TRISDbits	set	3972
   118   000000                     _TMR0L	set	4051
   119   000000                     _TMR0H	set	4052
   120   000000                     _T0CON0bits	set	4053
   121   000000                     _T0CON1bits	set	4054
   122   000000                     _INTCONbits	set	4082
   123   000000                     _PIR0bits	set	3635
   124   000000                     _ANSELAbits	set	3730
   125   000000                     _DAC1CON0bits	set	3782
   126   000000                     _CM1CON0bits	set	3792
   127   000000                     _CM1NCHbits	set	3794
   128   000000                     _DAC1CON1bits	set	3783
   129   000000                     _ADREFbits	set	3928
   130   000000                     _LATAbits	set	3961
   131   000000                     _CM1PCHbits	set	3795
   132   000000                     _ADPCH	set	3935
   133   000000                     _ADRESH	set	3940
   134   000000                     _ADCON0bits	set	3936
   135                           
   136                           	psect	smallconst
   137   000E00                     __psmallconst:
   138                           	callstack 0
   139   000E00  00                 	db	0
   140   000E01                     STR_1:
   141                           
   142                           ; BSR set to: 14
   143   000E01  54                 	db	84	;'T'
   144   000E02  69                 	db	105	;'i'
   145   000E03  6D                 	db	109	;'m'
   146   000E04  65                 	db	101	;'e'
   147   000E05  3A                 	db	58	;':'
   148   000E06  25                 	db	37
   149   000E07  30                 	db	48	;'0'
   150   000E08  32                 	db	50	;'2'
   151   000E09  64                 	db	100	;'d'
   152   000E0A  3A                 	db	58	;':'
   153   000E0B  25                 	db	37
   154   000E0C  30                 	db	48	;'0'
   155   000E0D  32                 	db	50	;'2'
   156   000E0E  64                 	db	100	;'d'
   157   000E0F  3A                 	db	58	;':'
   158   000E10  25                 	db	37
   159   000E11  30                 	db	48	;'0'
   160   000E12  32                 	db	50	;'2'
   161   000E13  64                 	db	100	;'d'
   162   000E14  20                 	db	32
   163   000E15  44                 	db	68	;'D'
   164   000E16  25                 	db	37
   165   000E17  30                 	db	48	;'0'
   166   000E18  31                 	db	49	;'1'
   167   000E19  64                 	db	100	;'d'
   168   000E1A  00                 	db	0
   169   000E1B                     
   170                           ; BSR set to: 14
   171   000E1B  54                 	db	84	;'T'
   172   000E1C  69                 	db	105	;'i'
   173   000E1D  6D                 	db	109	;'m'
   174   000E1E  65                 	db	101	;'e'
   175   000E1F  3A                 	db	58	;':'
   176   000E20  20                 	db	32
   177   000E21  25                 	db	37
   178   000E22  30                 	db	48	;'0'
   179   000E23  32                 	db	50	;'2'
   180   000E24  64                 	db	100	;'d'
   181   000E25  3A                 	db	58	;':'
   182   000E26  25                 	db	37
   183   000E27  30                 	db	48	;'0'
   184   000E28  32                 	db	50	;'2'
   185   000E29  64                 	db	100	;'d'
   186   000E2A  3A                 	db	58	;':'
   187   000E2B  25                 	db	37
   188   000E2C  30                 	db	48	;'0'
   189   000E2D  34                 	db	52	;'4'
   190   000E2E  64                 	db	100	;'d'
   191   000E2F  00                 	db	0
   192   000E30                     STR_2:
   193                           
   194                           ; BSR set to: 14
   195   000E30  44                 	db	68	;'D'
   196   000E31  61                 	db	97	;'a'
   197   000E32  74                 	db	116	;'t'
   198   000E33  65                 	db	101	;'e'
   199   000E34  3A                 	db	58	;':'
   200   000E35  25                 	db	37
   201   000E36  30                 	db	48	;'0'
   202   000E37  32                 	db	50	;'2'
   203   000E38  64                 	db	100	;'d'
   204   000E39  2F                 	db	47
   205   000E3A  25                 	db	37
   206   000E3B  30                 	db	48	;'0'
   207   000E3C  32                 	db	50	;'2'
   208   000E3D  64                 	db	100	;'d'
   209   000E3E  2F                 	db	47
   210   000E3F  25                 	db	37
   211   000E40  30                 	db	48	;'0'
   212   000E41  34                 	db	52	;'4'
   213   000E42  64                 	db	100	;'d'
   214   000E43  00                 	db	0
   215   000E44  00                 	db	0	; dummy byte at the end
   216   000000                     
   217                           ; #config settings
   218                           
   219                           	psect	cinit
   220   00213A                     __pcinit:
   221                           	callstack 0
   222   00213A                     start_initialization:
   223                           	callstack 0
   224   00213A                     __initialization:
   225                           	callstack 0
   226                           
   227                           ; Initialize objects allocated to BANK0 (24 bytes)
   228                           ; load TBLPTR registers with __pidataBANK0
   229   00213A  0EBC               	movlw	low __pidataBANK0
   230   00213C  6EF6               	movwf	tblptrl,c
   231   00213E  0E23               	movlw	high __pidataBANK0
   232   002140  6EF7               	movwf	tblptrh,c
   233   002142  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   234   002144  6EF8               	movwf	tblptru,c
   235   002146  EE00  F080         	lfsr	0,__pdataBANK0
   236   00214A  EE10 F018          	lfsr	1,24
   237   00214E                     copy_data0:
   238   00214E  0009               	tblrd		*+
   239   002150  CFF5 FFEE          	movff	tablat,postinc0
   240   002154  50E5               	movf	postdec1,w,c
   241   002156  50E1               	movf	fsr1l,w,c
   242   002158  E1FA               	bnz	copy_data0
   243                           
   244                           ; Clear objects allocated to BANK1 (58 bytes)
   245   00215A  EE01  F0BA         	lfsr	0,__pbssBANK1
   246   00215E  0E3A               	movlw	58
   247   002160                     clear_0:
   248   002160  6AEE               	clrf	postinc0,c
   249   002162  06E8               	decf	wreg,f,c
   250   002164  E1FD               	bnz	clear_0
   251                           
   252                           ; Clear objects allocated to BANK0 (32 bytes)
   253   002166  EE00  F060         	lfsr	0,__pbssBANK0
   254   00216A  0E20               	movlw	32
   255   00216C                     clear_1:
   256   00216C  6AEE               	clrf	postinc0,c
   257   00216E  06E8               	decf	wreg,f,c
   258   002170  E1FD               	bnz	clear_1
   259                           
   260                           ; Clear objects allocated to COMRAM (5 bytes)
   261   002172  6A4D               	clrf	(__pbssCOMRAM+4)& (0+255),c
   262   002174  6A4C               	clrf	(__pbssCOMRAM+3)& (0+255),c
   263   002176  6A4B               	clrf	(__pbssCOMRAM+2)& (0+255),c
   264   002178  6A4A               	clrf	(__pbssCOMRAM+1)& (0+255),c
   265   00217A  6A49               	clrf	__pbssCOMRAM& (0+255),c
   266   00217C                     end_of_initialization:
   267                           	callstack 0
   268   00217C                     __end_of__initialization:
   269                           	callstack 0
   270   00217C  904E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   271   00217E  924E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   272   002180  0100               	movlb	0
   273   002182  EFF9  F009         	goto	_main	;jump to C main() function
   274                           
   275                           	psect	bssCOMRAM
   276   000049                     __pbssCOMRAM:
   277                           	callstack 0
   278   000049                     _width:
   279                           	callstack 0
   280   000049                     	ds	2
   281   00004B                     _prec:
   282                           	callstack 0
   283   00004B                     	ds	2
   284   00004D                     _flags:
   285                           	callstack 0
   286   00004D                     	ds	1
   287                           
   288                           	psect	bssBANK0
   289   000060                     __pbssBANK0:
   290                           	callstack 0
   291   000060                     _dbuf:
   292                           	callstack 0
   293   000060                     	ds	32
   294                           
   295                           	psect	dataBANK0
   296   000080                     __pdataBANK0:
   297                           	callstack 0
   298   000080                     UpdateClock@F14152:
   299                           	callstack 0
   300   000080                     	ds	24
   301                           
   302                           	psect	bssBANK1
   303   0001BA                     __pbssBANK1:
   304                           	callstack 0
   305   0001BA                     	ds	14
   306   0001C8                     	ds	14
   307   0001D6                     	ds	14
   308   0001E4                     	ds	14
   309   0001F2                     _GLOBALsecs:
   310                           	callstack 0
   311   0001F2                     	ds	2
   312                           
   313                           	psect	cstackBANK1
   314   000100                     __pcstackBANK1:
   315                           	callstack 0
   316   000100                     main@buffer:
   317                           	callstack 0
   318                           
   319                           ; 18 bytes @ 0x0
   320   000100                     	ds	18
   321   000112                     main@14503:
   322                           	callstack 0
   323                           
   324                           ; 14 bytes @ 0x12
   325   000112                     	ds	14
   326   000120                     main@14505:
   327                           	callstack 0
   328                           
   329                           ; 14 bytes @ 0x20
   330   000120                     	ds	14
   331   00012E                     main@14507:
   332                           	callstack 0
   333                           
   334                           ; 14 bytes @ 0x2E
   335   00012E                     	ds	14
   336   00013C                     main@14509:
   337                           	callstack 0
   338                           
   339                           ; 14 bytes @ 0x3C
   340   00013C                     	ds	14
   341   00014A                     main@previousClockDays:
   342                           	callstack 0
   343                           
   344                           ; 2 bytes @ 0x4A
   345   00014A                     	ds	2
   346   00014C                     main@daycount:
   347                           	callstack 0
   348                           
   349                           ; 2 bytes @ 0x4C
   350   00014C                     	ds	2
   351   00014E                     main@light_threshold:
   352                           	callstack 0
   353                           
   354                           ; 2 bytes @ 0x4E
   355   00014E                     	ds	2
   356   000150                     main@TestMode:
   357                           	callstack 0
   358                           
   359                           ; 2 bytes @ 0x50
   360   000150                     	ds	2
   361   000152                     main@Jan:
   362                           	callstack 0
   363                           
   364                           ; 6 bytes @ 0x52
   365   000152                     	ds	6
   366   000158                     main@Feb:
   367                           	callstack 0
   368                           
   369                           ; 6 bytes @ 0x58
   370   000158                     	ds	6
   371   00015E                     main@Mar:
   372                           	callstack 0
   373                           
   374                           ; 6 bytes @ 0x5E
   375   00015E                     	ds	6
   376   000164                     main@Apr:
   377                           	callstack 0
   378                           
   379                           ; 6 bytes @ 0x64
   380   000164                     	ds	6
   381   00016A                     main@May:
   382                           	callstack 0
   383                           
   384                           ; 6 bytes @ 0x6A
   385   00016A                     	ds	6
   386   000170                     main@Jun:
   387                           	callstack 0
   388                           
   389                           ; 6 bytes @ 0x70
   390   000170                     	ds	6
   391   000176                     main@Jul:
   392                           	callstack 0
   393                           
   394                           ; 6 bytes @ 0x76
   395   000176                     	ds	6
   396   00017C                     main@Aug:
   397                           	callstack 0
   398                           
   399                           ; 6 bytes @ 0x7C
   400   00017C                     	ds	6
   401   000182                     main@Sep:
   402                           	callstack 0
   403                           
   404                           ; 6 bytes @ 0x82
   405   000182                     	ds	6
   406   000188                     main@Oct:
   407                           	callstack 0
   408                           
   409                           ; 6 bytes @ 0x88
   410   000188                     	ds	6
   411   00018E                     main@Nov:
   412                           	callstack 0
   413                           
   414                           ; 6 bytes @ 0x8E
   415   00018E                     	ds	6
   416   000194                     main@Dec:
   417                           	callstack 0
   418                           
   419                           ; 6 bytes @ 0x94
   420   000194                     	ds	6
   421   00019A                     main@Dawn:
   422                           	callstack 0
   423                           
   424                           ; 8 bytes @ 0x9A
   425   00019A                     	ds	8
   426   0001A2                     main@Dusk:
   427                           	callstack 0
   428                           
   429                           ; 8 bytes @ 0xA2
   430   0001A2                     	ds	8
   431   0001AA                     main@clock:
   432                           	callstack 0
   433                           
   434                           ; 16 bytes @ 0xAA
   435   0001AA                     	ds	16
   436                           
   437                           	psect	cstackCOMRAM
   438   000001                     __pcstackCOMRAM:
   439                           	callstack 0
   440   000001                     ?_ADC_getval:
   441                           	callstack 0
   442   000001                     ?___wmul:
   443                           	callstack 0
   444   000001                     ?___awdiv:
   445                           	callstack 0
   446   000001                     ?___awmod:
   447                           	callstack 0
   448   000001                     LCD_sendnibble@number:
   449                           	callstack 0
   450   000001                     LEDarray_disp_bin@number:
   451                           	callstack 0
   452   000001                     ArrayAppend@arrayTime:
   453                           	callstack 0
   454   000001                     ___wmul@multiplier:
   455                           	callstack 0
   456   000001                     ___awdiv@dividend:
   457                           	callstack 0
   458   000001                     ___awmod@dividend:
   459                           	callstack 0
   460   000001                     fputc@c:
   461                           	callstack 0
   462                           
   463                           ; 2 bytes @ 0x0
   464   000001                     	ds	1
   465   000002                     LCD_sendbyte@type:
   466                           	callstack 0
   467                           
   468                           ; 1 bytes @ 0x1
   469   000002                     	ds	1
   470   000003                     LCD_sendbyte@Byte:
   471                           	callstack 0
   472   000003                     fputc@fp:
   473                           	callstack 0
   474   000003                     ADC_getval@tmpval:
   475                           	callstack 0
   476   000003                     ArrayAppend@size:
   477                           	callstack 0
   478   000003                     ___wmul@multiplicand:
   479                           	callstack 0
   480   000003                     ___awdiv@divisor:
   481                           	callstack 0
   482   000003                     ___awmod@divisor:
   483                           	callstack 0
   484                           
   485                           ; 2 bytes @ 0x2
   486   000003                     	ds	1
   487   000004                     ??_LCD_Init:
   488   000004                     ??_fputc:
   489   000004                     LCD_setline@line:
   490                           	callstack 0
   491   000004                     LCD_sendstring@string:
   492                           	callstack 0
   493                           
   494                           ; 2 bytes @ 0x3
   495   000004                     	ds	1
   496   000005                     ___awdiv@counter:
   497                           	callstack 0
   498   000005                     ___awmod@counter:
   499                           	callstack 0
   500   000005                     ArrayAppend@Time:
   501                           	callstack 0
   502   000005                     ___wmul@product:
   503                           	callstack 0
   504                           
   505                           ; 2 bytes @ 0x4
   506   000005                     	ds	1
   507   000006                     ___awdiv@sign:
   508                           	callstack 0
   509   000006                     ___awmod@sign:
   510                           	callstack 0
   511                           
   512                           ; 1 bytes @ 0x5
   513   000006                     	ds	1
   514   000007                     ??_ArrayAppend:
   515   000007                     ?_abs:
   516                           	callstack 0
   517   000007                     ?_read_prec_or_width:
   518                           	callstack 0
   519   000007                     read_prec_or_width@fmt:
   520                           	callstack 0
   521   000007                     UpdateClock@seconds:
   522                           	callstack 0
   523   000007                     ___awdiv@quotient:
   524                           	callstack 0
   525   000007                     abs@a:
   526                           	callstack 0
   527                           
   528                           ; 2 bytes @ 0x6
   529   000007                     	ds	1
   530   000008                     read_prec_or_width@ap:
   531                           	callstack 0
   532                           
   533                           ; 1 bytes @ 0x7
   534   000008                     	ds	1
   535   000009                     ??_abs:
   536   000009                     read_prec_or_width@c:
   537                           	callstack 0
   538   000009                     fputs@s:
   539                           	callstack 0
   540   000009                     UpdateClock@minutes:
   541                           	callstack 0
   542                           
   543                           ; 2 bytes @ 0x8
   544   000009                     	ds	1
   545   00000A                     fputs@fp:
   546                           	callstack 0
   547   00000A                     ArrayAppend@i:
   548                           	callstack 0
   549   00000A                     read_prec_or_width@n:
   550                           	callstack 0
   551                           
   552                           ; 2 bytes @ 0x9
   553   00000A                     	ds	1
   554   00000B                     fputs@c:
   555                           	callstack 0
   556   00000B                     UpdateClock@hours:
   557                           	callstack 0
   558                           
   559                           ; 2 bytes @ 0xA
   560   00000B                     	ds	1
   561   00000C                     fputs@i:
   562                           	callstack 0
   563                           
   564                           ; 2 bytes @ 0xB
   565   00000C                     	ds	1
   566   00000D                     UpdateClock@days:
   567                           	callstack 0
   568                           
   569                           ; 2 bytes @ 0xC
   570   00000D                     	ds	1
   571   00000E                     pad@fp:
   572                           	callstack 0
   573                           
   574                           ; 1 bytes @ 0xD
   575   00000E                     	ds	1
   576   00000F                     pad@buf:
   577                           	callstack 0
   578   00000F                     UpdateClock@DoW:
   579                           	callstack 0
   580                           
   581                           ; 2 bytes @ 0xE
   582   00000F                     	ds	1
   583   000010                     pad@p:
   584                           	callstack 0
   585                           
   586                           ; 2 bytes @ 0xF
   587   000010                     	ds	1
   588   000011                     UpdateClock@months:
   589                           	callstack 0
   590                           
   591                           ; 2 bytes @ 0x10
   592   000011                     	ds	1
   593   000012                     ??_pad:
   594                           
   595                           ; 1 bytes @ 0x11
   596   000012                     	ds	1
   597   000013                     UpdateClock@years:
   598                           	callstack 0
   599   000013                     pad@i:
   600                           	callstack 0
   601                           
   602                           ; 2 bytes @ 0x12
   603   000013                     	ds	2
   604   000015                     dtoa@fp:
   605                           	callstack 0
   606   000015                     UpdateClock@DSTstate:
   607                           	callstack 0
   608                           
   609                           ; 2 bytes @ 0x14
   610   000015                     	ds	1
   611   000016                     dtoa@d:
   612                           	callstack 0
   613                           
   614                           ; 2 bytes @ 0x15
   615   000016                     	ds	1
   616   000017                     UpdateClock@TestMode:
   617                           	callstack 0
   618                           
   619                           ; 2 bytes @ 0x16
   620   000017                     	ds	1
   621   000018                     _dtoa$1967:
   622                           	callstack 0
   623                           
   624                           ; 2 bytes @ 0x17
   625   000018                     	ds	1
   626   000019                     ??_UpdateClock:
   627                           
   628                           ; 1 bytes @ 0x18
   629   000019                     	ds	1
   630   00001A                     dtoa@p:
   631                           	callstack 0
   632                           
   633                           ; 1 bytes @ 0x19
   634   00001A                     	ds	1
   635   00001B                     dtoa@w:
   636                           	callstack 0
   637                           
   638                           ; 2 bytes @ 0x1A
   639   00001B                     	ds	2
   640   00001D                     dtoa@s:
   641                           	callstack 0
   642                           
   643                           ; 1 bytes @ 0x1C
   644   00001D                     	ds	1
   645   00001E                     dtoa@i:
   646                           	callstack 0
   647                           
   648                           ; 2 bytes @ 0x1D
   649   00001E                     	ds	1
   650   00001F                     UpdateClock@DaysInMonth:
   651                           	callstack 0
   652                           
   653                           ; 24 bytes @ 0x1E
   654   00001F                     	ds	1
   655   000020                     vfpfcnvrt@fp:
   656                           	callstack 0
   657                           
   658                           ; 1 bytes @ 0x1F
   659   000020                     	ds	1
   660   000021                     vfpfcnvrt@fmt:
   661                           	callstack 0
   662                           
   663                           ; 1 bytes @ 0x20
   664   000021                     	ds	1
   665   000022                     vfpfcnvrt@ap:
   666                           	callstack 0
   667                           
   668                           ; 1 bytes @ 0x21
   669   000022                     	ds	1
   670   000023                     ??_vfpfcnvrt:
   671                           
   672                           ; 1 bytes @ 0x22
   673   000023                     	ds	2
   674   000025                     vfpfcnvrt@convarg:
   675                           	callstack 0
   676                           
   677                           ; 4 bytes @ 0x24
   678   000025                     	ds	4
   679   000029                     vfpfcnvrt@done:
   680                           	callstack 0
   681                           
   682                           ; 1 bytes @ 0x28
   683   000029                     	ds	1
   684   00002A                     vfpfcnvrt@cp:
   685                           	callstack 0
   686                           
   687                           ; 1 bytes @ 0x29
   688   00002A                     	ds	1
   689   00002B                     ?_vfprintf:
   690                           	callstack 0
   691   00002B                     vfprintf@fp:
   692                           	callstack 0
   693                           
   694                           ; 1 bytes @ 0x2A
   695   00002B                     	ds	1
   696   00002C                     vfprintf@fmt:
   697                           	callstack 0
   698                           
   699                           ; 1 bytes @ 0x2B
   700   00002C                     	ds	1
   701   00002D                     vfprintf@ap:
   702                           	callstack 0
   703                           
   704                           ; 1 bytes @ 0x2C
   705   00002D                     	ds	1
   706   00002E                     vfprintf@cfmt:
   707                           	callstack 0
   708                           
   709                           ; 1 bytes @ 0x2D
   710   00002E                     	ds	1
   711   00002F                     ?_sprintf:
   712                           	callstack 0
   713   00002F                     sprintf@s:
   714                           	callstack 0
   715                           
   716                           ; 2 bytes @ 0x2E
   717   00002F                     	ds	2
   718   000031                     sprintf@fmt:
   719                           	callstack 0
   720                           
   721                           ; 1 bytes @ 0x30
   722   000031                     	ds	9
   723   00003A                     sprintf@ap:
   724                           	callstack 0
   725                           
   726                           ; 1 bytes @ 0x39
   727   00003A                     	ds	1
   728   00003B                     sprintf@f:
   729                           	callstack 0
   730                           
   731                           ; 12 bytes @ 0x3A
   732   00003B                     	ds	12
   733   000047                     ??_main:
   734                           
   735                           ; 1 bytes @ 0x46
   736   000047                     	ds	2
   737                           
   738 ;;
   739 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   740 ;;
   741 ;; *************** function _main *****************
   742 ;; Defined at:
   743 ;;		line 30 in file "main.c"
   744 ;; Parameters:    Size  Location     Type
   745 ;;		None
   746 ;; Auto vars:     Size  Location     Type
   747 ;;  buffer         18    0[BANK1 ] unsigned char [18]
   748 ;;  clock          16  170[BANK1 ] struct time_structure
   749 ;;  14509          14   60[BANK1 ] int [7]
   750 ;;  14507          14   46[BANK1 ] int [7]
   751 ;;  14505          14   32[BANK1 ] int [7]
   752 ;;  14503          14   18[BANK1 ] int [7]
   753 ;;  Dusk            8  162[BANK1 ] struct array_structure
   754 ;;  Dawn            8  154[BANK1 ] struct array_structure
   755 ;;  Dec             6  148[BANK1 ] struct month_structure
   756 ;;  Nov             6  142[BANK1 ] struct month_structure
   757 ;;  Oct             6  136[BANK1 ] struct month_structure
   758 ;;  Sep             6  130[BANK1 ] struct month_structure
   759 ;;  Aug             6  124[BANK1 ] struct month_structure
   760 ;;  Jul             6  118[BANK1 ] struct month_structure
   761 ;;  Jun             6  112[BANK1 ] struct month_structure
   762 ;;  May             6  106[BANK1 ] struct month_structure
   763 ;;  Apr             6  100[BANK1 ] struct month_structure
   764 ;;  Mar             6   94[BANK1 ] struct month_structure
   765 ;;  Feb             6   88[BANK1 ] struct month_structure
   766 ;;  Jan             6   82[BANK1 ] struct month_structure
   767 ;;  TestMode        2   80[BANK1 ] int 
   768 ;;  light_thresh    2   78[BANK1 ] unsigned int 
   769 ;;  daycount        2   76[BANK1 ] unsigned int 
   770 ;;  previousCloc    2   74[BANK1 ] unsigned int 
   771 ;; Return value:  Size  Location     Type
   772 ;;                  1    wreg      void 
   773 ;; Registers used:
   774 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   775 ;; Tracked objects:
   776 ;;		On entry : 0/0
   777 ;;		On exit  : 0/0
   778 ;;		Unchanged: 0/0
   779 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   780 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   781 ;;      Locals:         0       0     186       0       0       0       0       0       0       0       0       0       
      +0       0       0
   782 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   783 ;;      Totals:         2       0     186       0       0       0       0       0       0       0       0       0       
      +0       0       0
   784 ;;Total ram usage:      188 bytes
   785 ;; Hardware stack levels required when called: 9
   786 ;; This function calls:
   787 ;;		_ADC_getval
   788 ;;		_ADC_init
   789 ;;		_ArrayAppend
   790 ;;		_Interrupts_init
   791 ;;		_LCD_Init
   792 ;;		_LCD_sendstring
   793 ;;		_LCD_setline
   794 ;;		_LEDarray_disp_bin
   795 ;;		_LEDarray_init
   796 ;;		_Timer0_init
   797 ;;		_UpdateClock
   798 ;;		_sprintf
   799 ;; This function is called by:
   800 ;;		Startup code after reset
   801 ;; This function uses a non-reentrant model
   802 ;;
   803                           
   804                           	psect	text0
   805   0013F2                     __ptext0:
   806                           	callstack 0
   807   0013F2                     _main:
   808                           	callstack 22
   809   0013F2                     
   810                           ;main.c: 202:         Dawn.hours = (int[]){0, 0, 0, 0, 0, 0, 0};;main.c: 203:         Da
      +                          wn.minutes = (int[]){0, 0, 0, 0, 0, 0, 0};;main.c: 208:         Dusk.hours = (int[]){0, 
      +                          0, 0, 0, 0, 0, 0};;main.c: 209:         Dusk.minutes = (int[]){0, 0, 0, 0, 0, 0, 0};;mai
      +                          n.c: 33:     LEDarray_init();
   811   0013F2  EC9C  F011         	call	_LEDarray_init	;wreg free
   812   0013F6                     
   813                           ;main.c: 34:     Timer0_init();
   814   0013F6  ECC1  F011         	call	_Timer0_init	;wreg free
   815   0013FA                     
   816                           ;main.c: 35:     Interrupts_init();
   817   0013FA  ECF1  F011         	call	_Interrupts_init	;wreg free
   818   0013FE                     
   819                           ;main.c: 37:     LCD_Init();
   820   0013FE  EC86  F00D         	call	_LCD_Init	;wreg free
   821   001402                     
   822                           ;main.c: 38:     ADC_init();
   823   001402  ECD1  F011         	call	_ADC_init	;wreg free
   824   001406                     
   825                           ;main.c: 40:     char buffer[18];;main.c: 44:     TRISDbits.TRISD7 = 0;
   826   001406  9E84               	bcf	132,7,c	;volatile
   827   001408                     
   828                           ;main.c: 45:     LATDbits.LATD7 = 0;
   829   001408  9E7C               	bcf	124,7,c	;volatile
   830   00140A                     
   831                           ;main.c: 48:     TRISHbits.TRISH3 = 0;
   832   00140A  9688               	bcf	136,3,c	;volatile
   833   00140C                     
   834                           ;main.c: 49:     LATHbits.LATH3 = 0;
   835   00140C  9680               	bcf	128,3,c	;volatile
   836   00140E                     
   837                           ;main.c: 64:     struct time_structure clock;;main.c: 66:         GLOBALsecs = 55;
   838   00140E  0E00               	movlw	0
   839   001410  0101               	movlb	1	; () banked
   840   001412  6FF3               	movwf	(_GLOBALsecs+1)& (0+255),b
   841   001414  0E37               	movlw	55
   842   001416  6FF2               	movwf	_GLOBALsecs& (0+255),b
   843   001418                     
   844                           ; BSR set to: 1
   845                           ;main.c: 67:         clock.minutes = 59;
   846   001418  0E00               	movlw	0
   847   00141A  6FAD               	movwf	(main@clock+3)& (0+255),b
   848   00141C  0E3B               	movlw	59
   849   00141E  6FAC               	movwf	(main@clock+2)& (0+255),b
   850   001420                     
   851                           ; BSR set to: 1
   852                           ;main.c: 68:         clock.hours = 22;
   853   001420  0E00               	movlw	0
   854   001422  6FAF               	movwf	(main@clock+5)& (0+255),b
   855   001424  0E16               	movlw	22
   856   001426  6FAE               	movwf	(main@clock+4)& (0+255),b
   857   001428                     
   858                           ; BSR set to: 1
   859                           ;main.c: 69:         clock.days = 28;
   860   001428  0E00               	movlw	0
   861   00142A  6FB1               	movwf	(main@clock+7)& (0+255),b
   862   00142C  0E1C               	movlw	28
   863   00142E  6FB0               	movwf	(main@clock+6)& (0+255),b
   864   001430                     
   865                           ; BSR set to: 1
   866                           ;main.c: 70:         clock.DoW = 5;
   867   001430  0E00               	movlw	0
   868   001432  6FB3               	movwf	(main@clock+9)& (0+255),b
   869   001434  0E05               	movlw	5
   870   001436  6FB2               	movwf	(main@clock+8)& (0+255),b
   871   001438                     
   872                           ; BSR set to: 1
   873                           ;main.c: 71:         clock.months = 2;
   874   001438  0E00               	movlw	0
   875   00143A  6FB5               	movwf	(main@clock+11)& (0+255),b
   876   00143C  0E02               	movlw	2
   877   00143E  6FB4               	movwf	(main@clock+10)& (0+255),b
   878   001440                     
   879                           ; BSR set to: 1
   880                           ;main.c: 72:         clock.years = 2024;
   881   001440  0E07               	movlw	7
   882   001442  6FB7               	movwf	(main@clock+13)& (0+255),b
   883   001444  0EE8               	movlw	232
   884   001446  6FB6               	movwf	(main@clock+12)& (0+255),b
   885   001448                     
   886                           ; BSR set to: 1
   887                           ;main.c: 73:         clock.DSTstate = 0;
   888   001448  0E00               	movlw	0
   889   00144A  6FB9               	movwf	(main@clock+15)& (0+255),b
   890   00144C  0E00               	movlw	0
   891   00144E  6FB8               	movwf	(main@clock+14)& (0+255),b
   892   001450                     
   893                           ; BSR set to: 1
   894                           ;main.c: 94:         int TestMode = 1;
   895   001450  0E00               	movlw	0
   896   001452  6F51               	movwf	(main@TestMode+1)& (0+255),b
   897   001454  0E01               	movlw	1
   898   001456  6F50               	movwf	main@TestMode& (0+255),b
   899   001458                     
   900                           ; BSR set to: 1
   901                           ;main.c: 96:         clock.seconds = GLOBALsecs;
   902   001458  C1F2  F1AA         	movff	_GLOBALsecs,main@clock
   903   00145C  C1F3  F1AB         	movff	_GLOBALsecs+1,main@clock+1
   904   001460                     
   905                           ; BSR set to: 1
   906                           ;main.c: 98:             clock.seconds = 0;
   907   001460  0E00               	movlw	0
   908   001462  6FAB               	movwf	(main@clock+1)& (0+255),b
   909   001464  0E00               	movlw	0
   910   001466  6FAA               	movwf	main@clock& (0+255),b
   911   001468                     
   912                           ; BSR set to: 1
   913                           ;main.c: 99:             GLOBALsecs = clock.hours;
   914   001468  C1AE  F1F2         	movff	main@clock+4,_GLOBALsecs
   915   00146C  C1AF  F1F3         	movff	main@clock+5,_GLOBALsecs+1
   916   001470                     
   917                           ; BSR set to: 1
   918                           ;main.c: 114:     struct month_structure Jan;;main.c: 116:         Jan.days = 31;
   919   001470  0E00               	movlw	0
   920   001472  6F57               	movwf	(main@Jan+5)& (0+255),b
   921   001474  0E1F               	movlw	31
   922   001476  6F56               	movwf	(main@Jan+4)& (0+255),b
   923                           
   924                           ;main.c: 117:         Jan.solarMidHours = 0;
   925   001478  0E00               	movlw	0
   926   00147A  6F55               	movwf	(main@Jan+3)& (0+255),b
   927   00147C  0E00               	movlw	0
   928   00147E  6F54               	movwf	(main@Jan+2)& (0+255),b
   929                           
   930                           ;main.c: 118:         Jan.solarMidMinutes = 9;
   931   001480  0E00               	movlw	0
   932   001482  6F53               	movwf	(main@Jan+1)& (0+255),b
   933   001484  0E09               	movlw	9
   934   001486  6F52               	movwf	main@Jan& (0+255),b
   935                           
   936                           ;main.c: 120:     struct month_structure Feb;;main.c: 122:         Feb.days = 28;
   937   001488  0E00               	movlw	0
   938   00148A  6F5D               	movwf	(main@Feb+5)& (0+255),b
   939   00148C  0E1C               	movlw	28
   940   00148E  6F5C               	movwf	(main@Feb+4)& (0+255),b
   941                           
   942                           ;main.c: 123:         Feb.solarMidHours = 0;
   943   001490  0E00               	movlw	0
   944   001492  6F5B               	movwf	(main@Feb+3)& (0+255),b
   945   001494  0E00               	movlw	0
   946   001496  6F5A               	movwf	(main@Feb+2)& (0+255),b
   947                           
   948                           ;main.c: 124:         Feb.solarMidMinutes = 13;
   949   001498  0E00               	movlw	0
   950   00149A  6F59               	movwf	(main@Feb+1)& (0+255),b
   951   00149C  0E0D               	movlw	13
   952   00149E  6F58               	movwf	main@Feb& (0+255),b
   953                           
   954                           ;main.c: 126:     struct month_structure Mar;;main.c: 128:         Mar.days = 31;
   955   0014A0  0E00               	movlw	0
   956   0014A2  6F63               	movwf	(main@Mar+5)& (0+255),b
   957   0014A4  0E1F               	movlw	31
   958   0014A6  6F62               	movwf	(main@Mar+4)& (0+255),b
   959                           
   960                           ;main.c: 129:         Mar.solarMidHours = 0;
   961   0014A8  0E00               	movlw	0
   962   0014AA  6F61               	movwf	(main@Mar+3)& (0+255),b
   963   0014AC  0E00               	movlw	0
   964   0014AE  6F60               	movwf	(main@Mar+2)& (0+255),b
   965                           
   966                           ;main.c: 130:         Mar.solarMidMinutes = 8;
   967   0014B0  0E00               	movlw	0
   968   0014B2  6F5F               	movwf	(main@Mar+1)& (0+255),b
   969   0014B4  0E08               	movlw	8
   970   0014B6  6F5E               	movwf	main@Mar& (0+255),b
   971                           
   972                           ;main.c: 132:     struct month_structure Apr;;main.c: 134:         Apr.days = 30;
   973   0014B8  0E00               	movlw	0
   974   0014BA  6F69               	movwf	(main@Apr+5)& (0+255),b
   975   0014BC  0E1E               	movlw	30
   976   0014BE  6F68               	movwf	(main@Apr+4)& (0+255),b
   977                           
   978                           ;main.c: 135:         Apr.solarMidHours = 0;
   979   0014C0  0E00               	movlw	0
   980   0014C2  6F67               	movwf	(main@Apr+3)& (0+255),b
   981   0014C4  0E00               	movlw	0
   982   0014C6  6F66               	movwf	(main@Apr+2)& (0+255),b
   983                           
   984                           ;main.c: 136:         Apr.solarMidMinutes = 1;
   985   0014C8  0E00               	movlw	0
   986   0014CA  6F65               	movwf	(main@Apr+1)& (0+255),b
   987   0014CC  0E01               	movlw	1
   988   0014CE  6F64               	movwf	main@Apr& (0+255),b
   989                           
   990                           ;main.c: 138:     struct month_structure May;;main.c: 140:         May.days = 31;
   991   0014D0  0E00               	movlw	0
   992   0014D2  6F6F               	movwf	(main@May+5)& (0+255),b
   993   0014D4  0E1F               	movlw	31
   994   0014D6  6F6E               	movwf	(main@May+4)& (0+255),b
   995                           
   996                           ;main.c: 141:         May.solarMidHours = 23;
   997   0014D8  0E00               	movlw	0
   998   0014DA  6F6D               	movwf	(main@May+3)& (0+255),b
   999   0014DC  0E17               	movlw	23
  1000   0014DE  6F6C               	movwf	(main@May+2)& (0+255),b
  1001                           
  1002                           ;main.c: 142:         May.solarMidMinutes = 57;
  1003   0014E0  0E00               	movlw	0
  1004   0014E2  6F6B               	movwf	(main@May+1)& (0+255),b
  1005   0014E4  0E39               	movlw	57
  1006   0014E6  6F6A               	movwf	main@May& (0+255),b
  1007                           
  1008                           ;main.c: 144:     struct month_structure Jun;;main.c: 146:         Jun.days = 30;
  1009   0014E8  0E00               	movlw	0
  1010   0014EA  6F75               	movwf	(main@Jun+5)& (0+255),b
  1011   0014EC  0E1E               	movlw	30
  1012   0014EE  6F74               	movwf	(main@Jun+4)& (0+255),b
  1013                           
  1014                           ;main.c: 147:         Jun.solarMidHours = 0;
  1015   0014F0  0E00               	movlw	0
  1016   0014F2  6F73               	movwf	(main@Jun+3)& (0+255),b
  1017   0014F4  0E00               	movlw	0
  1018   0014F6  6F72               	movwf	(main@Jun+2)& (0+255),b
  1019                           
  1020                           ;main.c: 148:         Jun.solarMidMinutes = 1;
  1021   0014F8  0E00               	movlw	0
  1022   0014FA  6F71               	movwf	(main@Jun+1)& (0+255),b
  1023   0014FC  0E01               	movlw	1
  1024   0014FE  6F70               	movwf	main@Jun& (0+255),b
  1025                           
  1026                           ;main.c: 150:     struct month_structure Jul;;main.c: 152:         Jul.days = 31;
  1027   001500  0E00               	movlw	0
  1028   001502  6F7B               	movwf	(main@Jul+5)& (0+255),b
  1029   001504  0E1F               	movlw	31
  1030   001506  6F7A               	movwf	(main@Jul+4)& (0+255),b
  1031                           
  1032                           ;main.c: 153:         Jul.solarMidHours = 0;
  1033   001508  0E00               	movlw	0
  1034   00150A  6F79               	movwf	(main@Jul+3)& (0+255),b
  1035   00150C  0E00               	movlw	0
  1036   00150E  6F78               	movwf	(main@Jul+2)& (0+255),b
  1037                           
  1038                           ;main.c: 154:         Jul.solarMidMinutes = 5;
  1039   001510  0E00               	movlw	0
  1040   001512  6F77               	movwf	(main@Jul+1)& (0+255),b
  1041   001514  0E05               	movlw	5
  1042   001516  6F76               	movwf	main@Jul& (0+255),b
  1043                           
  1044                           ;main.c: 156:     struct month_structure Aug;;main.c: 158:         Aug.days = 31;
  1045   001518  0E00               	movlw	0
  1046   00151A  6F81               	movwf	(main@Aug+5)& (0+255),b
  1047   00151C  0E1F               	movlw	31
  1048   00151E  6F80               	movwf	(main@Aug+4)& (0+255),b
  1049                           
  1050                           ;main.c: 159:         Aug.solarMidHours = 0;
  1051   001520  0E00               	movlw	0
  1052   001522  6F7F               	movwf	(main@Aug+3)& (0+255),b
  1053   001524  0E00               	movlw	0
  1054   001526  6F7E               	movwf	(main@Aug+2)& (0+255),b
  1055                           
  1056                           ;main.c: 160:         Aug.solarMidMinutes = 3;
  1057   001528  0E00               	movlw	0
  1058   00152A  6F7D               	movwf	(main@Aug+1)& (0+255),b
  1059   00152C  0E03               	movlw	3
  1060   00152E  6F7C               	movwf	main@Aug& (0+255),b
  1061                           
  1062                           ;main.c: 162:     struct month_structure Sep;;main.c: 164:         Sep.days = 30;
  1063   001530  0E00               	movlw	0
  1064   001532  6F87               	movwf	(main@Sep+5)& (0+255),b
  1065   001534  0E1E               	movlw	30
  1066   001536  6F86               	movwf	(main@Sep+4)& (0+255),b
  1067                           
  1068                           ;main.c: 165:         Sep.solarMidHours = 23;
  1069   001538  0E00               	movlw	0
  1070   00153A  6F85               	movwf	(main@Sep+3)& (0+255),b
  1071   00153C  0E17               	movlw	23
  1072   00153E  6F84               	movwf	(main@Sep+2)& (0+255),b
  1073                           
  1074                           ;main.c: 166:         Sep.solarMidMinutes = 55;
  1075   001540  0E00               	movlw	0
  1076   001542  6F83               	movwf	(main@Sep+1)& (0+255),b
  1077   001544  0E37               	movlw	55
  1078   001546  6F82               	movwf	main@Sep& (0+255),b
  1079                           
  1080                           ;main.c: 168:     struct month_structure Oct;;main.c: 170:         Oct.days = 31;
  1081   001548  0E00               	movlw	0
  1082   00154A  6F8D               	movwf	(main@Oct+5)& (0+255),b
  1083   00154C  0E1F               	movlw	31
  1084   00154E  6F8C               	movwf	(main@Oct+4)& (0+255),b
  1085                           
  1086                           ;main.c: 171:         Oct.solarMidHours = 23;
  1087   001550  0E00               	movlw	0
  1088   001552  6F8B               	movwf	(main@Oct+3)& (0+255),b
  1089   001554  0E17               	movlw	23
  1090   001556  6F8A               	movwf	(main@Oct+2)& (0+255),b
  1091                           
  1092                           ;main.c: 172:         Oct.solarMidMinutes = 47;
  1093   001558  0E00               	movlw	0
  1094   00155A  6F89               	movwf	(main@Oct+1)& (0+255),b
  1095   00155C  0E2F               	movlw	47
  1096   00155E  6F88               	movwf	main@Oct& (0+255),b
  1097                           
  1098                           ;main.c: 174:     struct month_structure Nov;;main.c: 176:         Nov.days = 30;
  1099   001560  0E00               	movlw	0
  1100   001562  6F93               	movwf	(main@Nov+5)& (0+255),b
  1101   001564  0E1E               	movlw	30
  1102   001566  6F92               	movwf	(main@Nov+4)& (0+255),b
  1103                           
  1104                           ;main.c: 177:         Nov.solarMidHours = 23;
  1105   001568  0E00               	movlw	0
  1106   00156A  6F91               	movwf	(main@Nov+3)& (0+255),b
  1107   00156C  0E17               	movlw	23
  1108   00156E  6F90               	movwf	(main@Nov+2)& (0+255),b
  1109                           
  1110                           ;main.c: 178:         Nov.solarMidMinutes = 46;
  1111   001570  0E00               	movlw	0
  1112   001572  6F8F               	movwf	(main@Nov+1)& (0+255),b
  1113   001574  0E2E               	movlw	46
  1114   001576  6F8E               	movwf	main@Nov& (0+255),b
  1115                           
  1116                           ;main.c: 180:     struct month_structure Dec;;main.c: 182:         Dec.days = 31;
  1117   001578  0E00               	movlw	0
  1118   00157A  6F99               	movwf	(main@Dec+5)& (0+255),b
  1119   00157C  0E1F               	movlw	31
  1120   00157E  6F98               	movwf	(main@Dec+4)& (0+255),b
  1121                           
  1122                           ;main.c: 183:         Dec.solarMidHours = 23;
  1123   001580  0E00               	movlw	0
  1124   001582  6F97               	movwf	(main@Dec+3)& (0+255),b
  1125   001584  0E17               	movlw	23
  1126   001586  6F96               	movwf	(main@Dec+2)& (0+255),b
  1127                           
  1128                           ;main.c: 184:         Dec.solarMidMinutes = 56;
  1129   001588  0E00               	movlw	0
  1130   00158A  6F95               	movwf	(main@Dec+1)& (0+255),b
  1131   00158C  0E38               	movlw	56
  1132   00158E  6F94               	movwf	main@Dec& (0+255),b
  1133                           
  1134                           ;main.c: 199:     struct array_structure Dawn;;main.c: 200:         Dawn.size = 7;
  1135   001590  0E00               	movlw	0
  1136   001592  6F9B               	movwf	(main@Dawn+1)& (0+255),b
  1137   001594  0E07               	movlw	7
  1138   001596  6F9A               	movwf	main@Dawn& (0+255),b
  1139                           
  1140                           ;main.c: 201:         Dawn.count = 0;
  1141   001598  0E00               	movlw	0
  1142   00159A  6F9D               	movwf	(main@Dawn+3)& (0+255),b
  1143   00159C  0E00               	movlw	0
  1144   00159E  6F9C               	movwf	(main@Dawn+2)& (0+255),b
  1145   0015A0                     
  1146                           ; BSR set to: 1
  1147                           ;main.c: 202:         Dawn.hours = (int[]){0, 0, 0, 0, 0, 0, 0};
  1148   0015A0  EE21  F012         	lfsr	2,main@14503
  1149   0015A4  0E0D               	movlw	13
  1150   0015A6                     u3051:
  1151   0015A6  6ADE               	clrf	postinc2,c
  1152   0015A8  06E8               	decf	wreg,f,c
  1153   0015AA  E2FD               	bc	u3051
  1154   0015AC                     
  1155                           ; BSR set to: 1
  1156   0015AC  0E01               	movlw	high main@14503
  1157   0015AE  6F9F               	movwf	(main@Dawn+5)& (0+255),b
  1158   0015B0  0E12               	movlw	low main@14503
  1159   0015B2  6F9E               	movwf	(main@Dawn+4)& (0+255),b
  1160                           
  1161                           ;main.c: 203:         Dawn.minutes = (int[]){0, 0, 0, 0, 0, 0, 0};
  1162   0015B4  EE21  F020         	lfsr	2,main@14505
  1163   0015B8  0E0D               	movlw	13
  1164   0015BA                     u3061:
  1165   0015BA  6ADE               	clrf	postinc2,c
  1166   0015BC  06E8               	decf	wreg,f,c
  1167   0015BE  E2FD               	bc	u3061
  1168   0015C0                     
  1169                           ; BSR set to: 1
  1170   0015C0  0E01               	movlw	high main@14505
  1171   0015C2  6FA1               	movwf	(main@Dawn+7)& (0+255),b
  1172   0015C4  0E20               	movlw	low main@14505
  1173   0015C6  6FA0               	movwf	(main@Dawn+6)& (0+255),b
  1174   0015C8                     
  1175                           ; BSR set to: 1
  1176                           ;main.c: 205:     struct array_structure Dusk;;main.c: 206:         Dusk.size = 7;
  1177   0015C8  0E00               	movlw	0
  1178   0015CA  6FA3               	movwf	(main@Dusk+1)& (0+255),b
  1179   0015CC  0E07               	movlw	7
  1180   0015CE  6FA2               	movwf	main@Dusk& (0+255),b
  1181   0015D0                     
  1182                           ; BSR set to: 1
  1183                           ;main.c: 207:         Dusk.count = 0;
  1184   0015D0  0E00               	movlw	0
  1185   0015D2  6FA5               	movwf	(main@Dusk+3)& (0+255),b
  1186   0015D4  0E00               	movlw	0
  1187   0015D6  6FA4               	movwf	(main@Dusk+2)& (0+255),b
  1188   0015D8                     
  1189                           ; BSR set to: 1
  1190                           ;main.c: 208:         Dusk.hours = (int[]){0, 0, 0, 0, 0, 0, 0};
  1191   0015D8  EE21  F02E         	lfsr	2,main@14507
  1192   0015DC  0E0D               	movlw	13
  1193   0015DE                     u3071:
  1194   0015DE  6ADE               	clrf	postinc2,c
  1195   0015E0  06E8               	decf	wreg,f,c
  1196   0015E2  E2FD               	bc	u3071
  1197   0015E4  0E01               	movlw	high main@14507
  1198   0015E6  6FA7               	movwf	(main@Dusk+5)& (0+255),b
  1199   0015E8  0E2E               	movlw	low main@14507
  1200   0015EA  6FA6               	movwf	(main@Dusk+4)& (0+255),b
  1201   0015EC                     
  1202                           ; BSR set to: 1
  1203                           ;main.c: 209:         Dusk.minutes = (int[]){0, 0, 0, 0, 0, 0, 0};
  1204   0015EC  EE21  F03C         	lfsr	2,main@14509
  1205   0015F0  0E0D               	movlw	13
  1206   0015F2                     u3081:
  1207   0015F2  6ADE               	clrf	postinc2,c
  1208   0015F4  06E8               	decf	wreg,f,c
  1209   0015F6  E2FD               	bc	u3081
  1210   0015F8                     
  1211                           ; BSR set to: 1
  1212   0015F8  0E01               	movlw	high main@14509
  1213   0015FA  6FA9               	movwf	(main@Dusk+7)& (0+255),b
  1214   0015FC  0E3C               	movlw	low main@14509
  1215   0015FE  6FA8               	movwf	(main@Dusk+6)& (0+255),b
  1216   001600                     
  1217                           ; BSR set to: 1
  1218                           ;main.c: 222:     unsigned int light_threshold = 70;
  1219   001600  0E00               	movlw	0
  1220   001602  6F4F               	movwf	(main@light_threshold+1)& (0+255),b
  1221   001604  0E46               	movlw	70
  1222   001606  6F4E               	movwf	main@light_threshold& (0+255),b
  1223   001608                     
  1224                           ; BSR set to: 1
  1225                           ;main.c: 225:     unsigned int daycount = 0;
  1226   001608  0E00               	movlw	0
  1227   00160A  6F4D               	movwf	(main@daycount+1)& (0+255),b
  1228   00160C  0E00               	movlw	0
  1229   00160E  6F4C               	movwf	main@daycount& (0+255),b
  1230   001610                     
  1231                           ; BSR set to: 1
  1232                           ;main.c: 228:     unsigned int previousClockDays = clock.days;
  1233   001610  C1B0  F14A         	movff	main@clock+6,main@previousClockDays
  1234   001614  C1B1  F14B         	movff	main@clock+7,main@previousClockDays+1
  1235   001618                     l2997:
  1236                           
  1237                           ; BSR set to: 1
  1238                           ;main.c: 237:         if (TestMode == 0){clock.seconds = GLOBALsecs;}
  1239   001618  5150               	movf	main@TestMode& (0+255),w,b
  1240   00161A  1151               	iorwf	(main@TestMode+1)& (0+255),w,b
  1241   00161C  A4D8               	btfss	status,2,c
  1242   00161E  EF13  F00B         	goto	u3091
  1243   001622  EF15  F00B         	goto	u3090
  1244   001626                     u3091:
  1245   001626  EF19  F00B         	goto	l3001
  1246   00162A                     u3090:
  1247   00162A                     
  1248                           ; BSR set to: 1
  1249   00162A  C1F2  F1AA         	movff	_GLOBALsecs,main@clock
  1250   00162E  C1F3  F1AB         	movff	_GLOBALsecs+1,main@clock+1
  1251   001632                     l3001:
  1252                           
  1253                           ; BSR set to: 1
  1254                           ;main.c: 239:         UpdateClock(&GLOBALsecs, &clock.minutes, &clock.hours, &clock.days
      +                          , &clock.DoW, &clock.months, &clock.years, &clock.DSTstate, TestMode);
  1255   001632  0EF2               	movlw	low _GLOBALsecs
  1256   001634  6E07               	movwf	UpdateClock@seconds^0,c
  1257   001636  0E01               	movlw	high _GLOBALsecs
  1258   001638  6E08               	movwf	(UpdateClock@seconds+1)^0,c
  1259   00163A  0EAC               	movlw	low (main@clock+2)
  1260   00163C  6E09               	movwf	UpdateClock@minutes^0,c
  1261   00163E  0E01               	movlw	high (main@clock+2)
  1262   001640  6E0A               	movwf	(UpdateClock@minutes+1)^0,c
  1263   001642  0EAE               	movlw	low (main@clock+4)
  1264   001644  6E0B               	movwf	UpdateClock@hours^0,c
  1265   001646  0E01               	movlw	high (main@clock+4)
  1266   001648  6E0C               	movwf	(UpdateClock@hours+1)^0,c
  1267   00164A  0EB0               	movlw	low (main@clock+6)
  1268   00164C  6E0D               	movwf	UpdateClock@days^0,c
  1269   00164E  0E01               	movlw	high (main@clock+6)
  1270   001650  6E0E               	movwf	(UpdateClock@days+1)^0,c
  1271   001652  0EB2               	movlw	low (main@clock+8)
  1272   001654  6E0F               	movwf	UpdateClock@DoW^0,c
  1273   001656  0E01               	movlw	high (main@clock+8)
  1274   001658  6E10               	movwf	(UpdateClock@DoW+1)^0,c
  1275   00165A  0EB4               	movlw	low (main@clock+10)
  1276   00165C  6E11               	movwf	UpdateClock@months^0,c
  1277   00165E  0E01               	movlw	high (main@clock+10)
  1278   001660  6E12               	movwf	(UpdateClock@months+1)^0,c
  1279   001662  0EB6               	movlw	low (main@clock+12)
  1280   001664  6E13               	movwf	UpdateClock@years^0,c
  1281   001666  0E01               	movlw	high (main@clock+12)
  1282   001668  6E14               	movwf	(UpdateClock@years+1)^0,c
  1283   00166A  0EB8               	movlw	low (main@clock+14)
  1284   00166C  6E15               	movwf	UpdateClock@DSTstate^0,c
  1285   00166E  0E01               	movlw	high (main@clock+14)
  1286   001670  6E16               	movwf	(UpdateClock@DSTstate+1)^0,c
  1287   001672  C150  F017         	movff	main@TestMode,UpdateClock@TestMode
  1288   001676  C151  F018         	movff	main@TestMode+1,UpdateClock@TestMode+1
  1289   00167A  EC23  F007         	call	_UpdateClock	;wreg free
  1290   00167E                     
  1291                           ;main.c: 242:         LEDarray_disp_bin(clock.hours);
  1292   00167E  C1AE  F001         	movff	main@clock+4,LEDarray_disp_bin@number
  1293   001682  C1AF  F002         	movff	main@clock+5,LEDarray_disp_bin@number+1
  1294   001686  EC16  F00E         	call	_LEDarray_disp_bin	;wreg free
  1295   00168A                     
  1296                           ;main.c: 245:         LCD_setline(1);
  1297   00168A  0E01               	movlw	1
  1298   00168C  EC20  F011         	call	_LCD_setline
  1299   001690                     
  1300                           ;main.c: 247:         sprintf(buffer, "Time:%02d:%02d:%02d D%01d",clock.hours, clock.min
      +                          utes, clock.seconds, clock.DoW);
  1301   001690  0E00               	movlw	low main@buffer
  1302   001692  6E2F               	movwf	sprintf@s^0,c
  1303   001694  0E01               	movlw	high main@buffer
  1304   001696  6E30               	movwf	(sprintf@s+1)^0,c
  1305   001698  0E01               	movlw	low STR_1
  1306   00169A  6E31               	movwf	sprintf@fmt^0,c
  1307   00169C  C1AE  F032         	movff	main@clock+4,?_sprintf+3
  1308   0016A0  C1AF  F033         	movff	main@clock+5,?_sprintf+4
  1309   0016A4  C1AC  F034         	movff	main@clock+2,?_sprintf+5
  1310   0016A8  C1AD  F035         	movff	main@clock+3,?_sprintf+6
  1311   0016AC  C1AA  F036         	movff	main@clock,?_sprintf+7
  1312   0016B0  C1AB  F037         	movff	main@clock+1,?_sprintf+8
  1313   0016B4  C1B2  F038         	movff	main@clock+8,?_sprintf+9
  1314   0016B8  C1B3  F039         	movff	main@clock+9,?_sprintf+10
  1315   0016BC  ECE4  F010         	call	_sprintf	;wreg free
  1316   0016C0                     
  1317                           ;main.c: 248:         LCD_sendstring(buffer);
  1318   0016C0  0E00               	movlw	low main@buffer
  1319   0016C2  6E04               	movwf	LCD_sendstring@string^0,c
  1320   0016C4  0E01               	movlw	high main@buffer
  1321   0016C6  6E05               	movwf	(LCD_sendstring@string+1)^0,c
  1322   0016C8  EC57  F011         	call	_LCD_sendstring	;wreg free
  1323   0016CC                     
  1324                           ;main.c: 249:         LCD_setline(2);
  1325   0016CC  0E02               	movlw	2
  1326   0016CE  EC20  F011         	call	_LCD_setline
  1327   0016D2                     
  1328                           ;main.c: 251:         sprintf(buffer, "Date:%02d/%02d/%04d",clock.days, clock.months, cl
      +                          ock.years);
  1329   0016D2  0E00               	movlw	low main@buffer
  1330   0016D4  6E2F               	movwf	sprintf@s^0,c
  1331   0016D6  0E01               	movlw	high main@buffer
  1332   0016D8  6E30               	movwf	(sprintf@s+1)^0,c
  1333   0016DA  0E30               	movlw	low STR_2
  1334   0016DC  6E31               	movwf	sprintf@fmt^0,c
  1335   0016DE  C1B0  F032         	movff	main@clock+6,?_sprintf+3
  1336   0016E2  C1B1  F033         	movff	main@clock+7,?_sprintf+4
  1337   0016E6  C1B4  F034         	movff	main@clock+10,?_sprintf+5
  1338   0016EA  C1B5  F035         	movff	main@clock+11,?_sprintf+6
  1339   0016EE  C1B6  F036         	movff	main@clock+12,?_sprintf+7
  1340   0016F2  C1B7  F037         	movff	main@clock+13,?_sprintf+8
  1341   0016F6  ECE4  F010         	call	_sprintf	;wreg free
  1342   0016FA                     
  1343                           ;main.c: 252:         LCD_sendstring(buffer);
  1344   0016FA  0E00               	movlw	low main@buffer
  1345   0016FC  6E04               	movwf	LCD_sendstring@string^0,c
  1346   0016FE  0E01               	movlw	high main@buffer
  1347   001700  6E05               	movwf	(LCD_sendstring@string+1)^0,c
  1348   001702  EC57  F011         	call	_LCD_sendstring	;wreg free
  1349   001706                     
  1350                           ;main.c: 256:         if (ADC_getval() < light_threshold){
  1351   001706  EC71  F011         	call	_ADC_getval	;wreg free
  1352   00170A  0101               	movlb	1	; () banked
  1353   00170C  514E               	movf	main@light_threshold& (0+255),w,b
  1354   00170E  5C01               	subwf	?_ADC_getval^0,w,c
  1355   001710  514F               	movf	(main@light_threshold+1)& (0+255),w,b
  1356   001712  5802               	subwfb	(?_ADC_getval+1)^0,w,c
  1357   001714  B0D8               	btfsc	status,0,c
  1358   001716  EF8F  F00B         	goto	u3101
  1359   00171A  EF91  F00B         	goto	u3100
  1360   00171E                     u3101:
  1361   00171E  EFC3  F00B         	goto	l3037
  1362   001722                     u3100:
  1363   001722                     
  1364                           ; BSR set to: 1
  1365                           ;main.c: 259:             if ((clock.hours >= 1 && clock.hours < 5) || (clock.hours >= 8
      +                           && clock.hours < 15)) {
  1366   001722  51AE               	movf	(main@clock+4)& (0+255),w,b
  1367   001724  11AF               	iorwf	(main@clock+5)& (0+255),w,b
  1368   001726  B4D8               	btfsc	status,2,c
  1369   001728  EF98  F00B         	goto	u3111
  1370   00172C  EF9A  F00B         	goto	u3110
  1371   001730                     u3111:
  1372   001730  EFA5  F00B         	goto	l3023
  1373   001734                     u3110:
  1374   001734                     
  1375                           ; BSR set to: 1
  1376   001734  51AF               	movf	(main@clock+5)& (0+255),w,b
  1377   001736  E109               	bnz	u3120
  1378   001738  0E05               	movlw	5
  1379   00173A  5DAE               	subwf	(main@clock+4)& (0+255),w,b
  1380   00173C  A0D8               	btfss	status,0,c
  1381   00173E  EFA3  F00B         	goto	u3121
  1382   001742  EFA5  F00B         	goto	u3120
  1383   001746                     u3121:
  1384   001746  EFBB  F00B         	goto	l55
  1385   00174A                     u3120:
  1386   00174A                     l3023:
  1387                           
  1388                           ; BSR set to: 1
  1389   00174A  51AF               	movf	(main@clock+5)& (0+255),w,b
  1390   00174C  E109               	bnz	u3130
  1391   00174E  0E08               	movlw	8
  1392   001750  5DAE               	subwf	(main@clock+4)& (0+255),w,b
  1393   001752  A0D8               	btfss	status,0,c
  1394   001754  EFAE  F00B         	goto	u3131
  1395   001758  EFB0  F00B         	goto	u3130
  1396   00175C                     u3131:
  1397   00175C  EFBE  F00B         	goto	l53
  1398   001760                     u3130:
  1399   001760                     
  1400                           ; BSR set to: 1
  1401   001760  51AF               	movf	(main@clock+5)& (0+255),w,b
  1402   001762  E107               	bnz	u3141
  1403   001764  0E0F               	movlw	15
  1404   001766  5DAE               	subwf	(main@clock+4)& (0+255),w,b
  1405   001768  B0D8               	btfsc	status,0,c
  1406   00176A  EFB9  F00B         	goto	u3141
  1407   00176E  EFBB  F00B         	goto	u3140
  1408   001772                     u3141:
  1409   001772  EFBE  F00B         	goto	l53
  1410   001776                     u3140:
  1411   001776                     l55:
  1412                           
  1413                           ; BSR set to: 1
  1414                           ;main.c: 260:                 LATHbits.LATH3 = 0;
  1415   001776  9680               	bcf	128,3,c	;volatile
  1416                           
  1417                           ;main.c: 261:             }
  1418   001778  EFC3  F00B         	goto	l3037
  1419   00177C                     l53:
  1420                           
  1421                           ; BSR set to: 1
  1422                           ;main.c: 264:                 LATHbits.LATH3 = 1;
  1423   00177C  8680               	bsf	128,3,c	;volatile
  1424   00177E                     
  1425                           ; BSR set to: 1
  1426                           ;main.c: 265:                 if ((Dusk.count = 0)&&(clock.hours >=15 && clock.hours < 8
      +                          )) {
  1427   00177E  0E00               	movlw	0
  1428   001780  6FA5               	movwf	(main@Dusk+3)& (0+255),b
  1429   001782  0E00               	movlw	0
  1430   001784  6FA4               	movwf	(main@Dusk+2)& (0+255),b
  1431   001786                     l3037:
  1432                           
  1433                           ; BSR set to: 1
  1434                           ;main.c: 273:         if (ADC_getval() > light_threshold){
  1435   001786  EC71  F011         	call	_ADC_getval	;wreg free
  1436   00178A  5001               	movf	?_ADC_getval^0,w,c
  1437   00178C  0101               	movlb	1	; () banked
  1438   00178E  5D4E               	subwf	main@light_threshold& (0+255),w,b
  1439   001790  5002               	movf	(?_ADC_getval+1)^0,w,c
  1440   001792  594F               	subwfb	(main@light_threshold+1)& (0+255),w,b
  1441   001794  B0D8               	btfsc	status,0,c
  1442   001796  EFCF  F00B         	goto	u3151
  1443   00179A  EFD1  F00B         	goto	u3150
  1444   00179E                     u3151:
  1445   00179E  EFD6  F00B         	goto	l3051
  1446   0017A2                     u3150:
  1447   0017A2                     
  1448                           ; BSR set to: 1
  1449                           ;main.c: 274:             LATHbits.LATH3 = 0;
  1450   0017A2  9680               	bcf	128,3,c	;volatile
  1451   0017A4                     
  1452                           ; BSR set to: 1
  1453                           ;main.c: 275:             if ((Dawn.count = 0)&&(clock.hours >=4 && clock.hours < 8)) {
  1454   0017A4  0E00               	movlw	0
  1455   0017A6  6F9D               	movwf	(main@Dawn+3)& (0+255),b
  1456   0017A8  0E00               	movlw	0
  1457   0017AA  6F9C               	movwf	(main@Dawn+2)& (0+255),b
  1458   0017AC                     l3051:
  1459                           
  1460                           ; BSR set to: 1
  1461                           ;main.c: 282:         if (clock.days > previousClockDays) {
  1462   0017AC  51B0               	movf	(main@clock+6)& (0+255),w,b
  1463   0017AE  5D4A               	subwf	main@previousClockDays& (0+255),w,b
  1464   0017B0  51B1               	movf	(main@clock+7)& (0+255),w,b
  1465   0017B2  594B               	subwfb	(main@previousClockDays+1)& (0+255),w,b
  1466   0017B4  B0D8               	btfsc	status,0,c
  1467   0017B6  EFDF  F00B         	goto	u3161
  1468   0017BA  EFE1  F00B         	goto	u3160
  1469   0017BE                     u3161:
  1470   0017BE  EF0C  F00B         	goto	l2997
  1471   0017C2                     u3160:
  1472   0017C2                     
  1473                           ; BSR set to: 1
  1474                           ;main.c: 283:             Dawn.count = 0;
  1475   0017C2  0E00               	movlw	0
  1476   0017C4  6F9D               	movwf	(main@Dawn+3)& (0+255),b
  1477   0017C6  0E00               	movlw	0
  1478   0017C8  6F9C               	movwf	(main@Dawn+2)& (0+255),b
  1479                           
  1480                           ;main.c: 284:             Dusk.count = 0;
  1481   0017CA  0E00               	movlw	0
  1482   0017CC  6FA5               	movwf	(main@Dusk+3)& (0+255),b
  1483   0017CE  0E00               	movlw	0
  1484   0017D0  6FA4               	movwf	(main@Dusk+2)& (0+255),b
  1485   0017D2                     
  1486                           ; BSR set to: 1
  1487                           ;main.c: 285:             daycount++;
  1488   0017D2  4B4C               	infsnz	main@daycount& (0+255),f,b
  1489   0017D4  2B4D               	incf	(main@daycount+1)& (0+255),f,b
  1490   0017D6                     
  1491                           ; BSR set to: 1
  1492                           ;main.c: 287:             LATDbits.LATD7 = 1;
  1493   0017D6  8E7C               	bsf	124,7,c	;volatile
  1494   0017D8                     
  1495                           ; BSR set to: 1
  1496                           ;main.c: 288:             previousClockDays = clock.days;
  1497   0017D8  C1B0  F14A         	movff	main@clock+6,main@previousClockDays
  1498   0017DC  C1B1  F14B         	movff	main@clock+7,main@previousClockDays+1
  1499   0017E0                     
  1500                           ; BSR set to: 1
  1501                           ;main.c: 290:             if (daycount == 7) {
  1502   0017E0  0E07               	movlw	7
  1503   0017E2  194C               	xorwf	main@daycount& (0+255),w,b
  1504   0017E4  114D               	iorwf	(main@daycount+1)& (0+255),w,b
  1505   0017E6  A4D8               	btfss	status,2,c
  1506   0017E8  EFF8  F00B         	goto	u3171
  1507   0017EC  EFFA  F00B         	goto	u3170
  1508   0017F0                     u3171:
  1509   0017F0  EF0C  F00B         	goto	l2997
  1510   0017F4                     u3170:
  1511   0017F4                     
  1512                           ; BSR set to: 1
  1513                           ;main.c: 300:                 LATDbits.LATD7 = 1;
  1514   0017F4  8E7C               	bsf	124,7,c	;volatile
  1515                           
  1516                           ;main.c: 301:                 LATHbits.LATH3 = 1;
  1517   0017F6  8680               	bsf	128,3,c	;volatile
  1518   0017F8                     
  1519                           ; BSR set to: 1
  1520                           ;main.c: 302:                 _delay((unsigned long)((500)*(64000000/4000.0)));
  1521   0017F8  0E29               	movlw	41
  1522   0017FA  6E48               	movwf	(??_main+1)^0,c
  1523   0017FC  0E96               	movlw	150
  1524   0017FE  6E47               	movwf	??_main^0,c
  1525   001800  0E7F               	movlw	127
  1526   001802                     u3187:
  1527   001802  2EE8               	decfsz	wreg,f,c
  1528   001804  D7FE               	bra	u3187
  1529   001806  2E47               	decfsz	??_main^0,f,c
  1530   001808  D7FC               	bra	u3187
  1531   00180A  2E48               	decfsz	(??_main+1)^0,f,c
  1532   00180C  D7FA               	bra	u3187
  1533   00180E  0000               	nop	
  1534   001810                     
  1535                           ;main.c: 307:                 daycount = 0;
  1536   001810  0E00               	movlw	0
  1537   001812  0101               	movlb	1	; () banked
  1538   001814  6F4D               	movwf	(main@daycount+1)& (0+255),b
  1539   001816  0E00               	movlw	0
  1540   001818  6F4C               	movwf	main@daycount& (0+255),b
  1541   00181A  EF0C  F00B         	goto	l2997
  1542   00181E  EF18  F000         	goto	start
  1543   001822                     __end_of_main:
  1544                           	callstack 0
  1545                           
  1546 ;; *************** function _sprintf *****************
  1547 ;; Defined at:
  1548 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\nf_sprintf.c"
  1549 ;; Parameters:    Size  Location     Type
  1550 ;;  s               2   46[COMRAM] PTR unsigned char 
  1551 ;;		 -> main@buffer(18), 
  1552 ;;  fmt             1   48[COMRAM] PTR const unsigned char 
  1553 ;;		 -> STR_3(21), STR_2(20), STR_1(26), 
  1554 ;; Auto vars:     Size  Location     Type
  1555 ;;  f              12   58[COMRAM] struct _IO_FILE
  1556 ;;  ret             2    0        int 
  1557 ;;  ap              1   57[COMRAM] PTR void [1]
  1558 ;;		 -> ?_sprintf(2), 
  1559 ;; Return value:  Size  Location     Type
  1560 ;;                  2   46[COMRAM] int 
  1561 ;; Registers used:
  1562 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1563 ;; Tracked objects:
  1564 ;;		On entry : 0/0
  1565 ;;		On exit  : 0/0
  1566 ;;		Unchanged: 0/0
  1567 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1568 ;;      Params:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1569 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1570 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1571 ;;      Totals:        24       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1572 ;;Total ram usage:       24 bytes
  1573 ;; Hardware stack levels used: 1
  1574 ;; Hardware stack levels required when called: 8
  1575 ;; This function calls:
  1576 ;;		_vfprintf
  1577 ;; This function is called by:
  1578 ;;		_main
  1579 ;;		_ADC2String
  1580 ;; This function uses a non-reentrant model
  1581 ;;
  1582                           
  1583                           	psect	text1
  1584   0021C8                     __ptext1:
  1585                           	callstack 0
  1586   0021C8                     _sprintf:
  1587                           	callstack 22
  1588   0021C8  0E32               	movlw	low (?_sprintf+3)
  1589   0021CA  6E3A               	movwf	sprintf@ap^0,c
  1590   0021CC  C02F  F03B         	movff	sprintf@s,sprintf@f
  1591   0021D0  C030  F03C         	movff	sprintf@s+1,sprintf@f+1
  1592   0021D4  0E00               	movlw	0
  1593   0021D6  6E3F               	movwf	(sprintf@f+4)^0,c
  1594   0021D8  0E00               	movlw	0
  1595   0021DA  6E3E               	movwf	(sprintf@f+3)^0,c
  1596   0021DC  0E00               	movlw	0
  1597   0021DE  6E46               	movwf	(sprintf@f+11)^0,c
  1598   0021E0  0E00               	movlw	0
  1599   0021E2  6E45               	movwf	(sprintf@f+10)^0,c
  1600   0021E4  0E3B               	movlw	low sprintf@f
  1601   0021E6  6E2B               	movwf	vfprintf@fp^0,c
  1602   0021E8  C031  F02C         	movff	sprintf@fmt,vfprintf@fmt
  1603   0021EC  0E3A               	movlw	low sprintf@ap
  1604   0021EE  6E2D               	movwf	vfprintf@ap^0,c
  1605   0021F0  ECC3  F010         	call	_vfprintf	;wreg free
  1606   0021F4  503E               	movf	(sprintf@f+3)^0,w,c
  1607   0021F6  242F               	addwf	sprintf@s^0,w,c
  1608   0021F8  6ED9               	movwf	fsr2l,c
  1609   0021FA  503F               	movf	(sprintf@f+4)^0,w,c
  1610   0021FC  2030               	addwfc	(sprintf@s+1)^0,w,c
  1611   0021FE  6EDA               	movwf	fsr2h,c
  1612   002200  6ADF               	clrf	indf2,c
  1613   002202  0012               	return		;funcret
  1614   002204                     __end_of_sprintf:
  1615                           	callstack 0
  1616                           
  1617 ;; *************** function _vfprintf *****************
  1618 ;; Defined at:
  1619 ;;		line 1817 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
  1620 ;; Parameters:    Size  Location     Type
  1621 ;;  fp              1   42[COMRAM] PTR struct _IO_FILE
  1622 ;;		 -> sprintf@f(12), 
  1623 ;;  fmt             1   43[COMRAM] PTR const unsigned char 
  1624 ;;		 -> STR_3(21), STR_2(20), STR_1(26), 
  1625 ;;  ap              1   44[COMRAM] PTR PTR void 
  1626 ;;		 -> sprintf@ap(1), 
  1627 ;; Auto vars:     Size  Location     Type
  1628 ;;  cfmt            1   45[COMRAM] PTR unsigned char 
  1629 ;;		 -> STR_3(21), STR_2(20), STR_1(26), 
  1630 ;; Return value:  Size  Location     Type
  1631 ;;                  2   42[COMRAM] int 
  1632 ;; Registers used:
  1633 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1634 ;; Tracked objects:
  1635 ;;		On entry : 0/0
  1636 ;;		On exit  : 0/0
  1637 ;;		Unchanged: 0/0
  1638 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1639 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1640 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1641 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1642 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1643 ;;Total ram usage:        4 bytes
  1644 ;; Hardware stack levels used: 1
  1645 ;; Hardware stack levels required when called: 7
  1646 ;; This function calls:
  1647 ;;		_vfpfcnvrt
  1648 ;; This function is called by:
  1649 ;;		_sprintf
  1650 ;; This function uses a non-reentrant model
  1651 ;;
  1652                           
  1653                           	psect	text2
  1654   002186                     __ptext2:
  1655                           	callstack 0
  1656   002186                     _vfprintf:
  1657                           	callstack 22
  1658   002186                     
  1659                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1817: int vfprint
      +                          f(FILE *fp, const char *fmt, va_list ap);C:\Program Files\Microchip\xc8\v2.45\pic\source
      +                          s\c99\common\doprnt.c: 1818: {;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\comm
      +                          on\doprnt.c: 1820:     char *cfmt;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\
      +                          common\doprnt.c: 1822:     cfmt = (char *)fmt;
  1660   002186  C02C  F02E         	movff	vfprintf@fmt,vfprintf@cfmt
  1661                           
  1662                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1826:     while (
      +                          *cfmt) {
  1663   00218A  EFCF  F010         	goto	l2303
  1664   00218E                     l2301:
  1665                           
  1666                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1830:    vfpfcnvr
      +                          t(fp, &cfmt, ap);
  1667   00218E  C02B  F020         	movff	vfprintf@fp,vfpfcnvrt@fp
  1668   002192  0E2E               	movlw	low vfprintf@cfmt
  1669   002194  6E21               	movwf	vfpfcnvrt@fmt^0,c
  1670   002196  C02D  F022         	movff	vfprintf@ap,vfpfcnvrt@ap
  1671   00219A  EC11  F00C         	call	_vfpfcnvrt	;wreg free
  1672   00219E                     l2303:
  1673                           
  1674                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1826:     while (
      +                          *cfmt) {
  1675   00219E  C02E  FFF6         	movff	vfprintf@cfmt,tblptrl
  1676   0021A2                     	if	1	;There is more than 1 active tblptr byte
  1677   0021A2  0E0E               	movlw	high __smallconst
  1678   0021A4  6EF7               	movwf	tblptrh,c
  1679   0021A6                     	endif
  1680   0021A6                     	if	0	;tblptru may be non-zero
  1681   0021A6                     	endif
  1682   0021A6                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1683   0021A6  0E00               	movlw	low (__smallconst shr (0+16))
  1684   0021A8  6EF8               	movwf	tblptru,c
  1685   0021AA                     	endif
  1686   0021AA  0008               	tblrd		*
  1687   0021AC  50F5               	movf	tablat,w,c
  1688   0021AE  0900               	iorlw	0
  1689   0021B0  A4D8               	btfss	status,2,c
  1690   0021B2  EFDD  F010         	goto	u1891
  1691   0021B6  EFDF  F010         	goto	u1890
  1692   0021BA                     u1891:
  1693   0021BA  EFC7  F010         	goto	l2301
  1694   0021BE                     u1890:
  1695   0021BE                     
  1696                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1835:  return 0;
  1697   0021BE  0E00               	movlw	0
  1698   0021C0  6E2C               	movwf	(?_vfprintf+1)^0,c
  1699   0021C2  0E00               	movlw	0
  1700   0021C4  6E2B               	movwf	?_vfprintf^0,c
  1701   0021C6  0012               	return		;funcret
  1702   0021C8                     __end_of_vfprintf:
  1703                           	callstack 0
  1704                           
  1705 ;; *************** function _vfpfcnvrt *****************
  1706 ;; Defined at:
  1707 ;;		line 1177 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
  1708 ;; Parameters:    Size  Location     Type
  1709 ;;  fp              1   31[COMRAM] PTR struct _IO_FILE
  1710 ;;		 -> sprintf@f(12), 
  1711 ;;  fmt             1   32[COMRAM] PTR PTR unsigned char 
  1712 ;;		 -> vfprintf@cfmt(1), 
  1713 ;;  ap              1   33[COMRAM] PTR PTR void 
  1714 ;;		 -> sprintf@ap(1), 
  1715 ;; Auto vars:     Size  Location     Type
  1716 ;;  convarg         4   36[COMRAM] struct .
  1717 ;;  cp              1   41[COMRAM] PTR unsigned char 
  1718 ;;		 -> STR_3(21), STR_2(20), STR_1(26), 
  1719 ;;  done            1   40[COMRAM] _Bool 
  1720 ;;  c               1    0        unsigned char 
  1721 ;; Return value:  Size  Location     Type
  1722 ;;                  1    wreg      void 
  1723 ;; Registers used:
  1724 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1725 ;; Tracked objects:
  1726 ;;		On entry : 0/0
  1727 ;;		On exit  : 0/0
  1728 ;;		Unchanged: 0/0
  1729 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1730 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1731 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1732 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1733 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1734 ;;Total ram usage:       11 bytes
  1735 ;; Hardware stack levels used: 1
  1736 ;; Hardware stack levels required when called: 6
  1737 ;; This function calls:
  1738 ;;		_dtoa
  1739 ;;		_fputc
  1740 ;;		_read_prec_or_width
  1741 ;; This function is called by:
  1742 ;;		_vfprintf
  1743 ;; This function uses a non-reentrant model
  1744 ;;
  1745                           
  1746                           	psect	text3
  1747   001822                     __ptext3:
  1748                           	callstack 0
  1749   001822                     _vfpfcnvrt:
  1750                           	callstack 22
  1751   001822                     
  1752                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1177: vfpfcnvrt(F
      +                          ILE *fp, char *fmt[], va_list ap);C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\c
      +                          ommon\doprnt.c: 1178: {;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\dopr
      +                          nt.c: 1179:     char c, *cp;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common
      +                          \doprnt.c: 1180:     _Bool done;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\co
      +                          mmon\doprnt.c: 1188:  } convarg;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\co
      +                          mmon\doprnt.c: 1201:     if ((*fmt)[0] == '%') {
  1753   001822  5021               	movf	vfpfcnvrt@fmt^0,w,c
  1754   001824  6ED9               	movwf	fsr2l,c
  1755   001826  6ADA               	clrf	fsr2h,c
  1756   001828  CFDF FFF6          	movff	indf2,tblptrl
  1757   00182C                     	if	1	;There is more than 1 active tblptr byte
  1758   00182C  0E0E               	movlw	high __smallconst
  1759   00182E  6EF7               	movwf	tblptrh,c
  1760   001830                     	endif
  1761   001830                     	if	0	;tblptru may be non-zero
  1762   001830                     	endif
  1763   001830                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1764   001830  0E00               	movlw	low (__smallconst shr (0+16))
  1765   001832  6EF8               	movwf	tblptru,c
  1766   001834                     	endif
  1767   001834  0008               	tblrd		*
  1768   001836  50F5               	movf	tablat,w,c
  1769   001838  0A25               	xorlw	37
  1770   00183A  A4D8               	btfss	status,2,c
  1771   00183C  EF22  F00C         	goto	u1831
  1772   001840  EF24  F00C         	goto	u1830
  1773   001844                     u1831:
  1774   001844  EFBE  F00C         	goto	l2281
  1775   001848                     u1830:
  1776   001848                     
  1777                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1202:         ++*
      +                          fmt;
  1778   001848  5021               	movf	vfpfcnvrt@fmt^0,w,c
  1779   00184A  6ED9               	movwf	fsr2l,c
  1780   00184C  6ADA               	clrf	fsr2h,c
  1781   00184E  2ADF               	incf	indf2,f,c
  1782   001850                     
  1783                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1204:         fla
      +                          gs = width = 0;
  1784   001850  0E00               	movlw	0
  1785   001852  6E4A               	movwf	(_width+1)^0,c
  1786   001854  0E00               	movlw	0
  1787   001856  6E49               	movwf	_width^0,c
  1788   001858  C049  F04D         	movff	_width,_flags
  1789   00185C                     
  1790                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1205:         pre
      +                          c = -1;
  1791   00185C  684B               	setf	_prec^0,c
  1792   00185E  684C               	setf	(_prec+1)^0,c
  1793   001860                     
  1794                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1209:         don
      +                          e = 0;
  1795   001860  0E00               	movlw	0
  1796   001862  6E29               	movwf	vfpfcnvrt@done^0,c
  1797                           
  1798                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1210:         whi
      +                          le (!done) {
  1799   001864  EF5A  F00C         	goto	l2255
  1800   001868                     l2245:
  1801                           
  1802                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1220:            
      +                                   flags |= (1 << 1);
  1803   001868  824D               	bsf	_flags^0,1,c
  1804   00186A                     
  1805                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1221:            
      +                                   ++*fmt;
  1806   00186A  5021               	movf	vfpfcnvrt@fmt^0,w,c
  1807   00186C  6ED9               	movwf	fsr2l,c
  1808   00186E  6ADA               	clrf	fsr2h,c
  1809   001870  2ADF               	incf	indf2,f,c
  1810                           
  1811                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1222:            
      +                                   break;
  1812   001872  EF5A  F00C         	goto	l2255
  1813   001876                     l2249:
  1814                           
  1815                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1243:            
      +                                   done = 1;
  1816   001876  0E01               	movlw	1
  1817   001878  6E29               	movwf	vfpfcnvrt@done^0,c
  1818                           
  1819                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1244:            
      +                                   break;
  1820   00187A  EF5A  F00C         	goto	l2255
  1821   00187E                     l2253:
  1822   00187E  5021               	movf	vfpfcnvrt@fmt^0,w,c
  1823   001880  6ED9               	movwf	fsr2l,c
  1824   001882  6ADA               	clrf	fsr2h,c
  1825   001884  CFDF FFF6          	movff	indf2,tblptrl
  1826   001888                     	if	1	;There is more than 1 active tblptr byte
  1827   001888  0E0E               	movlw	high __smallconst
  1828   00188A  6EF7               	movwf	tblptrh,c
  1829   00188C                     	endif
  1830   00188C                     	if	0	;tblptru may be non-zero
  1831   00188C                     	endif
  1832   00188C                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1833   00188C  0E00               	movlw	low (__smallconst shr (0+16))
  1834   00188E  6EF8               	movwf	tblptru,c
  1835   001890                     	endif
  1836   001890  0008               	tblrd		*
  1837   001892  50F5               	movf	tablat,w,c
  1838   001894  6E23               	movwf	??_vfpfcnvrt^0,c
  1839   001896  6A24               	clrf	(??_vfpfcnvrt+1)^0,c
  1840                           
  1841                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1842                           ; Switch size 1, requested type "simple"
  1843                           ; Number of cases is 1, Range of values is 0 to 0
  1844                           ; switch strategies available:
  1845                           ; Name         Instructions Cycles
  1846                           ; simple_byte            4     3 (average)
  1847                           ;	Chosen strategy is simple_byte
  1848   001898  5024               	movf	(??_vfpfcnvrt+1)^0,w,c
  1849   00189A  0A00               	xorlw	0	; case 0
  1850   00189C  B4D8               	btfsc	status,2,c
  1851   00189E  EF53  F00C         	goto	l3089
  1852   0018A2  EF3B  F00C         	goto	l2249
  1853   0018A6                     l3089:
  1854                           
  1855                           ; Switch size 1, requested type "simple"
  1856                           ; Number of cases is 1, Range of values is 48 to 48
  1857                           ; switch strategies available:
  1858                           ; Name         Instructions Cycles
  1859                           ; simple_byte            4     3 (average)
  1860                           ;	Chosen strategy is simple_byte
  1861   0018A6  5023               	movf	??_vfpfcnvrt^0,w,c
  1862   0018A8  0A30               	xorlw	48	; case 48
  1863   0018AA  B4D8               	btfsc	status,2,c
  1864   0018AC  EF34  F00C         	goto	l2245
  1865   0018B0  EF3B  F00C         	goto	l2249
  1866   0018B4                     l2255:
  1867                           
  1868                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1210:         whi
      +                          le (!done) {
  1869   0018B4  5029               	movf	vfpfcnvrt@done^0,w,c
  1870   0018B6  B4D8               	btfsc	status,2,c
  1871   0018B8  EF60  F00C         	goto	u1841
  1872   0018BC  EF62  F00C         	goto	u1840
  1873   0018C0                     u1841:
  1874   0018C0  EF3F  F00C         	goto	l2253
  1875   0018C4                     u1840:
  1876   0018C4                     
  1877                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1256:   width = r
      +                          ead_prec_or_width(fmt, ap);
  1878   0018C4  C021  F007         	movff	vfpfcnvrt@fmt,read_prec_or_width@fmt
  1879   0018C8  C022  F008         	movff	vfpfcnvrt@ap,read_prec_or_width@ap
  1880   0018CC  EC91  F00F         	call	_read_prec_or_width	;wreg free
  1881   0018D0  C007  F049         	movff	?_read_prec_or_width,_width
  1882   0018D4  C008  F04A         	movff	?_read_prec_or_width+1,_width+1
  1883   0018D8                     
  1884                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1257:   if (width
      +                           < 0) {
  1885   0018D8  BE4A               	btfsc	(_width+1)^0,7,c
  1886   0018DA  EF73  F00C         	goto	u1850
  1887   0018DE  EF71  F00C         	goto	u1851
  1888   0018E2                     u1851:
  1889   0018E2  EF78  F00C         	goto	l2263
  1890   0018E6                     u1850:
  1891   0018E6                     
  1892                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1258:    flags |=
      +                           (1 << 0);
  1893   0018E6  804D               	bsf	_flags^0,0,c
  1894                           
  1895                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1259:    width = 
      +                          -width;
  1896   0018E8  6C49               	negf	_width^0,c
  1897   0018EA  1E4A               	comf	(_width+1)^0,f,c
  1898   0018EC  B0D8               	btfsc	status,0,c
  1899   0018EE  2A4A               	incf	(_width+1)^0,f,c
  1900   0018F0                     l2263:
  1901                           
  1902                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1291:   cp = *fmt
      +                          ;
  1903   0018F0  5021               	movf	vfpfcnvrt@fmt^0,w,c
  1904   0018F2  6ED9               	movwf	fsr2l,c
  1905   0018F4  6ADA               	clrf	fsr2h,c
  1906   0018F6  50DF               	movf	indf2,w,c
  1907   0018F8  6E2A               	movwf	vfpfcnvrt@cp^0,c
  1908   0018FA                     
  1909                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1361:   if (*cp =
      +                          = 'd' || *cp == 'i') {
  1910   0018FA  C02A  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  1911   0018FE                     	if	1	;There is more than 1 active tblptr byte
  1912   0018FE  0E0E               	movlw	high __smallconst
  1913   001900  6EF7               	movwf	tblptrh,c
  1914   001902                     	endif
  1915   001902                     	if	0	;tblptru may be non-zero
  1916   001902                     	endif
  1917   001902                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1918   001902  0E00               	movlw	low (__smallconst shr (0+16))
  1919   001904  6EF8               	movwf	tblptru,c
  1920   001906                     	endif
  1921   001906  0008               	tblrd		*
  1922   001908  50F5               	movf	tablat,w,c
  1923   00190A  0A64               	xorlw	100
  1924   00190C  B4D8               	btfsc	status,2,c
  1925   00190E  EF8B  F00C         	goto	u1861
  1926   001912  EF8D  F00C         	goto	u1860
  1927   001916                     u1861:
  1928   001916  EF9D  F00C         	goto	l2269
  1929   00191A                     u1860:
  1930   00191A  C02A  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  1931   00191E                     	if	1	;There is more than 1 active tblptr byte
  1932   00191E  0E0E               	movlw	high __smallconst
  1933   001920  6EF7               	movwf	tblptrh,c
  1934   001922                     	endif
  1935   001922                     	if	0	;tblptru may be non-zero
  1936   001922                     	endif
  1937   001922                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1938   001922  0E00               	movlw	low (__smallconst shr (0+16))
  1939   001924  6EF8               	movwf	tblptru,c
  1940   001926                     	endif
  1941   001926  0008               	tblrd		*
  1942   001928  50F5               	movf	tablat,w,c
  1943   00192A  0A69               	xorlw	105
  1944   00192C  A4D8               	btfss	status,2,c
  1945   00192E  EF9B  F00C         	goto	u1871
  1946   001932  EF9D  F00C         	goto	u1870
  1947   001936                     u1871:
  1948   001936  EFB8  F00C         	goto	l2277
  1949   00193A                     u1870:
  1950   00193A                     l2269:
  1951                           
  1952                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1404:    convarg.
      +                          sint = (vfpf_sint_t)(int)(*(int *)__va_arg(*(int **)ap, (int)0));
  1953   00193A  5022               	movf	vfpfcnvrt@ap^0,w,c
  1954   00193C  6ED9               	movwf	fsr2l,c
  1955   00193E  6ADA               	clrf	fsr2h,c
  1956   001940  0E02               	movlw	2
  1957   001942  26DF               	addwf	indf2,f,c
  1958   001944  5CDF               	subwf	indf2,w,c
  1959   001946  6ED9               	movwf	fsr2l,c
  1960   001948  6ADA               	clrf	fsr2h,c
  1961   00194A  CFDE F025          	movff	postinc2,vfpfcnvrt@convarg
  1962   00194E  CFDE F026          	movff	postinc2,vfpfcnvrt@convarg+1
  1963   001952                     
  1964                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1406:    *fmt = c
      +                          p+1;
  1965   001952  5021               	movf	vfpfcnvrt@fmt^0,w,c
  1966   001954  6ED9               	movwf	fsr2l,c
  1967   001956  6ADA               	clrf	fsr2h,c
  1968   001958  282A               	incf	vfpfcnvrt@cp^0,w,c
  1969   00195A  6EDF               	movwf	indf2,c
  1970   00195C                     
  1971                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1432:    return (
      +                          void) dtoa(fp, convarg.sint);;	Return value of _vfpfcnvrt is never used
  1972   00195C  C020  F015         	movff	vfpfcnvrt@fp,dtoa@fp
  1973   001960  C025  F016         	movff	vfpfcnvrt@convarg,dtoa@d
  1974   001964  C026  F017         	movff	vfpfcnvrt@convarg+1,dtoa@d+1
  1975   001968  ECD2  F00C         	call	_dtoa	;wreg free
  1976   00196C  EFD1  F00C         	goto	l1091
  1977   001970                     l2277:
  1978                           
  1979                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1806:         ++*
      +                          fmt;
  1980   001970  5021               	movf	vfpfcnvrt@fmt^0,w,c
  1981   001972  6ED9               	movwf	fsr2l,c
  1982   001974  6ADA               	clrf	fsr2h,c
  1983   001976  2ADF               	incf	indf2,f,c
  1984   001978  EFD1  F00C         	goto	l1091
  1985   00197C                     l2281:
  1986                           
  1987                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1811:     fputc((
      +                          int)(*fmt)[0], fp);
  1988   00197C  5021               	movf	vfpfcnvrt@fmt^0,w,c
  1989   00197E  6ED9               	movwf	fsr2l,c
  1990   001980  6ADA               	clrf	fsr2h,c
  1991   001982  CFDF FFF6          	movff	indf2,tblptrl
  1992   001986                     	if	1	;There is more than 1 active tblptr byte
  1993   001986  0E0E               	movlw	high __smallconst
  1994   001988  6EF7               	movwf	tblptrh,c
  1995   00198A                     	endif
  1996   00198A                     	if	0	;tblptru may be non-zero
  1997   00198A                     	endif
  1998   00198A                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1999   00198A  0E00               	movlw	low (__smallconst shr (0+16))
  2000   00198C  6EF8               	movwf	tblptru,c
  2001   00198E                     	endif
  2002   00198E  0008               	tblrd		*
  2003   001990  50F5               	movf	tablat,w,c
  2004   001992  6E01               	movwf	fputc@c^0,c
  2005   001994  6A02               	clrf	(fputc@c+1)^0,c
  2006   001996  C020  F003         	movff	vfpfcnvrt@fp,fputc@fp
  2007   00199A  ECDC  F00E         	call	_fputc	;wreg free
  2008   00199E  EFB8  F00C         	goto	l2277
  2009   0019A2                     l1091:
  2010   0019A2  0012               	return		;funcret
  2011   0019A4                     __end_of_vfpfcnvrt:
  2012                           	callstack 0
  2013                           
  2014 ;; *************** function _read_prec_or_width *****************
  2015 ;; Defined at:
  2016 ;;		line 1158 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
  2017 ;; Parameters:    Size  Location     Type
  2018 ;;  fmt             1    6[COMRAM] PTR PTR const unsigned c
  2019 ;;		 -> vfprintf@cfmt(1), 
  2020 ;;  ap              1    7[COMRAM] PTR PTR void [1]
  2021 ;;		 -> sprintf@ap(1), 
  2022 ;; Auto vars:     Size  Location     Type
  2023 ;;  c               1    8[COMRAM] unsigned char 
  2024 ;;  n               2    9[COMRAM] int 
  2025 ;; Return value:  Size  Location     Type
  2026 ;;                  2    6[COMRAM] int 
  2027 ;; Registers used:
  2028 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2029 ;; Tracked objects:
  2030 ;;		On entry : 0/0
  2031 ;;		On exit  : 0/0
  2032 ;;		Unchanged: 0/0
  2033 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2034 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2035 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2036 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2037 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2038 ;;Total ram usage:        5 bytes
  2039 ;; Hardware stack levels used: 1
  2040 ;; Hardware stack levels required when called: 2
  2041 ;; This function calls:
  2042 ;;		___wmul
  2043 ;; This function is called by:
  2044 ;;		_vfpfcnvrt
  2045 ;; This function uses a non-reentrant model
  2046 ;;
  2047                           
  2048                           	psect	text4
  2049   001F22                     __ptext4:
  2050                           	callstack 0
  2051   001F22                     _read_prec_or_width:
  2052                           	callstack 25
  2053   001F22                     
  2054                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1159:     int n =
      +                           0;
  2055   001F22  0E00               	movlw	0
  2056   001F24  6E0B               	movwf	(read_prec_or_width@n+1)^0,c
  2057   001F26  0E00               	movlw	0
  2058   001F28  6E0A               	movwf	read_prec_or_width@n^0,c
  2059   001F2A                     
  2060                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1160:     if ((*f
      +                          mt)[0] == '*') {
  2061   001F2A  5007               	movf	read_prec_or_width@fmt^0,w,c
  2062   001F2C  6ED9               	movwf	fsr2l,c
  2063   001F2E  6ADA               	clrf	fsr2h,c
  2064   001F30  CFDF FFF6          	movff	indf2,tblptrl
  2065   001F34                     	if	1	;There is more than 1 active tblptr byte
  2066   001F34  0E0E               	movlw	high __smallconst
  2067   001F36  6EF7               	movwf	tblptrh,c
  2068   001F38                     	endif
  2069   001F38                     	if	0	;tblptru may be non-zero
  2070   001F38                     	endif
  2071   001F38                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  2072   001F38  0E00               	movlw	low (__smallconst shr (0+16))
  2073   001F3A  6EF8               	movwf	tblptru,c
  2074   001F3C                     	endif
  2075   001F3C  0008               	tblrd		*
  2076   001F3E  50F5               	movf	tablat,w,c
  2077   001F40  0A2A               	xorlw	42
  2078   001F42  A4D8               	btfss	status,2,c
  2079   001F44  EFA6  F00F         	goto	u1771
  2080   001F48  EFA8  F00F         	goto	u1770
  2081   001F4C                     u1771:
  2082   001F4C  EFCE  F00F         	goto	l2213
  2083   001F50                     u1770:
  2084   001F50                     
  2085                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1161:         ++*
      +                          fmt;
  2086   001F50  5007               	movf	read_prec_or_width@fmt^0,w,c
  2087   001F52  6ED9               	movwf	fsr2l,c
  2088   001F54  6ADA               	clrf	fsr2h,c
  2089   001F56  2ADF               	incf	indf2,f,c
  2090   001F58                     
  2091                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1162:         n =
      +                           (*(int *)__va_arg(*(int **)*ap, (int)0));
  2092   001F58  5008               	movf	read_prec_or_width@ap^0,w,c
  2093   001F5A  6ED9               	movwf	fsr2l,c
  2094   001F5C  6ADA               	clrf	fsr2h,c
  2095   001F5E  0E02               	movlw	2
  2096   001F60  26DF               	addwf	indf2,f,c
  2097   001F62  5CDF               	subwf	indf2,w,c
  2098   001F64  6ED9               	movwf	fsr2l,c
  2099   001F66  6ADA               	clrf	fsr2h,c
  2100   001F68  CFDE F00A          	movff	postinc2,read_prec_or_width@n
  2101   001F6C  CFDE F00B          	movff	postinc2,read_prec_or_width@n+1
  2102                           
  2103                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1163:     } else 
      +                          {
  2104   001F70  EFE3  F00F         	goto	l1072
  2105   001F74                     l2209:
  2106                           
  2107                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1166:            
      +                           n = n * 10 + c;
  2108   001F74  C00A  F001         	movff	read_prec_or_width@n,___wmul@multiplier
  2109   001F78  C00B  F002         	movff	read_prec_or_width@n+1,___wmul@multiplier+1
  2110   001F7C  0E00               	movlw	0
  2111   001F7E  6E04               	movwf	(___wmul@multiplicand+1)^0,c
  2112   001F80  0E0A               	movlw	10
  2113   001F82  6E03               	movwf	___wmul@multiplicand^0,c
  2114   001F84  EC89  F011         	call	___wmul	;wreg free
  2115   001F88  5009               	movf	read_prec_or_width@c^0,w,c
  2116   001F8A  2401               	addwf	?___wmul^0,w,c
  2117   001F8C  6E0A               	movwf	read_prec_or_width@n^0,c
  2118   001F8E  0E00               	movlw	0
  2119   001F90  2002               	addwfc	(?___wmul+1)^0,w,c
  2120   001F92  6E0B               	movwf	(read_prec_or_width@n+1)^0,c
  2121   001F94                     
  2122                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1167:            
      +                           ++*fmt;
  2123   001F94  5007               	movf	read_prec_or_width@fmt^0,w,c
  2124   001F96  6ED9               	movwf	fsr2l,c
  2125   001F98  6ADA               	clrf	fsr2h,c
  2126   001F9A  2ADF               	incf	indf2,f,c
  2127   001F9C                     l2213:
  2128                           
  2129                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1165:         whi
      +                          le ((c = ((unsigned)(*fmt)[0]) - '0') < 10) {
  2130   001F9C  5007               	movf	read_prec_or_width@fmt^0,w,c
  2131   001F9E  6ED9               	movwf	fsr2l,c
  2132   001FA0  6ADA               	clrf	fsr2h,c
  2133   001FA2  CFDF FFF6          	movff	indf2,tblptrl
  2134   001FA6                     	if	1	;There is more than 1 active tblptr byte
  2135   001FA6  0E0E               	movlw	high __smallconst
  2136   001FA8  6EF7               	movwf	tblptrh,c
  2137   001FAA                     	endif
  2138   001FAA                     	if	0	;tblptru may be non-zero
  2139   001FAA                     	endif
  2140   001FAA                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  2141   001FAA  0E00               	movlw	low (__smallconst shr (0+16))
  2142   001FAC  6EF8               	movwf	tblptru,c
  2143   001FAE                     	endif
  2144   001FAE  0008               	tblrd		*
  2145   001FB0  50F5               	movf	tablat,w,c
  2146   001FB2  0FD0               	addlw	208
  2147   001FB4  6E09               	movwf	read_prec_or_width@c^0,c
  2148   001FB6  0E09               	movlw	9
  2149   001FB8  6409               	cpfsgt	read_prec_or_width@c^0,c
  2150   001FBA  EFE1  F00F         	goto	u1781
  2151   001FBE  EFE3  F00F         	goto	u1780
  2152   001FC2                     u1781:
  2153   001FC2  EFBA  F00F         	goto	l2209
  2154   001FC6                     u1780:
  2155   001FC6                     l1072:
  2156                           
  2157                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1170:     return 
      +                          n;
  2158   001FC6  C00A  F007         	movff	read_prec_or_width@n,?_read_prec_or_width
  2159   001FCA  C00B  F008         	movff	read_prec_or_width@n+1,?_read_prec_or_width+1
  2160   001FCE  0012               	return		;funcret
  2161   001FD0                     __end_of_read_prec_or_width:
  2162                           	callstack 0
  2163                           
  2164 ;; *************** function ___wmul *****************
  2165 ;; Defined at:
  2166 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\Umul16.c"
  2167 ;; Parameters:    Size  Location     Type
  2168 ;;  multiplier      2    0[COMRAM] unsigned int 
  2169 ;;  multiplicand    2    2[COMRAM] unsigned int 
  2170 ;; Auto vars:     Size  Location     Type
  2171 ;;  product         2    4[COMRAM] unsigned int 
  2172 ;; Return value:  Size  Location     Type
  2173 ;;                  2    0[COMRAM] unsigned int 
  2174 ;; Registers used:
  2175 ;;		wreg, status,2, status,0, prodl, prodh
  2176 ;; Tracked objects:
  2177 ;;		On entry : 0/0
  2178 ;;		On exit  : 0/0
  2179 ;;		Unchanged: 0/0
  2180 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2181 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2182 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2183 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2184 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2185 ;;Total ram usage:        6 bytes
  2186 ;; Hardware stack levels used: 1
  2187 ;; Hardware stack levels required when called: 1
  2188 ;; This function calls:
  2189 ;;		Nothing
  2190 ;; This function is called by:
  2191 ;;		_read_prec_or_width
  2192 ;;		_LEDarray_disp_light
  2193 ;;		_LEDarray_disp_PPM
  2194 ;;		_ADC2String
  2195 ;; This function uses a non-reentrant model
  2196 ;;
  2197                           
  2198                           	psect	text5
  2199   002312                     __ptext5:
  2200                           	callstack 0
  2201   002312                     ___wmul:
  2202                           	callstack 25
  2203   002312  5001               	movf	___wmul@multiplier^0,w,c
  2204   002314  0203               	mulwf	___wmul@multiplicand^0,c
  2205   002316  CFF3 F005          	movff	prodl,___wmul@product
  2206   00231A  CFF4 F006          	movff	prodh,___wmul@product+1
  2207   00231E  5001               	movf	___wmul@multiplier^0,w,c
  2208   002320  0204               	mulwf	(___wmul@multiplicand+1)^0,c
  2209   002322  50F3               	movf	243,w,c
  2210   002324  2606               	addwf	(___wmul@product+1)^0,f,c
  2211   002326  5002               	movf	(___wmul@multiplier+1)^0,w,c
  2212   002328  0203               	mulwf	___wmul@multiplicand^0,c
  2213   00232A  50F3               	movf	243,w,c
  2214   00232C  2606               	addwf	(___wmul@product+1)^0,f,c
  2215   00232E  C005  F001         	movff	___wmul@product,?___wmul
  2216   002332  C006  F002         	movff	___wmul@product+1,?___wmul+1
  2217   002336  0012               	return		;funcret
  2218   002338                     __end_of___wmul:
  2219                           	callstack 0
  2220                           
  2221 ;; *************** function _dtoa *****************
  2222 ;; Defined at:
  2223 ;;		line 513 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
  2224 ;; Parameters:    Size  Location     Type
  2225 ;;  fp              1   20[COMRAM] PTR struct _IO_FILE
  2226 ;;		 -> sprintf@f(12), 
  2227 ;;  d               2   21[COMRAM] int 
  2228 ;; Auto vars:     Size  Location     Type
  2229 ;;  i               2   29[COMRAM] int 
  2230 ;;  w               2   26[COMRAM] int 
  2231 ;;  s               1   28[COMRAM] unsigned char 
  2232 ;;  p               1   25[COMRAM] _Bool 
  2233 ;; Return value:  Size  Location     Type
  2234 ;;                  1    wreg      void 
  2235 ;; Registers used:
  2236 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2237 ;; Tracked objects:
  2238 ;;		On entry : 0/0
  2239 ;;		On exit  : 0/0
  2240 ;;		Unchanged: 0/0
  2241 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2242 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2243 ;;      Locals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2244 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2245 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2246 ;;Total ram usage:       11 bytes
  2247 ;; Hardware stack levels used: 1
  2248 ;; Hardware stack levels required when called: 5
  2249 ;; This function calls:
  2250 ;;		___awdiv
  2251 ;;		___awmod
  2252 ;;		_abs
  2253 ;;		_pad
  2254 ;; This function is called by:
  2255 ;;		_vfpfcnvrt
  2256 ;; This function uses a non-reentrant model
  2257 ;;
  2258                           
  2259                           	psect	text6
  2260   0019A4                     __ptext6:
  2261                           	callstack 0
  2262   0019A4                     _dtoa:
  2263                           	callstack 22
  2264   0019A4                     
  2265                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 513: static void 
      +                          dtoa(FILE *fp, vfpf_sint_t d);C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\commo
      +                          n\doprnt.c: 514: {;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c:
      +                           515:  char s;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 516
      +                          :     int i, w;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 52
      +                          0:  _Bool p = 1;
  2266   0019A4  0E01               	movlw	1
  2267   0019A6  6E1A               	movwf	dtoa@p^0,c
  2268   0019A8                     
  2269                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 524:     s = d < 
      +                          0 ? 1 : 0;
  2270   0019A8  BE17               	btfsc	(dtoa@d+1)^0,7,c
  2271   0019AA  EFD9  F00C         	goto	u1671
  2272   0019AE  EFDC  F00C         	goto	u1670
  2273   0019B2                     u1671:
  2274   0019B2  0E01               	movlw	1
  2275   0019B4  EFDD  F00C         	goto	u1680
  2276   0019B8                     u1670:
  2277   0019B8  0E00               	movlw	0
  2278   0019BA                     u1680:
  2279   0019BA  6E1D               	movwf	dtoa@s^0,c
  2280   0019BC                     
  2281                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 535:     w = widt
      +                          h;
  2282   0019BC  C049  F01B         	movff	_width,dtoa@w
  2283   0019C0  C04A  F01C         	movff	_width+1,dtoa@w+1
  2284   0019C4                     
  2285                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 536:     if (s
  2286   0019C4  501D               	movf	dtoa@s^0,w,c
  2287   0019C6  B4D8               	btfsc	status,2,c
  2288   0019C8  EFE8  F00C         	goto	u1691
  2289   0019CC  EFEA  F00C         	goto	u1690
  2290   0019D0                     u1691:
  2291   0019D0  EF01  F00D         	goto	l1055
  2292   0019D4                     u1690:
  2293   0019D4                     
  2294                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 540:     ) {;C:\P
      +                          rogram Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 541:         --w;
  2295   0019D4  061B               	decf	dtoa@w^0,f,c
  2296   0019D6  A0D8               	btfss	status,0,c
  2297   0019D8  061C               	decf	(dtoa@w+1)^0,f,c
  2298   0019DA                     
  2299                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 542:   s = s ? '-
      +                          ' : '+';
  2300   0019DA  501D               	movf	dtoa@s^0,w,c
  2301   0019DC  A4D8               	btfss	status,2,c
  2302   0019DE  EFF3  F00C         	goto	u1701
  2303   0019E2  EFF5  F00C         	goto	u1700
  2304   0019E6                     u1701:
  2305   0019E6  EFFB  F00C         	goto	l2165
  2306   0019EA                     u1700:
  2307   0019EA  0E00               	movlw	0
  2308   0019EC  6E19               	movwf	(_dtoa$1967+1)^0,c
  2309   0019EE  0E2B               	movlw	43
  2310   0019F0  6E18               	movwf	_dtoa$1967^0,c
  2311   0019F2  EFFF  F00C         	goto	l2167
  2312   0019F6                     l2165:
  2313   0019F6  0E00               	movlw	0
  2314   0019F8  6E19               	movwf	(_dtoa$1967+1)^0,c
  2315   0019FA  0E2D               	movlw	45
  2316   0019FC  6E18               	movwf	_dtoa$1967^0,c
  2317   0019FE                     l2167:
  2318   0019FE  C018  F01D         	movff	_dtoa$1967,dtoa@s
  2319   001A02                     l1055:
  2320                           
  2321                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 552:     i = size
      +                          of(dbuf) - 1;
  2322   001A02  0E00               	movlw	0
  2323   001A04  6E1F               	movwf	(dtoa@i+1)^0,c
  2324   001A06  0E1F               	movlw	31
  2325   001A08  6E1E               	movwf	dtoa@i^0,c
  2326   001A0A                     
  2327                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 553:     dbuf[i] 
      +                          = '\0';
  2328   001A0A  0E00               	movlw	0
  2329   001A0C  0100               	movlb	0	; () banked
  2330   001A0E  6F7F               	movwf	(_dbuf+31)& (0+255),b
  2331                           
  2332                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 554:     while (!
      +                          (i < 1) && (d != 0
  2333   001A10  EF37  F00D         	goto	l2181
  2334   001A14                     l2171:
  2335                           
  2336                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 563:     )) {;C:\
      +                          Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 564:         --i;
  2337   001A14  061E               	decf	dtoa@i^0,f,c
  2338   001A16  A0D8               	btfss	status,0,c
  2339   001A18  061F               	decf	(dtoa@i+1)^0,f,c
  2340   001A1A                     
  2341                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 565:         dbuf
      +                          [i] = (char)((int)'0' + abs(d % 10));
  2342   001A1A  501E               	movf	dtoa@i^0,w,c
  2343   001A1C  0F60               	addlw	low _dbuf
  2344   001A1E  6ED9               	movwf	fsr2l,c
  2345   001A20  6ADA               	clrf	fsr2h,c
  2346   001A22  C016  F001         	movff	dtoa@d,___awmod@dividend
  2347   001A26  C017  F002         	movff	dtoa@d+1,___awmod@dividend+1
  2348   001A2A  0E00               	movlw	0
  2349   001A2C  6E04               	movwf	(___awmod@divisor+1)^0,c
  2350   001A2E  0E0A               	movlw	10
  2351   001A30  6E03               	movwf	___awmod@divisor^0,c
  2352   001A32  EC39  F00F         	call	___awmod	;wreg free
  2353   001A36  C001  F007         	movff	?___awmod,abs@a
  2354   001A3A  C002  F008         	movff	?___awmod+1,abs@a+1
  2355   001A3E  EC3D  F011         	call	_abs	;wreg free
  2356   001A42  5007               	movf	?_abs^0,w,c
  2357   001A44  0F30               	addlw	48
  2358   001A46  6EDF               	movwf	indf2,c
  2359   001A48                     
  2360                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 569:   p = 0;
  2361   001A48  0E00               	movlw	0
  2362   001A4A  6E1A               	movwf	dtoa@p^0,c
  2363   001A4C                     
  2364                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 571:         --w;
  2365   001A4C  061B               	decf	dtoa@w^0,f,c
  2366   001A4E  A0D8               	btfss	status,0,c
  2367   001A50  061C               	decf	(dtoa@w+1)^0,f,c
  2368   001A52                     
  2369                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 572:         d = 
      +                          d / 10;
  2370   001A52  C016  F001         	movff	dtoa@d,___awdiv@dividend
  2371   001A56  C017  F002         	movff	dtoa@d+1,___awdiv@dividend+1
  2372   001A5A  0E00               	movlw	0
  2373   001A5C  6E04               	movwf	(___awdiv@divisor+1)^0,c
  2374   001A5E  0E0A               	movlw	10
  2375   001A60  6E03               	movwf	___awdiv@divisor^0,c
  2376   001A62  EC7A  F00E         	call	___awdiv	;wreg free
  2377   001A66  C001  F016         	movff	?___awdiv,dtoa@d
  2378   001A6A  C002  F017         	movff	?___awdiv+1,dtoa@d+1
  2379   001A6E                     l2181:
  2380                           
  2381                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 554:     while (!
      +                          (i < 1) && (d != 0
  2382   001A6E  BE1F               	btfsc	(dtoa@i+1)^0,7,c
  2383   001A70  EF42  F00D         	goto	u1711
  2384   001A74  501F               	movf	(dtoa@i+1)^0,w,c
  2385   001A76  E108               	bnz	u1710
  2386   001A78  041E               	decf	dtoa@i^0,w,c
  2387   001A7A  A0D8               	btfss	status,0,c
  2388   001A7C  EF42  F00D         	goto	u1711
  2389   001A80  EF44  F00D         	goto	u1710
  2390   001A84                     u1711:
  2391   001A84  EF69  F00D         	goto	l2191
  2392   001A88                     u1710:
  2393   001A88  5016               	movf	dtoa@d^0,w,c
  2394   001A8A  1017               	iorwf	(dtoa@d+1)^0,w,c
  2395   001A8C  A4D8               	btfss	status,2,c
  2396   001A8E  EF4B  F00D         	goto	u1721
  2397   001A92  EF4D  F00D         	goto	u1720
  2398   001A96                     u1721:
  2399   001A96  EF0A  F00D         	goto	l2171
  2400   001A9A                     u1720:
  2401   001A9A  501A               	movf	dtoa@p^0,w,c
  2402   001A9C  A4D8               	btfss	status,2,c
  2403   001A9E  EF53  F00D         	goto	u1731
  2404   001AA2  EF55  F00D         	goto	u1730
  2405   001AA6                     u1731:
  2406   001AA6  EF0A  F00D         	goto	l2171
  2407   001AAA                     u1730:
  2408   001AAA  BE1C               	btfsc	(dtoa@w+1)^0,7,c
  2409   001AAC  EF60  F00D         	goto	u1741
  2410   001AB0  501C               	movf	(dtoa@w+1)^0,w,c
  2411   001AB2  E108               	bnz	u1740
  2412   001AB4  041B               	decf	dtoa@w^0,w,c
  2413   001AB6  A0D8               	btfss	status,0,c
  2414   001AB8  EF60  F00D         	goto	u1741
  2415   001ABC  EF62  F00D         	goto	u1740
  2416   001AC0                     u1741:
  2417   001AC0  EF69  F00D         	goto	l2191
  2418   001AC4                     u1740:
  2419   001AC4  B24D               	btfsc	_flags^0,1,c
  2420   001AC6  EF67  F00D         	goto	u1751
  2421   001ACA  EF69  F00D         	goto	u1750
  2422   001ACE                     u1751:
  2423   001ACE  EF0A  F00D         	goto	l2171
  2424   001AD2                     u1750:
  2425   001AD2                     l2191:
  2426                           
  2427                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 576:     if (s !=
      +                           0) {
  2428   001AD2  501D               	movf	dtoa@s^0,w,c
  2429   001AD4  B4D8               	btfsc	status,2,c
  2430   001AD6  EF6F  F00D         	goto	u1761
  2431   001ADA  EF71  F00D         	goto	u1760
  2432   001ADE                     u1761:
  2433   001ADE  EF7A  F00D         	goto	l2197
  2434   001AE2                     u1760:
  2435   001AE2                     
  2436                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 577:         --i;
  2437   001AE2  061E               	decf	dtoa@i^0,f,c
  2438   001AE4  A0D8               	btfss	status,0,c
  2439   001AE6  061F               	decf	(dtoa@i+1)^0,f,c
  2440   001AE8                     
  2441                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 578:         dbuf
      +                          [i] = s;
  2442   001AE8  501E               	movf	dtoa@i^0,w,c
  2443   001AEA  0F60               	addlw	low _dbuf
  2444   001AEC  6ED9               	movwf	fsr2l,c
  2445   001AEE  6ADA               	clrf	fsr2h,c
  2446   001AF0  C01D  FFDF         	movff	dtoa@s,indf2
  2447   001AF4                     l2197:
  2448                           
  2449                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 582:     return (
      +                          void) pad(fp, &dbuf[i], w);
  2450   001AF4  C015  F00E         	movff	dtoa@fp,pad@fp
  2451   001AF8  501E               	movf	dtoa@i^0,w,c
  2452   001AFA  0F60               	addlw	low _dbuf
  2453   001AFC  6E0F               	movwf	pad@buf^0,c
  2454   001AFE  C01B  F010         	movff	dtoa@w,pad@p
  2455   001B02  C01C  F011         	movff	dtoa@w+1,pad@p+1
  2456   001B06  ECE8  F00F         	call	_pad	;wreg free
  2457   001B0A  0012               	return		;funcret
  2458   001B0C                     __end_of_dtoa:
  2459                           	callstack 0
  2460                           
  2461 ;; *************** function _pad *****************
  2462 ;; Defined at:
  2463 ;;		line 193 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
  2464 ;; Parameters:    Size  Location     Type
  2465 ;;  fp              1   13[COMRAM] PTR struct _IO_FILE
  2466 ;;		 -> sprintf@f(12), 
  2467 ;;  buf             1   14[COMRAM] PTR unsigned char 
  2468 ;;		 -> dbuf(32), 
  2469 ;;  p               2   15[COMRAM] int 
  2470 ;; Auto vars:     Size  Location     Type
  2471 ;;  i               2   18[COMRAM] int 
  2472 ;; Return value:  Size  Location     Type
  2473 ;;                  1    wreg      void 
  2474 ;; Registers used:
  2475 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2476 ;; Tracked objects:
  2477 ;;		On entry : 0/0
  2478 ;;		On exit  : 0/0
  2479 ;;		Unchanged: 0/0
  2480 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2481 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2482 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2483 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2484 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2485 ;;Total ram usage:        7 bytes
  2486 ;; Hardware stack levels used: 1
  2487 ;; Hardware stack levels required when called: 4
  2488 ;; This function calls:
  2489 ;;		_fputc
  2490 ;;		_fputs
  2491 ;; This function is called by:
  2492 ;;		_dtoa
  2493 ;; This function uses a non-reentrant model
  2494 ;;
  2495                           
  2496                           	psect	text7
  2497   001FD0                     __ptext7:
  2498                           	callstack 0
  2499   001FD0                     _pad:
  2500                           	callstack 22
  2501   001FD0                     
  2502                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 193: static void 
      +                          pad(FILE *fp, char *buf, int p);C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\com
      +                          mon\doprnt.c: 194: {;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.
      +                          c: 195:     int i;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c:
      +                           199:     if (flags & (1 << 0)) {
  2503   001FD0  A04D               	btfss	_flags^0,0,c
  2504   001FD2  EFED  F00F         	goto	u1621
  2505   001FD6  EFEF  F00F         	goto	u1620
  2506   001FDA                     u1621:
  2507   001FDA  EFF5  F00F         	goto	l2129
  2508   001FDE                     u1620:
  2509   001FDE                     
  2510                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 200:         fput
      +                          s((const char *)buf, fp);
  2511   001FDE  C00F  F009         	movff	pad@buf,fputs@s
  2512   001FE2  C00E  F00A         	movff	pad@fp,fputs@fp
  2513   001FE6  EC02  F011         	call	_fputs	;wreg free
  2514   001FEA                     l2129:
  2515                           
  2516                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 205:  if (p < 0) 
      +                          {
  2517   001FEA  BE11               	btfsc	(pad@p+1)^0,7,c
  2518   001FEC  EFFC  F00F         	goto	u1630
  2519   001FF0  EFFA  F00F         	goto	u1631
  2520   001FF4                     u1631:
  2521   001FF4  EF00  F010         	goto	l1047
  2522   001FF8                     u1630:
  2523   001FF8                     
  2524                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 206:   p = 0;
  2525   001FF8  0E00               	movlw	0
  2526   001FFA  6E11               	movwf	(pad@p+1)^0,c
  2527   001FFC  0E00               	movlw	0
  2528   001FFE  6E10               	movwf	pad@p^0,c
  2529   002000                     l1047:
  2530                           
  2531                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 208:     i = 0;
  2532   002000  0E00               	movlw	0
  2533   002002  6E14               	movwf	(pad@i+1)^0,c
  2534   002004  0E00               	movlw	0
  2535   002006  6E13               	movwf	pad@i^0,c
  2536                           
  2537                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 209:     while (i
      +                           < p) {
  2538   002008  EF10  F010         	goto	l2137
  2539   00200C                     l2133:
  2540                           
  2541                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 210:         fput
      +                          c(' ', fp);
  2542   00200C  0E00               	movlw	0
  2543   00200E  6E02               	movwf	(fputc@c+1)^0,c
  2544   002010  0E20               	movlw	32
  2545   002012  6E01               	movwf	fputc@c^0,c
  2546   002014  C00E  F003         	movff	pad@fp,fputc@fp
  2547   002018  ECDC  F00E         	call	_fputc	;wreg free
  2548   00201C                     
  2549                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 211:         ++i;
  2550   00201C  4A13               	infsnz	pad@i^0,f,c
  2551   00201E  2A14               	incf	(pad@i+1)^0,f,c
  2552   002020                     l2137:
  2553                           
  2554                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 209:     while (i
      +                           < p) {
  2555   002020  5010               	movf	pad@p^0,w,c
  2556   002022  5C13               	subwf	pad@i^0,w,c
  2557   002024  5014               	movf	(pad@i+1)^0,w,c
  2558   002026  0A80               	xorlw	128
  2559   002028  6E12               	movwf	??_pad^0,c
  2560   00202A  5011               	movf	(pad@p+1)^0,w,c
  2561   00202C  0A80               	xorlw	128
  2562   00202E  5812               	subwfb	??_pad^0,w,c
  2563   002030  A0D8               	btfss	status,0,c
  2564   002032  EF1D  F010         	goto	u1641
  2565   002036  EF1F  F010         	goto	u1640
  2566   00203A                     u1641:
  2567   00203A  EF06  F010         	goto	l2133
  2568   00203E                     u1640:
  2569   00203E                     
  2570                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 216:     if (!(fl
      +                          ags & (1 << 0))) {
  2571   00203E  B04D               	btfsc	_flags^0,0,c
  2572   002040  EF24  F010         	goto	u1651
  2573   002044  EF26  F010         	goto	u1650
  2574   002048                     u1651:
  2575   002048  EF2C  F010         	goto	l1052
  2576   00204C                     u1650:
  2577   00204C                     
  2578                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 218:         fput
      +                          s((const char *)buf, fp);
  2579   00204C  C00F  F009         	movff	pad@buf,fputs@s
  2580   002050  C00E  F00A         	movff	pad@fp,fputs@fp
  2581   002054  EC02  F011         	call	_fputs	;wreg free
  2582   002058                     l1052:
  2583   002058  0012               	return		;funcret
  2584   00205A                     __end_of_pad:
  2585                           	callstack 0
  2586                           
  2587 ;; *************** function _fputs *****************
  2588 ;; Defined at:
  2589 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\nf_fputs.c"
  2590 ;; Parameters:    Size  Location     Type
  2591 ;;  s               1    8[COMRAM] PTR const unsigned char 
  2592 ;;		 -> dbuf(32), 
  2593 ;;  fp              1    9[COMRAM] PTR struct _IO_FILE
  2594 ;;		 -> sprintf@f(12), 
  2595 ;; Auto vars:     Size  Location     Type
  2596 ;;  i               2   11[COMRAM] int 
  2597 ;;  c               1   10[COMRAM] unsigned char 
  2598 ;; Return value:  Size  Location     Type
  2599 ;;                  2    8[COMRAM] int 
  2600 ;; Registers used:
  2601 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2602 ;; Tracked objects:
  2603 ;;		On entry : 0/0
  2604 ;;		On exit  : 0/0
  2605 ;;		Unchanged: 0/0
  2606 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2607 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2608 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2609 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2610 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2611 ;;Total ram usage:        5 bytes
  2612 ;; Hardware stack levels used: 1
  2613 ;; Hardware stack levels required when called: 3
  2614 ;; This function calls:
  2615 ;;		_fputc
  2616 ;; This function is called by:
  2617 ;;		_pad
  2618 ;; This function uses a non-reentrant model
  2619 ;;
  2620                           
  2621                           	psect	text8
  2622   002204                     __ptext8:
  2623                           	callstack 0
  2624   002204                     _fputs:
  2625                           	callstack 22
  2626   002204  0E00               	movlw	0
  2627   002206  6E0D               	movwf	(fputs@i+1)^0,c
  2628   002208  0E00               	movlw	0
  2629   00220A  6E0C               	movwf	fputs@i^0,c
  2630   00220C  EF11  F011         	goto	l2037
  2631   002210                     l2033:
  2632   002210  C00B  F001         	movff	fputs@c,fputc@c
  2633   002214  6A02               	clrf	(fputc@c+1)^0,c
  2634   002216  C00A  F003         	movff	fputs@fp,fputc@fp
  2635   00221A  ECDC  F00E         	call	_fputc	;wreg free
  2636   00221E  4A0C               	infsnz	fputs@i^0,f,c
  2637   002220  2A0D               	incf	(fputs@i+1)^0,f,c
  2638   002222                     l2037:
  2639   002222  5009               	movf	fputs@s^0,w,c
  2640   002224  240C               	addwf	fputs@i^0,w,c
  2641   002226  6ED9               	movwf	fsr2l,c
  2642   002228  6ADA               	clrf	fsr2h,c
  2643   00222A  50DF               	movf	indf2,w,c
  2644   00222C  6E0B               	movwf	fputs@c^0,c
  2645   00222E  500B               	movf	fputs@c^0,w,c
  2646   002230  A4D8               	btfss	status,2,c
  2647   002232  EF1D  F011         	goto	u1491
  2648   002236  EF1F  F011         	goto	u1490
  2649   00223A                     u1491:
  2650   00223A  EF08  F011         	goto	l2033
  2651   00223E                     u1490:
  2652   00223E  0012               	return		;funcret
  2653   002240                     __end_of_fputs:
  2654                           	callstack 0
  2655                           
  2656 ;; *************** function _fputc *****************
  2657 ;; Defined at:
  2658 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\nf_fputc.c"
  2659 ;; Parameters:    Size  Location     Type
  2660 ;;  c               2    0[COMRAM] int 
  2661 ;;  fp              1    2[COMRAM] PTR struct _IO_FILE
  2662 ;;		 -> sprintf@f(12), 
  2663 ;; Auto vars:     Size  Location     Type
  2664 ;;		None
  2665 ;; Return value:  Size  Location     Type
  2666 ;;                  2    0[COMRAM] int 
  2667 ;; Registers used:
  2668 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2669 ;; Tracked objects:
  2670 ;;		On entry : 0/0
  2671 ;;		On exit  : 0/0
  2672 ;;		Unchanged: 0/0
  2673 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2674 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2675 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2676 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2677 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2678 ;;Total ram usage:        8 bytes
  2679 ;; Hardware stack levels used: 1
  2680 ;; Hardware stack levels required when called: 2
  2681 ;; This function calls:
  2682 ;;		_putch
  2683 ;; This function is called by:
  2684 ;;		_pad
  2685 ;;		_vfpfcnvrt
  2686 ;;		_fputs
  2687 ;; This function uses a non-reentrant model
  2688 ;;
  2689                           
  2690                           	psect	text9
  2691   001DB8                     __ptext9:
  2692                           	callstack 0
  2693   001DB8                     _fputc:
  2694                           	callstack 25
  2695   001DB8  5003               	movf	fputc@fp^0,w,c
  2696   001DBA  B4D8               	btfsc	status,2,c
  2697   001DBC  EFE2  F00E         	goto	u1451
  2698   001DC0  EFE4  F00E         	goto	u1450
  2699   001DC4                     u1451:
  2700   001DC4  EFEC  F00E         	goto	l2021
  2701   001DC8                     u1450:
  2702   001DC8  5003               	movf	fputc@fp^0,w,c
  2703   001DCA  A4D8               	btfss	status,2,c
  2704   001DCC  EFEA  F00E         	goto	u1461
  2705   001DD0  EFEC  F00E         	goto	u1460
  2706   001DD4                     u1461:
  2707   001DD4  EFF1  F00E         	goto	l2023
  2708   001DD8                     u1460:
  2709   001DD8                     l2021:
  2710   001DD8  5001               	movf	fputc@c^0,w,c
  2711   001DDA  ECF8  F011         	call	_putch
  2712   001DDE  EF38  F00F         	goto	l1116
  2713   001DE2                     l2023:
  2714   001DE2  5003               	movf	fputc@fp^0,w,c
  2715   001DE4  6ED9               	movwf	fsr2l,c
  2716   001DE6  6ADA               	clrf	fsr2h,c
  2717   001DE8  0E0A               	movlw	10
  2718   001DEA  26D9               	addwf	fsr2l,f,c
  2719   001DEC  50DE               	movf	postinc2,w,c
  2720   001DEE  10DE               	iorwf	postinc2,w,c
  2721   001DF0  B4D8               	btfsc	status,2,c
  2722   001DF2  EFFD  F00E         	goto	u1471
  2723   001DF6  EFFF  F00E         	goto	u1470
  2724   001DFA                     u1471:
  2725   001DFA  EF18  F00F         	goto	l2027
  2726   001DFE                     u1470:
  2727   001DFE  5003               	movf	fputc@fp^0,w,c
  2728   001E00  6ED9               	movwf	fsr2l,c
  2729   001E02  6ADA               	clrf	fsr2h,c
  2730   001E04  0E0A               	movlw	10
  2731   001E06  26D9               	addwf	fsr2l,f,c
  2732   001E08  5003               	movf	fputc@fp^0,w,c
  2733   001E0A  6EE1               	movwf	fsr1l,c
  2734   001E0C  6AE2               	clrf	fsr1h,c
  2735   001E0E  0E03               	movlw	3
  2736   001E10  26E1               	addwf	fsr1l,f,c
  2737   001E12  50DE               	movf	postinc2,w,c
  2738   001E14  5CE6               	subwf	postinc1,w,c
  2739   001E16  50E6               	movf	postinc1,w,c
  2740   001E18  0A80               	xorlw	128
  2741   001E1A  6E08               	movwf	(??_fputc+4)^0,c
  2742   001E1C  50DE               	movf	postinc2,w,c
  2743   001E1E  0A80               	xorlw	128
  2744   001E20  5808               	subwfb	(??_fputc+4)^0,w,c
  2745   001E22  B0D8               	btfsc	status,0,c
  2746   001E24  EF16  F00F         	goto	u1481
  2747   001E28  EF18  F00F         	goto	u1480
  2748   001E2C                     u1481:
  2749   001E2C  EF38  F00F         	goto	l1116
  2750   001E30                     u1480:
  2751   001E30                     l2027:
  2752   001E30  5003               	movf	fputc@fp^0,w,c
  2753   001E32  6ED9               	movwf	fsr2l,c
  2754   001E34  6ADA               	clrf	fsr2h,c
  2755   001E36  0E03               	movlw	3
  2756   001E38  26D9               	addwf	fsr2l,f,c
  2757   001E3A  CFDE F004          	movff	postinc2,??_fputc
  2758   001E3E  CFDD F005          	movff	postdec2,??_fputc+1
  2759   001E42  5003               	movf	fputc@fp^0,w,c
  2760   001E44  6ED9               	movwf	fsr2l,c
  2761   001E46  6ADA               	clrf	fsr2h,c
  2762   001E48  CFDE F006          	movff	postinc2,??_fputc+2
  2763   001E4C  CFDD F007          	movff	postdec2,??_fputc+3
  2764   001E50  5004               	movf	??_fputc^0,w,c
  2765   001E52  2406               	addwf	(??_fputc+2)^0,w,c
  2766   001E54  6ED9               	movwf	fsr2l,c
  2767   001E56  5005               	movf	(??_fputc+1)^0,w,c
  2768   001E58  2007               	addwfc	(??_fputc+3)^0,w,c
  2769   001E5A  6EDA               	movwf	fsr2h,c
  2770   001E5C  C001  FFDF         	movff	fputc@c,indf2
  2771   001E60  5003               	movf	fputc@fp^0,w,c
  2772   001E62  6ED9               	movwf	fsr2l,c
  2773   001E64  6ADA               	clrf	fsr2h,c
  2774   001E66  0E03               	movlw	3
  2775   001E68  26D9               	addwf	fsr2l,f,c
  2776   001E6A  2ADE               	incf	postinc2,f,c
  2777   001E6C  0E00               	movlw	0
  2778   001E6E  22DD               	addwfc	postdec2,f,c
  2779   001E70                     l1116:
  2780   001E70  0012               	return		;funcret
  2781   001E72                     __end_of_fputc:
  2782                           	callstack 0
  2783                           
  2784 ;; *************** function _putch *****************
  2785 ;; Defined at:
  2786 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\putch.c"
  2787 ;; Parameters:    Size  Location     Type
  2788 ;;  c               1    wreg     unsigned char 
  2789 ;; Auto vars:     Size  Location     Type
  2790 ;;  c               1    0[COMRAM] unsigned char 
  2791 ;; Return value:  Size  Location     Type
  2792 ;;                  1    wreg      void 
  2793 ;; Registers used:
  2794 ;;		wreg
  2795 ;; Tracked objects:
  2796 ;;		On entry : 0/0
  2797 ;;		On exit  : 0/0
  2798 ;;		Unchanged: 0/0
  2799 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2800 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2801 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2802 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2803 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2804 ;;Total ram usage:        0 bytes
  2805 ;; Hardware stack levels used: 1
  2806 ;; Hardware stack levels required when called: 1
  2807 ;; This function calls:
  2808 ;;		Nothing
  2809 ;; This function is called by:
  2810 ;;		_fputc
  2811 ;; This function uses a non-reentrant model
  2812 ;;
  2813                           
  2814                           	psect	text10
  2815   0023F0                     __ptext10:
  2816                           	callstack 0
  2817   0023F0                     _putch:
  2818                           	callstack 25
  2819   0023F0  0012               	return		;funcret
  2820   0023F2                     __end_of_putch:
  2821                           	callstack 0
  2822                           
  2823 ;; *************** function _abs *****************
  2824 ;; Defined at:
  2825 ;;		line 1 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\abs.c"
  2826 ;; Parameters:    Size  Location     Type
  2827 ;;  a               2    6[COMRAM] int 
  2828 ;; Auto vars:     Size  Location     Type
  2829 ;;		None
  2830 ;; Return value:  Size  Location     Type
  2831 ;;                  2    6[COMRAM] int 
  2832 ;; Registers used:
  2833 ;;		wreg, status,2, status,0
  2834 ;; Tracked objects:
  2835 ;;		On entry : 0/0
  2836 ;;		On exit  : 0/0
  2837 ;;		Unchanged: 0/0
  2838 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2839 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2840 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2841 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2842 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2843 ;;Total ram usage:        4 bytes
  2844 ;; Hardware stack levels used: 1
  2845 ;; Hardware stack levels required when called: 1
  2846 ;; This function calls:
  2847 ;;		Nothing
  2848 ;; This function is called by:
  2849 ;;		_dtoa
  2850 ;; This function uses a non-reentrant model
  2851 ;;
  2852                           
  2853                           	psect	text11
  2854   00227A                     __ptext11:
  2855                           	callstack 0
  2856   00227A                     _abs:
  2857                           	callstack 25
  2858   00227A  BE08               	btfsc	(abs@a+1)^0,7,c
  2859   00227C  EF42  F011         	goto	u1661
  2860   002280  EF44  F011         	goto	u1660
  2861   002284                     u1661:
  2862   002284  EF4A  F011         	goto	l1101
  2863   002288                     u1660:
  2864   002288  C007  F007         	movff	abs@a,?_abs
  2865   00228C  C008  F008         	movff	abs@a+1,?_abs+1
  2866   002290  EF56  F011         	goto	l1104
  2867   002294                     l1101:
  2868   002294  C007  F009         	movff	abs@a,??_abs
  2869   002298  C008  F00A         	movff	abs@a+1,??_abs+1
  2870   00229C  1E09               	comf	??_abs^0,f,c
  2871   00229E  1E0A               	comf	(??_abs+1)^0,f,c
  2872   0022A0  4A09               	infsnz	??_abs^0,f,c
  2873   0022A2  2A0A               	incf	(??_abs+1)^0,f,c
  2874   0022A4  C009  F007         	movff	??_abs,?_abs
  2875   0022A8  C00A  F008         	movff	??_abs+1,?_abs+1
  2876   0022AC                     l1104:
  2877   0022AC  0012               	return		;funcret
  2878   0022AE                     __end_of_abs:
  2879                           	callstack 0
  2880                           
  2881 ;; *************** function ___awdiv *****************
  2882 ;; Defined at:
  2883 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\awdiv.c"
  2884 ;; Parameters:    Size  Location     Type
  2885 ;;  dividend        2    0[COMRAM] int 
  2886 ;;  divisor         2    2[COMRAM] int 
  2887 ;; Auto vars:     Size  Location     Type
  2888 ;;  quotient        2    6[COMRAM] int 
  2889 ;;  sign            1    5[COMRAM] unsigned char 
  2890 ;;  counter         1    4[COMRAM] unsigned char 
  2891 ;; Return value:  Size  Location     Type
  2892 ;;                  2    0[COMRAM] int 
  2893 ;; Registers used:
  2894 ;;		wreg, status,2, status,0
  2895 ;; Tracked objects:
  2896 ;;		On entry : 0/0
  2897 ;;		On exit  : 0/0
  2898 ;;		Unchanged: 0/0
  2899 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2900 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2901 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2902 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2903 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2904 ;;Total ram usage:        8 bytes
  2905 ;; Hardware stack levels used: 1
  2906 ;; Hardware stack levels required when called: 1
  2907 ;; This function calls:
  2908 ;;		Nothing
  2909 ;; This function is called by:
  2910 ;;		_dtoa
  2911 ;; This function uses a non-reentrant model
  2912 ;;
  2913                           
  2914                           	psect	text12
  2915   001CF4                     __ptext12:
  2916                           	callstack 0
  2917   001CF4                     ___awdiv:
  2918                           	callstack 25
  2919   001CF4  0E00               	movlw	0
  2920   001CF6  6E06               	movwf	___awdiv@sign^0,c
  2921   001CF8  BE04               	btfsc	(___awdiv@divisor+1)^0,7,c
  2922   001CFA  EF83  F00E         	goto	u1500
  2923   001CFE  EF81  F00E         	goto	u1501
  2924   001D02                     u1501:
  2925   001D02  EF89  F00E         	goto	l2053
  2926   001D06                     u1500:
  2927   001D06  6C03               	negf	___awdiv@divisor^0,c
  2928   001D08  1E04               	comf	(___awdiv@divisor+1)^0,f,c
  2929   001D0A  B0D8               	btfsc	status,0,c
  2930   001D0C  2A04               	incf	(___awdiv@divisor+1)^0,f,c
  2931   001D0E  0E01               	movlw	1
  2932   001D10  6E06               	movwf	___awdiv@sign^0,c
  2933   001D12                     l2053:
  2934   001D12  BE02               	btfsc	(___awdiv@dividend+1)^0,7,c
  2935   001D14  EF90  F00E         	goto	u1510
  2936   001D18  EF8E  F00E         	goto	u1511
  2937   001D1C                     u1511:
  2938   001D1C  EF96  F00E         	goto	l2059
  2939   001D20                     u1510:
  2940   001D20  6C01               	negf	___awdiv@dividend^0,c
  2941   001D22  1E02               	comf	(___awdiv@dividend+1)^0,f,c
  2942   001D24  B0D8               	btfsc	status,0,c
  2943   001D26  2A02               	incf	(___awdiv@dividend+1)^0,f,c
  2944   001D28  0E01               	movlw	1
  2945   001D2A  1A06               	xorwf	___awdiv@sign^0,f,c
  2946   001D2C                     l2059:
  2947   001D2C  0E00               	movlw	0
  2948   001D2E  6E08               	movwf	(___awdiv@quotient+1)^0,c
  2949   001D30  0E00               	movlw	0
  2950   001D32  6E07               	movwf	___awdiv@quotient^0,c
  2951   001D34  5003               	movf	___awdiv@divisor^0,w,c
  2952   001D36  1004               	iorwf	(___awdiv@divisor+1)^0,w,c
  2953   001D38  B4D8               	btfsc	status,2,c
  2954   001D3A  EFA1  F00E         	goto	u1521
  2955   001D3E  EFA3  F00E         	goto	u1520
  2956   001D42                     u1521:
  2957   001D42  EFCB  F00E         	goto	l2081
  2958   001D46                     u1520:
  2959   001D46  0E01               	movlw	1
  2960   001D48  6E05               	movwf	___awdiv@counter^0,c
  2961   001D4A  EFAB  F00E         	goto	l2067
  2962   001D4E                     l2065:
  2963   001D4E  90D8               	bcf	status,0,c
  2964   001D50  3603               	rlcf	___awdiv@divisor^0,f,c
  2965   001D52  3604               	rlcf	(___awdiv@divisor+1)^0,f,c
  2966   001D54  2A05               	incf	___awdiv@counter^0,f,c
  2967   001D56                     l2067:
  2968   001D56  AE04               	btfss	(___awdiv@divisor+1)^0,7,c
  2969   001D58  EFB0  F00E         	goto	u1531
  2970   001D5C  EFB2  F00E         	goto	u1530
  2971   001D60                     u1531:
  2972   001D60  EFA7  F00E         	goto	l2065
  2973   001D64                     u1530:
  2974   001D64                     l2069:
  2975   001D64  90D8               	bcf	status,0,c
  2976   001D66  3607               	rlcf	___awdiv@quotient^0,f,c
  2977   001D68  3608               	rlcf	(___awdiv@quotient+1)^0,f,c
  2978   001D6A  5003               	movf	___awdiv@divisor^0,w,c
  2979   001D6C  5C01               	subwf	___awdiv@dividend^0,w,c
  2980   001D6E  5004               	movf	(___awdiv@divisor+1)^0,w,c
  2981   001D70  5802               	subwfb	(___awdiv@dividend+1)^0,w,c
  2982   001D72  A0D8               	btfss	status,0,c
  2983   001D74  EFBE  F00E         	goto	u1541
  2984   001D78  EFC0  F00E         	goto	u1540
  2985   001D7C                     u1541:
  2986   001D7C  EFC5  F00E         	goto	l2077
  2987   001D80                     u1540:
  2988   001D80  5003               	movf	___awdiv@divisor^0,w,c
  2989   001D82  5E01               	subwf	___awdiv@dividend^0,f,c
  2990   001D84  5004               	movf	(___awdiv@divisor+1)^0,w,c
  2991   001D86  5A02               	subwfb	(___awdiv@dividend+1)^0,f,c
  2992   001D88  8007               	bsf	___awdiv@quotient^0,0,c
  2993   001D8A                     l2077:
  2994   001D8A  90D8               	bcf	status,0,c
  2995   001D8C  3204               	rrcf	(___awdiv@divisor+1)^0,f,c
  2996   001D8E  3203               	rrcf	___awdiv@divisor^0,f,c
  2997   001D90  2E05               	decfsz	___awdiv@counter^0,f,c
  2998   001D92  EFB2  F00E         	goto	l2069
  2999   001D96                     l2081:
  3000   001D96  5006               	movf	___awdiv@sign^0,w,c
  3001   001D98  B4D8               	btfsc	status,2,c
  3002   001D9A  EFD1  F00E         	goto	u1551
  3003   001D9E  EFD3  F00E         	goto	u1550
  3004   001DA2                     u1551:
  3005   001DA2  EFD7  F00E         	goto	l2085
  3006   001DA6                     u1550:
  3007   001DA6  6C07               	negf	___awdiv@quotient^0,c
  3008   001DA8  1E08               	comf	(___awdiv@quotient+1)^0,f,c
  3009   001DAA  B0D8               	btfsc	status,0,c
  3010   001DAC  2A08               	incf	(___awdiv@quotient+1)^0,f,c
  3011   001DAE                     l2085:
  3012   001DAE  C007  F001         	movff	___awdiv@quotient,?___awdiv
  3013   001DB2  C008  F002         	movff	___awdiv@quotient+1,?___awdiv+1
  3014   001DB6  0012               	return		;funcret
  3015   001DB8                     __end_of___awdiv:
  3016                           	callstack 0
  3017                           
  3018 ;; *************** function _UpdateClock *****************
  3019 ;; Defined at:
  3020 ;;		line 6 in file "clock.c"
  3021 ;; Parameters:    Size  Location     Type
  3022 ;;  seconds         2    6[COMRAM] PTR int 
  3023 ;;		 -> GLOBALsecs(2), 
  3024 ;;  minutes         2    8[COMRAM] PTR int 
  3025 ;;		 -> main@clock(16), 
  3026 ;;  hours           2   10[COMRAM] PTR int 
  3027 ;;		 -> main@clock(16), 
  3028 ;;  days            2   12[COMRAM] PTR int 
  3029 ;;		 -> main@clock(16), 
  3030 ;;  DoW             2   14[COMRAM] PTR int 
  3031 ;;		 -> main@clock(16), 
  3032 ;;  months          2   16[COMRAM] PTR int 
  3033 ;;		 -> main@clock(16), 
  3034 ;;  years           2   18[COMRAM] PTR int 
  3035 ;;		 -> main@clock(16), 
  3036 ;;  DSTstate        2   20[COMRAM] PTR int 
  3037 ;;		 -> main@clock(16), 
  3038 ;;  TestMode        2   22[COMRAM] int 
  3039 ;; Auto vars:     Size  Location     Type
  3040 ;;  DaysInMonth    24   30[COMRAM] int [12]
  3041 ;; Return value:  Size  Location     Type
  3042 ;;                  1    wreg      void 
  3043 ;; Registers used:
  3044 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3045 ;; Tracked objects:
  3046 ;;		On entry : 0/0
  3047 ;;		On exit  : 0/0
  3048 ;;		Unchanged: 0/0
  3049 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3050 ;;      Params:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3051 ;;      Locals:        24       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3052 ;;      Temps:          6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3053 ;;      Totals:        48       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3054 ;;Total ram usage:       48 bytes
  3055 ;; Hardware stack levels used: 1
  3056 ;; Hardware stack levels required when called: 2
  3057 ;; This function calls:
  3058 ;;		___awmod
  3059 ;; This function is called by:
  3060 ;;		_main
  3061 ;; This function uses a non-reentrant model
  3062 ;;
  3063                           
  3064                           	psect	text13
  3065   000E46                     __ptext13:
  3066                           	callstack 0
  3067   000E46                     _UpdateClock:
  3068                           	callstack 28
  3069   000E46                     
  3070                           ;clock.c: 8:     int DaysInMonth[] = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
  3071   000E46  EE20  F080         	lfsr	2,UpdateClock@F14152
  3072   000E4A  EE10  F01F         	lfsr	1,UpdateClock@DaysInMonth
  3073   000E4E  0E17               	movlw	23
  3074   000E50                     u2791:
  3075   000E50  CFDB FFE3          	movff	plusw2,plusw1
  3076   000E54  06E8               	decf	wreg,f,c
  3077   000E56  E2FC               	bc	u2791
  3078   000E58                     
  3079                           ;clock.c: 10:     if (TestMode == 1){
  3080   000E58  0417               	decf	UpdateClock@TestMode^0,w,c
  3081   000E5A  1018               	iorwf	(UpdateClock@TestMode+1)^0,w,c
  3082   000E5C  A4D8               	btfss	status,2,c
  3083   000E5E  EF33  F007         	goto	u2801
  3084   000E62  EF35  F007         	goto	u2800
  3085   000E66                     u2801:
  3086   000E66  EF5B  F007         	goto	l2845
  3087   000E6A                     u2800:
  3088   000E6A                     
  3089                           ;clock.c: 11:        *hours = *seconds;
  3090   000E6A  C007  FFD9         	movff	UpdateClock@seconds,fsr2l
  3091   000E6E  C008  FFDA         	movff	UpdateClock@seconds+1,fsr2h
  3092   000E72  C00B  FFE1         	movff	UpdateClock@hours,fsr1l
  3093   000E76  C00C  FFE2         	movff	UpdateClock@hours+1,fsr1h
  3094   000E7A  CFDE FFE6          	movff	postinc2,postinc1
  3095   000E7E  CFDD FFE5          	movff	postdec2,postdec1
  3096   000E82                     
  3097                           ;clock.c: 12:         if (*seconds >= 24 ){
  3098   000E82  C007  FFD9         	movff	UpdateClock@seconds,fsr2l
  3099   000E86  C008  FFDA         	movff	UpdateClock@seconds+1,fsr2h
  3100   000E8A  0E01               	movlw	1
  3101   000E8C  BEDB               	btfsc	plusw2,7,c
  3102   000E8E  EF53  F007         	goto	u2811
  3103   000E92  0E01               	movlw	1
  3104   000E94  50DB               	movf	plusw2,w,c
  3105   000E96  E109               	bnz	u2810
  3106   000E98  0E18               	movlw	24
  3107   000E9A  5CDE               	subwf	postinc2,w,c
  3108   000E9C  A0D8               	btfss	status,0,c
  3109   000E9E  EF53  F007         	goto	u2811
  3110   000EA2  EF55  F007         	goto	u2810
  3111   000EA6                     u2811:
  3112   000EA6  EF5B  F007         	goto	l2845
  3113   000EAA                     u2810:
  3114   000EAA                     
  3115                           ;clock.c: 13:             *seconds = 0;
  3116   000EAA  C007  FFD9         	movff	UpdateClock@seconds,fsr2l
  3117   000EAE  C008  FFDA         	movff	UpdateClock@seconds+1,fsr2h
  3118   000EB2  6ADE               	clrf	postinc2,c
  3119   000EB4  6ADD               	clrf	postdec2,c
  3120   000EB6                     l2845:
  3121                           
  3122                           ;clock.c: 17:     if (*seconds >= 60 ){
  3123   000EB6  C007  FFD9         	movff	UpdateClock@seconds,fsr2l
  3124   000EBA  C008  FFDA         	movff	UpdateClock@seconds+1,fsr2h
  3125   000EBE  0E01               	movlw	1
  3126   000EC0  BEDB               	btfsc	plusw2,7,c
  3127   000EC2  EF6D  F007         	goto	u2821
  3128   000EC6  0E01               	movlw	1
  3129   000EC8  50DB               	movf	plusw2,w,c
  3130   000ECA  E109               	bnz	u2820
  3131   000ECC  0E3C               	movlw	60
  3132   000ECE  5CDE               	subwf	postinc2,w,c
  3133   000ED0  A0D8               	btfss	status,0,c
  3134   000ED2  EF6D  F007         	goto	u2821
  3135   000ED6  EF6F  F007         	goto	u2820
  3136   000EDA                     u2821:
  3137   000EDA  EF89  F007         	goto	l2851
  3138   000EDE                     u2820:
  3139   000EDE                     
  3140                           ;clock.c: 18:         *seconds = 0;
  3141   000EDE  C007  FFD9         	movff	UpdateClock@seconds,fsr2l
  3142   000EE2  C008  FFDA         	movff	UpdateClock@seconds+1,fsr2h
  3143   000EE6  6ADE               	clrf	postinc2,c
  3144   000EE8  6ADD               	clrf	postdec2,c
  3145   000EEA                     
  3146                           ;clock.c: 19:         *minutes = *minutes + 1;
  3147   000EEA  C009  FFD9         	movff	UpdateClock@minutes,fsr2l
  3148   000EEE  C00A  FFDA         	movff	UpdateClock@minutes+1,fsr2h
  3149   000EF2  CFDE F019          	movff	postinc2,??_UpdateClock
  3150   000EF6  CFDD F01A          	movff	postdec2,??_UpdateClock+1
  3151   000EFA  0E01               	movlw	1
  3152   000EFC  2619               	addwf	??_UpdateClock^0,f,c
  3153   000EFE  0E00               	movlw	0
  3154   000F00  221A               	addwfc	(??_UpdateClock+1)^0,f,c
  3155   000F02  C009  FFD9         	movff	UpdateClock@minutes,fsr2l
  3156   000F06  C00A  FFDA         	movff	UpdateClock@minutes+1,fsr2h
  3157   000F0A  C019  FFDE         	movff	??_UpdateClock,postinc2
  3158   000F0E  C01A  FFDD         	movff	??_UpdateClock+1,postdec2
  3159   000F12                     l2851:
  3160                           
  3161                           ;clock.c: 22:     if (*minutes >= 60){
  3162   000F12  C009  FFD9         	movff	UpdateClock@minutes,fsr2l
  3163   000F16  C00A  FFDA         	movff	UpdateClock@minutes+1,fsr2h
  3164   000F1A  0E01               	movlw	1
  3165   000F1C  BEDB               	btfsc	plusw2,7,c
  3166   000F1E  EF9B  F007         	goto	u2831
  3167   000F22  0E01               	movlw	1
  3168   000F24  50DB               	movf	plusw2,w,c
  3169   000F26  E109               	bnz	u2830
  3170   000F28  0E3C               	movlw	60
  3171   000F2A  5CDE               	subwf	postinc2,w,c
  3172   000F2C  A0D8               	btfss	status,0,c
  3173   000F2E  EF9B  F007         	goto	u2831
  3174   000F32  EF9D  F007         	goto	u2830
  3175   000F36                     u2831:
  3176   000F36  EFB7  F007         	goto	l2857
  3177   000F3A                     u2830:
  3178   000F3A                     
  3179                           ;clock.c: 23:         *minutes = 0;
  3180   000F3A  C009  FFD9         	movff	UpdateClock@minutes,fsr2l
  3181   000F3E  C00A  FFDA         	movff	UpdateClock@minutes+1,fsr2h
  3182   000F42  6ADE               	clrf	postinc2,c
  3183   000F44  6ADD               	clrf	postdec2,c
  3184   000F46                     
  3185                           ;clock.c: 24:         *hours = *hours + 1;
  3186   000F46  C00B  FFD9         	movff	UpdateClock@hours,fsr2l
  3187   000F4A  C00C  FFDA         	movff	UpdateClock@hours+1,fsr2h
  3188   000F4E  CFDE F019          	movff	postinc2,??_UpdateClock
  3189   000F52  CFDD F01A          	movff	postdec2,??_UpdateClock+1
  3190   000F56  0E01               	movlw	1
  3191   000F58  2619               	addwf	??_UpdateClock^0,f,c
  3192   000F5A  0E00               	movlw	0
  3193   000F5C  221A               	addwfc	(??_UpdateClock+1)^0,f,c
  3194   000F5E  C00B  FFD9         	movff	UpdateClock@hours,fsr2l
  3195   000F62  C00C  FFDA         	movff	UpdateClock@hours+1,fsr2h
  3196   000F66  C019  FFDE         	movff	??_UpdateClock,postinc2
  3197   000F6A  C01A  FFDD         	movff	??_UpdateClock+1,postdec2
  3198   000F6E                     l2857:
  3199                           
  3200                           ;clock.c: 27:     if (*hours >= 24){
  3201   000F6E  C00B  FFD9         	movff	UpdateClock@hours,fsr2l
  3202   000F72  C00C  FFDA         	movff	UpdateClock@hours+1,fsr2h
  3203   000F76  0E01               	movlw	1
  3204   000F78  BEDB               	btfsc	plusw2,7,c
  3205   000F7A  EFC9  F007         	goto	u2841
  3206   000F7E  0E01               	movlw	1
  3207   000F80  50DB               	movf	plusw2,w,c
  3208   000F82  E109               	bnz	u2840
  3209   000F84  0E18               	movlw	24
  3210   000F86  5CDE               	subwf	postinc2,w,c
  3211   000F88  A0D8               	btfss	status,0,c
  3212   000F8A  EFC9  F007         	goto	u2841
  3213   000F8E  EFCB  F007         	goto	u2840
  3214   000F92                     u2841:
  3215   000F92  EFF9  F007         	goto	l2865
  3216   000F96                     u2840:
  3217   000F96                     
  3218                           ;clock.c: 28:         *hours = 0;
  3219   000F96  C00B  FFD9         	movff	UpdateClock@hours,fsr2l
  3220   000F9A  C00C  FFDA         	movff	UpdateClock@hours+1,fsr2h
  3221   000F9E  6ADE               	clrf	postinc2,c
  3222   000FA0  6ADD               	clrf	postdec2,c
  3223   000FA2                     
  3224                           ;clock.c: 29:         *days = *days + 1;
  3225   000FA2  C00D  FFD9         	movff	UpdateClock@days,fsr2l
  3226   000FA6  C00E  FFDA         	movff	UpdateClock@days+1,fsr2h
  3227   000FAA  CFDE F019          	movff	postinc2,??_UpdateClock
  3228   000FAE  CFDD F01A          	movff	postdec2,??_UpdateClock+1
  3229   000FB2  0E01               	movlw	1
  3230   000FB4  2619               	addwf	??_UpdateClock^0,f,c
  3231   000FB6  0E00               	movlw	0
  3232   000FB8  221A               	addwfc	(??_UpdateClock+1)^0,f,c
  3233   000FBA  C00D  FFD9         	movff	UpdateClock@days,fsr2l
  3234   000FBE  C00E  FFDA         	movff	UpdateClock@days+1,fsr2h
  3235   000FC2  C019  FFDE         	movff	??_UpdateClock,postinc2
  3236   000FC6  C01A  FFDD         	movff	??_UpdateClock+1,postdec2
  3237   000FCA                     
  3238                           ;clock.c: 30:         *DoW = *DoW + 1;
  3239   000FCA  C00F  FFD9         	movff	UpdateClock@DoW,fsr2l
  3240   000FCE  C010  FFDA         	movff	UpdateClock@DoW+1,fsr2h
  3241   000FD2  CFDE F019          	movff	postinc2,??_UpdateClock
  3242   000FD6  CFDD F01A          	movff	postdec2,??_UpdateClock+1
  3243   000FDA  0E01               	movlw	1
  3244   000FDC  2619               	addwf	??_UpdateClock^0,f,c
  3245   000FDE  0E00               	movlw	0
  3246   000FE0  221A               	addwfc	(??_UpdateClock+1)^0,f,c
  3247   000FE2  C00F  FFD9         	movff	UpdateClock@DoW,fsr2l
  3248   000FE6  C010  FFDA         	movff	UpdateClock@DoW+1,fsr2h
  3249   000FEA  C019  FFDE         	movff	??_UpdateClock,postinc2
  3250   000FEE  C01A  FFDD         	movff	??_UpdateClock+1,postdec2
  3251   000FF2                     l2865:
  3252                           
  3253                           ;clock.c: 33:     if (*DoW >= 8){
  3254   000FF2  C00F  FFD9         	movff	UpdateClock@DoW,fsr2l
  3255   000FF6  C010  FFDA         	movff	UpdateClock@DoW+1,fsr2h
  3256   000FFA  0E01               	movlw	1
  3257   000FFC  BEDB               	btfsc	plusw2,7,c
  3258   000FFE  EF0B  F008         	goto	u2851
  3259   001002  0E01               	movlw	1
  3260   001004  50DB               	movf	plusw2,w,c
  3261   001006  E109               	bnz	u2850
  3262   001008  0E08               	movlw	8
  3263   00100A  5CDE               	subwf	postinc2,w,c
  3264   00100C  A0D8               	btfss	status,0,c
  3265   00100E  EF0B  F008         	goto	u2851
  3266   001012  EF0D  F008         	goto	u2850
  3267   001016                     u2851:
  3268   001016  EF15  F008         	goto	l2869
  3269   00101A                     u2850:
  3270   00101A                     
  3271                           ;clock.c: 34:         *DoW = 1;
  3272   00101A  C00F  FFD9         	movff	UpdateClock@DoW,fsr2l
  3273   00101E  C010  FFDA         	movff	UpdateClock@DoW+1,fsr2h
  3274   001022  0E01               	movlw	1
  3275   001024  6EDE               	movwf	postinc2,c
  3276   001026  0E00               	movlw	0
  3277   001028  6EDD               	movwf	postdec2,c
  3278   00102A                     l2869:
  3279                           
  3280                           ;clock.c: 37:     if((*DSTstate == 0) && (*months == 3) && (*days >= 25) && (*DoW == 7) 
      +                          && ( *hours >= 1) ){
  3281   00102A  C015  FFD9         	movff	UpdateClock@DSTstate,fsr2l
  3282   00102E  C016  FFDA         	movff	UpdateClock@DSTstate+1,fsr2h
  3283   001032  50DE               	movf	postinc2,w,c
  3284   001034  10DE               	iorwf	postinc2,w,c
  3285   001036  A4D8               	btfss	status,2,c
  3286   001038  EF20  F008         	goto	u2861
  3287   00103C  EF22  F008         	goto	u2860
  3288   001040                     u2861:
  3289   001040  EF9E  F008         	goto	l2887
  3290   001044                     u2860:
  3291   001044  C011  FFD9         	movff	UpdateClock@months,fsr2l
  3292   001048  C012  FFDA         	movff	UpdateClock@months+1,fsr2h
  3293   00104C  0E03               	movlw	3
  3294   00104E  18DE               	xorwf	postinc2,w,c
  3295   001050  10DE               	iorwf	postinc2,w,c
  3296   001052  A4D8               	btfss	status,2,c
  3297   001054  EF2E  F008         	goto	u2871
  3298   001058  EF30  F008         	goto	u2870
  3299   00105C                     u2871:
  3300   00105C  EF9E  F008         	goto	l2887
  3301   001060                     u2870:
  3302   001060  C00D  FFD9         	movff	UpdateClock@days,fsr2l
  3303   001064  C00E  FFDA         	movff	UpdateClock@days+1,fsr2h
  3304   001068  0E01               	movlw	1
  3305   00106A  BEDB               	btfsc	plusw2,7,c
  3306   00106C  EF42  F008         	goto	u2881
  3307   001070  0E01               	movlw	1
  3308   001072  50DB               	movf	plusw2,w,c
  3309   001074  E109               	bnz	u2880
  3310   001076  0E19               	movlw	25
  3311   001078  5CDE               	subwf	postinc2,w,c
  3312   00107A  A0D8               	btfss	status,0,c
  3313   00107C  EF42  F008         	goto	u2881
  3314   001080  EF44  F008         	goto	u2880
  3315   001084                     u2881:
  3316   001084  EF9E  F008         	goto	l2887
  3317   001088                     u2880:
  3318   001088  C00F  FFD9         	movff	UpdateClock@DoW,fsr2l
  3319   00108C  C010  FFDA         	movff	UpdateClock@DoW+1,fsr2h
  3320   001090  0E07               	movlw	7
  3321   001092  18DE               	xorwf	postinc2,w,c
  3322   001094  10DE               	iorwf	postinc2,w,c
  3323   001096  A4D8               	btfss	status,2,c
  3324   001098  EF50  F008         	goto	u2891
  3325   00109C  EF52  F008         	goto	u2890
  3326   0010A0                     u2891:
  3327   0010A0  EF9E  F008         	goto	l2887
  3328   0010A4                     u2890:
  3329   0010A4  C00B  FFD9         	movff	UpdateClock@hours,fsr2l
  3330   0010A8  C00C  FFDA         	movff	UpdateClock@hours+1,fsr2h
  3331   0010AC  0E01               	movlw	1
  3332   0010AE  BEDB               	btfsc	plusw2,7,c
  3333   0010B0  EF63  F008         	goto	u2901
  3334   0010B4  0E01               	movlw	1
  3335   0010B6  50DB               	movf	plusw2,w,c
  3336   0010B8  E108               	bnz	u2900
  3337   0010BA  04DE               	decf	postinc2,w,c
  3338   0010BC  A0D8               	btfss	status,0,c
  3339   0010BE  EF63  F008         	goto	u2901
  3340   0010C2  EF65  F008         	goto	u2900
  3341   0010C6                     u2901:
  3342   0010C6  EF9E  F008         	goto	l2887
  3343   0010CA                     u2900:
  3344   0010CA                     
  3345                           ;clock.c: 39:         *hours = *hours + 1;
  3346   0010CA  C00B  FFD9         	movff	UpdateClock@hours,fsr2l
  3347   0010CE  C00C  FFDA         	movff	UpdateClock@hours+1,fsr2h
  3348   0010D2  CFDE F019          	movff	postinc2,??_UpdateClock
  3349   0010D6  CFDD F01A          	movff	postdec2,??_UpdateClock+1
  3350   0010DA  0E01               	movlw	1
  3351   0010DC  2619               	addwf	??_UpdateClock^0,f,c
  3352   0010DE  0E00               	movlw	0
  3353   0010E0  221A               	addwfc	(??_UpdateClock+1)^0,f,c
  3354   0010E2  C00B  FFD9         	movff	UpdateClock@hours,fsr2l
  3355   0010E6  C00C  FFDA         	movff	UpdateClock@hours+1,fsr2h
  3356   0010EA  C019  FFDE         	movff	??_UpdateClock,postinc2
  3357   0010EE  C01A  FFDD         	movff	??_UpdateClock+1,postdec2
  3358   0010F2                     
  3359                           ;clock.c: 40:         if (TestMode == 1){
  3360   0010F2  0417               	decf	UpdateClock@TestMode^0,w,c
  3361   0010F4  1018               	iorwf	(UpdateClock@TestMode+1)^0,w,c
  3362   0010F6  A4D8               	btfss	status,2,c
  3363   0010F8  EF80  F008         	goto	u2911
  3364   0010FC  EF82  F008         	goto	u2910
  3365   001100                     u2911:
  3366   001100  EF96  F008         	goto	l2885
  3367   001104                     u2910:
  3368   001104                     
  3369                           ;clock.c: 41:             *seconds = *seconds + 1;
  3370   001104  C007  FFD9         	movff	UpdateClock@seconds,fsr2l
  3371   001108  C008  FFDA         	movff	UpdateClock@seconds+1,fsr2h
  3372   00110C  CFDE F019          	movff	postinc2,??_UpdateClock
  3373   001110  CFDD F01A          	movff	postdec2,??_UpdateClock+1
  3374   001114  0E01               	movlw	1
  3375   001116  2619               	addwf	??_UpdateClock^0,f,c
  3376   001118  0E00               	movlw	0
  3377   00111A  221A               	addwfc	(??_UpdateClock+1)^0,f,c
  3378   00111C  C007  FFD9         	movff	UpdateClock@seconds,fsr2l
  3379   001120  C008  FFDA         	movff	UpdateClock@seconds+1,fsr2h
  3380   001124  C019  FFDE         	movff	??_UpdateClock,postinc2
  3381   001128  C01A  FFDD         	movff	??_UpdateClock+1,postdec2
  3382   00112C                     l2885:
  3383                           
  3384                           ;clock.c: 43:         *DSTstate = 1;
  3385   00112C  C015  FFD9         	movff	UpdateClock@DSTstate,fsr2l
  3386   001130  C016  FFDA         	movff	UpdateClock@DSTstate+1,fsr2h
  3387   001134  0E01               	movlw	1
  3388   001136  6EDE               	movwf	postinc2,c
  3389   001138  0E00               	movlw	0
  3390   00113A  6EDD               	movwf	postdec2,c
  3391   00113C                     l2887:
  3392                           
  3393                           ;clock.c: 47:     if((*DSTstate==1) && (*months == 10) && (*days >= 25) && (*DoW == 7) &
      +                          & (*hours == 2) ){
  3394   00113C  C015  FFD9         	movff	UpdateClock@DSTstate,fsr2l
  3395   001140  C016  FFDA         	movff	UpdateClock@DSTstate+1,fsr2h
  3396   001144  04DE               	decf	postinc2,w,c
  3397   001146  10DE               	iorwf	postinc2,w,c
  3398   001148  A4D8               	btfss	status,2,c
  3399   00114A  EFA9  F008         	goto	u2921
  3400   00114E  EFAB  F008         	goto	u2920
  3401   001152                     u2921:
  3402   001152  EF24  F009         	goto	l2905
  3403   001156                     u2920:
  3404   001156  C011  FFD9         	movff	UpdateClock@months,fsr2l
  3405   00115A  C012  FFDA         	movff	UpdateClock@months+1,fsr2h
  3406   00115E  0E0A               	movlw	10
  3407   001160  18DE               	xorwf	postinc2,w,c
  3408   001162  10DE               	iorwf	postinc2,w,c
  3409   001164  A4D8               	btfss	status,2,c
  3410   001166  EFB7  F008         	goto	u2931
  3411   00116A  EFB9  F008         	goto	u2930
  3412   00116E                     u2931:
  3413   00116E  EF24  F009         	goto	l2905
  3414   001172                     u2930:
  3415   001172  C00D  FFD9         	movff	UpdateClock@days,fsr2l
  3416   001176  C00E  FFDA         	movff	UpdateClock@days+1,fsr2h
  3417   00117A  0E01               	movlw	1
  3418   00117C  BEDB               	btfsc	plusw2,7,c
  3419   00117E  EFCB  F008         	goto	u2941
  3420   001182  0E01               	movlw	1
  3421   001184  50DB               	movf	plusw2,w,c
  3422   001186  E109               	bnz	u2940
  3423   001188  0E19               	movlw	25
  3424   00118A  5CDE               	subwf	postinc2,w,c
  3425   00118C  A0D8               	btfss	status,0,c
  3426   00118E  EFCB  F008         	goto	u2941
  3427   001192  EFCD  F008         	goto	u2940
  3428   001196                     u2941:
  3429   001196  EF24  F009         	goto	l2905
  3430   00119A                     u2940:
  3431   00119A  C00F  FFD9         	movff	UpdateClock@DoW,fsr2l
  3432   00119E  C010  FFDA         	movff	UpdateClock@DoW+1,fsr2h
  3433   0011A2  0E07               	movlw	7
  3434   0011A4  18DE               	xorwf	postinc2,w,c
  3435   0011A6  10DE               	iorwf	postinc2,w,c
  3436   0011A8  A4D8               	btfss	status,2,c
  3437   0011AA  EFD9  F008         	goto	u2951
  3438   0011AE  EFDB  F008         	goto	u2950
  3439   0011B2                     u2951:
  3440   0011B2  EF24  F009         	goto	l2905
  3441   0011B6                     u2950:
  3442   0011B6  C00B  FFD9         	movff	UpdateClock@hours,fsr2l
  3443   0011BA  C00C  FFDA         	movff	UpdateClock@hours+1,fsr2h
  3444   0011BE  0E02               	movlw	2
  3445   0011C0  18DE               	xorwf	postinc2,w,c
  3446   0011C2  10DE               	iorwf	postinc2,w,c
  3447   0011C4  A4D8               	btfss	status,2,c
  3448   0011C6  EFE7  F008         	goto	u2961
  3449   0011CA  EFE9  F008         	goto	u2960
  3450   0011CE                     u2961:
  3451   0011CE  EF24  F009         	goto	l2905
  3452   0011D2                     u2960:
  3453   0011D2                     
  3454                           ;clock.c: 48:         *hours = *hours - 1;
  3455   0011D2  C00B  FFD9         	movff	UpdateClock@hours,fsr2l
  3456   0011D6  C00C  FFDA         	movff	UpdateClock@hours+1,fsr2h
  3457   0011DA  CFDE F019          	movff	postinc2,??_UpdateClock
  3458   0011DE  CFDD F01A          	movff	postdec2,??_UpdateClock+1
  3459   0011E2  0EFF               	movlw	255
  3460   0011E4  2419               	addwf	??_UpdateClock^0,w,c
  3461   0011E6  6E1B               	movwf	(??_UpdateClock+2)^0,c
  3462   0011E8  0EFF               	movlw	255
  3463   0011EA  201A               	addwfc	(??_UpdateClock+1)^0,w,c
  3464   0011EC  6E1C               	movwf	(??_UpdateClock+3)^0,c
  3465   0011EE  C00B  FFD9         	movff	UpdateClock@hours,fsr2l
  3466   0011F2  C00C  FFDA         	movff	UpdateClock@hours+1,fsr2h
  3467   0011F6  C01B  FFDE         	movff	??_UpdateClock+2,postinc2
  3468   0011FA  C01C  FFDD         	movff	??_UpdateClock+3,postdec2
  3469   0011FE                     
  3470                           ;clock.c: 49:         if (TestMode == 1){
  3471   0011FE  0417               	decf	UpdateClock@TestMode^0,w,c
  3472   001200  1018               	iorwf	(UpdateClock@TestMode+1)^0,w,c
  3473   001202  A4D8               	btfss	status,2,c
  3474   001204  EF06  F009         	goto	u2971
  3475   001208  EF08  F009         	goto	u2970
  3476   00120C                     u2971:
  3477   00120C  EF1E  F009         	goto	l2903
  3478   001210                     u2970:
  3479   001210                     
  3480                           ;clock.c: 50:             *seconds = *seconds - 1;
  3481   001210  C007  FFD9         	movff	UpdateClock@seconds,fsr2l
  3482   001214  C008  FFDA         	movff	UpdateClock@seconds+1,fsr2h
  3483   001218  CFDE F019          	movff	postinc2,??_UpdateClock
  3484   00121C  CFDD F01A          	movff	postdec2,??_UpdateClock+1
  3485   001220  0EFF               	movlw	255
  3486   001222  2419               	addwf	??_UpdateClock^0,w,c
  3487   001224  6E1B               	movwf	(??_UpdateClock+2)^0,c
  3488   001226  0EFF               	movlw	255
  3489   001228  201A               	addwfc	(??_UpdateClock+1)^0,w,c
  3490   00122A  6E1C               	movwf	(??_UpdateClock+3)^0,c
  3491   00122C  C007  FFD9         	movff	UpdateClock@seconds,fsr2l
  3492   001230  C008  FFDA         	movff	UpdateClock@seconds+1,fsr2h
  3493   001234  C01B  FFDE         	movff	??_UpdateClock+2,postinc2
  3494   001238  C01C  FFDD         	movff	??_UpdateClock+3,postdec2
  3495   00123C                     l2903:
  3496                           
  3497                           ;clock.c: 52:         *DSTstate = 0;
  3498   00123C  C015  FFD9         	movff	UpdateClock@DSTstate,fsr2l
  3499   001240  C016  FFDA         	movff	UpdateClock@DSTstate+1,fsr2h
  3500   001244  6ADE               	clrf	postinc2,c
  3501   001246  6ADD               	clrf	postdec2,c
  3502   001248                     l2905:
  3503                           
  3504                           ;clock.c: 56:     if ((*years)%4 == 0 && *months == 2){
  3505   001248  C013  FFD9         	movff	UpdateClock@years,fsr2l
  3506   00124C  C014  FFDA         	movff	UpdateClock@years+1,fsr2h
  3507   001250  CFDE F019          	movff	postinc2,??_UpdateClock
  3508   001254  CFDD F01A          	movff	postdec2,??_UpdateClock+1
  3509   001258  0E03               	movlw	3
  3510   00125A  1619               	andwf	??_UpdateClock^0,f,c
  3511   00125C  0E00               	movlw	0
  3512   00125E  161A               	andwf	(??_UpdateClock+1)^0,f,c
  3513   001260  5019               	movf	??_UpdateClock^0,w,c
  3514   001262  101A               	iorwf	(??_UpdateClock+1)^0,w,c
  3515   001264  A4D8               	btfss	status,2,c
  3516   001266  EF37  F009         	goto	u2981
  3517   00126A  EF39  F009         	goto	u2980
  3518   00126E                     u2981:
  3519   00126E  EF4B  F009         	goto	l2911
  3520   001272                     u2980:
  3521   001272  C011  FFD9         	movff	UpdateClock@months,fsr2l
  3522   001276  C012  FFDA         	movff	UpdateClock@months+1,fsr2h
  3523   00127A  0E02               	movlw	2
  3524   00127C  18DE               	xorwf	postinc2,w,c
  3525   00127E  10DE               	iorwf	postinc2,w,c
  3526   001280  A4D8               	btfss	status,2,c
  3527   001282  EF45  F009         	goto	u2991
  3528   001286  EF47  F009         	goto	u2990
  3529   00128A                     u2991:
  3530   00128A  EF4B  F009         	goto	l2911
  3531   00128E                     u2990:
  3532   00128E                     
  3533                           ;clock.c: 57:        DaysInMonth[1] = 29;
  3534   00128E  0E00               	movlw	0
  3535   001290  6E22               	movwf	(UpdateClock@DaysInMonth+3)^0,c
  3536   001292  0E1D               	movlw	29
  3537   001294  6E21               	movwf	(UpdateClock@DaysInMonth+2)^0,c
  3538   001296                     l2911:
  3539                           
  3540                           ;clock.c: 61:     if (*years%100 == 0 && *months == 2 && *years%400 != 0){
  3541   001296  C013  FFD9         	movff	UpdateClock@years,fsr2l
  3542   00129A  C014  FFDA         	movff	UpdateClock@years+1,fsr2h
  3543   00129E  CFDE F001          	movff	postinc2,___awmod@dividend
  3544   0012A2  CFDD F002          	movff	postdec2,___awmod@dividend+1
  3545   0012A6  0E00               	movlw	0
  3546   0012A8  6E04               	movwf	(___awmod@divisor+1)^0,c
  3547   0012AA  0E64               	movlw	100
  3548   0012AC  6E03               	movwf	___awmod@divisor^0,c
  3549   0012AE  EC39  F00F         	call	___awmod	;wreg free
  3550   0012B2  5001               	movf	?___awmod^0,w,c
  3551   0012B4  1002               	iorwf	(?___awmod+1)^0,w,c
  3552   0012B6  A4D8               	btfss	status,2,c
  3553   0012B8  EF60  F009         	goto	u3001
  3554   0012BC  EF62  F009         	goto	u3000
  3555   0012C0                     u3001:
  3556   0012C0  EF8B  F009         	goto	l2919
  3557   0012C4                     u3000:
  3558   0012C4  C011  FFD9         	movff	UpdateClock@months,fsr2l
  3559   0012C8  C012  FFDA         	movff	UpdateClock@months+1,fsr2h
  3560   0012CC  0E02               	movlw	2
  3561   0012CE  18DE               	xorwf	postinc2,w,c
  3562   0012D0  10DE               	iorwf	postinc2,w,c
  3563   0012D2  A4D8               	btfss	status,2,c
  3564   0012D4  EF6E  F009         	goto	u3011
  3565   0012D8  EF70  F009         	goto	u3010
  3566   0012DC                     u3011:
  3567   0012DC  EF8B  F009         	goto	l2919
  3568   0012E0                     u3010:
  3569   0012E0  C013  FFD9         	movff	UpdateClock@years,fsr2l
  3570   0012E4  C014  FFDA         	movff	UpdateClock@years+1,fsr2h
  3571   0012E8  CFDE F001          	movff	postinc2,___awmod@dividend
  3572   0012EC  CFDD F002          	movff	postdec2,___awmod@dividend+1
  3573   0012F0  0E01               	movlw	1
  3574   0012F2  6E04               	movwf	(___awmod@divisor+1)^0,c
  3575   0012F4  0E90               	movlw	144
  3576   0012F6  6E03               	movwf	___awmod@divisor^0,c
  3577   0012F8  EC39  F00F         	call	___awmod	;wreg free
  3578   0012FC  5001               	movf	?___awmod^0,w,c
  3579   0012FE  1002               	iorwf	(?___awmod+1)^0,w,c
  3580   001300  B4D8               	btfsc	status,2,c
  3581   001302  EF85  F009         	goto	u3021
  3582   001306  EF87  F009         	goto	u3020
  3583   00130A                     u3021:
  3584   00130A  EF8B  F009         	goto	l2919
  3585   00130E                     u3020:
  3586   00130E                     
  3587                           ;clock.c: 62:             DaysInMonth[1] = 28;
  3588   00130E  0E00               	movlw	0
  3589   001310  6E22               	movwf	(UpdateClock@DaysInMonth+3)^0,c
  3590   001312  0E1C               	movlw	28
  3591   001314  6E21               	movwf	(UpdateClock@DaysInMonth+2)^0,c
  3592   001316                     l2919:
  3593                           
  3594                           ;clock.c: 66:     if (*days > (DaysInMonth[*months-1] ) ) {
  3595   001316  C00D  FFD9         	movff	UpdateClock@days,fsr2l
  3596   00131A  C00E  FFDA         	movff	UpdateClock@days+1,fsr2h
  3597   00131E  C011  FFE1         	movff	UpdateClock@months,fsr1l
  3598   001322  C012  FFE2         	movff	UpdateClock@months+1,fsr1h
  3599   001326  50E7               	movf	indf1,w,c
  3600   001328  0D02               	mullw	2
  3601   00132A  CFF3 F01B          	movff	prodl,??_UpdateClock+2
  3602   00132E  0EFE               	movlw	254
  3603   001330  261B               	addwf	(??_UpdateClock+2)^0,f,c
  3604   001332  501B               	movf	(??_UpdateClock+2)^0,w,c
  3605   001334  0F1F               	addlw	low UpdateClock@DaysInMonth
  3606   001336  6EE1               	movwf	fsr1l,c
  3607   001338  6AE2               	clrf	fsr1h,c
  3608   00133A  50DE               	movf	postinc2,w,c
  3609   00133C  5CE6               	subwf	postinc1,w,c
  3610   00133E  50E6               	movf	postinc1,w,c
  3611   001340  0A80               	xorlw	128
  3612   001342  6E1E               	movwf	(??_UpdateClock+5)^0,c
  3613   001344  50DE               	movf	postinc2,w,c
  3614   001346  0A80               	xorlw	128
  3615   001348  581E               	subwfb	(??_UpdateClock+5)^0,w,c
  3616   00134A  B0D8               	btfsc	status,0,c
  3617   00134C  EFAA  F009         	goto	u3031
  3618   001350  EFAC  F009         	goto	u3030
  3619   001354                     u3031:
  3620   001354  EFF8  F009         	goto	l279
  3621   001358                     u3030:
  3622   001358                     
  3623                           ;clock.c: 67:         *days = 1;
  3624   001358  C00D  FFD9         	movff	UpdateClock@days,fsr2l
  3625   00135C  C00E  FFDA         	movff	UpdateClock@days+1,fsr2h
  3626   001360  0E01               	movlw	1
  3627   001362  6EDE               	movwf	postinc2,c
  3628   001364  0E00               	movlw	0
  3629   001366  6EDD               	movwf	postdec2,c
  3630   001368                     
  3631                           ;clock.c: 68:         *months = *months + 1 ;
  3632   001368  C011  FFD9         	movff	UpdateClock@months,fsr2l
  3633   00136C  C012  FFDA         	movff	UpdateClock@months+1,fsr2h
  3634   001370  CFDE F019          	movff	postinc2,??_UpdateClock
  3635   001374  CFDD F01A          	movff	postdec2,??_UpdateClock+1
  3636   001378  0E01               	movlw	1
  3637   00137A  2619               	addwf	??_UpdateClock^0,f,c
  3638   00137C  0E00               	movlw	0
  3639   00137E  221A               	addwfc	(??_UpdateClock+1)^0,f,c
  3640   001380  C011  FFD9         	movff	UpdateClock@months,fsr2l
  3641   001384  C012  FFDA         	movff	UpdateClock@months+1,fsr2h
  3642   001388  C019  FFDE         	movff	??_UpdateClock,postinc2
  3643   00138C  C01A  FFDD         	movff	??_UpdateClock+1,postdec2
  3644   001390                     
  3645                           ;clock.c: 70:         if (*months >= 12+1) {
  3646   001390  C011  FFD9         	movff	UpdateClock@months,fsr2l
  3647   001394  C012  FFDA         	movff	UpdateClock@months+1,fsr2h
  3648   001398  0E01               	movlw	1
  3649   00139A  BEDB               	btfsc	plusw2,7,c
  3650   00139C  EFDA  F009         	goto	u3041
  3651   0013A0  0E01               	movlw	1
  3652   0013A2  50DB               	movf	plusw2,w,c
  3653   0013A4  E109               	bnz	u3040
  3654   0013A6  0E0D               	movlw	13
  3655   0013A8  5CDE               	subwf	postinc2,w,c
  3656   0013AA  A0D8               	btfss	status,0,c
  3657   0013AC  EFDA  F009         	goto	u3041
  3658   0013B0  EFDC  F009         	goto	u3040
  3659   0013B4                     u3041:
  3660   0013B4  EFF8  F009         	goto	l279
  3661   0013B8                     u3040:
  3662   0013B8                     
  3663                           ;clock.c: 71:             *months = 1;
  3664   0013B8  C011  FFD9         	movff	UpdateClock@months,fsr2l
  3665   0013BC  C012  FFDA         	movff	UpdateClock@months+1,fsr2h
  3666   0013C0  0E01               	movlw	1
  3667   0013C2  6EDE               	movwf	postinc2,c
  3668   0013C4  0E00               	movlw	0
  3669   0013C6  6EDD               	movwf	postdec2,c
  3670   0013C8                     
  3671                           ;clock.c: 72:             *years = *years + 1;
  3672   0013C8  C013  FFD9         	movff	UpdateClock@years,fsr2l
  3673   0013CC  C014  FFDA         	movff	UpdateClock@years+1,fsr2h
  3674   0013D0  CFDE F019          	movff	postinc2,??_UpdateClock
  3675   0013D4  CFDD F01A          	movff	postdec2,??_UpdateClock+1
  3676   0013D8  0E01               	movlw	1
  3677   0013DA  2619               	addwf	??_UpdateClock^0,f,c
  3678   0013DC  0E00               	movlw	0
  3679   0013DE  221A               	addwfc	(??_UpdateClock+1)^0,f,c
  3680   0013E0  C013  FFD9         	movff	UpdateClock@years,fsr2l
  3681   0013E4  C014  FFDA         	movff	UpdateClock@years+1,fsr2h
  3682   0013E8  C019  FFDE         	movff	??_UpdateClock,postinc2
  3683   0013EC  C01A  FFDD         	movff	??_UpdateClock+1,postdec2
  3684   0013F0                     l279:
  3685   0013F0  0012               	return		;funcret
  3686   0013F2                     __end_of_UpdateClock:
  3687                           	callstack 0
  3688                           
  3689 ;; *************** function ___awmod *****************
  3690 ;; Defined at:
  3691 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\awmod.c"
  3692 ;; Parameters:    Size  Location     Type
  3693 ;;  dividend        2    0[COMRAM] int 
  3694 ;;  divisor         2    2[COMRAM] int 
  3695 ;; Auto vars:     Size  Location     Type
  3696 ;;  sign            1    5[COMRAM] unsigned char 
  3697 ;;  counter         1    4[COMRAM] unsigned char 
  3698 ;; Return value:  Size  Location     Type
  3699 ;;                  2    0[COMRAM] int 
  3700 ;; Registers used:
  3701 ;;		wreg, status,2, status,0
  3702 ;; Tracked objects:
  3703 ;;		On entry : 0/0
  3704 ;;		On exit  : 0/0
  3705 ;;		Unchanged: 0/0
  3706 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3707 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3708 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3709 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3710 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3711 ;;Total ram usage:        6 bytes
  3712 ;; Hardware stack levels used: 1
  3713 ;; Hardware stack levels required when called: 1
  3714 ;; This function calls:
  3715 ;;		Nothing
  3716 ;; This function is called by:
  3717 ;;		_UpdateClock
  3718 ;;		_dtoa
  3719 ;; This function uses a non-reentrant model
  3720 ;;
  3721                           
  3722                           	psect	text14
  3723   001E72                     __ptext14:
  3724                           	callstack 0
  3725   001E72                     ___awmod:
  3726                           	callstack 25
  3727   001E72  0E00               	movlw	0
  3728   001E74  6E06               	movwf	___awmod@sign^0,c
  3729   001E76  BE02               	btfsc	(___awmod@dividend+1)^0,7,c
  3730   001E78  EF42  F00F         	goto	u1560
  3731   001E7C  EF40  F00F         	goto	u1561
  3732   001E80                     u1561:
  3733   001E80  EF48  F00F         	goto	l2097
  3734   001E84                     u1560:
  3735   001E84  6C01               	negf	___awmod@dividend^0,c
  3736   001E86  1E02               	comf	(___awmod@dividend+1)^0,f,c
  3737   001E88  B0D8               	btfsc	status,0,c
  3738   001E8A  2A02               	incf	(___awmod@dividend+1)^0,f,c
  3739   001E8C  0E01               	movlw	1
  3740   001E8E  6E06               	movwf	___awmod@sign^0,c
  3741   001E90                     l2097:
  3742   001E90  BE04               	btfsc	(___awmod@divisor+1)^0,7,c
  3743   001E92  EF4F  F00F         	goto	u1570
  3744   001E96  EF4D  F00F         	goto	u1571
  3745   001E9A                     u1571:
  3746   001E9A  EF53  F00F         	goto	l2101
  3747   001E9E                     u1570:
  3748   001E9E  6C03               	negf	___awmod@divisor^0,c
  3749   001EA0  1E04               	comf	(___awmod@divisor+1)^0,f,c
  3750   001EA2  B0D8               	btfsc	status,0,c
  3751   001EA4  2A04               	incf	(___awmod@divisor+1)^0,f,c
  3752   001EA6                     l2101:
  3753   001EA6  5003               	movf	___awmod@divisor^0,w,c
  3754   001EA8  1004               	iorwf	(___awmod@divisor+1)^0,w,c
  3755   001EAA  B4D8               	btfsc	status,2,c
  3756   001EAC  EF5A  F00F         	goto	u1581
  3757   001EB0  EF5C  F00F         	goto	u1580
  3758   001EB4                     u1581:
  3759   001EB4  EF80  F00F         	goto	l2117
  3760   001EB8                     u1580:
  3761   001EB8  0E01               	movlw	1
  3762   001EBA  6E05               	movwf	___awmod@counter^0,c
  3763   001EBC  EF64  F00F         	goto	l2107
  3764   001EC0                     l2105:
  3765   001EC0  90D8               	bcf	status,0,c
  3766   001EC2  3603               	rlcf	___awmod@divisor^0,f,c
  3767   001EC4  3604               	rlcf	(___awmod@divisor+1)^0,f,c
  3768   001EC6  2A05               	incf	___awmod@counter^0,f,c
  3769   001EC8                     l2107:
  3770   001EC8  AE04               	btfss	(___awmod@divisor+1)^0,7,c
  3771   001ECA  EF69  F00F         	goto	u1591
  3772   001ECE  EF6B  F00F         	goto	u1590
  3773   001ED2                     u1591:
  3774   001ED2  EF60  F00F         	goto	l2105
  3775   001ED6                     u1590:
  3776   001ED6                     l2109:
  3777   001ED6  5003               	movf	___awmod@divisor^0,w,c
  3778   001ED8  5C01               	subwf	___awmod@dividend^0,w,c
  3779   001EDA  5004               	movf	(___awmod@divisor+1)^0,w,c
  3780   001EDC  5802               	subwfb	(___awmod@dividend+1)^0,w,c
  3781   001EDE  A0D8               	btfss	status,0,c
  3782   001EE0  EF74  F00F         	goto	u1601
  3783   001EE4  EF76  F00F         	goto	u1600
  3784   001EE8                     u1601:
  3785   001EE8  EF7A  F00F         	goto	l2113
  3786   001EEC                     u1600:
  3787   001EEC  5003               	movf	___awmod@divisor^0,w,c
  3788   001EEE  5E01               	subwf	___awmod@dividend^0,f,c
  3789   001EF0  5004               	movf	(___awmod@divisor+1)^0,w,c
  3790   001EF2  5A02               	subwfb	(___awmod@dividend+1)^0,f,c
  3791   001EF4                     l2113:
  3792   001EF4  90D8               	bcf	status,0,c
  3793   001EF6  3204               	rrcf	(___awmod@divisor+1)^0,f,c
  3794   001EF8  3203               	rrcf	___awmod@divisor^0,f,c
  3795   001EFA  2E05               	decfsz	___awmod@counter^0,f,c
  3796   001EFC  EF6B  F00F         	goto	l2109
  3797   001F00                     l2117:
  3798   001F00  5006               	movf	___awmod@sign^0,w,c
  3799   001F02  B4D8               	btfsc	status,2,c
  3800   001F04  EF86  F00F         	goto	u1611
  3801   001F08  EF88  F00F         	goto	u1610
  3802   001F0C                     u1611:
  3803   001F0C  EF8C  F00F         	goto	l2121
  3804   001F10                     u1610:
  3805   001F10  6C01               	negf	___awmod@dividend^0,c
  3806   001F12  1E02               	comf	(___awmod@dividend+1)^0,f,c
  3807   001F14  B0D8               	btfsc	status,0,c
  3808   001F16  2A02               	incf	(___awmod@dividend+1)^0,f,c
  3809   001F18                     l2121:
  3810   001F18  C001  F001         	movff	___awmod@dividend,?___awmod
  3811   001F1C  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
  3812   001F20  0012               	return		;funcret
  3813   001F22                     __end_of___awmod:
  3814                           	callstack 0
  3815                           
  3816 ;; *************** function _Timer0_init *****************
  3817 ;; Defined at:
  3818 ;;		line 8 in file "timers.c"
  3819 ;; Parameters:    Size  Location     Type
  3820 ;;		None
  3821 ;; Auto vars:     Size  Location     Type
  3822 ;;		None
  3823 ;; Return value:  Size  Location     Type
  3824 ;;                  1    wreg      void 
  3825 ;; Registers used:
  3826 ;;		wreg, status,2
  3827 ;; Tracked objects:
  3828 ;;		On entry : 0/0
  3829 ;;		On exit  : 0/0
  3830 ;;		Unchanged: 0/0
  3831 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3832 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3833 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3834 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3835 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3836 ;;Total ram usage:        0 bytes
  3837 ;; Hardware stack levels used: 1
  3838 ;; Hardware stack levels required when called: 1
  3839 ;; This function calls:
  3840 ;;		Nothing
  3841 ;; This function is called by:
  3842 ;;		_main
  3843 ;; This function uses a non-reentrant model
  3844 ;;
  3845                           
  3846                           	psect	text15
  3847   002382                     __ptext15:
  3848                           	callstack 0
  3849   002382                     _Timer0_init:
  3850                           	callstack 29
  3851   002382                     
  3852                           ;timers.c: 10:     T0CON1bits.T0CS=0b010;
  3853   002382  50D6               	movf	214,w,c	;volatile
  3854   002384  0B1F               	andlw	-225
  3855   002386  0940               	iorlw	64
  3856   002388  6ED6               	movwf	214,c	;volatile
  3857   00238A                     
  3858                           ;timers.c: 11:     T0CON1bits.T0ASYNC=1;
  3859   00238A  88D6               	bsf	214,4,c	;volatile
  3860                           
  3861                           ;timers.c: 13:     T0CON1bits.T0CKPS=0b1000;
  3862   00238C  50D6               	movf	214,w,c	;volatile
  3863   00238E  0BF0               	andlw	-16
  3864   002390  0908               	iorlw	8
  3865   002392  6ED6               	movwf	214,c	;volatile
  3866   002394                     
  3867                           ;timers.c: 15:     T0CON0bits.T016BIT=1;
  3868   002394  88D5               	bsf	213,4,c	;volatile
  3869                           
  3870                           ;timers.c: 18:     TMR0H = 0b00001011;
  3871   002396  0E0B               	movlw	11
  3872   002398  6ED4               	movwf	212,c	;volatile
  3873                           
  3874                           ;timers.c: 19:     TMR0L = 0b11011100;
  3875   00239A  0EDC               	movlw	220
  3876   00239C  6ED3               	movwf	211,c	;volatile
  3877   00239E                     
  3878                           ;timers.c: 35:     T0CON0bits.T0EN=1;
  3879   00239E  8ED5               	bsf	213,7,c	;volatile
  3880   0023A0  0012               	return		;funcret
  3881   0023A2                     __end_of_Timer0_init:
  3882                           	callstack 0
  3883                           
  3884 ;; *************** function _LEDarray_init *****************
  3885 ;; Defined at:
  3886 ;;		line 8 in file "LEDarray.c"
  3887 ;; Parameters:    Size  Location     Type
  3888 ;;		None
  3889 ;; Auto vars:     Size  Location     Type
  3890 ;;		None
  3891 ;; Return value:  Size  Location     Type
  3892 ;;                  1    wreg      void 
  3893 ;; Registers used:
  3894 ;;		None
  3895 ;; Tracked objects:
  3896 ;;		On entry : 0/0
  3897 ;;		On exit  : 0/0
  3898 ;;		Unchanged: 0/0
  3899 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3900 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3901 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3902 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3903 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3904 ;;Total ram usage:        0 bytes
  3905 ;; Hardware stack levels used: 1
  3906 ;; Hardware stack levels required when called: 1
  3907 ;; This function calls:
  3908 ;;		Nothing
  3909 ;; This function is called by:
  3910 ;;		_main
  3911 ;; This function uses a non-reentrant model
  3912 ;;
  3913                           
  3914                           	psect	text16
  3915   002338                     __ptext16:
  3916                           	callstack 0
  3917   002338                     _LEDarray_init:
  3918                           	callstack 29
  3919   002338                     
  3920                           ;LEDarray.c: 16:     TRISGbits.TRISG0 = 0;
  3921   002338  9087               	bcf	135,0,c	;volatile
  3922                           
  3923                           ;LEDarray.c: 17:     LATGbits.LATG0 = 0;
  3924   00233A  907F               	bcf	127,0,c	;volatile
  3925                           
  3926                           ;LEDarray.c: 19:     TRISGbits.TRISG1 = 0;
  3927   00233C  9287               	bcf	135,1,c	;volatile
  3928                           
  3929                           ;LEDarray.c: 20:     LATGbits.LATG1 = 0;
  3930   00233E  927F               	bcf	127,1,c	;volatile
  3931                           
  3932                           ;LEDarray.c: 22:     TRISAbits.TRISA2 = 0;
  3933   002340  9481               	bcf	129,2,c	;volatile
  3934                           
  3935                           ;LEDarray.c: 23:     LATAbits.LATA2 = 0;
  3936   002342  9479               	bcf	121,2,c	;volatile
  3937                           
  3938                           ;LEDarray.c: 25:     TRISFbits.TRISF6 = 0;
  3939   002344  9C86               	bcf	134,6,c	;volatile
  3940                           
  3941                           ;LEDarray.c: 26:     LATFbits.LATF6 = 0;
  3942   002346  9C7E               	bcf	126,6,c	;volatile
  3943                           
  3944                           ;LEDarray.c: 28:     TRISAbits.TRISA4 = 0;
  3945   002348  9881               	bcf	129,4,c	;volatile
  3946                           
  3947                           ;LEDarray.c: 29:     LATAbits.LATA4 = 0;
  3948   00234A  9879               	bcf	121,4,c	;volatile
  3949                           
  3950                           ;LEDarray.c: 31:     TRISAbits.TRISA5 = 0;
  3951   00234C  9A81               	bcf	129,5,c	;volatile
  3952                           
  3953                           ;LEDarray.c: 32:     LATAbits.LATA5 = 0;
  3954   00234E  9A79               	bcf	121,5,c	;volatile
  3955                           
  3956                           ;LEDarray.c: 34:     TRISFbits.TRISF0 = 0;
  3957   002350  9086               	bcf	134,0,c	;volatile
  3958                           
  3959                           ;LEDarray.c: 35:     LATFbits.LATF0 = 0;
  3960   002352  907E               	bcf	126,0,c	;volatile
  3961                           
  3962                           ;LEDarray.c: 37:     TRISBbits.TRISB0 = 0;
  3963   002354  9082               	bcf	130,0,c	;volatile
  3964                           
  3965                           ;LEDarray.c: 38:     LATBbits.LATB0 = 0;
  3966   002356  907A               	bcf	122,0,c	;volatile
  3967                           
  3968                           ;LEDarray.c: 40:     TRISBbits.TRISB1 = 0;
  3969   002358  9282               	bcf	130,1,c	;volatile
  3970                           
  3971                           ;LEDarray.c: 41:     LATBbits.LATB1 = 0;
  3972   00235A  927A               	bcf	122,1,c	;volatile
  3973   00235C  0012               	return		;funcret
  3974   00235E                     __end_of_LEDarray_init:
  3975                           	callstack 0
  3976                           
  3977 ;; *************** function _LEDarray_disp_bin *****************
  3978 ;; Defined at:
  3979 ;;		line 49 in file "LEDarray.c"
  3980 ;; Parameters:    Size  Location     Type
  3981 ;;  number          2    0[COMRAM] unsigned int 
  3982 ;; Auto vars:     Size  Location     Type
  3983 ;;		None
  3984 ;; Return value:  Size  Location     Type
  3985 ;;                  1    wreg      void 
  3986 ;; Registers used:
  3987 ;;		None
  3988 ;; Tracked objects:
  3989 ;;		On entry : 0/0
  3990 ;;		On exit  : 0/0
  3991 ;;		Unchanged: 0/0
  3992 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3993 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3994 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3995 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3996 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3997 ;;Total ram usage:        2 bytes
  3998 ;; Hardware stack levels used: 1
  3999 ;; Hardware stack levels required when called: 1
  4000 ;; This function calls:
  4001 ;;		Nothing
  4002 ;; This function is called by:
  4003 ;;		_main
  4004 ;; This function uses a non-reentrant model
  4005 ;;
  4006                           
  4007                           	psect	text17
  4008   001C2C                     __ptext17:
  4009                           	callstack 0
  4010   001C2C                     _LEDarray_disp_bin:
  4011                           	callstack 29
  4012   001C2C                     
  4013                           ;LEDarray.c: 49: void LEDarray_disp_bin(unsigned int number);LEDarray.c: 50: {;LEDarray.
      +                          c: 53:     if (number & 0b000000001){ LATGbits.LATG0 = 1 ; }
  4014   001C2C  A001               	btfss	LEDarray_disp_bin@number^0,0,c
  4015   001C2E  EF1B  F00E         	goto	u2161
  4016   001C32  EF1D  F00E         	goto	u2160
  4017   001C36                     u2161:
  4018   001C36  EF20  F00E         	goto	l147
  4019   001C3A                     u2160:
  4020   001C3A  807F               	bsf	127,0,c	;volatile
  4021   001C3C  EF21  F00E         	goto	l148
  4022   001C40                     l147:
  4023   001C40  907F               	bcf	127,0,c	;volatile
  4024   001C42                     l148:
  4025                           
  4026                           ;LEDarray.c: 56:     if (number & 0b000000010){ LATGbits.LATG1 = 1 ; }
  4027   001C42  A201               	btfss	LEDarray_disp_bin@number^0,1,c
  4028   001C44  EF26  F00E         	goto	u2171
  4029   001C48  EF28  F00E         	goto	u2170
  4030   001C4C                     u2171:
  4031   001C4C  EF2B  F00E         	goto	l149
  4032   001C50                     u2170:
  4033   001C50  827F               	bsf	127,1,c	;volatile
  4034   001C52  EF2C  F00E         	goto	l150
  4035   001C56                     l149:
  4036   001C56  927F               	bcf	127,1,c	;volatile
  4037   001C58                     l150:
  4038                           
  4039                           ;LEDarray.c: 59:     if (number & 0b000000100){ LATAbits.LATA2 = 1 ; }
  4040   001C58  A401               	btfss	LEDarray_disp_bin@number^0,2,c
  4041   001C5A  EF31  F00E         	goto	u2181
  4042   001C5E  EF33  F00E         	goto	u2180
  4043   001C62                     u2181:
  4044   001C62  EF36  F00E         	goto	l151
  4045   001C66                     u2180:
  4046   001C66  8479               	bsf	121,2,c	;volatile
  4047   001C68  EF37  F00E         	goto	l152
  4048   001C6C                     l151:
  4049   001C6C  9479               	bcf	121,2,c	;volatile
  4050   001C6E                     l152:
  4051                           
  4052                           ;LEDarray.c: 62:     if (number & 0b000001000){ LATFbits.LATF6 = 1 ; }
  4053   001C6E  A601               	btfss	LEDarray_disp_bin@number^0,3,c
  4054   001C70  EF3C  F00E         	goto	u2191
  4055   001C74  EF3E  F00E         	goto	u2190
  4056   001C78                     u2191:
  4057   001C78  EF41  F00E         	goto	l153
  4058   001C7C                     u2190:
  4059   001C7C  8C7E               	bsf	126,6,c	;volatile
  4060   001C7E  EF42  F00E         	goto	l154
  4061   001C82                     l153:
  4062   001C82  9C7E               	bcf	126,6,c	;volatile
  4063   001C84                     l154:
  4064                           
  4065                           ;LEDarray.c: 65:     if (number & 0b000010000){ LATAbits.LATA4 = 1 ; }
  4066   001C84  A801               	btfss	LEDarray_disp_bin@number^0,4,c
  4067   001C86  EF47  F00E         	goto	u2201
  4068   001C8A  EF49  F00E         	goto	u2200
  4069   001C8E                     u2201:
  4070   001C8E  EF4C  F00E         	goto	l155
  4071   001C92                     u2200:
  4072   001C92  8879               	bsf	121,4,c	;volatile
  4073   001C94  EF4D  F00E         	goto	l156
  4074   001C98                     l155:
  4075   001C98  9879               	bcf	121,4,c	;volatile
  4076   001C9A                     l156:
  4077                           
  4078                           ;LEDarray.c: 68:     if (number & 0b000100000){ LATAbits.LATA5 = 1 ; }
  4079   001C9A  AA01               	btfss	LEDarray_disp_bin@number^0,5,c
  4080   001C9C  EF52  F00E         	goto	u2211
  4081   001CA0  EF54  F00E         	goto	u2210
  4082   001CA4                     u2211:
  4083   001CA4  EF57  F00E         	goto	l157
  4084   001CA8                     u2210:
  4085   001CA8  8A79               	bsf	121,5,c	;volatile
  4086   001CAA  EF58  F00E         	goto	l158
  4087   001CAE                     l157:
  4088   001CAE  9A79               	bcf	121,5,c	;volatile
  4089   001CB0                     l158:
  4090                           
  4091                           ;LEDarray.c: 71:     if (number & 0b001000000){ LATFbits.LATF0 = 1 ; }
  4092   001CB0  AC01               	btfss	LEDarray_disp_bin@number^0,6,c
  4093   001CB2  EF5D  F00E         	goto	u2221
  4094   001CB6  EF5F  F00E         	goto	u2220
  4095   001CBA                     u2221:
  4096   001CBA  EF62  F00E         	goto	l159
  4097   001CBE                     u2220:
  4098   001CBE  807E               	bsf	126,0,c	;volatile
  4099   001CC0  EF63  F00E         	goto	l160
  4100   001CC4                     l159:
  4101   001CC4  907E               	bcf	126,0,c	;volatile
  4102   001CC6                     l160:
  4103                           
  4104                           ;LEDarray.c: 74:     if (number & 0b010000000){ LATBbits.LATB0 = 1 ; }
  4105   001CC6  AE01               	btfss	LEDarray_disp_bin@number^0,7,c
  4106   001CC8  EF68  F00E         	goto	u2231
  4107   001CCC  EF6A  F00E         	goto	u2230
  4108   001CD0                     u2231:
  4109   001CD0  EF6D  F00E         	goto	l161
  4110   001CD4                     u2230:
  4111   001CD4  807A               	bsf	122,0,c	;volatile
  4112   001CD6  EF6E  F00E         	goto	l162
  4113   001CDA                     l161:
  4114   001CDA  907A               	bcf	122,0,c	;volatile
  4115   001CDC                     l162:
  4116                           
  4117                           ;LEDarray.c: 77:     if (number & 0b100000000){ LATBbits.LATB1 = 1 ; }
  4118   001CDC  A002               	btfss	(LEDarray_disp_bin@number+1)^0,0,c
  4119   001CDE  EF73  F00E         	goto	u2241
  4120   001CE2  EF75  F00E         	goto	u2240
  4121   001CE6                     u2241:
  4122   001CE6  EF78  F00E         	goto	l163
  4123   001CEA                     u2240:
  4124   001CEA  827A               	bsf	122,1,c	;volatile
  4125   001CEC  EF79  F00E         	goto	l165
  4126   001CF0                     l163:
  4127   001CF0  927A               	bcf	122,1,c	;volatile
  4128   001CF2                     l165:
  4129   001CF2  0012               	return		;funcret
  4130   001CF4                     __end_of_LEDarray_disp_bin:
  4131                           	callstack 0
  4132                           
  4133 ;; *************** function _LCD_setline *****************
  4134 ;; Defined at:
  4135 ;;		line 120 in file "LCD.c"
  4136 ;; Parameters:    Size  Location     Type
  4137 ;;  line            1    wreg     unsigned char 
  4138 ;; Auto vars:     Size  Location     Type
  4139 ;;  line            1    3[COMRAM] unsigned char 
  4140 ;; Return value:  Size  Location     Type
  4141 ;;                  1    wreg      void 
  4142 ;; Registers used:
  4143 ;;		wreg, status,2, status,0, cstack
  4144 ;; Tracked objects:
  4145 ;;		On entry : 0/0
  4146 ;;		On exit  : 0/0
  4147 ;;		Unchanged: 0/0
  4148 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4149 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4150 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4151 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4152 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4153 ;;Total ram usage:        1 bytes
  4154 ;; Hardware stack levels used: 1
  4155 ;; Hardware stack levels required when called: 4
  4156 ;; This function calls:
  4157 ;;		_LCD_sendbyte
  4158 ;; This function is called by:
  4159 ;;		_main
  4160 ;; This function uses a non-reentrant model
  4161 ;;
  4162                           
  4163                           	psect	text18
  4164   002240                     __ptext18:
  4165                           	callstack 0
  4166   002240                     _LCD_setline:
  4167                           	callstack 26
  4168                           
  4169                           ;incstack = 0
  4170                           ;LCD_setline@line stored from wreg
  4171   002240  6E04               	movwf	LCD_setline@line^0,c
  4172   002242                     
  4173                           ;LCD.c: 120: void LCD_setline (char line);LCD.c: 121: {;LCD.c: 124:     if (line == 2){
  4174   002242  0E02               	movlw	2
  4175   002244  1804               	xorwf	LCD_setline@line^0,w,c
  4176   002246  A4D8               	btfss	status,2,c
  4177   002248  EF28  F011         	goto	u2251
  4178   00224C  EF2A  F011         	goto	u2250
  4179   002250                     u2251:
  4180   002250  EF2F  F011         	goto	l2487
  4181   002254                     u2250:
  4182   002254                     
  4183                           ;LCD.c: 125:         LCD_sendbyte(0xC0,0);
  4184   002254  0E00               	movlw	0
  4185   002256  6E02               	movwf	LCD_sendbyte@type^0,c
  4186   002258  0EC0               	movlw	192
  4187   00225A  ECAF  F011         	call	_LCD_sendbyte
  4188   00225E                     l2487:
  4189                           
  4190                           ;LCD.c: 128:     if (line==1){
  4191   00225E  0404               	decf	LCD_setline@line^0,w,c
  4192   002260  A4D8               	btfss	status,2,c
  4193   002262  EF35  F011         	goto	u2261
  4194   002266  EF37  F011         	goto	u2260
  4195   00226A                     u2261:
  4196   00226A  EF3C  F011         	goto	l320
  4197   00226E                     u2260:
  4198   00226E                     
  4199                           ;LCD.c: 129:         LCD_sendbyte(0x80,0);
  4200   00226E  0E00               	movlw	0
  4201   002270  6E02               	movwf	LCD_sendbyte@type^0,c
  4202   002272  0E80               	movlw	128
  4203   002274  ECAF  F011         	call	_LCD_sendbyte
  4204   002278                     l320:
  4205   002278  0012               	return		;funcret
  4206   00227A                     __end_of_LCD_setline:
  4207                           	callstack 0
  4208                           
  4209 ;; *************** function _LCD_sendstring *****************
  4210 ;; Defined at:
  4211 ;;		line 136 in file "LCD.c"
  4212 ;; Parameters:    Size  Location     Type
  4213 ;;  string          2    3[COMRAM] PTR unsigned char 
  4214 ;;		 -> main@buffer(18), 
  4215 ;; Auto vars:     Size  Location     Type
  4216 ;;		None
  4217 ;; Return value:  Size  Location     Type
  4218 ;;                  1    wreg      void 
  4219 ;; Registers used:
  4220 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4221 ;; Tracked objects:
  4222 ;;		On entry : 0/0
  4223 ;;		On exit  : 0/0
  4224 ;;		Unchanged: 0/0
  4225 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4226 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4227 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4228 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4229 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4230 ;;Total ram usage:        2 bytes
  4231 ;; Hardware stack levels used: 1
  4232 ;; Hardware stack levels required when called: 4
  4233 ;; This function calls:
  4234 ;;		_LCD_sendbyte
  4235 ;; This function is called by:
  4236 ;;		_main
  4237 ;;		_ADC2String
  4238 ;; This function uses a non-reentrant model
  4239 ;;
  4240                           
  4241                           	psect	text19
  4242   0022AE                     __ptext19:
  4243                           	callstack 0
  4244   0022AE                     _LCD_sendstring:
  4245                           	callstack 26
  4246   0022AE                     
  4247                           ;LCD.c: 136: void LCD_sendstring(char *string);LCD.c: 137: {;LCD.c: 139:     while(*stri
      +                          ng != 0){
  4248   0022AE  EF64  F011         	goto	l2509
  4249   0022B2                     l2505:
  4250                           
  4251                           ;LCD.c: 140:   LCD_sendbyte(*string++,1);
  4252   0022B2  0E01               	movlw	1
  4253   0022B4  6E02               	movwf	LCD_sendbyte@type^0,c
  4254   0022B6  C004  FFD9         	movff	LCD_sendstring@string,fsr2l
  4255   0022BA  C005  FFDA         	movff	LCD_sendstring@string+1,fsr2h
  4256   0022BE  50DF               	movf	indf2,w,c
  4257   0022C0  ECAF  F011         	call	_LCD_sendbyte
  4258   0022C4  4A04               	infsnz	LCD_sendstring@string^0,f,c
  4259   0022C6  2A05               	incf	(LCD_sendstring@string+1)^0,f,c
  4260   0022C8                     l2509:
  4261                           
  4262                           ;LCD.c: 139:     while(*string != 0){
  4263   0022C8  C004  FFD9         	movff	LCD_sendstring@string,fsr2l
  4264   0022CC  C005  FFDA         	movff	LCD_sendstring@string+1,fsr2h
  4265   0022D0  50DF               	movf	indf2,w,c
  4266   0022D2  A4D8               	btfss	status,2,c
  4267   0022D4  EF6E  F011         	goto	u2271
  4268   0022D8  EF70  F011         	goto	u2270
  4269   0022DC                     u2271:
  4270   0022DC  EF59  F011         	goto	l2505
  4271   0022E0                     u2270:
  4272   0022E0  0012               	return		;funcret
  4273   0022E2                     __end_of_LCD_sendstring:
  4274                           	callstack 0
  4275                           
  4276 ;; *************** function _LCD_Init *****************
  4277 ;; Defined at:
  4278 ;;		line 57 in file "LCD.c"
  4279 ;; Parameters:    Size  Location     Type
  4280 ;;		None
  4281 ;; Auto vars:     Size  Location     Type
  4282 ;;		None
  4283 ;; Return value:  Size  Location     Type
  4284 ;;                  1    wreg      void 
  4285 ;; Registers used:
  4286 ;;		wreg, status,2, status,0, cstack
  4287 ;; Tracked objects:
  4288 ;;		On entry : 0/0
  4289 ;;		On exit  : 0/0
  4290 ;;		Unchanged: 0/0
  4291 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4292 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4293 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4294 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4295 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4296 ;;Total ram usage:        2 bytes
  4297 ;; Hardware stack levels used: 1
  4298 ;; Hardware stack levels required when called: 4
  4299 ;; This function calls:
  4300 ;;		_LCD_sendbyte
  4301 ;;		_LCD_sendnibble
  4302 ;; This function is called by:
  4303 ;;		_main
  4304 ;; This function uses a non-reentrant model
  4305 ;;
  4306                           
  4307                           	psect	text20
  4308   001B0C                     __ptext20:
  4309                           	callstack 0
  4310   001B0C                     _LCD_Init:
  4311                           	callstack 26
  4312   001B0C                     
  4313                           ;LCD.c: 69:     TRISBbits.TRISB3 = 0;
  4314   001B0C  9682               	bcf	130,3,c	;volatile
  4315                           
  4316                           ;LCD.c: 71:     LATBbits.LATB3 = 0;
  4317   001B0E  967A               	bcf	122,3,c	;volatile
  4318                           
  4319                           ;LCD.c: 73:     TRISBbits.TRISB2 = 0;
  4320   001B10  9482               	bcf	130,2,c	;volatile
  4321                           
  4322                           ;LCD.c: 75:     LATBbits.LATB2 = 0;
  4323   001B12  947A               	bcf	122,2,c	;volatile
  4324                           
  4325                           ;LCD.c: 77:     TRISEbits.TRISE3 = 0;
  4326   001B14  9685               	bcf	133,3,c	;volatile
  4327                           
  4328                           ;LCD.c: 79:     LATEbits.LATE3 = 0;
  4329   001B16  967D               	bcf	125,3,c	;volatile
  4330                           
  4331                           ;LCD.c: 81:     TRISEbits.TRISE1 = 0;
  4332   001B18  9285               	bcf	133,1,c	;volatile
  4333                           
  4334                           ;LCD.c: 83:     LATEbits.LATE1 = 0;
  4335   001B1A  927D               	bcf	125,1,c	;volatile
  4336                           
  4337                           ;LCD.c: 85:     TRISCbits.TRISC2 = 0;
  4338   001B1C  9483               	bcf	131,2,c	;volatile
  4339                           
  4340                           ;LCD.c: 86:     LATCbits.LATC2 = 0;
  4341   001B1E  947B               	bcf	123,2,c	;volatile
  4342                           
  4343                           ;LCD.c: 88:     TRISCbits.TRISC6 = 0;
  4344   001B20  9C83               	bcf	131,6,c	;volatile
  4345                           
  4346                           ;LCD.c: 89:     LATCbits.LATC6 = 0;
  4347   001B22  9C7B               	bcf	123,6,c	;volatile
  4348   001B24                     
  4349                           ;LCD.c: 91:     _delay((unsigned long)((150)*(64000000/4000.0)));
  4350   001B24  0E0D               	movlw	13
  4351   001B26  6E05               	movwf	(??_LCD_Init+1)^0,c
  4352   001B28  0E2D               	movlw	45
  4353   001B2A  6E04               	movwf	??_LCD_Init^0,c
  4354   001B2C  0ED8               	movlw	216
  4355   001B2E                     u3197:
  4356   001B2E  2EE8               	decfsz	wreg,f,c
  4357   001B30  D7FE               	bra	u3197
  4358   001B32  2E04               	decfsz	??_LCD_Init^0,f,c
  4359   001B34  D7FC               	bra	u3197
  4360   001B36  2E05               	decfsz	(??_LCD_Init+1)^0,f,c
  4361   001B38  D7FA               	bra	u3197
  4362   001B3A                     
  4363                           ;LCD.c: 92:     LCD_sendnibble(0b0011);
  4364   001B3A  0E03               	movlw	3
  4365   001B3C  EC69  F010         	call	_LCD_sendnibble
  4366   001B40                     
  4367                           ;LCD.c: 93:     _delay((unsigned long)((5)*(64000000/4000.0)));
  4368   001B40  0E68               	movlw	104
  4369   001B42  6E04               	movwf	??_LCD_Init^0,c
  4370   001B44  0EE4               	movlw	228
  4371   001B46                     u3207:
  4372   001B46  2EE8               	decfsz	wreg,f,c
  4373   001B48  D7FE               	bra	u3207
  4374   001B4A  2E04               	decfsz	??_LCD_Init^0,f,c
  4375   001B4C  D7FC               	bra	u3207
  4376   001B4E  D000               	nop2	
  4377                           
  4378                           ;LCD.c: 94:     LCD_sendnibble(0b0011);
  4379   001B50  0E03               	movlw	3
  4380   001B52  EC69  F010         	call	_LCD_sendnibble
  4381   001B56                     
  4382                           ;LCD.c: 95:     _delay((unsigned long)((150)*(64000000/4000000.0)));
  4383   001B56  0E04               	movlw	4
  4384   001B58  6E04               	movwf	??_LCD_Init^0,c
  4385   001B5A  0E1C               	movlw	28
  4386   001B5C                     u3217:
  4387   001B5C  2EE8               	decfsz	wreg,f,c
  4388   001B5E  D7FE               	bra	u3217
  4389   001B60  2E04               	decfsz	??_LCD_Init^0,f,c
  4390   001B62  D7FC               	bra	u3217
  4391   001B64  D000               	nop2	
  4392   001B66                     
  4393                           ;LCD.c: 96:     LCD_sendnibble(0b0011);
  4394   001B66  0E03               	movlw	3
  4395   001B68  EC69  F010         	call	_LCD_sendnibble
  4396                           
  4397                           ;LCD.c: 97:     _delay((unsigned long)((150)*(64000000/4000000.0)));
  4398   001B6C  0E04               	movlw	4
  4399   001B6E  6E04               	movwf	??_LCD_Init^0,c
  4400   001B70  0E1C               	movlw	28
  4401   001B72                     u3227:
  4402   001B72  2EE8               	decfsz	wreg,f,c
  4403   001B74  D7FE               	bra	u3227
  4404   001B76  2E04               	decfsz	??_LCD_Init^0,f,c
  4405   001B78  D7FC               	bra	u3227
  4406   001B7A  D000               	nop2	
  4407   001B7C                     
  4408                           ;LCD.c: 98:     LCD_sendnibble(0b0010);
  4409   001B7C  0E02               	movlw	2
  4410   001B7E  EC69  F010         	call	_LCD_sendnibble
  4411   001B82                     
  4412                           ;LCD.c: 99:     _delay((unsigned long)((150)*(64000000/4000000.0)));
  4413   001B82  0E04               	movlw	4
  4414   001B84  6E04               	movwf	??_LCD_Init^0,c
  4415   001B86  0E1C               	movlw	28
  4416   001B88                     u3237:
  4417   001B88  2EE8               	decfsz	wreg,f,c
  4418   001B8A  D7FE               	bra	u3237
  4419   001B8C  2E04               	decfsz	??_LCD_Init^0,f,c
  4420   001B8E  D7FC               	bra	u3237
  4421   001B90  D000               	nop2	
  4422   001B92                     
  4423                           ;LCD.c: 100:     LCD_sendbyte(0b00101100,0);
  4424   001B92  0E00               	movlw	0
  4425   001B94  6E02               	movwf	LCD_sendbyte@type^0,c
  4426   001B96  0E2C               	movlw	44
  4427   001B98  ECAF  F011         	call	_LCD_sendbyte
  4428   001B9C                     
  4429                           ;LCD.c: 101:     _delay((unsigned long)((100)*(64000000/4000000.0)));
  4430   001B9C  0EE4               	movlw	228
  4431   001B9E                     u3247:
  4432   001B9E  D000               	nop2	
  4433   001BA0  D000               	nop2	
  4434   001BA2  2EE8               	decfsz	wreg,f,c
  4435   001BA4  D7FC               	bra	u3247
  4436   001BA6  D000               	nop2	
  4437   001BA8  D000               	nop2	
  4438   001BAA                     
  4439                           ;LCD.c: 102:     LCD_sendbyte(0b00001000,0);
  4440   001BAA  0E00               	movlw	0
  4441   001BAC  6E02               	movwf	LCD_sendbyte@type^0,c
  4442   001BAE  0E08               	movlw	8
  4443   001BB0  ECAF  F011         	call	_LCD_sendbyte
  4444   001BB4                     
  4445                           ;LCD.c: 103:     _delay((unsigned long)((100)*(64000000/4000.0)));
  4446   001BB4  0E09               	movlw	9
  4447   001BB6  6E05               	movwf	(??_LCD_Init+1)^0,c
  4448   001BB8  0E1E               	movlw	30
  4449   001BBA  6E04               	movwf	??_LCD_Init^0,c
  4450   001BBC  0EE4               	movlw	228
  4451   001BBE                     u3257:
  4452   001BBE  2EE8               	decfsz	wreg,f,c
  4453   001BC0  D7FE               	bra	u3257
  4454   001BC2  2E04               	decfsz	??_LCD_Init^0,f,c
  4455   001BC4  D7FC               	bra	u3257
  4456   001BC6  2E05               	decfsz	(??_LCD_Init+1)^0,f,c
  4457   001BC8  D7FA               	bra	u3257
  4458   001BCA  D000               	nop2	
  4459   001BCC                     
  4460                           ;LCD.c: 104:     LCD_sendbyte(0b00000001,0);
  4461   001BCC  0E00               	movlw	0
  4462   001BCE  6E02               	movwf	LCD_sendbyte@type^0,c
  4463   001BD0  0E01               	movlw	1
  4464   001BD2  ECAF  F011         	call	_LCD_sendbyte
  4465   001BD6                     
  4466                           ;LCD.c: 105:     _delay((unsigned long)((5)*(64000000/4000.0)));
  4467   001BD6  0E68               	movlw	104
  4468   001BD8  6E04               	movwf	??_LCD_Init^0,c
  4469   001BDA  0EE4               	movlw	228
  4470   001BDC                     u3267:
  4471   001BDC  2EE8               	decfsz	wreg,f,c
  4472   001BDE  D7FE               	bra	u3267
  4473   001BE0  2E04               	decfsz	??_LCD_Init^0,f,c
  4474   001BE2  D7FC               	bra	u3267
  4475   001BE4  D000               	nop2	
  4476   001BE6                     
  4477                           ;LCD.c: 106:     LCD_sendbyte(0b00000110,0);
  4478   001BE6  0E00               	movlw	0
  4479   001BE8  6E02               	movwf	LCD_sendbyte@type^0,c
  4480   001BEA  0E06               	movlw	6
  4481   001BEC  ECAF  F011         	call	_LCD_sendbyte
  4482   001BF0                     
  4483                           ;LCD.c: 107:     _delay((unsigned long)((100)*(64000000/4000.0)));
  4484   001BF0  0E09               	movlw	9
  4485   001BF2  6E05               	movwf	(??_LCD_Init+1)^0,c
  4486   001BF4  0E1E               	movlw	30
  4487   001BF6  6E04               	movwf	??_LCD_Init^0,c
  4488   001BF8  0EE4               	movlw	228
  4489   001BFA                     u3277:
  4490   001BFA  2EE8               	decfsz	wreg,f,c
  4491   001BFC  D7FE               	bra	u3277
  4492   001BFE  2E04               	decfsz	??_LCD_Init^0,f,c
  4493   001C00  D7FC               	bra	u3277
  4494   001C02  2E05               	decfsz	(??_LCD_Init+1)^0,f,c
  4495   001C04  D7FA               	bra	u3277
  4496   001C06  D000               	nop2	
  4497   001C08                     
  4498                           ;LCD.c: 108:     LCD_sendbyte(0b00001100,0);
  4499   001C08  0E00               	movlw	0
  4500   001C0A  6E02               	movwf	LCD_sendbyte@type^0,c
  4501   001C0C  0E0C               	movlw	12
  4502   001C0E  ECAF  F011         	call	_LCD_sendbyte
  4503   001C12                     
  4504                           ;LCD.c: 109:     _delay((unsigned long)((100)*(64000000/4000.0)));
  4505   001C12  0E09               	movlw	9
  4506   001C14  6E05               	movwf	(??_LCD_Init+1)^0,c
  4507   001C16  0E1E               	movlw	30
  4508   001C18  6E04               	movwf	??_LCD_Init^0,c
  4509   001C1A  0EE4               	movlw	228
  4510   001C1C                     u3287:
  4511   001C1C  2EE8               	decfsz	wreg,f,c
  4512   001C1E  D7FE               	bra	u3287
  4513   001C20  2E04               	decfsz	??_LCD_Init^0,f,c
  4514   001C22  D7FC               	bra	u3287
  4515   001C24  2E05               	decfsz	(??_LCD_Init+1)^0,f,c
  4516   001C26  D7FA               	bra	u3287
  4517   001C28  D000               	nop2	
  4518   001C2A  0012               	return		;funcret
  4519   001C2C                     __end_of_LCD_Init:
  4520                           	callstack 0
  4521                           
  4522 ;; *************** function _LCD_sendbyte *****************
  4523 ;; Defined at:
  4524 ;;		line 40 in file "LCD.c"
  4525 ;; Parameters:    Size  Location     Type
  4526 ;;  Byte            1    wreg     unsigned char 
  4527 ;;  type            1    1[COMRAM] unsigned char 
  4528 ;; Auto vars:     Size  Location     Type
  4529 ;;  Byte            1    2[COMRAM] unsigned char 
  4530 ;; Return value:  Size  Location     Type
  4531 ;;                  1    wreg      void 
  4532 ;; Registers used:
  4533 ;;		wreg, status,2, status,0, cstack
  4534 ;; Tracked objects:
  4535 ;;		On entry : 0/0
  4536 ;;		On exit  : 0/0
  4537 ;;		Unchanged: 0/0
  4538 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4539 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4540 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4541 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4542 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4543 ;;Total ram usage:        2 bytes
  4544 ;; Hardware stack levels used: 1
  4545 ;; Hardware stack levels required when called: 3
  4546 ;; This function calls:
  4547 ;;		_LCD_sendnibble
  4548 ;; This function is called by:
  4549 ;;		_LCD_Init
  4550 ;;		_LCD_setline
  4551 ;;		_LCD_sendstring
  4552 ;;		_LCD_scroll
  4553 ;; This function uses a non-reentrant model
  4554 ;;
  4555                           
  4556                           	psect	text21
  4557   00235E                     __ptext21:
  4558                           	callstack 0
  4559   00235E                     _LCD_sendbyte:
  4560                           	callstack 26
  4561                           
  4562                           ;incstack = 0
  4563                           ;LCD_sendbyte@Byte stored from wreg
  4564   00235E  6E03               	movwf	LCD_sendbyte@Byte^0,c
  4565   002360                     
  4566                           ;LCD.c: 40: void LCD_sendbyte(unsigned char Byte, char type);LCD.c: 41: {;LCD.c: 42:    
      +                           LATCbits.LATC6 = type;
  4567   002360  B002               	btfsc	LCD_sendbyte@type^0,0,c
  4568   002362  D002               	bra	u1885
  4569   002364  9C7B               	bcf	123,6,c	;volatile
  4570   002366  D001               	bra	u1886
  4571   002368                     u1885:
  4572   002368  8C7B               	bsf	123,6,c	;volatile
  4573   00236A                     u1886:
  4574   00236A                     
  4575                           ;LCD.c: 44:     LCD_sendnibble(Byte>>4);
  4576   00236A  3803               	swapf	LCD_sendbyte@Byte^0,w,c
  4577   00236C  0B0F               	andlw	15
  4578   00236E  EC69  F010         	call	_LCD_sendnibble
  4579   002372                     
  4580                           ;LCD.c: 45:     LCD_sendnibble(Byte);
  4581   002372  5003               	movf	LCD_sendbyte@Byte^0,w,c
  4582   002374  EC69  F010         	call	_LCD_sendnibble
  4583   002378                     
  4584                           ;LCD.c: 51:     _delay((unsigned long)((50)*(64000000/4000000.0)));
  4585   002378  0EA0               	movlw	160
  4586   00237A                     u3297:
  4587   00237A  D000               	nop2	
  4588   00237C  2EE8               	decfsz	wreg,f,c
  4589   00237E  D7FD               	bra	u3297
  4590   002380  0012               	return		;funcret
  4591   002382                     __end_of_LCD_sendbyte:
  4592                           	callstack 0
  4593                           
  4594 ;; *************** function _LCD_sendnibble *****************
  4595 ;; Defined at:
  4596 ;;		line 22 in file "LCD.c"
  4597 ;; Parameters:    Size  Location     Type
  4598 ;;  number          1    wreg     unsigned char 
  4599 ;; Auto vars:     Size  Location     Type
  4600 ;;  number          1    0[COMRAM] unsigned char 
  4601 ;; Return value:  Size  Location     Type
  4602 ;;                  1    wreg      void 
  4603 ;; Registers used:
  4604 ;;		wreg, cstack
  4605 ;; Tracked objects:
  4606 ;;		On entry : 0/0
  4607 ;;		On exit  : 0/0
  4608 ;;		Unchanged: 0/0
  4609 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4610 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4611 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4612 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4613 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4614 ;;Total ram usage:        1 bytes
  4615 ;; Hardware stack levels used: 1
  4616 ;; Hardware stack levels required when called: 2
  4617 ;; This function calls:
  4618 ;;		_LCD_E_TOG
  4619 ;; This function is called by:
  4620 ;;		_LCD_sendbyte
  4621 ;;		_LCD_Init
  4622 ;; This function uses a non-reentrant model
  4623 ;;
  4624                           
  4625                           	psect	text22
  4626   0020D2                     __ptext22:
  4627                           	callstack 0
  4628   0020D2                     _LCD_sendnibble:
  4629                           	callstack 26
  4630                           
  4631                           ;incstack = 0
  4632                           ;LCD_sendnibble@number stored from wreg
  4633   0020D2  6E01               	movwf	LCD_sendnibble@number^0,c
  4634   0020D4                     
  4635                           ;LCD.c: 22: void LCD_sendnibble(unsigned char number);LCD.c: 23: {;LCD.c: 24:     if (nu
      +                          mber & 0b0001) {LATBbits.LATB3=1;} else {LATBbits.LATB3=0;}
  4636   0020D4  A001               	btfss	LCD_sendnibble@number^0,0,c
  4637   0020D6  EF6F  F010         	goto	u1791
  4638   0020DA  EF71  F010         	goto	u1790
  4639   0020DE                     u1791:
  4640   0020DE  EF74  F010         	goto	l301
  4641   0020E2                     u1790:
  4642   0020E2  867A               	bsf	122,3,c	;volatile
  4643   0020E4  EF75  F010         	goto	l2219
  4644   0020E8                     l301:
  4645   0020E8  967A               	bcf	122,3,c	;volatile
  4646   0020EA                     l2219:
  4647                           
  4648                           ;LCD.c: 25:     if (number & 0b0010) {LATBbits.LATB2=1;} else {LATBbits.LATB2=0;}
  4649   0020EA  A201               	btfss	LCD_sendnibble@number^0,1,c
  4650   0020EC  EF7A  F010         	goto	u1801
  4651   0020F0  EF7C  F010         	goto	u1800
  4652   0020F4                     u1801:
  4653   0020F4  EF7F  F010         	goto	l303
  4654   0020F8                     u1800:
  4655   0020F8  847A               	bsf	122,2,c	;volatile
  4656   0020FA  EF80  F010         	goto	l2223
  4657   0020FE                     l303:
  4658   0020FE  947A               	bcf	122,2,c	;volatile
  4659   002100                     l2223:
  4660                           
  4661                           ;LCD.c: 26:     if (number & 0b0100) {LATEbits.LATE3=1;} else {LATEbits.LATE3=0;}
  4662   002100  A401               	btfss	LCD_sendnibble@number^0,2,c
  4663   002102  EF85  F010         	goto	u1811
  4664   002106  EF87  F010         	goto	u1810
  4665   00210A                     u1811:
  4666   00210A  EF8A  F010         	goto	l305
  4667   00210E                     u1810:
  4668   00210E  867D               	bsf	125,3,c	;volatile
  4669   002110  EF8B  F010         	goto	l2227
  4670   002114                     l305:
  4671   002114  967D               	bcf	125,3,c	;volatile
  4672   002116                     l2227:
  4673                           
  4674                           ;LCD.c: 27:     if (number & 0b1000) {LATEbits.LATE1=1;} else {LATEbits.LATE1=0;}
  4675   002116  A601               	btfss	LCD_sendnibble@number^0,3,c
  4676   002118  EF90  F010         	goto	u1821
  4677   00211C  EF92  F010         	goto	u1820
  4678   002120                     u1821:
  4679   002120  EF95  F010         	goto	l307
  4680   002124                     u1820:
  4681   002124  827D               	bsf	125,1,c	;volatile
  4682   002126  EF96  F010         	goto	l2231
  4683   00212A                     l307:
  4684   00212A  927D               	bcf	125,1,c	;volatile
  4685   00212C                     l2231:
  4686                           
  4687                           ;LCD.c: 31:     LCD_E_TOG();
  4688   00212C  ECEA  F011         	call	_LCD_E_TOG	;wreg free
  4689   002130                     
  4690                           ;LCD.c: 32:     _delay((unsigned long)((5)*(64000000/4000000.0)));
  4691   002130  0E1A               	movlw	26
  4692   002132                     u3307:
  4693   002132  2EE8               	decfsz	wreg,f,c
  4694   002134  D7FE               	bra	u3307
  4695   002136  D000               	nop2	
  4696   002138  0012               	return		;funcret
  4697   00213A                     __end_of_LCD_sendnibble:
  4698                           	callstack 0
  4699                           
  4700 ;; *************** function _LCD_E_TOG *****************
  4701 ;; Defined at:
  4702 ;;		line 10 in file "LCD.c"
  4703 ;; Parameters:    Size  Location     Type
  4704 ;;		None
  4705 ;; Auto vars:     Size  Location     Type
  4706 ;;		None
  4707 ;; Return value:  Size  Location     Type
  4708 ;;                  1    wreg      void 
  4709 ;; Registers used:
  4710 ;;		wreg
  4711 ;; Tracked objects:
  4712 ;;		On entry : 0/0
  4713 ;;		On exit  : 0/0
  4714 ;;		Unchanged: 0/0
  4715 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4716 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4717 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4718 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4719 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4720 ;;Total ram usage:        0 bytes
  4721 ;; Hardware stack levels used: 1
  4722 ;; Hardware stack levels required when called: 1
  4723 ;; This function calls:
  4724 ;;		Nothing
  4725 ;; This function is called by:
  4726 ;;		_LCD_sendnibble
  4727 ;; This function uses a non-reentrant model
  4728 ;;
  4729                           
  4730                           	psect	text23
  4731   0023D4                     __ptext23:
  4732                           	callstack 0
  4733   0023D4                     _LCD_E_TOG:
  4734                           	callstack 26
  4735   0023D4                     
  4736                           ;LCD.c: 13:      LATCbits.LATC2 = 1;
  4737   0023D4  847B               	bsf	123,2,c	;volatile
  4738   0023D6                     
  4739                           ;LCD.c: 14:  _delay((unsigned long)((2)*(64000000/4000000.0)));
  4740   0023D6  0E0A               	movlw	10
  4741   0023D8                     u3317:
  4742   0023D8  2EE8               	decfsz	wreg,f,c
  4743   0023DA  D7FE               	bra	u3317
  4744   0023DC  D000               	nop2	
  4745   0023DE                     
  4746                           ;LCD.c: 15:      LATCbits.LATC2 = 0;
  4747   0023DE  947B               	bcf	123,2,c	;volatile
  4748   0023E0  0012               	return		;funcret
  4749   0023E2                     __end_of_LCD_E_TOG:
  4750                           	callstack 0
  4751                           
  4752 ;; *************** function _Interrupts_init *****************
  4753 ;; Defined at:
  4754 ;;		line 9 in file "interrupts.c"
  4755 ;; Parameters:    Size  Location     Type
  4756 ;;		None
  4757 ;; Auto vars:     Size  Location     Type
  4758 ;;		None
  4759 ;; Return value:  Size  Location     Type
  4760 ;;                  1    wreg      void 
  4761 ;; Registers used:
  4762 ;;		None
  4763 ;; Tracked objects:
  4764 ;;		On entry : 0/0
  4765 ;;		On exit  : 0/0
  4766 ;;		Unchanged: 0/0
  4767 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4768 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4769 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4770 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4771 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4772 ;;Total ram usage:        0 bytes
  4773 ;; Hardware stack levels used: 1
  4774 ;; Hardware stack levels required when called: 1
  4775 ;; This function calls:
  4776 ;;		Nothing
  4777 ;; This function is called by:
  4778 ;;		_main
  4779 ;; This function uses a non-reentrant model
  4780 ;;
  4781                           
  4782                           	psect	text24
  4783   0023E2                     __ptext24:
  4784                           	callstack 0
  4785   0023E2                     _Interrupts_init:
  4786                           	callstack 29
  4787   0023E2                     
  4788                           ;interrupts.c: 15:   INTCONbits.PEIE = 1;
  4789   0023E2  8CF2               	bsf	242,6,c	;volatile
  4790                           
  4791                           ;interrupts.c: 19:     PIE0bits.TMR0IE = 1;
  4792   0023E4  010E               	movlb	14	; () banked
  4793   0023E6  8B29               	bsf	41,5,b	;volatile
  4794                           
  4795                           ;interrupts.c: 20:     PIR0bits.TMR0IF = 0;
  4796   0023E8  9B33               	bcf	51,5,b	;volatile
  4797                           
  4798                           ;interrupts.c: 21:     IPR0bits.TMR0IP = 1;
  4799   0023EA  8B1F               	bsf	31,5,b	;volatile
  4800                           
  4801                           ;interrupts.c: 24:     INTCONbits.GIE=1;
  4802   0023EC  8EF2               	bsf	242,7,c	;volatile
  4803   0023EE                     
  4804                           ; BSR set to: 14
  4805   0023EE  0012               	return		;funcret
  4806   0023F0                     __end_of_Interrupts_init:
  4807                           	callstack 0
  4808                           
  4809 ;; *************** function _ArrayAppend *****************
  4810 ;; Defined at:
  4811 ;;		line 6 in file "arrayfunction.c"
  4812 ;; Parameters:    Size  Location     Type
  4813 ;;  arrayTime       2    0[COMRAM] PTR int 
  4814 ;;		 -> main@14509(14), main@14507(14), main@14505(14), main@14503(14), 
  4815 ;;  size            2    2[COMRAM] int 
  4816 ;;  Time            2    4[COMRAM] int 
  4817 ;; Auto vars:     Size  Location     Type
  4818 ;;  i               2    9[COMRAM] int 
  4819 ;; Return value:  Size  Location     Type
  4820 ;;                  2    0[COMRAM] int 
  4821 ;; Registers used:
  4822 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  4823 ;; Tracked objects:
  4824 ;;		On entry : 0/0
  4825 ;;		On exit  : 0/0
  4826 ;;		Unchanged: 0/0
  4827 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4828 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4829 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4830 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4831 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4832 ;;Total ram usage:       11 bytes
  4833 ;; Hardware stack levels used: 1
  4834 ;; Hardware stack levels required when called: 1
  4835 ;; This function calls:
  4836 ;;		Nothing
  4837 ;; This function is called by:
  4838 ;;		_main
  4839 ;; This function uses a non-reentrant model
  4840 ;;
  4841                           
  4842                           	psect	text25
  4843   00205A                     __ptext25:
  4844                           	callstack 0
  4845   00205A                     _ArrayAppend:
  4846                           	callstack 29
  4847   00205A                     
  4848                           ;arrayfunction.c: 8:         for (int i = 1; i <= size-1; i++) {
  4849   00205A  0E00               	movlw	0
  4850   00205C  6E0B               	movwf	(ArrayAppend@i+1)^0,c
  4851   00205E  0E01               	movlw	1
  4852   002060  6E0A               	movwf	ArrayAppend@i^0,c
  4853   002062  EF53  F010         	goto	l2531
  4854   002066                     l2521:
  4855                           
  4856                           ;arrayfunction.c: 10:             if (i = 6) {
  4857   002066  0E00               	movlw	0
  4858   002068  6E0B               	movwf	(ArrayAppend@i+1)^0,c
  4859   00206A  0E06               	movlw	6
  4860   00206C  6E0A               	movwf	ArrayAppend@i^0,c
  4861   00206E                     
  4862                           ;arrayfunction.c: 11:                 arrayTime[i-1] = arrayTime[i];
  4863   00206E  EE20 F00C          	lfsr	2,12
  4864   002072  5001               	movf	ArrayAppend@arrayTime^0,w,c
  4865   002074  26D9               	addwf	fsr2l,f,c
  4866   002076  5002               	movf	(ArrayAppend@arrayTime+1)^0,w,c
  4867   002078  22DA               	addwfc	fsr2h,f,c
  4868   00207A  EE10 F00A          	lfsr	1,10
  4869   00207E  5001               	movf	ArrayAppend@arrayTime^0,w,c
  4870   002080  26E1               	addwf	fsr1l,f,c
  4871   002082  5002               	movf	(ArrayAppend@arrayTime+1)^0,w,c
  4872   002084  22E2               	addwfc	fsr1h,f,c
  4873   002086  CFDE FFE6          	movff	postinc2,postinc1
  4874   00208A  CFDD FFE5          	movff	postdec2,postdec1
  4875   00208E                     
  4876                           ;arrayfunction.c: 12:                 arrayTime[i] = Time;
  4877   00208E  EE20 F00C          	lfsr	2,12
  4878   002092  5001               	movf	ArrayAppend@arrayTime^0,w,c
  4879   002094  26D9               	addwf	fsr2l,f,c
  4880   002096  5002               	movf	(ArrayAppend@arrayTime+1)^0,w,c
  4881   002098  22DA               	addwfc	fsr2h,f,c
  4882   00209A  C005  FFDE         	movff	ArrayAppend@Time,postinc2
  4883   00209E  C006  FFDD         	movff	ArrayAppend@Time+1,postdec2
  4884   0020A2                     
  4885                           ;arrayfunction.c: 18:         }
  4886   0020A2  4A0A               	infsnz	ArrayAppend@i^0,f,c
  4887   0020A4  2A0B               	incf	(ArrayAppend@i+1)^0,f,c
  4888   0020A6                     l2531:
  4889   0020A6  0EFF               	movlw	255
  4890   0020A8  2403               	addwf	ArrayAppend@size^0,w,c
  4891   0020AA  6E07               	movwf	??_ArrayAppend^0,c
  4892   0020AC  0EFF               	movlw	255
  4893   0020AE  2004               	addwfc	(ArrayAppend@size+1)^0,w,c
  4894   0020B0  6E08               	movwf	(??_ArrayAppend+1)^0,c
  4895   0020B2  500A               	movf	ArrayAppend@i^0,w,c
  4896   0020B4  5C07               	subwf	??_ArrayAppend^0,w,c
  4897   0020B6  5008               	movf	(??_ArrayAppend+1)^0,w,c
  4898   0020B8  0A80               	xorlw	128
  4899   0020BA  6E09               	movwf	(??_ArrayAppend+2)^0,c
  4900   0020BC  500B               	movf	(ArrayAppend@i+1)^0,w,c
  4901   0020BE  0A80               	xorlw	128
  4902   0020C0  5809               	subwfb	(??_ArrayAppend+2)^0,w,c
  4903   0020C2  B0D8               	btfsc	status,0,c
  4904   0020C4  EF66  F010         	goto	u2291
  4905   0020C8  EF68  F010         	goto	u2290
  4906   0020CC                     u2291:
  4907   0020CC  EF33  F010         	goto	l2521
  4908   0020D0                     u2290:
  4909   0020D0  0012               	return		;funcret
  4910   0020D2                     __end_of_ArrayAppend:
  4911                           	callstack 0
  4912                           
  4913 ;; *************** function _ADC_init *****************
  4914 ;; Defined at:
  4915 ;;		line 9 in file "ADC.c"
  4916 ;; Parameters:    Size  Location     Type
  4917 ;;		None
  4918 ;; Auto vars:     Size  Location     Type
  4919 ;;		None
  4920 ;; Return value:  Size  Location     Type
  4921 ;;                  1    wreg      void 
  4922 ;; Registers used:
  4923 ;;		wreg, status,2
  4924 ;; Tracked objects:
  4925 ;;		On entry : 0/0
  4926 ;;		On exit  : 0/0
  4927 ;;		Unchanged: 0/0
  4928 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4929 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4930 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4931 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4932 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4933 ;;Total ram usage:        0 bytes
  4934 ;; Hardware stack levels used: 1
  4935 ;; Hardware stack levels required when called: 1
  4936 ;; This function calls:
  4937 ;;		Nothing
  4938 ;; This function is called by:
  4939 ;;		_main
  4940 ;; This function uses a non-reentrant model
  4941 ;;
  4942                           
  4943                           	psect	text26
  4944   0023A2                     __ptext26:
  4945                           	callstack 0
  4946   0023A2                     _ADC_init:
  4947                           	callstack 29
  4948   0023A2                     
  4949                           ;ADC.c: 11:     TRISAbits.TRISA3=1;
  4950   0023A2  8681               	bsf	129,3,c	;volatile
  4951                           
  4952                           ;ADC.c: 12:     ANSELAbits.ANSELA3=1;
  4953   0023A4  010E               	movlb	14	; () banked
  4954   0023A6  8792               	bsf	146,3,b	;volatile
  4955                           
  4956                           ;ADC.c: 14:     ADREFbits.ADNREF = 0;
  4957   0023A8  010F               	movlb	15	; () banked
  4958   0023AA  9958               	bcf	88,4,b	;volatile
  4959   0023AC                     
  4960                           ; BSR set to: 15
  4961                           ;ADC.c: 15:     ADREFbits.ADPREF = 0b00;
  4962   0023AC  0EFC               	movlw	-4
  4963   0023AE  1758               	andwf	88,f,b	;volatile
  4964                           
  4965                           ;ADC.c: 16:     ADPCH=0b11;
  4966   0023B0  0E03               	movlw	3
  4967   0023B2  6F5F               	movwf	95,b	;volatile
  4968   0023B4                     
  4969                           ; BSR set to: 15
  4970                           ;ADC.c: 17:     ADCON0bits.ADFM = 0;
  4971   0023B4  9460               	bcf	96,2,c	;volatile
  4972   0023B6                     
  4973                           ; BSR set to: 15
  4974                           ;ADC.c: 18:     ADCON0bits.ADCS = 1;
  4975   0023B6  8860               	bsf	96,4,c	;volatile
  4976   0023B8                     
  4977                           ; BSR set to: 15
  4978                           ;ADC.c: 19:     ADCON0bits.ADON = 1;
  4979   0023B8  8E60               	bsf	96,7,c	;volatile
  4980   0023BA                     
  4981                           ; BSR set to: 15
  4982   0023BA  0012               	return		;funcret
  4983   0023BC                     __end_of_ADC_init:
  4984                           	callstack 0
  4985                           
  4986 ;; *************** function _ADC_getval *****************
  4987 ;; Defined at:
  4988 ;;		line 22 in file "ADC.c"
  4989 ;; Parameters:    Size  Location     Type
  4990 ;;		None
  4991 ;; Auto vars:     Size  Location     Type
  4992 ;;  tmpval          2    2[COMRAM] unsigned int 
  4993 ;; Return value:  Size  Location     Type
  4994 ;;                  2    0[COMRAM] unsigned int 
  4995 ;; Registers used:
  4996 ;;		wreg, status,2, status,0
  4997 ;; Tracked objects:
  4998 ;;		On entry : 0/0
  4999 ;;		On exit  : 0/0
  5000 ;;		Unchanged: 0/0
  5001 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5002 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5003 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5004 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5005 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5006 ;;Total ram usage:        4 bytes
  5007 ;; Hardware stack levels used: 1
  5008 ;; Hardware stack levels required when called: 1
  5009 ;; This function calls:
  5010 ;;		Nothing
  5011 ;; This function is called by:
  5012 ;;		_main
  5013 ;; This function uses a non-reentrant model
  5014 ;;
  5015                           
  5016                           	psect	text27
  5017   0022E2                     __ptext27:
  5018                           	callstack 0
  5019   0022E2                     _ADC_getval:
  5020                           	callstack 29
  5021   0022E2                     
  5022                           ;ADC.c: 24:     unsigned int tmpval;;ADC.c: 26:     ADCON0bits.GO = 1;
  5023   0022E2  8060               	bsf	96,0,c	;volatile
  5024   0022E4                     l255:
  5025   0022E4  B060               	btfsc	96,0,c	;volatile
  5026   0022E6  EF77  F011         	goto	u2281
  5027   0022EA  EF79  F011         	goto	u2280
  5028   0022EE                     u2281:
  5029   0022EE  EF72  F011         	goto	l255
  5030   0022F2                     u2280:
  5031   0022F2                     
  5032                           ;ADC.c: 30:     tmpval = ADRESH;
  5033   0022F2  CF64 F003          	movff	3940,ADC_getval@tmpval	;volatile
  5034   0022F6  6A04               	clrf	(ADC_getval@tmpval+1)^0,c
  5035   0022F8                     
  5036                           ;ADC.c: 34:     tmpval = 255 - tmpval;
  5037   0022F8  5003               	movf	ADC_getval@tmpval^0,w,c
  5038   0022FA  08FF               	sublw	255
  5039   0022FC  6E03               	movwf	ADC_getval@tmpval^0,c
  5040   0022FE  5004               	movf	(ADC_getval@tmpval+1)^0,w,c
  5041   002300  A0D8               	btfss	status,0,c
  5042   002302  2AE8               	incf	wreg,f,c
  5043   002304  0800               	sublw	0
  5044   002306  6E04               	movwf	(ADC_getval@tmpval+1)^0,c
  5045   002308                     
  5046                           ;ADC.c: 36:     return tmpval;
  5047   002308  C003  F001         	movff	ADC_getval@tmpval,?_ADC_getval
  5048   00230C  C004  F002         	movff	ADC_getval@tmpval+1,?_ADC_getval+1
  5049   002310  0012               	return		;funcret
  5050   002312                     __end_of_ADC_getval:
  5051                           	callstack 0
  5052                           
  5053 ;; *************** function _HighISR *****************
  5054 ;; Defined at:
  5055 ;;		line 31 in file "interrupts.c"
  5056 ;; Parameters:    Size  Location     Type
  5057 ;;		None
  5058 ;; Auto vars:     Size  Location     Type
  5059 ;;		None
  5060 ;; Return value:  Size  Location     Type
  5061 ;;                  1    wreg      void 
  5062 ;; Registers used:
  5063 ;;		wreg, status,2, status,0
  5064 ;; Tracked objects:
  5065 ;;		On entry : 0/0
  5066 ;;		On exit  : 0/0
  5067 ;;		Unchanged: 0/0
  5068 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5069 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5070 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5071 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5072 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5073 ;;Total ram usage:        0 bytes
  5074 ;; Hardware stack levels used: 1
  5075 ;; This function calls:
  5076 ;;		Nothing
  5077 ;; This function is called by:
  5078 ;;		Interrupt level 2
  5079 ;; This function uses a non-reentrant model
  5080 ;;
  5081                           
  5082                           	psect	intcode
  5083   000008                     __pintcode:
  5084                           	callstack 0
  5085   000008                     _HighISR:
  5086                           	callstack 22
  5087                           
  5088                           ;incstack = 0
  5089   000008  824E               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  5090   00000A                     
  5091                           ;interrupts.c: 35:     if(PIR0bits.TMR0IF){
  5092   00000A  010E               	movlb	14	; () banked
  5093   00000C  AB33               	btfss	51,5,b	;volatile
  5094   00000E  EF0B  F000         	goto	i2u243_41
  5095   000012  EF0D  F000         	goto	i2u243_40
  5096   000016                     i2u243_41:
  5097   000016  EF16  F000         	goto	i2l105
  5098   00001A                     i2u243_40:
  5099   00001A                     
  5100                           ; BSR set to: 14
  5101                           ;interrupts.c: 37:         TMR0H = 0b00001011;
  5102   00001A  0E0B               	movlw	11
  5103   00001C  6ED4               	movwf	212,c	;volatile
  5104                           
  5105                           ;interrupts.c: 38:         TMR0L = 0b11011100;
  5106   00001E  0EDC               	movlw	220
  5107   000020  6ED3               	movwf	211,c	;volatile
  5108   000022                     
  5109                           ; BSR set to: 14
  5110                           ;interrupts.c: 39:         GLOBALsecs++;
  5111   000022  0101               	movlb	1	; () banked
  5112   000024  4BF2               	infsnz	_GLOBALsecs& (0+255),f,b
  5113   000026  2BF3               	incf	(_GLOBALsecs+1)& (0+255),f,b
  5114   000028                     
  5115                           ; BSR set to: 1
  5116                           ;interrupts.c: 40:         PIR0bits.TMR0IF=0;
  5117   000028  010E               	movlb	14	; () banked
  5118   00002A  9B33               	bcf	51,5,b	;volatile
  5119   00002C                     i2l105:
  5120                           
  5121                           ; BSR set to: 14
  5122   00002C  924E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  5123   00002E  0011               	retfie		f
  5124   000030                     __end_of_HighISR:
  5125                           	callstack 0
  5126                           
  5127                           	psect	rparam
  5128   000000                     
  5129                           	psect	temp
  5130   00004E                     btemp:
  5131                           	callstack 0
  5132   00004E                     	ds	1
  5133   000000                     int$flags	set	btemp
  5134   000000                     wtemp8	set	btemp+1
  5135   000000                     ttemp5	set	btemp+1
  5136   000000                     ttemp6	set	btemp+4
  5137   000000                     ttemp7	set	btemp+8
  5138                           
  5139                           	psect	config
  5140                           
  5141                           ;Config register CONFIG1L @ 0x300000
  5142                           ;	External Oscillator mode Selection bits
  5143                           ;	FEXTOSC = HS, HS (crystal oscillator) above 8 MHz; PFM set to high power
  5144                           ;	Power-up default value for COSC bits
  5145                           ;	RSTOSC = EXTOSC_4PLL, EXTOSC with 4x PLL, with EXTOSC operating per FEXTOSC bits
  5146   300000                     	org	3145728
  5147   300000  AA                 	db	170
  5148                           
  5149                           ;Config register CONFIG1H @ 0x300001
  5150                           ;	unspecified, using default values
  5151                           ;	Clock Out Enable bit
  5152                           ;	CLKOUTEN = 0x1, unprogrammed default
  5153                           ;	Clock Switch Enable bit
  5154                           ;	CSWEN = 0x1, unprogrammed default
  5155                           ;	Fail-Safe Clock Monitor Enable bit
  5156                           ;	FCMEN = 0x1, unprogrammed default
  5157   300001                     	org	3145729
  5158   300001  FF                 	db	255
  5159                           
  5160                           ;Config register CONFIG3L @ 0x300004
  5161                           ;	WDT Period Select bits
  5162                           ;	WDTCPS = 0x1F, unprogrammed default
  5163                           ;	WDT operating mode
  5164                           ;	WDTE = OFF, WDT Disabled
  5165   300004                     	org	3145732
  5166   300004  9F                 	db	159
  5167                           
  5168                           ;Config register CONFIG3H @ 0x300005
  5169                           ;	unspecified, using default values
  5170                           ;	WDT Window Select bits
  5171                           ;	WDTCWS = 0x7, unprogrammed default
  5172                           ;	WDT input clock selector
  5173                           ;	WDTCCS = 0x7, unprogrammed default
  5174   300005                     	org	3145733
  5175   300005  FF                 	db	255
  5176                           tosu	equ	0xFFF
  5177                           tosh	equ	0xFFE
  5178                           tosl	equ	0xFFD
  5179                           stkptr	equ	0xFFC
  5180                           pclatu	equ	0xFFB
  5181                           pclath	equ	0xFFA
  5182                           pcl	equ	0xFF9
  5183                           tblptru	equ	0xFF8
  5184                           tblptrh	equ	0xFF7
  5185                           tblptrl	equ	0xFF6
  5186                           tablat	equ	0xFF5
  5187                           prodh	equ	0xFF4
  5188                           prodl	equ	0xFF3
  5189                           indf0	equ	0xFEF
  5190                           postinc0	equ	0xFEE
  5191                           postdec0	equ	0xFED
  5192                           preinc0	equ	0xFEC
  5193                           plusw0	equ	0xFEB
  5194                           fsr0h	equ	0xFEA
  5195                           fsr0l	equ	0xFE9
  5196                           wreg	equ	0xFE8
  5197                           indf1	equ	0xFE7
  5198                           postinc1	equ	0xFE6
  5199                           postdec1	equ	0xFE5
  5200                           preinc1	equ	0xFE4
  5201                           plusw1	equ	0xFE3
  5202                           fsr1h	equ	0xFE2
  5203                           fsr1l	equ	0xFE1
  5204                           bsr	equ	0xFE0
  5205                           indf2	equ	0xFDF
  5206                           postinc2	equ	0xFDE
  5207                           postdec2	equ	0xFDD
  5208                           preinc2	equ	0xFDC
  5209                           plusw2	equ	0xFDB
  5210                           fsr2h	equ	0xFDA
  5211                           fsr2l	equ	0xFD9
  5212                           status	equ	0xFD8

Data Sizes:
    Strings     67
    Constant    0
    Data        24
    BSS         95
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     72      77
    BANK0           160      0      56
    BANK1           256    186     244
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          234      0       0

Pointer List with Targets:

    ArrayAppend@arrayTime	PTR int  size(2) Largest target is 14
		 -> main@14503(BANK1[14]), main@14505(BANK1[14]), main@14507(BANK1[14]), main@14509(BANK1[14]), 

    dtoa@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    f$.$buffer	PTR unsigned char  size(2) Largest target is 0

    f$.$source	PTR const unsigned char  size(2) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    fputc@fp$.$buffer	PTR unsigned char  size(2) Largest target is 0

    fputc@fp$.$source	PTR const unsigned char  size(2) Largest target is 0

    fputs@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    fputs@s	PTR const unsigned char  size(1) Largest target is 32
		 -> dbuf(BANK0[32]), 

    LCD_sendstring@string	PTR unsigned char  size(2) Largest target is 18
		 -> main@buffer(BANK1[18]), 

    pad@buf	PTR unsigned char  size(1) Largest target is 32
		 -> dbuf(BANK0[32]), 

    pad@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    read_prec_or_width@ap	PTR PTR void [1] size(1) Largest target is 1
		 -> sprintf@ap(COMRAM[1]), 

    read_prec_or_width@fmt	PTR PTR const unsigned char  size(1) Largest target is 1
		 -> vfprintf@cfmt(COMRAM[1]), 

    S1888$buffer	PTR unsigned char  size(2) Largest target is 0

    S1888$source	PTR const unsigned char  size(2) Largest target is 0

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    sprintf@fmt	PTR const unsigned char  size(1) Largest target is 26
		 -> STR_1(CODE[26]), STR_2(CODE[20]), STR_3(CODE[21]), 

    sprintf@s	PTR unsigned char  size(2) Largest target is 18
		 -> main@buffer(BANK1[18]), 

    UpdateClock@days	PTR int  size(2) Largest target is 16
		 -> main@clock(BANK1[16]), 

    UpdateClock@DoW	PTR int  size(2) Largest target is 16
		 -> main@clock(BANK1[16]), 

    UpdateClock@DSTstate	PTR int  size(2) Largest target is 16
		 -> main@clock(BANK1[16]), 

    UpdateClock@hours	PTR int  size(2) Largest target is 16
		 -> main@clock(BANK1[16]), 

    UpdateClock@minutes	PTR int  size(2) Largest target is 16
		 -> main@clock(BANK1[16]), 

    UpdateClock@months	PTR int  size(2) Largest target is 16
		 -> main@clock(BANK1[16]), 

    UpdateClock@seconds	PTR int  size(2) Largest target is 2
		 -> GLOBALsecs(BANK1[2]), 

    UpdateClock@years	PTR int  size(2) Largest target is 16
		 -> main@clock(BANK1[16]), 

    vfpfcnvrt@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(COMRAM[1]), 

    vfpfcnvrt@cp	PTR unsigned char  size(1) Largest target is 26
		 -> STR_1(CODE[26]), STR_2(CODE[20]), STR_3(CODE[21]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(1) Largest target is 1
		 -> vfprintf@cfmt(COMRAM[1]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    vfprintf@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(COMRAM[1]), 

    vfprintf@cfmt	PTR unsigned char  size(1) Largest target is 26
		 -> STR_1(CODE[26]), STR_2(CODE[20]), STR_3(CODE[21]), 

    vfprintf@fmt	PTR const unsigned char  size(1) Largest target is 26
		 -> STR_1(CODE[26]), STR_2(CODE[20]), STR_3(CODE[21]), 

    vfprintf@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 


Critical Paths under _main in COMRAM

    _main->_sprintf
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_dtoa
    _read_prec_or_width->___wmul
    _dtoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _abs->___awmod
    _UpdateClock->___awmod
    _LCD_setline->_LCD_sendbyte
    _LCD_sendstring->_LCD_sendbyte
    _LCD_Init->_LCD_sendbyte
    _LCD_sendbyte->_LCD_sendnibble

Critical Paths under _HighISR in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _HighISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _HighISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _HighISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _HighISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _HighISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _HighISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _HighISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _HighISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _HighISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _HighISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _HighISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _HighISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _HighISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _HighISR in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                               188   188      0   21875
                                             70 COMRAM     2     2      0
                                              0 BANK1    186   186      0
                         _ADC_getval
                           _ADC_init
                        _ArrayAppend
                    _Interrupts_init
                           _LCD_Init
                     _LCD_sendstring
                        _LCD_setline
                  _LEDarray_disp_bin
                      _LEDarray_init
                        _Timer0_init
                        _UpdateClock
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             26    15     11   10262
                                             46 COMRAM    24    13     11
                           _vfprintf
 ---------------------------------------------------------------------------------
 (2) _vfprintf                                             4     1      3    9605
                                             42 COMRAM     4     1      3
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (3) _vfpfcnvrt                                           12     9      3    9246
                                             31 COMRAM    11     8      3
                               _dtoa
                              _fputc
                 _read_prec_or_width
 ---------------------------------------------------------------------------------
 (4) _read_prec_or_width                                   5     3      2    3835
                                              6 COMRAM     5     3      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4    3503
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) _dtoa                                                11     8      3    4079
                                             20 COMRAM    11     8      3
                            ___awdiv
                            ___awmod
                                _abs
                                _pad
 ---------------------------------------------------------------------------------
 (5) _pad                                                  7     3      4    2172
                                             13 COMRAM     7     3      4
                              _fputc
                              _fputs
 ---------------------------------------------------------------------------------
 (6) _fputs                                                5     3      2    1083
                                              8 COMRAM     5     3      2
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _fputc                                                8     5      3     682
                                              0 COMRAM     8     5      3
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (5) _abs                                                  4     2      2     142
                                              6 COMRAM     4     2      2
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (5) ___awdiv                                              8     4      4     452
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (1) _UpdateClock                                         48    30     18    3440
                                              6 COMRAM    48    30     18
                            ___awmod
 ---------------------------------------------------------------------------------
 (5) ___awmod                                              6     2      4     752
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _Timer0_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LEDarray_init                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LEDarray_disp_bin                                    2     0      2     274
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _LCD_setline                                          1     1      0     882
                                              3 COMRAM     1     1      0
                       _LCD_sendbyte
 ---------------------------------------------------------------------------------
 (1) _LCD_sendstring                                       2     0      2    1111
                                              3 COMRAM     2     0      2
                       _LCD_sendbyte
 ---------------------------------------------------------------------------------
 (1) _LCD_Init                                             2     2      0     926
                                              3 COMRAM     2     2      0
                       _LCD_sendbyte
                     _LCD_sendnibble
 ---------------------------------------------------------------------------------
 (2) _LCD_sendbyte                                         2     1      1     838
                                              1 COMRAM     2     1      1
                     _LCD_sendnibble
 ---------------------------------------------------------------------------------
 (3) _LCD_sendnibble                                       1     1      0      88
                                              0 COMRAM     1     1      0
                          _LCD_E_TOG
 ---------------------------------------------------------------------------------
 (4) _LCD_E_TOG                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Interrupts_init                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ArrayAppend                                         11     5      6    1207
                                              0 COMRAM    11     5      6
 ---------------------------------------------------------------------------------
 (1) _ADC_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ADC_getval                                           4     2      2      46
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _HighISR                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_getval
   _ADC_init
   _ArrayAppend
   _Interrupts_init
   _LCD_Init
     _LCD_sendbyte
       _LCD_sendnibble
         _LCD_E_TOG
     _LCD_sendnibble
   _LCD_sendstring
     _LCD_sendbyte
   _LCD_setline
     _LCD_sendbyte
   _LEDarray_disp_bin
   _LEDarray_init
   _Timer0_init
   _UpdateClock
     ___awmod
   _sprintf
     _vfprintf
       _vfpfcnvrt
         _dtoa
           ___awdiv
           ___awmod
           _abs
             ___awmod (ARG)
           _pad
             _fputc
               _putch
             _fputs
               _fputc
         _fputc
         _read_prec_or_width
           ___wmul

 _HighISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             DE9      0       0      46        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     BA      F4       7       95.3%
BITBANK13           EA      0       0      30        0.0%
BANK13              EA      0       0      31        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0      38       5       35.0%
BITBIGSFRllhhhh     84      0       0      38        0.0%
BITBIGSFRllhhll     5E      0       0      41        0.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     48      4D       1       81.9%
BITBIGSFRhhl        4A      0       0      34        0.0%
BITBIGSFRllhhlh     33      0       0      40        0.0%
BITBIGSFRllll       30      0       0      44        0.0%
BITBIGSFRhhhl       1B      0       0      33        0.0%
BITBIGSFRllhhhh     14      0       0      35        0.0%
BITBIGSFRhhhh        D      0       0      32        0.0%
BITBIGSFRlllh        9      0       0      43        0.0%
BITBIGSFRllhl        9      0       0      42        0.0%
BITBIGSFRllhhhl      8      0       0      39        0.0%
BITBIGSFRllhhhh      6      0       0      37        0.0%
BITBIGSFRllhhhh      3      0       0      36        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     179      45        0.0%
DATA                 0      0     179       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.45 build 20230818022343 
Symbol Table                                                                                   Fri Feb 09 01:01:52 2024

                        l53 177C                          l55 1776                          l49 1470  
                        l79 23A0                          l99 23EE                ___awdiv@sign 0006  
       ___wmul@multiplicand 0003           ??_Interrupts_init 0001                         l301 20E8  
                       l150 1C58                         l303 20FE                         l151 1C6C  
                       l312 2380                         l320 2278                         l160 1CC6  
                       l152 1C6E                         l144 235C                         l305 2114  
                       l161 1CDA                         l153 1C82                         l162 1CDC  
                       l154 1C84                         l307 212A                         l315 1C2A  
                       l163 1CF0                         l155 1C98                         l147 1C40  
                       l252 23BA                         l340 20D0                         l156 1C9A  
                       l148 1C42                         l309 2138                         l165 1CF2  
                       l157 1CAE                         l149 1C56                         l326 22E0  
                       l158 1CB0                         l255 22E4                         l159 1CC4  
                       l257 22F2                         l258 2310                         l349 2336  
                       l279 13F0                         l298 23E0                         l580 1DB6  
                       l593 1F20                         _abs 227A                         _pad 1FD0  
              ___awmod@sign 0006                         wreg 0FE8                        l1101 2294  
                      l1104 22AC                        l1050 203E                        l1027 2202  
                      ?_abs 0007                        l1116 1E70                        l1124 223E  
                      l1052 2058                        l2101 1EA6                        l2021 1DD8  
                      l2111 1EEC                        l2103 1EB8                        l1127 23F0  
                      l2023 1DE2                        l2031 2204                        l1047 2000  
                      l1055 1A02                        l1072 1FC6                        l2121 1F18  
                      l2113 1EF4                        l2105 1EC0                        l2025 1DFE  
                      l2017 1DB8                        l2033 2210                        l2041 232E  
                      l2201 1F22                        l3001 1632                        l2115 1EFA  
                      l2107 1EC8                        l2051 1D0E                        l2027 1E30  
                      l2019 1DC8                        l2035 221E                        l2131 1FF8  
                      l2211 1F94                        l2203 1F2A                        l1091 19A2  
                      l3011 16CC                        l3003 167E                        l1068 1B0A  
                      l1076 1FCE                        l2221 20F8                        l2109 1ED6  
                      l2117 1F00                        l2061 1D34                        l2053 1D12  
                      l2045 1CF4                        l2141 227A                        l2037 2222  
                      l2133 200C                        l2125 1FD0                        l2205 1F50  
                      l2213 1F9C                        l2301 218E                        l3021 1734  
                      l3013 16D2                        l3005 168A                        l2231 212C  
                      l2223 2100                        l2215 20D4                        l2311 2382  
                      l2119 1F10                        l2071 1D6A                        l2063 1D46  
                      l2055 1D20                        l2047 1CF8                        l2143 2288  
                      l2135 201C                        l2127 1FDE                        l2151 19A4  
                      l2039 2312                        l2207 1F58                        l2303 219E  
                      l3023 174A                        l3015 16FA                        l3007 1690  
                      l2145 23D4                        l2233 2130                        l2225 210E  
                      l2217 20E2                        l2321 1B0C                        l2313 238A  
                      l2073 1D80                        l2065 1D4E                        l2081 1D96  
                      l2057 1D28                        l2049 1D06                        l2137 2020  
                      l2129 1FEA                        l2161 19DA                        l2153 19A8  
                      l2209 1F74                        l2241 185C                        l1097 21C6  
                      l2305 21BE                        l3041 17A4                        l3025 1760  
                      l3017 1706                        l3009 16C0                        l2147 23D6  
                      l2227 2116                        l2219 20EA                        l2331 1B66  
                      l2323 1B24                        l2315 2394                        l2091 1E76  
                      l2083 1DA6                        l2075 1D88                        l2067 1D56  
                      l2059 1D2C                        l2139 204C                        l2171 1A14  
                      l2163 19EA                        l2155 19BC                        l2243 1860  
                      l2235 1822                        l3051 17AC                        l3027 177E  
                      l3019 1722                        l2149 23DE                        l2229 2124  
                      l2341 1BAA                        l2333 1B7C                        l2325 1B3A  
                      l2309 2338                        l2317 239E                        l2093 1E84  
                      l2085 1DAE                        l2077 1D8A                        l2069 1D64  
                      l2173 1A1A                        l2181 1A6E                        l2165 19F6  
                      l2157 19C4                        l2261 18E6                        l2253 187E  
                      l2245 1868                        l2237 1848                        l3061 17E0  
                      l3053 17C2                        l3037 1786                        l2511 22E2  
                      l2319 23E2                        l2351 1BF0                        l2343 1BB4  
                      l2335 1B82                        l2327 1B40                        l2503 22AE  
                      l2095 1E8C                        l2079 1D90                        l2183 1A88  
                      l2191 1AD2                        l2175 1A48                        l2167 19FE  
                      l2159 19D4                        l2271 1952                        l2263 18F0  
                      l2247 186A                        l2255 18B4                        l2239 1850  
                      l3063 17F4                        l3055 17D2                        l3039 17A2  
                      l2513 22F8                        l2361 23B4                        l2521 2066  
                      l2353 1C08                        l2345 1BCC                        l2337 1B92  
                      l2329 1B56                        l2505 22B2                        l2097 1E90  
                      l2089 1E72                        l2193 1AE2                        l2185 1A9A  
                      l2177 1A4C                        l2169 1A0A                        l2273 195C  
                      l2265 18FA                        l2257 18C4                        l2249 1876  
                      l2281 197C                        l3065 17F8                        l3057 17D6  
                      l2515 2308                        l2363 23B6                        l2523 206E  
                      l2531 20A6                        l2291 2360                        l2355 1C12  
                      l2347 1BD6                        l2339 1B9C                        l2507 22C4  
                      l2099 1E9E                        l2195 1AE8                        l2187 1AAA  
                      l2179 1A52                        l2267 191A                        l2259 18D8  
                      l3067 1810                        l3059 17D8                        l2365 23B8  
                      l2357 23A2                        l2525 208E                        l2293 236A  
                      l2349 1BE6                        l2509 22C8                        l2197 1AF4  
                      l2189 1AC4                        l2277 1970                        l2269 193A  
                      l2359 23AC                        l2519 205A                        l2295 2372  
                      l2471 1C7C                        l2463 1C2C                        l2529 20A2  
                      l2297 2378                        l2481 1CEA                        l2473 1C92  
                      l2465 1C3A                        l3089 18A6                        l2483 2242  
                      l2475 1CA8                        l2467 1C50                        l2299 2186  
                      l2491 21C8                        l2485 2254                        l2477 1CBE  
                      l2469 1C66                        l2901 1210                        l2493 21D4  
                      l2487 225E                        l2479 1CD4                        l2911 1296  
                      l2903 123C                        l2495 21DC                        l2489 226E  
                      l2921 1358                        l2913 12C4                        l2905 1248  
                      l2841 0E82                        l2497 21E4                        l2923 1368  
                      l2915 12E0                        l2907 1272                        l2851 0F12  
                      l2843 0EAA                        l2835 0E46                        l2499 21F4  
                      l2931 13F2                        l2925 1390                        l2917 130E  
                      l2909 128E                        l2861 0FA2                        l2853 0F3A  
                      l2845 0EB6                        l2837 0E58                        l2941 1406  
                      l2933 13F6                        ?_pad 000E                        l2927 13B8  
                      l2919 1316                        l2871 1044                        l2863 0FCA  
                      l2855 0F46                        l2847 0EDE                        l2839 0E6A  
                      l2951 1418                        l2943 1408                        l2935 13FA  
                      l2929 13C8                        l2881 10F2                        l2873 1060  
                      l2865 0FF2                        l2857 0F6E                        l2849 0EEA  
                      l2961 1440                        l2953 1420                        l2945 140A  
                      l2937 13FE                        l2891 1172                        l2883 1104  
                      l2875 1088                        l2867 101A                        l2859 0F96  
                      l2971 1460                        l2963 1448                        l2955 1428  
                      l2947 140C                        l2939 1402                        l2893 119A  
                      l2885 112C                        l2877 10A4                        l2869 102A  
                      l2981 15C8                        l2973 1468                        l2965 1450  
                      l2957 1430                        l2949 140E                        l2895 11B6  
                      l2879 10CA                        l2887 113C                        l2991 1600  
                      l2983 15D0                        l2975 15A0                        l2967 1458  
                      l2959 1438                        l2897 11D2                        l2889 1156  
                      l2993 1608                        l2985 15D8                        l2977 15AC  
                      l2969 1460                        l2899 11FE                        l2995 1610  
                      l2987 15EC                        l2979 15C0                        l2997 1618  
                      l2989 15F8                        l2999 162A                main@TestMode 0150  
                      STR_1 0E01                        STR_2 0E30                        STR_3 0E1B  
                      u2200 1C92                        u3000 12C4                        u2201 1C8E  
                      u3001 12C0                        u2210 1CA8                        u3010 12E0  
                      u2211 1CA4                        u3011 12DC                        u2220 1CBE  
                      u3020 130E                        u1500 1D06                        u3100 1722  
                      u2221 1CBA                        u3021 130A                        u1501 1D02  
                      u3101 171E                        u2230 1CD4                        u3030 1358  
                      u1510 1D20                        u3110 1734                        u2231 1CD0  
                      u3031 1354                        u1511 1D1C                        u3111 1730  
                      u2240 1CEA                        u2160 1C3A                        u1600 1EEC  
                      u3040 13B8                        u1520 1D46                        u3120 174A  
                      u2241 1CE6                        u2161 1C36                        u1601 1EE8  
                      u3041 13B4                        u1521 1D42                        u3121 1746  
                      u2250 2254                        u2170 1C50                        u1610 1F10  
                      u1530 1D64                        u1450 1DC8                        u3130 1760  
                      u2251 2250                        u2171 1C4C                        u1611 1F0C  
                      u1531 1D60                        u1451 1DC4                        u3131 175C  
                      u3051 15A6                        u2260 226E                        u2180 1C66  
                      u1540 1D80                        u1460 1DD8                        u1620 1FDE  
                      u1700 19EA                        u3140 1776                        u2261 226A  
                      u2181 1C62                        u1541 1D7C                        u1461 1DD4  
                      u1621 1FDA                        u1701 19E6                        u3141 1772  
                      u3061 15BA                        u2270 22E0                        u2190 1C7C  
                      u1550 1DA6                        u1470 1DFE                        u1630 1FF8  
                      u1710 1A88                        u3150 17A2                        u3207 1B46  
                      u2271 22DC                        u2191 1C78                        u1551 1DA2  
                      u1471 1DFA                        u1631 1FF4                        u1711 1A84  
                      u3151 179E                        u3071 15DE                        u2280 22F2  
                      u1800 20F8                        u1560 1E84                        u1480 1E30  
                      u1640 203E                        u1720 1A9A                        u3160 17C2  
                      u2281 22EE                        u1801 20F4                        u3217 1B5C  
                      u1561 1E80                        u1481 1E2C                        u1641 203A  
                      u1721 1A96                        u3161 17BE                        u3081 15F2  
                      u2290 20D0                        u1810 210E                        u1570 1E9E  
                      u1490 223E                        u1650 204C                        u1730 1AAA  
                      u3170 17F4                        u3090 162A                        u2291 20CC  
                      u3307 2132                        u1811 210A                        u3227 1B72  
                      u1571 1E9A                        u1491 223A                        u1651 2048  
                      u1731 1AA6                        u3171 17F0                        u3091 1626  
                      u1820 2124                        u1580 1EB8                        u1660 2288  
                      u1740 1AC4                        u3317 23D8                        u1821 2120  
                      u3237 1B88                        u1581 1EB4                        u1661 2284  
                      u1741 1AC0                        u1590 1ED6                        u1750 1AD2  
                      u1670 19B8                        u1830 1848                        u3247 1B9E  
                      u1591 1ED2                        u1751 1ACE                        u1671 19B2  
                      u1831 1844                        u2800 0E6A                        u1760 1AE2  
                      u1680 19BA                        u1840 18C4                        u3257 1BBE  
                      u2801 0E66                        u1761 1ADE                        u1841 18C0  
                      u2810 0EAA                        u1690 19D4                        u1770 1F50  
                      u1850 18E6                        u3267 1BDC                        u2811 0EA6  
                      u1691 19D0                        u1771 1F4C                        u1851 18E2  
                      u3187 1802                        u2900 10CA                        u2820 0EDE  
                      u1780 1FC6                        u1860 191A                        u3277 1BFA  
                      u3197 1B2E                        u2901 10C6                        u2821 0EDA  
                      u1781 1FC2                        u1861 1916                        u1790 20E2  
                      u2910 1104                        u2830 0F3A                        u1870 193A  
                      u1791 20DE                        u3287 1C1C                        u2911 1100  
                      u2831 0F36                        u1871 1936                        u2920 1156  
                      u2840 0F96                        u3297 237A                        u2921 1152  
                      u2841 0F92                        u2930 1172                        u2850 101A  
                      u1890 21BE                        u2931 116E                        u2851 1016  
                      u1891 21BA                        u2940 119A                        u2860 1044  
                      u1885 2368                        u2941 1196                        u2861 1040  
                      u1886 236A                        u2950 11B6                        u2870 1060  
                      u2951 11B2                        u2871 105C                        u2791 0E50  
                      u2960 11D2                        u2880 1088                        u2961 11CE  
                      u2881 1084                        u2970 1210                        u2890 10A4  
                      u2971 120C                        u2891 10A0                        u2980 1272  
                      u2981 126E                        u2990 128E                        u2991 128A  
                      abs@a 0007                        _dbuf 0060                        _main 13F2  
                      _dtoa 19A4                        _prec 004B                        pad@i 0013  
                      pad@p 0010                        fsr1h 0FE2                        fsr2h 0FDA  
                      indf1 0FE7                        indf2 0FDF                        fsr1l 0FE1  
                      fsr2l 0FD9                        btemp 004E                ?_LCD_setline 0001  
                      prodh 0FF4                        prodl 0FF3                        start 0030  
          __end_of_ADC_init 23BC         main@light_threshold 014E             __end_of_HighISR 0030  
              ___param_bank 0000         __end_of_ArrayAppend 20D2                       ??_abs 0009  
                     ??_pad 0012                main@daycount 014C            __end_of_LCD_Init 1C2C  
                     ?_main 0001                       ?_dtoa 0015                       _ADPCH 0F5F  
           __end_of___awdiv 1DB8             __end_of___awmod 1F22             ___awdiv@divisor 0003  
                     i2l105 002C             ___awdiv@counter 0005                vfpfcnvrt@fmt 0021  
                     _TMR0H 0FD4                       _TMR0L 0FD3                       _flags 004D  
       read_prec_or_width@c 0009         read_prec_or_width@n 000A                       _fputc 1DB8  
                     _fputs 2204                       pad@fp 000E                       _width 0049  
                     _putch 23F0                       dtoa@d 0016                       dtoa@i 001E  
                     dtoa@p 001A                       dtoa@s 001D                       dtoa@w 001B  
             ?_LCD_sendbyte 0002                       tablat 0FF5                       plusw1 0FE3  
                     plusw2 0FDB                       ttemp5 004F                       ttemp6 0052  
                     ttemp7 0056                       status 0FD8                       wtemp8 004F  
           __end_of_sprintf 2204             __initialization 213A             ArrayAppend@Time 0005  
              __end_of_main 1822                __end_of_dtoa 1B0C             ArrayAppend@size 0003  
         __end_of_LCD_E_TOG 23E2                      ??_main 0047                      ??_dtoa 0018  
             __activetblptr 0003  __end_of_read_prec_or_width 1FD0                      ?_fputc 0001  
                    ?_fputs 0009                      _ADRESH 0F64              ??_LCD_sendbyte 0003  
          ___awdiv@dividend 0001                      ?_putch 0001            UpdateClock@hours 000B  
                    i2l2671 000A                      i2l2673 001A                      i2l2675 0022  
                    i2l2677 0028            UpdateClock@years 0013               vfpfcnvrt@done 0029  
                 ??_HighISR 0001                 _ArrayAppend 205A           _LEDarray_disp_bin 1C2C  
        ?_LEDarray_disp_bin 0001                ??_ADC_getval 0003               ??_Timer0_init 0001  
              vfprintf@cfmt 002E                      ___wmul 2312                   ??___awdiv 0005  
                 ??___awmod 0005        read_prec_or_width@ap 0008         ??_LEDarray_disp_bin 0003  
                    clear_0 2160                      clear_1 216C            ___awdiv@quotient 0007  
           ___awmod@divisor 0003                      isa$std 0001             ___awmod@counter 0005  
                    pad@buf 000F                      dtoa@fp 0015                      fputc@c 0001  
                    fputs@c 000B                      fputs@i 000C                      fputs@s 0009  
              __mediumconst 0000                      tblptrh 0FF7                      tblptrl 0FF6  
                    tblptru 0FF8                   ?_ADC_init 0001                      putch@c 0001  
          __end_of_vfprintf 21C8                   ??_sprintf 003A          __end_of_ADC_getval 2312  
 __end_of_LEDarray_disp_bin 1CF4                  __accesstop 0060               ??_UpdateClock 0019  
   __end_of__initialization 217C                   ?_LCD_Init 0001               ___rparam_used 0001  
             _LEDarray_init 2338             _Interrupts_init 23E2              __pcstackCOMRAM 0001  
              __pidataBANK0 23BC               __end_of_fputc 1E72               __end_of_fputs 2240  
             __end_of_putch 23F2         __end_of_Timer0_init 23A2                  ??_ADC_init 0001  
                   ??_fputc 0004                     ??_fputs 000B                     ??_putch 0001  
         UpdateClock@F14152 0080                  __pbssBANK0 0060                  __pbssBANK1 01BA  
       UpdateClock@DSTstate 0015                  ??_LCD_Init 0004              _LCD_sendnibble 20D2  
            ?_LEDarray_init 0001              _LCD_sendstring 22AE         __end_of_UpdateClock 13F2  
                   ?___wmul 0001        __end_of_LCD_sendbyte 2382           UpdateClock@months 0011  
    __end_of_LCD_sendnibble 213A         UpdateClock@TestMode 0017     __end_of_Interrupts_init 23F0  
                   _HighISR 0008      __end_of_LCD_sendstring 22E2        ArrayAppend@arrayTime 0001  
                 _ADREFbits 0F58                     __Hparam 0000                     __Lparam 0000  
               _Timer0_init 2382                     ___awdiv 1CF4                     ___awmod 1E72  
                 ?_vfprintf 002B                __psmallconst 0E00                     __pcinit 213A  
                   __ramtop 0E00                     __ptext0 13F2                     __ptext1 21C8  
                   __ptext2 2186                     __ptext3 1822                     __ptext4 1F22  
                   __ptext5 2312                     __ptext6 19A4                     __ptext7 1FD0  
                   __ptext8 2204                     __ptext9 1DB8       read_prec_or_width@fmt 0007  
          ___awmod@dividend 0001                   _LCD_E_TOG 23D4             LCD_setline@line 0004  
                   main@Dec 0194                     main@Feb 0158                     main@Aug 017C  
                   main@Apr 0164                     main@Jan 0152                     main@Mar 015E  
                   main@May 016A                     main@Oct 0188                     main@Jul 0176  
                   main@Jun 0170                     main@Sep 0182                     main@Nov 018E  
                   _sprintf 21C8        end_of_initialization 217C             ?_LCD_sendnibble 0001  
          ADC_getval@tmpval 0003                     fputc@fp 0003             ??_LEDarray_init 0001  
                   fputs@fp 000A                 _UpdateClock 0E46             ?_LCD_sendstring 0004  
              ?_ArrayAppend 0001          _read_prec_or_width 1F22           __end_of_vfpfcnvrt 19A4  
                   postdec1 0FE5                     postdec2 0FDD         ?_read_prec_or_width 0007  
                   postinc0 0FEE                     postinc1 0FE6                     postinc2 0FDE  
          vfpfcnvrt@convarg 0025                  main@F14502 01E4                  main@F14504 01D6  
                main@F14506 01C8                  main@F14508 01BA                  ??_vfprintf 002E  
                ?_LCD_E_TOG 0001                   _TRISAbits 0F81                   _TRISBbits 0F82  
                 _TRISCbits 0F83                   _TRISDbits 0F84                   _TRISEbits 0F85  
                 _TRISFbits 0F86                   _TRISGbits 0F87                   _TRISHbits 0F88  
      ??_read_prec_or_width 0009       main@previousClockDays 014A                 _CM1CON0bits 0ED0  
               _CM1CON1bits 0ED1            ?_Interrupts_init 0001                  main@buffer 0100  
               vfpfcnvrt@ap 0022                 vfpfcnvrt@cp 002A                 vfpfcnvrt@fp 0020  
            __end_of___wmul 2338        LCD_sendnibble@number 0001         start_initialization 213A  
               __end_of_abs 22AE                 __end_of_pad 205A                _LCD_sendbyte 235E  
           UpdateClock@days 000D               ??_LCD_setline 0004                 vfprintf@fmt 002C  
      LCD_sendstring@string 0004                    ??___wmul 0005                 __pdataBANK0 0080  
               __pbssCOMRAM 0049                 ??_LCD_E_TOG 0001               __pcstackBANK1 0100  
                  ?_HighISR 0001                   _dtoa$1967 0018                ?_Timer0_init 0001  
                 __pintcode 0008                    ?___awdiv 0001                    ?___awmod 0001  
       __end_of_LCD_setline 227A                 __smallconst 0E00            ??_LCD_sendnibble 0001  
                  _ADC_init 23A2            ??_LCD_sendstring 0006                    ?_sprintf 002F  
          LCD_sendbyte@Byte 0003                    _LCD_Init 1B0C            LCD_sendbyte@type 0002  
              ?_UpdateClock 0007              ___wmul@product 0005                    _LATAbits 0F79  
        UpdateClock@minutes 0009          UpdateClock@seconds 0007                    _LATBbits 0F7A  
                  _LATCbits 0F7B                    _LATDbits 0F7C                    _LATEbits 0F7D  
                  _LATFbits 0F7E                    _LATGbits 0F7F                    _LATHbits 0F80  
                  _IPR0bits 0E1F                    _PIE0bits 0E29                    i2u243_40 001A  
                  i2u243_41 0016                    _PIR0bits 0E33                   main@14503 0112  
                 main@14505 0120                   main@14507 012E                   main@14509 013C  
                 _vfpfcnvrt 1822                  _ADCON0bits 0F60           ___wmul@multiplier 0001  
                 main@clock 01AA      UpdateClock@DaysInMonth 001F                  _CM1NCHbits 0ED2  
                _CM1PCHbits 0ED3                   copy_data0 214E       __end_of_LEDarray_init 235E  
            UpdateClock@DoW 000F                 _LCD_setline 2240                    __Hrparam 0000  
                _ADC_getval 22E2                  vfprintf@ap 002D                    __Lrparam 0000  
                vfprintf@fp 002B                  ?_vfpfcnvrt 0020                  _ANSELAbits 0E92  
                sprintf@fmt 0031                  _T0CON0bits 0FD5                  _T0CON1bits 0FD6  
                  __ptext10 23F0                    __ptext11 227A                    __ptext20 1B0C  
                  __ptext12 1CF4                    __ptext21 235E                    __ptext13 0E46  
                  __ptext22 20D2                    __ptext14 1E72                    __ptext23 23D4  
                  __ptext15 2382                    __ptext24 23E2                    __ptext16 2338  
                  __ptext25 205A                    __ptext17 1C2C                    __ptext26 23A2  
                  __ptext18 2240                    __ptext27 22E2                    __ptext19 22AE  
   LEDarray_disp_bin@number 0001                  _GLOBALsecs 01F2                    isa$xinst 0000  
                  int$flags 004E                    main@Dawn 019A                    main@Dusk 01A2  
                  _vfprintf 2186                ArrayAppend@i 000A                  _INTCONbits 0FF2  
                  intlevel2 0000                   sprintf@ap 003A                _DAC1CON0bits 0EC6  
              _DAC1CON1bits 0EC7                 ?_ADC_getval 0001                 ??_vfpfcnvrt 0023  
                  sprintf@f 003B                    sprintf@s 002F               ??_ArrayAppend 0007  
