

Microchip MPLAB XC8 Assembler V2.45 build 20230818022343 
                                                                                               Thu Feb 08 18:53:49 2024

Microchip MPLAB XC8 C Compiler v2.45 (Free license) build 20230818022343 Og1 
     1                           	processor	18F67K40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=1
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1
    14                           	psect	text4,global,reloc=2,class=CODE,delta=1
    15                           	psect	text5,global,reloc=2,class=CODE,delta=1
    16                           	psect	text6,global,reloc=2,class=CODE,delta=1
    17                           	psect	text7,global,reloc=2,class=CODE,delta=1
    18                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    19                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
    20                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    21                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    22                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    23                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    24   000000                     
    25                           ; Generated 21/07/2023 GMT
    26                           ; 
    27                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    28                           ; All rights reserved.
    29                           ; 
    30                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    31                           ; 
    32                           ; Redistribution and use in source and binary forms, with or without modification, are
    33                           ; permitted provided that the following conditions are met:
    34                           ; 
    35                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    36                           ;        conditions and the following disclaimer.
    37                           ; 
    38                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    39                           ;        of conditions and the following disclaimer in the documentation and/or other
    40                           ;        materials provided with the distribution. Publication is not required when
    41                           ;        this file is used in an embedded application.
    42                           ; 
    43                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    44                           ;        software without specific prior written permission.
    45                           ; 
    46                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    47                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    48                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    49                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    50                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    51                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    52                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    53                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    54                           ; 
    55                           ; 
    56                           ; Code-generator required, PIC18F67K40 Definitions
    57                           ; 
    58                           ; SFR Addresses
    59   000000                     
    60                           	psect	idataCOMRAM
    61   0013F4                     __pidataCOMRAM:
    62                           	callstack 0
    63                           
    64                           ;initializer for UpdateClock@F14148
    65   0013F4  001F               	dw	31
    66   0013F6  001C               	dw	28
    67   0013F8  001F               	dw	31
    68   0013FA  001E               	dw	30
    69   0013FC  001F               	dw	31
    70   0013FE  001E               	dw	30
    71   001400  001F               	dw	31
    72   001402  001F               	dw	31
    73   001404  001E               	dw	30
    74   001406  001F               	dw	31
    75   001408  001E               	dw	30
    76   00140A  001F               	dw	31
    77   000000                     _TRISGbits	set	3975
    78   000000                     _CM1CON1bits	set	3793
    79                           
    80                           	psect	nvCOMRAM
    81   00004F                     __pnvCOMRAM:
    82                           	callstack 0
    83   00004F                     _GLOBALsecs:
    84                           	callstack 0
    85   00004F                     	ds	2
    86   000000                     _IPR0bits	set	3615
    87   000000                     _PIE0bits	set	3625
    88   000000                     _LATDbits	set	3964
    89   000000                     _TRISDbits	set	3972
    90   000000                     _TRISFbits	set	3974
    91   000000                     _TRISHbits	set	3976
    92   000000                     _LATFbits	set	3966
    93   000000                     _LATGbits	set	3967
    94   000000                     _LATHbits	set	3968
    95   000000                     _TMR0L	set	4051
    96   000000                     _TMR0H	set	4052
    97   000000                     _T0CON0bits	set	4053
    98   000000                     _T0CON1bits	set	4054
    99   000000                     _TRISBbits	set	3970
   100   000000                     _TRISAbits	set	3969
   101   000000                     _INTCONbits	set	4082
   102   000000                     _PIR0bits	set	3635
   103   000000                     _ANSELAbits	set	3730
   104   000000                     _DAC1CON0bits	set	3782
   105   000000                     _CM1CON0bits	set	3792
   106   000000                     _CM1NCHbits	set	3794
   107   000000                     _DAC1CON1bits	set	3783
   108   000000                     _ADREFbits	set	3928
   109   000000                     _LATAbits	set	3961
   110   000000                     _CM1PCHbits	set	3795
   111   000000                     _LATBbits	set	3962
   112   000000                     _ADPCH	set	3935
   113   000000                     _ADRESH	set	3940
   114   000000                     _ADCON0bits	set	3936
   115                           
   116                           ; #config settings
   117                           
   118                           	psect	cinit
   119   00136A                     __pcinit:
   120                           	callstack 0
   121   00136A                     start_initialization:
   122                           	callstack 0
   123   00136A                     __initialization:
   124                           	callstack 0
   125                           
   126                           ; Initialize objects allocated to COMRAM (24 bytes)
   127                           ; load TBLPTR registers with __pidataCOMRAM
   128   00136A  0EF4               	movlw	low __pidataCOMRAM
   129   00136C  6EF6               	movwf	tblptrl,c
   130   00136E  0E13               	movlw	high __pidataCOMRAM
   131   001370  6EF7               	movwf	tblptrh,c
   132   001372  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   133   001374  6EF8               	movwf	tblptru,c
   134   001376  EE00  F037         	lfsr	0,__pdataCOMRAM
   135   00137A  EE10 F018          	lfsr	1,24
   136   00137E                     copy_data0:
   137   00137E  0009               	tblrd		*+
   138   001380  CFF5 FFEE          	movff	tablat,postinc0
   139   001384  50E5               	movf	postdec1,w,c
   140   001386  50E1               	movf	fsr1l,w,c
   141   001388  E1FA               	bnz	copy_data0
   142   00138A                     end_of_initialization:
   143                           	callstack 0
   144   00138A                     __end_of__initialization:
   145                           	callstack 0
   146   00138A  9051               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   147   00138C  9251               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   148   00138E  0100               	movlb	0
   149   001390  EF88  F008         	goto	_main	;jump to C main() function
   150                           
   151                           	psect	dataCOMRAM
   152   000037                     __pdataCOMRAM:
   153                           	callstack 0
   154   000037                     UpdateClock@F14148:
   155                           	callstack 0
   156   000037                     	ds	24
   157                           
   158                           	psect	cstackCOMRAM
   159   000001                     __pcstackCOMRAM:
   160                           	callstack 0
   161   000001                     ?___awmod:
   162                           	callstack 0
   163   000001                     LEDarray_disp_bin@number:
   164                           	callstack 0
   165   000001                     ___awmod@dividend:
   166                           	callstack 0
   167                           
   168                           ; 2 bytes @ 0x0
   169   000001                     	ds	2
   170   000003                     ___awmod@divisor:
   171                           	callstack 0
   172                           
   173                           ; 2 bytes @ 0x2
   174   000003                     	ds	2
   175   000005                     ___awmod@counter:
   176                           	callstack 0
   177                           
   178                           ; 1 bytes @ 0x4
   179   000005                     	ds	1
   180   000006                     ___awmod@sign:
   181                           	callstack 0
   182                           
   183                           ; 1 bytes @ 0x5
   184   000006                     	ds	1
   185   000007                     UpdateClock@seconds:
   186                           	callstack 0
   187                           
   188                           ; 1 bytes @ 0x6
   189   000007                     	ds	1
   190   000008                     UpdateClock@minutes:
   191                           	callstack 0
   192                           
   193                           ; 1 bytes @ 0x7
   194   000008                     	ds	1
   195   000009                     UpdateClock@hours:
   196                           	callstack 0
   197                           
   198                           ; 1 bytes @ 0x8
   199   000009                     	ds	1
   200   00000A                     UpdateClock@days:
   201                           	callstack 0
   202                           
   203                           ; 1 bytes @ 0x9
   204   00000A                     	ds	1
   205   00000B                     UpdateClock@months:
   206                           	callstack 0
   207                           
   208                           ; 1 bytes @ 0xA
   209   00000B                     	ds	1
   210   00000C                     UpdateClock@years:
   211                           	callstack 0
   212                           
   213                           ; 1 bytes @ 0xB
   214   00000C                     	ds	1
   215   00000D                     ??_UpdateClock:
   216                           
   217                           ; 1 bytes @ 0xC
   218   00000D                     	ds	6
   219   000013                     UpdateClock@DaysInMonth:
   220                           	callstack 0
   221                           
   222                           ; 24 bytes @ 0x12
   223   000013                     	ds	24
   224   00002B                     main@clock:
   225                           	callstack 0
   226                           
   227                           ; 12 bytes @ 0x2A
   228   00002B                     	ds	12
   229                           
   230 ;;
   231 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   232 ;;
   233 ;; *************** function _main *****************
   234 ;; Defined at:
   235 ;;		line 30 in file "main.c"
   236 ;; Parameters:    Size  Location     Type
   237 ;;		None
   238 ;; Auto vars:     Size  Location     Type
   239 ;;  clock          12   42[COMRAM] struct time_structure
   240 ;; Return value:  Size  Location     Type
   241 ;;                  1    wreg      void 
   242 ;; Registers used:
   243 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   244 ;; Tracked objects:
   245 ;;		On entry : 0/0
   246 ;;		On exit  : 0/0
   247 ;;		Unchanged: 0/0
   248 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   249 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   250 ;;      Locals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   251 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   252 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   253 ;;Total ram usage:       12 bytes
   254 ;; Hardware stack levels required when called: 3
   255 ;; This function calls:
   256 ;;		_ADC_init
   257 ;;		_Interrupts_init
   258 ;;		_LEDarray_disp_bin
   259 ;;		_LEDarray_init
   260 ;;		_Timer0_init
   261 ;;		_UpdateClock
   262 ;; This function is called by:
   263 ;;		Startup code after reset
   264 ;; This function uses a non-reentrant model
   265 ;;
   266                           
   267                           	psect	text0
   268   001110                     __ptext0:
   269                           	callstack 0
   270   001110                     _main:
   271                           	callstack 28
   272   001110                     
   273                           ;main.c: 33:     LEDarray_init();
   274   001110  ECCA  F009         	call	_LEDarray_init	;wreg free
   275   001114                     
   276                           ;main.c: 34:     Timer0_init();
   277   001114  ECDD  F009         	call	_Timer0_init	;wreg free
   278   001118                     
   279                           ;main.c: 35:     Interrupts_init();
   280   001118  EC06  F00A         	call	_Interrupts_init	;wreg free
   281                           
   282                           ;main.c: 38:     ADC_init();
   283   00111C  ECED  F009         	call	_ADC_init	;wreg free
   284   001120                     
   285                           ;main.c: 42:     TRISDbits.TRISD7 = 0;
   286   001120  9E84               	bcf	132,7,c	;volatile
   287   001122                     
   288                           ;main.c: 43:     LATDbits.LATD7 = 0;
   289   001122  9E7C               	bcf	124,7,c	;volatile
   290   001124                     
   291                           ;main.c: 46:     TRISHbits.TRISH3 = 0;
   292   001124  9688               	bcf	136,3,c	;volatile
   293   001126                     
   294                           ;main.c: 47:     LATHbits.LATH3 = 0;
   295   001126  9680               	bcf	128,3,c	;volatile
   296   001128                     
   297                           ;main.c: 60:     struct time_structure clock;;main.c: 62:         GLOBALsecs = 50;
   298   001128  0E00               	movlw	0
   299   00112A  6E50               	movwf	(_GLOBALsecs+1)^0,c
   300   00112C  0E32               	movlw	50
   301   00112E  6E4F               	movwf	_GLOBALsecs^0,c
   302   001130                     
   303                           ;main.c: 63:         clock.minutes = 59;
   304   001130  0E00               	movlw	0
   305   001132  6E2E               	movwf	(main@clock+3)^0,c
   306   001134  0E3B               	movlw	59
   307   001136  6E2D               	movwf	(main@clock+2)^0,c
   308   001138                     
   309                           ;main.c: 64:         clock.hours = 22;
   310   001138  0E00               	movlw	0
   311   00113A  6E30               	movwf	(main@clock+5)^0,c
   312   00113C  0E16               	movlw	22
   313   00113E  6E2F               	movwf	(main@clock+4)^0,c
   314   001140                     
   315                           ;main.c: 65:         clock.days = 28;
   316   001140  0E00               	movlw	0
   317   001142  6E32               	movwf	(main@clock+7)^0,c
   318   001144  0E1C               	movlw	28
   319   001146  6E31               	movwf	(main@clock+6)^0,c
   320   001148                     
   321                           ;main.c: 66:         clock.months = 2;
   322   001148  0E00               	movlw	0
   323   00114A  6E34               	movwf	(main@clock+9)^0,c
   324   00114C  0E02               	movlw	2
   325   00114E  6E33               	movwf	(main@clock+8)^0,c
   326   001150                     
   327                           ;main.c: 67:         clock.years = 1904;
   328   001150  0E07               	movlw	7
   329   001152  6E36               	movwf	(main@clock+11)^0,c
   330   001154  0E70               	movlw	112
   331   001156  6E35               	movwf	(main@clock+10)^0,c
   332   001158                     
   333                           ;main.c: 86:         GLOBALsecs = clock.hours;
   334   001158  C02F  F04F         	movff	main@clock+4,_GLOBALsecs
   335   00115C  C030  F050         	movff	main@clock+5,_GLOBALsecs+1
   336   001160                     l1432:
   337                           
   338                           ;main.c: 100:         clock.seconds = GLOBALsecs;
   339   001160  C04F  F02B         	movff	_GLOBALsecs,main@clock
   340   001164  C050  F02C         	movff	_GLOBALsecs+1,main@clock+1
   341   001168                     
   342                           ;main.c: 101:         UpdateClock(&GLOBALsecs, &clock.minutes, &clock.hours, &clock.days
      +                          , &clock.months, &clock.years);
   343   001168  0E4F               	movlw	low _GLOBALsecs
   344   00116A  6E07               	movwf	UpdateClock@seconds^0,c
   345   00116C  0E2D               	movlw	low (main@clock+2)
   346   00116E  6E08               	movwf	UpdateClock@minutes^0,c
   347   001170  0E2F               	movlw	low (main@clock+4)
   348   001172  6E09               	movwf	UpdateClock@hours^0,c
   349   001174  0E31               	movlw	low (main@clock+6)
   350   001176  6E0A               	movwf	UpdateClock@days^0,c
   351   001178  0E33               	movlw	low (main@clock+8)
   352   00117A  6E0B               	movwf	UpdateClock@months^0,c
   353   00117C  0E35               	movlw	low (main@clock+10)
   354   00117E  6E0C               	movwf	UpdateClock@years^0,c
   355   001180  EC01  F007         	call	_UpdateClock	;wreg free
   356   001184                     
   357                           ;main.c: 104:         LEDarray_disp_bin(clock.hours);
   358   001184  C02F  F001         	movff	main@clock+4,LEDarray_disp_bin@number
   359   001188  C030  F002         	movff	main@clock+5,LEDarray_disp_bin@number+1
   360   00118C  ECF9  F008         	call	_LEDarray_disp_bin	;wreg free
   361   001190                     
   362                           ;main.c: 107:         if (clock.months == 3 ){
   363   001190  0E03               	movlw	3
   364   001192  1833               	xorwf	(main@clock+8)^0,w,c
   365   001194  1034               	iorwf	(main@clock+9)^0,w,c
   366   001196  A4D8               	btfss	status,2,c
   367   001198  EFD0  F008         	goto	u1041
   368   00119C  EFD2  F008         	goto	u1040
   369   0011A0                     u1041:
   370   0011A0  EFD5  F008         	goto	l28
   371   0011A4                     u1040:
   372   0011A4                     
   373                           ;main.c: 108:             LATDbits.LATD7 = 1;
   374   0011A4  8E7C               	bsf	124,7,c	;volatile
   375                           
   376                           ;main.c: 109:         }
   377   0011A6  EFD6  F008         	goto	l1442
   378   0011AA                     l28:
   379                           
   380                           ;main.c: 111:             LATDbits.LATD7 = 0;
   381   0011AA  9E7C               	bcf	124,7,c	;volatile
   382   0011AC                     l1442:
   383                           
   384                           ;main.c: 116:             if (clock.hours >= 1 && clock.hours <=5){
   385   0011AC  BE30               	btfsc	(main@clock+5)^0,7,c
   386   0011AE  EFE1  F008         	goto	u1051
   387   0011B2  5030               	movf	(main@clock+5)^0,w,c
   388   0011B4  E108               	bnz	u1050
   389   0011B6  042F               	decf	(main@clock+4)^0,w,c
   390   0011B8  A0D8               	btfss	status,0,c
   391   0011BA  EFE1  F008         	goto	u1051
   392   0011BE  EFE3  F008         	goto	u1050
   393   0011C2                     u1051:
   394   0011C2  EFF4  F008         	goto	l31
   395   0011C6                     u1050:
   396   0011C6  BE30               	btfsc	(main@clock+5)^0,7,c
   397   0011C8  EFF1  F008         	goto	u1060
   398   0011CC  5030               	movf	(main@clock+5)^0,w,c
   399   0011CE  E107               	bnz	u1061
   400   0011D0  0E06               	movlw	6
   401   0011D2  5C2F               	subwf	(main@clock+4)^0,w,c
   402   0011D4  B0D8               	btfsc	status,0,c
   403   0011D6  EFEF  F008         	goto	u1061
   404   0011DA  EFF1  F008         	goto	u1060
   405   0011DE                     u1061:
   406   0011DE  EFF4  F008         	goto	l31
   407   0011E2                     u1060:
   408   0011E2                     
   409                           ;main.c: 117:                 LATHbits.LATH3 = 0;
   410   0011E2  9680               	bcf	128,3,c	;volatile
   411                           
   412                           ;main.c: 118:             }
   413   0011E4  EFB0  F008         	goto	l1432
   414   0011E8                     l31:
   415                           
   416                           ;main.c: 120:                 LATHbits.LATH3 = 1;
   417   0011E8  8680               	bsf	128,3,c	;volatile
   418   0011EA  EFB0  F008         	goto	l1432
   419   0011EE  EF16  F000         	goto	start
   420   0011F2                     __end_of_main:
   421                           	callstack 0
   422                           
   423 ;; *************** function _UpdateClock *****************
   424 ;; Defined at:
   425 ;;		line 24 in file "clock.c"
   426 ;; Parameters:    Size  Location     Type
   427 ;;  seconds         1    6[COMRAM] PTR int 
   428 ;;		 -> GLOBALsecs(2), 
   429 ;;  minutes         1    7[COMRAM] PTR int 
   430 ;;		 -> main@clock(12), 
   431 ;;  hours           1    8[COMRAM] PTR int 
   432 ;;		 -> main@clock(12), 
   433 ;;  days            1    9[COMRAM] PTR int 
   434 ;;		 -> main@clock(12), 
   435 ;;  months          1   10[COMRAM] PTR int 
   436 ;;		 -> main@clock(12), 
   437 ;;  years           1   11[COMRAM] PTR int 
   438 ;;		 -> main@clock(12), 
   439 ;; Auto vars:     Size  Location     Type
   440 ;;  DaysInMonth    24   18[COMRAM] int [12]
   441 ;; Return value:  Size  Location     Type
   442 ;;                  1    wreg      void 
   443 ;; Registers used:
   444 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   445 ;; Tracked objects:
   446 ;;		On entry : 0/0
   447 ;;		On exit  : 0/0
   448 ;;		Unchanged: 0/0
   449 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   450 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   451 ;;      Locals:        24       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   452 ;;      Temps:          6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   453 ;;      Totals:        36       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   454 ;;Total ram usage:       36 bytes
   455 ;; Hardware stack levels used: 1
   456 ;; Hardware stack levels required when called: 2
   457 ;; This function calls:
   458 ;;		___awmod
   459 ;; This function is called by:
   460 ;;		_main
   461 ;; This function uses a non-reentrant model
   462 ;;
   463                           
   464                           	psect	text1
   465   000E02                     __ptext1:
   466                           	callstack 0
   467   000E02                     _UpdateClock:
   468                           	callstack 28
   469   000E02                     
   470                           ;clock.c: 26:     int DaysInMonth[] = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
   471   000E02  EE20  F037         	lfsr	2,UpdateClock@F14148
   472   000E06  EE10  F013         	lfsr	1,UpdateClock@DaysInMonth
   473   000E0A  0E17               	movlw	23
   474   000E0C                     u831:
   475   000E0C  CFDB FFE3          	movff	plusw2,plusw1
   476   000E10  06E8               	decf	wreg,f,c
   477   000E12  E2FC               	bc	u831
   478   000E14                     
   479                           ;clock.c: 30:             *hours = *seconds;
   480   000E14  5007               	movf	UpdateClock@seconds^0,w,c
   481   000E16  6ED9               	movwf	fsr2l,c
   482   000E18  6ADA               	clrf	fsr2h,c
   483   000E1A  5009               	movf	UpdateClock@hours^0,w,c
   484   000E1C  6EE1               	movwf	fsr1l,c
   485   000E1E  6AE2               	clrf	fsr1h,c
   486   000E20  CFDE FFE6          	movff	postinc2,postinc1
   487   000E24  CFDD FFE5          	movff	postdec2,postdec1
   488   000E28                     
   489                           ;clock.c: 31:             if (*seconds >= 24 ){
   490   000E28  5007               	movf	UpdateClock@seconds^0,w,c
   491   000E2A  6ED9               	movwf	fsr2l,c
   492   000E2C  6ADA               	clrf	fsr2h,c
   493   000E2E  0E01               	movlw	1
   494   000E30  BEDB               	btfsc	plusw2,7,c
   495   000E32  EF25  F007         	goto	u841
   496   000E36  0E01               	movlw	1
   497   000E38  50DB               	movf	plusw2,w,c
   498   000E3A  E109               	bnz	u840
   499   000E3C  0E18               	movlw	24
   500   000E3E  5CDE               	subwf	postinc2,w,c
   501   000E40  A0D8               	btfss	status,0,c
   502   000E42  EF25  F007         	goto	u841
   503   000E46  EF27  F007         	goto	u840
   504   000E4A                     u841:
   505   000E4A  EF43  F007         	goto	l1340
   506   000E4E                     u840:
   507   000E4E                     
   508                           ;clock.c: 32:                 *seconds = 0;
   509   000E4E  5007               	movf	UpdateClock@seconds^0,w,c
   510   000E50  6ED9               	movwf	fsr2l,c
   511   000E52  6ADA               	clrf	fsr2h,c
   512   000E54  6ADE               	clrf	postinc2,c
   513   000E56  6ADD               	clrf	postdec2,c
   514                           
   515                           ;clock.c: 33:                 *hours = 0;
   516   000E58  5009               	movf	UpdateClock@hours^0,w,c
   517   000E5A  6ED9               	movwf	fsr2l,c
   518   000E5C  6ADA               	clrf	fsr2h,c
   519   000E5E  6ADE               	clrf	postinc2,c
   520   000E60  6ADD               	clrf	postdec2,c
   521   000E62                     
   522                           ;clock.c: 34:                 *days = *days + 1;
   523   000E62  500A               	movf	UpdateClock@days^0,w,c
   524   000E64  6ED9               	movwf	fsr2l,c
   525   000E66  6ADA               	clrf	fsr2h,c
   526   000E68  CFDE F00D          	movff	postinc2,??_UpdateClock
   527   000E6C  CFDD F00E          	movff	postdec2,??_UpdateClock+1
   528   000E70  0E01               	movlw	1
   529   000E72  260D               	addwf	??_UpdateClock^0,f,c
   530   000E74  0E00               	movlw	0
   531   000E76  220E               	addwfc	(??_UpdateClock+1)^0,f,c
   532   000E78  500A               	movf	UpdateClock@days^0,w,c
   533   000E7A  6ED9               	movwf	fsr2l,c
   534   000E7C  6ADA               	clrf	fsr2h,c
   535   000E7E  C00D  FFDE         	movff	??_UpdateClock,postinc2
   536   000E82  C00E  FFDD         	movff	??_UpdateClock+1,postdec2
   537   000E86                     l1340:
   538                           
   539                           ;clock.c: 37:     if (*seconds >= 60 ){
   540   000E86  5007               	movf	UpdateClock@seconds^0,w,c
   541   000E88  6ED9               	movwf	fsr2l,c
   542   000E8A  6ADA               	clrf	fsr2h,c
   543   000E8C  0E01               	movlw	1
   544   000E8E  BEDB               	btfsc	plusw2,7,c
   545   000E90  EF54  F007         	goto	u851
   546   000E94  0E01               	movlw	1
   547   000E96  50DB               	movf	plusw2,w,c
   548   000E98  E109               	bnz	u850
   549   000E9A  0E3C               	movlw	60
   550   000E9C  5CDE               	subwf	postinc2,w,c
   551   000E9E  A0D8               	btfss	status,0,c
   552   000EA0  EF54  F007         	goto	u851
   553   000EA4  EF56  F007         	goto	u850
   554   000EA8                     u851:
   555   000EA8  EF6D  F007         	goto	l1346
   556   000EAC                     u850:
   557   000EAC                     
   558                           ;clock.c: 38:         *seconds = 0;
   559   000EAC  5007               	movf	UpdateClock@seconds^0,w,c
   560   000EAE  6ED9               	movwf	fsr2l,c
   561   000EB0  6ADA               	clrf	fsr2h,c
   562   000EB2  6ADE               	clrf	postinc2,c
   563   000EB4  6ADD               	clrf	postdec2,c
   564   000EB6                     
   565                           ;clock.c: 39:         *minutes = *minutes + 1;
   566   000EB6  5008               	movf	UpdateClock@minutes^0,w,c
   567   000EB8  6ED9               	movwf	fsr2l,c
   568   000EBA  6ADA               	clrf	fsr2h,c
   569   000EBC  CFDE F00D          	movff	postinc2,??_UpdateClock
   570   000EC0  CFDD F00E          	movff	postdec2,??_UpdateClock+1
   571   000EC4  0E01               	movlw	1
   572   000EC6  260D               	addwf	??_UpdateClock^0,f,c
   573   000EC8  0E00               	movlw	0
   574   000ECA  220E               	addwfc	(??_UpdateClock+1)^0,f,c
   575   000ECC  5008               	movf	UpdateClock@minutes^0,w,c
   576   000ECE  6ED9               	movwf	fsr2l,c
   577   000ED0  6ADA               	clrf	fsr2h,c
   578   000ED2  C00D  FFDE         	movff	??_UpdateClock,postinc2
   579   000ED6  C00E  FFDD         	movff	??_UpdateClock+1,postdec2
   580   000EDA                     l1346:
   581                           
   582                           ;clock.c: 42:     if (*minutes >= 60){
   583   000EDA  5008               	movf	UpdateClock@minutes^0,w,c
   584   000EDC  6ED9               	movwf	fsr2l,c
   585   000EDE  6ADA               	clrf	fsr2h,c
   586   000EE0  0E01               	movlw	1
   587   000EE2  BEDB               	btfsc	plusw2,7,c
   588   000EE4  EF7E  F007         	goto	u861
   589   000EE8  0E01               	movlw	1
   590   000EEA  50DB               	movf	plusw2,w,c
   591   000EEC  E109               	bnz	u860
   592   000EEE  0E3C               	movlw	60
   593   000EF0  5CDE               	subwf	postinc2,w,c
   594   000EF2  A0D8               	btfss	status,0,c
   595   000EF4  EF7E  F007         	goto	u861
   596   000EF8  EF80  F007         	goto	u860
   597   000EFC                     u861:
   598   000EFC  EF97  F007         	goto	l1352
   599   000F00                     u860:
   600   000F00                     
   601                           ;clock.c: 43:         *minutes = 0;
   602   000F00  5008               	movf	UpdateClock@minutes^0,w,c
   603   000F02  6ED9               	movwf	fsr2l,c
   604   000F04  6ADA               	clrf	fsr2h,c
   605   000F06  6ADE               	clrf	postinc2,c
   606   000F08  6ADD               	clrf	postdec2,c
   607   000F0A                     
   608                           ;clock.c: 44:         *hours = *hours + 1;
   609   000F0A  5009               	movf	UpdateClock@hours^0,w,c
   610   000F0C  6ED9               	movwf	fsr2l,c
   611   000F0E  6ADA               	clrf	fsr2h,c
   612   000F10  CFDE F00D          	movff	postinc2,??_UpdateClock
   613   000F14  CFDD F00E          	movff	postdec2,??_UpdateClock+1
   614   000F18  0E01               	movlw	1
   615   000F1A  260D               	addwf	??_UpdateClock^0,f,c
   616   000F1C  0E00               	movlw	0
   617   000F1E  220E               	addwfc	(??_UpdateClock+1)^0,f,c
   618   000F20  5009               	movf	UpdateClock@hours^0,w,c
   619   000F22  6ED9               	movwf	fsr2l,c
   620   000F24  6ADA               	clrf	fsr2h,c
   621   000F26  C00D  FFDE         	movff	??_UpdateClock,postinc2
   622   000F2A  C00E  FFDD         	movff	??_UpdateClock+1,postdec2
   623   000F2E                     l1352:
   624                           
   625                           ;clock.c: 47:     if (*hours >= 24){
   626   000F2E  5009               	movf	UpdateClock@hours^0,w,c
   627   000F30  6ED9               	movwf	fsr2l,c
   628   000F32  6ADA               	clrf	fsr2h,c
   629   000F34  0E01               	movlw	1
   630   000F36  BEDB               	btfsc	plusw2,7,c
   631   000F38  EFA8  F007         	goto	u871
   632   000F3C  0E01               	movlw	1
   633   000F3E  50DB               	movf	plusw2,w,c
   634   000F40  E109               	bnz	u870
   635   000F42  0E18               	movlw	24
   636   000F44  5CDE               	subwf	postinc2,w,c
   637   000F46  A0D8               	btfss	status,0,c
   638   000F48  EFA8  F007         	goto	u871
   639   000F4C  EFAA  F007         	goto	u870
   640   000F50                     u871:
   641   000F50  EFC1  F007         	goto	l1358
   642   000F54                     u870:
   643   000F54                     
   644                           ;clock.c: 48:         *hours = 0;
   645   000F54  5009               	movf	UpdateClock@hours^0,w,c
   646   000F56  6ED9               	movwf	fsr2l,c
   647   000F58  6ADA               	clrf	fsr2h,c
   648   000F5A  6ADE               	clrf	postinc2,c
   649   000F5C  6ADD               	clrf	postdec2,c
   650   000F5E                     
   651                           ;clock.c: 49:         *days = *days + 1;
   652   000F5E  500A               	movf	UpdateClock@days^0,w,c
   653   000F60  6ED9               	movwf	fsr2l,c
   654   000F62  6ADA               	clrf	fsr2h,c
   655   000F64  CFDE F00D          	movff	postinc2,??_UpdateClock
   656   000F68  CFDD F00E          	movff	postdec2,??_UpdateClock+1
   657   000F6C  0E01               	movlw	1
   658   000F6E  260D               	addwf	??_UpdateClock^0,f,c
   659   000F70  0E00               	movlw	0
   660   000F72  220E               	addwfc	(??_UpdateClock+1)^0,f,c
   661   000F74  500A               	movf	UpdateClock@days^0,w,c
   662   000F76  6ED9               	movwf	fsr2l,c
   663   000F78  6ADA               	clrf	fsr2h,c
   664   000F7A  C00D  FFDE         	movff	??_UpdateClock,postinc2
   665   000F7E  C00E  FFDD         	movff	??_UpdateClock+1,postdec2
   666   000F82                     l1358:
   667                           
   668                           ;clock.c: 52:     if ((*years)%4 == 0 && *months == 2){
   669   000F82  500C               	movf	UpdateClock@years^0,w,c
   670   000F84  6ED9               	movwf	fsr2l,c
   671   000F86  6ADA               	clrf	fsr2h,c
   672   000F88  CFDE F00D          	movff	postinc2,??_UpdateClock
   673   000F8C  CFDD F00E          	movff	postdec2,??_UpdateClock+1
   674   000F90  0E03               	movlw	3
   675   000F92  160D               	andwf	??_UpdateClock^0,f,c
   676   000F94  0E00               	movlw	0
   677   000F96  160E               	andwf	(??_UpdateClock+1)^0,f,c
   678   000F98  500D               	movf	??_UpdateClock^0,w,c
   679   000F9A  100E               	iorwf	(??_UpdateClock+1)^0,w,c
   680   000F9C  A4D8               	btfss	status,2,c
   681   000F9E  EFD3  F007         	goto	u881
   682   000FA2  EFD5  F007         	goto	u880
   683   000FA6                     u881:
   684   000FA6  EFE6  F007         	goto	l1364
   685   000FAA                     u880:
   686   000FAA  500B               	movf	UpdateClock@months^0,w,c
   687   000FAC  6ED9               	movwf	fsr2l,c
   688   000FAE  6ADA               	clrf	fsr2h,c
   689   000FB0  0E02               	movlw	2
   690   000FB2  18DE               	xorwf	postinc2,w,c
   691   000FB4  10DE               	iorwf	postinc2,w,c
   692   000FB6  A4D8               	btfss	status,2,c
   693   000FB8  EFE0  F007         	goto	u891
   694   000FBC  EFE2  F007         	goto	u890
   695   000FC0                     u891:
   696   000FC0  EFE6  F007         	goto	l1364
   697   000FC4                     u890:
   698   000FC4                     
   699                           ;clock.c: 53:        DaysInMonth[1] = 29;
   700   000FC4  0E00               	movlw	0
   701   000FC6  6E16               	movwf	(UpdateClock@DaysInMonth+3)^0,c
   702   000FC8  0E1D               	movlw	29
   703   000FCA  6E15               	movwf	(UpdateClock@DaysInMonth+2)^0,c
   704   000FCC                     l1364:
   705                           
   706                           ;clock.c: 56:     if (*years%100 == 0 && *months == 2){
   707   000FCC  500C               	movf	UpdateClock@years^0,w,c
   708   000FCE  6ED9               	movwf	fsr2l,c
   709   000FD0  6ADA               	clrf	fsr2h,c
   710   000FD2  CFDE F001          	movff	postinc2,___awmod@dividend
   711   000FD6  CFDD F002          	movff	postdec2,___awmod@dividend+1
   712   000FDA  0E00               	movlw	0
   713   000FDC  6E04               	movwf	(___awmod@divisor+1)^0,c
   714   000FDE  0E64               	movlw	100
   715   000FE0  6E03               	movwf	___awmod@divisor^0,c
   716   000FE2  EC5D  F009         	call	___awmod	;wreg free
   717   000FE6  5001               	movf	?___awmod^0,w,c
   718   000FE8  1002               	iorwf	(?___awmod+1)^0,w,c
   719   000FEA  A4D8               	btfss	status,2,c
   720   000FEC  EFFA  F007         	goto	u901
   721   000FF0  EFFC  F007         	goto	u900
   722   000FF4                     u901:
   723   000FF4  EF23  F008         	goto	l1372
   724   000FF8                     u900:
   725   000FF8  500B               	movf	UpdateClock@months^0,w,c
   726   000FFA  6ED9               	movwf	fsr2l,c
   727   000FFC  6ADA               	clrf	fsr2h,c
   728   000FFE  0E02               	movlw	2
   729   001000  18DE               	xorwf	postinc2,w,c
   730   001002  10DE               	iorwf	postinc2,w,c
   731   001004  A4D8               	btfss	status,2,c
   732   001006  EF07  F008         	goto	u911
   733   00100A  EF09  F008         	goto	u910
   734   00100E                     u911:
   735   00100E  EF23  F008         	goto	l1372
   736   001012                     u910:
   737   001012                     
   738                           ;clock.c: 57:         if(*years%400 != 0){
   739   001012  500C               	movf	UpdateClock@years^0,w,c
   740   001014  6ED9               	movwf	fsr2l,c
   741   001016  6ADA               	clrf	fsr2h,c
   742   001018  CFDE F001          	movff	postinc2,___awmod@dividend
   743   00101C  CFDD F002          	movff	postdec2,___awmod@dividend+1
   744   001020  0E01               	movlw	1
   745   001022  6E04               	movwf	(___awmod@divisor+1)^0,c
   746   001024  0E90               	movlw	144
   747   001026  6E03               	movwf	___awmod@divisor^0,c
   748   001028  EC5D  F009         	call	___awmod	;wreg free
   749   00102C  5001               	movf	?___awmod^0,w,c
   750   00102E  1002               	iorwf	(?___awmod+1)^0,w,c
   751   001030  B4D8               	btfsc	status,2,c
   752   001032  EF1D  F008         	goto	u921
   753   001036  EF1F  F008         	goto	u920
   754   00103A                     u921:
   755   00103A  EF23  F008         	goto	l1372
   756   00103E                     u920:
   757   00103E                     
   758                           ;clock.c: 58:             DaysInMonth[1] = 28;
   759   00103E  0E00               	movlw	0
   760   001040  6E16               	movwf	(UpdateClock@DaysInMonth+3)^0,c
   761   001042  0E1C               	movlw	28
   762   001044  6E15               	movwf	(UpdateClock@DaysInMonth+2)^0,c
   763   001046                     l1372:
   764                           
   765                           ;clock.c: 62:     if (*days > (DaysInMonth[*months-1] ) ) {
   766   001046  500A               	movf	UpdateClock@days^0,w,c
   767   001048  6ED9               	movwf	fsr2l,c
   768   00104A  6ADA               	clrf	fsr2h,c
   769   00104C  500B               	movf	UpdateClock@months^0,w,c
   770   00104E  6EE1               	movwf	fsr1l,c
   771   001050  6AE2               	clrf	fsr1h,c
   772   001052  50E7               	movf	indf1,w,c
   773   001054  0D02               	mullw	2
   774   001056  CFF3 F00F          	movff	prodl,??_UpdateClock+2
   775   00105A  0EFE               	movlw	254
   776   00105C  260F               	addwf	(??_UpdateClock+2)^0,f,c
   777   00105E  500F               	movf	(??_UpdateClock+2)^0,w,c
   778   001060  0F13               	addlw	low UpdateClock@DaysInMonth
   779   001062  6EE1               	movwf	fsr1l,c
   780   001064  6AE2               	clrf	fsr1h,c
   781   001066  50DE               	movf	postinc2,w,c
   782   001068  5CE6               	subwf	postinc1,w,c
   783   00106A  50E6               	movf	postinc1,w,c
   784   00106C  0A80               	xorlw	128
   785   00106E  6E12               	movwf	(??_UpdateClock+5)^0,c
   786   001070  50DE               	movf	postinc2,w,c
   787   001072  0A80               	xorlw	128
   788   001074  5812               	subwfb	(??_UpdateClock+5)^0,w,c
   789   001076  B0D8               	btfsc	status,0,c
   790   001078  EF40  F008         	goto	u931
   791   00107C  EF42  F008         	goto	u930
   792   001080                     u931:
   793   001080  EF87  F008         	goto	l246
   794   001084                     u930:
   795   001084                     
   796                           ;clock.c: 63:         *days = 1;
   797   001084  500A               	movf	UpdateClock@days^0,w,c
   798   001086  6ED9               	movwf	fsr2l,c
   799   001088  6ADA               	clrf	fsr2h,c
   800   00108A  0E01               	movlw	1
   801   00108C  6EDE               	movwf	postinc2,c
   802   00108E  0E00               	movlw	0
   803   001090  6EDD               	movwf	postdec2,c
   804   001092                     
   805                           ;clock.c: 64:         *months = *months + 1 ;
   806   001092  500B               	movf	UpdateClock@months^0,w,c
   807   001094  6ED9               	movwf	fsr2l,c
   808   001096  6ADA               	clrf	fsr2h,c
   809   001098  CFDE F00D          	movff	postinc2,??_UpdateClock
   810   00109C  CFDD F00E          	movff	postdec2,??_UpdateClock+1
   811   0010A0  0E01               	movlw	1
   812   0010A2  260D               	addwf	??_UpdateClock^0,f,c
   813   0010A4  0E00               	movlw	0
   814   0010A6  220E               	addwfc	(??_UpdateClock+1)^0,f,c
   815   0010A8  500B               	movf	UpdateClock@months^0,w,c
   816   0010AA  6ED9               	movwf	fsr2l,c
   817   0010AC  6ADA               	clrf	fsr2h,c
   818   0010AE  C00D  FFDE         	movff	??_UpdateClock,postinc2
   819   0010B2  C00E  FFDD         	movff	??_UpdateClock+1,postdec2
   820   0010B6                     
   821                           ;clock.c: 66:         if (*months >= 12+1) {
   822   0010B6  500B               	movf	UpdateClock@months^0,w,c
   823   0010B8  6ED9               	movwf	fsr2l,c
   824   0010BA  6ADA               	clrf	fsr2h,c
   825   0010BC  0E01               	movlw	1
   826   0010BE  BEDB               	btfsc	plusw2,7,c
   827   0010C0  EF6C  F008         	goto	u941
   828   0010C4  0E01               	movlw	1
   829   0010C6  50DB               	movf	plusw2,w,c
   830   0010C8  E109               	bnz	u940
   831   0010CA  0E0D               	movlw	13
   832   0010CC  5CDE               	subwf	postinc2,w,c
   833   0010CE  A0D8               	btfss	status,0,c
   834   0010D0  EF6C  F008         	goto	u941
   835   0010D4  EF6E  F008         	goto	u940
   836   0010D8                     u941:
   837   0010D8  EF87  F008         	goto	l246
   838   0010DC                     u940:
   839   0010DC                     
   840                           ;clock.c: 67:             *months = 1;
   841   0010DC  500B               	movf	UpdateClock@months^0,w,c
   842   0010DE  6ED9               	movwf	fsr2l,c
   843   0010E0  6ADA               	clrf	fsr2h,c
   844   0010E2  0E01               	movlw	1
   845   0010E4  6EDE               	movwf	postinc2,c
   846   0010E6  0E00               	movlw	0
   847   0010E8  6EDD               	movwf	postdec2,c
   848   0010EA                     
   849                           ;clock.c: 68:             *years = *years + 1;
   850   0010EA  500C               	movf	UpdateClock@years^0,w,c
   851   0010EC  6ED9               	movwf	fsr2l,c
   852   0010EE  6ADA               	clrf	fsr2h,c
   853   0010F0  CFDE F00D          	movff	postinc2,??_UpdateClock
   854   0010F4  CFDD F00E          	movff	postdec2,??_UpdateClock+1
   855   0010F8  0E01               	movlw	1
   856   0010FA  260D               	addwf	??_UpdateClock^0,f,c
   857   0010FC  0E00               	movlw	0
   858   0010FE  220E               	addwfc	(??_UpdateClock+1)^0,f,c
   859   001100  500C               	movf	UpdateClock@years^0,w,c
   860   001102  6ED9               	movwf	fsr2l,c
   861   001104  6ADA               	clrf	fsr2h,c
   862   001106  C00D  FFDE         	movff	??_UpdateClock,postinc2
   863   00110A  C00E  FFDD         	movff	??_UpdateClock+1,postdec2
   864   00110E                     l246:
   865   00110E  0012               	return		;funcret
   866   001110                     __end_of_UpdateClock:
   867                           	callstack 0
   868                           
   869 ;; *************** function ___awmod *****************
   870 ;; Defined at:
   871 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\awmod.c"
   872 ;; Parameters:    Size  Location     Type
   873 ;;  dividend        2    0[COMRAM] int 
   874 ;;  divisor         2    2[COMRAM] int 
   875 ;; Auto vars:     Size  Location     Type
   876 ;;  sign            1    5[COMRAM] unsigned char 
   877 ;;  counter         1    4[COMRAM] unsigned char 
   878 ;; Return value:  Size  Location     Type
   879 ;;                  2    0[COMRAM] int 
   880 ;; Registers used:
   881 ;;		wreg, status,2, status,0
   882 ;; Tracked objects:
   883 ;;		On entry : 0/0
   884 ;;		On exit  : 0/0
   885 ;;		Unchanged: 0/0
   886 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   887 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   888 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   889 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   890 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   891 ;;Total ram usage:        6 bytes
   892 ;; Hardware stack levels used: 1
   893 ;; Hardware stack levels required when called: 1
   894 ;; This function calls:
   895 ;;		Nothing
   896 ;; This function is called by:
   897 ;;		_UpdateClock
   898 ;; This function uses a non-reentrant model
   899 ;;
   900                           
   901                           	psect	text2
   902   0012BA                     __ptext2:
   903                           	callstack 0
   904   0012BA                     ___awmod:
   905                           	callstack 28
   906   0012BA  0E00               	movlw	0
   907   0012BC  6E06               	movwf	___awmod@sign^0,c
   908   0012BE  BE02               	btfsc	(___awmod@dividend+1)^0,7,c
   909   0012C0  EF66  F009         	goto	u770
   910   0012C4  EF64  F009         	goto	u771
   911   0012C8                     u771:
   912   0012C8  EF6C  F009         	goto	l1302
   913   0012CC                     u770:
   914   0012CC  6C01               	negf	___awmod@dividend^0,c
   915   0012CE  1E02               	comf	(___awmod@dividend+1)^0,f,c
   916   0012D0  B0D8               	btfsc	status,0,c
   917   0012D2  2A02               	incf	(___awmod@dividend+1)^0,f,c
   918   0012D4  0E01               	movlw	1
   919   0012D6  6E06               	movwf	___awmod@sign^0,c
   920   0012D8                     l1302:
   921   0012D8  BE04               	btfsc	(___awmod@divisor+1)^0,7,c
   922   0012DA  EF73  F009         	goto	u780
   923   0012DE  EF71  F009         	goto	u781
   924   0012E2                     u781:
   925   0012E2  EF77  F009         	goto	l1306
   926   0012E6                     u780:
   927   0012E6  6C03               	negf	___awmod@divisor^0,c
   928   0012E8  1E04               	comf	(___awmod@divisor+1)^0,f,c
   929   0012EA  B0D8               	btfsc	status,0,c
   930   0012EC  2A04               	incf	(___awmod@divisor+1)^0,f,c
   931   0012EE                     l1306:
   932   0012EE  5003               	movf	___awmod@divisor^0,w,c
   933   0012F0  1004               	iorwf	(___awmod@divisor+1)^0,w,c
   934   0012F2  B4D8               	btfsc	status,2,c
   935   0012F4  EF7E  F009         	goto	u791
   936   0012F8  EF80  F009         	goto	u790
   937   0012FC                     u791:
   938   0012FC  EFA4  F009         	goto	l1322
   939   001300                     u790:
   940   001300  0E01               	movlw	1
   941   001302  6E05               	movwf	___awmod@counter^0,c
   942   001304  EF88  F009         	goto	l1312
   943   001308                     l1310:
   944   001308  90D8               	bcf	status,0,c
   945   00130A  3603               	rlcf	___awmod@divisor^0,f,c
   946   00130C  3604               	rlcf	(___awmod@divisor+1)^0,f,c
   947   00130E  2A05               	incf	___awmod@counter^0,f,c
   948   001310                     l1312:
   949   001310  AE04               	btfss	(___awmod@divisor+1)^0,7,c
   950   001312  EF8D  F009         	goto	u801
   951   001316  EF8F  F009         	goto	u800
   952   00131A                     u801:
   953   00131A  EF84  F009         	goto	l1310
   954   00131E                     u800:
   955   00131E                     l1314:
   956   00131E  5003               	movf	___awmod@divisor^0,w,c
   957   001320  5C01               	subwf	___awmod@dividend^0,w,c
   958   001322  5004               	movf	(___awmod@divisor+1)^0,w,c
   959   001324  5802               	subwfb	(___awmod@dividend+1)^0,w,c
   960   001326  A0D8               	btfss	status,0,c
   961   001328  EF98  F009         	goto	u811
   962   00132C  EF9A  F009         	goto	u810
   963   001330                     u811:
   964   001330  EF9E  F009         	goto	l1318
   965   001334                     u810:
   966   001334  5003               	movf	___awmod@divisor^0,w,c
   967   001336  5E01               	subwf	___awmod@dividend^0,f,c
   968   001338  5004               	movf	(___awmod@divisor+1)^0,w,c
   969   00133A  5A02               	subwfb	(___awmod@dividend+1)^0,f,c
   970   00133C                     l1318:
   971   00133C  90D8               	bcf	status,0,c
   972   00133E  3204               	rrcf	(___awmod@divisor+1)^0,f,c
   973   001340  3203               	rrcf	___awmod@divisor^0,f,c
   974   001342  2E05               	decfsz	___awmod@counter^0,f,c
   975   001344  EF8F  F009         	goto	l1314
   976   001348                     l1322:
   977   001348  5006               	movf	___awmod@sign^0,w,c
   978   00134A  B4D8               	btfsc	status,2,c
   979   00134C  EFAA  F009         	goto	u821
   980   001350  EFAC  F009         	goto	u820
   981   001354                     u821:
   982   001354  EFB0  F009         	goto	l1326
   983   001358                     u820:
   984   001358  6C01               	negf	___awmod@dividend^0,c
   985   00135A  1E02               	comf	(___awmod@dividend+1)^0,f,c
   986   00135C  B0D8               	btfsc	status,0,c
   987   00135E  2A02               	incf	(___awmod@dividend+1)^0,f,c
   988   001360                     l1326:
   989   001360  C001  F001         	movff	___awmod@dividend,?___awmod
   990   001364  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
   991   001368  0012               	return		;funcret
   992   00136A                     __end_of___awmod:
   993                           	callstack 0
   994                           
   995 ;; *************** function _Timer0_init *****************
   996 ;; Defined at:
   997 ;;		line 8 in file "timers.c"
   998 ;; Parameters:    Size  Location     Type
   999 ;;		None
  1000 ;; Auto vars:     Size  Location     Type
  1001 ;;		None
  1002 ;; Return value:  Size  Location     Type
  1003 ;;                  1    wreg      void 
  1004 ;; Registers used:
  1005 ;;		wreg, status,2
  1006 ;; Tracked objects:
  1007 ;;		On entry : 0/0
  1008 ;;		On exit  : 0/0
  1009 ;;		Unchanged: 0/0
  1010 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1011 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1012 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1013 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1014 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1015 ;;Total ram usage:        0 bytes
  1016 ;; Hardware stack levels used: 1
  1017 ;; Hardware stack levels required when called: 1
  1018 ;; This function calls:
  1019 ;;		Nothing
  1020 ;; This function is called by:
  1021 ;;		_main
  1022 ;; This function uses a non-reentrant model
  1023 ;;
  1024                           
  1025                           	psect	text3
  1026   0013BA                     __ptext3:
  1027                           	callstack 0
  1028   0013BA                     _Timer0_init:
  1029                           	callstack 29
  1030   0013BA                     
  1031                           ;timers.c: 10:     T0CON1bits.T0CS=0b010;
  1032   0013BA  50D6               	movf	214,w,c	;volatile
  1033   0013BC  0B1F               	andlw	-225
  1034   0013BE  0940               	iorlw	64
  1035   0013C0  6ED6               	movwf	214,c	;volatile
  1036   0013C2                     
  1037                           ;timers.c: 11:     T0CON1bits.T0ASYNC=1;
  1038   0013C2  88D6               	bsf	214,4,c	;volatile
  1039                           
  1040                           ;timers.c: 13:     T0CON1bits.T0CKPS=0b1000;
  1041   0013C4  50D6               	movf	214,w,c	;volatile
  1042   0013C6  0BF0               	andlw	-16
  1043   0013C8  0908               	iorlw	8
  1044   0013CA  6ED6               	movwf	214,c	;volatile
  1045   0013CC                     
  1046                           ;timers.c: 15:     T0CON0bits.T016BIT=1;
  1047   0013CC  88D5               	bsf	213,4,c	;volatile
  1048                           
  1049                           ;timers.c: 18:     TMR0H = 0b00001011;
  1050   0013CE  0E0B               	movlw	11
  1051   0013D0  6ED4               	movwf	212,c	;volatile
  1052                           
  1053                           ;timers.c: 19:     TMR0L = 0b11011100;
  1054   0013D2  0EDC               	movlw	220
  1055   0013D4  6ED3               	movwf	211,c	;volatile
  1056   0013D6                     
  1057                           ;timers.c: 35:     T0CON0bits.T0EN=1;
  1058   0013D6  8ED5               	bsf	213,7,c	;volatile
  1059   0013D8  0012               	return		;funcret
  1060   0013DA                     __end_of_Timer0_init:
  1061                           	callstack 0
  1062                           
  1063 ;; *************** function _LEDarray_init *****************
  1064 ;; Defined at:
  1065 ;;		line 8 in file "LEDarray.c"
  1066 ;; Parameters:    Size  Location     Type
  1067 ;;		None
  1068 ;; Auto vars:     Size  Location     Type
  1069 ;;		None
  1070 ;; Return value:  Size  Location     Type
  1071 ;;                  1    wreg      void 
  1072 ;; Registers used:
  1073 ;;		None
  1074 ;; Tracked objects:
  1075 ;;		On entry : 0/0
  1076 ;;		On exit  : 0/0
  1077 ;;		Unchanged: 0/0
  1078 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1079 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1080 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1081 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1082 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1083 ;;Total ram usage:        0 bytes
  1084 ;; Hardware stack levels used: 1
  1085 ;; Hardware stack levels required when called: 1
  1086 ;; This function calls:
  1087 ;;		Nothing
  1088 ;; This function is called by:
  1089 ;;		_main
  1090 ;; This function uses a non-reentrant model
  1091 ;;
  1092                           
  1093                           	psect	text4
  1094   001394                     __ptext4:
  1095                           	callstack 0
  1096   001394                     _LEDarray_init:
  1097                           	callstack 29
  1098   001394                     
  1099                           ;LEDarray.c: 16:     TRISGbits.TRISG0 = 0;
  1100   001394  9087               	bcf	135,0,c	;volatile
  1101                           
  1102                           ;LEDarray.c: 17:     LATGbits.LATG0 = 0;
  1103   001396  907F               	bcf	127,0,c	;volatile
  1104                           
  1105                           ;LEDarray.c: 19:     TRISGbits.TRISG1 = 0;
  1106   001398  9287               	bcf	135,1,c	;volatile
  1107                           
  1108                           ;LEDarray.c: 20:     LATGbits.LATG1 = 0;
  1109   00139A  927F               	bcf	127,1,c	;volatile
  1110                           
  1111                           ;LEDarray.c: 22:     TRISAbits.TRISA2 = 0;
  1112   00139C  9481               	bcf	129,2,c	;volatile
  1113                           
  1114                           ;LEDarray.c: 23:     LATAbits.LATA2 = 0;
  1115   00139E  9479               	bcf	121,2,c	;volatile
  1116                           
  1117                           ;LEDarray.c: 25:     TRISFbits.TRISF6 = 0;
  1118   0013A0  9C86               	bcf	134,6,c	;volatile
  1119                           
  1120                           ;LEDarray.c: 26:     LATFbits.LATF6 = 0;
  1121   0013A2  9C7E               	bcf	126,6,c	;volatile
  1122                           
  1123                           ;LEDarray.c: 28:     TRISAbits.TRISA4 = 0;
  1124   0013A4  9881               	bcf	129,4,c	;volatile
  1125                           
  1126                           ;LEDarray.c: 29:     LATAbits.LATA4 = 0;
  1127   0013A6  9879               	bcf	121,4,c	;volatile
  1128                           
  1129                           ;LEDarray.c: 31:     TRISAbits.TRISA5 = 0;
  1130   0013A8  9A81               	bcf	129,5,c	;volatile
  1131                           
  1132                           ;LEDarray.c: 32:     LATAbits.LATA5 = 0;
  1133   0013AA  9A79               	bcf	121,5,c	;volatile
  1134                           
  1135                           ;LEDarray.c: 34:     TRISFbits.TRISF0 = 0;
  1136   0013AC  9086               	bcf	134,0,c	;volatile
  1137                           
  1138                           ;LEDarray.c: 35:     LATFbits.LATF0 = 0;
  1139   0013AE  907E               	bcf	126,0,c	;volatile
  1140                           
  1141                           ;LEDarray.c: 37:     TRISBbits.TRISB0 = 0;
  1142   0013B0  9082               	bcf	130,0,c	;volatile
  1143                           
  1144                           ;LEDarray.c: 38:     LATBbits.LATB0 = 0;
  1145   0013B2  907A               	bcf	122,0,c	;volatile
  1146                           
  1147                           ;LEDarray.c: 40:     TRISBbits.TRISB1 = 0;
  1148   0013B4  9282               	bcf	130,1,c	;volatile
  1149                           
  1150                           ;LEDarray.c: 41:     LATBbits.LATB1 = 0;
  1151   0013B6  927A               	bcf	122,1,c	;volatile
  1152   0013B8  0012               	return		;funcret
  1153   0013BA                     __end_of_LEDarray_init:
  1154                           	callstack 0
  1155                           
  1156 ;; *************** function _LEDarray_disp_bin *****************
  1157 ;; Defined at:
  1158 ;;		line 49 in file "LEDarray.c"
  1159 ;; Parameters:    Size  Location     Type
  1160 ;;  number          2    0[COMRAM] unsigned int 
  1161 ;; Auto vars:     Size  Location     Type
  1162 ;;		None
  1163 ;; Return value:  Size  Location     Type
  1164 ;;                  1    wreg      void 
  1165 ;; Registers used:
  1166 ;;		None
  1167 ;; Tracked objects:
  1168 ;;		On entry : 0/0
  1169 ;;		On exit  : 0/0
  1170 ;;		Unchanged: 0/0
  1171 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1172 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1173 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1174 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1175 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1176 ;;Total ram usage:        2 bytes
  1177 ;; Hardware stack levels used: 1
  1178 ;; Hardware stack levels required when called: 1
  1179 ;; This function calls:
  1180 ;;		Nothing
  1181 ;; This function is called by:
  1182 ;;		_main
  1183 ;; This function uses a non-reentrant model
  1184 ;;
  1185                           
  1186                           	psect	text5
  1187   0011F2                     __ptext5:
  1188                           	callstack 0
  1189   0011F2                     _LEDarray_disp_bin:
  1190                           	callstack 29
  1191   0011F2                     
  1192                           ;LEDarray.c: 49: void LEDarray_disp_bin(unsigned int number);LEDarray.c: 50: {;LEDarray.
      +                          c: 53:     if (number & 0b000000001){ LATGbits.LATG0 = 1 ; }
  1193   0011F2  A001               	btfss	LEDarray_disp_bin@number^0,0,c
  1194   0011F4  EFFE  F008         	goto	u951
  1195   0011F8  EF00  F009         	goto	u950
  1196   0011FC                     u951:
  1197   0011FC  EF03  F009         	goto	l116
  1198   001200                     u950:
  1199   001200  807F               	bsf	127,0,c	;volatile
  1200   001202  EF04  F009         	goto	l117
  1201   001206                     l116:
  1202   001206  907F               	bcf	127,0,c	;volatile
  1203   001208                     l117:
  1204                           
  1205                           ;LEDarray.c: 56:     if (number & 0b000000010){ LATGbits.LATG1 = 1 ; }
  1206   001208  A201               	btfss	LEDarray_disp_bin@number^0,1,c
  1207   00120A  EF09  F009         	goto	u961
  1208   00120E  EF0B  F009         	goto	u960
  1209   001212                     u961:
  1210   001212  EF0E  F009         	goto	l118
  1211   001216                     u960:
  1212   001216  827F               	bsf	127,1,c	;volatile
  1213   001218  EF0F  F009         	goto	l119
  1214   00121C                     l118:
  1215   00121C  927F               	bcf	127,1,c	;volatile
  1216   00121E                     l119:
  1217                           
  1218                           ;LEDarray.c: 59:     if (number & 0b000000100){ LATAbits.LATA2 = 1 ; }
  1219   00121E  A401               	btfss	LEDarray_disp_bin@number^0,2,c
  1220   001220  EF14  F009         	goto	u971
  1221   001224  EF16  F009         	goto	u970
  1222   001228                     u971:
  1223   001228  EF19  F009         	goto	l120
  1224   00122C                     u970:
  1225   00122C  8479               	bsf	121,2,c	;volatile
  1226   00122E  EF1A  F009         	goto	l121
  1227   001232                     l120:
  1228   001232  9479               	bcf	121,2,c	;volatile
  1229   001234                     l121:
  1230                           
  1231                           ;LEDarray.c: 62:     if (number & 0b000001000){ LATFbits.LATF6 = 1 ; }
  1232   001234  A601               	btfss	LEDarray_disp_bin@number^0,3,c
  1233   001236  EF1F  F009         	goto	u981
  1234   00123A  EF21  F009         	goto	u980
  1235   00123E                     u981:
  1236   00123E  EF24  F009         	goto	l122
  1237   001242                     u980:
  1238   001242  8C7E               	bsf	126,6,c	;volatile
  1239   001244  EF25  F009         	goto	l123
  1240   001248                     l122:
  1241   001248  9C7E               	bcf	126,6,c	;volatile
  1242   00124A                     l123:
  1243                           
  1244                           ;LEDarray.c: 65:     if (number & 0b000010000){ LATAbits.LATA4 = 1 ; }
  1245   00124A  A801               	btfss	LEDarray_disp_bin@number^0,4,c
  1246   00124C  EF2A  F009         	goto	u991
  1247   001250  EF2C  F009         	goto	u990
  1248   001254                     u991:
  1249   001254  EF2F  F009         	goto	l124
  1250   001258                     u990:
  1251   001258  8879               	bsf	121,4,c	;volatile
  1252   00125A  EF30  F009         	goto	l125
  1253   00125E                     l124:
  1254   00125E  9879               	bcf	121,4,c	;volatile
  1255   001260                     l125:
  1256                           
  1257                           ;LEDarray.c: 68:     if (number & 0b000100000){ LATAbits.LATA5 = 1 ; }
  1258   001260  AA01               	btfss	LEDarray_disp_bin@number^0,5,c
  1259   001262  EF35  F009         	goto	u1001
  1260   001266  EF37  F009         	goto	u1000
  1261   00126A                     u1001:
  1262   00126A  EF3A  F009         	goto	l126
  1263   00126E                     u1000:
  1264   00126E  8A79               	bsf	121,5,c	;volatile
  1265   001270  EF3B  F009         	goto	l127
  1266   001274                     l126:
  1267   001274  9A79               	bcf	121,5,c	;volatile
  1268   001276                     l127:
  1269                           
  1270                           ;LEDarray.c: 71:     if (number & 0b001000000){ LATFbits.LATF0 = 1 ; }
  1271   001276  AC01               	btfss	LEDarray_disp_bin@number^0,6,c
  1272   001278  EF40  F009         	goto	u1011
  1273   00127C  EF42  F009         	goto	u1010
  1274   001280                     u1011:
  1275   001280  EF45  F009         	goto	l128
  1276   001284                     u1010:
  1277   001284  807E               	bsf	126,0,c	;volatile
  1278   001286  EF46  F009         	goto	l129
  1279   00128A                     l128:
  1280   00128A  907E               	bcf	126,0,c	;volatile
  1281   00128C                     l129:
  1282                           
  1283                           ;LEDarray.c: 74:     if (number & 0b010000000){ LATBbits.LATB0 = 1 ; }
  1284   00128C  AE01               	btfss	LEDarray_disp_bin@number^0,7,c
  1285   00128E  EF4B  F009         	goto	u1021
  1286   001292  EF4D  F009         	goto	u1020
  1287   001296                     u1021:
  1288   001296  EF50  F009         	goto	l130
  1289   00129A                     u1020:
  1290   00129A  807A               	bsf	122,0,c	;volatile
  1291   00129C  EF51  F009         	goto	l131
  1292   0012A0                     l130:
  1293   0012A0  907A               	bcf	122,0,c	;volatile
  1294   0012A2                     l131:
  1295                           
  1296                           ;LEDarray.c: 77:     if (number & 0b100000000){ LATBbits.LATB1 = 1 ; }
  1297   0012A2  A002               	btfss	(LEDarray_disp_bin@number+1)^0,0,c
  1298   0012A4  EF56  F009         	goto	u1031
  1299   0012A8  EF58  F009         	goto	u1030
  1300   0012AC                     u1031:
  1301   0012AC  EF5B  F009         	goto	l132
  1302   0012B0                     u1030:
  1303   0012B0  827A               	bsf	122,1,c	;volatile
  1304   0012B2  EF5C  F009         	goto	l134
  1305   0012B6                     l132:
  1306   0012B6  927A               	bcf	122,1,c	;volatile
  1307   0012B8                     l134:
  1308   0012B8  0012               	return		;funcret
  1309   0012BA                     __end_of_LEDarray_disp_bin:
  1310                           	callstack 0
  1311                           
  1312 ;; *************** function _Interrupts_init *****************
  1313 ;; Defined at:
  1314 ;;		line 9 in file "interrupts.c"
  1315 ;; Parameters:    Size  Location     Type
  1316 ;;		None
  1317 ;; Auto vars:     Size  Location     Type
  1318 ;;		None
  1319 ;; Return value:  Size  Location     Type
  1320 ;;                  1    wreg      void 
  1321 ;; Registers used:
  1322 ;;		None
  1323 ;; Tracked objects:
  1324 ;;		On entry : 0/0
  1325 ;;		On exit  : 0/0
  1326 ;;		Unchanged: 0/0
  1327 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1328 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1329 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1330 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1331 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1332 ;;Total ram usage:        0 bytes
  1333 ;; Hardware stack levels used: 1
  1334 ;; Hardware stack levels required when called: 1
  1335 ;; This function calls:
  1336 ;;		Nothing
  1337 ;; This function is called by:
  1338 ;;		_main
  1339 ;; This function uses a non-reentrant model
  1340 ;;
  1341                           
  1342                           	psect	text6
  1343   00140C                     __ptext6:
  1344                           	callstack 0
  1345   00140C                     _Interrupts_init:
  1346                           	callstack 29
  1347   00140C                     
  1348                           ;interrupts.c: 15:   INTCONbits.PEIE = 1;
  1349   00140C  8CF2               	bsf	242,6,c	;volatile
  1350                           
  1351                           ;interrupts.c: 19:     PIE0bits.TMR0IE = 1;
  1352   00140E  010E               	movlb	14	; () banked
  1353   001410  8B29               	bsf	41,5,b	;volatile
  1354                           
  1355                           ;interrupts.c: 20:     PIR0bits.TMR0IF = 0;
  1356   001412  9B33               	bcf	51,5,b	;volatile
  1357                           
  1358                           ;interrupts.c: 21:     IPR0bits.TMR0IP = 1;
  1359   001414  8B1F               	bsf	31,5,b	;volatile
  1360                           
  1361                           ;interrupts.c: 24:     INTCONbits.GIE=1;
  1362   001416  8EF2               	bsf	242,7,c	;volatile
  1363   001418                     
  1364                           ; BSR set to: 14
  1365   001418  0012               	return		;funcret
  1366   00141A                     __end_of_Interrupts_init:
  1367                           	callstack 0
  1368                           
  1369 ;; *************** function _ADC_init *****************
  1370 ;; Defined at:
  1371 ;;		line 9 in file "ADC.c"
  1372 ;; Parameters:    Size  Location     Type
  1373 ;;		None
  1374 ;; Auto vars:     Size  Location     Type
  1375 ;;		None
  1376 ;; Return value:  Size  Location     Type
  1377 ;;                  1    wreg      void 
  1378 ;; Registers used:
  1379 ;;		wreg, status,2
  1380 ;; Tracked objects:
  1381 ;;		On entry : 0/0
  1382 ;;		On exit  : 0/0
  1383 ;;		Unchanged: 0/0
  1384 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1385 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1386 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1387 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1388 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1389 ;;Total ram usage:        0 bytes
  1390 ;; Hardware stack levels used: 1
  1391 ;; Hardware stack levels required when called: 1
  1392 ;; This function calls:
  1393 ;;		Nothing
  1394 ;; This function is called by:
  1395 ;;		_main
  1396 ;; This function uses a non-reentrant model
  1397 ;;
  1398                           
  1399                           	psect	text7
  1400   0013DA                     __ptext7:
  1401                           	callstack 0
  1402   0013DA                     _ADC_init:
  1403                           	callstack 29
  1404   0013DA                     
  1405                           ;ADC.c: 11:     TRISAbits.TRISA3=1;
  1406   0013DA  8681               	bsf	129,3,c	;volatile
  1407                           
  1408                           ;ADC.c: 12:     ANSELAbits.ANSELA3=1;
  1409   0013DC  010E               	movlb	14	; () banked
  1410   0013DE  8792               	bsf	146,3,b	;volatile
  1411                           
  1412                           ;ADC.c: 14:     ADREFbits.ADNREF = 0;
  1413   0013E0  010F               	movlb	15	; () banked
  1414   0013E2  9958               	bcf	88,4,b	;volatile
  1415   0013E4                     
  1416                           ; BSR set to: 15
  1417                           ;ADC.c: 15:     ADREFbits.ADPREF = 0b00;
  1418   0013E4  0EFC               	movlw	-4
  1419   0013E6  1758               	andwf	88,f,b	;volatile
  1420                           
  1421                           ;ADC.c: 16:     ADPCH=0b11;
  1422   0013E8  0E03               	movlw	3
  1423   0013EA  6F5F               	movwf	95,b	;volatile
  1424   0013EC                     
  1425                           ; BSR set to: 15
  1426                           ;ADC.c: 17:     ADCON0bits.ADFM = 0;
  1427   0013EC  9460               	bcf	96,2,c	;volatile
  1428   0013EE                     
  1429                           ; BSR set to: 15
  1430                           ;ADC.c: 18:     ADCON0bits.ADCS = 1;
  1431   0013EE  8860               	bsf	96,4,c	;volatile
  1432   0013F0                     
  1433                           ; BSR set to: 15
  1434                           ;ADC.c: 19:     ADCON0bits.ADON = 1;
  1435   0013F0  8E60               	bsf	96,7,c	;volatile
  1436   0013F2                     
  1437                           ; BSR set to: 15
  1438   0013F2  0012               	return		;funcret
  1439   0013F4                     __end_of_ADC_init:
  1440                           	callstack 0
  1441                           
  1442 ;; *************** function _HighISR *****************
  1443 ;; Defined at:
  1444 ;;		line 31 in file "interrupts.c"
  1445 ;; Parameters:    Size  Location     Type
  1446 ;;		None
  1447 ;; Auto vars:     Size  Location     Type
  1448 ;;		None
  1449 ;; Return value:  Size  Location     Type
  1450 ;;                  1    wreg      void 
  1451 ;; Registers used:
  1452 ;;		wreg, status,2, status,0
  1453 ;; Tracked objects:
  1454 ;;		On entry : 0/0
  1455 ;;		On exit  : 0/0
  1456 ;;		Unchanged: 0/0
  1457 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1458 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1459 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1460 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1461 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1462 ;;Total ram usage:        0 bytes
  1463 ;; Hardware stack levels used: 1
  1464 ;; This function calls:
  1465 ;;		Nothing
  1466 ;; This function is called by:
  1467 ;;		Interrupt level 2
  1468 ;; This function uses a non-reentrant model
  1469 ;;
  1470                           
  1471                           	psect	intcode
  1472   000008                     __pintcode:
  1473                           	callstack 0
  1474   000008                     _HighISR:
  1475                           	callstack 28
  1476                           
  1477                           ; BSR set to: 15
  1478                           ;incstack = 0
  1479   000008  8251               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  1480   00000A                     
  1481                           ;interrupts.c: 35:     if(PIR0bits.TMR0IF){
  1482   00000A  010E               	movlb	14	; () banked
  1483   00000C  AB33               	btfss	51,5,b	;volatile
  1484   00000E  EF0B  F000         	goto	i2u31_41
  1485   000012  EF0D  F000         	goto	i2u31_40
  1486   000016                     i2u31_41:
  1487   000016  EF14  F000         	goto	i2l74
  1488   00001A                     i2u31_40:
  1489   00001A                     
  1490                           ; BSR set to: 14
  1491                           ;interrupts.c: 37:         TMR0H = 0b00001011;
  1492   00001A  0E0B               	movlw	11
  1493   00001C  6ED4               	movwf	212,c	;volatile
  1494                           
  1495                           ;interrupts.c: 38:         TMR0L = 0b11011100;
  1496   00001E  0EDC               	movlw	220
  1497   000020  6ED3               	movwf	211,c	;volatile
  1498   000022                     
  1499                           ; BSR set to: 14
  1500                           ;interrupts.c: 39:         GLOBALsecs++;
  1501   000022  4A4F               	infsnz	_GLOBALsecs^0,f,c
  1502   000024  2A50               	incf	(_GLOBALsecs+1)^0,f,c
  1503   000026                     
  1504                           ; BSR set to: 14
  1505                           ;interrupts.c: 40:         PIR0bits.TMR0IF=0;
  1506   000026  9B33               	bcf	51,5,b	;volatile
  1507   000028                     i2l74:
  1508                           
  1509                           ; BSR set to: 14
  1510   000028  9251               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1511   00002A  0011               	retfie		f
  1512   00002C                     __end_of_HighISR:
  1513                           	callstack 0
  1514                           
  1515                           	psect	smallconst
  1516   000E00                     __psmallconst:
  1517                           	callstack 0
  1518   000E00  00                 	db	0
  1519   000E01  00                 	db	0	; dummy byte at the end
  1520   000000                     
  1521                           	psect	rparam
  1522   000000                     
  1523                           	psect	temp
  1524   000051                     btemp:
  1525                           	callstack 0
  1526   000051                     	ds	1
  1527   000000                     int$flags	set	btemp
  1528   000000                     wtemp8	set	btemp+1
  1529   000000                     ttemp5	set	btemp+1
  1530   000000                     ttemp6	set	btemp+4
  1531   000000                     ttemp7	set	btemp+8
  1532                           
  1533                           	psect	config
  1534                           
  1535                           ;Config register CONFIG1L @ 0x300000
  1536                           ;	External Oscillator mode Selection bits
  1537                           ;	FEXTOSC = HS, HS (crystal oscillator) above 8 MHz; PFM set to high power
  1538                           ;	Power-up default value for COSC bits
  1539                           ;	RSTOSC = EXTOSC_4PLL, EXTOSC with 4x PLL, with EXTOSC operating per FEXTOSC bits
  1540   300000                     	org	3145728
  1541   300000  AA                 	db	170
  1542                           
  1543                           ;Config register CONFIG1H @ 0x300001
  1544                           ;	unspecified, using default values
  1545                           ;	Clock Out Enable bit
  1546                           ;	CLKOUTEN = 0x1, unprogrammed default
  1547                           ;	Clock Switch Enable bit
  1548                           ;	CSWEN = 0x1, unprogrammed default
  1549                           ;	Fail-Safe Clock Monitor Enable bit
  1550                           ;	FCMEN = 0x1, unprogrammed default
  1551   300001                     	org	3145729
  1552   300001  FF                 	db	255
  1553                           
  1554                           ;Config register CONFIG3L @ 0x300004
  1555                           ;	WDT Period Select bits
  1556                           ;	WDTCPS = 0x1F, unprogrammed default
  1557                           ;	WDT operating mode
  1558                           ;	WDTE = OFF, WDT Disabled
  1559   300004                     	org	3145732
  1560   300004  9F                 	db	159
  1561                           
  1562                           ;Config register CONFIG3H @ 0x300005
  1563                           ;	unspecified, using default values
  1564                           ;	WDT Window Select bits
  1565                           ;	WDTCWS = 0x7, unprogrammed default
  1566                           ;	WDT input clock selector
  1567                           ;	WDTCCS = 0x7, unprogrammed default
  1568   300005                     	org	3145733
  1569   300005  FF                 	db	255
  1570                           tosu	equ	0xFFF
  1571                           tosh	equ	0xFFE
  1572                           tosl	equ	0xFFD
  1573                           stkptr	equ	0xFFC
  1574                           pclatu	equ	0xFFB
  1575                           pclath	equ	0xFFA
  1576                           pcl	equ	0xFF9
  1577                           tblptru	equ	0xFF8
  1578                           tblptrh	equ	0xFF7
  1579                           tblptrl	equ	0xFF6
  1580                           tablat	equ	0xFF5
  1581                           prodh	equ	0xFF4
  1582                           prodl	equ	0xFF3
  1583                           indf0	equ	0xFEF
  1584                           postinc0	equ	0xFEE
  1585                           postdec0	equ	0xFED
  1586                           preinc0	equ	0xFEC
  1587                           plusw0	equ	0xFEB
  1588                           fsr0h	equ	0xFEA
  1589                           fsr0l	equ	0xFE9
  1590                           wreg	equ	0xFE8
  1591                           indf1	equ	0xFE7
  1592                           postinc1	equ	0xFE6
  1593                           postdec1	equ	0xFE5
  1594                           preinc1	equ	0xFE4
  1595                           plusw1	equ	0xFE3
  1596                           fsr1h	equ	0xFE2
  1597                           fsr1l	equ	0xFE1
  1598                           bsr	equ	0xFE0
  1599                           indf2	equ	0xFDF
  1600                           postinc2	equ	0xFDE
  1601                           postdec2	equ	0xFDD
  1602                           preinc2	equ	0xFDC
  1603                           plusw2	equ	0xFDB
  1604                           fsr2h	equ	0xFDA
  1605                           fsr2l	equ	0xFD9
  1606                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    0
    Data        24
    BSS         0
    Persistent  2
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     54      80
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          234      0       0

Pointer List with Targets:

    UpdateClock@days	PTR int  size(1) Largest target is 12
		 -> main@clock(COMRAM[12]), 

    UpdateClock@hours	PTR int  size(1) Largest target is 12
		 -> main@clock(COMRAM[12]), 

    UpdateClock@minutes	PTR int  size(1) Largest target is 12
		 -> main@clock(COMRAM[12]), 

    UpdateClock@months	PTR int  size(1) Largest target is 12
		 -> main@clock(COMRAM[12]), 

    UpdateClock@seconds	PTR int  size(1) Largest target is 2
		 -> GLOBALsecs(COMRAM[2]), 

    UpdateClock@years	PTR int  size(1) Largest target is 12
		 -> main@clock(COMRAM[12]), 


Critical Paths under _main in COMRAM

    _main->_UpdateClock
    _UpdateClock->___awmod

Critical Paths under _HighISR in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _HighISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _HighISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _HighISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _HighISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _HighISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _HighISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _HighISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _HighISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _HighISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _HighISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _HighISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _HighISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _HighISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _HighISR in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                12    12      0    2514
                                             42 COMRAM    12    12      0
                           _ADC_init
                    _Interrupts_init
                  _LEDarray_disp_bin
                      _LEDarray_init
                        _Timer0_init
                        _UpdateClock
 ---------------------------------------------------------------------------------
 (1) _UpdateClock                                         36    30      6    1854
                                              6 COMRAM    36    30      6
                            ___awmod
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4     600
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _Timer0_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LEDarray_init                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LEDarray_disp_bin                                    2     0      2     274
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _Interrupts_init                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ADC_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _HighISR                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_init
   _Interrupts_init
   _LEDarray_disp_bin
   _LEDarray_init
   _Timer0_init
   _UpdateClock
     ___awmod

 _HighISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             DE9      0       0      50        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK13           EA      0       0      30        0.0%
BANK13              EA      0       0      31        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITBIGSFRllhhhh     84      0       0      42        0.0%
BITBIGSFRllhhll     5E      0       0      45        0.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     36      50       1       85.1%
BITBIGSFRhhl        4A      0       0      34        0.0%
BITBIGSFRllhhlh     33      0       0      44        0.0%
BITBIGSFRllll       30      0       0      48        0.0%
BITBIGSFRhhhl       1B      0       0      33        0.0%
BITBIGSFRllhhhh     14      0       0      39        0.0%
BITBIGSFRhhhh        D      0       0      32        0.0%
BITBIGSFRlllh        9      0       0      47        0.0%
BITBIGSFRllhl        9      0       0      46        0.0%
BITBIGSFRllhhhl      8      0       0      43        0.0%
BITBIGSFRllhhhh      6      0       0      41        0.0%
BITBIGSFRllhhhh      3      0       0      40        0.0%
BITBIGSFRllhhhh      1      0       0      38        0.0%
BITBIGSFRlhh         1      0       0      36        0.0%
BITBIGSFRlhl         1      0       0      37        0.0%
BITBIGSFRhll         1      0       0      35        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      50      49        0.0%
DATA                 0      0      50       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.45 build 20230818022343 
Symbol Table                                                                                   Thu Feb 08 18:53:49 2024

                       l31 11E8                         l28 11AA                         l48 13D8  
                       l68 1418          ??_Interrupts_init 0001                        l120 1232  
                      l121 1234                        l113 13B8                        l130 12A0  
                      l122 1248                        l131 12A2                        l123 124A  
                      l132 12B6                        l124 125E                        l116 1206  
                      l221 13F2                        l125 1260                        l117 1208  
                      l134 12B8                        l126 1274                        l118 121C  
                      l127 1276                        l119 121E                        l128 128A  
                      l129 128C                        l246 110E                        l493 1368  
                      l960 13BA                        l970 13DA                        l962 13C2  
                      l972 13E4                        l964 13CC                        l974 13EC  
                      l958 1394                        l966 13D6                        l976 13EE  
                      l968 140C                        l978 13F0                        u800 131E  
                      u801 131A                        u810 1334                        u811 1330  
                      u820 1358                        u900 0FF8                        u821 1354  
                      u901 0FF4                        u910 1012                        u911 100E  
                      u831 0E0C                        u920 103E                        u840 0E4E  
                      u921 103A                        u841 0E4A                        u770 12CC  
                      u930 1084                        u850 0EAC                        u771 12C8  
                      u931 1080                        u851 0EA8                        u780 12E6  
                      u940 10DC                        u860 0F00                        u781 12E2  
                      u941 10D8                        u861 0EFC                        u950 1200  
                      u790 1300                        u870 0F54                        u951 11FC  
                      u791 12FC                        u871 0F50                        u960 1216  
                      u880 0FAA                        u961 1212                        u881 0FA6  
                      u970 122C                        u890 0FC4                        u971 1228  
                      u891 0FC0                        u980 1242                        u981 123E  
                      u990 1258                        u991 1254               ___awmod@sign 0006  
                      wreg 0FE8                       l1300 12D4                       l1310 1308  
                     l1302 12D8                       l1400 129A                       l1320 1342  
                     l1312 1310                       l1304 12E6                       l1402 12B0  
                     l1314 131E                       l1322 1348                       l1306 12EE  
                     l1330 0E02                       l1410 1120                       l1324 1358  
                     l1316 1334                       l1308 1300                       l1340 0E86  
                     l1332 0E14                       l1420 1130                       l1412 1122  
                     l1404 1110                       l1326 1360                       l1318 133C  
                     l1350 0F0A                       l1342 0EAC                       l1334 0E28  
                     l1430 1158                       l1422 1138                       l1414 1124  
                     l1406 1114                       l1360 0FAA                       l1352 0F2E  
                     l1344 0EB6                       l1336 0E4E                       l1440 11A4  
                     l1432 1160                       l1424 1140                       l1416 1126  
                     l1408 1118                       l1370 103E                       l1362 0FC4  
                     l1354 0F54                       l1346 0EDA                       l1338 0E62  
                     l1442 11AC                       l1434 1168                       l1426 1148  
                     l1418 1128                       l1380 10DC                       l1372 1046  
                     l1364 0FCC                       l1356 0F5E                       l1348 0F00  
                     l1444 11C6                       l1436 1184                       l1428 1150  
                     l1390 122C                       l1294 12BA                       l1382 10EA  
                     l1374 1084                       l1366 0FF8                       l1358 0F82  
                     l1446 11E2                       l1438 1190                       l1392 1242  
                     l1384 11F2                       l1296 12BE                       l1376 1092  
                     l1368 1012                       l1394 1258                       l1386 1200  
                     l1298 12CC                       l1378 10B6                       l1396 126E  
                     l1388 1216                       l1398 1284                       u1000 126E  
                     u1001 126A                       u1010 1284                       u1011 1280  
                     u1020 129A                       u1021 1296                       u1030 12B0  
                     u1031 12AC                       u1040 11A4                       u1041 11A0  
                     u1050 11C6                       u1051 11C2                       u1060 11E2  
                     u1061 11DE                       i2l74 0028                       _main 1110  
                     fsr1h 0FE2                       fsr2h 0FDA                       indf1 0FE7  
                     fsr1l 0FE1                       fsr2l 0FD9                       btemp 0051  
                     prodl 0FF3                       start 002C           __end_of_ADC_init 13F4  
          __end_of_HighISR 002C               ___param_bank 0000                      ?_main 0001  
                    _ADPCH 0F5F            __end_of___awmod 136A                      _TMR0H 0FD4  
                    _TMR0L 0FD3                      tablat 0FF5                      plusw1 0FE3  
                    plusw2 0FDB                      ttemp5 0052                      ttemp6 0055  
                    ttemp7 0059                      status 0FD8                      wtemp8 0052  
          __initialization 136A               __end_of_main 11F2                     ??_main 002B  
            __activetblptr 0000                     _ADRESH 0F64                     i2l1110 0022  
                   i2l1112 0026           UpdateClock@hours 0009                     i2l1106 000A  
                   i2l1108 001A           UpdateClock@years 000C                  ??_HighISR 0001  
        _LEDarray_disp_bin 11F2         ?_LEDarray_disp_bin 0001              ??_Timer0_init 0001  
                ??___awmod 0005        ??_LEDarray_disp_bin 0003            ___awmod@divisor 0003  
                   isa$std 0001            ___awmod@counter 0005               __pdataCOMRAM 0037  
             __mediumconst 0000                     tblptrh 0FF7                     tblptrl 0FF6  
                   tblptru 0FF8                  ?_ADC_init 0001  __end_of_LEDarray_disp_bin 12BA  
               __accesstop 0060              ??_UpdateClock 000D    __end_of__initialization 138A  
            ___rparam_used 0001              _LEDarray_init 1394            _Interrupts_init 140C  
           __pcstackCOMRAM 0001        __end_of_Timer0_init 13DA                 ??_ADC_init 0001  
        UpdateClock@F14148 0037                 __pnvCOMRAM 004F             ?_LEDarray_init 0001  
      __end_of_UpdateClock 1110          UpdateClock@months 000B                    i2u31_40 001A  
                  i2u31_41 0016    __end_of_Interrupts_init 141A                    _HighISR 0008  
                _ADREFbits 0F58                    __Hparam 0000                    __Lparam 0000  
              _Timer0_init 13BA                    ___awmod 12BA               __psmallconst 0E00  
                  __pcinit 136A                    __ramtop 0E00                    __ptext0 1110  
                  __ptext1 0E02                    __ptext2 12BA                    __ptext3 13BA  
                  __ptext4 1394                    __ptext5 11F2                    __ptext6 140C  
                  __ptext7 13DA           ___awmod@dividend 0001       end_of_initialization 138A  
          ??_LEDarray_init 0001                _UpdateClock 0E02                    postdec1 0FE5  
                  postdec2 0FDD                    postinc0 0FEE                    postinc1 0FE6  
                  postinc2 0FDE                  _TRISAbits 0F81                  _TRISBbits 0F82  
                _TRISDbits 0F84                  _TRISFbits 0F86                  _TRISGbits 0F87  
                _TRISHbits 0F88                _CM1CON0bits 0ED0                _CM1CON1bits 0ED1  
         ?_Interrupts_init 0001              __pidataCOMRAM 13F4        start_initialization 136A  
          UpdateClock@days 000A                   ?_HighISR 0001               ?_Timer0_init 0001  
                __pintcode 0008                   ?___awmod 0001                __smallconst 0E00  
                 _ADC_init 13DA               ?_UpdateClock 0007                   _LATAbits 0F79  
       UpdateClock@minutes 0008         UpdateClock@seconds 0007                   _LATBbits 0F7A  
                 _LATDbits 0F7C                   _LATFbits 0F7E                   _LATGbits 0F7F  
                 _LATHbits 0F80                   _IPR0bits 0E1F                   _PIE0bits 0E29  
                 _PIR0bits 0E33                 _ADCON0bits 0F60                  main@clock 002B  
   UpdateClock@DaysInMonth 0013                 _CM1NCHbits 0ED2                 _CM1PCHbits 0ED3  
                copy_data0 137E      __end_of_LEDarray_init 13BA                   __Hrparam 0000  
                 __Lrparam 0000                 _ANSELAbits 0E92                 _T0CON0bits 0FD5  
               _T0CON1bits 0FD6    LEDarray_disp_bin@number 0001                 _GLOBALsecs 004F  
                 isa$xinst 0000                   int$flags 0051                 _INTCONbits 0FF2  
                 intlevel2 0000               _DAC1CON0bits 0EC6               _DAC1CON1bits 0EC7  
