

Microchip MPLAB XC8 Assembler V2.45 build 20230818022343 
                                                                                               Fri Feb 09 00:29:09 2024

Microchip MPLAB XC8 C Compiler v2.45 (Free license) build 20230818022343 Og1 
     1                           	processor	18F67K40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1,group=3
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=2
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=3
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=3
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=3
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=3
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=2
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=2
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1
    34                           	psect	text21,global,reloc=2,class=CODE,delta=1
    35                           	psect	text22,global,reloc=2,class=CODE,delta=1
    36                           	psect	text23,global,reloc=2,class=CODE,delta=1
    37                           	psect	text24,global,reloc=2,class=CODE,delta=1
    38                           	psect	text25,global,reloc=2,class=CODE,delta=1
    39                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    40                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    41                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    42                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    43                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    44   000000                     
    45                           ; Generated 21/07/2023 GMT
    46                           ; 
    47                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    48                           ; All rights reserved.
    49                           ; 
    50                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    51                           ; 
    52                           ; Redistribution and use in source and binary forms, with or without modification, are
    53                           ; permitted provided that the following conditions are met:
    54                           ; 
    55                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    56                           ;        conditions and the following disclaimer.
    57                           ; 
    58                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    59                           ;        of conditions and the following disclaimer in the documentation and/or other
    60                           ;        materials provided with the distribution. Publication is not required when
    61                           ;        this file is used in an embedded application.
    62                           ; 
    63                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    64                           ;        software without specific prior written permission.
    65                           ; 
    66                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    67                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    68                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    69                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    70                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    71                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    72                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    73                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    74                           ; 
    75                           ; 
    76                           ; Code-generator required, PIC18F67K40 Definitions
    77                           ; 
    78                           ; SFR Addresses
    79   000000                     
    80                           	psect	idataBANK0
    81   001F94                     __pidataBANK0:
    82                           	callstack 0
    83                           
    84                           ;initializer for UpdateClock@F14152
    85   001F94  001F               	dw	31
    86   001F96  001C               	dw	28
    87   001F98  001F               	dw	31
    88   001F9A  001E               	dw	30
    89   001F9C  001F               	dw	31
    90   001F9E  001E               	dw	30
    91   001FA0  001F               	dw	31
    92   001FA2  001F               	dw	31
    93   001FA4  001E               	dw	30
    94   001FA6  001F               	dw	31
    95   001FA8  001E               	dw	30
    96   001FAA  001F               	dw	31
    97   000000                     _TRISCbits	set	3971
    98   000000                     _TRISEbits	set	3973
    99   000000                     _LATEbits	set	3965
   100   000000                     _LATCbits	set	3963
   101   000000                     _LATBbits	set	3962
   102   000000                     _TRISBbits	set	3970
   103   000000                     _LATFbits	set	3966
   104   000000                     _TRISAbits	set	3969
   105   000000                     _LATGbits	set	3967
   106   000000                     _TRISGbits	set	3975
   107   000000                     _CM1CON1bits	set	3793
   108   000000                     _TRISFbits	set	3974
   109   000000                     _LATHbits	set	3968
   110   000000                     _TRISHbits	set	3976
   111   000000                     _IPR0bits	set	3615
   112   000000                     _PIE0bits	set	3625
   113   000000                     _LATDbits	set	3964
   114   000000                     _TRISDbits	set	3972
   115   000000                     _TMR0L	set	4051
   116   000000                     _TMR0H	set	4052
   117   000000                     _T0CON0bits	set	4053
   118   000000                     _T0CON1bits	set	4054
   119   000000                     _INTCONbits	set	4082
   120   000000                     _PIR0bits	set	3635
   121   000000                     _ANSELAbits	set	3730
   122   000000                     _DAC1CON0bits	set	3782
   123   000000                     _CM1CON0bits	set	3792
   124   000000                     _CM1NCHbits	set	3794
   125   000000                     _DAC1CON1bits	set	3783
   126   000000                     _ADREFbits	set	3928
   127   000000                     _LATAbits	set	3961
   128   000000                     _CM1PCHbits	set	3795
   129   000000                     _ADPCH	set	3935
   130   000000                     _ADRESH	set	3940
   131   000000                     _ADCON0bits	set	3936
   132                           
   133                           	psect	smallconst
   134   000E00                     __psmallconst:
   135                           	callstack 0
   136   000E00  00                 	db	0
   137   000E01                     STR_1:
   138                           
   139                           ; BSR set to: 14
   140   000E01  54                 	db	84	;'T'
   141   000E02  69                 	db	105	;'i'
   142   000E03  6D                 	db	109	;'m'
   143   000E04  65                 	db	101	;'e'
   144   000E05  3A                 	db	58	;':'
   145   000E06  25                 	db	37
   146   000E07  30                 	db	48	;'0'
   147   000E08  32                 	db	50	;'2'
   148   000E09  64                 	db	100	;'d'
   149   000E0A  3A                 	db	58	;':'
   150   000E0B  25                 	db	37
   151   000E0C  30                 	db	48	;'0'
   152   000E0D  32                 	db	50	;'2'
   153   000E0E  64                 	db	100	;'d'
   154   000E0F  3A                 	db	58	;':'
   155   000E10  25                 	db	37
   156   000E11  30                 	db	48	;'0'
   157   000E12  32                 	db	50	;'2'
   158   000E13  64                 	db	100	;'d'
   159   000E14  20                 	db	32
   160   000E15  44                 	db	68	;'D'
   161   000E16  25                 	db	37
   162   000E17  30                 	db	48	;'0'
   163   000E18  31                 	db	49	;'1'
   164   000E19  64                 	db	100	;'d'
   165   000E1A  00                 	db	0
   166   000E1B                     
   167                           ; BSR set to: 14
   168   000E1B  54                 	db	84	;'T'
   169   000E1C  69                 	db	105	;'i'
   170   000E1D  6D                 	db	109	;'m'
   171   000E1E  65                 	db	101	;'e'
   172   000E1F  3A                 	db	58	;':'
   173   000E20  20                 	db	32
   174   000E21  25                 	db	37
   175   000E22  30                 	db	48	;'0'
   176   000E23  32                 	db	50	;'2'
   177   000E24  64                 	db	100	;'d'
   178   000E25  3A                 	db	58	;':'
   179   000E26  25                 	db	37
   180   000E27  30                 	db	48	;'0'
   181   000E28  32                 	db	50	;'2'
   182   000E29  64                 	db	100	;'d'
   183   000E2A  3A                 	db	58	;':'
   184   000E2B  25                 	db	37
   185   000E2C  30                 	db	48	;'0'
   186   000E2D  34                 	db	52	;'4'
   187   000E2E  64                 	db	100	;'d'
   188   000E2F  00                 	db	0
   189   000E30                     STR_2:
   190                           
   191                           ; BSR set to: 14
   192   000E30  44                 	db	68	;'D'
   193   000E31  61                 	db	97	;'a'
   194   000E32  74                 	db	116	;'t'
   195   000E33  65                 	db	101	;'e'
   196   000E34  3A                 	db	58	;':'
   197   000E35  25                 	db	37
   198   000E36  30                 	db	48	;'0'
   199   000E37  32                 	db	50	;'2'
   200   000E38  64                 	db	100	;'d'
   201   000E39  2F                 	db	47
   202   000E3A  25                 	db	37
   203   000E3B  30                 	db	48	;'0'
   204   000E3C  32                 	db	50	;'2'
   205   000E3D  64                 	db	100	;'d'
   206   000E3E  2F                 	db	47
   207   000E3F  25                 	db	37
   208   000E40  30                 	db	48	;'0'
   209   000E41  34                 	db	52	;'4'
   210   000E42  64                 	db	100	;'d'
   211   000E43  00                 	db	0
   212   000E44  00                 	db	0	; dummy byte at the end
   213   000000                     
   214                           ; #config settings
   215                           
   216                           	psect	cinit
   217   001D9E                     __pcinit:
   218                           	callstack 0
   219   001D9E                     start_initialization:
   220                           	callstack 0
   221   001D9E                     __initialization:
   222                           	callstack 0
   223                           
   224                           ; Initialize objects allocated to BANK0 (24 bytes)
   225                           ; load TBLPTR registers with __pidataBANK0
   226   001D9E  0E94               	movlw	low __pidataBANK0
   227   001DA0  6EF6               	movwf	tblptrl,c
   228   001DA2  0E1F               	movlw	high __pidataBANK0
   229   001DA4  6EF7               	movwf	tblptrh,c
   230   001DA6  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   231   001DA8  6EF8               	movwf	tblptru,c
   232   001DAA  EE00  F0A8         	lfsr	0,__pdataBANK0
   233   001DAE  EE10 F018          	lfsr	1,24
   234   001DB2                     copy_data0:
   235   001DB2  0009               	tblrd		*+
   236   001DB4  CFF5 FFEE          	movff	tablat,postinc0
   237   001DB8  50E5               	movf	postdec1,w,c
   238   001DBA  50E1               	movf	fsr1l,w,c
   239   001DBC  E1FA               	bnz	copy_data0
   240                           
   241                           ; Clear objects allocated to BANK0 (34 bytes)
   242   001DBE  EE00  F086         	lfsr	0,__pbssBANK0
   243   001DC2  0E22               	movlw	34
   244   001DC4                     clear_0:
   245   001DC4  6AEE               	clrf	postinc0,c
   246   001DC6  06E8               	decf	wreg,f,c
   247   001DC8  E1FD               	bnz	clear_0
   248                           
   249                           ; Clear objects allocated to COMRAM (5 bytes)
   250   001DCA  6A4A               	clrf	(__pbssCOMRAM+4)& (0+255),c
   251   001DCC  6A49               	clrf	(__pbssCOMRAM+3)& (0+255),c
   252   001DCE  6A48               	clrf	(__pbssCOMRAM+2)& (0+255),c
   253   001DD0  6A47               	clrf	(__pbssCOMRAM+1)& (0+255),c
   254   001DD2  6A46               	clrf	__pbssCOMRAM& (0+255),c
   255   001DD4                     end_of_initialization:
   256                           	callstack 0
   257   001DD4                     __end_of__initialization:
   258                           	callstack 0
   259   001DD4  904B               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   260   001DD6  924B               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   261   001DD8  0100               	movlb	0
   262   001DDA  EF38  F00B         	goto	_main	;jump to C main() function
   263                           
   264                           	psect	bssCOMRAM
   265   000046                     __pbssCOMRAM:
   266                           	callstack 0
   267   000046                     _width:
   268                           	callstack 0
   269   000046                     	ds	2
   270   000048                     _prec:
   271                           	callstack 0
   272   000048                     	ds	2
   273   00004A                     _flags:
   274                           	callstack 0
   275   00004A                     	ds	1
   276                           
   277                           	psect	bssBANK0
   278   000086                     __pbssBANK0:
   279                           	callstack 0
   280   000086                     _dbuf:
   281                           	callstack 0
   282   000086                     	ds	32
   283   0000A6                     _GLOBALsecs:
   284                           	callstack 0
   285   0000A6                     	ds	2
   286                           
   287                           	psect	dataBANK0
   288   0000A8                     __pdataBANK0:
   289                           	callstack 0
   290   0000A8                     UpdateClock@F14152:
   291                           	callstack 0
   292   0000A8                     	ds	24
   293                           
   294                           	psect	cstackBANK0
   295   000060                     __pcstackBANK0:
   296                           	callstack 0
   297   000060                     main@buf:
   298                           	callstack 0
   299                           
   300                           ; 20 bytes @ 0x0
   301   000060                     	ds	20
   302   000074                     main@TestMode:
   303                           	callstack 0
   304                           
   305                           ; 2 bytes @ 0x14
   306   000074                     	ds	2
   307   000076                     main@clock:
   308                           	callstack 0
   309                           
   310                           ; 16 bytes @ 0x16
   311   000076                     	ds	16
   312                           
   313                           	psect	cstackCOMRAM
   314   000001                     __pcstackCOMRAM:
   315                           	callstack 0
   316   000001                     ?___wmul:
   317                           	callstack 0
   318   000001                     ?___awdiv:
   319                           	callstack 0
   320   000001                     ?___awmod:
   321                           	callstack 0
   322   000001                     LCD_sendnibble@number:
   323                           	callstack 0
   324   000001                     LEDarray_disp_bin@number:
   325                           	callstack 0
   326   000001                     ___wmul@multiplier:
   327                           	callstack 0
   328   000001                     ___awdiv@dividend:
   329                           	callstack 0
   330   000001                     ___awmod@dividend:
   331                           	callstack 0
   332   000001                     fputc@c:
   333                           	callstack 0
   334                           
   335                           ; 2 bytes @ 0x0
   336   000001                     	ds	1
   337   000002                     LCD_sendbyte@type:
   338                           	callstack 0
   339                           
   340                           ; 1 bytes @ 0x1
   341   000002                     	ds	1
   342   000003                     LCD_sendbyte@Byte:
   343                           	callstack 0
   344   000003                     fputc@fp:
   345                           	callstack 0
   346   000003                     ___wmul@multiplicand:
   347                           	callstack 0
   348   000003                     ___awdiv@divisor:
   349                           	callstack 0
   350   000003                     ___awmod@divisor:
   351                           	callstack 0
   352                           
   353                           ; 2 bytes @ 0x2
   354   000003                     	ds	1
   355   000004                     ??_LCD_Init:
   356   000004                     ??_fputc:
   357   000004                     LCD_setline@line:
   358                           	callstack 0
   359   000004                     LCD_sendstring@string:
   360                           	callstack 0
   361                           
   362                           ; 1 bytes @ 0x3
   363   000004                     	ds	1
   364   000005                     ___awdiv@counter:
   365                           	callstack 0
   366   000005                     ___awmod@counter:
   367                           	callstack 0
   368   000005                     ___wmul@product:
   369                           	callstack 0
   370                           
   371                           ; 2 bytes @ 0x4
   372   000005                     	ds	1
   373   000006                     ___awdiv@sign:
   374                           	callstack 0
   375   000006                     ___awmod@sign:
   376                           	callstack 0
   377                           
   378                           ; 1 bytes @ 0x5
   379   000006                     	ds	1
   380   000007                     ?_abs:
   381                           	callstack 0
   382   000007                     ?_read_prec_or_width:
   383                           	callstack 0
   384   000007                     UpdateClock@seconds:
   385                           	callstack 0
   386   000007                     read_prec_or_width@fmt:
   387                           	callstack 0
   388   000007                     ___awdiv@quotient:
   389                           	callstack 0
   390   000007                     abs@a:
   391                           	callstack 0
   392                           
   393                           ; 2 bytes @ 0x6
   394   000007                     	ds	1
   395   000008                     UpdateClock@minutes:
   396                           	callstack 0
   397   000008                     read_prec_or_width@ap:
   398                           	callstack 0
   399                           
   400                           ; 1 bytes @ 0x7
   401   000008                     	ds	1
   402   000009                     ??_abs:
   403   000009                     UpdateClock@hours:
   404                           	callstack 0
   405   000009                     read_prec_or_width@c:
   406                           	callstack 0
   407   000009                     fputs@s:
   408                           	callstack 0
   409                           
   410                           ; 1 bytes @ 0x8
   411   000009                     	ds	1
   412   00000A                     UpdateClock@days:
   413                           	callstack 0
   414   00000A                     fputs@fp:
   415                           	callstack 0
   416   00000A                     read_prec_or_width@n:
   417                           	callstack 0
   418                           
   419                           ; 2 bytes @ 0x9
   420   00000A                     	ds	1
   421   00000B                     UpdateClock@DoW:
   422                           	callstack 0
   423   00000B                     fputs@c:
   424                           	callstack 0
   425                           
   426                           ; 1 bytes @ 0xA
   427   00000B                     	ds	1
   428   00000C                     UpdateClock@months:
   429                           	callstack 0
   430   00000C                     fputs@i:
   431                           	callstack 0
   432                           
   433                           ; 2 bytes @ 0xB
   434   00000C                     	ds	1
   435   00000D                     UpdateClock@years:
   436                           	callstack 0
   437                           
   438                           ; 1 bytes @ 0xC
   439   00000D                     	ds	1
   440   00000E                     UpdateClock@DSTstate:
   441                           	callstack 0
   442   00000E                     pad@fp:
   443                           	callstack 0
   444                           
   445                           ; 1 bytes @ 0xD
   446   00000E                     	ds	1
   447   00000F                     pad@buf:
   448                           	callstack 0
   449   00000F                     UpdateClock@TestMode:
   450                           	callstack 0
   451                           
   452                           ; 2 bytes @ 0xE
   453   00000F                     	ds	1
   454   000010                     pad@p:
   455                           	callstack 0
   456                           
   457                           ; 2 bytes @ 0xF
   458   000010                     	ds	1
   459   000011                     ??_UpdateClock:
   460                           
   461                           ; 1 bytes @ 0x10
   462   000011                     	ds	1
   463   000012                     ??_pad:
   464                           
   465                           ; 1 bytes @ 0x11
   466   000012                     	ds	1
   467   000013                     pad@i:
   468                           	callstack 0
   469                           
   470                           ; 2 bytes @ 0x12
   471   000013                     	ds	2
   472   000015                     dtoa@fp:
   473                           	callstack 0
   474                           
   475                           ; 1 bytes @ 0x14
   476   000015                     	ds	1
   477   000016                     dtoa@d:
   478                           	callstack 0
   479                           
   480                           ; 2 bytes @ 0x15
   481   000016                     	ds	1
   482   000017                     UpdateClock@DaysInMonth:
   483                           	callstack 0
   484                           
   485                           ; 24 bytes @ 0x16
   486   000017                     	ds	1
   487   000018                     _dtoa$1868:
   488                           	callstack 0
   489                           
   490                           ; 2 bytes @ 0x17
   491   000018                     	ds	2
   492   00001A                     dtoa@p:
   493                           	callstack 0
   494                           
   495                           ; 1 bytes @ 0x19
   496   00001A                     	ds	1
   497   00001B                     dtoa@w:
   498                           	callstack 0
   499                           
   500                           ; 2 bytes @ 0x1A
   501   00001B                     	ds	2
   502   00001D                     dtoa@s:
   503                           	callstack 0
   504                           
   505                           ; 1 bytes @ 0x1C
   506   00001D                     	ds	1
   507   00001E                     dtoa@i:
   508                           	callstack 0
   509                           
   510                           ; 2 bytes @ 0x1D
   511   00001E                     	ds	2
   512   000020                     vfpfcnvrt@fp:
   513                           	callstack 0
   514                           
   515                           ; 1 bytes @ 0x1F
   516   000020                     	ds	1
   517   000021                     vfpfcnvrt@fmt:
   518                           	callstack 0
   519                           
   520                           ; 1 bytes @ 0x20
   521   000021                     	ds	1
   522   000022                     vfpfcnvrt@ap:
   523                           	callstack 0
   524                           
   525                           ; 1 bytes @ 0x21
   526   000022                     	ds	1
   527   000023                     ??_vfpfcnvrt:
   528                           
   529                           ; 1 bytes @ 0x22
   530   000023                     	ds	2
   531   000025                     vfpfcnvrt@convarg:
   532                           	callstack 0
   533                           
   534                           ; 4 bytes @ 0x24
   535   000025                     	ds	4
   536   000029                     vfpfcnvrt@done:
   537                           	callstack 0
   538                           
   539                           ; 1 bytes @ 0x28
   540   000029                     	ds	1
   541   00002A                     vfpfcnvrt@cp:
   542                           	callstack 0
   543                           
   544                           ; 1 bytes @ 0x29
   545   00002A                     	ds	1
   546   00002B                     ?_vfprintf:
   547                           	callstack 0
   548   00002B                     vfprintf@fp:
   549                           	callstack 0
   550                           
   551                           ; 1 bytes @ 0x2A
   552   00002B                     	ds	1
   553   00002C                     vfprintf@fmt:
   554                           	callstack 0
   555                           
   556                           ; 1 bytes @ 0x2B
   557   00002C                     	ds	1
   558   00002D                     vfprintf@ap:
   559                           	callstack 0
   560                           
   561                           ; 1 bytes @ 0x2C
   562   00002D                     	ds	1
   563   00002E                     vfprintf@cfmt:
   564                           	callstack 0
   565                           
   566                           ; 1 bytes @ 0x2D
   567   00002E                     	ds	1
   568   00002F                     ?_sprintf:
   569                           	callstack 0
   570   00002F                     sprintf@s:
   571                           	callstack 0
   572                           
   573                           ; 1 bytes @ 0x2E
   574   00002F                     	ds	1
   575   000030                     sprintf@fmt:
   576                           	callstack 0
   577                           
   578                           ; 1 bytes @ 0x2F
   579   000030                     	ds	9
   580   000039                     sprintf@ap:
   581                           	callstack 0
   582                           
   583                           ; 1 bytes @ 0x38
   584   000039                     	ds	1
   585   00003A                     sprintf@f:
   586                           	callstack 0
   587                           
   588                           ; 12 bytes @ 0x39
   589   00003A                     	ds	12
   590   000046                     
   591                           ; 1 bytes @ 0x45
   592 ;;
   593 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   594 ;;
   595 ;; *************** function _main *****************
   596 ;; Defined at:
   597 ;;		line 30 in file "main.c"
   598 ;; Parameters:    Size  Location     Type
   599 ;;		None
   600 ;; Auto vars:     Size  Location     Type
   601 ;;  buf            20    0[BANK0 ] unsigned char [20]
   602 ;;  clock          16   22[BANK0 ] struct time_structure
   603 ;;  TestMode        2   20[BANK0 ] int 
   604 ;; Return value:  Size  Location     Type
   605 ;;                  1    wreg      void 
   606 ;; Registers used:
   607 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   608 ;; Tracked objects:
   609 ;;		On entry : 0/0
   610 ;;		On exit  : 0/0
   611 ;;		Unchanged: 0/0
   612 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   613 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   614 ;;      Locals:         0      38       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   615 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   616 ;;      Totals:         0      38       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   617 ;;Total ram usage:       38 bytes
   618 ;; Hardware stack levels required when called: 9
   619 ;; This function calls:
   620 ;;		_ADC_init
   621 ;;		_Interrupts_init
   622 ;;		_LCD_Init
   623 ;;		_LCD_sendstring
   624 ;;		_LCD_setline
   625 ;;		_LEDarray_disp_bin
   626 ;;		_LEDarray_init
   627 ;;		_Timer0_init
   628 ;;		_UpdateClock
   629 ;;		_sprintf
   630 ;; This function is called by:
   631 ;;		Startup code after reset
   632 ;; This function uses a non-reentrant model
   633 ;;
   634                           
   635                           	psect	text0
   636   001670                     __ptext0:
   637                           	callstack 0
   638   001670                     _main:
   639                           	callstack 22
   640   001670                     
   641                           ;main.c: 33:     LEDarray_init();
   642   001670  EC88  F00F         	call	_LEDarray_init	;wreg free
   643   001674                     
   644                           ;main.c: 34:     Timer0_init();
   645   001674  ECAD  F00F         	call	_Timer0_init	;wreg free
   646   001678                     
   647                           ;main.c: 35:     Interrupts_init();
   648   001678  ECDD  F00F         	call	_Interrupts_init	;wreg free
   649   00167C                     
   650                           ;main.c: 37:     LCD_Init();
   651   00167C  ECDB  F00B         	call	_LCD_Init	;wreg free
   652   001680                     
   653                           ;main.c: 38:     ADC_init();
   654   001680  ECBD  F00F         	call	_ADC_init	;wreg free
   655   001684                     
   656                           ;main.c: 40:     char buf[20];;main.c: 44:     TRISDbits.TRISD7 = 0;
   657   001684  9E84               	bcf	132,7,c	;volatile
   658   001686                     
   659                           ;main.c: 45:     LATDbits.LATD7 = 0;
   660   001686  9E7C               	bcf	124,7,c	;volatile
   661   001688                     
   662                           ;main.c: 48:     TRISHbits.TRISH3 = 0;
   663   001688  9688               	bcf	136,3,c	;volatile
   664   00168A                     
   665                           ;main.c: 49:     LATHbits.LATH3 = 0;
   666   00168A  9680               	bcf	128,3,c	;volatile
   667   00168C                     
   668                           ;main.c: 64:     struct time_structure clock;;main.c: 66:         GLOBALsecs = 55;
   669   00168C  0E00               	movlw	0
   670   00168E  0100               	movlb	0	; () banked
   671   001690  6FA7               	movwf	(_GLOBALsecs+1)& (0+255),b
   672   001692  0E37               	movlw	55
   673   001694  6FA6               	movwf	_GLOBALsecs& (0+255),b
   674   001696                     
   675                           ; BSR set to: 0
   676                           ;main.c: 76:         clock.minutes = 59;
   677   001696  0E00               	movlw	0
   678   001698  6F79               	movwf	(main@clock+3)& (0+255),b
   679   00169A  0E3B               	movlw	59
   680   00169C  6F78               	movwf	(main@clock+2)& (0+255),b
   681   00169E                     
   682                           ; BSR set to: 0
   683                           ;main.c: 77:         clock.hours = 0;
   684   00169E  0E00               	movlw	0
   685   0016A0  6F7B               	movwf	(main@clock+5)& (0+255),b
   686   0016A2  0E00               	movlw	0
   687   0016A4  6F7A               	movwf	(main@clock+4)& (0+255),b
   688   0016A6                     
   689                           ; BSR set to: 0
   690                           ;main.c: 78:         clock.days = 30;
   691   0016A6  0E00               	movlw	0
   692   0016A8  6F7D               	movwf	(main@clock+7)& (0+255),b
   693   0016AA  0E1E               	movlw	30
   694   0016AC  6F7C               	movwf	(main@clock+6)& (0+255),b
   695   0016AE                     
   696                           ; BSR set to: 0
   697                           ;main.c: 79:         clock.DoW = 7;
   698   0016AE  0E00               	movlw	0
   699   0016B0  6F7F               	movwf	(main@clock+9)& (0+255),b
   700   0016B2  0E07               	movlw	7
   701   0016B4  6F7E               	movwf	(main@clock+8)& (0+255),b
   702   0016B6                     
   703                           ; BSR set to: 0
   704                           ;main.c: 80:         clock.months = 10;
   705   0016B6  0E00               	movlw	0
   706   0016B8  6F81               	movwf	(main@clock+11)& (0+255),b
   707   0016BA  0E0A               	movlw	10
   708   0016BC  6F80               	movwf	(main@clock+10)& (0+255),b
   709   0016BE                     
   710                           ; BSR set to: 0
   711                           ;main.c: 81:         clock.years = 2022;
   712   0016BE  0E07               	movlw	7
   713   0016C0  6F83               	movwf	(main@clock+13)& (0+255),b
   714   0016C2  0EE6               	movlw	230
   715   0016C4  6F82               	movwf	(main@clock+12)& (0+255),b
   716   0016C6                     
   717                           ; BSR set to: 0
   718                           ;main.c: 82:         clock.DSTstate = 1;
   719   0016C6  0E00               	movlw	0
   720   0016C8  6F85               	movwf	(main@clock+15)& (0+255),b
   721   0016CA  0E01               	movlw	1
   722   0016CC  6F84               	movwf	(main@clock+14)& (0+255),b
   723   0016CE                     
   724                           ; BSR set to: 0
   725                           ;main.c: 94:         int TestMode = 1;
   726   0016CE  0E00               	movlw	0
   727   0016D0  6F75               	movwf	(main@TestMode+1)& (0+255),b
   728   0016D2  0E01               	movlw	1
   729   0016D4  6F74               	movwf	main@TestMode& (0+255),b
   730   0016D6                     
   731                           ; BSR set to: 0
   732                           ;main.c: 96:         clock.seconds = GLOBALsecs;
   733   0016D6  C0A6  F076         	movff	_GLOBALsecs,main@clock
   734   0016DA  C0A7  F077         	movff	_GLOBALsecs+1,main@clock+1
   735   0016DE                     
   736                           ; BSR set to: 0
   737                           ;main.c: 98:             clock.seconds = 0;
   738   0016DE  0E00               	movlw	0
   739   0016E0  6F77               	movwf	(main@clock+1)& (0+255),b
   740   0016E2  0E00               	movlw	0
   741   0016E4  6F76               	movwf	main@clock& (0+255),b
   742   0016E6                     
   743                           ; BSR set to: 0
   744                           ;main.c: 99:             GLOBALsecs = clock.hours;
   745   0016E6  C07A  F0A6         	movff	main@clock+4,_GLOBALsecs
   746   0016EA  C07B  F0A7         	movff	main@clock+5,_GLOBALsecs+1
   747   0016EE                     l2413:
   748                           
   749                           ;main.c: 105:         if (TestMode == 0){clock.seconds = GLOBALsecs;}
   750   0016EE  0100               	movlb	0	; () banked
   751   0016F0  5174               	movf	main@TestMode& (0+255),w,b
   752   0016F2  1175               	iorwf	(main@TestMode+1)& (0+255),w,b
   753   0016F4  A4D8               	btfss	status,2,c
   754   0016F6  EF7F  F00B         	goto	u2141
   755   0016FA  EF81  F00B         	goto	u2140
   756   0016FE                     u2141:
   757   0016FE  EF85  F00B         	goto	l2417
   758   001702                     u2140:
   759   001702                     
   760                           ; BSR set to: 0
   761   001702  C0A6  F076         	movff	_GLOBALsecs,main@clock
   762   001706  C0A7  F077         	movff	_GLOBALsecs+1,main@clock+1
   763   00170A                     l2417:
   764                           
   765                           ; BSR set to: 0
   766                           ;main.c: 107:         UpdateClock(&GLOBALsecs, &clock.minutes, &clock.hours, &clock.days
      +                          , &clock.DoW, &clock.months, &clock.years, &clock.DSTstate, TestMode);
   767   00170A  0EA6               	movlw	low _GLOBALsecs
   768   00170C  6E07               	movwf	UpdateClock@seconds^0,c
   769   00170E  0E78               	movlw	low (main@clock+2)
   770   001710  6E08               	movwf	UpdateClock@minutes^0,c
   771   001712  0E7A               	movlw	low (main@clock+4)
   772   001714  6E09               	movwf	UpdateClock@hours^0,c
   773   001716  0E7C               	movlw	low (main@clock+6)
   774   001718  6E0A               	movwf	UpdateClock@days^0,c
   775   00171A  0E7E               	movlw	low (main@clock+8)
   776   00171C  6E0B               	movwf	UpdateClock@DoW^0,c
   777   00171E  0E80               	movlw	low (main@clock+10)
   778   001720  6E0C               	movwf	UpdateClock@months^0,c
   779   001722  0E82               	movlw	low (main@clock+12)
   780   001724  6E0D               	movwf	UpdateClock@years^0,c
   781   001726  0E84               	movlw	low (main@clock+14)
   782   001728  6E0E               	movwf	UpdateClock@DSTstate^0,c
   783   00172A  C074  F00F         	movff	main@TestMode,UpdateClock@TestMode
   784   00172E  C075  F010         	movff	main@TestMode+1,UpdateClock@TestMode+1
   785   001732  EC23  F007         	call	_UpdateClock	;wreg free
   786   001736                     
   787                           ;main.c: 115:         LEDarray_disp_bin(clock.hours);
   788   001736  C07A  F001         	movff	main@clock+4,LEDarray_disp_bin@number
   789   00173A  C07B  F002         	movff	main@clock+5,LEDarray_disp_bin@number+1
   790   00173E  EC6B  F00C         	call	_LEDarray_disp_bin	;wreg free
   791   001742                     
   792                           ;main.c: 119:         LCD_setline(1);
   793   001742  0E01               	movlw	1
   794   001744  EC0D  F00F         	call	_LCD_setline
   795   001748                     
   796                           ;main.c: 121:         sprintf(buf, "Time:%02d:%02d:%02d D%01d",clock.hours, clock.minute
      +                          s, clock.seconds, clock.DoW);
   797   001748  0E60               	movlw	low main@buf
   798   00174A  6E2F               	movwf	sprintf@s^0,c
   799   00174C  0E01               	movlw	low STR_1
   800   00174E  6E30               	movwf	sprintf@fmt^0,c
   801   001750  C07A  F031         	movff	main@clock+4,?_sprintf+2
   802   001754  C07B  F032         	movff	main@clock+5,?_sprintf+3
   803   001758  C078  F033         	movff	main@clock+2,?_sprintf+4
   804   00175C  C079  F034         	movff	main@clock+3,?_sprintf+5
   805   001760  C076  F035         	movff	main@clock,?_sprintf+6
   806   001764  C077  F036         	movff	main@clock+1,?_sprintf+7
   807   001768  C07E  F037         	movff	main@clock+8,?_sprintf+8
   808   00176C  C07F  F038         	movff	main@clock+9,?_sprintf+9
   809   001770  EC2A  F00F         	call	_sprintf	;wreg free
   810   001774                     
   811                           ;main.c: 122:         LCD_sendstring(buf);
   812   001774  0E60               	movlw	low main@buf
   813   001776  6E04               	movwf	LCD_sendstring@string^0,c
   814   001778  EC5E  F00F         	call	_LCD_sendstring	;wreg free
   815   00177C                     
   816                           ;main.c: 123:         LCD_setline(2);
   817   00177C  0E02               	movlw	2
   818   00177E  EC0D  F00F         	call	_LCD_setline
   819   001782                     
   820                           ;main.c: 125:         sprintf(buf, "Date:%02d/%02d/%04d",clock.days, clock.months, clock
      +                          .years);
   821   001782  0E60               	movlw	low main@buf
   822   001784  6E2F               	movwf	sprintf@s^0,c
   823   001786  0E30               	movlw	low STR_2
   824   001788  6E30               	movwf	sprintf@fmt^0,c
   825   00178A  C07C  F031         	movff	main@clock+6,?_sprintf+2
   826   00178E  C07D  F032         	movff	main@clock+7,?_sprintf+3
   827   001792  C080  F033         	movff	main@clock+10,?_sprintf+4
   828   001796  C081  F034         	movff	main@clock+11,?_sprintf+5
   829   00179A  C082  F035         	movff	main@clock+12,?_sprintf+6
   830   00179E  C083  F036         	movff	main@clock+13,?_sprintf+7
   831   0017A2  EC2A  F00F         	call	_sprintf	;wreg free
   832   0017A6                     
   833                           ;main.c: 126:         LCD_sendstring(buf);
   834   0017A6  0E60               	movlw	low main@buf
   835   0017A8  6E04               	movwf	LCD_sendstring@string^0,c
   836   0017AA  EC5E  F00F         	call	_LCD_sendstring	;wreg free
   837   0017AE  EF77  F00B         	goto	l2413
   838   0017B2  EF18  F000         	goto	start
   839   0017B6                     __end_of_main:
   840                           	callstack 0
   841                           
   842 ;; *************** function _sprintf *****************
   843 ;; Defined at:
   844 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\nf_sprintf.c"
   845 ;; Parameters:    Size  Location     Type
   846 ;;  s               1   46[COMRAM] PTR unsigned char 
   847 ;;		 -> main@buf(20), 
   848 ;;  fmt             1   47[COMRAM] PTR const unsigned char 
   849 ;;		 -> STR_3(21), STR_2(20), STR_1(26), 
   850 ;; Auto vars:     Size  Location     Type
   851 ;;  f              12   57[COMRAM] struct _IO_FILE
   852 ;;  ret             2    0        int 
   853 ;;  ap              1   56[COMRAM] PTR void [1]
   854 ;;		 -> ?_sprintf(2), 
   855 ;; Return value:  Size  Location     Type
   856 ;;                  2   46[COMRAM] int 
   857 ;; Registers used:
   858 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   859 ;; Tracked objects:
   860 ;;		On entry : 0/0
   861 ;;		On exit  : 0/0
   862 ;;		Unchanged: 0/0
   863 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   864 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   865 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   866 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   867 ;;      Totals:        23       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   868 ;;Total ram usage:       23 bytes
   869 ;; Hardware stack levels used: 1
   870 ;; Hardware stack levels required when called: 8
   871 ;; This function calls:
   872 ;;		_vfprintf
   873 ;; This function is called by:
   874 ;;		_main
   875 ;;		_ADC2String
   876 ;; This function uses a non-reentrant model
   877 ;;
   878                           
   879                           	psect	text1
   880   001E54                     __ptext1:
   881                           	callstack 0
   882   001E54                     _sprintf:
   883                           	callstack 22
   884   001E54  0E31               	movlw	low (?_sprintf+2)
   885   001E56  6E39               	movwf	sprintf@ap^0,c
   886   001E58  C02F  F03A         	movff	sprintf@s,sprintf@f
   887   001E5C  0E00               	movlw	0
   888   001E5E  6E3E               	movwf	(sprintf@f+4)^0,c
   889   001E60  0E00               	movlw	0
   890   001E62  6E3D               	movwf	(sprintf@f+3)^0,c
   891   001E64  0E00               	movlw	0
   892   001E66  6E45               	movwf	(sprintf@f+11)^0,c
   893   001E68  0E00               	movlw	0
   894   001E6A  6E44               	movwf	(sprintf@f+10)^0,c
   895   001E6C  0E3A               	movlw	low sprintf@f
   896   001E6E  6E2B               	movwf	vfprintf@fp^0,c
   897   001E70  C030  F02C         	movff	sprintf@fmt,vfprintf@fmt
   898   001E74  0E39               	movlw	low sprintf@ap
   899   001E76  6E2D               	movwf	vfprintf@ap^0,c
   900   001E78  ECAE  F00E         	call	_vfprintf	;wreg free
   901   001E7C  502F               	movf	sprintf@s^0,w,c
   902   001E7E  243D               	addwf	(sprintf@f+3)^0,w,c
   903   001E80  6ED9               	movwf	fsr2l,c
   904   001E82  6ADA               	clrf	fsr2h,c
   905   001E84  6ADF               	clrf	indf2,c
   906   001E86  0012               	return		;funcret
   907   001E88                     __end_of_sprintf:
   908                           	callstack 0
   909                           
   910 ;; *************** function _vfprintf *****************
   911 ;; Defined at:
   912 ;;		line 1817 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
   913 ;; Parameters:    Size  Location     Type
   914 ;;  fp              1   42[COMRAM] PTR struct _IO_FILE
   915 ;;		 -> sprintf@f(12), 
   916 ;;  fmt             1   43[COMRAM] PTR const unsigned char 
   917 ;;		 -> STR_3(21), STR_2(20), STR_1(26), 
   918 ;;  ap              1   44[COMRAM] PTR PTR void 
   919 ;;		 -> sprintf@ap(1), 
   920 ;; Auto vars:     Size  Location     Type
   921 ;;  cfmt            1   45[COMRAM] PTR unsigned char 
   922 ;;		 -> STR_3(21), STR_2(20), STR_1(26), 
   923 ;; Return value:  Size  Location     Type
   924 ;;                  2   42[COMRAM] int 
   925 ;; Registers used:
   926 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   927 ;; Tracked objects:
   928 ;;		On entry : 0/0
   929 ;;		On exit  : 0/0
   930 ;;		Unchanged: 0/0
   931 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   932 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   933 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   934 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   935 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   936 ;;Total ram usage:        4 bytes
   937 ;; Hardware stack levels used: 1
   938 ;; Hardware stack levels required when called: 7
   939 ;; This function calls:
   940 ;;		_vfpfcnvrt
   941 ;; This function is called by:
   942 ;;		_sprintf
   943 ;; This function uses a non-reentrant model
   944 ;;
   945                           
   946                           	psect	text2
   947   001D5C                     __ptext2:
   948                           	callstack 0
   949   001D5C                     _vfprintf:
   950                           	callstack 22
   951   001D5C                     
   952                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1817: int vfprint
      +                          f(FILE *fp, const char *fmt, va_list ap);C:\Program Files\Microchip\xc8\v2.45\pic\source
      +                          s\c99\common\doprnt.c: 1818: {;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\comm
      +                          on\doprnt.c: 1820:     char *cfmt;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\
      +                          common\doprnt.c: 1822:     cfmt = (char *)fmt;
   953   001D5C  C02C  F02E         	movff	vfprintf@fmt,vfprintf@cfmt
   954                           
   955                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1826:     while (
      +                          *cfmt) {
   956   001D60  EFBA  F00E         	goto	l2161
   957   001D64                     l2159:
   958                           
   959                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1830:    vfpfcnvr
      +                          t(fp, &cfmt, ap);
   960   001D64  C02B  F020         	movff	vfprintf@fp,vfpfcnvrt@fp
   961   001D68  0E2E               	movlw	low vfprintf@cfmt
   962   001D6A  6E21               	movwf	vfpfcnvrt@fmt^0,c
   963   001D6C  C02D  F022         	movff	vfprintf@ap,vfpfcnvrt@ap
   964   001D70  ECC3  F009         	call	_vfpfcnvrt	;wreg free
   965   001D74                     l2161:
   966                           
   967                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1826:     while (
      +                          *cfmt) {
   968   001D74  C02E  FFF6         	movff	vfprintf@cfmt,tblptrl
   969   001D78                     	if	1	;There is more than 1 active tblptr byte
   970   001D78  0E0E               	movlw	high __smallconst
   971   001D7A  6EF7               	movwf	tblptrh,c
   972   001D7C                     	endif
   973   001D7C                     	if	0	;tblptru may be non-zero
   974   001D7C                     	endif
   975   001D7C                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
   976   001D7C  0E00               	movlw	low (__smallconst shr (0+16))
   977   001D7E  6EF8               	movwf	tblptru,c
   978   001D80                     	endif
   979   001D80  0008               	tblrd		*
   980   001D82  50F5               	movf	tablat,w,c
   981   001D84  0900               	iorlw	0
   982   001D86  A4D8               	btfss	status,2,c
   983   001D88  EFC8  F00E         	goto	u1751
   984   001D8C  EFCA  F00E         	goto	u1750
   985   001D90                     u1751:
   986   001D90  EFB2  F00E         	goto	l2159
   987   001D94                     u1750:
   988   001D94                     
   989                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1835:  return 0;
   990   001D94  0E00               	movlw	0
   991   001D96  6E2C               	movwf	(?_vfprintf+1)^0,c
   992   001D98  0E00               	movlw	0
   993   001D9A  6E2B               	movwf	?_vfprintf^0,c
   994   001D9C  0012               	return		;funcret
   995   001D9E                     __end_of_vfprintf:
   996                           	callstack 0
   997                           
   998 ;; *************** function _vfpfcnvrt *****************
   999 ;; Defined at:
  1000 ;;		line 1177 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
  1001 ;; Parameters:    Size  Location     Type
  1002 ;;  fp              1   31[COMRAM] PTR struct _IO_FILE
  1003 ;;		 -> sprintf@f(12), 
  1004 ;;  fmt             1   32[COMRAM] PTR PTR unsigned char 
  1005 ;;		 -> vfprintf@cfmt(1), 
  1006 ;;  ap              1   33[COMRAM] PTR PTR void 
  1007 ;;		 -> sprintf@ap(1), 
  1008 ;; Auto vars:     Size  Location     Type
  1009 ;;  convarg         4   36[COMRAM] struct .
  1010 ;;  cp              1   41[COMRAM] PTR unsigned char 
  1011 ;;		 -> STR_3(21), STR_2(20), STR_1(26), 
  1012 ;;  done            1   40[COMRAM] _Bool 
  1013 ;;  c               1    0        unsigned char 
  1014 ;; Return value:  Size  Location     Type
  1015 ;;                  1    wreg      void 
  1016 ;; Registers used:
  1017 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1018 ;; Tracked objects:
  1019 ;;		On entry : 0/0
  1020 ;;		On exit  : 0/0
  1021 ;;		Unchanged: 0/0
  1022 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1023 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1024 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1025 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1026 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1027 ;;Total ram usage:       11 bytes
  1028 ;; Hardware stack levels used: 1
  1029 ;; Hardware stack levels required when called: 6
  1030 ;; This function calls:
  1031 ;;		_dtoa
  1032 ;;		_fputc
  1033 ;;		_read_prec_or_width
  1034 ;; This function is called by:
  1035 ;;		_vfprintf
  1036 ;; This function uses a non-reentrant model
  1037 ;;
  1038                           
  1039                           	psect	text3
  1040   001386                     __ptext3:
  1041                           	callstack 0
  1042   001386                     _vfpfcnvrt:
  1043                           	callstack 22
  1044   001386                     
  1045                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1177: vfpfcnvrt(F
      +                          ILE *fp, char *fmt[], va_list ap);C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\c
      +                          ommon\doprnt.c: 1178: {;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\dopr
      +                          nt.c: 1179:     char c, *cp;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common
      +                          \doprnt.c: 1180:     _Bool done;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\co
      +                          mmon\doprnt.c: 1188:  } convarg;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\co
      +                          mmon\doprnt.c: 1201:     if ((*fmt)[0] == '%') {
  1046   001386  5021               	movf	vfpfcnvrt@fmt^0,w,c
  1047   001388  6ED9               	movwf	fsr2l,c
  1048   00138A  6ADA               	clrf	fsr2h,c
  1049   00138C  CFDF FFF6          	movff	indf2,tblptrl
  1050   001390                     	if	1	;There is more than 1 active tblptr byte
  1051   001390  0E0E               	movlw	high __smallconst
  1052   001392  6EF7               	movwf	tblptrh,c
  1053   001394                     	endif
  1054   001394                     	if	0	;tblptru may be non-zero
  1055   001394                     	endif
  1056   001394                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1057   001394  0E00               	movlw	low (__smallconst shr (0+16))
  1058   001396  6EF8               	movwf	tblptru,c
  1059   001398                     	endif
  1060   001398  0008               	tblrd		*
  1061   00139A  50F5               	movf	tablat,w,c
  1062   00139C  0A25               	xorlw	37
  1063   00139E  A4D8               	btfss	status,2,c
  1064   0013A0  EFD4  F009         	goto	u1691
  1065   0013A4  EFD6  F009         	goto	u1690
  1066   0013A8                     u1691:
  1067   0013A8  EF70  F00A         	goto	l2139
  1068   0013AC                     u1690:
  1069   0013AC                     
  1070                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1202:         ++*
      +                          fmt;
  1071   0013AC  5021               	movf	vfpfcnvrt@fmt^0,w,c
  1072   0013AE  6ED9               	movwf	fsr2l,c
  1073   0013B0  6ADA               	clrf	fsr2h,c
  1074   0013B2  2ADF               	incf	indf2,f,c
  1075   0013B4                     
  1076                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1204:         fla
      +                          gs = width = 0;
  1077   0013B4  0E00               	movlw	0
  1078   0013B6  6E47               	movwf	(_width+1)^0,c
  1079   0013B8  0E00               	movlw	0
  1080   0013BA  6E46               	movwf	_width^0,c
  1081   0013BC  C046  F04A         	movff	_width,_flags
  1082   0013C0                     
  1083                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1205:         pre
      +                          c = -1;
  1084   0013C0  6848               	setf	_prec^0,c
  1085   0013C2  6849               	setf	(_prec+1)^0,c
  1086   0013C4                     
  1087                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1209:         don
      +                          e = 0;
  1088   0013C4  0E00               	movlw	0
  1089   0013C6  6E29               	movwf	vfpfcnvrt@done^0,c
  1090                           
  1091                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1210:         whi
      +                          le (!done) {
  1092   0013C8  EF0C  F00A         	goto	l2113
  1093   0013CC                     l2103:
  1094                           
  1095                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1220:            
      +                                   flags |= (1 << 1);
  1096   0013CC  824A               	bsf	_flags^0,1,c
  1097   0013CE                     
  1098                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1221:            
      +                                   ++*fmt;
  1099   0013CE  5021               	movf	vfpfcnvrt@fmt^0,w,c
  1100   0013D0  6ED9               	movwf	fsr2l,c
  1101   0013D2  6ADA               	clrf	fsr2h,c
  1102   0013D4  2ADF               	incf	indf2,f,c
  1103                           
  1104                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1222:            
      +                                   break;
  1105   0013D6  EF0C  F00A         	goto	l2113
  1106   0013DA                     l2107:
  1107                           
  1108                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1243:            
      +                                   done = 1;
  1109   0013DA  0E01               	movlw	1
  1110   0013DC  6E29               	movwf	vfpfcnvrt@done^0,c
  1111                           
  1112                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1244:            
      +                                   break;
  1113   0013DE  EF0C  F00A         	goto	l2113
  1114   0013E2                     l2111:
  1115   0013E2  5021               	movf	vfpfcnvrt@fmt^0,w,c
  1116   0013E4  6ED9               	movwf	fsr2l,c
  1117   0013E6  6ADA               	clrf	fsr2h,c
  1118   0013E8  CFDF FFF6          	movff	indf2,tblptrl
  1119   0013EC                     	if	1	;There is more than 1 active tblptr byte
  1120   0013EC  0E0E               	movlw	high __smallconst
  1121   0013EE  6EF7               	movwf	tblptrh,c
  1122   0013F0                     	endif
  1123   0013F0                     	if	0	;tblptru may be non-zero
  1124   0013F0                     	endif
  1125   0013F0                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1126   0013F0  0E00               	movlw	low (__smallconst shr (0+16))
  1127   0013F2  6EF8               	movwf	tblptru,c
  1128   0013F4                     	endif
  1129   0013F4  0008               	tblrd		*
  1130   0013F6  50F5               	movf	tablat,w,c
  1131   0013F8  6E23               	movwf	??_vfpfcnvrt^0,c
  1132   0013FA  6A24               	clrf	(??_vfpfcnvrt+1)^0,c
  1133                           
  1134                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1135                           ; Switch size 1, requested type "simple"
  1136                           ; Number of cases is 1, Range of values is 0 to 0
  1137                           ; switch strategies available:
  1138                           ; Name         Instructions Cycles
  1139                           ; simple_byte            4     3 (average)
  1140                           ;	Chosen strategy is simple_byte
  1141   0013FC  5024               	movf	(??_vfpfcnvrt+1)^0,w,c
  1142   0013FE  0A00               	xorlw	0	; case 0
  1143   001400  B4D8               	btfsc	status,2,c
  1144   001402  EF05  F00A         	goto	l2597
  1145   001406  EFED  F009         	goto	l2107
  1146   00140A                     l2597:
  1147                           
  1148                           ; Switch size 1, requested type "simple"
  1149                           ; Number of cases is 1, Range of values is 48 to 48
  1150                           ; switch strategies available:
  1151                           ; Name         Instructions Cycles
  1152                           ; simple_byte            4     3 (average)
  1153                           ;	Chosen strategy is simple_byte
  1154   00140A  5023               	movf	??_vfpfcnvrt^0,w,c
  1155   00140C  0A30               	xorlw	48	; case 48
  1156   00140E  B4D8               	btfsc	status,2,c
  1157   001410  EFE6  F009         	goto	l2103
  1158   001414  EFED  F009         	goto	l2107
  1159   001418                     l2113:
  1160                           
  1161                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1210:         whi
      +                          le (!done) {
  1162   001418  5029               	movf	vfpfcnvrt@done^0,w,c
  1163   00141A  B4D8               	btfsc	status,2,c
  1164   00141C  EF12  F00A         	goto	u1701
  1165   001420  EF14  F00A         	goto	u1700
  1166   001424                     u1701:
  1167   001424  EFF1  F009         	goto	l2111
  1168   001428                     u1700:
  1169   001428                     
  1170                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1256:   width = r
      +                          ead_prec_or_width(fmt, ap);
  1171   001428  C021  F007         	movff	vfpfcnvrt@fmt,read_prec_or_width@fmt
  1172   00142C  C022  F008         	movff	vfpfcnvrt@ap,read_prec_or_width@ap
  1173   001430  EC89  F00D         	call	_read_prec_or_width	;wreg free
  1174   001434  C007  F046         	movff	?_read_prec_or_width,_width
  1175   001438  C008  F047         	movff	?_read_prec_or_width+1,_width+1
  1176   00143C                     
  1177                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1257:   if (width
      +                           < 0) {
  1178   00143C  BE47               	btfsc	(_width+1)^0,7,c
  1179   00143E  EF25  F00A         	goto	u1710
  1180   001442  EF23  F00A         	goto	u1711
  1181   001446                     u1711:
  1182   001446  EF2A  F00A         	goto	l2121
  1183   00144A                     u1710:
  1184   00144A                     
  1185                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1258:    flags |=
      +                           (1 << 0);
  1186   00144A  804A               	bsf	_flags^0,0,c
  1187                           
  1188                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1259:    width = 
      +                          -width;
  1189   00144C  6C46               	negf	_width^0,c
  1190   00144E  1E47               	comf	(_width+1)^0,f,c
  1191   001450  B0D8               	btfsc	status,0,c
  1192   001452  2A47               	incf	(_width+1)^0,f,c
  1193   001454                     l2121:
  1194                           
  1195                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1291:   cp = *fmt
      +                          ;
  1196   001454  5021               	movf	vfpfcnvrt@fmt^0,w,c
  1197   001456  6ED9               	movwf	fsr2l,c
  1198   001458  6ADA               	clrf	fsr2h,c
  1199   00145A  50DF               	movf	indf2,w,c
  1200   00145C  6E2A               	movwf	vfpfcnvrt@cp^0,c
  1201   00145E                     
  1202                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1361:   if (*cp =
      +                          = 'd' || *cp == 'i') {
  1203   00145E  C02A  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  1204   001462                     	if	1	;There is more than 1 active tblptr byte
  1205   001462  0E0E               	movlw	high __smallconst
  1206   001464  6EF7               	movwf	tblptrh,c
  1207   001466                     	endif
  1208   001466                     	if	0	;tblptru may be non-zero
  1209   001466                     	endif
  1210   001466                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1211   001466  0E00               	movlw	low (__smallconst shr (0+16))
  1212   001468  6EF8               	movwf	tblptru,c
  1213   00146A                     	endif
  1214   00146A  0008               	tblrd		*
  1215   00146C  50F5               	movf	tablat,w,c
  1216   00146E  0A64               	xorlw	100
  1217   001470  B4D8               	btfsc	status,2,c
  1218   001472  EF3D  F00A         	goto	u1721
  1219   001476  EF3F  F00A         	goto	u1720
  1220   00147A                     u1721:
  1221   00147A  EF4F  F00A         	goto	l2127
  1222   00147E                     u1720:
  1223   00147E  C02A  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  1224   001482                     	if	1	;There is more than 1 active tblptr byte
  1225   001482  0E0E               	movlw	high __smallconst
  1226   001484  6EF7               	movwf	tblptrh,c
  1227   001486                     	endif
  1228   001486                     	if	0	;tblptru may be non-zero
  1229   001486                     	endif
  1230   001486                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1231   001486  0E00               	movlw	low (__smallconst shr (0+16))
  1232   001488  6EF8               	movwf	tblptru,c
  1233   00148A                     	endif
  1234   00148A  0008               	tblrd		*
  1235   00148C  50F5               	movf	tablat,w,c
  1236   00148E  0A69               	xorlw	105
  1237   001490  A4D8               	btfss	status,2,c
  1238   001492  EF4D  F00A         	goto	u1731
  1239   001496  EF4F  F00A         	goto	u1730
  1240   00149A                     u1731:
  1241   00149A  EF6A  F00A         	goto	l2135
  1242   00149E                     u1730:
  1243   00149E                     l2127:
  1244                           
  1245                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1404:    convarg.
      +                          sint = (vfpf_sint_t)(int)(*(int *)__va_arg(*(int **)ap, (int)0));
  1246   00149E  5022               	movf	vfpfcnvrt@ap^0,w,c
  1247   0014A0  6ED9               	movwf	fsr2l,c
  1248   0014A2  6ADA               	clrf	fsr2h,c
  1249   0014A4  0E02               	movlw	2
  1250   0014A6  26DF               	addwf	indf2,f,c
  1251   0014A8  5CDF               	subwf	indf2,w,c
  1252   0014AA  6ED9               	movwf	fsr2l,c
  1253   0014AC  6ADA               	clrf	fsr2h,c
  1254   0014AE  CFDE F025          	movff	postinc2,vfpfcnvrt@convarg
  1255   0014B2  CFDE F026          	movff	postinc2,vfpfcnvrt@convarg+1
  1256   0014B6                     
  1257                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1406:    *fmt = c
      +                          p+1;
  1258   0014B6  5021               	movf	vfpfcnvrt@fmt^0,w,c
  1259   0014B8  6ED9               	movwf	fsr2l,c
  1260   0014BA  6ADA               	clrf	fsr2h,c
  1261   0014BC  282A               	incf	vfpfcnvrt@cp^0,w,c
  1262   0014BE  6EDF               	movwf	indf2,c
  1263   0014C0                     
  1264                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1432:    return (
      +                          void) dtoa(fp, convarg.sint);;	Return value of _vfpfcnvrt is never used
  1265   0014C0  C020  F015         	movff	vfpfcnvrt@fp,dtoa@fp
  1266   0014C4  C025  F016         	movff	vfpfcnvrt@convarg,dtoa@d
  1267   0014C8  C026  F017         	movff	vfpfcnvrt@convarg+1,dtoa@d+1
  1268   0014CC  EC84  F00A         	call	_dtoa	;wreg free
  1269   0014D0  EF83  F00A         	goto	l1051
  1270   0014D4                     l2135:
  1271                           
  1272                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1806:         ++*
      +                          fmt;
  1273   0014D4  5021               	movf	vfpfcnvrt@fmt^0,w,c
  1274   0014D6  6ED9               	movwf	fsr2l,c
  1275   0014D8  6ADA               	clrf	fsr2h,c
  1276   0014DA  2ADF               	incf	indf2,f,c
  1277   0014DC  EF83  F00A         	goto	l1051
  1278   0014E0                     l2139:
  1279                           
  1280                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1811:     fputc((
      +                          int)(*fmt)[0], fp);
  1281   0014E0  5021               	movf	vfpfcnvrt@fmt^0,w,c
  1282   0014E2  6ED9               	movwf	fsr2l,c
  1283   0014E4  6ADA               	clrf	fsr2h,c
  1284   0014E6  CFDF FFF6          	movff	indf2,tblptrl
  1285   0014EA                     	if	1	;There is more than 1 active tblptr byte
  1286   0014EA  0E0E               	movlw	high __smallconst
  1287   0014EC  6EF7               	movwf	tblptrh,c
  1288   0014EE                     	endif
  1289   0014EE                     	if	0	;tblptru may be non-zero
  1290   0014EE                     	endif
  1291   0014EE                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1292   0014EE  0E00               	movlw	low (__smallconst shr (0+16))
  1293   0014F0  6EF8               	movwf	tblptru,c
  1294   0014F2                     	endif
  1295   0014F2  0008               	tblrd		*
  1296   0014F4  50F5               	movf	tablat,w,c
  1297   0014F6  6E01               	movwf	fputc@c^0,c
  1298   0014F8  6A02               	clrf	(fputc@c+1)^0,c
  1299   0014FA  C020  F003         	movff	vfpfcnvrt@fp,fputc@fp
  1300   0014FE  ECE0  F00D         	call	_fputc	;wreg free
  1301   001502  EF6A  F00A         	goto	l2135
  1302   001506                     l1051:
  1303   001506  0012               	return		;funcret
  1304   001508                     __end_of_vfpfcnvrt:
  1305                           	callstack 0
  1306                           
  1307 ;; *************** function _read_prec_or_width *****************
  1308 ;; Defined at:
  1309 ;;		line 1158 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
  1310 ;; Parameters:    Size  Location     Type
  1311 ;;  fmt             1    6[COMRAM] PTR PTR const unsigned c
  1312 ;;		 -> vfprintf@cfmt(1), 
  1313 ;;  ap              1    7[COMRAM] PTR PTR void [1]
  1314 ;;		 -> sprintf@ap(1), 
  1315 ;; Auto vars:     Size  Location     Type
  1316 ;;  c               1    8[COMRAM] unsigned char 
  1317 ;;  n               2    9[COMRAM] int 
  1318 ;; Return value:  Size  Location     Type
  1319 ;;                  2    6[COMRAM] int 
  1320 ;; Registers used:
  1321 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1322 ;; Tracked objects:
  1323 ;;		On entry : 0/0
  1324 ;;		On exit  : 0/0
  1325 ;;		Unchanged: 0/0
  1326 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1327 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1328 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1329 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1330 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1331 ;;Total ram usage:        5 bytes
  1332 ;; Hardware stack levels used: 1
  1333 ;; Hardware stack levels required when called: 2
  1334 ;; This function calls:
  1335 ;;		___wmul
  1336 ;; This function is called by:
  1337 ;;		_vfpfcnvrt
  1338 ;; This function uses a non-reentrant model
  1339 ;;
  1340                           
  1341                           	psect	text4
  1342   001B12                     __ptext4:
  1343                           	callstack 0
  1344   001B12                     _read_prec_or_width:
  1345                           	callstack 25
  1346   001B12                     
  1347                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1159:     int n =
      +                           0;
  1348   001B12  0E00               	movlw	0
  1349   001B14  6E0B               	movwf	(read_prec_or_width@n+1)^0,c
  1350   001B16  0E00               	movlw	0
  1351   001B18  6E0A               	movwf	read_prec_or_width@n^0,c
  1352   001B1A                     
  1353                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1160:     if ((*f
      +                          mt)[0] == '*') {
  1354   001B1A  5007               	movf	read_prec_or_width@fmt^0,w,c
  1355   001B1C  6ED9               	movwf	fsr2l,c
  1356   001B1E  6ADA               	clrf	fsr2h,c
  1357   001B20  CFDF FFF6          	movff	indf2,tblptrl
  1358   001B24                     	if	1	;There is more than 1 active tblptr byte
  1359   001B24  0E0E               	movlw	high __smallconst
  1360   001B26  6EF7               	movwf	tblptrh,c
  1361   001B28                     	endif
  1362   001B28                     	if	0	;tblptru may be non-zero
  1363   001B28                     	endif
  1364   001B28                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1365   001B28  0E00               	movlw	low (__smallconst shr (0+16))
  1366   001B2A  6EF8               	movwf	tblptru,c
  1367   001B2C                     	endif
  1368   001B2C  0008               	tblrd		*
  1369   001B2E  50F5               	movf	tablat,w,c
  1370   001B30  0A2A               	xorlw	42
  1371   001B32  A4D8               	btfss	status,2,c
  1372   001B34  EF9E  F00D         	goto	u1631
  1373   001B38  EFA0  F00D         	goto	u1630
  1374   001B3C                     u1631:
  1375   001B3C  EFC6  F00D         	goto	l2071
  1376   001B40                     u1630:
  1377   001B40                     
  1378                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1161:         ++*
      +                          fmt;
  1379   001B40  5007               	movf	read_prec_or_width@fmt^0,w,c
  1380   001B42  6ED9               	movwf	fsr2l,c
  1381   001B44  6ADA               	clrf	fsr2h,c
  1382   001B46  2ADF               	incf	indf2,f,c
  1383   001B48                     
  1384                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1162:         n =
      +                           (*(int *)__va_arg(*(int **)*ap, (int)0));
  1385   001B48  5008               	movf	read_prec_or_width@ap^0,w,c
  1386   001B4A  6ED9               	movwf	fsr2l,c
  1387   001B4C  6ADA               	clrf	fsr2h,c
  1388   001B4E  0E02               	movlw	2
  1389   001B50  26DF               	addwf	indf2,f,c
  1390   001B52  5CDF               	subwf	indf2,w,c
  1391   001B54  6ED9               	movwf	fsr2l,c
  1392   001B56  6ADA               	clrf	fsr2h,c
  1393   001B58  CFDE F00A          	movff	postinc2,read_prec_or_width@n
  1394   001B5C  CFDE F00B          	movff	postinc2,read_prec_or_width@n+1
  1395                           
  1396                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1163:     } else 
      +                          {
  1397   001B60  EFDB  F00D         	goto	l1032
  1398   001B64                     l2067:
  1399                           
  1400                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1166:            
      +                           n = n * 10 + c;
  1401   001B64  C00A  F001         	movff	read_prec_or_width@n,___wmul@multiplier
  1402   001B68  C00B  F002         	movff	read_prec_or_width@n+1,___wmul@multiplier+1
  1403   001B6C  0E00               	movlw	0
  1404   001B6E  6E04               	movwf	(___wmul@multiplicand+1)^0,c
  1405   001B70  0E0A               	movlw	10
  1406   001B72  6E03               	movwf	___wmul@multiplicand^0,c
  1407   001B74  EC75  F00F         	call	___wmul	;wreg free
  1408   001B78  5009               	movf	read_prec_or_width@c^0,w,c
  1409   001B7A  2401               	addwf	?___wmul^0,w,c
  1410   001B7C  6E0A               	movwf	read_prec_or_width@n^0,c
  1411   001B7E  0E00               	movlw	0
  1412   001B80  2002               	addwfc	(?___wmul+1)^0,w,c
  1413   001B82  6E0B               	movwf	(read_prec_or_width@n+1)^0,c
  1414   001B84                     
  1415                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1167:            
      +                           ++*fmt;
  1416   001B84  5007               	movf	read_prec_or_width@fmt^0,w,c
  1417   001B86  6ED9               	movwf	fsr2l,c
  1418   001B88  6ADA               	clrf	fsr2h,c
  1419   001B8A  2ADF               	incf	indf2,f,c
  1420   001B8C                     l2071:
  1421                           
  1422                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1165:         whi
      +                          le ((c = ((unsigned)(*fmt)[0]) - '0') < 10) {
  1423   001B8C  5007               	movf	read_prec_or_width@fmt^0,w,c
  1424   001B8E  6ED9               	movwf	fsr2l,c
  1425   001B90  6ADA               	clrf	fsr2h,c
  1426   001B92  CFDF FFF6          	movff	indf2,tblptrl
  1427   001B96                     	if	1	;There is more than 1 active tblptr byte
  1428   001B96  0E0E               	movlw	high __smallconst
  1429   001B98  6EF7               	movwf	tblptrh,c
  1430   001B9A                     	endif
  1431   001B9A                     	if	0	;tblptru may be non-zero
  1432   001B9A                     	endif
  1433   001B9A                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1434   001B9A  0E00               	movlw	low (__smallconst shr (0+16))
  1435   001B9C  6EF8               	movwf	tblptru,c
  1436   001B9E                     	endif
  1437   001B9E  0008               	tblrd		*
  1438   001BA0  50F5               	movf	tablat,w,c
  1439   001BA2  0FD0               	addlw	208
  1440   001BA4  6E09               	movwf	read_prec_or_width@c^0,c
  1441   001BA6  0E09               	movlw	9
  1442   001BA8  6409               	cpfsgt	read_prec_or_width@c^0,c
  1443   001BAA  EFD9  F00D         	goto	u1641
  1444   001BAE  EFDB  F00D         	goto	u1640
  1445   001BB2                     u1641:
  1446   001BB2  EFB2  F00D         	goto	l2067
  1447   001BB6                     u1640:
  1448   001BB6                     l1032:
  1449                           
  1450                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1170:     return 
      +                          n;
  1451   001BB6  C00A  F007         	movff	read_prec_or_width@n,?_read_prec_or_width
  1452   001BBA  C00B  F008         	movff	read_prec_or_width@n+1,?_read_prec_or_width+1
  1453   001BBE  0012               	return		;funcret
  1454   001BC0                     __end_of_read_prec_or_width:
  1455                           	callstack 0
  1456                           
  1457 ;; *************** function ___wmul *****************
  1458 ;; Defined at:
  1459 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\Umul16.c"
  1460 ;; Parameters:    Size  Location     Type
  1461 ;;  multiplier      2    0[COMRAM] unsigned int 
  1462 ;;  multiplicand    2    2[COMRAM] unsigned int 
  1463 ;; Auto vars:     Size  Location     Type
  1464 ;;  product         2    4[COMRAM] unsigned int 
  1465 ;; Return value:  Size  Location     Type
  1466 ;;                  2    0[COMRAM] unsigned int 
  1467 ;; Registers used:
  1468 ;;		wreg, status,2, status,0, prodl, prodh
  1469 ;; Tracked objects:
  1470 ;;		On entry : 0/0
  1471 ;;		On exit  : 0/0
  1472 ;;		Unchanged: 0/0
  1473 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1474 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1475 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1476 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1477 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1478 ;;Total ram usage:        6 bytes
  1479 ;; Hardware stack levels used: 1
  1480 ;; Hardware stack levels required when called: 1
  1481 ;; This function calls:
  1482 ;;		Nothing
  1483 ;; This function is called by:
  1484 ;;		_read_prec_or_width
  1485 ;;		_LEDarray_disp_light
  1486 ;;		_LEDarray_disp_PPM
  1487 ;;		_ADC2String
  1488 ;; This function uses a non-reentrant model
  1489 ;;
  1490                           
  1491                           	psect	text5
  1492   001EEA                     __ptext5:
  1493                           	callstack 0
  1494   001EEA                     ___wmul:
  1495                           	callstack 25
  1496   001EEA  5001               	movf	___wmul@multiplier^0,w,c
  1497   001EEC  0203               	mulwf	___wmul@multiplicand^0,c
  1498   001EEE  CFF3 F005          	movff	prodl,___wmul@product
  1499   001EF2  CFF4 F006          	movff	prodh,___wmul@product+1
  1500   001EF6  5001               	movf	___wmul@multiplier^0,w,c
  1501   001EF8  0204               	mulwf	(___wmul@multiplicand+1)^0,c
  1502   001EFA  50F3               	movf	243,w,c
  1503   001EFC  2606               	addwf	(___wmul@product+1)^0,f,c
  1504   001EFE  5002               	movf	(___wmul@multiplier+1)^0,w,c
  1505   001F00  0203               	mulwf	___wmul@multiplicand^0,c
  1506   001F02  50F3               	movf	243,w,c
  1507   001F04  2606               	addwf	(___wmul@product+1)^0,f,c
  1508   001F06  C005  F001         	movff	___wmul@product,?___wmul
  1509   001F0A  C006  F002         	movff	___wmul@product+1,?___wmul+1
  1510   001F0E  0012               	return		;funcret
  1511   001F10                     __end_of___wmul:
  1512                           	callstack 0
  1513                           
  1514 ;; *************** function _dtoa *****************
  1515 ;; Defined at:
  1516 ;;		line 513 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
  1517 ;; Parameters:    Size  Location     Type
  1518 ;;  fp              1   20[COMRAM] PTR struct _IO_FILE
  1519 ;;		 -> sprintf@f(12), 
  1520 ;;  d               2   21[COMRAM] int 
  1521 ;; Auto vars:     Size  Location     Type
  1522 ;;  i               2   29[COMRAM] int 
  1523 ;;  w               2   26[COMRAM] int 
  1524 ;;  s               1   28[COMRAM] unsigned char 
  1525 ;;  p               1   25[COMRAM] _Bool 
  1526 ;; Return value:  Size  Location     Type
  1527 ;;                  1    wreg      void 
  1528 ;; Registers used:
  1529 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1530 ;; Tracked objects:
  1531 ;;		On entry : 0/0
  1532 ;;		On exit  : 0/0
  1533 ;;		Unchanged: 0/0
  1534 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1535 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1536 ;;      Locals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1537 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1538 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1539 ;;Total ram usage:       11 bytes
  1540 ;; Hardware stack levels used: 1
  1541 ;; Hardware stack levels required when called: 5
  1542 ;; This function calls:
  1543 ;;		___awdiv
  1544 ;;		___awmod
  1545 ;;		_abs
  1546 ;;		_pad
  1547 ;; This function is called by:
  1548 ;;		_vfpfcnvrt
  1549 ;; This function uses a non-reentrant model
  1550 ;;
  1551                           
  1552                           	psect	text6
  1553   001508                     __ptext6:
  1554                           	callstack 0
  1555   001508                     _dtoa:
  1556                           	callstack 22
  1557   001508                     
  1558                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 513: static void 
      +                          dtoa(FILE *fp, vfpf_sint_t d);C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\commo
      +                          n\doprnt.c: 514: {;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c:
      +                           515:  char s;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 516
      +                          :     int i, w;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 52
      +                          0:  _Bool p = 1;
  1559   001508  0E01               	movlw	1
  1560   00150A  6E1A               	movwf	dtoa@p^0,c
  1561   00150C                     
  1562                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 524:     s = d < 
      +                          0 ? 1 : 0;
  1563   00150C  BE17               	btfsc	(dtoa@d+1)^0,7,c
  1564   00150E  EF8B  F00A         	goto	u1531
  1565   001512  EF8E  F00A         	goto	u1530
  1566   001516                     u1531:
  1567   001516  0E01               	movlw	1
  1568   001518  EF8F  F00A         	goto	u1540
  1569   00151C                     u1530:
  1570   00151C  0E00               	movlw	0
  1571   00151E                     u1540:
  1572   00151E  6E1D               	movwf	dtoa@s^0,c
  1573   001520                     
  1574                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 535:     w = widt
      +                          h;
  1575   001520  C046  F01B         	movff	_width,dtoa@w
  1576   001524  C047  F01C         	movff	_width+1,dtoa@w+1
  1577   001528                     
  1578                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 536:     if (s
  1579   001528  501D               	movf	dtoa@s^0,w,c
  1580   00152A  B4D8               	btfsc	status,2,c
  1581   00152C  EF9A  F00A         	goto	u1551
  1582   001530  EF9C  F00A         	goto	u1550
  1583   001534                     u1551:
  1584   001534  EFB3  F00A         	goto	l1015
  1585   001538                     u1550:
  1586   001538                     
  1587                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 540:     ) {;C:\P
      +                          rogram Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 541:         --w;
  1588   001538  061B               	decf	dtoa@w^0,f,c
  1589   00153A  A0D8               	btfss	status,0,c
  1590   00153C  061C               	decf	(dtoa@w+1)^0,f,c
  1591   00153E                     
  1592                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 542:   s = s ? '-
      +                          ' : '+';
  1593   00153E  501D               	movf	dtoa@s^0,w,c
  1594   001540  A4D8               	btfss	status,2,c
  1595   001542  EFA5  F00A         	goto	u1561
  1596   001546  EFA7  F00A         	goto	u1560
  1597   00154A                     u1561:
  1598   00154A  EFAD  F00A         	goto	l2023
  1599   00154E                     u1560:
  1600   00154E  0E00               	movlw	0
  1601   001550  6E19               	movwf	(_dtoa$1868+1)^0,c
  1602   001552  0E2B               	movlw	43
  1603   001554  6E18               	movwf	_dtoa$1868^0,c
  1604   001556  EFB1  F00A         	goto	l2025
  1605   00155A                     l2023:
  1606   00155A  0E00               	movlw	0
  1607   00155C  6E19               	movwf	(_dtoa$1868+1)^0,c
  1608   00155E  0E2D               	movlw	45
  1609   001560  6E18               	movwf	_dtoa$1868^0,c
  1610   001562                     l2025:
  1611   001562  C018  F01D         	movff	_dtoa$1868,dtoa@s
  1612   001566                     l1015:
  1613                           
  1614                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 552:     i = size
      +                          of(dbuf) - 1;
  1615   001566  0E00               	movlw	0
  1616   001568  6E1F               	movwf	(dtoa@i+1)^0,c
  1617   00156A  0E1F               	movlw	31
  1618   00156C  6E1E               	movwf	dtoa@i^0,c
  1619   00156E                     
  1620                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 553:     dbuf[i] 
      +                          = '\0';
  1621   00156E  0E00               	movlw	0
  1622   001570  0100               	movlb	0	; () banked
  1623   001572  6FA5               	movwf	(_dbuf+31)& (0+255),b
  1624                           
  1625                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 554:     while (!
      +                          (i < 1) && (d != 0
  1626   001574  EFE9  F00A         	goto	l2039
  1627   001578                     l2029:
  1628                           
  1629                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 563:     )) {;C:\
      +                          Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 564:         --i;
  1630   001578  061E               	decf	dtoa@i^0,f,c
  1631   00157A  A0D8               	btfss	status,0,c
  1632   00157C  061F               	decf	(dtoa@i+1)^0,f,c
  1633   00157E                     
  1634                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 565:         dbuf
      +                          [i] = (char)((int)'0' + abs(d % 10));
  1635   00157E  501E               	movf	dtoa@i^0,w,c
  1636   001580  0F86               	addlw	low _dbuf
  1637   001582  6ED9               	movwf	fsr2l,c
  1638   001584  6ADA               	clrf	fsr2h,c
  1639   001586  C016  F001         	movff	dtoa@d,___awmod@dividend
  1640   00158A  C017  F002         	movff	dtoa@d+1,___awmod@dividend+1
  1641   00158E  0E00               	movlw	0
  1642   001590  6E04               	movwf	(___awmod@divisor+1)^0,c
  1643   001592  0E0A               	movlw	10
  1644   001594  6E03               	movwf	___awmod@divisor^0,c
  1645   001596  EC31  F00D         	call	___awmod	;wreg free
  1646   00159A  C001  F007         	movff	?___awmod,abs@a
  1647   00159E  C002  F008         	movff	?___awmod+1,abs@a+1
  1648   0015A2  EC44  F00F         	call	_abs	;wreg free
  1649   0015A6  5007               	movf	?_abs^0,w,c
  1650   0015A8  0F30               	addlw	48
  1651   0015AA  6EDF               	movwf	indf2,c
  1652   0015AC                     
  1653                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 569:   p = 0;
  1654   0015AC  0E00               	movlw	0
  1655   0015AE  6E1A               	movwf	dtoa@p^0,c
  1656   0015B0                     
  1657                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 571:         --w;
  1658   0015B0  061B               	decf	dtoa@w^0,f,c
  1659   0015B2  A0D8               	btfss	status,0,c
  1660   0015B4  061C               	decf	(dtoa@w+1)^0,f,c
  1661   0015B6                     
  1662                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 572:         d = 
      +                          d / 10;
  1663   0015B6  C016  F001         	movff	dtoa@d,___awdiv@dividend
  1664   0015BA  C017  F002         	movff	dtoa@d+1,___awdiv@dividend+1
  1665   0015BE  0E00               	movlw	0
  1666   0015C0  6E04               	movwf	(___awdiv@divisor+1)^0,c
  1667   0015C2  0E0A               	movlw	10
  1668   0015C4  6E03               	movwf	___awdiv@divisor^0,c
  1669   0015C6  ECCF  F00C         	call	___awdiv	;wreg free
  1670   0015CA  C001  F016         	movff	?___awdiv,dtoa@d
  1671   0015CE  C002  F017         	movff	?___awdiv+1,dtoa@d+1
  1672   0015D2                     l2039:
  1673                           
  1674                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 554:     while (!
      +                          (i < 1) && (d != 0
  1675   0015D2  BE1F               	btfsc	(dtoa@i+1)^0,7,c
  1676   0015D4  EFF4  F00A         	goto	u1571
  1677   0015D8  501F               	movf	(dtoa@i+1)^0,w,c
  1678   0015DA  E108               	bnz	u1570
  1679   0015DC  041E               	decf	dtoa@i^0,w,c
  1680   0015DE  A0D8               	btfss	status,0,c
  1681   0015E0  EFF4  F00A         	goto	u1571
  1682   0015E4  EFF6  F00A         	goto	u1570
  1683   0015E8                     u1571:
  1684   0015E8  EF1B  F00B         	goto	l2049
  1685   0015EC                     u1570:
  1686   0015EC  5016               	movf	dtoa@d^0,w,c
  1687   0015EE  1017               	iorwf	(dtoa@d+1)^0,w,c
  1688   0015F0  A4D8               	btfss	status,2,c
  1689   0015F2  EFFD  F00A         	goto	u1581
  1690   0015F6  EFFF  F00A         	goto	u1580
  1691   0015FA                     u1581:
  1692   0015FA  EFBC  F00A         	goto	l2029
  1693   0015FE                     u1580:
  1694   0015FE  501A               	movf	dtoa@p^0,w,c
  1695   001600  A4D8               	btfss	status,2,c
  1696   001602  EF05  F00B         	goto	u1591
  1697   001606  EF07  F00B         	goto	u1590
  1698   00160A                     u1591:
  1699   00160A  EFBC  F00A         	goto	l2029
  1700   00160E                     u1590:
  1701   00160E  BE1C               	btfsc	(dtoa@w+1)^0,7,c
  1702   001610  EF12  F00B         	goto	u1601
  1703   001614  501C               	movf	(dtoa@w+1)^0,w,c
  1704   001616  E108               	bnz	u1600
  1705   001618  041B               	decf	dtoa@w^0,w,c
  1706   00161A  A0D8               	btfss	status,0,c
  1707   00161C  EF12  F00B         	goto	u1601
  1708   001620  EF14  F00B         	goto	u1600
  1709   001624                     u1601:
  1710   001624  EF1B  F00B         	goto	l2049
  1711   001628                     u1600:
  1712   001628  B24A               	btfsc	_flags^0,1,c
  1713   00162A  EF19  F00B         	goto	u1611
  1714   00162E  EF1B  F00B         	goto	u1610
  1715   001632                     u1611:
  1716   001632  EFBC  F00A         	goto	l2029
  1717   001636                     u1610:
  1718   001636                     l2049:
  1719                           
  1720                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 576:     if (s !=
      +                           0) {
  1721   001636  501D               	movf	dtoa@s^0,w,c
  1722   001638  B4D8               	btfsc	status,2,c
  1723   00163A  EF21  F00B         	goto	u1621
  1724   00163E  EF23  F00B         	goto	u1620
  1725   001642                     u1621:
  1726   001642  EF2C  F00B         	goto	l2055
  1727   001646                     u1620:
  1728   001646                     
  1729                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 577:         --i;
  1730   001646  061E               	decf	dtoa@i^0,f,c
  1731   001648  A0D8               	btfss	status,0,c
  1732   00164A  061F               	decf	(dtoa@i+1)^0,f,c
  1733   00164C                     
  1734                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 578:         dbuf
      +                          [i] = s;
  1735   00164C  501E               	movf	dtoa@i^0,w,c
  1736   00164E  0F86               	addlw	low _dbuf
  1737   001650  6ED9               	movwf	fsr2l,c
  1738   001652  6ADA               	clrf	fsr2h,c
  1739   001654  C01D  FFDF         	movff	dtoa@s,indf2
  1740   001658                     l2055:
  1741                           
  1742                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 582:     return (
      +                          void) pad(fp, &dbuf[i], w);
  1743   001658  C015  F00E         	movff	dtoa@fp,pad@fp
  1744   00165C  501E               	movf	dtoa@i^0,w,c
  1745   00165E  0F86               	addlw	low _dbuf
  1746   001660  6E0F               	movwf	pad@buf^0,c
  1747   001662  C01B  F010         	movff	dtoa@w,pad@p
  1748   001666  C01C  F011         	movff	dtoa@w+1,pad@p+1
  1749   00166A  EC35  F00E         	call	_pad	;wreg free
  1750   00166E  0012               	return		;funcret
  1751   001670                     __end_of_dtoa:
  1752                           	callstack 0
  1753                           
  1754 ;; *************** function _pad *****************
  1755 ;; Defined at:
  1756 ;;		line 193 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
  1757 ;; Parameters:    Size  Location     Type
  1758 ;;  fp              1   13[COMRAM] PTR struct _IO_FILE
  1759 ;;		 -> sprintf@f(12), 
  1760 ;;  buf             1   14[COMRAM] PTR unsigned char 
  1761 ;;		 -> dbuf(32), 
  1762 ;;  p               2   15[COMRAM] int 
  1763 ;; Auto vars:     Size  Location     Type
  1764 ;;  i               2   18[COMRAM] int 
  1765 ;; Return value:  Size  Location     Type
  1766 ;;                  1    wreg      void 
  1767 ;; Registers used:
  1768 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1769 ;; Tracked objects:
  1770 ;;		On entry : 0/0
  1771 ;;		On exit  : 0/0
  1772 ;;		Unchanged: 0/0
  1773 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1774 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1775 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1776 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1777 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1778 ;;Total ram usage:        7 bytes
  1779 ;; Hardware stack levels used: 1
  1780 ;; Hardware stack levels required when called: 4
  1781 ;; This function calls:
  1782 ;;		_fputc
  1783 ;;		_fputs
  1784 ;; This function is called by:
  1785 ;;		_dtoa
  1786 ;; This function uses a non-reentrant model
  1787 ;;
  1788                           
  1789                           	psect	text7
  1790   001C6A                     __ptext7:
  1791                           	callstack 0
  1792   001C6A                     _pad:
  1793                           	callstack 22
  1794   001C6A                     
  1795                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 193: static void 
      +                          pad(FILE *fp, char *buf, int p);C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\com
      +                          mon\doprnt.c: 194: {;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.
      +                          c: 195:     int i;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c:
      +                           199:     if (flags & (1 << 0)) {
  1796   001C6A  A04A               	btfss	_flags^0,0,c
  1797   001C6C  EF3A  F00E         	goto	u1481
  1798   001C70  EF3C  F00E         	goto	u1480
  1799   001C74                     u1481:
  1800   001C74  EF42  F00E         	goto	l1987
  1801   001C78                     u1480:
  1802   001C78                     
  1803                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 200:         fput
      +                          s((const char *)buf, fp);
  1804   001C78  C00F  F009         	movff	pad@buf,fputs@s
  1805   001C7C  C00E  F00A         	movff	pad@fp,fputs@fp
  1806   001C80  ECEF  F00E         	call	_fputs	;wreg free
  1807   001C84                     l1987:
  1808                           
  1809                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 205:  if (p < 0) 
      +                          {
  1810   001C84  BE11               	btfsc	(pad@p+1)^0,7,c
  1811   001C86  EF49  F00E         	goto	u1490
  1812   001C8A  EF47  F00E         	goto	u1491
  1813   001C8E                     u1491:
  1814   001C8E  EF4D  F00E         	goto	l1007
  1815   001C92                     u1490:
  1816   001C92                     
  1817                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 206:   p = 0;
  1818   001C92  0E00               	movlw	0
  1819   001C94  6E11               	movwf	(pad@p+1)^0,c
  1820   001C96  0E00               	movlw	0
  1821   001C98  6E10               	movwf	pad@p^0,c
  1822   001C9A                     l1007:
  1823                           
  1824                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 208:     i = 0;
  1825   001C9A  0E00               	movlw	0
  1826   001C9C  6E14               	movwf	(pad@i+1)^0,c
  1827   001C9E  0E00               	movlw	0
  1828   001CA0  6E13               	movwf	pad@i^0,c
  1829                           
  1830                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 209:     while (i
      +                           < p) {
  1831   001CA2  EF5D  F00E         	goto	l1995
  1832   001CA6                     l1991:
  1833                           
  1834                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 210:         fput
      +                          c(' ', fp);
  1835   001CA6  0E00               	movlw	0
  1836   001CA8  6E02               	movwf	(fputc@c+1)^0,c
  1837   001CAA  0E20               	movlw	32
  1838   001CAC  6E01               	movwf	fputc@c^0,c
  1839   001CAE  C00E  F003         	movff	pad@fp,fputc@fp
  1840   001CB2  ECE0  F00D         	call	_fputc	;wreg free
  1841   001CB6                     
  1842                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 211:         ++i;
  1843   001CB6  4A13               	infsnz	pad@i^0,f,c
  1844   001CB8  2A14               	incf	(pad@i+1)^0,f,c
  1845   001CBA                     l1995:
  1846                           
  1847                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 209:     while (i
      +                           < p) {
  1848   001CBA  5010               	movf	pad@p^0,w,c
  1849   001CBC  5C13               	subwf	pad@i^0,w,c
  1850   001CBE  5014               	movf	(pad@i+1)^0,w,c
  1851   001CC0  0A80               	xorlw	128
  1852   001CC2  6E12               	movwf	??_pad^0,c
  1853   001CC4  5011               	movf	(pad@p+1)^0,w,c
  1854   001CC6  0A80               	xorlw	128
  1855   001CC8  5812               	subwfb	??_pad^0,w,c
  1856   001CCA  A0D8               	btfss	status,0,c
  1857   001CCC  EF6A  F00E         	goto	u1501
  1858   001CD0  EF6C  F00E         	goto	u1500
  1859   001CD4                     u1501:
  1860   001CD4  EF53  F00E         	goto	l1991
  1861   001CD8                     u1500:
  1862   001CD8                     
  1863                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 216:     if (!(fl
      +                          ags & (1 << 0))) {
  1864   001CD8  B04A               	btfsc	_flags^0,0,c
  1865   001CDA  EF71  F00E         	goto	u1511
  1866   001CDE  EF73  F00E         	goto	u1510
  1867   001CE2                     u1511:
  1868   001CE2  EF79  F00E         	goto	l1012
  1869   001CE6                     u1510:
  1870   001CE6                     
  1871                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 218:         fput
      +                          s((const char *)buf, fp);
  1872   001CE6  C00F  F009         	movff	pad@buf,fputs@s
  1873   001CEA  C00E  F00A         	movff	pad@fp,fputs@fp
  1874   001CEE  ECEF  F00E         	call	_fputs	;wreg free
  1875   001CF2                     l1012:
  1876   001CF2  0012               	return		;funcret
  1877   001CF4                     __end_of_pad:
  1878                           	callstack 0
  1879                           
  1880 ;; *************** function _fputs *****************
  1881 ;; Defined at:
  1882 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\nf_fputs.c"
  1883 ;; Parameters:    Size  Location     Type
  1884 ;;  s               1    8[COMRAM] PTR const unsigned char 
  1885 ;;		 -> dbuf(32), 
  1886 ;;  fp              1    9[COMRAM] PTR struct _IO_FILE
  1887 ;;		 -> sprintf@f(12), 
  1888 ;; Auto vars:     Size  Location     Type
  1889 ;;  i               2   11[COMRAM] int 
  1890 ;;  c               1   10[COMRAM] unsigned char 
  1891 ;; Return value:  Size  Location     Type
  1892 ;;                  2    8[COMRAM] int 
  1893 ;; Registers used:
  1894 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1895 ;; Tracked objects:
  1896 ;;		On entry : 0/0
  1897 ;;		On exit  : 0/0
  1898 ;;		Unchanged: 0/0
  1899 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1900 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1901 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1902 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1903 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1904 ;;Total ram usage:        5 bytes
  1905 ;; Hardware stack levels used: 1
  1906 ;; Hardware stack levels required when called: 3
  1907 ;; This function calls:
  1908 ;;		_fputc
  1909 ;; This function is called by:
  1910 ;;		_pad
  1911 ;; This function uses a non-reentrant model
  1912 ;;
  1913                           
  1914                           	psect	text8
  1915   001DDE                     __ptext8:
  1916                           	callstack 0
  1917   001DDE                     _fputs:
  1918                           	callstack 22
  1919   001DDE  0E00               	movlw	0
  1920   001DE0  6E0D               	movwf	(fputs@i+1)^0,c
  1921   001DE2  0E00               	movlw	0
  1922   001DE4  6E0C               	movwf	fputs@i^0,c
  1923   001DE6  EFFE  F00E         	goto	l1895
  1924   001DEA                     l1891:
  1925   001DEA  C00B  F001         	movff	fputs@c,fputc@c
  1926   001DEE  6A02               	clrf	(fputc@c+1)^0,c
  1927   001DF0  C00A  F003         	movff	fputs@fp,fputc@fp
  1928   001DF4  ECE0  F00D         	call	_fputc	;wreg free
  1929   001DF8  4A0C               	infsnz	fputs@i^0,f,c
  1930   001DFA  2A0D               	incf	(fputs@i+1)^0,f,c
  1931   001DFC                     l1895:
  1932   001DFC  5009               	movf	fputs@s^0,w,c
  1933   001DFE  240C               	addwf	fputs@i^0,w,c
  1934   001E00  6ED9               	movwf	fsr2l,c
  1935   001E02  6ADA               	clrf	fsr2h,c
  1936   001E04  50DF               	movf	indf2,w,c
  1937   001E06  6E0B               	movwf	fputs@c^0,c
  1938   001E08  500B               	movf	fputs@c^0,w,c
  1939   001E0A  A4D8               	btfss	status,2,c
  1940   001E0C  EF0A  F00F         	goto	u1351
  1941   001E10  EF0C  F00F         	goto	u1350
  1942   001E14                     u1351:
  1943   001E14  EFF5  F00E         	goto	l1891
  1944   001E18                     u1350:
  1945   001E18  0012               	return		;funcret
  1946   001E1A                     __end_of_fputs:
  1947                           	callstack 0
  1948                           
  1949 ;; *************** function _fputc *****************
  1950 ;; Defined at:
  1951 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\nf_fputc.c"
  1952 ;; Parameters:    Size  Location     Type
  1953 ;;  c               2    0[COMRAM] int 
  1954 ;;  fp              1    2[COMRAM] PTR struct _IO_FILE
  1955 ;;		 -> sprintf@f(12), 
  1956 ;; Auto vars:     Size  Location     Type
  1957 ;;		None
  1958 ;; Return value:  Size  Location     Type
  1959 ;;                  2    0[COMRAM] int 
  1960 ;; Registers used:
  1961 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1962 ;; Tracked objects:
  1963 ;;		On entry : 0/0
  1964 ;;		On exit  : 0/0
  1965 ;;		Unchanged: 0/0
  1966 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1967 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1968 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1969 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1970 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1971 ;;Total ram usage:        8 bytes
  1972 ;; Hardware stack levels used: 1
  1973 ;; Hardware stack levels required when called: 2
  1974 ;; This function calls:
  1975 ;;		_putch
  1976 ;; This function is called by:
  1977 ;;		_pad
  1978 ;;		_vfpfcnvrt
  1979 ;;		_fputs
  1980 ;; This function uses a non-reentrant model
  1981 ;;
  1982                           
  1983                           	psect	text9
  1984   001BC0                     __ptext9:
  1985                           	callstack 0
  1986   001BC0                     _fputc:
  1987                           	callstack 25
  1988   001BC0  5003               	movf	fputc@fp^0,w,c
  1989   001BC2  B4D8               	btfsc	status,2,c
  1990   001BC4  EFE6  F00D         	goto	u1311
  1991   001BC8  EFE8  F00D         	goto	u1310
  1992   001BCC                     u1311:
  1993   001BCC  EFF0  F00D         	goto	l1879
  1994   001BD0                     u1310:
  1995   001BD0  5003               	movf	fputc@fp^0,w,c
  1996   001BD2  A4D8               	btfss	status,2,c
  1997   001BD4  EFEE  F00D         	goto	u1321
  1998   001BD8  EFF0  F00D         	goto	u1320
  1999   001BDC                     u1321:
  2000   001BDC  EFF5  F00D         	goto	l1881
  2001   001BE0                     u1320:
  2002   001BE0                     l1879:
  2003   001BE0  5001               	movf	fputc@c^0,w,c
  2004   001BE2  ECE4  F00F         	call	_putch
  2005   001BE6  EF34  F00E         	goto	l1076
  2006   001BEA                     l1881:
  2007   001BEA  5003               	movf	fputc@fp^0,w,c
  2008   001BEC  6ED9               	movwf	fsr2l,c
  2009   001BEE  6ADA               	clrf	fsr2h,c
  2010   001BF0  0E0A               	movlw	10
  2011   001BF2  26D9               	addwf	fsr2l,f,c
  2012   001BF4  50DE               	movf	postinc2,w,c
  2013   001BF6  10DE               	iorwf	postinc2,w,c
  2014   001BF8  B4D8               	btfsc	status,2,c
  2015   001BFA  EF01  F00E         	goto	u1331
  2016   001BFE  EF03  F00E         	goto	u1330
  2017   001C02                     u1331:
  2018   001C02  EF1C  F00E         	goto	l1885
  2019   001C06                     u1330:
  2020   001C06  5003               	movf	fputc@fp^0,w,c
  2021   001C08  6ED9               	movwf	fsr2l,c
  2022   001C0A  6ADA               	clrf	fsr2h,c
  2023   001C0C  0E0A               	movlw	10
  2024   001C0E  26D9               	addwf	fsr2l,f,c
  2025   001C10  5003               	movf	fputc@fp^0,w,c
  2026   001C12  6EE1               	movwf	fsr1l,c
  2027   001C14  6AE2               	clrf	fsr1h,c
  2028   001C16  0E03               	movlw	3
  2029   001C18  26E1               	addwf	fsr1l,f,c
  2030   001C1A  50DE               	movf	postinc2,w,c
  2031   001C1C  5CE6               	subwf	postinc1,w,c
  2032   001C1E  50E6               	movf	postinc1,w,c
  2033   001C20  0A80               	xorlw	128
  2034   001C22  6E08               	movwf	(??_fputc+4)^0,c
  2035   001C24  50DE               	movf	postinc2,w,c
  2036   001C26  0A80               	xorlw	128
  2037   001C28  5808               	subwfb	(??_fputc+4)^0,w,c
  2038   001C2A  B0D8               	btfsc	status,0,c
  2039   001C2C  EF1A  F00E         	goto	u1341
  2040   001C30  EF1C  F00E         	goto	u1340
  2041   001C34                     u1341:
  2042   001C34  EF34  F00E         	goto	l1076
  2043   001C38                     u1340:
  2044   001C38                     l1885:
  2045   001C38  5003               	movf	fputc@fp^0,w,c
  2046   001C3A  6ED9               	movwf	fsr2l,c
  2047   001C3C  6ADA               	clrf	fsr2h,c
  2048   001C3E  0E03               	movlw	3
  2049   001C40  26D9               	addwf	fsr2l,f,c
  2050   001C42  50DF               	movf	indf2,w,c
  2051   001C44  6E04               	movwf	??_fputc^0,c
  2052   001C46  5003               	movf	fputc@fp^0,w,c
  2053   001C48  6ED9               	movwf	fsr2l,c
  2054   001C4A  6ADA               	clrf	fsr2h,c
  2055   001C4C  50DF               	movf	indf2,w,c
  2056   001C4E  2404               	addwf	??_fputc^0,w,c
  2057   001C50  6ED9               	movwf	fsr2l,c
  2058   001C52  6ADA               	clrf	fsr2h,c
  2059   001C54  C001  FFDF         	movff	fputc@c,indf2
  2060   001C58  5003               	movf	fputc@fp^0,w,c
  2061   001C5A  6ED9               	movwf	fsr2l,c
  2062   001C5C  6ADA               	clrf	fsr2h,c
  2063   001C5E  0E03               	movlw	3
  2064   001C60  26D9               	addwf	fsr2l,f,c
  2065   001C62  2ADE               	incf	postinc2,f,c
  2066   001C64  0E00               	movlw	0
  2067   001C66  22DD               	addwfc	postdec2,f,c
  2068   001C68                     l1076:
  2069   001C68  0012               	return		;funcret
  2070   001C6A                     __end_of_fputc:
  2071                           	callstack 0
  2072                           
  2073 ;; *************** function _putch *****************
  2074 ;; Defined at:
  2075 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\putch.c"
  2076 ;; Parameters:    Size  Location     Type
  2077 ;;  c               1    wreg     unsigned char 
  2078 ;; Auto vars:     Size  Location     Type
  2079 ;;  c               1    0[COMRAM] unsigned char 
  2080 ;; Return value:  Size  Location     Type
  2081 ;;                  1    wreg      void 
  2082 ;; Registers used:
  2083 ;;		wreg
  2084 ;; Tracked objects:
  2085 ;;		On entry : 0/0
  2086 ;;		On exit  : 0/0
  2087 ;;		Unchanged: 0/0
  2088 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2089 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2090 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2091 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2092 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2093 ;;Total ram usage:        0 bytes
  2094 ;; Hardware stack levels used: 1
  2095 ;; Hardware stack levels required when called: 1
  2096 ;; This function calls:
  2097 ;;		Nothing
  2098 ;; This function is called by:
  2099 ;;		_fputc
  2100 ;; This function uses a non-reentrant model
  2101 ;;
  2102                           
  2103                           	psect	text10
  2104   001FC8                     __ptext10:
  2105                           	callstack 0
  2106   001FC8                     _putch:
  2107                           	callstack 25
  2108   001FC8  0012               	return		;funcret
  2109   001FCA                     __end_of_putch:
  2110                           	callstack 0
  2111                           
  2112 ;; *************** function _abs *****************
  2113 ;; Defined at:
  2114 ;;		line 1 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\abs.c"
  2115 ;; Parameters:    Size  Location     Type
  2116 ;;  a               2    6[COMRAM] int 
  2117 ;; Auto vars:     Size  Location     Type
  2118 ;;		None
  2119 ;; Return value:  Size  Location     Type
  2120 ;;                  2    6[COMRAM] int 
  2121 ;; Registers used:
  2122 ;;		wreg, status,2, status,0
  2123 ;; Tracked objects:
  2124 ;;		On entry : 0/0
  2125 ;;		On exit  : 0/0
  2126 ;;		Unchanged: 0/0
  2127 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2128 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2129 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2130 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2131 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2132 ;;Total ram usage:        4 bytes
  2133 ;; Hardware stack levels used: 1
  2134 ;; Hardware stack levels required when called: 1
  2135 ;; This function calls:
  2136 ;;		Nothing
  2137 ;; This function is called by:
  2138 ;;		_dtoa
  2139 ;; This function uses a non-reentrant model
  2140 ;;
  2141                           
  2142                           	psect	text11
  2143   001E88                     __ptext11:
  2144                           	callstack 0
  2145   001E88                     _abs:
  2146                           	callstack 25
  2147   001E88  BE08               	btfsc	(abs@a+1)^0,7,c
  2148   001E8A  EF49  F00F         	goto	u1521
  2149   001E8E  EF4B  F00F         	goto	u1520
  2150   001E92                     u1521:
  2151   001E92  EF51  F00F         	goto	l1061
  2152   001E96                     u1520:
  2153   001E96  C007  F007         	movff	abs@a,?_abs
  2154   001E9A  C008  F008         	movff	abs@a+1,?_abs+1
  2155   001E9E  EF5D  F00F         	goto	l1064
  2156   001EA2                     l1061:
  2157   001EA2  C007  F009         	movff	abs@a,??_abs
  2158   001EA6  C008  F00A         	movff	abs@a+1,??_abs+1
  2159   001EAA  1E09               	comf	??_abs^0,f,c
  2160   001EAC  1E0A               	comf	(??_abs+1)^0,f,c
  2161   001EAE  4A09               	infsnz	??_abs^0,f,c
  2162   001EB0  2A0A               	incf	(??_abs+1)^0,f,c
  2163   001EB2  C009  F007         	movff	??_abs,?_abs
  2164   001EB6  C00A  F008         	movff	??_abs+1,?_abs+1
  2165   001EBA                     l1064:
  2166   001EBA  0012               	return		;funcret
  2167   001EBC                     __end_of_abs:
  2168                           	callstack 0
  2169                           
  2170 ;; *************** function ___awdiv *****************
  2171 ;; Defined at:
  2172 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\awdiv.c"
  2173 ;; Parameters:    Size  Location     Type
  2174 ;;  dividend        2    0[COMRAM] int 
  2175 ;;  divisor         2    2[COMRAM] int 
  2176 ;; Auto vars:     Size  Location     Type
  2177 ;;  quotient        2    6[COMRAM] int 
  2178 ;;  sign            1    5[COMRAM] unsigned char 
  2179 ;;  counter         1    4[COMRAM] unsigned char 
  2180 ;; Return value:  Size  Location     Type
  2181 ;;                  2    0[COMRAM] int 
  2182 ;; Registers used:
  2183 ;;		wreg, status,2, status,0
  2184 ;; Tracked objects:
  2185 ;;		On entry : 0/0
  2186 ;;		On exit  : 0/0
  2187 ;;		Unchanged: 0/0
  2188 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2189 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2190 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2191 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2192 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2193 ;;Total ram usage:        8 bytes
  2194 ;; Hardware stack levels used: 1
  2195 ;; Hardware stack levels required when called: 1
  2196 ;; This function calls:
  2197 ;;		Nothing
  2198 ;; This function is called by:
  2199 ;;		_dtoa
  2200 ;; This function uses a non-reentrant model
  2201 ;;
  2202                           
  2203                           	psect	text12
  2204   00199E                     __ptext12:
  2205                           	callstack 0
  2206   00199E                     ___awdiv:
  2207                           	callstack 25
  2208   00199E  0E00               	movlw	0
  2209   0019A0  6E06               	movwf	___awdiv@sign^0,c
  2210   0019A2  BE04               	btfsc	(___awdiv@divisor+1)^0,7,c
  2211   0019A4  EFD8  F00C         	goto	u1360
  2212   0019A8  EFD6  F00C         	goto	u1361
  2213   0019AC                     u1361:
  2214   0019AC  EFDE  F00C         	goto	l1911
  2215   0019B0                     u1360:
  2216   0019B0  6C03               	negf	___awdiv@divisor^0,c
  2217   0019B2  1E04               	comf	(___awdiv@divisor+1)^0,f,c
  2218   0019B4  B0D8               	btfsc	status,0,c
  2219   0019B6  2A04               	incf	(___awdiv@divisor+1)^0,f,c
  2220   0019B8  0E01               	movlw	1
  2221   0019BA  6E06               	movwf	___awdiv@sign^0,c
  2222   0019BC                     l1911:
  2223   0019BC  BE02               	btfsc	(___awdiv@dividend+1)^0,7,c
  2224   0019BE  EFE5  F00C         	goto	u1370
  2225   0019C2  EFE3  F00C         	goto	u1371
  2226   0019C6                     u1371:
  2227   0019C6  EFEB  F00C         	goto	l1917
  2228   0019CA                     u1370:
  2229   0019CA  6C01               	negf	___awdiv@dividend^0,c
  2230   0019CC  1E02               	comf	(___awdiv@dividend+1)^0,f,c
  2231   0019CE  B0D8               	btfsc	status,0,c
  2232   0019D0  2A02               	incf	(___awdiv@dividend+1)^0,f,c
  2233   0019D2  0E01               	movlw	1
  2234   0019D4  1A06               	xorwf	___awdiv@sign^0,f,c
  2235   0019D6                     l1917:
  2236   0019D6  0E00               	movlw	0
  2237   0019D8  6E08               	movwf	(___awdiv@quotient+1)^0,c
  2238   0019DA  0E00               	movlw	0
  2239   0019DC  6E07               	movwf	___awdiv@quotient^0,c
  2240   0019DE  5003               	movf	___awdiv@divisor^0,w,c
  2241   0019E0  1004               	iorwf	(___awdiv@divisor+1)^0,w,c
  2242   0019E2  B4D8               	btfsc	status,2,c
  2243   0019E4  EFF6  F00C         	goto	u1381
  2244   0019E8  EFF8  F00C         	goto	u1380
  2245   0019EC                     u1381:
  2246   0019EC  EF20  F00D         	goto	l1939
  2247   0019F0                     u1380:
  2248   0019F0  0E01               	movlw	1
  2249   0019F2  6E05               	movwf	___awdiv@counter^0,c
  2250   0019F4  EF00  F00D         	goto	l1925
  2251   0019F8                     l1923:
  2252   0019F8  90D8               	bcf	status,0,c
  2253   0019FA  3603               	rlcf	___awdiv@divisor^0,f,c
  2254   0019FC  3604               	rlcf	(___awdiv@divisor+1)^0,f,c
  2255   0019FE  2A05               	incf	___awdiv@counter^0,f,c
  2256   001A00                     l1925:
  2257   001A00  AE04               	btfss	(___awdiv@divisor+1)^0,7,c
  2258   001A02  EF05  F00D         	goto	u1391
  2259   001A06  EF07  F00D         	goto	u1390
  2260   001A0A                     u1391:
  2261   001A0A  EFFC  F00C         	goto	l1923
  2262   001A0E                     u1390:
  2263   001A0E                     l1927:
  2264   001A0E  90D8               	bcf	status,0,c
  2265   001A10  3607               	rlcf	___awdiv@quotient^0,f,c
  2266   001A12  3608               	rlcf	(___awdiv@quotient+1)^0,f,c
  2267   001A14  5003               	movf	___awdiv@divisor^0,w,c
  2268   001A16  5C01               	subwf	___awdiv@dividend^0,w,c
  2269   001A18  5004               	movf	(___awdiv@divisor+1)^0,w,c
  2270   001A1A  5802               	subwfb	(___awdiv@dividend+1)^0,w,c
  2271   001A1C  A0D8               	btfss	status,0,c
  2272   001A1E  EF13  F00D         	goto	u1401
  2273   001A22  EF15  F00D         	goto	u1400
  2274   001A26                     u1401:
  2275   001A26  EF1A  F00D         	goto	l1935
  2276   001A2A                     u1400:
  2277   001A2A  5003               	movf	___awdiv@divisor^0,w,c
  2278   001A2C  5E01               	subwf	___awdiv@dividend^0,f,c
  2279   001A2E  5004               	movf	(___awdiv@divisor+1)^0,w,c
  2280   001A30  5A02               	subwfb	(___awdiv@dividend+1)^0,f,c
  2281   001A32  8007               	bsf	___awdiv@quotient^0,0,c
  2282   001A34                     l1935:
  2283   001A34  90D8               	bcf	status,0,c
  2284   001A36  3204               	rrcf	(___awdiv@divisor+1)^0,f,c
  2285   001A38  3203               	rrcf	___awdiv@divisor^0,f,c
  2286   001A3A  2E05               	decfsz	___awdiv@counter^0,f,c
  2287   001A3C  EF07  F00D         	goto	l1927
  2288   001A40                     l1939:
  2289   001A40  5006               	movf	___awdiv@sign^0,w,c
  2290   001A42  B4D8               	btfsc	status,2,c
  2291   001A44  EF26  F00D         	goto	u1411
  2292   001A48  EF28  F00D         	goto	u1410
  2293   001A4C                     u1411:
  2294   001A4C  EF2C  F00D         	goto	l1943
  2295   001A50                     u1410:
  2296   001A50  6C07               	negf	___awdiv@quotient^0,c
  2297   001A52  1E08               	comf	(___awdiv@quotient+1)^0,f,c
  2298   001A54  B0D8               	btfsc	status,0,c
  2299   001A56  2A08               	incf	(___awdiv@quotient+1)^0,f,c
  2300   001A58                     l1943:
  2301   001A58  C007  F001         	movff	___awdiv@quotient,?___awdiv
  2302   001A5C  C008  F002         	movff	___awdiv@quotient+1,?___awdiv+1
  2303   001A60  0012               	return		;funcret
  2304   001A62                     __end_of___awdiv:
  2305                           	callstack 0
  2306                           
  2307 ;; *************** function _UpdateClock *****************
  2308 ;; Defined at:
  2309 ;;		line 7 in file "clock.c"
  2310 ;; Parameters:    Size  Location     Type
  2311 ;;  seconds         1    6[COMRAM] PTR int 
  2312 ;;		 -> GLOBALsecs(2), 
  2313 ;;  minutes         1    7[COMRAM] PTR int 
  2314 ;;		 -> main@clock(16), 
  2315 ;;  hours           1    8[COMRAM] PTR int 
  2316 ;;		 -> main@clock(16), 
  2317 ;;  days            1    9[COMRAM] PTR int 
  2318 ;;		 -> main@clock(16), 
  2319 ;;  DoW             1   10[COMRAM] PTR int 
  2320 ;;		 -> main@clock(16), 
  2321 ;;  months          1   11[COMRAM] PTR int 
  2322 ;;		 -> main@clock(16), 
  2323 ;;  years           1   12[COMRAM] PTR int 
  2324 ;;		 -> main@clock(16), 
  2325 ;;  DSTstate        1   13[COMRAM] PTR int 
  2326 ;;		 -> main@clock(16), 
  2327 ;;  TestMode        2   14[COMRAM] int 
  2328 ;; Auto vars:     Size  Location     Type
  2329 ;;  DaysInMonth    24   22[COMRAM] int [12]
  2330 ;; Return value:  Size  Location     Type
  2331 ;;                  1    wreg      void 
  2332 ;; Registers used:
  2333 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2334 ;; Tracked objects:
  2335 ;;		On entry : 0/0
  2336 ;;		On exit  : 0/0
  2337 ;;		Unchanged: 0/0
  2338 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2339 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2340 ;;      Locals:        24       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2341 ;;      Temps:          6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2342 ;;      Totals:        40       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2343 ;;Total ram usage:       40 bytes
  2344 ;; Hardware stack levels used: 1
  2345 ;; Hardware stack levels required when called: 2
  2346 ;; This function calls:
  2347 ;;		___awmod
  2348 ;; This function is called by:
  2349 ;;		_main
  2350 ;; This function uses a non-reentrant model
  2351 ;;
  2352                           
  2353                           	psect	text13
  2354   000E46                     __ptext13:
  2355                           	callstack 0
  2356   000E46                     _UpdateClock:
  2357                           	callstack 28
  2358   000E46                     
  2359                           ;clock.c: 9:     int DaysInMonth[] = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
  2360   000E46  EE20  F0A8         	lfsr	2,UpdateClock@F14152
  2361   000E4A  EE10  F017         	lfsr	1,UpdateClock@DaysInMonth
  2362   000E4E  0E17               	movlw	23
  2363   000E50                     u1761:
  2364   000E50  CFDB FFE3          	movff	plusw2,plusw1
  2365   000E54  06E8               	decf	wreg,f,c
  2366   000E56  E2FC               	bc	u1761
  2367   000E58                     
  2368                           ;clock.c: 11:     if (TestMode == 1){
  2369   000E58  040F               	decf	UpdateClock@TestMode^0,w,c
  2370   000E5A  1010               	iorwf	(UpdateClock@TestMode+1)^0,w,c
  2371   000E5C  A4D8               	btfss	status,2,c
  2372   000E5E  EF33  F007         	goto	u1771
  2373   000E62  EF35  F007         	goto	u1770
  2374   000E66                     u1771:
  2375   000E66  EF57  F007         	goto	l2235
  2376   000E6A                     u1770:
  2377   000E6A                     
  2378                           ;clock.c: 12:        *hours = *seconds;
  2379   000E6A  5007               	movf	UpdateClock@seconds^0,w,c
  2380   000E6C  6ED9               	movwf	fsr2l,c
  2381   000E6E  6ADA               	clrf	fsr2h,c
  2382   000E70  5009               	movf	UpdateClock@hours^0,w,c
  2383   000E72  6EE1               	movwf	fsr1l,c
  2384   000E74  6AE2               	clrf	fsr1h,c
  2385   000E76  CFDE FFE6          	movff	postinc2,postinc1
  2386   000E7A  CFDD FFE5          	movff	postdec2,postdec1
  2387   000E7E                     
  2388                           ;clock.c: 13:         if (*seconds >= 24 ){
  2389   000E7E  5007               	movf	UpdateClock@seconds^0,w,c
  2390   000E80  6ED9               	movwf	fsr2l,c
  2391   000E82  6ADA               	clrf	fsr2h,c
  2392   000E84  0E01               	movlw	1
  2393   000E86  BEDB               	btfsc	plusw2,7,c
  2394   000E88  EF50  F007         	goto	u1781
  2395   000E8C  0E01               	movlw	1
  2396   000E8E  50DB               	movf	plusw2,w,c
  2397   000E90  E109               	bnz	u1780
  2398   000E92  0E18               	movlw	24
  2399   000E94  5CDE               	subwf	postinc2,w,c
  2400   000E96  A0D8               	btfss	status,0,c
  2401   000E98  EF50  F007         	goto	u1781
  2402   000E9C  EF52  F007         	goto	u1780
  2403   000EA0                     u1781:
  2404   000EA0  EF57  F007         	goto	l2235
  2405   000EA4                     u1780:
  2406   000EA4                     
  2407                           ;clock.c: 14:             *seconds = 0;
  2408   000EA4  5007               	movf	UpdateClock@seconds^0,w,c
  2409   000EA6  6ED9               	movwf	fsr2l,c
  2410   000EA8  6ADA               	clrf	fsr2h,c
  2411   000EAA  6ADE               	clrf	postinc2,c
  2412   000EAC  6ADD               	clrf	postdec2,c
  2413   000EAE                     l2235:
  2414                           
  2415                           ;clock.c: 18:     if (*seconds >= 60 ){
  2416   000EAE  5007               	movf	UpdateClock@seconds^0,w,c
  2417   000EB0  6ED9               	movwf	fsr2l,c
  2418   000EB2  6ADA               	clrf	fsr2h,c
  2419   000EB4  0E01               	movlw	1
  2420   000EB6  BEDB               	btfsc	plusw2,7,c
  2421   000EB8  EF68  F007         	goto	u1791
  2422   000EBC  0E01               	movlw	1
  2423   000EBE  50DB               	movf	plusw2,w,c
  2424   000EC0  E109               	bnz	u1790
  2425   000EC2  0E3C               	movlw	60
  2426   000EC4  5CDE               	subwf	postinc2,w,c
  2427   000EC6  A0D8               	btfss	status,0,c
  2428   000EC8  EF68  F007         	goto	u1791
  2429   000ECC  EF6A  F007         	goto	u1790
  2430   000ED0                     u1791:
  2431   000ED0  EF81  F007         	goto	l2241
  2432   000ED4                     u1790:
  2433   000ED4                     
  2434                           ;clock.c: 19:         *seconds = 0;
  2435   000ED4  5007               	movf	UpdateClock@seconds^0,w,c
  2436   000ED6  6ED9               	movwf	fsr2l,c
  2437   000ED8  6ADA               	clrf	fsr2h,c
  2438   000EDA  6ADE               	clrf	postinc2,c
  2439   000EDC  6ADD               	clrf	postdec2,c
  2440   000EDE                     
  2441                           ;clock.c: 20:         *minutes = *minutes + 1;
  2442   000EDE  5008               	movf	UpdateClock@minutes^0,w,c
  2443   000EE0  6ED9               	movwf	fsr2l,c
  2444   000EE2  6ADA               	clrf	fsr2h,c
  2445   000EE4  CFDE F011          	movff	postinc2,??_UpdateClock
  2446   000EE8  CFDD F012          	movff	postdec2,??_UpdateClock+1
  2447   000EEC  0E01               	movlw	1
  2448   000EEE  2611               	addwf	??_UpdateClock^0,f,c
  2449   000EF0  0E00               	movlw	0
  2450   000EF2  2212               	addwfc	(??_UpdateClock+1)^0,f,c
  2451   000EF4  5008               	movf	UpdateClock@minutes^0,w,c
  2452   000EF6  6ED9               	movwf	fsr2l,c
  2453   000EF8  6ADA               	clrf	fsr2h,c
  2454   000EFA  C011  FFDE         	movff	??_UpdateClock,postinc2
  2455   000EFE  C012  FFDD         	movff	??_UpdateClock+1,postdec2
  2456   000F02                     l2241:
  2457                           
  2458                           ;clock.c: 23:     if (*minutes >= 60){
  2459   000F02  5008               	movf	UpdateClock@minutes^0,w,c
  2460   000F04  6ED9               	movwf	fsr2l,c
  2461   000F06  6ADA               	clrf	fsr2h,c
  2462   000F08  0E01               	movlw	1
  2463   000F0A  BEDB               	btfsc	plusw2,7,c
  2464   000F0C  EF92  F007         	goto	u1801
  2465   000F10  0E01               	movlw	1
  2466   000F12  50DB               	movf	plusw2,w,c
  2467   000F14  E109               	bnz	u1800
  2468   000F16  0E3C               	movlw	60
  2469   000F18  5CDE               	subwf	postinc2,w,c
  2470   000F1A  A0D8               	btfss	status,0,c
  2471   000F1C  EF92  F007         	goto	u1801
  2472   000F20  EF94  F007         	goto	u1800
  2473   000F24                     u1801:
  2474   000F24  EFAB  F007         	goto	l2247
  2475   000F28                     u1800:
  2476   000F28                     
  2477                           ;clock.c: 24:         *minutes = 0;
  2478   000F28  5008               	movf	UpdateClock@minutes^0,w,c
  2479   000F2A  6ED9               	movwf	fsr2l,c
  2480   000F2C  6ADA               	clrf	fsr2h,c
  2481   000F2E  6ADE               	clrf	postinc2,c
  2482   000F30  6ADD               	clrf	postdec2,c
  2483   000F32                     
  2484                           ;clock.c: 25:         *hours = *hours + 1;
  2485   000F32  5009               	movf	UpdateClock@hours^0,w,c
  2486   000F34  6ED9               	movwf	fsr2l,c
  2487   000F36  6ADA               	clrf	fsr2h,c
  2488   000F38  CFDE F011          	movff	postinc2,??_UpdateClock
  2489   000F3C  CFDD F012          	movff	postdec2,??_UpdateClock+1
  2490   000F40  0E01               	movlw	1
  2491   000F42  2611               	addwf	??_UpdateClock^0,f,c
  2492   000F44  0E00               	movlw	0
  2493   000F46  2212               	addwfc	(??_UpdateClock+1)^0,f,c
  2494   000F48  5009               	movf	UpdateClock@hours^0,w,c
  2495   000F4A  6ED9               	movwf	fsr2l,c
  2496   000F4C  6ADA               	clrf	fsr2h,c
  2497   000F4E  C011  FFDE         	movff	??_UpdateClock,postinc2
  2498   000F52  C012  FFDD         	movff	??_UpdateClock+1,postdec2
  2499   000F56                     l2247:
  2500                           
  2501                           ;clock.c: 28:     if (*hours >= 24){
  2502   000F56  5009               	movf	UpdateClock@hours^0,w,c
  2503   000F58  6ED9               	movwf	fsr2l,c
  2504   000F5A  6ADA               	clrf	fsr2h,c
  2505   000F5C  0E01               	movlw	1
  2506   000F5E  BEDB               	btfsc	plusw2,7,c
  2507   000F60  EFBC  F007         	goto	u1811
  2508   000F64  0E01               	movlw	1
  2509   000F66  50DB               	movf	plusw2,w,c
  2510   000F68  E109               	bnz	u1810
  2511   000F6A  0E18               	movlw	24
  2512   000F6C  5CDE               	subwf	postinc2,w,c
  2513   000F6E  A0D8               	btfss	status,0,c
  2514   000F70  EFBC  F007         	goto	u1811
  2515   000F74  EFBE  F007         	goto	u1810
  2516   000F78                     u1811:
  2517   000F78  EFE7  F007         	goto	l2255
  2518   000F7C                     u1810:
  2519   000F7C                     
  2520                           ;clock.c: 29:         *hours = 0;
  2521   000F7C  5009               	movf	UpdateClock@hours^0,w,c
  2522   000F7E  6ED9               	movwf	fsr2l,c
  2523   000F80  6ADA               	clrf	fsr2h,c
  2524   000F82  6ADE               	clrf	postinc2,c
  2525   000F84  6ADD               	clrf	postdec2,c
  2526   000F86                     
  2527                           ;clock.c: 30:         *days = *days + 1;
  2528   000F86  500A               	movf	UpdateClock@days^0,w,c
  2529   000F88  6ED9               	movwf	fsr2l,c
  2530   000F8A  6ADA               	clrf	fsr2h,c
  2531   000F8C  CFDE F011          	movff	postinc2,??_UpdateClock
  2532   000F90  CFDD F012          	movff	postdec2,??_UpdateClock+1
  2533   000F94  0E01               	movlw	1
  2534   000F96  2611               	addwf	??_UpdateClock^0,f,c
  2535   000F98  0E00               	movlw	0
  2536   000F9A  2212               	addwfc	(??_UpdateClock+1)^0,f,c
  2537   000F9C  500A               	movf	UpdateClock@days^0,w,c
  2538   000F9E  6ED9               	movwf	fsr2l,c
  2539   000FA0  6ADA               	clrf	fsr2h,c
  2540   000FA2  C011  FFDE         	movff	??_UpdateClock,postinc2
  2541   000FA6  C012  FFDD         	movff	??_UpdateClock+1,postdec2
  2542   000FAA                     
  2543                           ;clock.c: 31:         *DoW = *DoW + 1;
  2544   000FAA  500B               	movf	UpdateClock@DoW^0,w,c
  2545   000FAC  6ED9               	movwf	fsr2l,c
  2546   000FAE  6ADA               	clrf	fsr2h,c
  2547   000FB0  CFDE F011          	movff	postinc2,??_UpdateClock
  2548   000FB4  CFDD F012          	movff	postdec2,??_UpdateClock+1
  2549   000FB8  0E01               	movlw	1
  2550   000FBA  2611               	addwf	??_UpdateClock^0,f,c
  2551   000FBC  0E00               	movlw	0
  2552   000FBE  2212               	addwfc	(??_UpdateClock+1)^0,f,c
  2553   000FC0  500B               	movf	UpdateClock@DoW^0,w,c
  2554   000FC2  6ED9               	movwf	fsr2l,c
  2555   000FC4  6ADA               	clrf	fsr2h,c
  2556   000FC6  C011  FFDE         	movff	??_UpdateClock,postinc2
  2557   000FCA  C012  FFDD         	movff	??_UpdateClock+1,postdec2
  2558   000FCE                     l2255:
  2559                           
  2560                           ;clock.c: 34:     if (*DoW >= 8){
  2561   000FCE  500B               	movf	UpdateClock@DoW^0,w,c
  2562   000FD0  6ED9               	movwf	fsr2l,c
  2563   000FD2  6ADA               	clrf	fsr2h,c
  2564   000FD4  0E01               	movlw	1
  2565   000FD6  BEDB               	btfsc	plusw2,7,c
  2566   000FD8  EFF8  F007         	goto	u1821
  2567   000FDC  0E01               	movlw	1
  2568   000FDE  50DB               	movf	plusw2,w,c
  2569   000FE0  E109               	bnz	u1820
  2570   000FE2  0E08               	movlw	8
  2571   000FE4  5CDE               	subwf	postinc2,w,c
  2572   000FE6  A0D8               	btfss	status,0,c
  2573   000FE8  EFF8  F007         	goto	u1821
  2574   000FEC  EFFA  F007         	goto	u1820
  2575   000FF0                     u1821:
  2576   000FF0  EF01  F008         	goto	l2259
  2577   000FF4                     u1820:
  2578   000FF4                     
  2579                           ;clock.c: 35:         *DoW = 1;
  2580   000FF4  500B               	movf	UpdateClock@DoW^0,w,c
  2581   000FF6  6ED9               	movwf	fsr2l,c
  2582   000FF8  6ADA               	clrf	fsr2h,c
  2583   000FFA  0E01               	movlw	1
  2584   000FFC  6EDE               	movwf	postinc2,c
  2585   000FFE  0E00               	movlw	0
  2586   001000  6EDD               	movwf	postdec2,c
  2587   001002                     l2259:
  2588                           
  2589                           ;clock.c: 38:     if((*DSTstate == 0) && (*months == 3) && (*days >= 25) && (*DoW == 7) 
      +                          && ( *hours >= 1) ){
  2590   001002  500E               	movf	UpdateClock@DSTstate^0,w,c
  2591   001004  6ED9               	movwf	fsr2l,c
  2592   001006  6ADA               	clrf	fsr2h,c
  2593   001008  50DE               	movf	postinc2,w,c
  2594   00100A  10DE               	iorwf	postinc2,w,c
  2595   00100C  A4D8               	btfss	status,2,c
  2596   00100E  EF0B  F008         	goto	u1831
  2597   001012  EF0D  F008         	goto	u1830
  2598   001016                     u1831:
  2599   001016  EF80  F008         	goto	l2277
  2600   00101A                     u1830:
  2601   00101A  500C               	movf	UpdateClock@months^0,w,c
  2602   00101C  6ED9               	movwf	fsr2l,c
  2603   00101E  6ADA               	clrf	fsr2h,c
  2604   001020  0E03               	movlw	3
  2605   001022  18DE               	xorwf	postinc2,w,c
  2606   001024  10DE               	iorwf	postinc2,w,c
  2607   001026  A4D8               	btfss	status,2,c
  2608   001028  EF18  F008         	goto	u1841
  2609   00102C  EF1A  F008         	goto	u1840
  2610   001030                     u1841:
  2611   001030  EF80  F008         	goto	l2277
  2612   001034                     u1840:
  2613   001034  500A               	movf	UpdateClock@days^0,w,c
  2614   001036  6ED9               	movwf	fsr2l,c
  2615   001038  6ADA               	clrf	fsr2h,c
  2616   00103A  0E01               	movlw	1
  2617   00103C  BEDB               	btfsc	plusw2,7,c
  2618   00103E  EF2B  F008         	goto	u1851
  2619   001042  0E01               	movlw	1
  2620   001044  50DB               	movf	plusw2,w,c
  2621   001046  E109               	bnz	u1850
  2622   001048  0E19               	movlw	25
  2623   00104A  5CDE               	subwf	postinc2,w,c
  2624   00104C  A0D8               	btfss	status,0,c
  2625   00104E  EF2B  F008         	goto	u1851
  2626   001052  EF2D  F008         	goto	u1850
  2627   001056                     u1851:
  2628   001056  EF80  F008         	goto	l2277
  2629   00105A                     u1850:
  2630   00105A  500B               	movf	UpdateClock@DoW^0,w,c
  2631   00105C  6ED9               	movwf	fsr2l,c
  2632   00105E  6ADA               	clrf	fsr2h,c
  2633   001060  0E07               	movlw	7
  2634   001062  18DE               	xorwf	postinc2,w,c
  2635   001064  10DE               	iorwf	postinc2,w,c
  2636   001066  A4D8               	btfss	status,2,c
  2637   001068  EF38  F008         	goto	u1861
  2638   00106C  EF3A  F008         	goto	u1860
  2639   001070                     u1861:
  2640   001070  EF80  F008         	goto	l2277
  2641   001074                     u1860:
  2642   001074  5009               	movf	UpdateClock@hours^0,w,c
  2643   001076  6ED9               	movwf	fsr2l,c
  2644   001078  6ADA               	clrf	fsr2h,c
  2645   00107A  0E01               	movlw	1
  2646   00107C  BEDB               	btfsc	plusw2,7,c
  2647   00107E  EF4A  F008         	goto	u1871
  2648   001082  0E01               	movlw	1
  2649   001084  50DB               	movf	plusw2,w,c
  2650   001086  E108               	bnz	u1870
  2651   001088  04DE               	decf	postinc2,w,c
  2652   00108A  A0D8               	btfss	status,0,c
  2653   00108C  EF4A  F008         	goto	u1871
  2654   001090  EF4C  F008         	goto	u1870
  2655   001094                     u1871:
  2656   001094  EF80  F008         	goto	l2277
  2657   001098                     u1870:
  2658   001098                     
  2659                           ;clock.c: 40:         *hours = *hours + 1;
  2660   001098  5009               	movf	UpdateClock@hours^0,w,c
  2661   00109A  6ED9               	movwf	fsr2l,c
  2662   00109C  6ADA               	clrf	fsr2h,c
  2663   00109E  CFDE F011          	movff	postinc2,??_UpdateClock
  2664   0010A2  CFDD F012          	movff	postdec2,??_UpdateClock+1
  2665   0010A6  0E01               	movlw	1
  2666   0010A8  2611               	addwf	??_UpdateClock^0,f,c
  2667   0010AA  0E00               	movlw	0
  2668   0010AC  2212               	addwfc	(??_UpdateClock+1)^0,f,c
  2669   0010AE  5009               	movf	UpdateClock@hours^0,w,c
  2670   0010B0  6ED9               	movwf	fsr2l,c
  2671   0010B2  6ADA               	clrf	fsr2h,c
  2672   0010B4  C011  FFDE         	movff	??_UpdateClock,postinc2
  2673   0010B8  C012  FFDD         	movff	??_UpdateClock+1,postdec2
  2674   0010BC                     
  2675                           ;clock.c: 41:         if (TestMode == 1){
  2676   0010BC  040F               	decf	UpdateClock@TestMode^0,w,c
  2677   0010BE  1010               	iorwf	(UpdateClock@TestMode+1)^0,w,c
  2678   0010C0  A4D8               	btfss	status,2,c
  2679   0010C2  EF65  F008         	goto	u1881
  2680   0010C6  EF67  F008         	goto	u1880
  2681   0010CA                     u1881:
  2682   0010CA  EF79  F008         	goto	l2275
  2683   0010CE                     u1880:
  2684   0010CE                     
  2685                           ;clock.c: 42:             *seconds = *seconds + 1;
  2686   0010CE  5007               	movf	UpdateClock@seconds^0,w,c
  2687   0010D0  6ED9               	movwf	fsr2l,c
  2688   0010D2  6ADA               	clrf	fsr2h,c
  2689   0010D4  CFDE F011          	movff	postinc2,??_UpdateClock
  2690   0010D8  CFDD F012          	movff	postdec2,??_UpdateClock+1
  2691   0010DC  0E01               	movlw	1
  2692   0010DE  2611               	addwf	??_UpdateClock^0,f,c
  2693   0010E0  0E00               	movlw	0
  2694   0010E2  2212               	addwfc	(??_UpdateClock+1)^0,f,c
  2695   0010E4  5007               	movf	UpdateClock@seconds^0,w,c
  2696   0010E6  6ED9               	movwf	fsr2l,c
  2697   0010E8  6ADA               	clrf	fsr2h,c
  2698   0010EA  C011  FFDE         	movff	??_UpdateClock,postinc2
  2699   0010EE  C012  FFDD         	movff	??_UpdateClock+1,postdec2
  2700   0010F2                     l2275:
  2701                           
  2702                           ;clock.c: 44:         *DSTstate = 1;
  2703   0010F2  500E               	movf	UpdateClock@DSTstate^0,w,c
  2704   0010F4  6ED9               	movwf	fsr2l,c
  2705   0010F6  6ADA               	clrf	fsr2h,c
  2706   0010F8  0E01               	movlw	1
  2707   0010FA  6EDE               	movwf	postinc2,c
  2708   0010FC  0E00               	movlw	0
  2709   0010FE  6EDD               	movwf	postdec2,c
  2710   001100                     l2277:
  2711                           
  2712                           ;clock.c: 48:     if((*DSTstate==1) && (*months == 10) && (*days >= 25) && (*DoW == 7) &
      +                          & (*hours == 2) ){
  2713   001100  500E               	movf	UpdateClock@DSTstate^0,w,c
  2714   001102  6ED9               	movwf	fsr2l,c
  2715   001104  6ADA               	clrf	fsr2h,c
  2716   001106  04DE               	decf	postinc2,w,c
  2717   001108  10DE               	iorwf	postinc2,w,c
  2718   00110A  A4D8               	btfss	status,2,c
  2719   00110C  EF8A  F008         	goto	u1891
  2720   001110  EF8C  F008         	goto	u1890
  2721   001114                     u1891:
  2722   001114  EFFC  F008         	goto	l2295
  2723   001118                     u1890:
  2724   001118  500C               	movf	UpdateClock@months^0,w,c
  2725   00111A  6ED9               	movwf	fsr2l,c
  2726   00111C  6ADA               	clrf	fsr2h,c
  2727   00111E  0E0A               	movlw	10
  2728   001120  18DE               	xorwf	postinc2,w,c
  2729   001122  10DE               	iorwf	postinc2,w,c
  2730   001124  A4D8               	btfss	status,2,c
  2731   001126  EF97  F008         	goto	u1901
  2732   00112A  EF99  F008         	goto	u1900
  2733   00112E                     u1901:
  2734   00112E  EFFC  F008         	goto	l2295
  2735   001132                     u1900:
  2736   001132  500A               	movf	UpdateClock@days^0,w,c
  2737   001134  6ED9               	movwf	fsr2l,c
  2738   001136  6ADA               	clrf	fsr2h,c
  2739   001138  0E01               	movlw	1
  2740   00113A  BEDB               	btfsc	plusw2,7,c
  2741   00113C  EFAA  F008         	goto	u1911
  2742   001140  0E01               	movlw	1
  2743   001142  50DB               	movf	plusw2,w,c
  2744   001144  E109               	bnz	u1910
  2745   001146  0E19               	movlw	25
  2746   001148  5CDE               	subwf	postinc2,w,c
  2747   00114A  A0D8               	btfss	status,0,c
  2748   00114C  EFAA  F008         	goto	u1911
  2749   001150  EFAC  F008         	goto	u1910
  2750   001154                     u1911:
  2751   001154  EFFC  F008         	goto	l2295
  2752   001158                     u1910:
  2753   001158  500B               	movf	UpdateClock@DoW^0,w,c
  2754   00115A  6ED9               	movwf	fsr2l,c
  2755   00115C  6ADA               	clrf	fsr2h,c
  2756   00115E  0E07               	movlw	7
  2757   001160  18DE               	xorwf	postinc2,w,c
  2758   001162  10DE               	iorwf	postinc2,w,c
  2759   001164  A4D8               	btfss	status,2,c
  2760   001166  EFB7  F008         	goto	u1921
  2761   00116A  EFB9  F008         	goto	u1920
  2762   00116E                     u1921:
  2763   00116E  EFFC  F008         	goto	l2295
  2764   001172                     u1920:
  2765   001172  5009               	movf	UpdateClock@hours^0,w,c
  2766   001174  6ED9               	movwf	fsr2l,c
  2767   001176  6ADA               	clrf	fsr2h,c
  2768   001178  0E02               	movlw	2
  2769   00117A  18DE               	xorwf	postinc2,w,c
  2770   00117C  10DE               	iorwf	postinc2,w,c
  2771   00117E  A4D8               	btfss	status,2,c
  2772   001180  EFC4  F008         	goto	u1931
  2773   001184  EFC6  F008         	goto	u1930
  2774   001188                     u1931:
  2775   001188  EFFC  F008         	goto	l2295
  2776   00118C                     u1930:
  2777   00118C                     
  2778                           ;clock.c: 49:         *hours = *hours - 1;
  2779   00118C  5009               	movf	UpdateClock@hours^0,w,c
  2780   00118E  6ED9               	movwf	fsr2l,c
  2781   001190  6ADA               	clrf	fsr2h,c
  2782   001192  CFDE F011          	movff	postinc2,??_UpdateClock
  2783   001196  CFDD F012          	movff	postdec2,??_UpdateClock+1
  2784   00119A  0EFF               	movlw	255
  2785   00119C  2411               	addwf	??_UpdateClock^0,w,c
  2786   00119E  6E13               	movwf	(??_UpdateClock+2)^0,c
  2787   0011A0  0EFF               	movlw	255
  2788   0011A2  2012               	addwfc	(??_UpdateClock+1)^0,w,c
  2789   0011A4  6E14               	movwf	(??_UpdateClock+3)^0,c
  2790   0011A6  5009               	movf	UpdateClock@hours^0,w,c
  2791   0011A8  6ED9               	movwf	fsr2l,c
  2792   0011AA  6ADA               	clrf	fsr2h,c
  2793   0011AC  C013  FFDE         	movff	??_UpdateClock+2,postinc2
  2794   0011B0  C014  FFDD         	movff	??_UpdateClock+3,postdec2
  2795   0011B4                     
  2796                           ;clock.c: 50:         if (TestMode == 1){
  2797   0011B4  040F               	decf	UpdateClock@TestMode^0,w,c
  2798   0011B6  1010               	iorwf	(UpdateClock@TestMode+1)^0,w,c
  2799   0011B8  A4D8               	btfss	status,2,c
  2800   0011BA  EFE1  F008         	goto	u1941
  2801   0011BE  EFE3  F008         	goto	u1940
  2802   0011C2                     u1941:
  2803   0011C2  EFF7  F008         	goto	l2293
  2804   0011C6                     u1940:
  2805   0011C6                     
  2806                           ;clock.c: 51:             *seconds = *seconds - 1;
  2807   0011C6  5007               	movf	UpdateClock@seconds^0,w,c
  2808   0011C8  6ED9               	movwf	fsr2l,c
  2809   0011CA  6ADA               	clrf	fsr2h,c
  2810   0011CC  CFDE F011          	movff	postinc2,??_UpdateClock
  2811   0011D0  CFDD F012          	movff	postdec2,??_UpdateClock+1
  2812   0011D4  0EFF               	movlw	255
  2813   0011D6  2411               	addwf	??_UpdateClock^0,w,c
  2814   0011D8  6E13               	movwf	(??_UpdateClock+2)^0,c
  2815   0011DA  0EFF               	movlw	255
  2816   0011DC  2012               	addwfc	(??_UpdateClock+1)^0,w,c
  2817   0011DE  6E14               	movwf	(??_UpdateClock+3)^0,c
  2818   0011E0  5007               	movf	UpdateClock@seconds^0,w,c
  2819   0011E2  6ED9               	movwf	fsr2l,c
  2820   0011E4  6ADA               	clrf	fsr2h,c
  2821   0011E6  C013  FFDE         	movff	??_UpdateClock+2,postinc2
  2822   0011EA  C014  FFDD         	movff	??_UpdateClock+3,postdec2
  2823   0011EE                     l2293:
  2824                           
  2825                           ;clock.c: 53:         *DSTstate = 0;
  2826   0011EE  500E               	movf	UpdateClock@DSTstate^0,w,c
  2827   0011F0  6ED9               	movwf	fsr2l,c
  2828   0011F2  6ADA               	clrf	fsr2h,c
  2829   0011F4  6ADE               	clrf	postinc2,c
  2830   0011F6  6ADD               	clrf	postdec2,c
  2831   0011F8                     l2295:
  2832                           
  2833                           ;clock.c: 57:     if ((*years)%4 == 0 && *months == 2){
  2834   0011F8  500D               	movf	UpdateClock@years^0,w,c
  2835   0011FA  6ED9               	movwf	fsr2l,c
  2836   0011FC  6ADA               	clrf	fsr2h,c
  2837   0011FE  CFDE F011          	movff	postinc2,??_UpdateClock
  2838   001202  CFDD F012          	movff	postdec2,??_UpdateClock+1
  2839   001206  0E03               	movlw	3
  2840   001208  1611               	andwf	??_UpdateClock^0,f,c
  2841   00120A  0E00               	movlw	0
  2842   00120C  1612               	andwf	(??_UpdateClock+1)^0,f,c
  2843   00120E  5011               	movf	??_UpdateClock^0,w,c
  2844   001210  1012               	iorwf	(??_UpdateClock+1)^0,w,c
  2845   001212  A4D8               	btfss	status,2,c
  2846   001214  EF0E  F009         	goto	u1951
  2847   001218  EF10  F009         	goto	u1950
  2848   00121C                     u1951:
  2849   00121C  EF21  F009         	goto	l2301
  2850   001220                     u1950:
  2851   001220  500C               	movf	UpdateClock@months^0,w,c
  2852   001222  6ED9               	movwf	fsr2l,c
  2853   001224  6ADA               	clrf	fsr2h,c
  2854   001226  0E02               	movlw	2
  2855   001228  18DE               	xorwf	postinc2,w,c
  2856   00122A  10DE               	iorwf	postinc2,w,c
  2857   00122C  A4D8               	btfss	status,2,c
  2858   00122E  EF1B  F009         	goto	u1961
  2859   001232  EF1D  F009         	goto	u1960
  2860   001236                     u1961:
  2861   001236  EF21  F009         	goto	l2301
  2862   00123A                     u1960:
  2863   00123A                     
  2864                           ;clock.c: 58:        DaysInMonth[1] = 29;
  2865   00123A  0E00               	movlw	0
  2866   00123C  6E1A               	movwf	(UpdateClock@DaysInMonth+3)^0,c
  2867   00123E  0E1D               	movlw	29
  2868   001240  6E19               	movwf	(UpdateClock@DaysInMonth+2)^0,c
  2869   001242                     l2301:
  2870                           
  2871                           ;clock.c: 62:     if (*years%100 == 0 && *months == 2 && *years%400 != 0){
  2872   001242  500D               	movf	UpdateClock@years^0,w,c
  2873   001244  6ED9               	movwf	fsr2l,c
  2874   001246  6ADA               	clrf	fsr2h,c
  2875   001248  CFDE F001          	movff	postinc2,___awmod@dividend
  2876   00124C  CFDD F002          	movff	postdec2,___awmod@dividend+1
  2877   001250  0E00               	movlw	0
  2878   001252  6E04               	movwf	(___awmod@divisor+1)^0,c
  2879   001254  0E64               	movlw	100
  2880   001256  6E03               	movwf	___awmod@divisor^0,c
  2881   001258  EC31  F00D         	call	___awmod	;wreg free
  2882   00125C  5001               	movf	?___awmod^0,w,c
  2883   00125E  1002               	iorwf	(?___awmod+1)^0,w,c
  2884   001260  A4D8               	btfss	status,2,c
  2885   001262  EF35  F009         	goto	u1971
  2886   001266  EF37  F009         	goto	u1970
  2887   00126A                     u1971:
  2888   00126A  EF5E  F009         	goto	l2309
  2889   00126E                     u1970:
  2890   00126E  500C               	movf	UpdateClock@months^0,w,c
  2891   001270  6ED9               	movwf	fsr2l,c
  2892   001272  6ADA               	clrf	fsr2h,c
  2893   001274  0E02               	movlw	2
  2894   001276  18DE               	xorwf	postinc2,w,c
  2895   001278  10DE               	iorwf	postinc2,w,c
  2896   00127A  A4D8               	btfss	status,2,c
  2897   00127C  EF42  F009         	goto	u1981
  2898   001280  EF44  F009         	goto	u1980
  2899   001284                     u1981:
  2900   001284  EF5E  F009         	goto	l2309
  2901   001288                     u1980:
  2902   001288  500D               	movf	UpdateClock@years^0,w,c
  2903   00128A  6ED9               	movwf	fsr2l,c
  2904   00128C  6ADA               	clrf	fsr2h,c
  2905   00128E  CFDE F001          	movff	postinc2,___awmod@dividend
  2906   001292  CFDD F002          	movff	postdec2,___awmod@dividend+1
  2907   001296  0E01               	movlw	1
  2908   001298  6E04               	movwf	(___awmod@divisor+1)^0,c
  2909   00129A  0E90               	movlw	144
  2910   00129C  6E03               	movwf	___awmod@divisor^0,c
  2911   00129E  EC31  F00D         	call	___awmod	;wreg free
  2912   0012A2  5001               	movf	?___awmod^0,w,c
  2913   0012A4  1002               	iorwf	(?___awmod+1)^0,w,c
  2914   0012A6  B4D8               	btfsc	status,2,c
  2915   0012A8  EF58  F009         	goto	u1991
  2916   0012AC  EF5A  F009         	goto	u1990
  2917   0012B0                     u1991:
  2918   0012B0  EF5E  F009         	goto	l2309
  2919   0012B4                     u1990:
  2920   0012B4                     
  2921                           ;clock.c: 63:             DaysInMonth[1] = 28;
  2922   0012B4  0E00               	movlw	0
  2923   0012B6  6E1A               	movwf	(UpdateClock@DaysInMonth+3)^0,c
  2924   0012B8  0E1C               	movlw	28
  2925   0012BA  6E19               	movwf	(UpdateClock@DaysInMonth+2)^0,c
  2926   0012BC                     l2309:
  2927                           
  2928                           ;clock.c: 67:     if (*days > (DaysInMonth[*months-1] ) ) {
  2929   0012BC  500A               	movf	UpdateClock@days^0,w,c
  2930   0012BE  6ED9               	movwf	fsr2l,c
  2931   0012C0  6ADA               	clrf	fsr2h,c
  2932   0012C2  500C               	movf	UpdateClock@months^0,w,c
  2933   0012C4  6EE1               	movwf	fsr1l,c
  2934   0012C6  6AE2               	clrf	fsr1h,c
  2935   0012C8  50E7               	movf	indf1,w,c
  2936   0012CA  0D02               	mullw	2
  2937   0012CC  CFF3 F013          	movff	prodl,??_UpdateClock+2
  2938   0012D0  0EFE               	movlw	254
  2939   0012D2  2613               	addwf	(??_UpdateClock+2)^0,f,c
  2940   0012D4  5013               	movf	(??_UpdateClock+2)^0,w,c
  2941   0012D6  0F17               	addlw	low UpdateClock@DaysInMonth
  2942   0012D8  6EE1               	movwf	fsr1l,c
  2943   0012DA  6AE2               	clrf	fsr1h,c
  2944   0012DC  50DE               	movf	postinc2,w,c
  2945   0012DE  5CE6               	subwf	postinc1,w,c
  2946   0012E0  50E6               	movf	postinc1,w,c
  2947   0012E2  0A80               	xorlw	128
  2948   0012E4  6E16               	movwf	(??_UpdateClock+5)^0,c
  2949   0012E6  50DE               	movf	postinc2,w,c
  2950   0012E8  0A80               	xorlw	128
  2951   0012EA  5816               	subwfb	(??_UpdateClock+5)^0,w,c
  2952   0012EC  B0D8               	btfsc	status,0,c
  2953   0012EE  EF7B  F009         	goto	u2001
  2954   0012F2  EF7D  F009         	goto	u2000
  2955   0012F6                     u2001:
  2956   0012F6  EFC2  F009         	goto	l253
  2957   0012FA                     u2000:
  2958   0012FA                     
  2959                           ;clock.c: 68:         *days = 1;
  2960   0012FA  500A               	movf	UpdateClock@days^0,w,c
  2961   0012FC  6ED9               	movwf	fsr2l,c
  2962   0012FE  6ADA               	clrf	fsr2h,c
  2963   001300  0E01               	movlw	1
  2964   001302  6EDE               	movwf	postinc2,c
  2965   001304  0E00               	movlw	0
  2966   001306  6EDD               	movwf	postdec2,c
  2967   001308                     
  2968                           ;clock.c: 69:         *months = *months + 1 ;
  2969   001308  500C               	movf	UpdateClock@months^0,w,c
  2970   00130A  6ED9               	movwf	fsr2l,c
  2971   00130C  6ADA               	clrf	fsr2h,c
  2972   00130E  CFDE F011          	movff	postinc2,??_UpdateClock
  2973   001312  CFDD F012          	movff	postdec2,??_UpdateClock+1
  2974   001316  0E01               	movlw	1
  2975   001318  2611               	addwf	??_UpdateClock^0,f,c
  2976   00131A  0E00               	movlw	0
  2977   00131C  2212               	addwfc	(??_UpdateClock+1)^0,f,c
  2978   00131E  500C               	movf	UpdateClock@months^0,w,c
  2979   001320  6ED9               	movwf	fsr2l,c
  2980   001322  6ADA               	clrf	fsr2h,c
  2981   001324  C011  FFDE         	movff	??_UpdateClock,postinc2
  2982   001328  C012  FFDD         	movff	??_UpdateClock+1,postdec2
  2983   00132C                     
  2984                           ;clock.c: 71:         if (*months >= 12+1) {
  2985   00132C  500C               	movf	UpdateClock@months^0,w,c
  2986   00132E  6ED9               	movwf	fsr2l,c
  2987   001330  6ADA               	clrf	fsr2h,c
  2988   001332  0E01               	movlw	1
  2989   001334  BEDB               	btfsc	plusw2,7,c
  2990   001336  EFA7  F009         	goto	u2011
  2991   00133A  0E01               	movlw	1
  2992   00133C  50DB               	movf	plusw2,w,c
  2993   00133E  E109               	bnz	u2010
  2994   001340  0E0D               	movlw	13
  2995   001342  5CDE               	subwf	postinc2,w,c
  2996   001344  A0D8               	btfss	status,0,c
  2997   001346  EFA7  F009         	goto	u2011
  2998   00134A  EFA9  F009         	goto	u2010
  2999   00134E                     u2011:
  3000   00134E  EFC2  F009         	goto	l253
  3001   001352                     u2010:
  3002   001352                     
  3003                           ;clock.c: 72:             *months = 1;
  3004   001352  500C               	movf	UpdateClock@months^0,w,c
  3005   001354  6ED9               	movwf	fsr2l,c
  3006   001356  6ADA               	clrf	fsr2h,c
  3007   001358  0E01               	movlw	1
  3008   00135A  6EDE               	movwf	postinc2,c
  3009   00135C  0E00               	movlw	0
  3010   00135E  6EDD               	movwf	postdec2,c
  3011   001360                     
  3012                           ;clock.c: 73:             *years = *years + 1;
  3013   001360  500D               	movf	UpdateClock@years^0,w,c
  3014   001362  6ED9               	movwf	fsr2l,c
  3015   001364  6ADA               	clrf	fsr2h,c
  3016   001366  CFDE F011          	movff	postinc2,??_UpdateClock
  3017   00136A  CFDD F012          	movff	postdec2,??_UpdateClock+1
  3018   00136E  0E01               	movlw	1
  3019   001370  2611               	addwf	??_UpdateClock^0,f,c
  3020   001372  0E00               	movlw	0
  3021   001374  2212               	addwfc	(??_UpdateClock+1)^0,f,c
  3022   001376  500D               	movf	UpdateClock@years^0,w,c
  3023   001378  6ED9               	movwf	fsr2l,c
  3024   00137A  6ADA               	clrf	fsr2h,c
  3025   00137C  C011  FFDE         	movff	??_UpdateClock,postinc2
  3026   001380  C012  FFDD         	movff	??_UpdateClock+1,postdec2
  3027   001384                     l253:
  3028   001384  0012               	return		;funcret
  3029   001386                     __end_of_UpdateClock:
  3030                           	callstack 0
  3031                           
  3032 ;; *************** function ___awmod *****************
  3033 ;; Defined at:
  3034 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\awmod.c"
  3035 ;; Parameters:    Size  Location     Type
  3036 ;;  dividend        2    0[COMRAM] int 
  3037 ;;  divisor         2    2[COMRAM] int 
  3038 ;; Auto vars:     Size  Location     Type
  3039 ;;  sign            1    5[COMRAM] unsigned char 
  3040 ;;  counter         1    4[COMRAM] unsigned char 
  3041 ;; Return value:  Size  Location     Type
  3042 ;;                  2    0[COMRAM] int 
  3043 ;; Registers used:
  3044 ;;		wreg, status,2, status,0
  3045 ;; Tracked objects:
  3046 ;;		On entry : 0/0
  3047 ;;		On exit  : 0/0
  3048 ;;		Unchanged: 0/0
  3049 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3050 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3051 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3052 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3053 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3054 ;;Total ram usage:        6 bytes
  3055 ;; Hardware stack levels used: 1
  3056 ;; Hardware stack levels required when called: 1
  3057 ;; This function calls:
  3058 ;;		Nothing
  3059 ;; This function is called by:
  3060 ;;		_UpdateClock
  3061 ;;		_dtoa
  3062 ;; This function uses a non-reentrant model
  3063 ;;
  3064                           
  3065                           	psect	text14
  3066   001A62                     __ptext14:
  3067                           	callstack 0
  3068   001A62                     ___awmod:
  3069                           	callstack 25
  3070   001A62  0E00               	movlw	0
  3071   001A64  6E06               	movwf	___awmod@sign^0,c
  3072   001A66  BE02               	btfsc	(___awmod@dividend+1)^0,7,c
  3073   001A68  EF3A  F00D         	goto	u1420
  3074   001A6C  EF38  F00D         	goto	u1421
  3075   001A70                     u1421:
  3076   001A70  EF40  F00D         	goto	l1955
  3077   001A74                     u1420:
  3078   001A74  6C01               	negf	___awmod@dividend^0,c
  3079   001A76  1E02               	comf	(___awmod@dividend+1)^0,f,c
  3080   001A78  B0D8               	btfsc	status,0,c
  3081   001A7A  2A02               	incf	(___awmod@dividend+1)^0,f,c
  3082   001A7C  0E01               	movlw	1
  3083   001A7E  6E06               	movwf	___awmod@sign^0,c
  3084   001A80                     l1955:
  3085   001A80  BE04               	btfsc	(___awmod@divisor+1)^0,7,c
  3086   001A82  EF47  F00D         	goto	u1430
  3087   001A86  EF45  F00D         	goto	u1431
  3088   001A8A                     u1431:
  3089   001A8A  EF4B  F00D         	goto	l1959
  3090   001A8E                     u1430:
  3091   001A8E  6C03               	negf	___awmod@divisor^0,c
  3092   001A90  1E04               	comf	(___awmod@divisor+1)^0,f,c
  3093   001A92  B0D8               	btfsc	status,0,c
  3094   001A94  2A04               	incf	(___awmod@divisor+1)^0,f,c
  3095   001A96                     l1959:
  3096   001A96  5003               	movf	___awmod@divisor^0,w,c
  3097   001A98  1004               	iorwf	(___awmod@divisor+1)^0,w,c
  3098   001A9A  B4D8               	btfsc	status,2,c
  3099   001A9C  EF52  F00D         	goto	u1441
  3100   001AA0  EF54  F00D         	goto	u1440
  3101   001AA4                     u1441:
  3102   001AA4  EF78  F00D         	goto	l1975
  3103   001AA8                     u1440:
  3104   001AA8  0E01               	movlw	1
  3105   001AAA  6E05               	movwf	___awmod@counter^0,c
  3106   001AAC  EF5C  F00D         	goto	l1965
  3107   001AB0                     l1963:
  3108   001AB0  90D8               	bcf	status,0,c
  3109   001AB2  3603               	rlcf	___awmod@divisor^0,f,c
  3110   001AB4  3604               	rlcf	(___awmod@divisor+1)^0,f,c
  3111   001AB6  2A05               	incf	___awmod@counter^0,f,c
  3112   001AB8                     l1965:
  3113   001AB8  AE04               	btfss	(___awmod@divisor+1)^0,7,c
  3114   001ABA  EF61  F00D         	goto	u1451
  3115   001ABE  EF63  F00D         	goto	u1450
  3116   001AC2                     u1451:
  3117   001AC2  EF58  F00D         	goto	l1963
  3118   001AC6                     u1450:
  3119   001AC6                     l1967:
  3120   001AC6  5003               	movf	___awmod@divisor^0,w,c
  3121   001AC8  5C01               	subwf	___awmod@dividend^0,w,c
  3122   001ACA  5004               	movf	(___awmod@divisor+1)^0,w,c
  3123   001ACC  5802               	subwfb	(___awmod@dividend+1)^0,w,c
  3124   001ACE  A0D8               	btfss	status,0,c
  3125   001AD0  EF6C  F00D         	goto	u1461
  3126   001AD4  EF6E  F00D         	goto	u1460
  3127   001AD8                     u1461:
  3128   001AD8  EF72  F00D         	goto	l1971
  3129   001ADC                     u1460:
  3130   001ADC  5003               	movf	___awmod@divisor^0,w,c
  3131   001ADE  5E01               	subwf	___awmod@dividend^0,f,c
  3132   001AE0  5004               	movf	(___awmod@divisor+1)^0,w,c
  3133   001AE2  5A02               	subwfb	(___awmod@dividend+1)^0,f,c
  3134   001AE4                     l1971:
  3135   001AE4  90D8               	bcf	status,0,c
  3136   001AE6  3204               	rrcf	(___awmod@divisor+1)^0,f,c
  3137   001AE8  3203               	rrcf	___awmod@divisor^0,f,c
  3138   001AEA  2E05               	decfsz	___awmod@counter^0,f,c
  3139   001AEC  EF63  F00D         	goto	l1967
  3140   001AF0                     l1975:
  3141   001AF0  5006               	movf	___awmod@sign^0,w,c
  3142   001AF2  B4D8               	btfsc	status,2,c
  3143   001AF4  EF7E  F00D         	goto	u1471
  3144   001AF8  EF80  F00D         	goto	u1470
  3145   001AFC                     u1471:
  3146   001AFC  EF84  F00D         	goto	l1979
  3147   001B00                     u1470:
  3148   001B00  6C01               	negf	___awmod@dividend^0,c
  3149   001B02  1E02               	comf	(___awmod@dividend+1)^0,f,c
  3150   001B04  B0D8               	btfsc	status,0,c
  3151   001B06  2A02               	incf	(___awmod@dividend+1)^0,f,c
  3152   001B08                     l1979:
  3153   001B08  C001  F001         	movff	___awmod@dividend,?___awmod
  3154   001B0C  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
  3155   001B10  0012               	return		;funcret
  3156   001B12                     __end_of___awmod:
  3157                           	callstack 0
  3158                           
  3159 ;; *************** function _Timer0_init *****************
  3160 ;; Defined at:
  3161 ;;		line 8 in file "timers.c"
  3162 ;; Parameters:    Size  Location     Type
  3163 ;;		None
  3164 ;; Auto vars:     Size  Location     Type
  3165 ;;		None
  3166 ;; Return value:  Size  Location     Type
  3167 ;;                  1    wreg      void 
  3168 ;; Registers used:
  3169 ;;		wreg, status,2
  3170 ;; Tracked objects:
  3171 ;;		On entry : 0/0
  3172 ;;		On exit  : 0/0
  3173 ;;		Unchanged: 0/0
  3174 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3175 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3176 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3177 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3178 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3179 ;;Total ram usage:        0 bytes
  3180 ;; Hardware stack levels used: 1
  3181 ;; Hardware stack levels required when called: 1
  3182 ;; This function calls:
  3183 ;;		Nothing
  3184 ;; This function is called by:
  3185 ;;		_main
  3186 ;; This function uses a non-reentrant model
  3187 ;;
  3188                           
  3189                           	psect	text15
  3190   001F5A                     __ptext15:
  3191                           	callstack 0
  3192   001F5A                     _Timer0_init:
  3193                           	callstack 29
  3194   001F5A                     
  3195                           ;timers.c: 10:     T0CON1bits.T0CS=0b010;
  3196   001F5A  50D6               	movf	214,w,c	;volatile
  3197   001F5C  0B1F               	andlw	-225
  3198   001F5E  0940               	iorlw	64
  3199   001F60  6ED6               	movwf	214,c	;volatile
  3200   001F62                     
  3201                           ;timers.c: 11:     T0CON1bits.T0ASYNC=1;
  3202   001F62  88D6               	bsf	214,4,c	;volatile
  3203                           
  3204                           ;timers.c: 13:     T0CON1bits.T0CKPS=0b1000;
  3205   001F64  50D6               	movf	214,w,c	;volatile
  3206   001F66  0BF0               	andlw	-16
  3207   001F68  0908               	iorlw	8
  3208   001F6A  6ED6               	movwf	214,c	;volatile
  3209   001F6C                     
  3210                           ;timers.c: 15:     T0CON0bits.T016BIT=1;
  3211   001F6C  88D5               	bsf	213,4,c	;volatile
  3212                           
  3213                           ;timers.c: 18:     TMR0H = 0b00001011;
  3214   001F6E  0E0B               	movlw	11
  3215   001F70  6ED4               	movwf	212,c	;volatile
  3216                           
  3217                           ;timers.c: 19:     TMR0L = 0b11011100;
  3218   001F72  0EDC               	movlw	220
  3219   001F74  6ED3               	movwf	211,c	;volatile
  3220   001F76                     
  3221                           ;timers.c: 35:     T0CON0bits.T0EN=1;
  3222   001F76  8ED5               	bsf	213,7,c	;volatile
  3223   001F78  0012               	return		;funcret
  3224   001F7A                     __end_of_Timer0_init:
  3225                           	callstack 0
  3226                           
  3227 ;; *************** function _LEDarray_init *****************
  3228 ;; Defined at:
  3229 ;;		line 8 in file "LEDarray.c"
  3230 ;; Parameters:    Size  Location     Type
  3231 ;;		None
  3232 ;; Auto vars:     Size  Location     Type
  3233 ;;		None
  3234 ;; Return value:  Size  Location     Type
  3235 ;;                  1    wreg      void 
  3236 ;; Registers used:
  3237 ;;		None
  3238 ;; Tracked objects:
  3239 ;;		On entry : 0/0
  3240 ;;		On exit  : 0/0
  3241 ;;		Unchanged: 0/0
  3242 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3243 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3244 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3245 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3246 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3247 ;;Total ram usage:        0 bytes
  3248 ;; Hardware stack levels used: 1
  3249 ;; Hardware stack levels required when called: 1
  3250 ;; This function calls:
  3251 ;;		Nothing
  3252 ;; This function is called by:
  3253 ;;		_main
  3254 ;; This function uses a non-reentrant model
  3255 ;;
  3256                           
  3257                           	psect	text16
  3258   001F10                     __ptext16:
  3259                           	callstack 0
  3260   001F10                     _LEDarray_init:
  3261                           	callstack 29
  3262   001F10                     
  3263                           ;LEDarray.c: 16:     TRISGbits.TRISG0 = 0;
  3264   001F10  9087               	bcf	135,0,c	;volatile
  3265                           
  3266                           ;LEDarray.c: 17:     LATGbits.LATG0 = 0;
  3267   001F12  907F               	bcf	127,0,c	;volatile
  3268                           
  3269                           ;LEDarray.c: 19:     TRISGbits.TRISG1 = 0;
  3270   001F14  9287               	bcf	135,1,c	;volatile
  3271                           
  3272                           ;LEDarray.c: 20:     LATGbits.LATG1 = 0;
  3273   001F16  927F               	bcf	127,1,c	;volatile
  3274                           
  3275                           ;LEDarray.c: 22:     TRISAbits.TRISA2 = 0;
  3276   001F18  9481               	bcf	129,2,c	;volatile
  3277                           
  3278                           ;LEDarray.c: 23:     LATAbits.LATA2 = 0;
  3279   001F1A  9479               	bcf	121,2,c	;volatile
  3280                           
  3281                           ;LEDarray.c: 25:     TRISFbits.TRISF6 = 0;
  3282   001F1C  9C86               	bcf	134,6,c	;volatile
  3283                           
  3284                           ;LEDarray.c: 26:     LATFbits.LATF6 = 0;
  3285   001F1E  9C7E               	bcf	126,6,c	;volatile
  3286                           
  3287                           ;LEDarray.c: 28:     TRISAbits.TRISA4 = 0;
  3288   001F20  9881               	bcf	129,4,c	;volatile
  3289                           
  3290                           ;LEDarray.c: 29:     LATAbits.LATA4 = 0;
  3291   001F22  9879               	bcf	121,4,c	;volatile
  3292                           
  3293                           ;LEDarray.c: 31:     TRISAbits.TRISA5 = 0;
  3294   001F24  9A81               	bcf	129,5,c	;volatile
  3295                           
  3296                           ;LEDarray.c: 32:     LATAbits.LATA5 = 0;
  3297   001F26  9A79               	bcf	121,5,c	;volatile
  3298                           
  3299                           ;LEDarray.c: 34:     TRISFbits.TRISF0 = 0;
  3300   001F28  9086               	bcf	134,0,c	;volatile
  3301                           
  3302                           ;LEDarray.c: 35:     LATFbits.LATF0 = 0;
  3303   001F2A  907E               	bcf	126,0,c	;volatile
  3304                           
  3305                           ;LEDarray.c: 37:     TRISBbits.TRISB0 = 0;
  3306   001F2C  9082               	bcf	130,0,c	;volatile
  3307                           
  3308                           ;LEDarray.c: 38:     LATBbits.LATB0 = 0;
  3309   001F2E  907A               	bcf	122,0,c	;volatile
  3310                           
  3311                           ;LEDarray.c: 40:     TRISBbits.TRISB1 = 0;
  3312   001F30  9282               	bcf	130,1,c	;volatile
  3313                           
  3314                           ;LEDarray.c: 41:     LATBbits.LATB1 = 0;
  3315   001F32  927A               	bcf	122,1,c	;volatile
  3316   001F34  0012               	return		;funcret
  3317   001F36                     __end_of_LEDarray_init:
  3318                           	callstack 0
  3319                           
  3320 ;; *************** function _LEDarray_disp_bin *****************
  3321 ;; Defined at:
  3322 ;;		line 49 in file "LEDarray.c"
  3323 ;; Parameters:    Size  Location     Type
  3324 ;;  number          2    0[COMRAM] unsigned int 
  3325 ;; Auto vars:     Size  Location     Type
  3326 ;;		None
  3327 ;; Return value:  Size  Location     Type
  3328 ;;                  1    wreg      void 
  3329 ;; Registers used:
  3330 ;;		None
  3331 ;; Tracked objects:
  3332 ;;		On entry : 0/0
  3333 ;;		On exit  : 0/0
  3334 ;;		Unchanged: 0/0
  3335 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3336 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3337 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3338 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3339 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3340 ;;Total ram usage:        2 bytes
  3341 ;; Hardware stack levels used: 1
  3342 ;; Hardware stack levels required when called: 1
  3343 ;; This function calls:
  3344 ;;		Nothing
  3345 ;; This function is called by:
  3346 ;;		_main
  3347 ;; This function uses a non-reentrant model
  3348 ;;
  3349                           
  3350                           	psect	text17
  3351   0018D6                     __ptext17:
  3352                           	callstack 0
  3353   0018D6                     _LEDarray_disp_bin:
  3354                           	callstack 29
  3355   0018D6                     
  3356                           ;LEDarray.c: 49: void LEDarray_disp_bin(unsigned int number);LEDarray.c: 50: {;LEDarray.
      +                          c: 53:     if (number & 0b000000001){ LATGbits.LATG0 = 1 ; }
  3357   0018D6  A001               	btfss	LEDarray_disp_bin@number^0,0,c
  3358   0018D8  EF70  F00C         	goto	u2021
  3359   0018DC  EF72  F00C         	goto	u2020
  3360   0018E0                     u2021:
  3361   0018E0  EF75  F00C         	goto	l121
  3362   0018E4                     u2020:
  3363   0018E4  807F               	bsf	127,0,c	;volatile
  3364   0018E6  EF76  F00C         	goto	l122
  3365   0018EA                     l121:
  3366   0018EA  907F               	bcf	127,0,c	;volatile
  3367   0018EC                     l122:
  3368                           
  3369                           ;LEDarray.c: 56:     if (number & 0b000000010){ LATGbits.LATG1 = 1 ; }
  3370   0018EC  A201               	btfss	LEDarray_disp_bin@number^0,1,c
  3371   0018EE  EF7B  F00C         	goto	u2031
  3372   0018F2  EF7D  F00C         	goto	u2030
  3373   0018F6                     u2031:
  3374   0018F6  EF80  F00C         	goto	l123
  3375   0018FA                     u2030:
  3376   0018FA  827F               	bsf	127,1,c	;volatile
  3377   0018FC  EF81  F00C         	goto	l124
  3378   001900                     l123:
  3379   001900  927F               	bcf	127,1,c	;volatile
  3380   001902                     l124:
  3381                           
  3382                           ;LEDarray.c: 59:     if (number & 0b000000100){ LATAbits.LATA2 = 1 ; }
  3383   001902  A401               	btfss	LEDarray_disp_bin@number^0,2,c
  3384   001904  EF86  F00C         	goto	u2041
  3385   001908  EF88  F00C         	goto	u2040
  3386   00190C                     u2041:
  3387   00190C  EF8B  F00C         	goto	l125
  3388   001910                     u2040:
  3389   001910  8479               	bsf	121,2,c	;volatile
  3390   001912  EF8C  F00C         	goto	l126
  3391   001916                     l125:
  3392   001916  9479               	bcf	121,2,c	;volatile
  3393   001918                     l126:
  3394                           
  3395                           ;LEDarray.c: 62:     if (number & 0b000001000){ LATFbits.LATF6 = 1 ; }
  3396   001918  A601               	btfss	LEDarray_disp_bin@number^0,3,c
  3397   00191A  EF91  F00C         	goto	u2051
  3398   00191E  EF93  F00C         	goto	u2050
  3399   001922                     u2051:
  3400   001922  EF96  F00C         	goto	l127
  3401   001926                     u2050:
  3402   001926  8C7E               	bsf	126,6,c	;volatile
  3403   001928  EF97  F00C         	goto	l128
  3404   00192C                     l127:
  3405   00192C  9C7E               	bcf	126,6,c	;volatile
  3406   00192E                     l128:
  3407                           
  3408                           ;LEDarray.c: 65:     if (number & 0b000010000){ LATAbits.LATA4 = 1 ; }
  3409   00192E  A801               	btfss	LEDarray_disp_bin@number^0,4,c
  3410   001930  EF9C  F00C         	goto	u2061
  3411   001934  EF9E  F00C         	goto	u2060
  3412   001938                     u2061:
  3413   001938  EFA1  F00C         	goto	l129
  3414   00193C                     u2060:
  3415   00193C  8879               	bsf	121,4,c	;volatile
  3416   00193E  EFA2  F00C         	goto	l130
  3417   001942                     l129:
  3418   001942  9879               	bcf	121,4,c	;volatile
  3419   001944                     l130:
  3420                           
  3421                           ;LEDarray.c: 68:     if (number & 0b000100000){ LATAbits.LATA5 = 1 ; }
  3422   001944  AA01               	btfss	LEDarray_disp_bin@number^0,5,c
  3423   001946  EFA7  F00C         	goto	u2071
  3424   00194A  EFA9  F00C         	goto	u2070
  3425   00194E                     u2071:
  3426   00194E  EFAC  F00C         	goto	l131
  3427   001952                     u2070:
  3428   001952  8A79               	bsf	121,5,c	;volatile
  3429   001954  EFAD  F00C         	goto	l132
  3430   001958                     l131:
  3431   001958  9A79               	bcf	121,5,c	;volatile
  3432   00195A                     l132:
  3433                           
  3434                           ;LEDarray.c: 71:     if (number & 0b001000000){ LATFbits.LATF0 = 1 ; }
  3435   00195A  AC01               	btfss	LEDarray_disp_bin@number^0,6,c
  3436   00195C  EFB2  F00C         	goto	u2081
  3437   001960  EFB4  F00C         	goto	u2080
  3438   001964                     u2081:
  3439   001964  EFB7  F00C         	goto	l133
  3440   001968                     u2080:
  3441   001968  807E               	bsf	126,0,c	;volatile
  3442   00196A  EFB8  F00C         	goto	l134
  3443   00196E                     l133:
  3444   00196E  907E               	bcf	126,0,c	;volatile
  3445   001970                     l134:
  3446                           
  3447                           ;LEDarray.c: 74:     if (number & 0b010000000){ LATBbits.LATB0 = 1 ; }
  3448   001970  AE01               	btfss	LEDarray_disp_bin@number^0,7,c
  3449   001972  EFBD  F00C         	goto	u2091
  3450   001976  EFBF  F00C         	goto	u2090
  3451   00197A                     u2091:
  3452   00197A  EFC2  F00C         	goto	l135
  3453   00197E                     u2090:
  3454   00197E  807A               	bsf	122,0,c	;volatile
  3455   001980  EFC3  F00C         	goto	l136
  3456   001984                     l135:
  3457   001984  907A               	bcf	122,0,c	;volatile
  3458   001986                     l136:
  3459                           
  3460                           ;LEDarray.c: 77:     if (number & 0b100000000){ LATBbits.LATB1 = 1 ; }
  3461   001986  A002               	btfss	(LEDarray_disp_bin@number+1)^0,0,c
  3462   001988  EFC8  F00C         	goto	u2101
  3463   00198C  EFCA  F00C         	goto	u2100
  3464   001990                     u2101:
  3465   001990  EFCD  F00C         	goto	l137
  3466   001994                     u2100:
  3467   001994  827A               	bsf	122,1,c	;volatile
  3468   001996  EFCE  F00C         	goto	l139
  3469   00199A                     l137:
  3470   00199A  927A               	bcf	122,1,c	;volatile
  3471   00199C                     l139:
  3472   00199C  0012               	return		;funcret
  3473   00199E                     __end_of_LEDarray_disp_bin:
  3474                           	callstack 0
  3475                           
  3476 ;; *************** function _LCD_setline *****************
  3477 ;; Defined at:
  3478 ;;		line 120 in file "LCD.c"
  3479 ;; Parameters:    Size  Location     Type
  3480 ;;  line            1    wreg     unsigned char 
  3481 ;; Auto vars:     Size  Location     Type
  3482 ;;  line            1    3[COMRAM] unsigned char 
  3483 ;; Return value:  Size  Location     Type
  3484 ;;                  1    wreg      void 
  3485 ;; Registers used:
  3486 ;;		wreg, status,2, status,0, cstack
  3487 ;; Tracked objects:
  3488 ;;		On entry : 0/0
  3489 ;;		On exit  : 0/0
  3490 ;;		Unchanged: 0/0
  3491 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3492 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3493 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3494 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3495 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3496 ;;Total ram usage:        1 bytes
  3497 ;; Hardware stack levels used: 1
  3498 ;; Hardware stack levels required when called: 4
  3499 ;; This function calls:
  3500 ;;		_LCD_sendbyte
  3501 ;; This function is called by:
  3502 ;;		_main
  3503 ;; This function uses a non-reentrant model
  3504 ;;
  3505                           
  3506                           	psect	text18
  3507   001E1A                     __ptext18:
  3508                           	callstack 0
  3509   001E1A                     _LCD_setline:
  3510                           	callstack 26
  3511                           
  3512                           ;incstack = 0
  3513                           ;LCD_setline@line stored from wreg
  3514   001E1A  6E04               	movwf	LCD_setline@line^0,c
  3515   001E1C                     
  3516                           ;LCD.c: 120: void LCD_setline (char line);LCD.c: 121: {;LCD.c: 124:     if (line == 2){
  3517   001E1C  0E02               	movlw	2
  3518   001E1E  1804               	xorwf	LCD_setline@line^0,w,c
  3519   001E20  A4D8               	btfss	status,2,c
  3520   001E22  EF15  F00F         	goto	u2111
  3521   001E26  EF17  F00F         	goto	u2110
  3522   001E2A                     u2111:
  3523   001E2A  EF1C  F00F         	goto	l2345
  3524   001E2E                     u2110:
  3525   001E2E                     
  3526                           ;LCD.c: 125:         LCD_sendbyte(0xC0,0);
  3527   001E2E  0E00               	movlw	0
  3528   001E30  6E02               	movwf	LCD_sendbyte@type^0,c
  3529   001E32  0EC0               	movlw	192
  3530   001E34  EC9B  F00F         	call	_LCD_sendbyte
  3531   001E38                     l2345:
  3532                           
  3533                           ;LCD.c: 128:     if (line==1){
  3534   001E38  0404               	decf	LCD_setline@line^0,w,c
  3535   001E3A  A4D8               	btfss	status,2,c
  3536   001E3C  EF22  F00F         	goto	u2121
  3537   001E40  EF24  F00F         	goto	u2120
  3538   001E44                     u2121:
  3539   001E44  EF29  F00F         	goto	l294
  3540   001E48                     u2120:
  3541   001E48                     
  3542                           ;LCD.c: 129:         LCD_sendbyte(0x80,0);
  3543   001E48  0E00               	movlw	0
  3544   001E4A  6E02               	movwf	LCD_sendbyte@type^0,c
  3545   001E4C  0E80               	movlw	128
  3546   001E4E  EC9B  F00F         	call	_LCD_sendbyte
  3547   001E52                     l294:
  3548   001E52  0012               	return		;funcret
  3549   001E54                     __end_of_LCD_setline:
  3550                           	callstack 0
  3551                           
  3552 ;; *************** function _LCD_sendstring *****************
  3553 ;; Defined at:
  3554 ;;		line 136 in file "LCD.c"
  3555 ;; Parameters:    Size  Location     Type
  3556 ;;  string          1    3[COMRAM] PTR unsigned char 
  3557 ;;		 -> main@buf(20), 
  3558 ;; Auto vars:     Size  Location     Type
  3559 ;;		None
  3560 ;; Return value:  Size  Location     Type
  3561 ;;                  1    wreg      void 
  3562 ;; Registers used:
  3563 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3564 ;; Tracked objects:
  3565 ;;		On entry : 0/0
  3566 ;;		On exit  : 0/0
  3567 ;;		Unchanged: 0/0
  3568 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3569 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3570 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3571 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3572 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3573 ;;Total ram usage:        1 bytes
  3574 ;; Hardware stack levels used: 1
  3575 ;; Hardware stack levels required when called: 4
  3576 ;; This function calls:
  3577 ;;		_LCD_sendbyte
  3578 ;; This function is called by:
  3579 ;;		_main
  3580 ;;		_ADC2String
  3581 ;; This function uses a non-reentrant model
  3582 ;;
  3583                           
  3584                           	psect	text19
  3585   001EBC                     __ptext19:
  3586                           	callstack 0
  3587   001EBC                     _LCD_sendstring:
  3588                           	callstack 26
  3589   001EBC                     
  3590                           ;LCD.c: 136: void LCD_sendstring(char *string);LCD.c: 137: {;LCD.c: 139:     while(*stri
      +                          ng != 0){
  3591   001EBC  EF69  F00F         	goto	l2367
  3592   001EC0                     l2363:
  3593                           
  3594                           ;LCD.c: 140:   LCD_sendbyte(*string++,1);
  3595   001EC0  0E01               	movlw	1
  3596   001EC2  6E02               	movwf	LCD_sendbyte@type^0,c
  3597   001EC4  5004               	movf	LCD_sendstring@string^0,w,c
  3598   001EC6  6ED9               	movwf	fsr2l,c
  3599   001EC8  6ADA               	clrf	fsr2h,c
  3600   001ECA  50DF               	movf	indf2,w,c
  3601   001ECC  EC9B  F00F         	call	_LCD_sendbyte
  3602   001ED0  2A04               	incf	LCD_sendstring@string^0,f,c
  3603   001ED2                     l2367:
  3604                           
  3605                           ;LCD.c: 139:     while(*string != 0){
  3606   001ED2  5004               	movf	LCD_sendstring@string^0,w,c
  3607   001ED4  6ED9               	movwf	fsr2l,c
  3608   001ED6  6ADA               	clrf	fsr2h,c
  3609   001ED8  50DF               	movf	indf2,w,c
  3610   001EDA  A4D8               	btfss	status,2,c
  3611   001EDC  EF72  F00F         	goto	u2131
  3612   001EE0  EF74  F00F         	goto	u2130
  3613   001EE4                     u2131:
  3614   001EE4  EF60  F00F         	goto	l2363
  3615   001EE8                     u2130:
  3616   001EE8  0012               	return		;funcret
  3617   001EEA                     __end_of_LCD_sendstring:
  3618                           	callstack 0
  3619                           
  3620 ;; *************** function _LCD_Init *****************
  3621 ;; Defined at:
  3622 ;;		line 57 in file "LCD.c"
  3623 ;; Parameters:    Size  Location     Type
  3624 ;;		None
  3625 ;; Auto vars:     Size  Location     Type
  3626 ;;		None
  3627 ;; Return value:  Size  Location     Type
  3628 ;;                  1    wreg      void 
  3629 ;; Registers used:
  3630 ;;		wreg, status,2, status,0, cstack
  3631 ;; Tracked objects:
  3632 ;;		On entry : 0/0
  3633 ;;		On exit  : 0/0
  3634 ;;		Unchanged: 0/0
  3635 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3636 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3637 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3638 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3639 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3640 ;;Total ram usage:        2 bytes
  3641 ;; Hardware stack levels used: 1
  3642 ;; Hardware stack levels required when called: 4
  3643 ;; This function calls:
  3644 ;;		_LCD_sendbyte
  3645 ;;		_LCD_sendnibble
  3646 ;; This function is called by:
  3647 ;;		_main
  3648 ;; This function uses a non-reentrant model
  3649 ;;
  3650                           
  3651                           	psect	text20
  3652   0017B6                     __ptext20:
  3653                           	callstack 0
  3654   0017B6                     _LCD_Init:
  3655                           	callstack 26
  3656   0017B6                     
  3657                           ;LCD.c: 69:     TRISBbits.TRISB3 = 0;
  3658   0017B6  9682               	bcf	130,3,c	;volatile
  3659                           
  3660                           ;LCD.c: 71:     LATBbits.LATB3 = 0;
  3661   0017B8  967A               	bcf	122,3,c	;volatile
  3662                           
  3663                           ;LCD.c: 73:     TRISBbits.TRISB2 = 0;
  3664   0017BA  9482               	bcf	130,2,c	;volatile
  3665                           
  3666                           ;LCD.c: 75:     LATBbits.LATB2 = 0;
  3667   0017BC  947A               	bcf	122,2,c	;volatile
  3668                           
  3669                           ;LCD.c: 77:     TRISEbits.TRISE3 = 0;
  3670   0017BE  9685               	bcf	133,3,c	;volatile
  3671                           
  3672                           ;LCD.c: 79:     LATEbits.LATE3 = 0;
  3673   0017C0  967D               	bcf	125,3,c	;volatile
  3674                           
  3675                           ;LCD.c: 81:     TRISEbits.TRISE1 = 0;
  3676   0017C2  9285               	bcf	133,1,c	;volatile
  3677                           
  3678                           ;LCD.c: 83:     LATEbits.LATE1 = 0;
  3679   0017C4  927D               	bcf	125,1,c	;volatile
  3680                           
  3681                           ;LCD.c: 85:     TRISCbits.TRISC2 = 0;
  3682   0017C6  9483               	bcf	131,2,c	;volatile
  3683                           
  3684                           ;LCD.c: 86:     LATCbits.LATC2 = 0;
  3685   0017C8  947B               	bcf	123,2,c	;volatile
  3686                           
  3687                           ;LCD.c: 88:     TRISCbits.TRISC6 = 0;
  3688   0017CA  9C83               	bcf	131,6,c	;volatile
  3689                           
  3690                           ;LCD.c: 89:     LATCbits.LATC6 = 0;
  3691   0017CC  9C7B               	bcf	123,6,c	;volatile
  3692   0017CE                     
  3693                           ;LCD.c: 91:     _delay((unsigned long)((150)*(64000000/4000.0)));
  3694   0017CE  0E0D               	movlw	13
  3695   0017D0  6E05               	movwf	(??_LCD_Init+1)^0,c
  3696   0017D2  0E2D               	movlw	45
  3697   0017D4  6E04               	movwf	??_LCD_Init^0,c
  3698   0017D6  0ED8               	movlw	216
  3699   0017D8                     u2517:
  3700   0017D8  2EE8               	decfsz	wreg,f,c
  3701   0017DA  D7FE               	bra	u2517
  3702   0017DC  2E04               	decfsz	??_LCD_Init^0,f,c
  3703   0017DE  D7FC               	bra	u2517
  3704   0017E0  2E05               	decfsz	(??_LCD_Init+1)^0,f,c
  3705   0017E2  D7FA               	bra	u2517
  3706   0017E4                     
  3707                           ;LCD.c: 92:     LCD_sendnibble(0b0011);
  3708   0017E4  0E03               	movlw	3
  3709   0017E6  EC7A  F00E         	call	_LCD_sendnibble
  3710   0017EA                     
  3711                           ;LCD.c: 93:     _delay((unsigned long)((5)*(64000000/4000.0)));
  3712   0017EA  0E68               	movlw	104
  3713   0017EC  6E04               	movwf	??_LCD_Init^0,c
  3714   0017EE  0EE4               	movlw	228
  3715   0017F0                     u2527:
  3716   0017F0  2EE8               	decfsz	wreg,f,c
  3717   0017F2  D7FE               	bra	u2527
  3718   0017F4  2E04               	decfsz	??_LCD_Init^0,f,c
  3719   0017F6  D7FC               	bra	u2527
  3720   0017F8  D000               	nop2	
  3721                           
  3722                           ;LCD.c: 94:     LCD_sendnibble(0b0011);
  3723   0017FA  0E03               	movlw	3
  3724   0017FC  EC7A  F00E         	call	_LCD_sendnibble
  3725   001800                     
  3726                           ;LCD.c: 95:     _delay((unsigned long)((150)*(64000000/4000000.0)));
  3727   001800  0E04               	movlw	4
  3728   001802  6E04               	movwf	??_LCD_Init^0,c
  3729   001804  0E1C               	movlw	28
  3730   001806                     u2537:
  3731   001806  2EE8               	decfsz	wreg,f,c
  3732   001808  D7FE               	bra	u2537
  3733   00180A  2E04               	decfsz	??_LCD_Init^0,f,c
  3734   00180C  D7FC               	bra	u2537
  3735   00180E  D000               	nop2	
  3736   001810                     
  3737                           ;LCD.c: 96:     LCD_sendnibble(0b0011);
  3738   001810  0E03               	movlw	3
  3739   001812  EC7A  F00E         	call	_LCD_sendnibble
  3740                           
  3741                           ;LCD.c: 97:     _delay((unsigned long)((150)*(64000000/4000000.0)));
  3742   001816  0E04               	movlw	4
  3743   001818  6E04               	movwf	??_LCD_Init^0,c
  3744   00181A  0E1C               	movlw	28
  3745   00181C                     u2547:
  3746   00181C  2EE8               	decfsz	wreg,f,c
  3747   00181E  D7FE               	bra	u2547
  3748   001820  2E04               	decfsz	??_LCD_Init^0,f,c
  3749   001822  D7FC               	bra	u2547
  3750   001824  D000               	nop2	
  3751   001826                     
  3752                           ;LCD.c: 98:     LCD_sendnibble(0b0010);
  3753   001826  0E02               	movlw	2
  3754   001828  EC7A  F00E         	call	_LCD_sendnibble
  3755   00182C                     
  3756                           ;LCD.c: 99:     _delay((unsigned long)((150)*(64000000/4000000.0)));
  3757   00182C  0E04               	movlw	4
  3758   00182E  6E04               	movwf	??_LCD_Init^0,c
  3759   001830  0E1C               	movlw	28
  3760   001832                     u2557:
  3761   001832  2EE8               	decfsz	wreg,f,c
  3762   001834  D7FE               	bra	u2557
  3763   001836  2E04               	decfsz	??_LCD_Init^0,f,c
  3764   001838  D7FC               	bra	u2557
  3765   00183A  D000               	nop2	
  3766   00183C                     
  3767                           ;LCD.c: 100:     LCD_sendbyte(0b00101100,0);
  3768   00183C  0E00               	movlw	0
  3769   00183E  6E02               	movwf	LCD_sendbyte@type^0,c
  3770   001840  0E2C               	movlw	44
  3771   001842  EC9B  F00F         	call	_LCD_sendbyte
  3772   001846                     
  3773                           ;LCD.c: 101:     _delay((unsigned long)((100)*(64000000/4000000.0)));
  3774   001846  0EE4               	movlw	228
  3775   001848                     u2567:
  3776   001848  D000               	nop2	
  3777   00184A  D000               	nop2	
  3778   00184C  2EE8               	decfsz	wreg,f,c
  3779   00184E  D7FC               	bra	u2567
  3780   001850  D000               	nop2	
  3781   001852  D000               	nop2	
  3782   001854                     
  3783                           ;LCD.c: 102:     LCD_sendbyte(0b00001000,0);
  3784   001854  0E00               	movlw	0
  3785   001856  6E02               	movwf	LCD_sendbyte@type^0,c
  3786   001858  0E08               	movlw	8
  3787   00185A  EC9B  F00F         	call	_LCD_sendbyte
  3788   00185E                     
  3789                           ;LCD.c: 103:     _delay((unsigned long)((100)*(64000000/4000.0)));
  3790   00185E  0E09               	movlw	9
  3791   001860  6E05               	movwf	(??_LCD_Init+1)^0,c
  3792   001862  0E1E               	movlw	30
  3793   001864  6E04               	movwf	??_LCD_Init^0,c
  3794   001866  0EE4               	movlw	228
  3795   001868                     u2577:
  3796   001868  2EE8               	decfsz	wreg,f,c
  3797   00186A  D7FE               	bra	u2577
  3798   00186C  2E04               	decfsz	??_LCD_Init^0,f,c
  3799   00186E  D7FC               	bra	u2577
  3800   001870  2E05               	decfsz	(??_LCD_Init+1)^0,f,c
  3801   001872  D7FA               	bra	u2577
  3802   001874  D000               	nop2	
  3803   001876                     
  3804                           ;LCD.c: 104:     LCD_sendbyte(0b00000001,0);
  3805   001876  0E00               	movlw	0
  3806   001878  6E02               	movwf	LCD_sendbyte@type^0,c
  3807   00187A  0E01               	movlw	1
  3808   00187C  EC9B  F00F         	call	_LCD_sendbyte
  3809   001880                     
  3810                           ;LCD.c: 105:     _delay((unsigned long)((5)*(64000000/4000.0)));
  3811   001880  0E68               	movlw	104
  3812   001882  6E04               	movwf	??_LCD_Init^0,c
  3813   001884  0EE4               	movlw	228
  3814   001886                     u2587:
  3815   001886  2EE8               	decfsz	wreg,f,c
  3816   001888  D7FE               	bra	u2587
  3817   00188A  2E04               	decfsz	??_LCD_Init^0,f,c
  3818   00188C  D7FC               	bra	u2587
  3819   00188E  D000               	nop2	
  3820   001890                     
  3821                           ;LCD.c: 106:     LCD_sendbyte(0b00000110,0);
  3822   001890  0E00               	movlw	0
  3823   001892  6E02               	movwf	LCD_sendbyte@type^0,c
  3824   001894  0E06               	movlw	6
  3825   001896  EC9B  F00F         	call	_LCD_sendbyte
  3826   00189A                     
  3827                           ;LCD.c: 107:     _delay((unsigned long)((100)*(64000000/4000.0)));
  3828   00189A  0E09               	movlw	9
  3829   00189C  6E05               	movwf	(??_LCD_Init+1)^0,c
  3830   00189E  0E1E               	movlw	30
  3831   0018A0  6E04               	movwf	??_LCD_Init^0,c
  3832   0018A2  0EE4               	movlw	228
  3833   0018A4                     u2597:
  3834   0018A4  2EE8               	decfsz	wreg,f,c
  3835   0018A6  D7FE               	bra	u2597
  3836   0018A8  2E04               	decfsz	??_LCD_Init^0,f,c
  3837   0018AA  D7FC               	bra	u2597
  3838   0018AC  2E05               	decfsz	(??_LCD_Init+1)^0,f,c
  3839   0018AE  D7FA               	bra	u2597
  3840   0018B0  D000               	nop2	
  3841   0018B2                     
  3842                           ;LCD.c: 108:     LCD_sendbyte(0b00001100,0);
  3843   0018B2  0E00               	movlw	0
  3844   0018B4  6E02               	movwf	LCD_sendbyte@type^0,c
  3845   0018B6  0E0C               	movlw	12
  3846   0018B8  EC9B  F00F         	call	_LCD_sendbyte
  3847   0018BC                     
  3848                           ;LCD.c: 109:     _delay((unsigned long)((100)*(64000000/4000.0)));
  3849   0018BC  0E09               	movlw	9
  3850   0018BE  6E05               	movwf	(??_LCD_Init+1)^0,c
  3851   0018C0  0E1E               	movlw	30
  3852   0018C2  6E04               	movwf	??_LCD_Init^0,c
  3853   0018C4  0EE4               	movlw	228
  3854   0018C6                     u2607:
  3855   0018C6  2EE8               	decfsz	wreg,f,c
  3856   0018C8  D7FE               	bra	u2607
  3857   0018CA  2E04               	decfsz	??_LCD_Init^0,f,c
  3858   0018CC  D7FC               	bra	u2607
  3859   0018CE  2E05               	decfsz	(??_LCD_Init+1)^0,f,c
  3860   0018D0  D7FA               	bra	u2607
  3861   0018D2  D000               	nop2	
  3862   0018D4  0012               	return		;funcret
  3863   0018D6                     __end_of_LCD_Init:
  3864                           	callstack 0
  3865                           
  3866 ;; *************** function _LCD_sendbyte *****************
  3867 ;; Defined at:
  3868 ;;		line 40 in file "LCD.c"
  3869 ;; Parameters:    Size  Location     Type
  3870 ;;  Byte            1    wreg     unsigned char 
  3871 ;;  type            1    1[COMRAM] unsigned char 
  3872 ;; Auto vars:     Size  Location     Type
  3873 ;;  Byte            1    2[COMRAM] unsigned char 
  3874 ;; Return value:  Size  Location     Type
  3875 ;;                  1    wreg      void 
  3876 ;; Registers used:
  3877 ;;		wreg, status,2, status,0, cstack
  3878 ;; Tracked objects:
  3879 ;;		On entry : 0/0
  3880 ;;		On exit  : 0/0
  3881 ;;		Unchanged: 0/0
  3882 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3883 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3884 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3885 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3886 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3887 ;;Total ram usage:        2 bytes
  3888 ;; Hardware stack levels used: 1
  3889 ;; Hardware stack levels required when called: 3
  3890 ;; This function calls:
  3891 ;;		_LCD_sendnibble
  3892 ;; This function is called by:
  3893 ;;		_LCD_Init
  3894 ;;		_LCD_setline
  3895 ;;		_LCD_sendstring
  3896 ;;		_LCD_scroll
  3897 ;; This function uses a non-reentrant model
  3898 ;;
  3899                           
  3900                           	psect	text21
  3901   001F36                     __ptext21:
  3902                           	callstack 0
  3903   001F36                     _LCD_sendbyte:
  3904                           	callstack 26
  3905                           
  3906                           ;incstack = 0
  3907                           ;LCD_sendbyte@Byte stored from wreg
  3908   001F36  6E03               	movwf	LCD_sendbyte@Byte^0,c
  3909   001F38                     
  3910                           ;LCD.c: 40: void LCD_sendbyte(unsigned char Byte, char type);LCD.c: 41: {;LCD.c: 42:    
      +                           LATCbits.LATC6 = type;
  3911   001F38  B002               	btfsc	LCD_sendbyte@type^0,0,c
  3912   001F3A  D002               	bra	u1745
  3913   001F3C  9C7B               	bcf	123,6,c	;volatile
  3914   001F3E  D001               	bra	u1746
  3915   001F40                     u1745:
  3916   001F40  8C7B               	bsf	123,6,c	;volatile
  3917   001F42                     u1746:
  3918   001F42                     
  3919                           ;LCD.c: 44:     LCD_sendnibble(Byte>>4);
  3920   001F42  3803               	swapf	LCD_sendbyte@Byte^0,w,c
  3921   001F44  0B0F               	andlw	15
  3922   001F46  EC7A  F00E         	call	_LCD_sendnibble
  3923   001F4A                     
  3924                           ;LCD.c: 45:     LCD_sendnibble(Byte);
  3925   001F4A  5003               	movf	LCD_sendbyte@Byte^0,w,c
  3926   001F4C  EC7A  F00E         	call	_LCD_sendnibble
  3927   001F50                     
  3928                           ;LCD.c: 51:     _delay((unsigned long)((50)*(64000000/4000000.0)));
  3929   001F50  0EA0               	movlw	160
  3930   001F52                     u2617:
  3931   001F52  D000               	nop2	
  3932   001F54  2EE8               	decfsz	wreg,f,c
  3933   001F56  D7FD               	bra	u2617
  3934   001F58  0012               	return		;funcret
  3935   001F5A                     __end_of_LCD_sendbyte:
  3936                           	callstack 0
  3937                           
  3938 ;; *************** function _LCD_sendnibble *****************
  3939 ;; Defined at:
  3940 ;;		line 22 in file "LCD.c"
  3941 ;; Parameters:    Size  Location     Type
  3942 ;;  number          1    wreg     unsigned char 
  3943 ;; Auto vars:     Size  Location     Type
  3944 ;;  number          1    0[COMRAM] unsigned char 
  3945 ;; Return value:  Size  Location     Type
  3946 ;;                  1    wreg      void 
  3947 ;; Registers used:
  3948 ;;		wreg, cstack
  3949 ;; Tracked objects:
  3950 ;;		On entry : 0/0
  3951 ;;		On exit  : 0/0
  3952 ;;		Unchanged: 0/0
  3953 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3954 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3955 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3956 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3957 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3958 ;;Total ram usage:        1 bytes
  3959 ;; Hardware stack levels used: 1
  3960 ;; Hardware stack levels required when called: 2
  3961 ;; This function calls:
  3962 ;;		_LCD_E_TOG
  3963 ;; This function is called by:
  3964 ;;		_LCD_sendbyte
  3965 ;;		_LCD_Init
  3966 ;; This function uses a non-reentrant model
  3967 ;;
  3968                           
  3969                           	psect	text22
  3970   001CF4                     __ptext22:
  3971                           	callstack 0
  3972   001CF4                     _LCD_sendnibble:
  3973                           	callstack 26
  3974                           
  3975                           ;incstack = 0
  3976                           ;LCD_sendnibble@number stored from wreg
  3977   001CF4  6E01               	movwf	LCD_sendnibble@number^0,c
  3978   001CF6                     
  3979                           ;LCD.c: 22: void LCD_sendnibble(unsigned char number);LCD.c: 23: {;LCD.c: 24:     if (nu
      +                          mber & 0b0001) {LATBbits.LATB3=1;} else {LATBbits.LATB3=0;}
  3980   001CF6  A001               	btfss	LCD_sendnibble@number^0,0,c
  3981   001CF8  EF80  F00E         	goto	u1651
  3982   001CFC  EF82  F00E         	goto	u1650
  3983   001D00                     u1651:
  3984   001D00  EF85  F00E         	goto	l275
  3985   001D04                     u1650:
  3986   001D04  867A               	bsf	122,3,c	;volatile
  3987   001D06  EF86  F00E         	goto	l2077
  3988   001D0A                     l275:
  3989   001D0A  967A               	bcf	122,3,c	;volatile
  3990   001D0C                     l2077:
  3991                           
  3992                           ;LCD.c: 25:     if (number & 0b0010) {LATBbits.LATB2=1;} else {LATBbits.LATB2=0;}
  3993   001D0C  A201               	btfss	LCD_sendnibble@number^0,1,c
  3994   001D0E  EF8B  F00E         	goto	u1661
  3995   001D12  EF8D  F00E         	goto	u1660
  3996   001D16                     u1661:
  3997   001D16  EF90  F00E         	goto	l277
  3998   001D1A                     u1660:
  3999   001D1A  847A               	bsf	122,2,c	;volatile
  4000   001D1C  EF91  F00E         	goto	l2081
  4001   001D20                     l277:
  4002   001D20  947A               	bcf	122,2,c	;volatile
  4003   001D22                     l2081:
  4004                           
  4005                           ;LCD.c: 26:     if (number & 0b0100) {LATEbits.LATE3=1;} else {LATEbits.LATE3=0;}
  4006   001D22  A401               	btfss	LCD_sendnibble@number^0,2,c
  4007   001D24  EF96  F00E         	goto	u1671
  4008   001D28  EF98  F00E         	goto	u1670
  4009   001D2C                     u1671:
  4010   001D2C  EF9B  F00E         	goto	l279
  4011   001D30                     u1670:
  4012   001D30  867D               	bsf	125,3,c	;volatile
  4013   001D32  EF9C  F00E         	goto	l2085
  4014   001D36                     l279:
  4015   001D36  967D               	bcf	125,3,c	;volatile
  4016   001D38                     l2085:
  4017                           
  4018                           ;LCD.c: 27:     if (number & 0b1000) {LATEbits.LATE1=1;} else {LATEbits.LATE1=0;}
  4019   001D38  A601               	btfss	LCD_sendnibble@number^0,3,c
  4020   001D3A  EFA1  F00E         	goto	u1681
  4021   001D3E  EFA3  F00E         	goto	u1680
  4022   001D42                     u1681:
  4023   001D42  EFA6  F00E         	goto	l281
  4024   001D46                     u1680:
  4025   001D46  827D               	bsf	125,1,c	;volatile
  4026   001D48  EFA7  F00E         	goto	l2089
  4027   001D4C                     l281:
  4028   001D4C  927D               	bcf	125,1,c	;volatile
  4029   001D4E                     l2089:
  4030                           
  4031                           ;LCD.c: 31:     LCD_E_TOG();
  4032   001D4E  ECD6  F00F         	call	_LCD_E_TOG	;wreg free
  4033   001D52                     
  4034                           ;LCD.c: 32:     _delay((unsigned long)((5)*(64000000/4000000.0)));
  4035   001D52  0E1A               	movlw	26
  4036   001D54                     u2627:
  4037   001D54  2EE8               	decfsz	wreg,f,c
  4038   001D56  D7FE               	bra	u2627
  4039   001D58  D000               	nop2	
  4040   001D5A  0012               	return		;funcret
  4041   001D5C                     __end_of_LCD_sendnibble:
  4042                           	callstack 0
  4043                           
  4044 ;; *************** function _LCD_E_TOG *****************
  4045 ;; Defined at:
  4046 ;;		line 10 in file "LCD.c"
  4047 ;; Parameters:    Size  Location     Type
  4048 ;;		None
  4049 ;; Auto vars:     Size  Location     Type
  4050 ;;		None
  4051 ;; Return value:  Size  Location     Type
  4052 ;;                  1    wreg      void 
  4053 ;; Registers used:
  4054 ;;		wreg
  4055 ;; Tracked objects:
  4056 ;;		On entry : 0/0
  4057 ;;		On exit  : 0/0
  4058 ;;		Unchanged: 0/0
  4059 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4060 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4061 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4062 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4063 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4064 ;;Total ram usage:        0 bytes
  4065 ;; Hardware stack levels used: 1
  4066 ;; Hardware stack levels required when called: 1
  4067 ;; This function calls:
  4068 ;;		Nothing
  4069 ;; This function is called by:
  4070 ;;		_LCD_sendnibble
  4071 ;; This function uses a non-reentrant model
  4072 ;;
  4073                           
  4074                           	psect	text23
  4075   001FAC                     __ptext23:
  4076                           	callstack 0
  4077   001FAC                     _LCD_E_TOG:
  4078                           	callstack 26
  4079   001FAC                     
  4080                           ;LCD.c: 13:      LATCbits.LATC2 = 1;
  4081   001FAC  847B               	bsf	123,2,c	;volatile
  4082   001FAE                     
  4083                           ;LCD.c: 14:  _delay((unsigned long)((2)*(64000000/4000000.0)));
  4084   001FAE  0E0A               	movlw	10
  4085   001FB0                     u2637:
  4086   001FB0  2EE8               	decfsz	wreg,f,c
  4087   001FB2  D7FE               	bra	u2637
  4088   001FB4  D000               	nop2	
  4089   001FB6                     
  4090                           ;LCD.c: 15:      LATCbits.LATC2 = 0;
  4091   001FB6  947B               	bcf	123,2,c	;volatile
  4092   001FB8  0012               	return		;funcret
  4093   001FBA                     __end_of_LCD_E_TOG:
  4094                           	callstack 0
  4095                           
  4096 ;; *************** function _Interrupts_init *****************
  4097 ;; Defined at:
  4098 ;;		line 9 in file "interrupts.c"
  4099 ;; Parameters:    Size  Location     Type
  4100 ;;		None
  4101 ;; Auto vars:     Size  Location     Type
  4102 ;;		None
  4103 ;; Return value:  Size  Location     Type
  4104 ;;                  1    wreg      void 
  4105 ;; Registers used:
  4106 ;;		None
  4107 ;; Tracked objects:
  4108 ;;		On entry : 0/0
  4109 ;;		On exit  : 0/0
  4110 ;;		Unchanged: 0/0
  4111 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4112 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4113 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4114 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4115 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4116 ;;Total ram usage:        0 bytes
  4117 ;; Hardware stack levels used: 1
  4118 ;; Hardware stack levels required when called: 1
  4119 ;; This function calls:
  4120 ;;		Nothing
  4121 ;; This function is called by:
  4122 ;;		_main
  4123 ;; This function uses a non-reentrant model
  4124 ;;
  4125                           
  4126                           	psect	text24
  4127   001FBA                     __ptext24:
  4128                           	callstack 0
  4129   001FBA                     _Interrupts_init:
  4130                           	callstack 29
  4131   001FBA                     
  4132                           ;interrupts.c: 15:   INTCONbits.PEIE = 1;
  4133   001FBA  8CF2               	bsf	242,6,c	;volatile
  4134                           
  4135                           ;interrupts.c: 19:     PIE0bits.TMR0IE = 1;
  4136   001FBC  010E               	movlb	14	; () banked
  4137   001FBE  8B29               	bsf	41,5,b	;volatile
  4138                           
  4139                           ;interrupts.c: 20:     PIR0bits.TMR0IF = 0;
  4140   001FC0  9B33               	bcf	51,5,b	;volatile
  4141                           
  4142                           ;interrupts.c: 21:     IPR0bits.TMR0IP = 1;
  4143   001FC2  8B1F               	bsf	31,5,b	;volatile
  4144                           
  4145                           ;interrupts.c: 24:     INTCONbits.GIE=1;
  4146   001FC4  8EF2               	bsf	242,7,c	;volatile
  4147   001FC6                     
  4148                           ; BSR set to: 14
  4149   001FC6  0012               	return		;funcret
  4150   001FC8                     __end_of_Interrupts_init:
  4151                           	callstack 0
  4152                           
  4153 ;; *************** function _ADC_init *****************
  4154 ;; Defined at:
  4155 ;;		line 9 in file "ADC.c"
  4156 ;; Parameters:    Size  Location     Type
  4157 ;;		None
  4158 ;; Auto vars:     Size  Location     Type
  4159 ;;		None
  4160 ;; Return value:  Size  Location     Type
  4161 ;;                  1    wreg      void 
  4162 ;; Registers used:
  4163 ;;		wreg, status,2
  4164 ;; Tracked objects:
  4165 ;;		On entry : 0/0
  4166 ;;		On exit  : 0/0
  4167 ;;		Unchanged: 0/0
  4168 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4169 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4170 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4171 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4172 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4173 ;;Total ram usage:        0 bytes
  4174 ;; Hardware stack levels used: 1
  4175 ;; Hardware stack levels required when called: 1
  4176 ;; This function calls:
  4177 ;;		Nothing
  4178 ;; This function is called by:
  4179 ;;		_main
  4180 ;; This function uses a non-reentrant model
  4181 ;;
  4182                           
  4183                           	psect	text25
  4184   001F7A                     __ptext25:
  4185                           	callstack 0
  4186   001F7A                     _ADC_init:
  4187                           	callstack 29
  4188   001F7A                     
  4189                           ;ADC.c: 11:     TRISAbits.TRISA3=1;
  4190   001F7A  8681               	bsf	129,3,c	;volatile
  4191                           
  4192                           ;ADC.c: 12:     ANSELAbits.ANSELA3=1;
  4193   001F7C  010E               	movlb	14	; () banked
  4194   001F7E  8792               	bsf	146,3,b	;volatile
  4195                           
  4196                           ;ADC.c: 14:     ADREFbits.ADNREF = 0;
  4197   001F80  010F               	movlb	15	; () banked
  4198   001F82  9958               	bcf	88,4,b	;volatile
  4199   001F84                     
  4200                           ; BSR set to: 15
  4201                           ;ADC.c: 15:     ADREFbits.ADPREF = 0b00;
  4202   001F84  0EFC               	movlw	-4
  4203   001F86  1758               	andwf	88,f,b	;volatile
  4204                           
  4205                           ;ADC.c: 16:     ADPCH=0b11;
  4206   001F88  0E03               	movlw	3
  4207   001F8A  6F5F               	movwf	95,b	;volatile
  4208   001F8C                     
  4209                           ; BSR set to: 15
  4210                           ;ADC.c: 17:     ADCON0bits.ADFM = 0;
  4211   001F8C  9460               	bcf	96,2,c	;volatile
  4212   001F8E                     
  4213                           ; BSR set to: 15
  4214                           ;ADC.c: 18:     ADCON0bits.ADCS = 1;
  4215   001F8E  8860               	bsf	96,4,c	;volatile
  4216   001F90                     
  4217                           ; BSR set to: 15
  4218                           ;ADC.c: 19:     ADCON0bits.ADON = 1;
  4219   001F90  8E60               	bsf	96,7,c	;volatile
  4220   001F92                     
  4221                           ; BSR set to: 15
  4222   001F92  0012               	return		;funcret
  4223   001F94                     __end_of_ADC_init:
  4224                           	callstack 0
  4225                           
  4226 ;; *************** function _HighISR *****************
  4227 ;; Defined at:
  4228 ;;		line 31 in file "interrupts.c"
  4229 ;; Parameters:    Size  Location     Type
  4230 ;;		None
  4231 ;; Auto vars:     Size  Location     Type
  4232 ;;		None
  4233 ;; Return value:  Size  Location     Type
  4234 ;;                  1    wreg      void 
  4235 ;; Registers used:
  4236 ;;		wreg, status,2, status,0
  4237 ;; Tracked objects:
  4238 ;;		On entry : 0/0
  4239 ;;		On exit  : 0/0
  4240 ;;		Unchanged: 0/0
  4241 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4242 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4243 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4244 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4245 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4246 ;;Total ram usage:        0 bytes
  4247 ;; Hardware stack levels used: 1
  4248 ;; This function calls:
  4249 ;;		Nothing
  4250 ;; This function is called by:
  4251 ;;		Interrupt level 2
  4252 ;; This function uses a non-reentrant model
  4253 ;;
  4254                           
  4255                           	psect	intcode
  4256   000008                     __pintcode:
  4257                           	callstack 0
  4258   000008                     _HighISR:
  4259                           	callstack 22
  4260                           
  4261                           ; BSR set to: 15
  4262                           ;incstack = 0
  4263   000008  824B               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  4264   00000A                     
  4265                           ;interrupts.c: 35:     if(PIR0bits.TMR0IF){
  4266   00000A  010E               	movlb	14	; () banked
  4267   00000C  AB33               	btfss	51,5,b	;volatile
  4268   00000E  EF0B  F000         	goto	i2u215_41
  4269   000012  EF0D  F000         	goto	i2u215_40
  4270   000016                     i2u215_41:
  4271   000016  EF16  F000         	goto	i2l79
  4272   00001A                     i2u215_40:
  4273   00001A                     
  4274                           ; BSR set to: 14
  4275                           ;interrupts.c: 37:         TMR0H = 0b00001011;
  4276   00001A  0E0B               	movlw	11
  4277   00001C  6ED4               	movwf	212,c	;volatile
  4278                           
  4279                           ;interrupts.c: 38:         TMR0L = 0b11011100;
  4280   00001E  0EDC               	movlw	220
  4281   000020  6ED3               	movwf	211,c	;volatile
  4282   000022                     
  4283                           ; BSR set to: 14
  4284                           ;interrupts.c: 39:         GLOBALsecs++;
  4285   000022  0100               	movlb	0	; () banked
  4286   000024  4BA6               	infsnz	_GLOBALsecs& (0+255),f,b
  4287   000026  2BA7               	incf	(_GLOBALsecs+1)& (0+255),f,b
  4288   000028                     
  4289                           ; BSR set to: 0
  4290                           ;interrupts.c: 40:         PIR0bits.TMR0IF=0;
  4291   000028  010E               	movlb	14	; () banked
  4292   00002A  9B33               	bcf	51,5,b	;volatile
  4293   00002C                     i2l79:
  4294                           
  4295                           ; BSR set to: 14
  4296   00002C  924B               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  4297   00002E  0011               	retfie		f
  4298   000030                     __end_of_HighISR:
  4299                           	callstack 0
  4300                           
  4301                           	psect	rparam
  4302   000000                     
  4303                           	psect	temp
  4304   00004B                     btemp:
  4305                           	callstack 0
  4306   00004B                     	ds	1
  4307   000000                     int$flags	set	btemp
  4308   000000                     wtemp8	set	btemp+1
  4309   000000                     ttemp5	set	btemp+1
  4310   000000                     ttemp6	set	btemp+4
  4311   000000                     ttemp7	set	btemp+8
  4312                           
  4313                           	psect	config
  4314                           
  4315                           ;Config register CONFIG1L @ 0x300000
  4316                           ;	External Oscillator mode Selection bits
  4317                           ;	FEXTOSC = HS, HS (crystal oscillator) above 8 MHz; PFM set to high power
  4318                           ;	Power-up default value for COSC bits
  4319                           ;	RSTOSC = EXTOSC_4PLL, EXTOSC with 4x PLL, with EXTOSC operating per FEXTOSC bits
  4320   300000                     	org	3145728
  4321   300000  AA                 	db	170
  4322                           
  4323                           ;Config register CONFIG1H @ 0x300001
  4324                           ;	unspecified, using default values
  4325                           ;	Clock Out Enable bit
  4326                           ;	CLKOUTEN = 0x1, unprogrammed default
  4327                           ;	Clock Switch Enable bit
  4328                           ;	CSWEN = 0x1, unprogrammed default
  4329                           ;	Fail-Safe Clock Monitor Enable bit
  4330                           ;	FCMEN = 0x1, unprogrammed default
  4331   300001                     	org	3145729
  4332   300001  FF                 	db	255
  4333                           
  4334                           ;Config register CONFIG3L @ 0x300004
  4335                           ;	WDT Period Select bits
  4336                           ;	WDTCPS = 0x1F, unprogrammed default
  4337                           ;	WDT operating mode
  4338                           ;	WDTE = OFF, WDT Disabled
  4339   300004                     	org	3145732
  4340   300004  9F                 	db	159
  4341                           
  4342                           ;Config register CONFIG3H @ 0x300005
  4343                           ;	unspecified, using default values
  4344                           ;	WDT Window Select bits
  4345                           ;	WDTCWS = 0x7, unprogrammed default
  4346                           ;	WDT input clock selector
  4347                           ;	WDTCCS = 0x7, unprogrammed default
  4348   300005                     	org	3145733
  4349   300005  FF                 	db	255
  4350                           tosu	equ	0xFFF
  4351                           tosh	equ	0xFFE
  4352                           tosl	equ	0xFFD
  4353                           stkptr	equ	0xFFC
  4354                           pclatu	equ	0xFFB
  4355                           pclath	equ	0xFFA
  4356                           pcl	equ	0xFF9
  4357                           tblptru	equ	0xFF8
  4358                           tblptrh	equ	0xFF7
  4359                           tblptrl	equ	0xFF6
  4360                           tablat	equ	0xFF5
  4361                           prodh	equ	0xFF4
  4362                           prodl	equ	0xFF3
  4363                           indf0	equ	0xFEF
  4364                           postinc0	equ	0xFEE
  4365                           postdec0	equ	0xFED
  4366                           preinc0	equ	0xFEC
  4367                           plusw0	equ	0xFEB
  4368                           fsr0h	equ	0xFEA
  4369                           fsr0l	equ	0xFE9
  4370                           wreg	equ	0xFE8
  4371                           indf1	equ	0xFE7
  4372                           postinc1	equ	0xFE6
  4373                           postdec1	equ	0xFE5
  4374                           preinc1	equ	0xFE4
  4375                           plusw1	equ	0xFE3
  4376                           fsr1h	equ	0xFE2
  4377                           fsr1l	equ	0xFE1
  4378                           bsr	equ	0xFE0
  4379                           indf2	equ	0xFDF
  4380                           postinc2	equ	0xFDE
  4381                           postdec2	equ	0xFDD
  4382                           preinc2	equ	0xFDC
  4383                           plusw2	equ	0xFDB
  4384                           fsr2h	equ	0xFDA
  4385                           fsr2l	equ	0xFD9
  4386                           status	equ	0xFD8

Data Sizes:
    Strings     67
    Constant    0
    Data        24
    BSS         39
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     69      74
    BANK0           160     38      96
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          234      0       0

Pointer List with Targets:

    dtoa@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    f$.$buffer	PTR unsigned char  size(2) Largest target is 0

    f$.$source	PTR const unsigned char  size(2) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    fputc@fp$.$buffer	PTR unsigned char  size(2) Largest target is 0

    fputc@fp$.$source	PTR const unsigned char  size(2) Largest target is 0

    fputs@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    fputs@s	PTR const unsigned char  size(1) Largest target is 32
		 -> dbuf(BANK0[32]), 

    LCD_sendstring@string	PTR unsigned char  size(1) Largest target is 20
		 -> main@buf(BANK0[20]), 

    pad@buf	PTR unsigned char  size(1) Largest target is 32
		 -> dbuf(BANK0[32]), 

    pad@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    read_prec_or_width@ap	PTR PTR void [1] size(1) Largest target is 1
		 -> sprintf@ap(COMRAM[1]), 

    read_prec_or_width@fmt	PTR PTR const unsigned char  size(1) Largest target is 1
		 -> vfprintf@cfmt(COMRAM[1]), 

    S1789$buffer	PTR unsigned char  size(2) Largest target is 0

    S1789$source	PTR const unsigned char  size(2) Largest target is 0

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    sprintf@fmt	PTR const unsigned char  size(1) Largest target is 26
		 -> STR_1(CODE[26]), STR_2(CODE[20]), STR_3(CODE[21]), 

    sprintf@s	PTR unsigned char  size(1) Largest target is 20
		 -> main@buf(BANK0[20]), 

    UpdateClock@days	PTR int  size(1) Largest target is 16
		 -> main@clock(BANK0[16]), 

    UpdateClock@DoW	PTR int  size(1) Largest target is 16
		 -> main@clock(BANK0[16]), 

    UpdateClock@DSTstate	PTR int  size(1) Largest target is 16
		 -> main@clock(BANK0[16]), 

    UpdateClock@hours	PTR int  size(1) Largest target is 16
		 -> main@clock(BANK0[16]), 

    UpdateClock@minutes	PTR int  size(1) Largest target is 16
		 -> main@clock(BANK0[16]), 

    UpdateClock@months	PTR int  size(1) Largest target is 16
		 -> main@clock(BANK0[16]), 

    UpdateClock@seconds	PTR int  size(1) Largest target is 2
		 -> GLOBALsecs(BANK0[2]), 

    UpdateClock@years	PTR int  size(1) Largest target is 16
		 -> main@clock(BANK0[16]), 

    vfpfcnvrt@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(COMRAM[1]), 

    vfpfcnvrt@cp	PTR unsigned char  size(1) Largest target is 26
		 -> STR_1(CODE[26]), STR_2(CODE[20]), STR_3(CODE[21]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(1) Largest target is 1
		 -> vfprintf@cfmt(COMRAM[1]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    vfprintf@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(COMRAM[1]), 

    vfprintf@cfmt	PTR unsigned char  size(1) Largest target is 26
		 -> STR_1(CODE[26]), STR_2(CODE[20]), STR_3(CODE[21]), 

    vfprintf@fmt	PTR const unsigned char  size(1) Largest target is 26
		 -> STR_1(CODE[26]), STR_2(CODE[20]), STR_3(CODE[21]), 

    vfprintf@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 


Critical Paths under _main in COMRAM

    _main->_sprintf
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_dtoa
    _read_prec_or_width->___wmul
    _dtoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _abs->___awmod
    _UpdateClock->___awmod
    _LCD_setline->_LCD_sendbyte
    _LCD_sendstring->_LCD_sendbyte
    _LCD_Init->_LCD_sendbyte
    _LCD_sendbyte->_LCD_sendnibble

Critical Paths under _HighISR in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _HighISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _HighISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _HighISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _HighISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _HighISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _HighISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _HighISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _HighISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _HighISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _HighISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _HighISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _HighISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _HighISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _HighISR in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                38    38      0   16970
                                              0 BANK0     38    38      0
                           _ADC_init
                    _Interrupts_init
                           _LCD_Init
                     _LCD_sendstring
                        _LCD_setline
                  _LEDarray_disp_bin
                      _LEDarray_init
                        _Timer0_init
                        _UpdateClock
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             25    15     10   10262
                                             46 COMRAM    23    13     10
                           _vfprintf
 ---------------------------------------------------------------------------------
 (2) _vfprintf                                             4     1      3    9605
                                             42 COMRAM     4     1      3
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (3) _vfpfcnvrt                                           12     9      3    9246
                                             31 COMRAM    11     8      3
                               _dtoa
                              _fputc
                 _read_prec_or_width
 ---------------------------------------------------------------------------------
 (4) _read_prec_or_width                                   5     3      2    3835
                                              6 COMRAM     5     3      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4    3503
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) _dtoa                                                11     8      3    4079
                                             20 COMRAM    11     8      3
                            ___awdiv
                            ___awmod
                                _abs
                                _pad
 ---------------------------------------------------------------------------------
 (5) _pad                                                  7     3      4    2172
                                             13 COMRAM     7     3      4
                              _fputc
                              _fputs
 ---------------------------------------------------------------------------------
 (6) _fputs                                                5     3      2    1083
                                              8 COMRAM     5     3      2
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _fputc                                                8     5      3     682
                                              0 COMRAM     8     5      3
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (5) _abs                                                  4     2      2     142
                                              6 COMRAM     4     2      2
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (5) ___awdiv                                              8     4      4     452
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (1) _UpdateClock                                         40    30     10    2762
                                              6 COMRAM    40    30     10
                            ___awmod
 ---------------------------------------------------------------------------------
 (5) ___awmod                                              6     2      4     752
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _Timer0_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LEDarray_init                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LEDarray_disp_bin                                    2     0      2     274
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _LCD_setline                                          1     1      0     882
                                              3 COMRAM     1     1      0
                       _LCD_sendbyte
 ---------------------------------------------------------------------------------
 (1) _LCD_sendstring                                       1     0      1    1111
                                              3 COMRAM     1     0      1
                       _LCD_sendbyte
 ---------------------------------------------------------------------------------
 (1) _LCD_Init                                             2     2      0     926
                                              3 COMRAM     2     2      0
                       _LCD_sendbyte
                     _LCD_sendnibble
 ---------------------------------------------------------------------------------
 (2) _LCD_sendbyte                                         2     1      1     838
                                              1 COMRAM     2     1      1
                     _LCD_sendnibble
 ---------------------------------------------------------------------------------
 (3) _LCD_sendnibble                                       1     1      0      88
                                              0 COMRAM     1     1      0
                          _LCD_E_TOG
 ---------------------------------------------------------------------------------
 (4) _LCD_E_TOG                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Interrupts_init                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ADC_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _HighISR                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_init
   _Interrupts_init
   _LCD_Init
     _LCD_sendbyte
       _LCD_sendnibble
         _LCD_E_TOG
     _LCD_sendnibble
   _LCD_sendstring
     _LCD_sendbyte
   _LCD_setline
     _LCD_sendbyte
   _LEDarray_disp_bin
   _LEDarray_init
   _Timer0_init
   _UpdateClock
     ___awmod
   _sprintf
     _vfprintf
       _vfpfcnvrt
         _dtoa
           ___awdiv
           ___awmod
           _abs
             ___awmod (ARG)
           _pad
             _fputc
               _putch
             _fputs
               _fputc
         _fputc
         _read_prec_or_width
           ___wmul

 _HighISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             DE9      0       0      46        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK13           EA      0       0      30        0.0%
BANK13              EA      0       0      31        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     26      60       5       60.0%
BITBIGSFRllhhhh     84      0       0      38        0.0%
BITBIGSFRllhhll     5E      0       0      41        0.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     45      4A       1       78.7%
BITBIGSFRhhl        4A      0       0      34        0.0%
BITBIGSFRllhhlh     33      0       0      40        0.0%
BITBIGSFRllll       30      0       0      44        0.0%
BITBIGSFRhhhl       1B      0       0      33        0.0%
BITBIGSFRllhhhh     14      0       0      35        0.0%
BITBIGSFRhhhh        D      0       0      32        0.0%
BITBIGSFRlllh        9      0       0      43        0.0%
BITBIGSFRllhl        9      0       0      42        0.0%
BITBIGSFRllhhhl      8      0       0      39        0.0%
BITBIGSFRllhhhh      6      0       0      37        0.0%
BITBIGSFRllhhhh      3      0       0      36        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      AA      45        0.0%
DATA                 0      0      AA       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.45 build 20230818022343 
Symbol Table                                                                                   Fri Feb 09 00:29:09 2024

                        l53 1F78                          l73 1FC6                ___awdiv@sign 0006  
       ___wmul@multiplicand 0003           ??_Interrupts_init 0001                         l121 18EA  
                       l130 1944                         l122 18EC                         l131 1958  
                       l123 1900                         l300 1EE8                         l132 195A  
                       l124 1902                         l133 196E                         l125 1916  
                       l134 1970                         l126 1918                         l118 1F34  
                       l135 1984                         l127 192C                         l136 1986  
                       l128 192E                         l137 199A                         l129 1942  
                       l226 1F92                         l139 199C                         l253 1384  
                       l309 1F0E                         l272 1FB8                         l281 1D4C  
                       l283 1D5A                         l275 1D0A                         l540 1A60  
                       l277 1D20                         l286 1F58                         l294 1E52  
                       l279 1D36                         l289 18D4                         l553 1B10  
                       l987 1E86                         _abs 1E88                         _pad 1C6A  
              ___awmod@sign 0006                         wreg 0FE8                        l1010 1CD8  
                      l1012 1CF2                        l1007 1C9A                        l1015 1566  
                      l1032 1BB6                        l2001 1E96                        l2003 1FAC  
                      l2011 150C                        l1051 1506                        ?_abs 0007  
                      l1028 166E                        l1036 1BBE                        l2005 1FAE  
                      l1061 1EA2                        l2021 154E                        l2013 1520  
                      l2101 13C4                        l2007 1FB6                        l2031 157E  
                      l2023 155A                        l2015 1528                        l2111 13E2  
                      l2103 13CC                        l1064 1EBA                        l2201 185E  
                      l2041 15EC                        l2033 15AC                        l2025 1562  
                      l2017 1538                        l2009 1508                        l2121 1454  
                      l2105 13CE                        l2113 1418                        l1057 1D9C  
                      l2211 18B2                        l2203 1876                        l2051 1646  
                      l2043 15FE                        l2035 15B0                        l2027 156E  
                      l2019 153E                        l2131 14C0                        l2123 145E  
                      l2115 1428                        l2107 13DA                        l1076 1C68  
                      l1084 1E18                        l2221 1F8E                        l2213 18BC  
                      l2205 1880                        l2301 1242                        l2053 164C  
                      l2045 160E                        l2037 15B6                        l2029 1578  
                      l2061 1B1A                        l2125 147E                        l2117 143C  
                      l2223 1F90                        l2215 1F7A                        l2151 1F42  
                      l2207 1890                        l2311 12FA                        l2303 126E  
                      l2231 0E7E                        l1087 1FC8                        l2055 1658  
                      l2047 1628                        l2039 15D2                        l2063 1B40  
                      l2071 1B8C                        l2135 14D4                        l2127 149E  
                      l2119 144A                        l2217 1F84                        l2081 1D22  
                      l2073 1CF6                        l2153 1F4A                        l2209 189A  
                      l2321 18D6                        l2313 1308                        l2305 1288  
                      l2241 0F02                        l2233 0EA4                        l2225 0E46  
                      l2049 1636                        l2065 1B48                        l2129 14B6  
                      l2161 1D74                        l2401 16C6                        l2219 1F8C  
                      l2091 1D52                        l2083 1D30                        l2075 1D04  
                      l2155 1F50                        l2331 193C                        l2323 18E4  
                      l2171 1F62                        l2315 132C                        l2307 12B4  
                      l2251 0F86                        l2243 0F28                        l2235 0EAE  
                      l2227 0E58                        l2067 1B64                        l2059 1B12  
                      l2139 14E0                        l2163 1D94                        l2411 16E6  
                      l2403 16CE                        l2085 1D38                        l2077 1D0C  
                      l2149 1F38                        l2181 17CE                        l2341 1E1C  
                      l2333 1952                        l2325 18FA                        l2173 1F6C  
                      l2317 1352                        l2309 12BC                        l2261 101A  
                      l2253 0FAA                        l2245 0F32                        l2237 0ED4  
                      l2229 0E6A                        l2069 1B84                        l2093 1386  
                      l2157 1D5C                        l2421 1742                        l2413 16EE  
                      l2405 16D6                        l2087 1D46                        l2079 1D1A  
                      l2191 1826                        l2183 17E4                        l2343 1E2E  
                      l2335 1968                        l2327 1910                        l2167 1F10  
                      l2175 1F76                        l2319 1360                        l2271 10BC  
                      l2263 1034                        l2255 0FCE                        l2247 0F56  
                      l2239 0EDE                        l2095 13AC                        l2159 1D64  
                      l2351 1E5C                        l2431 17A6                        l2423 1748  
                      l2415 1702                        l2407 16DE                        l2177 1FBA  
                      l2089 1D4E                        l2193 182C                        l2185 17EA  
                      l2361 1EBC                        l2345 1E38                        l2337 197E  
                      l2329 1926                        l2169 1F5A                        l2281 1132  
                      l2273 10CE                        l2265 105A                        l2257 0FF4  
                      l2249 0F7C                        l2097 13B4                        l2353 1E64  
                      l2425 1774                        l2417 170A                        l2409 16DE  
                      l2195 183C                        l2187 1800                        l2179 17B6  
                      l2363 1EC0                        l2347 1E48                        l2339 1994  
                      l2291 11C6                        l2283 1158                        l2275 10F2  
                      l2267 1074                        l2259 1002                        l2099 13C0  
                      l2355 1E6C                        l2427 177C                        l2419 1736  
                      l2371 1674                        l2197 1846                        l2189 1810  
                      l2365 1ED0                        l2293 11EE                        l2285 1172  
                      l2269 1098                        l2277 1100                        l2357 1E7C  
                      l2349 1E54                        l2429 1782                        l2381 1686  
                      l2373 1678                        l2199 1854                        l2367 1ED2  
                      l2287 118C                        l2279 1118                        l2295 11F8  
                      l1911 19BC                        l1903 199E                        l2391 169E  
                      l2383 1688                        l2375 167C                        l2297 1220  
                      l2289 11B4                        l1921 19F0                        l1913 19CA  
                      l1905 19A2                        l2393 16A6                        l2385 168A  
                      l2377 1680                        l2369 1670                        l2299 123A  
                      l1931 1A2A                        l1923 19F8                        l1915 19D2  
                      l1907 19B0                        l2395 16AE                        l2387 168C  
                      l2379 1684                        l1941 1A50                        l1933 1A32  
                      l1925 1A00                        l1917 19D6                        l1909 19B8  
                      l2397 16B6                        l2389 1696                        l1951 1A74  
                      l1943 1A58                        l1935 1A34                        l1927 1A0E  
                      l1919 19DE                        l2399 16BE                        l1961 1AA8  
                      l1953 1A7C                        l1937 1A3A                        l1929 1A14  
                      l1881 1BEA                        l1971 1AE4                        l1963 1AB0  
                      l1955 1A80                        l1947 1A62                        l1939 1A40  
                      l1883 1C06                        l1875 1BC0                        l1891 1DEA  
                      l1973 1AEA                        l1965 1AB8                        l1957 1A8E  
                      l1949 1A66                        l1885 1C38                        l1877 1BD0  
                      l1893 1DF8                        l2597 140A                        ?_pad 000E  
                      l1967 1AC6                        l1975 1AF0                        l1959 1A96  
                      l1879 1BE0                        l1895 1DFC                        l1991 1CA6  
                      l1983 1C6A                        l1977 1B00                        l1969 1ADC  
                      l1889 1DDE                        l1993 1CB6                        l1985 1C78  
                      l1897 1EEA                        l1979 1B08                        l1995 1CBA  
                      l1987 1C84                        l1899 1F06                        l1997 1CE6  
                      l1989 1C92                        l1999 1E88                main@TestMode 0074  
                      STR_1 0E01                        STR_2 0E30                        STR_3 0E1B  
                      u2000 12FA                        u2001 12F6                        u2010 1352  
                      u2011 134E                        u2100 1994                        u2020 18E4  
                      u2101 1990                        u2021 18E0                        u2110 1E2E  
                      u2030 18FA                        u1310 1BD0                        u2111 1E2A  
                      u2031 18F6                        u1311 1BCC                        u2120 1E48  
                      u2040 1910                        u1400 1A2A                        u1320 1BE0  
                      u2121 1E44                        u2041 190C                        u1401 1A26  
                      u1321 1BDC                        u2130 1EE8                        u2050 1926  
                      u1410 1A50                        u1330 1C06                        u2131 1EE4  
                      u2051 1922                        u1411 1A4C                        u1331 1C02  
                      u2060 193C                        u1420 1A74                        u1340 1C38  
                      u1500 1CD8                        u2140 1702                        u2061 1938  
                      u1421 1A70                        u1341 1C34                        u1501 1CD4  
                      u2141 16FE                        u2070 1952                        u1430 1A8E  
                      u1350 1E18                        u1510 1CE6                        u2071 194E  
                      u1431 1A8A                        u1351 1E14                        u1511 1CE2  
                      u2080 1968                        u1440 1AA8                        u1360 19B0  
                      u1520 1E96                        u1600 1628                        u2081 1964  
                      u1441 1AA4                        u1361 19AC                        u1521 1E92  
                      u1601 1624                        u2090 197E                        u1450 1AC6  
                      u1370 19CA                        u1610 1636                        u1530 151C  
                      u2091 197A                        u1451 1AC2                        u1371 19C6  
                      u1611 1632                        u1531 1516                        u1460 1ADC  
                      u1380 19F0                        u1620 1646                        u1540 151E  
                      u1700 1428                        u1461 1AD8                        u1381 19EC  
                      u1621 1642                        u1701 1424                        u1470 1B00  
                      u1390 1A0E                        u1550 1538                        u1630 1B40  
                      u1710 144A                        u1471 1AFC                        u1391 1A0A  
                      u1551 1534                        u1631 1B3C                        u1711 1446  
                      u1800 0F28                        u1480 1C78                        u1560 154E  
                      u1640 1BB6                        u1720 147E                        u1801 0F24  
                      u1481 1C74                        u1561 154A                        u1641 1BB2  
                      u1721 147A                        u1650 1D04                        u1810 0F7C  
                      u1490 1C92                        u1570 15EC                        u1730 149E  
                      u1651 1D00                        u1811 0F78                        u1491 1C8E  
                      u1571 15E8                        u1731 149A                        u1660 1D1A  
                      u1900 1132                        u1820 0FF4                        u1580 15FE  
                      u1661 1D16                        u2517 17D8                        u1901 112E  
                      u1821 0FF0                        u1581 15FA                        u1670 1D30  
                      u1910 1158                        u1830 101A                        u1590 160E  
                      u1750 1D94                        u1671 1D2C                        u2607 18C6  
                      u2527 17F0                        u1911 1154                        u1831 1016  
                      u1591 160A                        u1751 1D90                        u1680 1D46  
                      u1920 1172                        u1840 1034                        u1681 1D42  
                      u2617 1F52                        u1745 1F40                        u2537 1806  
                      u1921 116E                        u1841 1030                        u1761 0E50  
                      u1746 1F42                        u1930 118C                        u1850 105A  
                      u1770 0E6A                        u1690 13AC                        u2627 1D54  
                      u2547 181C                        u1931 1188                        u1851 1056  
                      u1771 0E66                        u1691 13A8                        u1940 11C6  
                      u1860 1074                        u1780 0EA4                        u2637 1FB0  
                      u2557 1832                        u1941 11C2                        u1861 1070  
                      u1781 0EA0                        u1950 1220                        u1870 1098  
                      u1790 0ED4                        u2567 1848                        u1951 121C  
                      u1871 1094                        u1791 0ED0                        u1960 123A  
                      u1880 10CE                        u2577 1868                        u1961 1236  
                      u1881 10CA                        u1970 126E                        u1890 1118  
                      u2587 1886                        u1971 126A                        u1891 1114  
                      u1980 1288                        u2597 18A4                        u1981 1284  
                      u1990 12B4                        u1991 12B0                        i2l79 002C  
                      abs@a 0007                        _dbuf 0086                        _main 1670  
                      _dtoa 1508                        _prec 0048                        pad@i 0013  
                      pad@p 0010                        fsr1h 0FE2                        fsr2h 0FDA  
                      indf1 0FE7                        indf2 0FDF                        fsr1l 0FE1  
                      fsr2l 0FD9                        btemp 004B                ?_LCD_setline 0001  
                      prodh 0FF4                        prodl 0FF3                        start 0030  
          __end_of_ADC_init 1F94             __end_of_HighISR 0030                ___param_bank 0000  
                     ??_abs 0009                       ??_pad 0012            __end_of_LCD_Init 18D6  
                     ?_main 0001                       ?_dtoa 0015                       _ADPCH 0F5F  
           __end_of___awdiv 1A62             __end_of___awmod 1B12             ___awdiv@divisor 0003  
           ___awdiv@counter 0005                vfpfcnvrt@fmt 0021                       _TMR0H 0FD4  
                     _TMR0L 0FD3                       _flags 004A         read_prec_or_width@c 0009  
       read_prec_or_width@n 000A                       _fputc 1BC0                       _fputs 1DDE  
                     pad@fp 000E                       _width 0046                       _putch 1FC8  
                     dtoa@d 0016                       dtoa@i 001E                       dtoa@p 001A  
                     dtoa@s 001D                       dtoa@w 001B               ?_LCD_sendbyte 0002  
                     tablat 0FF5                       plusw1 0FE3                       plusw2 0FDB  
                     ttemp5 004C                       ttemp6 004F                       ttemp7 0053  
                     status 0FD8                       wtemp8 004C             __end_of_sprintf 1E88  
           __initialization 1D9E                __end_of_main 17B6                __end_of_dtoa 1670  
         __end_of_LCD_E_TOG 1FBA                      ??_main 0046                      ??_dtoa 0018  
             __activetblptr 0003  __end_of_read_prec_or_width 1BC0                      ?_fputc 0001  
                    ?_fputs 0009                      _ADRESH 0F64              ??_LCD_sendbyte 0003  
          ___awdiv@dividend 0001                      ?_putch 0001            UpdateClock@hours 0009  
                    i2l2433 000A                      i2l2435 001A                      i2l2437 0022  
                    i2l2439 0028            UpdateClock@years 000D               vfpfcnvrt@done 0029  
                 ??_HighISR 0001           _LEDarray_disp_bin 18D6          ?_LEDarray_disp_bin 0001  
             ??_Timer0_init 0001                vfprintf@cfmt 002E                      ___wmul 1EEA  
                 ??___awdiv 0005                   ??___awmod 0005        read_prec_or_width@ap 0008  
       ??_LEDarray_disp_bin 0003                      clear_0 1DC4            ___awdiv@quotient 0007  
           ___awmod@divisor 0003                      isa$std 0001             ___awmod@counter 0005  
                    pad@buf 000F                      dtoa@fp 0015                      fputc@c 0001  
                    fputs@c 000B                      fputs@i 000C                      fputs@s 0009  
              __mediumconst 0000                      tblptrh 0FF7                      tblptrl 0FF6  
                    tblptru 0FF8                   ?_ADC_init 0001                      putch@c 0001  
          __end_of_vfprintf 1D9E                   ??_sprintf 0039   __end_of_LEDarray_disp_bin 199E  
                __accesstop 0060               ??_UpdateClock 0011     __end_of__initialization 1DD4  
                 ?_LCD_Init 0001               ___rparam_used 0001               _LEDarray_init 1F10  
           _Interrupts_init 1FBA              __pcstackCOMRAM 0001                __pidataBANK0 1F94  
             __end_of_fputc 1C6A               __end_of_fputs 1E1A               __end_of_putch 1FCA  
       __end_of_Timer0_init 1F7A                  ??_ADC_init 0001                     ??_fputc 0004  
                   ??_fputs 000B                     ??_putch 0001           UpdateClock@F14152 00A8  
                __pbssBANK0 0086         UpdateClock@DSTstate 000E                  ??_LCD_Init 0004  
            _LCD_sendnibble 1CF4              ?_LEDarray_init 0001              _LCD_sendstring 1EBC  
       __end_of_UpdateClock 1386                     ?___wmul 0001        __end_of_LCD_sendbyte 1F5A  
         UpdateClock@months 000C      __end_of_LCD_sendnibble 1D5C         UpdateClock@TestMode 000F  
   __end_of_Interrupts_init 1FC8                     _HighISR 0008      __end_of_LCD_sendstring 1EEA  
                 _ADREFbits 0F58                     __Hparam 0000                     __Lparam 0000  
               _Timer0_init 1F5A                     ___awdiv 199E                     ___awmod 1A62  
                 ?_vfprintf 002B                __psmallconst 0E00                     __pcinit 1D9E  
                   __ramtop 0E00                     __ptext0 1670                     __ptext1 1E54  
                   __ptext2 1D5C                     __ptext3 1386                     __ptext4 1B12  
                   __ptext5 1EEA                     __ptext6 1508                     __ptext7 1C6A  
                   __ptext8 1DDE                     __ptext9 1BC0       read_prec_or_width@fmt 0007  
          ___awmod@dividend 0001                   _LCD_E_TOG 1FAC             LCD_setline@line 0004  
                   main@buf 0060                     _sprintf 1E54        end_of_initialization 1DD4  
           ?_LCD_sendnibble 0001                     fputc@fp 0003             ??_LEDarray_init 0001  
                   fputs@fp 000A                 _UpdateClock 0E46             ?_LCD_sendstring 0004  
        _read_prec_or_width 1B12           __end_of_vfpfcnvrt 1508                     postdec1 0FE5  
                   postdec2 0FDD         ?_read_prec_or_width 0007                     postinc0 0FEE  
                   postinc1 0FE6                     postinc2 0FDE            vfpfcnvrt@convarg 0025  
                ??_vfprintf 002E                  ?_LCD_E_TOG 0001                   _TRISAbits 0F81  
                 _TRISBbits 0F82                   _TRISCbits 0F83                   _TRISDbits 0F84  
                 _TRISEbits 0F85                   _TRISFbits 0F86                   _TRISGbits 0F87  
                 _TRISHbits 0F88        ??_read_prec_or_width 0009                 _CM1CON0bits 0ED0  
               _CM1CON1bits 0ED1            ?_Interrupts_init 0001                 vfpfcnvrt@ap 0022  
               vfpfcnvrt@cp 002A                 vfpfcnvrt@fp 0020              __end_of___wmul 1F10  
      LCD_sendnibble@number 0001         start_initialization 1D9E                 __end_of_abs 1EBC  
               __end_of_pad 1CF4                _LCD_sendbyte 1F36             UpdateClock@days 000A  
             ??_LCD_setline 0004                 vfprintf@fmt 002C        LCD_sendstring@string 0004  
                  ??___wmul 0005                 __pdataBANK0 00A8                 __pbssCOMRAM 0046  
               ??_LCD_E_TOG 0001               __pcstackBANK0 0060                    ?_HighISR 0001  
                 _dtoa$1868 0018                ?_Timer0_init 0001                   __pintcode 0008  
                  ?___awdiv 0001                    ?___awmod 0001         __end_of_LCD_setline 1E54  
               __smallconst 0E00            ??_LCD_sendnibble 0001                    _ADC_init 1F7A  
          ??_LCD_sendstring 0005                    ?_sprintf 002F            LCD_sendbyte@Byte 0003  
                  _LCD_Init 17B6            LCD_sendbyte@type 0002                ?_UpdateClock 0007  
            ___wmul@product 0005                    _LATAbits 0F79          UpdateClock@minutes 0008  
        UpdateClock@seconds 0007                    _LATBbits 0F7A                    _LATCbits 0F7B  
                  _LATDbits 0F7C                    _LATEbits 0F7D                    _LATFbits 0F7E  
                  _LATGbits 0F7F                    _LATHbits 0F80                    _IPR0bits 0E1F  
                  _PIE0bits 0E29                    i2u215_40 001A                    i2u215_41 0016  
                  _PIR0bits 0E33                   _vfpfcnvrt 1386                  _ADCON0bits 0F60  
         ___wmul@multiplier 0001                   main@clock 0076      UpdateClock@DaysInMonth 0017  
                _CM1NCHbits 0ED2                  _CM1PCHbits 0ED3                   copy_data0 1DB2  
     __end_of_LEDarray_init 1F36              UpdateClock@DoW 000B                 _LCD_setline 1E1A  
                  __Hrparam 0000                  vfprintf@ap 002D                    __Lrparam 0000  
                vfprintf@fp 002B                  ?_vfpfcnvrt 0020                  _ANSELAbits 0E92  
                sprintf@fmt 0030                  _T0CON0bits 0FD5                  _T0CON1bits 0FD6  
                  __ptext10 1FC8                    __ptext11 1E88                    __ptext20 17B6  
                  __ptext12 199E                    __ptext21 1F36                    __ptext13 0E46  
                  __ptext22 1CF4                    __ptext14 1A62                    __ptext23 1FAC  
                  __ptext15 1F5A                    __ptext24 1FBA                    __ptext16 1F10  
                  __ptext25 1F7A                    __ptext17 18D6                    __ptext18 1E1A  
                  __ptext19 1EBC     LEDarray_disp_bin@number 0001                  _GLOBALsecs 00A6  
                  isa$xinst 0000                    int$flags 004B                    _vfprintf 1D5C  
                _INTCONbits 0FF2                    intlevel2 0000                   sprintf@ap 0039  
              _DAC1CON0bits 0EC6                _DAC1CON1bits 0EC7                 ??_vfpfcnvrt 0023  
                  sprintf@f 003A                    sprintf@s 002F  
