

Microchip MPLAB XC8 Assembler V2.45 build 20230818022343 
                                                                                               Thu Feb 08 23:53:50 2024

Microchip MPLAB XC8 C Compiler v2.45 (Free license) build 20230818022343 Og1 
     1                           	processor	18F67K40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1,group=3
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=2
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=3
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=3
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=3
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=3
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=2
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=2
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1
    34                           	psect	text21,global,reloc=2,class=CODE,delta=1
    35                           	psect	text22,global,reloc=2,class=CODE,delta=1
    36                           	psect	text23,global,reloc=2,class=CODE,delta=1
    37                           	psect	text24,global,reloc=2,class=CODE,delta=1
    38                           	psect	text25,global,reloc=2,class=CODE,delta=1
    39                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    40                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    41                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    42                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    43                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    44   000000                     
    45                           ; Generated 21/07/2023 GMT
    46                           ; 
    47                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    48                           ; All rights reserved.
    49                           ; 
    50                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    51                           ; 
    52                           ; Redistribution and use in source and binary forms, with or without modification, are
    53                           ; permitted provided that the following conditions are met:
    54                           ; 
    55                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    56                           ;        conditions and the following disclaimer.
    57                           ; 
    58                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    59                           ;        of conditions and the following disclaimer in the documentation and/or other
    60                           ;        materials provided with the distribution. Publication is not required when
    61                           ;        this file is used in an embedded application.
    62                           ; 
    63                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    64                           ;        software without specific prior written permission.
    65                           ; 
    66                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    67                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    68                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    69                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    70                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    71                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    72                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    73                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    74                           ; 
    75                           ; 
    76                           ; Code-generator required, PIC18F67K40 Definitions
    77                           ; 
    78                           ; SFR Addresses
    79   000000                     
    80                           	psect	idataBANK0
    81   001F24                     __pidataBANK0:
    82                           	callstack 0
    83                           
    84                           ;initializer for UpdateClock@F14152
    85   001F24  001F               	dw	31
    86   001F26  001C               	dw	28
    87   001F28  001F               	dw	31
    88   001F2A  001E               	dw	30
    89   001F2C  001F               	dw	31
    90   001F2E  001E               	dw	30
    91   001F30  001F               	dw	31
    92   001F32  001F               	dw	31
    93   001F34  001E               	dw	30
    94   001F36  001F               	dw	31
    95   001F38  001E               	dw	30
    96   001F3A  001F               	dw	31
    97   000000                     _TRISCbits	set	3971
    98   000000                     _TRISEbits	set	3973
    99   000000                     _LATEbits	set	3965
   100   000000                     _LATCbits	set	3963
   101   000000                     _LATBbits	set	3962
   102   000000                     _TRISBbits	set	3970
   103   000000                     _LATFbits	set	3966
   104   000000                     _TRISAbits	set	3969
   105   000000                     _LATGbits	set	3967
   106   000000                     _TRISGbits	set	3975
   107   000000                     _CM1CON1bits	set	3793
   108   000000                     _TRISFbits	set	3974
   109   000000                     _LATHbits	set	3968
   110   000000                     _TRISHbits	set	3976
   111   000000                     _IPR0bits	set	3615
   112   000000                     _PIE0bits	set	3625
   113   000000                     _LATDbits	set	3964
   114   000000                     _TRISDbits	set	3972
   115   000000                     _TMR0L	set	4051
   116   000000                     _TMR0H	set	4052
   117   000000                     _T0CON0bits	set	4053
   118   000000                     _T0CON1bits	set	4054
   119   000000                     _INTCONbits	set	4082
   120   000000                     _PIR0bits	set	3635
   121   000000                     _ANSELAbits	set	3730
   122   000000                     _DAC1CON0bits	set	3782
   123   000000                     _CM1CON0bits	set	3792
   124   000000                     _CM1NCHbits	set	3794
   125   000000                     _DAC1CON1bits	set	3783
   126   000000                     _ADREFbits	set	3928
   127   000000                     _LATAbits	set	3961
   128   000000                     _CM1PCHbits	set	3795
   129   000000                     _ADPCH	set	3935
   130   000000                     _ADRESH	set	3940
   131   000000                     _ADCON0bits	set	3936
   132                           
   133                           	psect	smallconst
   134   000E00                     __psmallconst:
   135                           	callstack 0
   136   000E00  00                 	db	0
   137   000E01                     STR_1:
   138                           
   139                           ; BSR set to: 14
   140   000E01  54                 	db	84	;'T'
   141   000E02  69                 	db	105	;'i'
   142   000E03  6D                 	db	109	;'m'
   143   000E04  65                 	db	101	;'e'
   144   000E05  3A                 	db	58	;':'
   145   000E06  25                 	db	37
   146   000E07  30                 	db	48	;'0'
   147   000E08  32                 	db	50	;'2'
   148   000E09  64                 	db	100	;'d'
   149   000E0A  3A                 	db	58	;':'
   150   000E0B  25                 	db	37
   151   000E0C  30                 	db	48	;'0'
   152   000E0D  32                 	db	50	;'2'
   153   000E0E  64                 	db	100	;'d'
   154   000E0F  3A                 	db	58	;':'
   155   000E10  25                 	db	37
   156   000E11  30                 	db	48	;'0'
   157   000E12  32                 	db	50	;'2'
   158   000E13  64                 	db	100	;'d'
   159   000E14  20                 	db	32
   160   000E15  44                 	db	68	;'D'
   161   000E16  25                 	db	37
   162   000E17  30                 	db	48	;'0'
   163   000E18  31                 	db	49	;'1'
   164   000E19  64                 	db	100	;'d'
   165   000E1A  00                 	db	0
   166   000E1B                     
   167                           ; BSR set to: 14
   168   000E1B  54                 	db	84	;'T'
   169   000E1C  69                 	db	105	;'i'
   170   000E1D  6D                 	db	109	;'m'
   171   000E1E  65                 	db	101	;'e'
   172   000E1F  3A                 	db	58	;':'
   173   000E20  20                 	db	32
   174   000E21  25                 	db	37
   175   000E22  30                 	db	48	;'0'
   176   000E23  32                 	db	50	;'2'
   177   000E24  64                 	db	100	;'d'
   178   000E25  3A                 	db	58	;':'
   179   000E26  25                 	db	37
   180   000E27  30                 	db	48	;'0'
   181   000E28  32                 	db	50	;'2'
   182   000E29  64                 	db	100	;'d'
   183   000E2A  3A                 	db	58	;':'
   184   000E2B  25                 	db	37
   185   000E2C  30                 	db	48	;'0'
   186   000E2D  34                 	db	52	;'4'
   187   000E2E  64                 	db	100	;'d'
   188   000E2F  00                 	db	0
   189   000E30                     STR_2:
   190                           
   191                           ; BSR set to: 14
   192   000E30  44                 	db	68	;'D'
   193   000E31  61                 	db	97	;'a'
   194   000E32  74                 	db	116	;'t'
   195   000E33  65                 	db	101	;'e'
   196   000E34  3A                 	db	58	;':'
   197   000E35  25                 	db	37
   198   000E36  30                 	db	48	;'0'
   199   000E37  32                 	db	50	;'2'
   200   000E38  64                 	db	100	;'d'
   201   000E39  2F                 	db	47
   202   000E3A  25                 	db	37
   203   000E3B  30                 	db	48	;'0'
   204   000E3C  32                 	db	50	;'2'
   205   000E3D  64                 	db	100	;'d'
   206   000E3E  2F                 	db	47
   207   000E3F  25                 	db	37
   208   000E40  30                 	db	48	;'0'
   209   000E41  34                 	db	52	;'4'
   210   000E42  64                 	db	100	;'d'
   211   000E43  00                 	db	0
   212   000E44  00                 	db	0	; dummy byte at the end
   213   000000                     
   214                           ; #config settings
   215                           
   216                           	psect	cinit
   217   001D2E                     __pcinit:
   218                           	callstack 0
   219   001D2E                     start_initialization:
   220                           	callstack 0
   221   001D2E                     __initialization:
   222                           	callstack 0
   223                           
   224                           ; Initialize objects allocated to BANK0 (24 bytes)
   225                           ; load TBLPTR registers with __pidataBANK0
   226   001D2E  0E24               	movlw	low __pidataBANK0
   227   001D30  6EF6               	movwf	tblptrl,c
   228   001D32  0E1F               	movlw	high __pidataBANK0
   229   001D34  6EF7               	movwf	tblptrh,c
   230   001D36  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   231   001D38  6EF8               	movwf	tblptru,c
   232   001D3A  EE00  F0A8         	lfsr	0,__pdataBANK0
   233   001D3E  EE10 F018          	lfsr	1,24
   234   001D42                     copy_data0:
   235   001D42  0009               	tblrd		*+
   236   001D44  CFF5 FFEE          	movff	tablat,postinc0
   237   001D48  50E5               	movf	postdec1,w,c
   238   001D4A  50E1               	movf	fsr1l,w,c
   239   001D4C  E1FA               	bnz	copy_data0
   240                           
   241                           ; Clear objects allocated to BANK0 (34 bytes)
   242   001D4E  EE00  F086         	lfsr	0,__pbssBANK0
   243   001D52  0E22               	movlw	34
   244   001D54                     clear_0:
   245   001D54  6AEE               	clrf	postinc0,c
   246   001D56  06E8               	decf	wreg,f,c
   247   001D58  E1FD               	bnz	clear_0
   248                           
   249                           ; Clear objects allocated to COMRAM (5 bytes)
   250   001D5A  6A4A               	clrf	(__pbssCOMRAM+4)& (0+255),c
   251   001D5C  6A49               	clrf	(__pbssCOMRAM+3)& (0+255),c
   252   001D5E  6A48               	clrf	(__pbssCOMRAM+2)& (0+255),c
   253   001D60  6A47               	clrf	(__pbssCOMRAM+1)& (0+255),c
   254   001D62  6A46               	clrf	__pbssCOMRAM& (0+255),c
   255   001D64                     end_of_initialization:
   256                           	callstack 0
   257   001D64                     __end_of__initialization:
   258                           	callstack 0
   259   001D64  904B               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   260   001D66  924B               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   261   001D68  0100               	movlb	0
   262   001D6A  EF00  F00B         	goto	_main	;jump to C main() function
   263                           
   264                           	psect	bssCOMRAM
   265   000046                     __pbssCOMRAM:
   266                           	callstack 0
   267   000046                     _width:
   268                           	callstack 0
   269   000046                     	ds	2
   270   000048                     _prec:
   271                           	callstack 0
   272   000048                     	ds	2
   273   00004A                     _flags:
   274                           	callstack 0
   275   00004A                     	ds	1
   276                           
   277                           	psect	bssBANK0
   278   000086                     __pbssBANK0:
   279                           	callstack 0
   280   000086                     _dbuf:
   281                           	callstack 0
   282   000086                     	ds	32
   283   0000A6                     _GLOBALsecs:
   284                           	callstack 0
   285   0000A6                     	ds	2
   286                           
   287                           	psect	dataBANK0
   288   0000A8                     __pdataBANK0:
   289                           	callstack 0
   290   0000A8                     UpdateClock@F14152:
   291                           	callstack 0
   292   0000A8                     	ds	24
   293                           
   294                           	psect	cstackBANK0
   295   000060                     __pcstackBANK0:
   296                           	callstack 0
   297   000060                     main@buf:
   298                           	callstack 0
   299                           
   300                           ; 20 bytes @ 0x0
   301   000060                     	ds	20
   302   000074                     main@TestMode:
   303                           	callstack 0
   304                           
   305                           ; 2 bytes @ 0x14
   306   000074                     	ds	2
   307   000076                     main@clock:
   308                           	callstack 0
   309                           
   310                           ; 16 bytes @ 0x16
   311   000076                     	ds	16
   312                           
   313                           	psect	cstackCOMRAM
   314   000001                     __pcstackCOMRAM:
   315                           	callstack 0
   316   000001                     ?___wmul:
   317                           	callstack 0
   318   000001                     ?___awdiv:
   319                           	callstack 0
   320   000001                     ?___awmod:
   321                           	callstack 0
   322   000001                     LCD_sendnibble@number:
   323                           	callstack 0
   324   000001                     LEDarray_disp_bin@number:
   325                           	callstack 0
   326   000001                     ___wmul@multiplier:
   327                           	callstack 0
   328   000001                     ___awdiv@dividend:
   329                           	callstack 0
   330   000001                     ___awmod@dividend:
   331                           	callstack 0
   332   000001                     fputc@c:
   333                           	callstack 0
   334                           
   335                           ; 2 bytes @ 0x0
   336   000001                     	ds	1
   337   000002                     LCD_sendbyte@type:
   338                           	callstack 0
   339                           
   340                           ; 1 bytes @ 0x1
   341   000002                     	ds	1
   342   000003                     LCD_sendbyte@Byte:
   343                           	callstack 0
   344   000003                     fputc@fp:
   345                           	callstack 0
   346   000003                     ___wmul@multiplicand:
   347                           	callstack 0
   348   000003                     ___awdiv@divisor:
   349                           	callstack 0
   350   000003                     ___awmod@divisor:
   351                           	callstack 0
   352                           
   353                           ; 2 bytes @ 0x2
   354   000003                     	ds	1
   355   000004                     ??_LCD_Init:
   356   000004                     ??_fputc:
   357   000004                     LCD_setline@line:
   358                           	callstack 0
   359   000004                     LCD_sendstring@string:
   360                           	callstack 0
   361                           
   362                           ; 1 bytes @ 0x3
   363   000004                     	ds	1
   364   000005                     ___awdiv@counter:
   365                           	callstack 0
   366   000005                     ___awmod@counter:
   367                           	callstack 0
   368   000005                     ___wmul@product:
   369                           	callstack 0
   370                           
   371                           ; 2 bytes @ 0x4
   372   000005                     	ds	1
   373   000006                     ___awdiv@sign:
   374                           	callstack 0
   375   000006                     ___awmod@sign:
   376                           	callstack 0
   377                           
   378                           ; 1 bytes @ 0x5
   379   000006                     	ds	1
   380   000007                     ?_abs:
   381                           	callstack 0
   382   000007                     ?_read_prec_or_width:
   383                           	callstack 0
   384   000007                     UpdateClock@seconds:
   385                           	callstack 0
   386   000007                     read_prec_or_width@fmt:
   387                           	callstack 0
   388   000007                     ___awdiv@quotient:
   389                           	callstack 0
   390   000007                     abs@a:
   391                           	callstack 0
   392                           
   393                           ; 2 bytes @ 0x6
   394   000007                     	ds	1
   395   000008                     UpdateClock@minutes:
   396                           	callstack 0
   397   000008                     read_prec_or_width@ap:
   398                           	callstack 0
   399                           
   400                           ; 1 bytes @ 0x7
   401   000008                     	ds	1
   402   000009                     ??_abs:
   403   000009                     UpdateClock@hours:
   404                           	callstack 0
   405   000009                     read_prec_or_width@c:
   406                           	callstack 0
   407   000009                     fputs@s:
   408                           	callstack 0
   409                           
   410                           ; 1 bytes @ 0x8
   411   000009                     	ds	1
   412   00000A                     UpdateClock@days:
   413                           	callstack 0
   414   00000A                     fputs@fp:
   415                           	callstack 0
   416   00000A                     read_prec_or_width@n:
   417                           	callstack 0
   418                           
   419                           ; 2 bytes @ 0x9
   420   00000A                     	ds	1
   421   00000B                     UpdateClock@DoW:
   422                           	callstack 0
   423   00000B                     fputs@c:
   424                           	callstack 0
   425                           
   426                           ; 1 bytes @ 0xA
   427   00000B                     	ds	1
   428   00000C                     UpdateClock@months:
   429                           	callstack 0
   430   00000C                     fputs@i:
   431                           	callstack 0
   432                           
   433                           ; 2 bytes @ 0xB
   434   00000C                     	ds	1
   435   00000D                     UpdateClock@years:
   436                           	callstack 0
   437                           
   438                           ; 1 bytes @ 0xC
   439   00000D                     	ds	1
   440   00000E                     UpdateClock@DSTstate:
   441                           	callstack 0
   442   00000E                     pad@fp:
   443                           	callstack 0
   444                           
   445                           ; 1 bytes @ 0xD
   446   00000E                     	ds	1
   447   00000F                     pad@buf:
   448                           	callstack 0
   449   00000F                     UpdateClock@TestMode:
   450                           	callstack 0
   451                           
   452                           ; 2 bytes @ 0xE
   453   00000F                     	ds	1
   454   000010                     pad@p:
   455                           	callstack 0
   456                           
   457                           ; 2 bytes @ 0xF
   458   000010                     	ds	1
   459   000011                     ??_UpdateClock:
   460                           
   461                           ; 1 bytes @ 0x10
   462   000011                     	ds	1
   463   000012                     ??_pad:
   464                           
   465                           ; 1 bytes @ 0x11
   466   000012                     	ds	1
   467   000013                     pad@i:
   468                           	callstack 0
   469                           
   470                           ; 2 bytes @ 0x12
   471   000013                     	ds	2
   472   000015                     dtoa@fp:
   473                           	callstack 0
   474                           
   475                           ; 1 bytes @ 0x14
   476   000015                     	ds	1
   477   000016                     dtoa@d:
   478                           	callstack 0
   479                           
   480                           ; 2 bytes @ 0x15
   481   000016                     	ds	1
   482   000017                     UpdateClock@DaysInMonth:
   483                           	callstack 0
   484                           
   485                           ; 24 bytes @ 0x16
   486   000017                     	ds	1
   487   000018                     _dtoa$1868:
   488                           	callstack 0
   489                           
   490                           ; 2 bytes @ 0x17
   491   000018                     	ds	2
   492   00001A                     dtoa@p:
   493                           	callstack 0
   494                           
   495                           ; 1 bytes @ 0x19
   496   00001A                     	ds	1
   497   00001B                     dtoa@w:
   498                           	callstack 0
   499                           
   500                           ; 2 bytes @ 0x1A
   501   00001B                     	ds	2
   502   00001D                     dtoa@s:
   503                           	callstack 0
   504                           
   505                           ; 1 bytes @ 0x1C
   506   00001D                     	ds	1
   507   00001E                     dtoa@i:
   508                           	callstack 0
   509                           
   510                           ; 2 bytes @ 0x1D
   511   00001E                     	ds	2
   512   000020                     vfpfcnvrt@fp:
   513                           	callstack 0
   514                           
   515                           ; 1 bytes @ 0x1F
   516   000020                     	ds	1
   517   000021                     vfpfcnvrt@fmt:
   518                           	callstack 0
   519                           
   520                           ; 1 bytes @ 0x20
   521   000021                     	ds	1
   522   000022                     vfpfcnvrt@ap:
   523                           	callstack 0
   524                           
   525                           ; 1 bytes @ 0x21
   526   000022                     	ds	1
   527   000023                     ??_vfpfcnvrt:
   528                           
   529                           ; 1 bytes @ 0x22
   530   000023                     	ds	2
   531   000025                     vfpfcnvrt@convarg:
   532                           	callstack 0
   533                           
   534                           ; 4 bytes @ 0x24
   535   000025                     	ds	4
   536   000029                     vfpfcnvrt@done:
   537                           	callstack 0
   538                           
   539                           ; 1 bytes @ 0x28
   540   000029                     	ds	1
   541   00002A                     vfpfcnvrt@cp:
   542                           	callstack 0
   543                           
   544                           ; 1 bytes @ 0x29
   545   00002A                     	ds	1
   546   00002B                     ?_vfprintf:
   547                           	callstack 0
   548   00002B                     vfprintf@fp:
   549                           	callstack 0
   550                           
   551                           ; 1 bytes @ 0x2A
   552   00002B                     	ds	1
   553   00002C                     vfprintf@fmt:
   554                           	callstack 0
   555                           
   556                           ; 1 bytes @ 0x2B
   557   00002C                     	ds	1
   558   00002D                     vfprintf@ap:
   559                           	callstack 0
   560                           
   561                           ; 1 bytes @ 0x2C
   562   00002D                     	ds	1
   563   00002E                     vfprintf@cfmt:
   564                           	callstack 0
   565                           
   566                           ; 1 bytes @ 0x2D
   567   00002E                     	ds	1
   568   00002F                     ?_sprintf:
   569                           	callstack 0
   570   00002F                     sprintf@s:
   571                           	callstack 0
   572                           
   573                           ; 1 bytes @ 0x2E
   574   00002F                     	ds	1
   575   000030                     sprintf@fmt:
   576                           	callstack 0
   577                           
   578                           ; 1 bytes @ 0x2F
   579   000030                     	ds	9
   580   000039                     sprintf@ap:
   581                           	callstack 0
   582                           
   583                           ; 1 bytes @ 0x38
   584   000039                     	ds	1
   585   00003A                     sprintf@f:
   586                           	callstack 0
   587                           
   588                           ; 12 bytes @ 0x39
   589   00003A                     	ds	12
   590   000046                     
   591                           ; 1 bytes @ 0x45
   592 ;;
   593 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   594 ;;
   595 ;; *************** function _main *****************
   596 ;; Defined at:
   597 ;;		line 30 in file "main.c"
   598 ;; Parameters:    Size  Location     Type
   599 ;;		None
   600 ;; Auto vars:     Size  Location     Type
   601 ;;  buf            20    0[BANK0 ] unsigned char [20]
   602 ;;  clock          16   22[BANK0 ] struct time_structure
   603 ;;  TestMode        2   20[BANK0 ] int 
   604 ;; Return value:  Size  Location     Type
   605 ;;                  1    wreg      void 
   606 ;; Registers used:
   607 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   608 ;; Tracked objects:
   609 ;;		On entry : 0/0
   610 ;;		On exit  : 0/0
   611 ;;		Unchanged: 0/0
   612 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   613 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   614 ;;      Locals:         0      38       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   615 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   616 ;;      Totals:         0      38       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   617 ;;Total ram usage:       38 bytes
   618 ;; Hardware stack levels required when called: 9
   619 ;; This function calls:
   620 ;;		_ADC_init
   621 ;;		_Interrupts_init
   622 ;;		_LCD_Init
   623 ;;		_LCD_sendstring
   624 ;;		_LCD_setline
   625 ;;		_LEDarray_disp_bin
   626 ;;		_LEDarray_init
   627 ;;		_Timer0_init
   628 ;;		_UpdateClock
   629 ;;		_sprintf
   630 ;; This function is called by:
   631 ;;		Startup code after reset
   632 ;; This function uses a non-reentrant model
   633 ;;
   634                           
   635                           	psect	text0
   636   001600                     __ptext0:
   637                           	callstack 0
   638   001600                     _main:
   639                           	callstack 22
   640   001600                     
   641                           ;main.c: 33:     LEDarray_init();
   642   001600  EC50  F00F         	call	_LEDarray_init	;wreg free
   643   001604                     
   644                           ;main.c: 34:     Timer0_init();
   645   001604  EC75  F00F         	call	_Timer0_init	;wreg free
   646   001608                     
   647                           ;main.c: 35:     Interrupts_init();
   648   001608  ECA5  F00F         	call	_Interrupts_init	;wreg free
   649   00160C                     
   650                           ;main.c: 37:     LCD_Init();
   651   00160C  ECA3  F00B         	call	_LCD_Init	;wreg free
   652   001610                     
   653                           ;main.c: 38:     ADC_init();
   654   001610  EC85  F00F         	call	_ADC_init	;wreg free
   655   001614                     
   656                           ;main.c: 40:     char buf[20];;main.c: 44:     TRISDbits.TRISD7 = 0;
   657   001614  9E84               	bcf	132,7,c	;volatile
   658   001616                     
   659                           ;main.c: 45:     LATDbits.LATD7 = 0;
   660   001616  9E7C               	bcf	124,7,c	;volatile
   661   001618                     
   662                           ;main.c: 48:     TRISHbits.TRISH3 = 0;
   663   001618  9688               	bcf	136,3,c	;volatile
   664   00161A                     
   665                           ;main.c: 49:     LATHbits.LATH3 = 0;
   666   00161A  9680               	bcf	128,3,c	;volatile
   667   00161C                     
   668                           ;main.c: 64:     struct time_structure clock;;main.c: 66:         GLOBALsecs = 55;
   669   00161C  0E00               	movlw	0
   670   00161E  0100               	movlb	0	; () banked
   671   001620  6FA7               	movwf	(_GLOBALsecs+1)& (0+255),b
   672   001622  0E37               	movlw	55
   673   001624  6FA6               	movwf	_GLOBALsecs& (0+255),b
   674   001626                     
   675                           ; BSR set to: 0
   676                           ;main.c: 85:         clock.minutes = 59;
   677   001626  0E00               	movlw	0
   678   001628  6F79               	movwf	(main@clock+3)& (0+255),b
   679   00162A  0E3B               	movlw	59
   680   00162C  6F78               	movwf	(main@clock+2)& (0+255),b
   681   00162E                     
   682                           ; BSR set to: 0
   683                           ;main.c: 86:         clock.hours = 0;
   684   00162E  0E00               	movlw	0
   685   001630  6F7B               	movwf	(main@clock+5)& (0+255),b
   686   001632  0E00               	movlw	0
   687   001634  6F7A               	movwf	(main@clock+4)& (0+255),b
   688   001636                     
   689                           ; BSR set to: 0
   690                           ;main.c: 87:         clock.days = 31;
   691   001636  0E00               	movlw	0
   692   001638  6F7D               	movwf	(main@clock+7)& (0+255),b
   693   00163A  0E1F               	movlw	31
   694   00163C  6F7C               	movwf	(main@clock+6)& (0+255),b
   695   00163E                     
   696                           ; BSR set to: 0
   697                           ;main.c: 88:         clock.DoW = 7;
   698   00163E  0E00               	movlw	0
   699   001640  6F7F               	movwf	(main@clock+9)& (0+255),b
   700   001642  0E07               	movlw	7
   701   001644  6F7E               	movwf	(main@clock+8)& (0+255),b
   702   001646                     
   703                           ; BSR set to: 0
   704                           ;main.c: 89:         clock.months = 3;
   705   001646  0E00               	movlw	0
   706   001648  6F81               	movwf	(main@clock+11)& (0+255),b
   707   00164A  0E03               	movlw	3
   708   00164C  6F80               	movwf	(main@clock+10)& (0+255),b
   709   00164E                     
   710                           ; BSR set to: 0
   711                           ;main.c: 90:         clock.years = 2024;
   712   00164E  0E07               	movlw	7
   713   001650  6F83               	movwf	(main@clock+13)& (0+255),b
   714   001652  0EE8               	movlw	232
   715   001654  6F82               	movwf	(main@clock+12)& (0+255),b
   716   001656                     
   717                           ; BSR set to: 0
   718                           ;main.c: 91:         clock.DSTstate = 0;
   719   001656  0E00               	movlw	0
   720   001658  6F85               	movwf	(main@clock+15)& (0+255),b
   721   00165A  0E00               	movlw	0
   722   00165C  6F84               	movwf	(main@clock+14)& (0+255),b
   723   00165E                     
   724                           ; BSR set to: 0
   725                           ;main.c: 94:         int TestMode = 1;
   726   00165E  0E00               	movlw	0
   727   001660  6F75               	movwf	(main@TestMode+1)& (0+255),b
   728   001662  0E01               	movlw	1
   729   001664  6F74               	movwf	main@TestMode& (0+255),b
   730   001666                     
   731                           ; BSR set to: 0
   732                           ;main.c: 96:         clock.seconds = GLOBALsecs;
   733   001666  C0A6  F076         	movff	_GLOBALsecs,main@clock
   734   00166A  C0A7  F077         	movff	_GLOBALsecs+1,main@clock+1
   735   00166E                     
   736                           ; BSR set to: 0
   737                           ;main.c: 98:             clock.seconds = 0;
   738   00166E  0E00               	movlw	0
   739   001670  6F77               	movwf	(main@clock+1)& (0+255),b
   740   001672  0E00               	movlw	0
   741   001674  6F76               	movwf	main@clock& (0+255),b
   742   001676                     
   743                           ; BSR set to: 0
   744                           ;main.c: 99:             GLOBALsecs = clock.hours;
   745   001676  C07A  F0A6         	movff	main@clock+4,_GLOBALsecs
   746   00167A  C07B  F0A7         	movff	main@clock+5,_GLOBALsecs+1
   747   00167E                     l2395:
   748                           
   749                           ;main.c: 105:         if (TestMode == 0){clock.seconds = GLOBALsecs;}
   750   00167E  0100               	movlb	0	; () banked
   751   001680  5174               	movf	main@TestMode& (0+255),w,b
   752   001682  1175               	iorwf	(main@TestMode+1)& (0+255),w,b
   753   001684  A4D8               	btfss	status,2,c
   754   001686  EF47  F00B         	goto	u2101
   755   00168A  EF49  F00B         	goto	u2100
   756   00168E                     u2101:
   757   00168E  EF4D  F00B         	goto	l2399
   758   001692                     u2100:
   759   001692                     
   760                           ; BSR set to: 0
   761   001692  C0A6  F076         	movff	_GLOBALsecs,main@clock
   762   001696  C0A7  F077         	movff	_GLOBALsecs+1,main@clock+1
   763   00169A                     l2399:
   764                           
   765                           ; BSR set to: 0
   766                           ;main.c: 107:         UpdateClock(&GLOBALsecs, &clock.minutes, &clock.hours, &clock.days
      +                          , &clock.DoW, &clock.months, &clock.years, &clock.DSTstate, TestMode);
   767   00169A  0EA6               	movlw	low _GLOBALsecs
   768   00169C  6E07               	movwf	UpdateClock@seconds^0,c
   769   00169E  0E78               	movlw	low (main@clock+2)
   770   0016A0  6E08               	movwf	UpdateClock@minutes^0,c
   771   0016A2  0E7A               	movlw	low (main@clock+4)
   772   0016A4  6E09               	movwf	UpdateClock@hours^0,c
   773   0016A6  0E7C               	movlw	low (main@clock+6)
   774   0016A8  6E0A               	movwf	UpdateClock@days^0,c
   775   0016AA  0E7E               	movlw	low (main@clock+8)
   776   0016AC  6E0B               	movwf	UpdateClock@DoW^0,c
   777   0016AE  0E80               	movlw	low (main@clock+10)
   778   0016B0  6E0C               	movwf	UpdateClock@months^0,c
   779   0016B2  0E82               	movlw	low (main@clock+12)
   780   0016B4  6E0D               	movwf	UpdateClock@years^0,c
   781   0016B6  0E84               	movlw	low (main@clock+14)
   782   0016B8  6E0E               	movwf	UpdateClock@DSTstate^0,c
   783   0016BA  C074  F00F         	movff	main@TestMode,UpdateClock@TestMode
   784   0016BE  C075  F010         	movff	main@TestMode+1,UpdateClock@TestMode+1
   785   0016C2  EC23  F007         	call	_UpdateClock	;wreg free
   786   0016C6                     
   787                           ;main.c: 115:         LEDarray_disp_bin(clock.hours);
   788   0016C6  C07A  F001         	movff	main@clock+4,LEDarray_disp_bin@number
   789   0016CA  C07B  F002         	movff	main@clock+5,LEDarray_disp_bin@number+1
   790   0016CE  EC33  F00C         	call	_LEDarray_disp_bin	;wreg free
   791   0016D2                     
   792                           ;main.c: 119:         LCD_setline(1);
   793   0016D2  0E01               	movlw	1
   794   0016D4  ECD5  F00E         	call	_LCD_setline
   795   0016D8                     
   796                           ;main.c: 121:         sprintf(buf, "Time:%02d:%02d:%02d D%01d",clock.hours, clock.minute
      +                          s, clock.seconds, clock.DoW);
   797   0016D8  0E60               	movlw	low main@buf
   798   0016DA  6E2F               	movwf	sprintf@s^0,c
   799   0016DC  0E01               	movlw	low STR_1
   800   0016DE  6E30               	movwf	sprintf@fmt^0,c
   801   0016E0  C07A  F031         	movff	main@clock+4,?_sprintf+2
   802   0016E4  C07B  F032         	movff	main@clock+5,?_sprintf+3
   803   0016E8  C078  F033         	movff	main@clock+2,?_sprintf+4
   804   0016EC  C079  F034         	movff	main@clock+3,?_sprintf+5
   805   0016F0  C076  F035         	movff	main@clock,?_sprintf+6
   806   0016F4  C077  F036         	movff	main@clock+1,?_sprintf+7
   807   0016F8  C07E  F037         	movff	main@clock+8,?_sprintf+8
   808   0016FC  C07F  F038         	movff	main@clock+9,?_sprintf+9
   809   001700  ECF2  F00E         	call	_sprintf	;wreg free
   810   001704                     
   811                           ;main.c: 122:         LCD_sendstring(buf);
   812   001704  0E60               	movlw	low main@buf
   813   001706  6E04               	movwf	LCD_sendstring@string^0,c
   814   001708  EC26  F00F         	call	_LCD_sendstring	;wreg free
   815   00170C                     
   816                           ;main.c: 123:         LCD_setline(2);
   817   00170C  0E02               	movlw	2
   818   00170E  ECD5  F00E         	call	_LCD_setline
   819   001712                     
   820                           ;main.c: 125:         sprintf(buf, "Date:%02d/%02d/%04d",clock.days, clock.months, clock
      +                          .years);
   821   001712  0E60               	movlw	low main@buf
   822   001714  6E2F               	movwf	sprintf@s^0,c
   823   001716  0E30               	movlw	low STR_2
   824   001718  6E30               	movwf	sprintf@fmt^0,c
   825   00171A  C07C  F031         	movff	main@clock+6,?_sprintf+2
   826   00171E  C07D  F032         	movff	main@clock+7,?_sprintf+3
   827   001722  C080  F033         	movff	main@clock+10,?_sprintf+4
   828   001726  C081  F034         	movff	main@clock+11,?_sprintf+5
   829   00172A  C082  F035         	movff	main@clock+12,?_sprintf+6
   830   00172E  C083  F036         	movff	main@clock+13,?_sprintf+7
   831   001732  ECF2  F00E         	call	_sprintf	;wreg free
   832   001736                     
   833                           ;main.c: 126:         LCD_sendstring(buf);
   834   001736  0E60               	movlw	low main@buf
   835   001738  6E04               	movwf	LCD_sendstring@string^0,c
   836   00173A  EC26  F00F         	call	_LCD_sendstring	;wreg free
   837   00173E  EF3F  F00B         	goto	l2395
   838   001742  EF18  F000         	goto	start
   839   001746                     __end_of_main:
   840                           	callstack 0
   841                           
   842 ;; *************** function _sprintf *****************
   843 ;; Defined at:
   844 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\nf_sprintf.c"
   845 ;; Parameters:    Size  Location     Type
   846 ;;  s               1   46[COMRAM] PTR unsigned char 
   847 ;;		 -> main@buf(20), 
   848 ;;  fmt             1   47[COMRAM] PTR const unsigned char 
   849 ;;		 -> STR_3(21), STR_2(20), STR_1(26), 
   850 ;; Auto vars:     Size  Location     Type
   851 ;;  f              12   57[COMRAM] struct _IO_FILE
   852 ;;  ret             2    0        int 
   853 ;;  ap              1   56[COMRAM] PTR void [1]
   854 ;;		 -> ?_sprintf(2), 
   855 ;; Return value:  Size  Location     Type
   856 ;;                  2   46[COMRAM] int 
   857 ;; Registers used:
   858 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   859 ;; Tracked objects:
   860 ;;		On entry : 0/0
   861 ;;		On exit  : 0/0
   862 ;;		Unchanged: 0/0
   863 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   864 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   865 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   866 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   867 ;;      Totals:        23       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   868 ;;Total ram usage:       23 bytes
   869 ;; Hardware stack levels used: 1
   870 ;; Hardware stack levels required when called: 8
   871 ;; This function calls:
   872 ;;		_vfprintf
   873 ;; This function is called by:
   874 ;;		_main
   875 ;;		_ADC2String
   876 ;; This function uses a non-reentrant model
   877 ;;
   878                           
   879                           	psect	text1
   880   001DE4                     __ptext1:
   881                           	callstack 0
   882   001DE4                     _sprintf:
   883                           	callstack 22
   884   001DE4  0E31               	movlw	low (?_sprintf+2)
   885   001DE6  6E39               	movwf	sprintf@ap^0,c
   886   001DE8  C02F  F03A         	movff	sprintf@s,sprintf@f
   887   001DEC  0E00               	movlw	0
   888   001DEE  6E3E               	movwf	(sprintf@f+4)^0,c
   889   001DF0  0E00               	movlw	0
   890   001DF2  6E3D               	movwf	(sprintf@f+3)^0,c
   891   001DF4  0E00               	movlw	0
   892   001DF6  6E45               	movwf	(sprintf@f+11)^0,c
   893   001DF8  0E00               	movlw	0
   894   001DFA  6E44               	movwf	(sprintf@f+10)^0,c
   895   001DFC  0E3A               	movlw	low sprintf@f
   896   001DFE  6E2B               	movwf	vfprintf@fp^0,c
   897   001E00  C030  F02C         	movff	sprintf@fmt,vfprintf@fmt
   898   001E04  0E39               	movlw	low sprintf@ap
   899   001E06  6E2D               	movwf	vfprintf@ap^0,c
   900   001E08  EC76  F00E         	call	_vfprintf	;wreg free
   901   001E0C  502F               	movf	sprintf@s^0,w,c
   902   001E0E  243D               	addwf	(sprintf@f+3)^0,w,c
   903   001E10  6ED9               	movwf	fsr2l,c
   904   001E12  6ADA               	clrf	fsr2h,c
   905   001E14  6ADF               	clrf	indf2,c
   906   001E16  0012               	return		;funcret
   907   001E18                     __end_of_sprintf:
   908                           	callstack 0
   909                           
   910 ;; *************** function _vfprintf *****************
   911 ;; Defined at:
   912 ;;		line 1817 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
   913 ;; Parameters:    Size  Location     Type
   914 ;;  fp              1   42[COMRAM] PTR struct _IO_FILE
   915 ;;		 -> sprintf@f(12), 
   916 ;;  fmt             1   43[COMRAM] PTR const unsigned char 
   917 ;;		 -> STR_3(21), STR_2(20), STR_1(26), 
   918 ;;  ap              1   44[COMRAM] PTR PTR void 
   919 ;;		 -> sprintf@ap(1), 
   920 ;; Auto vars:     Size  Location     Type
   921 ;;  cfmt            1   45[COMRAM] PTR unsigned char 
   922 ;;		 -> STR_3(21), STR_2(20), STR_1(26), 
   923 ;; Return value:  Size  Location     Type
   924 ;;                  2   42[COMRAM] int 
   925 ;; Registers used:
   926 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   927 ;; Tracked objects:
   928 ;;		On entry : 0/0
   929 ;;		On exit  : 0/0
   930 ;;		Unchanged: 0/0
   931 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   932 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   933 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   934 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   935 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   936 ;;Total ram usage:        4 bytes
   937 ;; Hardware stack levels used: 1
   938 ;; Hardware stack levels required when called: 7
   939 ;; This function calls:
   940 ;;		_vfpfcnvrt
   941 ;; This function is called by:
   942 ;;		_sprintf
   943 ;; This function uses a non-reentrant model
   944 ;;
   945                           
   946                           	psect	text2
   947   001CEC                     __ptext2:
   948                           	callstack 0
   949   001CEC                     _vfprintf:
   950                           	callstack 22
   951   001CEC                     
   952                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1817: int vfprint
      +                          f(FILE *fp, const char *fmt, va_list ap);C:\Program Files\Microchip\xc8\v2.45\pic\source
      +                          s\c99\common\doprnt.c: 1818: {;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\comm
      +                          on\doprnt.c: 1820:     char *cfmt;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\
      +                          common\doprnt.c: 1822:     cfmt = (char *)fmt;
   953   001CEC  C02C  F02E         	movff	vfprintf@fmt,vfprintf@cfmt
   954                           
   955                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1826:     while (
      +                          *cfmt) {
   956   001CF0  EF82  F00E         	goto	l2151
   957   001CF4                     l2149:
   958                           
   959                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1830:    vfpfcnvr
      +                          t(fp, &cfmt, ap);
   960   001CF4  C02B  F020         	movff	vfprintf@fp,vfpfcnvrt@fp
   961   001CF8  0E2E               	movlw	low vfprintf@cfmt
   962   001CFA  6E21               	movwf	vfpfcnvrt@fmt^0,c
   963   001CFC  C02D  F022         	movff	vfprintf@ap,vfpfcnvrt@ap
   964   001D00  EC8B  F009         	call	_vfpfcnvrt	;wreg free
   965   001D04                     l2151:
   966                           
   967                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1826:     while (
      +                          *cfmt) {
   968   001D04  C02E  FFF6         	movff	vfprintf@cfmt,tblptrl
   969   001D08                     	if	1	;There is more than 1 active tblptr byte
   970   001D08  0E0E               	movlw	high __smallconst
   971   001D0A  6EF7               	movwf	tblptrh,c
   972   001D0C                     	endif
   973   001D0C                     	if	0	;tblptru may be non-zero
   974   001D0C                     	endif
   975   001D0C                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
   976   001D0C  0E00               	movlw	low (__smallconst shr (0+16))
   977   001D0E  6EF8               	movwf	tblptru,c
   978   001D10                     	endif
   979   001D10  0008               	tblrd		*
   980   001D12  50F5               	movf	tablat,w,c
   981   001D14  0900               	iorlw	0
   982   001D16  A4D8               	btfss	status,2,c
   983   001D18  EF90  F00E         	goto	u1731
   984   001D1C  EF92  F00E         	goto	u1730
   985   001D20                     u1731:
   986   001D20  EF7A  F00E         	goto	l2149
   987   001D24                     u1730:
   988   001D24                     
   989                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1835:  return 0;
   990   001D24  0E00               	movlw	0
   991   001D26  6E2C               	movwf	(?_vfprintf+1)^0,c
   992   001D28  0E00               	movlw	0
   993   001D2A  6E2B               	movwf	?_vfprintf^0,c
   994   001D2C  0012               	return		;funcret
   995   001D2E                     __end_of_vfprintf:
   996                           	callstack 0
   997                           
   998 ;; *************** function _vfpfcnvrt *****************
   999 ;; Defined at:
  1000 ;;		line 1177 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
  1001 ;; Parameters:    Size  Location     Type
  1002 ;;  fp              1   31[COMRAM] PTR struct _IO_FILE
  1003 ;;		 -> sprintf@f(12), 
  1004 ;;  fmt             1   32[COMRAM] PTR PTR unsigned char 
  1005 ;;		 -> vfprintf@cfmt(1), 
  1006 ;;  ap              1   33[COMRAM] PTR PTR void 
  1007 ;;		 -> sprintf@ap(1), 
  1008 ;; Auto vars:     Size  Location     Type
  1009 ;;  convarg         4   36[COMRAM] struct .
  1010 ;;  cp              1   41[COMRAM] PTR unsigned char 
  1011 ;;		 -> STR_3(21), STR_2(20), STR_1(26), 
  1012 ;;  done            1   40[COMRAM] _Bool 
  1013 ;;  c               1    0        unsigned char 
  1014 ;; Return value:  Size  Location     Type
  1015 ;;                  1    wreg      void 
  1016 ;; Registers used:
  1017 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1018 ;; Tracked objects:
  1019 ;;		On entry : 0/0
  1020 ;;		On exit  : 0/0
  1021 ;;		Unchanged: 0/0
  1022 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1023 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1024 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1025 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1026 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1027 ;;Total ram usage:       11 bytes
  1028 ;; Hardware stack levels used: 1
  1029 ;; Hardware stack levels required when called: 6
  1030 ;; This function calls:
  1031 ;;		_dtoa
  1032 ;;		_fputc
  1033 ;;		_read_prec_or_width
  1034 ;; This function is called by:
  1035 ;;		_vfprintf
  1036 ;; This function uses a non-reentrant model
  1037 ;;
  1038                           
  1039                           	psect	text3
  1040   001316                     __ptext3:
  1041                           	callstack 0
  1042   001316                     _vfpfcnvrt:
  1043                           	callstack 22
  1044   001316                     
  1045                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1177: vfpfcnvrt(F
      +                          ILE *fp, char *fmt[], va_list ap);C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\c
      +                          ommon\doprnt.c: 1178: {;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\dopr
      +                          nt.c: 1179:     char c, *cp;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common
      +                          \doprnt.c: 1180:     _Bool done;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\co
      +                          mmon\doprnt.c: 1188:  } convarg;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\co
      +                          mmon\doprnt.c: 1201:     if ((*fmt)[0] == '%') {
  1046   001316  5021               	movf	vfpfcnvrt@fmt^0,w,c
  1047   001318  6ED9               	movwf	fsr2l,c
  1048   00131A  6ADA               	clrf	fsr2h,c
  1049   00131C  CFDF FFF6          	movff	indf2,tblptrl
  1050   001320                     	if	1	;There is more than 1 active tblptr byte
  1051   001320  0E0E               	movlw	high __smallconst
  1052   001322  6EF7               	movwf	tblptrh,c
  1053   001324                     	endif
  1054   001324                     	if	0	;tblptru may be non-zero
  1055   001324                     	endif
  1056   001324                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1057   001324  0E00               	movlw	low (__smallconst shr (0+16))
  1058   001326  6EF8               	movwf	tblptru,c
  1059   001328                     	endif
  1060   001328  0008               	tblrd		*
  1061   00132A  50F5               	movf	tablat,w,c
  1062   00132C  0A25               	xorlw	37
  1063   00132E  A4D8               	btfss	status,2,c
  1064   001330  EF9C  F009         	goto	u1671
  1065   001334  EF9E  F009         	goto	u1670
  1066   001338                     u1671:
  1067   001338  EF38  F00A         	goto	l2129
  1068   00133C                     u1670:
  1069   00133C                     
  1070                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1202:         ++*
      +                          fmt;
  1071   00133C  5021               	movf	vfpfcnvrt@fmt^0,w,c
  1072   00133E  6ED9               	movwf	fsr2l,c
  1073   001340  6ADA               	clrf	fsr2h,c
  1074   001342  2ADF               	incf	indf2,f,c
  1075   001344                     
  1076                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1204:         fla
      +                          gs = width = 0;
  1077   001344  0E00               	movlw	0
  1078   001346  6E47               	movwf	(_width+1)^0,c
  1079   001348  0E00               	movlw	0
  1080   00134A  6E46               	movwf	_width^0,c
  1081   00134C  C046  F04A         	movff	_width,_flags
  1082   001350                     
  1083                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1205:         pre
      +                          c = -1;
  1084   001350  6848               	setf	_prec^0,c
  1085   001352  6849               	setf	(_prec+1)^0,c
  1086   001354                     
  1087                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1209:         don
      +                          e = 0;
  1088   001354  0E00               	movlw	0
  1089   001356  6E29               	movwf	vfpfcnvrt@done^0,c
  1090                           
  1091                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1210:         whi
      +                          le (!done) {
  1092   001358  EFD4  F009         	goto	l2103
  1093   00135C                     l2093:
  1094                           
  1095                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1220:            
      +                                   flags |= (1 << 1);
  1096   00135C  824A               	bsf	_flags^0,1,c
  1097   00135E                     
  1098                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1221:            
      +                                   ++*fmt;
  1099   00135E  5021               	movf	vfpfcnvrt@fmt^0,w,c
  1100   001360  6ED9               	movwf	fsr2l,c
  1101   001362  6ADA               	clrf	fsr2h,c
  1102   001364  2ADF               	incf	indf2,f,c
  1103                           
  1104                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1222:            
      +                                   break;
  1105   001366  EFD4  F009         	goto	l2103
  1106   00136A                     l2097:
  1107                           
  1108                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1243:            
      +                                   done = 1;
  1109   00136A  0E01               	movlw	1
  1110   00136C  6E29               	movwf	vfpfcnvrt@done^0,c
  1111                           
  1112                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1244:            
      +                                   break;
  1113   00136E  EFD4  F009         	goto	l2103
  1114   001372                     l2101:
  1115   001372  5021               	movf	vfpfcnvrt@fmt^0,w,c
  1116   001374  6ED9               	movwf	fsr2l,c
  1117   001376  6ADA               	clrf	fsr2h,c
  1118   001378  CFDF FFF6          	movff	indf2,tblptrl
  1119   00137C                     	if	1	;There is more than 1 active tblptr byte
  1120   00137C  0E0E               	movlw	high __smallconst
  1121   00137E  6EF7               	movwf	tblptrh,c
  1122   001380                     	endif
  1123   001380                     	if	0	;tblptru may be non-zero
  1124   001380                     	endif
  1125   001380                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1126   001380  0E00               	movlw	low (__smallconst shr (0+16))
  1127   001382  6EF8               	movwf	tblptru,c
  1128   001384                     	endif
  1129   001384  0008               	tblrd		*
  1130   001386  50F5               	movf	tablat,w,c
  1131   001388  6E23               	movwf	??_vfpfcnvrt^0,c
  1132   00138A  6A24               	clrf	(??_vfpfcnvrt+1)^0,c
  1133                           
  1134                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1135                           ; Switch size 1, requested type "simple"
  1136                           ; Number of cases is 1, Range of values is 0 to 0
  1137                           ; switch strategies available:
  1138                           ; Name         Instructions Cycles
  1139                           ; simple_byte            4     3 (average)
  1140                           ;	Chosen strategy is simple_byte
  1141   00138C  5024               	movf	(??_vfpfcnvrt+1)^0,w,c
  1142   00138E  0A00               	xorlw	0	; case 0
  1143   001390  B4D8               	btfsc	status,2,c
  1144   001392  EFCD  F009         	goto	l2579
  1145   001396  EFB5  F009         	goto	l2097
  1146   00139A                     l2579:
  1147                           
  1148                           ; Switch size 1, requested type "simple"
  1149                           ; Number of cases is 1, Range of values is 48 to 48
  1150                           ; switch strategies available:
  1151                           ; Name         Instructions Cycles
  1152                           ; simple_byte            4     3 (average)
  1153                           ;	Chosen strategy is simple_byte
  1154   00139A  5023               	movf	??_vfpfcnvrt^0,w,c
  1155   00139C  0A30               	xorlw	48	; case 48
  1156   00139E  B4D8               	btfsc	status,2,c
  1157   0013A0  EFAE  F009         	goto	l2093
  1158   0013A4  EFB5  F009         	goto	l2097
  1159   0013A8                     l2103:
  1160                           
  1161                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1210:         whi
      +                          le (!done) {
  1162   0013A8  5029               	movf	vfpfcnvrt@done^0,w,c
  1163   0013AA  B4D8               	btfsc	status,2,c
  1164   0013AC  EFDA  F009         	goto	u1681
  1165   0013B0  EFDC  F009         	goto	u1680
  1166   0013B4                     u1681:
  1167   0013B4  EFB9  F009         	goto	l2101
  1168   0013B8                     u1680:
  1169   0013B8                     
  1170                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1256:   width = r
      +                          ead_prec_or_width(fmt, ap);
  1171   0013B8  C021  F007         	movff	vfpfcnvrt@fmt,read_prec_or_width@fmt
  1172   0013BC  C022  F008         	movff	vfpfcnvrt@ap,read_prec_or_width@ap
  1173   0013C0  EC51  F00D         	call	_read_prec_or_width	;wreg free
  1174   0013C4  C007  F046         	movff	?_read_prec_or_width,_width
  1175   0013C8  C008  F047         	movff	?_read_prec_or_width+1,_width+1
  1176   0013CC                     
  1177                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1257:   if (width
      +                           < 0) {
  1178   0013CC  BE47               	btfsc	(_width+1)^0,7,c
  1179   0013CE  EFED  F009         	goto	u1690
  1180   0013D2  EFEB  F009         	goto	u1691
  1181   0013D6                     u1691:
  1182   0013D6  EFF2  F009         	goto	l2111
  1183   0013DA                     u1690:
  1184   0013DA                     
  1185                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1258:    flags |=
      +                           (1 << 0);
  1186   0013DA  804A               	bsf	_flags^0,0,c
  1187                           
  1188                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1259:    width = 
      +                          -width;
  1189   0013DC  6C46               	negf	_width^0,c
  1190   0013DE  1E47               	comf	(_width+1)^0,f,c
  1191   0013E0  B0D8               	btfsc	status,0,c
  1192   0013E2  2A47               	incf	(_width+1)^0,f,c
  1193   0013E4                     l2111:
  1194                           
  1195                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1291:   cp = *fmt
      +                          ;
  1196   0013E4  5021               	movf	vfpfcnvrt@fmt^0,w,c
  1197   0013E6  6ED9               	movwf	fsr2l,c
  1198   0013E8  6ADA               	clrf	fsr2h,c
  1199   0013EA  50DF               	movf	indf2,w,c
  1200   0013EC  6E2A               	movwf	vfpfcnvrt@cp^0,c
  1201   0013EE                     
  1202                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1361:   if (*cp =
      +                          = 'd' || *cp == 'i') {
  1203   0013EE  C02A  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  1204   0013F2                     	if	1	;There is more than 1 active tblptr byte
  1205   0013F2  0E0E               	movlw	high __smallconst
  1206   0013F4  6EF7               	movwf	tblptrh,c
  1207   0013F6                     	endif
  1208   0013F6                     	if	0	;tblptru may be non-zero
  1209   0013F6                     	endif
  1210   0013F6                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1211   0013F6  0E00               	movlw	low (__smallconst shr (0+16))
  1212   0013F8  6EF8               	movwf	tblptru,c
  1213   0013FA                     	endif
  1214   0013FA  0008               	tblrd		*
  1215   0013FC  50F5               	movf	tablat,w,c
  1216   0013FE  0A64               	xorlw	100
  1217   001400  B4D8               	btfsc	status,2,c
  1218   001402  EF05  F00A         	goto	u1701
  1219   001406  EF07  F00A         	goto	u1700
  1220   00140A                     u1701:
  1221   00140A  EF17  F00A         	goto	l2117
  1222   00140E                     u1700:
  1223   00140E  C02A  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  1224   001412                     	if	1	;There is more than 1 active tblptr byte
  1225   001412  0E0E               	movlw	high __smallconst
  1226   001414  6EF7               	movwf	tblptrh,c
  1227   001416                     	endif
  1228   001416                     	if	0	;tblptru may be non-zero
  1229   001416                     	endif
  1230   001416                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1231   001416  0E00               	movlw	low (__smallconst shr (0+16))
  1232   001418  6EF8               	movwf	tblptru,c
  1233   00141A                     	endif
  1234   00141A  0008               	tblrd		*
  1235   00141C  50F5               	movf	tablat,w,c
  1236   00141E  0A69               	xorlw	105
  1237   001420  A4D8               	btfss	status,2,c
  1238   001422  EF15  F00A         	goto	u1711
  1239   001426  EF17  F00A         	goto	u1710
  1240   00142A                     u1711:
  1241   00142A  EF32  F00A         	goto	l2125
  1242   00142E                     u1710:
  1243   00142E                     l2117:
  1244                           
  1245                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1404:    convarg.
      +                          sint = (vfpf_sint_t)(int)(*(int *)__va_arg(*(int **)ap, (int)0));
  1246   00142E  5022               	movf	vfpfcnvrt@ap^0,w,c
  1247   001430  6ED9               	movwf	fsr2l,c
  1248   001432  6ADA               	clrf	fsr2h,c
  1249   001434  0E02               	movlw	2
  1250   001436  26DF               	addwf	indf2,f,c
  1251   001438  5CDF               	subwf	indf2,w,c
  1252   00143A  6ED9               	movwf	fsr2l,c
  1253   00143C  6ADA               	clrf	fsr2h,c
  1254   00143E  CFDE F025          	movff	postinc2,vfpfcnvrt@convarg
  1255   001442  CFDE F026          	movff	postinc2,vfpfcnvrt@convarg+1
  1256   001446                     
  1257                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1406:    *fmt = c
      +                          p+1;
  1258   001446  5021               	movf	vfpfcnvrt@fmt^0,w,c
  1259   001448  6ED9               	movwf	fsr2l,c
  1260   00144A  6ADA               	clrf	fsr2h,c
  1261   00144C  282A               	incf	vfpfcnvrt@cp^0,w,c
  1262   00144E  6EDF               	movwf	indf2,c
  1263   001450                     
  1264                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1432:    return (
      +                          void) dtoa(fp, convarg.sint);;	Return value of _vfpfcnvrt is never used
  1265   001450  C020  F015         	movff	vfpfcnvrt@fp,dtoa@fp
  1266   001454  C025  F016         	movff	vfpfcnvrt@convarg,dtoa@d
  1267   001458  C026  F017         	movff	vfpfcnvrt@convarg+1,dtoa@d+1
  1268   00145C  EC4C  F00A         	call	_dtoa	;wreg free
  1269   001460  EF4B  F00A         	goto	l1049
  1270   001464                     l2125:
  1271                           
  1272                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1806:         ++*
      +                          fmt;
  1273   001464  5021               	movf	vfpfcnvrt@fmt^0,w,c
  1274   001466  6ED9               	movwf	fsr2l,c
  1275   001468  6ADA               	clrf	fsr2h,c
  1276   00146A  2ADF               	incf	indf2,f,c
  1277   00146C  EF4B  F00A         	goto	l1049
  1278   001470                     l2129:
  1279                           
  1280                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1811:     fputc((
      +                          int)(*fmt)[0], fp);
  1281   001470  5021               	movf	vfpfcnvrt@fmt^0,w,c
  1282   001472  6ED9               	movwf	fsr2l,c
  1283   001474  6ADA               	clrf	fsr2h,c
  1284   001476  CFDF FFF6          	movff	indf2,tblptrl
  1285   00147A                     	if	1	;There is more than 1 active tblptr byte
  1286   00147A  0E0E               	movlw	high __smallconst
  1287   00147C  6EF7               	movwf	tblptrh,c
  1288   00147E                     	endif
  1289   00147E                     	if	0	;tblptru may be non-zero
  1290   00147E                     	endif
  1291   00147E                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1292   00147E  0E00               	movlw	low (__smallconst shr (0+16))
  1293   001480  6EF8               	movwf	tblptru,c
  1294   001482                     	endif
  1295   001482  0008               	tblrd		*
  1296   001484  50F5               	movf	tablat,w,c
  1297   001486  6E01               	movwf	fputc@c^0,c
  1298   001488  6A02               	clrf	(fputc@c+1)^0,c
  1299   00148A  C020  F003         	movff	vfpfcnvrt@fp,fputc@fp
  1300   00148E  ECA8  F00D         	call	_fputc	;wreg free
  1301   001492  EF32  F00A         	goto	l2125
  1302   001496                     l1049:
  1303   001496  0012               	return		;funcret
  1304   001498                     __end_of_vfpfcnvrt:
  1305                           	callstack 0
  1306                           
  1307 ;; *************** function _read_prec_or_width *****************
  1308 ;; Defined at:
  1309 ;;		line 1158 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
  1310 ;; Parameters:    Size  Location     Type
  1311 ;;  fmt             1    6[COMRAM] PTR PTR const unsigned c
  1312 ;;		 -> vfprintf@cfmt(1), 
  1313 ;;  ap              1    7[COMRAM] PTR PTR void [1]
  1314 ;;		 -> sprintf@ap(1), 
  1315 ;; Auto vars:     Size  Location     Type
  1316 ;;  c               1    8[COMRAM] unsigned char 
  1317 ;;  n               2    9[COMRAM] int 
  1318 ;; Return value:  Size  Location     Type
  1319 ;;                  2    6[COMRAM] int 
  1320 ;; Registers used:
  1321 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1322 ;; Tracked objects:
  1323 ;;		On entry : 0/0
  1324 ;;		On exit  : 0/0
  1325 ;;		Unchanged: 0/0
  1326 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1327 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1328 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1329 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1330 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1331 ;;Total ram usage:        5 bytes
  1332 ;; Hardware stack levels used: 1
  1333 ;; Hardware stack levels required when called: 2
  1334 ;; This function calls:
  1335 ;;		___wmul
  1336 ;; This function is called by:
  1337 ;;		_vfpfcnvrt
  1338 ;; This function uses a non-reentrant model
  1339 ;;
  1340                           
  1341                           	psect	text4
  1342   001AA2                     __ptext4:
  1343                           	callstack 0
  1344   001AA2                     _read_prec_or_width:
  1345                           	callstack 25
  1346   001AA2                     
  1347                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1159:     int n =
      +                           0;
  1348   001AA2  0E00               	movlw	0
  1349   001AA4  6E0B               	movwf	(read_prec_or_width@n+1)^0,c
  1350   001AA6  0E00               	movlw	0
  1351   001AA8  6E0A               	movwf	read_prec_or_width@n^0,c
  1352   001AAA                     
  1353                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1160:     if ((*f
      +                          mt)[0] == '*') {
  1354   001AAA  5007               	movf	read_prec_or_width@fmt^0,w,c
  1355   001AAC  6ED9               	movwf	fsr2l,c
  1356   001AAE  6ADA               	clrf	fsr2h,c
  1357   001AB0  CFDF FFF6          	movff	indf2,tblptrl
  1358   001AB4                     	if	1	;There is more than 1 active tblptr byte
  1359   001AB4  0E0E               	movlw	high __smallconst
  1360   001AB6  6EF7               	movwf	tblptrh,c
  1361   001AB8                     	endif
  1362   001AB8                     	if	0	;tblptru may be non-zero
  1363   001AB8                     	endif
  1364   001AB8                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1365   001AB8  0E00               	movlw	low (__smallconst shr (0+16))
  1366   001ABA  6EF8               	movwf	tblptru,c
  1367   001ABC                     	endif
  1368   001ABC  0008               	tblrd		*
  1369   001ABE  50F5               	movf	tablat,w,c
  1370   001AC0  0A2A               	xorlw	42
  1371   001AC2  A4D8               	btfss	status,2,c
  1372   001AC4  EF66  F00D         	goto	u1611
  1373   001AC8  EF68  F00D         	goto	u1610
  1374   001ACC                     u1611:
  1375   001ACC  EF8E  F00D         	goto	l2061
  1376   001AD0                     u1610:
  1377   001AD0                     
  1378                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1161:         ++*
      +                          fmt;
  1379   001AD0  5007               	movf	read_prec_or_width@fmt^0,w,c
  1380   001AD2  6ED9               	movwf	fsr2l,c
  1381   001AD4  6ADA               	clrf	fsr2h,c
  1382   001AD6  2ADF               	incf	indf2,f,c
  1383   001AD8                     
  1384                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1162:         n =
      +                           (*(int *)__va_arg(*(int **)*ap, (int)0));
  1385   001AD8  5008               	movf	read_prec_or_width@ap^0,w,c
  1386   001ADA  6ED9               	movwf	fsr2l,c
  1387   001ADC  6ADA               	clrf	fsr2h,c
  1388   001ADE  0E02               	movlw	2
  1389   001AE0  26DF               	addwf	indf2,f,c
  1390   001AE2  5CDF               	subwf	indf2,w,c
  1391   001AE4  6ED9               	movwf	fsr2l,c
  1392   001AE6  6ADA               	clrf	fsr2h,c
  1393   001AE8  CFDE F00A          	movff	postinc2,read_prec_or_width@n
  1394   001AEC  CFDE F00B          	movff	postinc2,read_prec_or_width@n+1
  1395                           
  1396                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1163:     } else 
      +                          {
  1397   001AF0  EFA3  F00D         	goto	l1030
  1398   001AF4                     l2057:
  1399                           
  1400                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1166:            
      +                           n = n * 10 + c;
  1401   001AF4  C00A  F001         	movff	read_prec_or_width@n,___wmul@multiplier
  1402   001AF8  C00B  F002         	movff	read_prec_or_width@n+1,___wmul@multiplier+1
  1403   001AFC  0E00               	movlw	0
  1404   001AFE  6E04               	movwf	(___wmul@multiplicand+1)^0,c
  1405   001B00  0E0A               	movlw	10
  1406   001B02  6E03               	movwf	___wmul@multiplicand^0,c
  1407   001B04  EC3D  F00F         	call	___wmul	;wreg free
  1408   001B08  5009               	movf	read_prec_or_width@c^0,w,c
  1409   001B0A  2401               	addwf	?___wmul^0,w,c
  1410   001B0C  6E0A               	movwf	read_prec_or_width@n^0,c
  1411   001B0E  0E00               	movlw	0
  1412   001B10  2002               	addwfc	(?___wmul+1)^0,w,c
  1413   001B12  6E0B               	movwf	(read_prec_or_width@n+1)^0,c
  1414   001B14                     
  1415                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1167:            
      +                           ++*fmt;
  1416   001B14  5007               	movf	read_prec_or_width@fmt^0,w,c
  1417   001B16  6ED9               	movwf	fsr2l,c
  1418   001B18  6ADA               	clrf	fsr2h,c
  1419   001B1A  2ADF               	incf	indf2,f,c
  1420   001B1C                     l2061:
  1421                           
  1422                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1165:         whi
      +                          le ((c = ((unsigned)(*fmt)[0]) - '0') < 10) {
  1423   001B1C  5007               	movf	read_prec_or_width@fmt^0,w,c
  1424   001B1E  6ED9               	movwf	fsr2l,c
  1425   001B20  6ADA               	clrf	fsr2h,c
  1426   001B22  CFDF FFF6          	movff	indf2,tblptrl
  1427   001B26                     	if	1	;There is more than 1 active tblptr byte
  1428   001B26  0E0E               	movlw	high __smallconst
  1429   001B28  6EF7               	movwf	tblptrh,c
  1430   001B2A                     	endif
  1431   001B2A                     	if	0	;tblptru may be non-zero
  1432   001B2A                     	endif
  1433   001B2A                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1434   001B2A  0E00               	movlw	low (__smallconst shr (0+16))
  1435   001B2C  6EF8               	movwf	tblptru,c
  1436   001B2E                     	endif
  1437   001B2E  0008               	tblrd		*
  1438   001B30  50F5               	movf	tablat,w,c
  1439   001B32  0FD0               	addlw	208
  1440   001B34  6E09               	movwf	read_prec_or_width@c^0,c
  1441   001B36  0E09               	movlw	9
  1442   001B38  6409               	cpfsgt	read_prec_or_width@c^0,c
  1443   001B3A  EFA1  F00D         	goto	u1621
  1444   001B3E  EFA3  F00D         	goto	u1620
  1445   001B42                     u1621:
  1446   001B42  EF7A  F00D         	goto	l2057
  1447   001B46                     u1620:
  1448   001B46                     l1030:
  1449                           
  1450                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1170:     return 
      +                          n;
  1451   001B46  C00A  F007         	movff	read_prec_or_width@n,?_read_prec_or_width
  1452   001B4A  C00B  F008         	movff	read_prec_or_width@n+1,?_read_prec_or_width+1
  1453   001B4E  0012               	return		;funcret
  1454   001B50                     __end_of_read_prec_or_width:
  1455                           	callstack 0
  1456                           
  1457 ;; *************** function ___wmul *****************
  1458 ;; Defined at:
  1459 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\Umul16.c"
  1460 ;; Parameters:    Size  Location     Type
  1461 ;;  multiplier      2    0[COMRAM] unsigned int 
  1462 ;;  multiplicand    2    2[COMRAM] unsigned int 
  1463 ;; Auto vars:     Size  Location     Type
  1464 ;;  product         2    4[COMRAM] unsigned int 
  1465 ;; Return value:  Size  Location     Type
  1466 ;;                  2    0[COMRAM] unsigned int 
  1467 ;; Registers used:
  1468 ;;		wreg, status,2, status,0, prodl, prodh
  1469 ;; Tracked objects:
  1470 ;;		On entry : 0/0
  1471 ;;		On exit  : 0/0
  1472 ;;		Unchanged: 0/0
  1473 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1474 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1475 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1476 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1477 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1478 ;;Total ram usage:        6 bytes
  1479 ;; Hardware stack levels used: 1
  1480 ;; Hardware stack levels required when called: 1
  1481 ;; This function calls:
  1482 ;;		Nothing
  1483 ;; This function is called by:
  1484 ;;		_read_prec_or_width
  1485 ;;		_LEDarray_disp_light
  1486 ;;		_LEDarray_disp_PPM
  1487 ;;		_ADC2String
  1488 ;; This function uses a non-reentrant model
  1489 ;;
  1490                           
  1491                           	psect	text5
  1492   001E7A                     __ptext5:
  1493                           	callstack 0
  1494   001E7A                     ___wmul:
  1495                           	callstack 25
  1496   001E7A  5001               	movf	___wmul@multiplier^0,w,c
  1497   001E7C  0203               	mulwf	___wmul@multiplicand^0,c
  1498   001E7E  CFF3 F005          	movff	prodl,___wmul@product
  1499   001E82  CFF4 F006          	movff	prodh,___wmul@product+1
  1500   001E86  5001               	movf	___wmul@multiplier^0,w,c
  1501   001E88  0204               	mulwf	(___wmul@multiplicand+1)^0,c
  1502   001E8A  50F3               	movf	243,w,c
  1503   001E8C  2606               	addwf	(___wmul@product+1)^0,f,c
  1504   001E8E  5002               	movf	(___wmul@multiplier+1)^0,w,c
  1505   001E90  0203               	mulwf	___wmul@multiplicand^0,c
  1506   001E92  50F3               	movf	243,w,c
  1507   001E94  2606               	addwf	(___wmul@product+1)^0,f,c
  1508   001E96  C005  F001         	movff	___wmul@product,?___wmul
  1509   001E9A  C006  F002         	movff	___wmul@product+1,?___wmul+1
  1510   001E9E  0012               	return		;funcret
  1511   001EA0                     __end_of___wmul:
  1512                           	callstack 0
  1513                           
  1514 ;; *************** function _dtoa *****************
  1515 ;; Defined at:
  1516 ;;		line 513 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
  1517 ;; Parameters:    Size  Location     Type
  1518 ;;  fp              1   20[COMRAM] PTR struct _IO_FILE
  1519 ;;		 -> sprintf@f(12), 
  1520 ;;  d               2   21[COMRAM] int 
  1521 ;; Auto vars:     Size  Location     Type
  1522 ;;  i               2   29[COMRAM] int 
  1523 ;;  w               2   26[COMRAM] int 
  1524 ;;  s               1   28[COMRAM] unsigned char 
  1525 ;;  p               1   25[COMRAM] _Bool 
  1526 ;; Return value:  Size  Location     Type
  1527 ;;                  1    wreg      void 
  1528 ;; Registers used:
  1529 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1530 ;; Tracked objects:
  1531 ;;		On entry : 0/0
  1532 ;;		On exit  : 0/0
  1533 ;;		Unchanged: 0/0
  1534 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1535 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1536 ;;      Locals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1537 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1538 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1539 ;;Total ram usage:       11 bytes
  1540 ;; Hardware stack levels used: 1
  1541 ;; Hardware stack levels required when called: 5
  1542 ;; This function calls:
  1543 ;;		___awdiv
  1544 ;;		___awmod
  1545 ;;		_abs
  1546 ;;		_pad
  1547 ;; This function is called by:
  1548 ;;		_vfpfcnvrt
  1549 ;; This function uses a non-reentrant model
  1550 ;;
  1551                           
  1552                           	psect	text6
  1553   001498                     __ptext6:
  1554                           	callstack 0
  1555   001498                     _dtoa:
  1556                           	callstack 22
  1557   001498                     
  1558                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 513: static void 
      +                          dtoa(FILE *fp, vfpf_sint_t d);C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\commo
      +                          n\doprnt.c: 514: {;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c:
      +                           515:  char s;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 516
      +                          :     int i, w;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 52
      +                          0:  _Bool p = 1;
  1559   001498  0E01               	movlw	1
  1560   00149A  6E1A               	movwf	dtoa@p^0,c
  1561   00149C                     
  1562                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 524:     s = d < 
      +                          0 ? 1 : 0;
  1563   00149C  BE17               	btfsc	(dtoa@d+1)^0,7,c
  1564   00149E  EF53  F00A         	goto	u1511
  1565   0014A2  EF56  F00A         	goto	u1510
  1566   0014A6                     u1511:
  1567   0014A6  0E01               	movlw	1
  1568   0014A8  EF57  F00A         	goto	u1520
  1569   0014AC                     u1510:
  1570   0014AC  0E00               	movlw	0
  1571   0014AE                     u1520:
  1572   0014AE  6E1D               	movwf	dtoa@s^0,c
  1573   0014B0                     
  1574                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 535:     w = widt
      +                          h;
  1575   0014B0  C046  F01B         	movff	_width,dtoa@w
  1576   0014B4  C047  F01C         	movff	_width+1,dtoa@w+1
  1577   0014B8                     
  1578                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 536:     if (s
  1579   0014B8  501D               	movf	dtoa@s^0,w,c
  1580   0014BA  B4D8               	btfsc	status,2,c
  1581   0014BC  EF62  F00A         	goto	u1531
  1582   0014C0  EF64  F00A         	goto	u1530
  1583   0014C4                     u1531:
  1584   0014C4  EF7B  F00A         	goto	l1013
  1585   0014C8                     u1530:
  1586   0014C8                     
  1587                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 540:     ) {;C:\P
      +                          rogram Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 541:         --w;
  1588   0014C8  061B               	decf	dtoa@w^0,f,c
  1589   0014CA  A0D8               	btfss	status,0,c
  1590   0014CC  061C               	decf	(dtoa@w+1)^0,f,c
  1591   0014CE                     
  1592                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 542:   s = s ? '-
      +                          ' : '+';
  1593   0014CE  501D               	movf	dtoa@s^0,w,c
  1594   0014D0  A4D8               	btfss	status,2,c
  1595   0014D2  EF6D  F00A         	goto	u1541
  1596   0014D6  EF6F  F00A         	goto	u1540
  1597   0014DA                     u1541:
  1598   0014DA  EF75  F00A         	goto	l2013
  1599   0014DE                     u1540:
  1600   0014DE  0E00               	movlw	0
  1601   0014E0  6E19               	movwf	(_dtoa$1868+1)^0,c
  1602   0014E2  0E2B               	movlw	43
  1603   0014E4  6E18               	movwf	_dtoa$1868^0,c
  1604   0014E6  EF79  F00A         	goto	l2015
  1605   0014EA                     l2013:
  1606   0014EA  0E00               	movlw	0
  1607   0014EC  6E19               	movwf	(_dtoa$1868+1)^0,c
  1608   0014EE  0E2D               	movlw	45
  1609   0014F0  6E18               	movwf	_dtoa$1868^0,c
  1610   0014F2                     l2015:
  1611   0014F2  C018  F01D         	movff	_dtoa$1868,dtoa@s
  1612   0014F6                     l1013:
  1613                           
  1614                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 552:     i = size
      +                          of(dbuf) - 1;
  1615   0014F6  0E00               	movlw	0
  1616   0014F8  6E1F               	movwf	(dtoa@i+1)^0,c
  1617   0014FA  0E1F               	movlw	31
  1618   0014FC  6E1E               	movwf	dtoa@i^0,c
  1619   0014FE                     
  1620                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 553:     dbuf[i] 
      +                          = '\0';
  1621   0014FE  0E00               	movlw	0
  1622   001500  0100               	movlb	0	; () banked
  1623   001502  6FA5               	movwf	(_dbuf+31)& (0+255),b
  1624                           
  1625                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 554:     while (!
      +                          (i < 1) && (d != 0
  1626   001504  EFB1  F00A         	goto	l2029
  1627   001508                     l2019:
  1628                           
  1629                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 563:     )) {;C:\
      +                          Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 564:         --i;
  1630   001508  061E               	decf	dtoa@i^0,f,c
  1631   00150A  A0D8               	btfss	status,0,c
  1632   00150C  061F               	decf	(dtoa@i+1)^0,f,c
  1633   00150E                     
  1634                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 565:         dbuf
      +                          [i] = (char)((int)'0' + abs(d % 10));
  1635   00150E  501E               	movf	dtoa@i^0,w,c
  1636   001510  0F86               	addlw	low _dbuf
  1637   001512  6ED9               	movwf	fsr2l,c
  1638   001514  6ADA               	clrf	fsr2h,c
  1639   001516  C016  F001         	movff	dtoa@d,___awmod@dividend
  1640   00151A  C017  F002         	movff	dtoa@d+1,___awmod@dividend+1
  1641   00151E  0E00               	movlw	0
  1642   001520  6E04               	movwf	(___awmod@divisor+1)^0,c
  1643   001522  0E0A               	movlw	10
  1644   001524  6E03               	movwf	___awmod@divisor^0,c
  1645   001526  ECF9  F00C         	call	___awmod	;wreg free
  1646   00152A  C001  F007         	movff	?___awmod,abs@a
  1647   00152E  C002  F008         	movff	?___awmod+1,abs@a+1
  1648   001532  EC0C  F00F         	call	_abs	;wreg free
  1649   001536  5007               	movf	?_abs^0,w,c
  1650   001538  0F30               	addlw	48
  1651   00153A  6EDF               	movwf	indf2,c
  1652   00153C                     
  1653                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 569:   p = 0;
  1654   00153C  0E00               	movlw	0
  1655   00153E  6E1A               	movwf	dtoa@p^0,c
  1656   001540                     
  1657                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 571:         --w;
  1658   001540  061B               	decf	dtoa@w^0,f,c
  1659   001542  A0D8               	btfss	status,0,c
  1660   001544  061C               	decf	(dtoa@w+1)^0,f,c
  1661   001546                     
  1662                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 572:         d = 
      +                          d / 10;
  1663   001546  C016  F001         	movff	dtoa@d,___awdiv@dividend
  1664   00154A  C017  F002         	movff	dtoa@d+1,___awdiv@dividend+1
  1665   00154E  0E00               	movlw	0
  1666   001550  6E04               	movwf	(___awdiv@divisor+1)^0,c
  1667   001552  0E0A               	movlw	10
  1668   001554  6E03               	movwf	___awdiv@divisor^0,c
  1669   001556  EC97  F00C         	call	___awdiv	;wreg free
  1670   00155A  C001  F016         	movff	?___awdiv,dtoa@d
  1671   00155E  C002  F017         	movff	?___awdiv+1,dtoa@d+1
  1672   001562                     l2029:
  1673                           
  1674                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 554:     while (!
      +                          (i < 1) && (d != 0
  1675   001562  BE1F               	btfsc	(dtoa@i+1)^0,7,c
  1676   001564  EFBC  F00A         	goto	u1551
  1677   001568  501F               	movf	(dtoa@i+1)^0,w,c
  1678   00156A  E108               	bnz	u1550
  1679   00156C  041E               	decf	dtoa@i^0,w,c
  1680   00156E  A0D8               	btfss	status,0,c
  1681   001570  EFBC  F00A         	goto	u1551
  1682   001574  EFBE  F00A         	goto	u1550
  1683   001578                     u1551:
  1684   001578  EFE3  F00A         	goto	l2039
  1685   00157C                     u1550:
  1686   00157C  5016               	movf	dtoa@d^0,w,c
  1687   00157E  1017               	iorwf	(dtoa@d+1)^0,w,c
  1688   001580  A4D8               	btfss	status,2,c
  1689   001582  EFC5  F00A         	goto	u1561
  1690   001586  EFC7  F00A         	goto	u1560
  1691   00158A                     u1561:
  1692   00158A  EF84  F00A         	goto	l2019
  1693   00158E                     u1560:
  1694   00158E  501A               	movf	dtoa@p^0,w,c
  1695   001590  A4D8               	btfss	status,2,c
  1696   001592  EFCD  F00A         	goto	u1571
  1697   001596  EFCF  F00A         	goto	u1570
  1698   00159A                     u1571:
  1699   00159A  EF84  F00A         	goto	l2019
  1700   00159E                     u1570:
  1701   00159E  BE1C               	btfsc	(dtoa@w+1)^0,7,c
  1702   0015A0  EFDA  F00A         	goto	u1581
  1703   0015A4  501C               	movf	(dtoa@w+1)^0,w,c
  1704   0015A6  E108               	bnz	u1580
  1705   0015A8  041B               	decf	dtoa@w^0,w,c
  1706   0015AA  A0D8               	btfss	status,0,c
  1707   0015AC  EFDA  F00A         	goto	u1581
  1708   0015B0  EFDC  F00A         	goto	u1580
  1709   0015B4                     u1581:
  1710   0015B4  EFE3  F00A         	goto	l2039
  1711   0015B8                     u1580:
  1712   0015B8  B24A               	btfsc	_flags^0,1,c
  1713   0015BA  EFE1  F00A         	goto	u1591
  1714   0015BE  EFE3  F00A         	goto	u1590
  1715   0015C2                     u1591:
  1716   0015C2  EF84  F00A         	goto	l2019
  1717   0015C6                     u1590:
  1718   0015C6                     l2039:
  1719                           
  1720                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 576:     if (s !=
      +                           0) {
  1721   0015C6  501D               	movf	dtoa@s^0,w,c
  1722   0015C8  B4D8               	btfsc	status,2,c
  1723   0015CA  EFE9  F00A         	goto	u1601
  1724   0015CE  EFEB  F00A         	goto	u1600
  1725   0015D2                     u1601:
  1726   0015D2  EFF4  F00A         	goto	l2045
  1727   0015D6                     u1600:
  1728   0015D6                     
  1729                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 577:         --i;
  1730   0015D6  061E               	decf	dtoa@i^0,f,c
  1731   0015D8  A0D8               	btfss	status,0,c
  1732   0015DA  061F               	decf	(dtoa@i+1)^0,f,c
  1733   0015DC                     
  1734                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 578:         dbuf
      +                          [i] = s;
  1735   0015DC  501E               	movf	dtoa@i^0,w,c
  1736   0015DE  0F86               	addlw	low _dbuf
  1737   0015E0  6ED9               	movwf	fsr2l,c
  1738   0015E2  6ADA               	clrf	fsr2h,c
  1739   0015E4  C01D  FFDF         	movff	dtoa@s,indf2
  1740   0015E8                     l2045:
  1741                           
  1742                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 582:     return (
      +                          void) pad(fp, &dbuf[i], w);
  1743   0015E8  C015  F00E         	movff	dtoa@fp,pad@fp
  1744   0015EC  501E               	movf	dtoa@i^0,w,c
  1745   0015EE  0F86               	addlw	low _dbuf
  1746   0015F0  6E0F               	movwf	pad@buf^0,c
  1747   0015F2  C01B  F010         	movff	dtoa@w,pad@p
  1748   0015F6  C01C  F011         	movff	dtoa@w+1,pad@p+1
  1749   0015FA  ECFD  F00D         	call	_pad	;wreg free
  1750   0015FE  0012               	return		;funcret
  1751   001600                     __end_of_dtoa:
  1752                           	callstack 0
  1753                           
  1754 ;; *************** function _pad *****************
  1755 ;; Defined at:
  1756 ;;		line 193 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
  1757 ;; Parameters:    Size  Location     Type
  1758 ;;  fp              1   13[COMRAM] PTR struct _IO_FILE
  1759 ;;		 -> sprintf@f(12), 
  1760 ;;  buf             1   14[COMRAM] PTR unsigned char 
  1761 ;;		 -> dbuf(32), 
  1762 ;;  p               2   15[COMRAM] int 
  1763 ;; Auto vars:     Size  Location     Type
  1764 ;;  i               2   18[COMRAM] int 
  1765 ;; Return value:  Size  Location     Type
  1766 ;;                  1    wreg      void 
  1767 ;; Registers used:
  1768 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1769 ;; Tracked objects:
  1770 ;;		On entry : 0/0
  1771 ;;		On exit  : 0/0
  1772 ;;		Unchanged: 0/0
  1773 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1774 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1775 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1776 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1777 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1778 ;;Total ram usage:        7 bytes
  1779 ;; Hardware stack levels used: 1
  1780 ;; Hardware stack levels required when called: 4
  1781 ;; This function calls:
  1782 ;;		_fputc
  1783 ;;		_fputs
  1784 ;; This function is called by:
  1785 ;;		_dtoa
  1786 ;; This function uses a non-reentrant model
  1787 ;;
  1788                           
  1789                           	psect	text7
  1790   001BFA                     __ptext7:
  1791                           	callstack 0
  1792   001BFA                     _pad:
  1793                           	callstack 22
  1794   001BFA                     
  1795                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 193: static void 
      +                          pad(FILE *fp, char *buf, int p);C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\com
      +                          mon\doprnt.c: 194: {;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.
      +                          c: 195:     int i;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c:
      +                           199:     if (flags & (1 << 0)) {
  1796   001BFA  A04A               	btfss	_flags^0,0,c
  1797   001BFC  EF02  F00E         	goto	u1461
  1798   001C00  EF04  F00E         	goto	u1460
  1799   001C04                     u1461:
  1800   001C04  EF0A  F00E         	goto	l1977
  1801   001C08                     u1460:
  1802   001C08                     
  1803                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 200:         fput
      +                          s((const char *)buf, fp);
  1804   001C08  C00F  F009         	movff	pad@buf,fputs@s
  1805   001C0C  C00E  F00A         	movff	pad@fp,fputs@fp
  1806   001C10  ECB7  F00E         	call	_fputs	;wreg free
  1807   001C14                     l1977:
  1808                           
  1809                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 205:  if (p < 0) 
      +                          {
  1810   001C14  BE11               	btfsc	(pad@p+1)^0,7,c
  1811   001C16  EF11  F00E         	goto	u1470
  1812   001C1A  EF0F  F00E         	goto	u1471
  1813   001C1E                     u1471:
  1814   001C1E  EF15  F00E         	goto	l1005
  1815   001C22                     u1470:
  1816   001C22                     
  1817                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 206:   p = 0;
  1818   001C22  0E00               	movlw	0
  1819   001C24  6E11               	movwf	(pad@p+1)^0,c
  1820   001C26  0E00               	movlw	0
  1821   001C28  6E10               	movwf	pad@p^0,c
  1822   001C2A                     l1005:
  1823                           
  1824                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 208:     i = 0;
  1825   001C2A  0E00               	movlw	0
  1826   001C2C  6E14               	movwf	(pad@i+1)^0,c
  1827   001C2E  0E00               	movlw	0
  1828   001C30  6E13               	movwf	pad@i^0,c
  1829                           
  1830                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 209:     while (i
      +                           < p) {
  1831   001C32  EF25  F00E         	goto	l1985
  1832   001C36                     l1981:
  1833                           
  1834                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 210:         fput
      +                          c(' ', fp);
  1835   001C36  0E00               	movlw	0
  1836   001C38  6E02               	movwf	(fputc@c+1)^0,c
  1837   001C3A  0E20               	movlw	32
  1838   001C3C  6E01               	movwf	fputc@c^0,c
  1839   001C3E  C00E  F003         	movff	pad@fp,fputc@fp
  1840   001C42  ECA8  F00D         	call	_fputc	;wreg free
  1841   001C46                     
  1842                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 211:         ++i;
  1843   001C46  4A13               	infsnz	pad@i^0,f,c
  1844   001C48  2A14               	incf	(pad@i+1)^0,f,c
  1845   001C4A                     l1985:
  1846                           
  1847                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 209:     while (i
      +                           < p) {
  1848   001C4A  5010               	movf	pad@p^0,w,c
  1849   001C4C  5C13               	subwf	pad@i^0,w,c
  1850   001C4E  5014               	movf	(pad@i+1)^0,w,c
  1851   001C50  0A80               	xorlw	128
  1852   001C52  6E12               	movwf	??_pad^0,c
  1853   001C54  5011               	movf	(pad@p+1)^0,w,c
  1854   001C56  0A80               	xorlw	128
  1855   001C58  5812               	subwfb	??_pad^0,w,c
  1856   001C5A  A0D8               	btfss	status,0,c
  1857   001C5C  EF32  F00E         	goto	u1481
  1858   001C60  EF34  F00E         	goto	u1480
  1859   001C64                     u1481:
  1860   001C64  EF1B  F00E         	goto	l1981
  1861   001C68                     u1480:
  1862   001C68                     
  1863                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 216:     if (!(fl
      +                          ags & (1 << 0))) {
  1864   001C68  B04A               	btfsc	_flags^0,0,c
  1865   001C6A  EF39  F00E         	goto	u1491
  1866   001C6E  EF3B  F00E         	goto	u1490
  1867   001C72                     u1491:
  1868   001C72  EF41  F00E         	goto	l1010
  1869   001C76                     u1490:
  1870   001C76                     
  1871                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 218:         fput
      +                          s((const char *)buf, fp);
  1872   001C76  C00F  F009         	movff	pad@buf,fputs@s
  1873   001C7A  C00E  F00A         	movff	pad@fp,fputs@fp
  1874   001C7E  ECB7  F00E         	call	_fputs	;wreg free
  1875   001C82                     l1010:
  1876   001C82  0012               	return		;funcret
  1877   001C84                     __end_of_pad:
  1878                           	callstack 0
  1879                           
  1880 ;; *************** function _fputs *****************
  1881 ;; Defined at:
  1882 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\nf_fputs.c"
  1883 ;; Parameters:    Size  Location     Type
  1884 ;;  s               1    8[COMRAM] PTR const unsigned char 
  1885 ;;		 -> dbuf(32), 
  1886 ;;  fp              1    9[COMRAM] PTR struct _IO_FILE
  1887 ;;		 -> sprintf@f(12), 
  1888 ;; Auto vars:     Size  Location     Type
  1889 ;;  i               2   11[COMRAM] int 
  1890 ;;  c               1   10[COMRAM] unsigned char 
  1891 ;; Return value:  Size  Location     Type
  1892 ;;                  2    8[COMRAM] int 
  1893 ;; Registers used:
  1894 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1895 ;; Tracked objects:
  1896 ;;		On entry : 0/0
  1897 ;;		On exit  : 0/0
  1898 ;;		Unchanged: 0/0
  1899 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1900 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1901 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1902 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1903 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1904 ;;Total ram usage:        5 bytes
  1905 ;; Hardware stack levels used: 1
  1906 ;; Hardware stack levels required when called: 3
  1907 ;; This function calls:
  1908 ;;		_fputc
  1909 ;; This function is called by:
  1910 ;;		_pad
  1911 ;; This function uses a non-reentrant model
  1912 ;;
  1913                           
  1914                           	psect	text8
  1915   001D6E                     __ptext8:
  1916                           	callstack 0
  1917   001D6E                     _fputs:
  1918                           	callstack 22
  1919   001D6E  0E00               	movlw	0
  1920   001D70  6E0D               	movwf	(fputs@i+1)^0,c
  1921   001D72  0E00               	movlw	0
  1922   001D74  6E0C               	movwf	fputs@i^0,c
  1923   001D76  EFC6  F00E         	goto	l1885
  1924   001D7A                     l1881:
  1925   001D7A  C00B  F001         	movff	fputs@c,fputc@c
  1926   001D7E  6A02               	clrf	(fputc@c+1)^0,c
  1927   001D80  C00A  F003         	movff	fputs@fp,fputc@fp
  1928   001D84  ECA8  F00D         	call	_fputc	;wreg free
  1929   001D88  4A0C               	infsnz	fputs@i^0,f,c
  1930   001D8A  2A0D               	incf	(fputs@i+1)^0,f,c
  1931   001D8C                     l1885:
  1932   001D8C  5009               	movf	fputs@s^0,w,c
  1933   001D8E  240C               	addwf	fputs@i^0,w,c
  1934   001D90  6ED9               	movwf	fsr2l,c
  1935   001D92  6ADA               	clrf	fsr2h,c
  1936   001D94  50DF               	movf	indf2,w,c
  1937   001D96  6E0B               	movwf	fputs@c^0,c
  1938   001D98  500B               	movf	fputs@c^0,w,c
  1939   001D9A  A4D8               	btfss	status,2,c
  1940   001D9C  EFD2  F00E         	goto	u1331
  1941   001DA0  EFD4  F00E         	goto	u1330
  1942   001DA4                     u1331:
  1943   001DA4  EFBD  F00E         	goto	l1881
  1944   001DA8                     u1330:
  1945   001DA8  0012               	return		;funcret
  1946   001DAA                     __end_of_fputs:
  1947                           	callstack 0
  1948                           
  1949 ;; *************** function _fputc *****************
  1950 ;; Defined at:
  1951 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\nf_fputc.c"
  1952 ;; Parameters:    Size  Location     Type
  1953 ;;  c               2    0[COMRAM] int 
  1954 ;;  fp              1    2[COMRAM] PTR struct _IO_FILE
  1955 ;;		 -> sprintf@f(12), 
  1956 ;; Auto vars:     Size  Location     Type
  1957 ;;		None
  1958 ;; Return value:  Size  Location     Type
  1959 ;;                  2    0[COMRAM] int 
  1960 ;; Registers used:
  1961 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1962 ;; Tracked objects:
  1963 ;;		On entry : 0/0
  1964 ;;		On exit  : 0/0
  1965 ;;		Unchanged: 0/0
  1966 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1967 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1968 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1969 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1970 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1971 ;;Total ram usage:        8 bytes
  1972 ;; Hardware stack levels used: 1
  1973 ;; Hardware stack levels required when called: 2
  1974 ;; This function calls:
  1975 ;;		_putch
  1976 ;; This function is called by:
  1977 ;;		_pad
  1978 ;;		_vfpfcnvrt
  1979 ;;		_fputs
  1980 ;; This function uses a non-reentrant model
  1981 ;;
  1982                           
  1983                           	psect	text9
  1984   001B50                     __ptext9:
  1985                           	callstack 0
  1986   001B50                     _fputc:
  1987                           	callstack 25
  1988   001B50  5003               	movf	fputc@fp^0,w,c
  1989   001B52  B4D8               	btfsc	status,2,c
  1990   001B54  EFAE  F00D         	goto	u1291
  1991   001B58  EFB0  F00D         	goto	u1290
  1992   001B5C                     u1291:
  1993   001B5C  EFB8  F00D         	goto	l1869
  1994   001B60                     u1290:
  1995   001B60  5003               	movf	fputc@fp^0,w,c
  1996   001B62  A4D8               	btfss	status,2,c
  1997   001B64  EFB6  F00D         	goto	u1301
  1998   001B68  EFB8  F00D         	goto	u1300
  1999   001B6C                     u1301:
  2000   001B6C  EFBD  F00D         	goto	l1871
  2001   001B70                     u1300:
  2002   001B70                     l1869:
  2003   001B70  5001               	movf	fputc@c^0,w,c
  2004   001B72  ECAC  F00F         	call	_putch
  2005   001B76  EFFC  F00D         	goto	l1074
  2006   001B7A                     l1871:
  2007   001B7A  5003               	movf	fputc@fp^0,w,c
  2008   001B7C  6ED9               	movwf	fsr2l,c
  2009   001B7E  6ADA               	clrf	fsr2h,c
  2010   001B80  0E0A               	movlw	10
  2011   001B82  26D9               	addwf	fsr2l,f,c
  2012   001B84  50DE               	movf	postinc2,w,c
  2013   001B86  10DE               	iorwf	postinc2,w,c
  2014   001B88  B4D8               	btfsc	status,2,c
  2015   001B8A  EFC9  F00D         	goto	u1311
  2016   001B8E  EFCB  F00D         	goto	u1310
  2017   001B92                     u1311:
  2018   001B92  EFE4  F00D         	goto	l1875
  2019   001B96                     u1310:
  2020   001B96  5003               	movf	fputc@fp^0,w,c
  2021   001B98  6ED9               	movwf	fsr2l,c
  2022   001B9A  6ADA               	clrf	fsr2h,c
  2023   001B9C  0E0A               	movlw	10
  2024   001B9E  26D9               	addwf	fsr2l,f,c
  2025   001BA0  5003               	movf	fputc@fp^0,w,c
  2026   001BA2  6EE1               	movwf	fsr1l,c
  2027   001BA4  6AE2               	clrf	fsr1h,c
  2028   001BA6  0E03               	movlw	3
  2029   001BA8  26E1               	addwf	fsr1l,f,c
  2030   001BAA  50DE               	movf	postinc2,w,c
  2031   001BAC  5CE6               	subwf	postinc1,w,c
  2032   001BAE  50E6               	movf	postinc1,w,c
  2033   001BB0  0A80               	xorlw	128
  2034   001BB2  6E08               	movwf	(??_fputc+4)^0,c
  2035   001BB4  50DE               	movf	postinc2,w,c
  2036   001BB6  0A80               	xorlw	128
  2037   001BB8  5808               	subwfb	(??_fputc+4)^0,w,c
  2038   001BBA  B0D8               	btfsc	status,0,c
  2039   001BBC  EFE2  F00D         	goto	u1321
  2040   001BC0  EFE4  F00D         	goto	u1320
  2041   001BC4                     u1321:
  2042   001BC4  EFFC  F00D         	goto	l1074
  2043   001BC8                     u1320:
  2044   001BC8                     l1875:
  2045   001BC8  5003               	movf	fputc@fp^0,w,c
  2046   001BCA  6ED9               	movwf	fsr2l,c
  2047   001BCC  6ADA               	clrf	fsr2h,c
  2048   001BCE  0E03               	movlw	3
  2049   001BD0  26D9               	addwf	fsr2l,f,c
  2050   001BD2  50DF               	movf	indf2,w,c
  2051   001BD4  6E04               	movwf	??_fputc^0,c
  2052   001BD6  5003               	movf	fputc@fp^0,w,c
  2053   001BD8  6ED9               	movwf	fsr2l,c
  2054   001BDA  6ADA               	clrf	fsr2h,c
  2055   001BDC  50DF               	movf	indf2,w,c
  2056   001BDE  2404               	addwf	??_fputc^0,w,c
  2057   001BE0  6ED9               	movwf	fsr2l,c
  2058   001BE2  6ADA               	clrf	fsr2h,c
  2059   001BE4  C001  FFDF         	movff	fputc@c,indf2
  2060   001BE8  5003               	movf	fputc@fp^0,w,c
  2061   001BEA  6ED9               	movwf	fsr2l,c
  2062   001BEC  6ADA               	clrf	fsr2h,c
  2063   001BEE  0E03               	movlw	3
  2064   001BF0  26D9               	addwf	fsr2l,f,c
  2065   001BF2  2ADE               	incf	postinc2,f,c
  2066   001BF4  0E00               	movlw	0
  2067   001BF6  22DD               	addwfc	postdec2,f,c
  2068   001BF8                     l1074:
  2069   001BF8  0012               	return		;funcret
  2070   001BFA                     __end_of_fputc:
  2071                           	callstack 0
  2072                           
  2073 ;; *************** function _putch *****************
  2074 ;; Defined at:
  2075 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\putch.c"
  2076 ;; Parameters:    Size  Location     Type
  2077 ;;  c               1    wreg     unsigned char 
  2078 ;; Auto vars:     Size  Location     Type
  2079 ;;  c               1    0[COMRAM] unsigned char 
  2080 ;; Return value:  Size  Location     Type
  2081 ;;                  1    wreg      void 
  2082 ;; Registers used:
  2083 ;;		wreg
  2084 ;; Tracked objects:
  2085 ;;		On entry : 0/0
  2086 ;;		On exit  : 0/0
  2087 ;;		Unchanged: 0/0
  2088 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2089 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2090 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2091 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2092 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2093 ;;Total ram usage:        0 bytes
  2094 ;; Hardware stack levels used: 1
  2095 ;; Hardware stack levels required when called: 1
  2096 ;; This function calls:
  2097 ;;		Nothing
  2098 ;; This function is called by:
  2099 ;;		_fputc
  2100 ;; This function uses a non-reentrant model
  2101 ;;
  2102                           
  2103                           	psect	text10
  2104   001F58                     __ptext10:
  2105                           	callstack 0
  2106   001F58                     _putch:
  2107                           	callstack 25
  2108   001F58  0012               	return		;funcret
  2109   001F5A                     __end_of_putch:
  2110                           	callstack 0
  2111                           
  2112 ;; *************** function _abs *****************
  2113 ;; Defined at:
  2114 ;;		line 1 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\abs.c"
  2115 ;; Parameters:    Size  Location     Type
  2116 ;;  a               2    6[COMRAM] int 
  2117 ;; Auto vars:     Size  Location     Type
  2118 ;;		None
  2119 ;; Return value:  Size  Location     Type
  2120 ;;                  2    6[COMRAM] int 
  2121 ;; Registers used:
  2122 ;;		wreg, status,2, status,0
  2123 ;; Tracked objects:
  2124 ;;		On entry : 0/0
  2125 ;;		On exit  : 0/0
  2126 ;;		Unchanged: 0/0
  2127 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2128 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2129 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2130 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2131 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2132 ;;Total ram usage:        4 bytes
  2133 ;; Hardware stack levels used: 1
  2134 ;; Hardware stack levels required when called: 1
  2135 ;; This function calls:
  2136 ;;		Nothing
  2137 ;; This function is called by:
  2138 ;;		_dtoa
  2139 ;; This function uses a non-reentrant model
  2140 ;;
  2141                           
  2142                           	psect	text11
  2143   001E18                     __ptext11:
  2144                           	callstack 0
  2145   001E18                     _abs:
  2146                           	callstack 25
  2147   001E18  BE08               	btfsc	(abs@a+1)^0,7,c
  2148   001E1A  EF11  F00F         	goto	u1501
  2149   001E1E  EF13  F00F         	goto	u1500
  2150   001E22                     u1501:
  2151   001E22  EF19  F00F         	goto	l1059
  2152   001E26                     u1500:
  2153   001E26  C007  F007         	movff	abs@a,?_abs
  2154   001E2A  C008  F008         	movff	abs@a+1,?_abs+1
  2155   001E2E  EF25  F00F         	goto	l1062
  2156   001E32                     l1059:
  2157   001E32  C007  F009         	movff	abs@a,??_abs
  2158   001E36  C008  F00A         	movff	abs@a+1,??_abs+1
  2159   001E3A  1E09               	comf	??_abs^0,f,c
  2160   001E3C  1E0A               	comf	(??_abs+1)^0,f,c
  2161   001E3E  4A09               	infsnz	??_abs^0,f,c
  2162   001E40  2A0A               	incf	(??_abs+1)^0,f,c
  2163   001E42  C009  F007         	movff	??_abs,?_abs
  2164   001E46  C00A  F008         	movff	??_abs+1,?_abs+1
  2165   001E4A                     l1062:
  2166   001E4A  0012               	return		;funcret
  2167   001E4C                     __end_of_abs:
  2168                           	callstack 0
  2169                           
  2170 ;; *************** function ___awdiv *****************
  2171 ;; Defined at:
  2172 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\awdiv.c"
  2173 ;; Parameters:    Size  Location     Type
  2174 ;;  dividend        2    0[COMRAM] int 
  2175 ;;  divisor         2    2[COMRAM] int 
  2176 ;; Auto vars:     Size  Location     Type
  2177 ;;  quotient        2    6[COMRAM] int 
  2178 ;;  sign            1    5[COMRAM] unsigned char 
  2179 ;;  counter         1    4[COMRAM] unsigned char 
  2180 ;; Return value:  Size  Location     Type
  2181 ;;                  2    0[COMRAM] int 
  2182 ;; Registers used:
  2183 ;;		wreg, status,2, status,0
  2184 ;; Tracked objects:
  2185 ;;		On entry : 0/0
  2186 ;;		On exit  : 0/0
  2187 ;;		Unchanged: 0/0
  2188 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2189 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2190 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2191 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2192 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2193 ;;Total ram usage:        8 bytes
  2194 ;; Hardware stack levels used: 1
  2195 ;; Hardware stack levels required when called: 1
  2196 ;; This function calls:
  2197 ;;		Nothing
  2198 ;; This function is called by:
  2199 ;;		_dtoa
  2200 ;; This function uses a non-reentrant model
  2201 ;;
  2202                           
  2203                           	psect	text12
  2204   00192E                     __ptext12:
  2205                           	callstack 0
  2206   00192E                     ___awdiv:
  2207                           	callstack 25
  2208   00192E  0E00               	movlw	0
  2209   001930  6E06               	movwf	___awdiv@sign^0,c
  2210   001932  BE04               	btfsc	(___awdiv@divisor+1)^0,7,c
  2211   001934  EFA0  F00C         	goto	u1340
  2212   001938  EF9E  F00C         	goto	u1341
  2213   00193C                     u1341:
  2214   00193C  EFA6  F00C         	goto	l1901
  2215   001940                     u1340:
  2216   001940  6C03               	negf	___awdiv@divisor^0,c
  2217   001942  1E04               	comf	(___awdiv@divisor+1)^0,f,c
  2218   001944  B0D8               	btfsc	status,0,c
  2219   001946  2A04               	incf	(___awdiv@divisor+1)^0,f,c
  2220   001948  0E01               	movlw	1
  2221   00194A  6E06               	movwf	___awdiv@sign^0,c
  2222   00194C                     l1901:
  2223   00194C  BE02               	btfsc	(___awdiv@dividend+1)^0,7,c
  2224   00194E  EFAD  F00C         	goto	u1350
  2225   001952  EFAB  F00C         	goto	u1351
  2226   001956                     u1351:
  2227   001956  EFB3  F00C         	goto	l1907
  2228   00195A                     u1350:
  2229   00195A  6C01               	negf	___awdiv@dividend^0,c
  2230   00195C  1E02               	comf	(___awdiv@dividend+1)^0,f,c
  2231   00195E  B0D8               	btfsc	status,0,c
  2232   001960  2A02               	incf	(___awdiv@dividend+1)^0,f,c
  2233   001962  0E01               	movlw	1
  2234   001964  1A06               	xorwf	___awdiv@sign^0,f,c
  2235   001966                     l1907:
  2236   001966  0E00               	movlw	0
  2237   001968  6E08               	movwf	(___awdiv@quotient+1)^0,c
  2238   00196A  0E00               	movlw	0
  2239   00196C  6E07               	movwf	___awdiv@quotient^0,c
  2240   00196E  5003               	movf	___awdiv@divisor^0,w,c
  2241   001970  1004               	iorwf	(___awdiv@divisor+1)^0,w,c
  2242   001972  B4D8               	btfsc	status,2,c
  2243   001974  EFBE  F00C         	goto	u1361
  2244   001978  EFC0  F00C         	goto	u1360
  2245   00197C                     u1361:
  2246   00197C  EFE8  F00C         	goto	l1929
  2247   001980                     u1360:
  2248   001980  0E01               	movlw	1
  2249   001982  6E05               	movwf	___awdiv@counter^0,c
  2250   001984  EFC8  F00C         	goto	l1915
  2251   001988                     l1913:
  2252   001988  90D8               	bcf	status,0,c
  2253   00198A  3603               	rlcf	___awdiv@divisor^0,f,c
  2254   00198C  3604               	rlcf	(___awdiv@divisor+1)^0,f,c
  2255   00198E  2A05               	incf	___awdiv@counter^0,f,c
  2256   001990                     l1915:
  2257   001990  AE04               	btfss	(___awdiv@divisor+1)^0,7,c
  2258   001992  EFCD  F00C         	goto	u1371
  2259   001996  EFCF  F00C         	goto	u1370
  2260   00199A                     u1371:
  2261   00199A  EFC4  F00C         	goto	l1913
  2262   00199E                     u1370:
  2263   00199E                     l1917:
  2264   00199E  90D8               	bcf	status,0,c
  2265   0019A0  3607               	rlcf	___awdiv@quotient^0,f,c
  2266   0019A2  3608               	rlcf	(___awdiv@quotient+1)^0,f,c
  2267   0019A4  5003               	movf	___awdiv@divisor^0,w,c
  2268   0019A6  5C01               	subwf	___awdiv@dividend^0,w,c
  2269   0019A8  5004               	movf	(___awdiv@divisor+1)^0,w,c
  2270   0019AA  5802               	subwfb	(___awdiv@dividend+1)^0,w,c
  2271   0019AC  A0D8               	btfss	status,0,c
  2272   0019AE  EFDB  F00C         	goto	u1381
  2273   0019B2  EFDD  F00C         	goto	u1380
  2274   0019B6                     u1381:
  2275   0019B6  EFE2  F00C         	goto	l1925
  2276   0019BA                     u1380:
  2277   0019BA  5003               	movf	___awdiv@divisor^0,w,c
  2278   0019BC  5E01               	subwf	___awdiv@dividend^0,f,c
  2279   0019BE  5004               	movf	(___awdiv@divisor+1)^0,w,c
  2280   0019C0  5A02               	subwfb	(___awdiv@dividend+1)^0,f,c
  2281   0019C2  8007               	bsf	___awdiv@quotient^0,0,c
  2282   0019C4                     l1925:
  2283   0019C4  90D8               	bcf	status,0,c
  2284   0019C6  3204               	rrcf	(___awdiv@divisor+1)^0,f,c
  2285   0019C8  3203               	rrcf	___awdiv@divisor^0,f,c
  2286   0019CA  2E05               	decfsz	___awdiv@counter^0,f,c
  2287   0019CC  EFCF  F00C         	goto	l1917
  2288   0019D0                     l1929:
  2289   0019D0  5006               	movf	___awdiv@sign^0,w,c
  2290   0019D2  B4D8               	btfsc	status,2,c
  2291   0019D4  EFEE  F00C         	goto	u1391
  2292   0019D8  EFF0  F00C         	goto	u1390
  2293   0019DC                     u1391:
  2294   0019DC  EFF4  F00C         	goto	l1933
  2295   0019E0                     u1390:
  2296   0019E0  6C07               	negf	___awdiv@quotient^0,c
  2297   0019E2  1E08               	comf	(___awdiv@quotient+1)^0,f,c
  2298   0019E4  B0D8               	btfsc	status,0,c
  2299   0019E6  2A08               	incf	(___awdiv@quotient+1)^0,f,c
  2300   0019E8                     l1933:
  2301   0019E8  C007  F001         	movff	___awdiv@quotient,?___awdiv
  2302   0019EC  C008  F002         	movff	___awdiv@quotient+1,?___awdiv+1
  2303   0019F0  0012               	return		;funcret
  2304   0019F2                     __end_of___awdiv:
  2305                           	callstack 0
  2306                           
  2307 ;; *************** function _UpdateClock *****************
  2308 ;; Defined at:
  2309 ;;		line 7 in file "clock.c"
  2310 ;; Parameters:    Size  Location     Type
  2311 ;;  seconds         1    6[COMRAM] PTR int 
  2312 ;;		 -> GLOBALsecs(2), 
  2313 ;;  minutes         1    7[COMRAM] PTR int 
  2314 ;;		 -> main@clock(16), 
  2315 ;;  hours           1    8[COMRAM] PTR int 
  2316 ;;		 -> main@clock(16), 
  2317 ;;  days            1    9[COMRAM] PTR int 
  2318 ;;		 -> main@clock(16), 
  2319 ;;  DoW             1   10[COMRAM] PTR int 
  2320 ;;		 -> main@clock(16), 
  2321 ;;  months          1   11[COMRAM] PTR int 
  2322 ;;		 -> main@clock(16), 
  2323 ;;  years           1   12[COMRAM] PTR int 
  2324 ;;		 -> main@clock(16), 
  2325 ;;  DSTstate        1   13[COMRAM] PTR int 
  2326 ;;		 -> main@clock(16), 
  2327 ;;  TestMode        2   14[COMRAM] int 
  2328 ;; Auto vars:     Size  Location     Type
  2329 ;;  DaysInMonth    24   22[COMRAM] int [12]
  2330 ;; Return value:  Size  Location     Type
  2331 ;;                  1    wreg      void 
  2332 ;; Registers used:
  2333 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2334 ;; Tracked objects:
  2335 ;;		On entry : 0/0
  2336 ;;		On exit  : 0/0
  2337 ;;		Unchanged: 0/0
  2338 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2339 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2340 ;;      Locals:        24       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2341 ;;      Temps:          6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2342 ;;      Totals:        40       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2343 ;;Total ram usage:       40 bytes
  2344 ;; Hardware stack levels used: 1
  2345 ;; Hardware stack levels required when called: 2
  2346 ;; This function calls:
  2347 ;;		___awmod
  2348 ;; This function is called by:
  2349 ;;		_main
  2350 ;; This function uses a non-reentrant model
  2351 ;;
  2352                           
  2353                           	psect	text13
  2354   000E46                     __ptext13:
  2355                           	callstack 0
  2356   000E46                     _UpdateClock:
  2357                           	callstack 28
  2358   000E46                     
  2359                           ;clock.c: 9:     int DaysInMonth[] = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
  2360   000E46  EE20  F0A8         	lfsr	2,UpdateClock@F14152
  2361   000E4A  EE10  F017         	lfsr	1,UpdateClock@DaysInMonth
  2362   000E4E  0E17               	movlw	23
  2363   000E50                     u1741:
  2364   000E50  CFDB FFE3          	movff	plusw2,plusw1
  2365   000E54  06E8               	decf	wreg,f,c
  2366   000E56  E2FC               	bc	u1741
  2367   000E58                     
  2368                           ;clock.c: 11:     if (TestMode == 1){
  2369   000E58  040F               	decf	UpdateClock@TestMode^0,w,c
  2370   000E5A  1010               	iorwf	(UpdateClock@TestMode+1)^0,w,c
  2371   000E5C  A4D8               	btfss	status,2,c
  2372   000E5E  EF33  F007         	goto	u1751
  2373   000E62  EF35  F007         	goto	u1750
  2374   000E66                     u1751:
  2375   000E66  EF57  F007         	goto	l2225
  2376   000E6A                     u1750:
  2377   000E6A                     
  2378                           ;clock.c: 12:        *hours = *seconds;
  2379   000E6A  5007               	movf	UpdateClock@seconds^0,w,c
  2380   000E6C  6ED9               	movwf	fsr2l,c
  2381   000E6E  6ADA               	clrf	fsr2h,c
  2382   000E70  5009               	movf	UpdateClock@hours^0,w,c
  2383   000E72  6EE1               	movwf	fsr1l,c
  2384   000E74  6AE2               	clrf	fsr1h,c
  2385   000E76  CFDE FFE6          	movff	postinc2,postinc1
  2386   000E7A  CFDD FFE5          	movff	postdec2,postdec1
  2387   000E7E                     
  2388                           ;clock.c: 13:         if (*seconds >= 24 ){
  2389   000E7E  5007               	movf	UpdateClock@seconds^0,w,c
  2390   000E80  6ED9               	movwf	fsr2l,c
  2391   000E82  6ADA               	clrf	fsr2h,c
  2392   000E84  0E01               	movlw	1
  2393   000E86  BEDB               	btfsc	plusw2,7,c
  2394   000E88  EF50  F007         	goto	u1761
  2395   000E8C  0E01               	movlw	1
  2396   000E8E  50DB               	movf	plusw2,w,c
  2397   000E90  E109               	bnz	u1760
  2398   000E92  0E18               	movlw	24
  2399   000E94  5CDE               	subwf	postinc2,w,c
  2400   000E96  A0D8               	btfss	status,0,c
  2401   000E98  EF50  F007         	goto	u1761
  2402   000E9C  EF52  F007         	goto	u1760
  2403   000EA0                     u1761:
  2404   000EA0  EF57  F007         	goto	l2225
  2405   000EA4                     u1760:
  2406   000EA4                     
  2407                           ;clock.c: 14:             *seconds = 0;
  2408   000EA4  5007               	movf	UpdateClock@seconds^0,w,c
  2409   000EA6  6ED9               	movwf	fsr2l,c
  2410   000EA8  6ADA               	clrf	fsr2h,c
  2411   000EAA  6ADE               	clrf	postinc2,c
  2412   000EAC  6ADD               	clrf	postdec2,c
  2413   000EAE                     l2225:
  2414                           
  2415                           ;clock.c: 18:     if (*seconds >= 60 ){
  2416   000EAE  5007               	movf	UpdateClock@seconds^0,w,c
  2417   000EB0  6ED9               	movwf	fsr2l,c
  2418   000EB2  6ADA               	clrf	fsr2h,c
  2419   000EB4  0E01               	movlw	1
  2420   000EB6  BEDB               	btfsc	plusw2,7,c
  2421   000EB8  EF68  F007         	goto	u1771
  2422   000EBC  0E01               	movlw	1
  2423   000EBE  50DB               	movf	plusw2,w,c
  2424   000EC0  E109               	bnz	u1770
  2425   000EC2  0E3C               	movlw	60
  2426   000EC4  5CDE               	subwf	postinc2,w,c
  2427   000EC6  A0D8               	btfss	status,0,c
  2428   000EC8  EF68  F007         	goto	u1771
  2429   000ECC  EF6A  F007         	goto	u1770
  2430   000ED0                     u1771:
  2431   000ED0  EF81  F007         	goto	l2231
  2432   000ED4                     u1770:
  2433   000ED4                     
  2434                           ;clock.c: 19:         *seconds = 0;
  2435   000ED4  5007               	movf	UpdateClock@seconds^0,w,c
  2436   000ED6  6ED9               	movwf	fsr2l,c
  2437   000ED8  6ADA               	clrf	fsr2h,c
  2438   000EDA  6ADE               	clrf	postinc2,c
  2439   000EDC  6ADD               	clrf	postdec2,c
  2440   000EDE                     
  2441                           ;clock.c: 20:         *minutes = *minutes + 1;
  2442   000EDE  5008               	movf	UpdateClock@minutes^0,w,c
  2443   000EE0  6ED9               	movwf	fsr2l,c
  2444   000EE2  6ADA               	clrf	fsr2h,c
  2445   000EE4  CFDE F011          	movff	postinc2,??_UpdateClock
  2446   000EE8  CFDD F012          	movff	postdec2,??_UpdateClock+1
  2447   000EEC  0E01               	movlw	1
  2448   000EEE  2611               	addwf	??_UpdateClock^0,f,c
  2449   000EF0  0E00               	movlw	0
  2450   000EF2  2212               	addwfc	(??_UpdateClock+1)^0,f,c
  2451   000EF4  5008               	movf	UpdateClock@minutes^0,w,c
  2452   000EF6  6ED9               	movwf	fsr2l,c
  2453   000EF8  6ADA               	clrf	fsr2h,c
  2454   000EFA  C011  FFDE         	movff	??_UpdateClock,postinc2
  2455   000EFE  C012  FFDD         	movff	??_UpdateClock+1,postdec2
  2456   000F02                     l2231:
  2457                           
  2458                           ;clock.c: 23:     if (*minutes >= 60){
  2459   000F02  5008               	movf	UpdateClock@minutes^0,w,c
  2460   000F04  6ED9               	movwf	fsr2l,c
  2461   000F06  6ADA               	clrf	fsr2h,c
  2462   000F08  0E01               	movlw	1
  2463   000F0A  BEDB               	btfsc	plusw2,7,c
  2464   000F0C  EF92  F007         	goto	u1781
  2465   000F10  0E01               	movlw	1
  2466   000F12  50DB               	movf	plusw2,w,c
  2467   000F14  E109               	bnz	u1780
  2468   000F16  0E3C               	movlw	60
  2469   000F18  5CDE               	subwf	postinc2,w,c
  2470   000F1A  A0D8               	btfss	status,0,c
  2471   000F1C  EF92  F007         	goto	u1781
  2472   000F20  EF94  F007         	goto	u1780
  2473   000F24                     u1781:
  2474   000F24  EFAB  F007         	goto	l2237
  2475   000F28                     u1780:
  2476   000F28                     
  2477                           ;clock.c: 24:         *minutes = 0;
  2478   000F28  5008               	movf	UpdateClock@minutes^0,w,c
  2479   000F2A  6ED9               	movwf	fsr2l,c
  2480   000F2C  6ADA               	clrf	fsr2h,c
  2481   000F2E  6ADE               	clrf	postinc2,c
  2482   000F30  6ADD               	clrf	postdec2,c
  2483   000F32                     
  2484                           ;clock.c: 25:         *hours = *hours + 1;
  2485   000F32  5009               	movf	UpdateClock@hours^0,w,c
  2486   000F34  6ED9               	movwf	fsr2l,c
  2487   000F36  6ADA               	clrf	fsr2h,c
  2488   000F38  CFDE F011          	movff	postinc2,??_UpdateClock
  2489   000F3C  CFDD F012          	movff	postdec2,??_UpdateClock+1
  2490   000F40  0E01               	movlw	1
  2491   000F42  2611               	addwf	??_UpdateClock^0,f,c
  2492   000F44  0E00               	movlw	0
  2493   000F46  2212               	addwfc	(??_UpdateClock+1)^0,f,c
  2494   000F48  5009               	movf	UpdateClock@hours^0,w,c
  2495   000F4A  6ED9               	movwf	fsr2l,c
  2496   000F4C  6ADA               	clrf	fsr2h,c
  2497   000F4E  C011  FFDE         	movff	??_UpdateClock,postinc2
  2498   000F52  C012  FFDD         	movff	??_UpdateClock+1,postdec2
  2499   000F56                     l2237:
  2500                           
  2501                           ;clock.c: 28:     if (*hours >= 24){
  2502   000F56  5009               	movf	UpdateClock@hours^0,w,c
  2503   000F58  6ED9               	movwf	fsr2l,c
  2504   000F5A  6ADA               	clrf	fsr2h,c
  2505   000F5C  0E01               	movlw	1
  2506   000F5E  BEDB               	btfsc	plusw2,7,c
  2507   000F60  EFBC  F007         	goto	u1791
  2508   000F64  0E01               	movlw	1
  2509   000F66  50DB               	movf	plusw2,w,c
  2510   000F68  E109               	bnz	u1790
  2511   000F6A  0E18               	movlw	24
  2512   000F6C  5CDE               	subwf	postinc2,w,c
  2513   000F6E  A0D8               	btfss	status,0,c
  2514   000F70  EFBC  F007         	goto	u1791
  2515   000F74  EFBE  F007         	goto	u1790
  2516   000F78                     u1791:
  2517   000F78  EFE7  F007         	goto	l2245
  2518   000F7C                     u1790:
  2519   000F7C                     
  2520                           ;clock.c: 29:         *hours = 0;
  2521   000F7C  5009               	movf	UpdateClock@hours^0,w,c
  2522   000F7E  6ED9               	movwf	fsr2l,c
  2523   000F80  6ADA               	clrf	fsr2h,c
  2524   000F82  6ADE               	clrf	postinc2,c
  2525   000F84  6ADD               	clrf	postdec2,c
  2526   000F86                     
  2527                           ;clock.c: 30:         *days = *days + 1;
  2528   000F86  500A               	movf	UpdateClock@days^0,w,c
  2529   000F88  6ED9               	movwf	fsr2l,c
  2530   000F8A  6ADA               	clrf	fsr2h,c
  2531   000F8C  CFDE F011          	movff	postinc2,??_UpdateClock
  2532   000F90  CFDD F012          	movff	postdec2,??_UpdateClock+1
  2533   000F94  0E01               	movlw	1
  2534   000F96  2611               	addwf	??_UpdateClock^0,f,c
  2535   000F98  0E00               	movlw	0
  2536   000F9A  2212               	addwfc	(??_UpdateClock+1)^0,f,c
  2537   000F9C  500A               	movf	UpdateClock@days^0,w,c
  2538   000F9E  6ED9               	movwf	fsr2l,c
  2539   000FA0  6ADA               	clrf	fsr2h,c
  2540   000FA2  C011  FFDE         	movff	??_UpdateClock,postinc2
  2541   000FA6  C012  FFDD         	movff	??_UpdateClock+1,postdec2
  2542   000FAA                     
  2543                           ;clock.c: 31:         *DoW = *DoW + 1;
  2544   000FAA  500B               	movf	UpdateClock@DoW^0,w,c
  2545   000FAC  6ED9               	movwf	fsr2l,c
  2546   000FAE  6ADA               	clrf	fsr2h,c
  2547   000FB0  CFDE F011          	movff	postinc2,??_UpdateClock
  2548   000FB4  CFDD F012          	movff	postdec2,??_UpdateClock+1
  2549   000FB8  0E01               	movlw	1
  2550   000FBA  2611               	addwf	??_UpdateClock^0,f,c
  2551   000FBC  0E00               	movlw	0
  2552   000FBE  2212               	addwfc	(??_UpdateClock+1)^0,f,c
  2553   000FC0  500B               	movf	UpdateClock@DoW^0,w,c
  2554   000FC2  6ED9               	movwf	fsr2l,c
  2555   000FC4  6ADA               	clrf	fsr2h,c
  2556   000FC6  C011  FFDE         	movff	??_UpdateClock,postinc2
  2557   000FCA  C012  FFDD         	movff	??_UpdateClock+1,postdec2
  2558   000FCE                     l2245:
  2559                           
  2560                           ;clock.c: 34:     if (*DoW >= 8){
  2561   000FCE  500B               	movf	UpdateClock@DoW^0,w,c
  2562   000FD0  6ED9               	movwf	fsr2l,c
  2563   000FD2  6ADA               	clrf	fsr2h,c
  2564   000FD4  0E01               	movlw	1
  2565   000FD6  BEDB               	btfsc	plusw2,7,c
  2566   000FD8  EFF8  F007         	goto	u1801
  2567   000FDC  0E01               	movlw	1
  2568   000FDE  50DB               	movf	plusw2,w,c
  2569   000FE0  E109               	bnz	u1800
  2570   000FE2  0E08               	movlw	8
  2571   000FE4  5CDE               	subwf	postinc2,w,c
  2572   000FE6  A0D8               	btfss	status,0,c
  2573   000FE8  EFF8  F007         	goto	u1801
  2574   000FEC  EFFA  F007         	goto	u1800
  2575   000FF0                     u1801:
  2576   000FF0  EF01  F008         	goto	l2249
  2577   000FF4                     u1800:
  2578   000FF4                     
  2579                           ;clock.c: 35:         *DoW = 1;
  2580   000FF4  500B               	movf	UpdateClock@DoW^0,w,c
  2581   000FF6  6ED9               	movwf	fsr2l,c
  2582   000FF8  6ADA               	clrf	fsr2h,c
  2583   000FFA  0E01               	movlw	1
  2584   000FFC  6EDE               	movwf	postinc2,c
  2585   000FFE  0E00               	movlw	0
  2586   001000  6EDD               	movwf	postdec2,c
  2587   001002                     l2249:
  2588                           
  2589                           ;clock.c: 38:     if((*DSTstate == 0) && (*months == 3) && (*days >= 25) && (*DoW == 7) 
      +                          && ( *hours >= 1) ){
  2590   001002  500E               	movf	UpdateClock@DSTstate^0,w,c
  2591   001004  6ED9               	movwf	fsr2l,c
  2592   001006  6ADA               	clrf	fsr2h,c
  2593   001008  50DE               	movf	postinc2,w,c
  2594   00100A  10DE               	iorwf	postinc2,w,c
  2595   00100C  A4D8               	btfss	status,2,c
  2596   00100E  EF0B  F008         	goto	u1811
  2597   001012  EF0D  F008         	goto	u1810
  2598   001016                     u1811:
  2599   001016  EF65  F008         	goto	l2263
  2600   00101A                     u1810:
  2601   00101A  500C               	movf	UpdateClock@months^0,w,c
  2602   00101C  6ED9               	movwf	fsr2l,c
  2603   00101E  6ADA               	clrf	fsr2h,c
  2604   001020  0E03               	movlw	3
  2605   001022  18DE               	xorwf	postinc2,w,c
  2606   001024  10DE               	iorwf	postinc2,w,c
  2607   001026  A4D8               	btfss	status,2,c
  2608   001028  EF18  F008         	goto	u1821
  2609   00102C  EF1A  F008         	goto	u1820
  2610   001030                     u1821:
  2611   001030  EF65  F008         	goto	l2263
  2612   001034                     u1820:
  2613   001034  500A               	movf	UpdateClock@days^0,w,c
  2614   001036  6ED9               	movwf	fsr2l,c
  2615   001038  6ADA               	clrf	fsr2h,c
  2616   00103A  0E01               	movlw	1
  2617   00103C  BEDB               	btfsc	plusw2,7,c
  2618   00103E  EF2B  F008         	goto	u1831
  2619   001042  0E01               	movlw	1
  2620   001044  50DB               	movf	plusw2,w,c
  2621   001046  E109               	bnz	u1830
  2622   001048  0E19               	movlw	25
  2623   00104A  5CDE               	subwf	postinc2,w,c
  2624   00104C  A0D8               	btfss	status,0,c
  2625   00104E  EF2B  F008         	goto	u1831
  2626   001052  EF2D  F008         	goto	u1830
  2627   001056                     u1831:
  2628   001056  EF65  F008         	goto	l2263
  2629   00105A                     u1830:
  2630   00105A  500B               	movf	UpdateClock@DoW^0,w,c
  2631   00105C  6ED9               	movwf	fsr2l,c
  2632   00105E  6ADA               	clrf	fsr2h,c
  2633   001060  0E07               	movlw	7
  2634   001062  18DE               	xorwf	postinc2,w,c
  2635   001064  10DE               	iorwf	postinc2,w,c
  2636   001066  A4D8               	btfss	status,2,c
  2637   001068  EF38  F008         	goto	u1841
  2638   00106C  EF3A  F008         	goto	u1840
  2639   001070                     u1841:
  2640   001070  EF65  F008         	goto	l2263
  2641   001074                     u1840:
  2642   001074  5009               	movf	UpdateClock@hours^0,w,c
  2643   001076  6ED9               	movwf	fsr2l,c
  2644   001078  6ADA               	clrf	fsr2h,c
  2645   00107A  0E01               	movlw	1
  2646   00107C  BEDB               	btfsc	plusw2,7,c
  2647   00107E  EF4A  F008         	goto	u1851
  2648   001082  0E01               	movlw	1
  2649   001084  50DB               	movf	plusw2,w,c
  2650   001086  E108               	bnz	u1850
  2651   001088  04DE               	decf	postinc2,w,c
  2652   00108A  A0D8               	btfss	status,0,c
  2653   00108C  EF4A  F008         	goto	u1851
  2654   001090  EF4C  F008         	goto	u1850
  2655   001094                     u1851:
  2656   001094  EF65  F008         	goto	l2263
  2657   001098                     u1850:
  2658   001098                     
  2659                           ;clock.c: 40:         *hours = *hours + 10;
  2660   001098  5009               	movf	UpdateClock@hours^0,w,c
  2661   00109A  6ED9               	movwf	fsr2l,c
  2662   00109C  6ADA               	clrf	fsr2h,c
  2663   00109E  CFDE F011          	movff	postinc2,??_UpdateClock
  2664   0010A2  CFDD F012          	movff	postdec2,??_UpdateClock+1
  2665   0010A6  0E0A               	movlw	10
  2666   0010A8  2611               	addwf	??_UpdateClock^0,f,c
  2667   0010AA  0E00               	movlw	0
  2668   0010AC  2212               	addwfc	(??_UpdateClock+1)^0,f,c
  2669   0010AE  5009               	movf	UpdateClock@hours^0,w,c
  2670   0010B0  6ED9               	movwf	fsr2l,c
  2671   0010B2  6ADA               	clrf	fsr2h,c
  2672   0010B4  C011  FFDE         	movff	??_UpdateClock,postinc2
  2673   0010B8  C012  FFDD         	movff	??_UpdateClock+1,postdec2
  2674   0010BC                     
  2675                           ;clock.c: 41:         *DSTstate = 1;
  2676   0010BC  500E               	movf	UpdateClock@DSTstate^0,w,c
  2677   0010BE  6ED9               	movwf	fsr2l,c
  2678   0010C0  6ADA               	clrf	fsr2h,c
  2679   0010C2  0E01               	movlw	1
  2680   0010C4  6EDE               	movwf	postinc2,c
  2681   0010C6  0E00               	movlw	0
  2682   0010C8  6EDD               	movwf	postdec2,c
  2683   0010CA                     l2263:
  2684                           
  2685                           ;clock.c: 45:     if((*DSTstate==1) && (*months == 10) && (*days >= 25) && (*DoW == 7) &
      +                          & (*hours == 2) ){
  2686   0010CA  500E               	movf	UpdateClock@DSTstate^0,w,c
  2687   0010CC  6ED9               	movwf	fsr2l,c
  2688   0010CE  6ADA               	clrf	fsr2h,c
  2689   0010D0  04DE               	decf	postinc2,w,c
  2690   0010D2  10DE               	iorwf	postinc2,w,c
  2691   0010D4  A4D8               	btfss	status,2,c
  2692   0010D6  EF6F  F008         	goto	u1861
  2693   0010DA  EF71  F008         	goto	u1860
  2694   0010DE                     u1861:
  2695   0010DE  EFC4  F008         	goto	l2277
  2696   0010E2                     u1860:
  2697   0010E2  500C               	movf	UpdateClock@months^0,w,c
  2698   0010E4  6ED9               	movwf	fsr2l,c
  2699   0010E6  6ADA               	clrf	fsr2h,c
  2700   0010E8  0E0A               	movlw	10
  2701   0010EA  18DE               	xorwf	postinc2,w,c
  2702   0010EC  10DE               	iorwf	postinc2,w,c
  2703   0010EE  A4D8               	btfss	status,2,c
  2704   0010F0  EF7C  F008         	goto	u1871
  2705   0010F4  EF7E  F008         	goto	u1870
  2706   0010F8                     u1871:
  2707   0010F8  EFC4  F008         	goto	l2277
  2708   0010FC                     u1870:
  2709   0010FC  500A               	movf	UpdateClock@days^0,w,c
  2710   0010FE  6ED9               	movwf	fsr2l,c
  2711   001100  6ADA               	clrf	fsr2h,c
  2712   001102  0E01               	movlw	1
  2713   001104  BEDB               	btfsc	plusw2,7,c
  2714   001106  EF8F  F008         	goto	u1881
  2715   00110A  0E01               	movlw	1
  2716   00110C  50DB               	movf	plusw2,w,c
  2717   00110E  E109               	bnz	u1880
  2718   001110  0E19               	movlw	25
  2719   001112  5CDE               	subwf	postinc2,w,c
  2720   001114  A0D8               	btfss	status,0,c
  2721   001116  EF8F  F008         	goto	u1881
  2722   00111A  EF91  F008         	goto	u1880
  2723   00111E                     u1881:
  2724   00111E  EFC4  F008         	goto	l2277
  2725   001122                     u1880:
  2726   001122  500B               	movf	UpdateClock@DoW^0,w,c
  2727   001124  6ED9               	movwf	fsr2l,c
  2728   001126  6ADA               	clrf	fsr2h,c
  2729   001128  0E07               	movlw	7
  2730   00112A  18DE               	xorwf	postinc2,w,c
  2731   00112C  10DE               	iorwf	postinc2,w,c
  2732   00112E  A4D8               	btfss	status,2,c
  2733   001130  EF9C  F008         	goto	u1891
  2734   001134  EF9E  F008         	goto	u1890
  2735   001138                     u1891:
  2736   001138  EFC4  F008         	goto	l2277
  2737   00113C                     u1890:
  2738   00113C  5009               	movf	UpdateClock@hours^0,w,c
  2739   00113E  6ED9               	movwf	fsr2l,c
  2740   001140  6ADA               	clrf	fsr2h,c
  2741   001142  0E02               	movlw	2
  2742   001144  18DE               	xorwf	postinc2,w,c
  2743   001146  10DE               	iorwf	postinc2,w,c
  2744   001148  A4D8               	btfss	status,2,c
  2745   00114A  EFA9  F008         	goto	u1901
  2746   00114E  EFAB  F008         	goto	u1900
  2747   001152                     u1901:
  2748   001152  EFC4  F008         	goto	l2277
  2749   001156                     u1900:
  2750   001156                     
  2751                           ;clock.c: 46:         *hours = *hours - 1;
  2752   001156  5009               	movf	UpdateClock@hours^0,w,c
  2753   001158  6ED9               	movwf	fsr2l,c
  2754   00115A  6ADA               	clrf	fsr2h,c
  2755   00115C  CFDE F011          	movff	postinc2,??_UpdateClock
  2756   001160  CFDD F012          	movff	postdec2,??_UpdateClock+1
  2757   001164  0EFF               	movlw	255
  2758   001166  2411               	addwf	??_UpdateClock^0,w,c
  2759   001168  6E13               	movwf	(??_UpdateClock+2)^0,c
  2760   00116A  0EFF               	movlw	255
  2761   00116C  2012               	addwfc	(??_UpdateClock+1)^0,w,c
  2762   00116E  6E14               	movwf	(??_UpdateClock+3)^0,c
  2763   001170  5009               	movf	UpdateClock@hours^0,w,c
  2764   001172  6ED9               	movwf	fsr2l,c
  2765   001174  6ADA               	clrf	fsr2h,c
  2766   001176  C013  FFDE         	movff	??_UpdateClock+2,postinc2
  2767   00117A  C014  FFDD         	movff	??_UpdateClock+3,postdec2
  2768   00117E                     
  2769                           ;clock.c: 47:         *DSTstate = 0;
  2770   00117E  500E               	movf	UpdateClock@DSTstate^0,w,c
  2771   001180  6ED9               	movwf	fsr2l,c
  2772   001182  6ADA               	clrf	fsr2h,c
  2773   001184  6ADE               	clrf	postinc2,c
  2774   001186  6ADD               	clrf	postdec2,c
  2775   001188                     l2277:
  2776                           
  2777                           ;clock.c: 51:     if ((*years)%4 == 0 && *months == 2){
  2778   001188  500D               	movf	UpdateClock@years^0,w,c
  2779   00118A  6ED9               	movwf	fsr2l,c
  2780   00118C  6ADA               	clrf	fsr2h,c
  2781   00118E  CFDE F011          	movff	postinc2,??_UpdateClock
  2782   001192  CFDD F012          	movff	postdec2,??_UpdateClock+1
  2783   001196  0E03               	movlw	3
  2784   001198  1611               	andwf	??_UpdateClock^0,f,c
  2785   00119A  0E00               	movlw	0
  2786   00119C  1612               	andwf	(??_UpdateClock+1)^0,f,c
  2787   00119E  5011               	movf	??_UpdateClock^0,w,c
  2788   0011A0  1012               	iorwf	(??_UpdateClock+1)^0,w,c
  2789   0011A2  A4D8               	btfss	status,2,c
  2790   0011A4  EFD6  F008         	goto	u1911
  2791   0011A8  EFD8  F008         	goto	u1910
  2792   0011AC                     u1911:
  2793   0011AC  EFE9  F008         	goto	l2283
  2794   0011B0                     u1910:
  2795   0011B0  500C               	movf	UpdateClock@months^0,w,c
  2796   0011B2  6ED9               	movwf	fsr2l,c
  2797   0011B4  6ADA               	clrf	fsr2h,c
  2798   0011B6  0E02               	movlw	2
  2799   0011B8  18DE               	xorwf	postinc2,w,c
  2800   0011BA  10DE               	iorwf	postinc2,w,c
  2801   0011BC  A4D8               	btfss	status,2,c
  2802   0011BE  EFE3  F008         	goto	u1921
  2803   0011C2  EFE5  F008         	goto	u1920
  2804   0011C6                     u1921:
  2805   0011C6  EFE9  F008         	goto	l2283
  2806   0011CA                     u1920:
  2807   0011CA                     
  2808                           ;clock.c: 52:        DaysInMonth[1] = 29;
  2809   0011CA  0E00               	movlw	0
  2810   0011CC  6E1A               	movwf	(UpdateClock@DaysInMonth+3)^0,c
  2811   0011CE  0E1D               	movlw	29
  2812   0011D0  6E19               	movwf	(UpdateClock@DaysInMonth+2)^0,c
  2813   0011D2                     l2283:
  2814                           
  2815                           ;clock.c: 56:     if (*years%100 == 0 && *months == 2 && *years%400 != 0){
  2816   0011D2  500D               	movf	UpdateClock@years^0,w,c
  2817   0011D4  6ED9               	movwf	fsr2l,c
  2818   0011D6  6ADA               	clrf	fsr2h,c
  2819   0011D8  CFDE F001          	movff	postinc2,___awmod@dividend
  2820   0011DC  CFDD F002          	movff	postdec2,___awmod@dividend+1
  2821   0011E0  0E00               	movlw	0
  2822   0011E2  6E04               	movwf	(___awmod@divisor+1)^0,c
  2823   0011E4  0E64               	movlw	100
  2824   0011E6  6E03               	movwf	___awmod@divisor^0,c
  2825   0011E8  ECF9  F00C         	call	___awmod	;wreg free
  2826   0011EC  5001               	movf	?___awmod^0,w,c
  2827   0011EE  1002               	iorwf	(?___awmod+1)^0,w,c
  2828   0011F0  A4D8               	btfss	status,2,c
  2829   0011F2  EFFD  F008         	goto	u1931
  2830   0011F6  EFFF  F008         	goto	u1930
  2831   0011FA                     u1931:
  2832   0011FA  EF26  F009         	goto	l2291
  2833   0011FE                     u1930:
  2834   0011FE  500C               	movf	UpdateClock@months^0,w,c
  2835   001200  6ED9               	movwf	fsr2l,c
  2836   001202  6ADA               	clrf	fsr2h,c
  2837   001204  0E02               	movlw	2
  2838   001206  18DE               	xorwf	postinc2,w,c
  2839   001208  10DE               	iorwf	postinc2,w,c
  2840   00120A  A4D8               	btfss	status,2,c
  2841   00120C  EF0A  F009         	goto	u1941
  2842   001210  EF0C  F009         	goto	u1940
  2843   001214                     u1941:
  2844   001214  EF26  F009         	goto	l2291
  2845   001218                     u1940:
  2846   001218  500D               	movf	UpdateClock@years^0,w,c
  2847   00121A  6ED9               	movwf	fsr2l,c
  2848   00121C  6ADA               	clrf	fsr2h,c
  2849   00121E  CFDE F001          	movff	postinc2,___awmod@dividend
  2850   001222  CFDD F002          	movff	postdec2,___awmod@dividend+1
  2851   001226  0E01               	movlw	1
  2852   001228  6E04               	movwf	(___awmod@divisor+1)^0,c
  2853   00122A  0E90               	movlw	144
  2854   00122C  6E03               	movwf	___awmod@divisor^0,c
  2855   00122E  ECF9  F00C         	call	___awmod	;wreg free
  2856   001232  5001               	movf	?___awmod^0,w,c
  2857   001234  1002               	iorwf	(?___awmod+1)^0,w,c
  2858   001236  B4D8               	btfsc	status,2,c
  2859   001238  EF20  F009         	goto	u1951
  2860   00123C  EF22  F009         	goto	u1950
  2861   001240                     u1951:
  2862   001240  EF26  F009         	goto	l2291
  2863   001244                     u1950:
  2864   001244                     
  2865                           ;clock.c: 57:             DaysInMonth[1] = 28;
  2866   001244  0E00               	movlw	0
  2867   001246  6E1A               	movwf	(UpdateClock@DaysInMonth+3)^0,c
  2868   001248  0E1C               	movlw	28
  2869   00124A  6E19               	movwf	(UpdateClock@DaysInMonth+2)^0,c
  2870   00124C                     l2291:
  2871                           
  2872                           ;clock.c: 61:     if (*days > (DaysInMonth[*months-1] ) ) {
  2873   00124C  500A               	movf	UpdateClock@days^0,w,c
  2874   00124E  6ED9               	movwf	fsr2l,c
  2875   001250  6ADA               	clrf	fsr2h,c
  2876   001252  500C               	movf	UpdateClock@months^0,w,c
  2877   001254  6EE1               	movwf	fsr1l,c
  2878   001256  6AE2               	clrf	fsr1h,c
  2879   001258  50E7               	movf	indf1,w,c
  2880   00125A  0D02               	mullw	2
  2881   00125C  CFF3 F013          	movff	prodl,??_UpdateClock+2
  2882   001260  0EFE               	movlw	254
  2883   001262  2613               	addwf	(??_UpdateClock+2)^0,f,c
  2884   001264  5013               	movf	(??_UpdateClock+2)^0,w,c
  2885   001266  0F17               	addlw	low UpdateClock@DaysInMonth
  2886   001268  6EE1               	movwf	fsr1l,c
  2887   00126A  6AE2               	clrf	fsr1h,c
  2888   00126C  50DE               	movf	postinc2,w,c
  2889   00126E  5CE6               	subwf	postinc1,w,c
  2890   001270  50E6               	movf	postinc1,w,c
  2891   001272  0A80               	xorlw	128
  2892   001274  6E16               	movwf	(??_UpdateClock+5)^0,c
  2893   001276  50DE               	movf	postinc2,w,c
  2894   001278  0A80               	xorlw	128
  2895   00127A  5816               	subwfb	(??_UpdateClock+5)^0,w,c
  2896   00127C  B0D8               	btfsc	status,0,c
  2897   00127E  EF43  F009         	goto	u1961
  2898   001282  EF45  F009         	goto	u1960
  2899   001286                     u1961:
  2900   001286  EF8A  F009         	goto	l251
  2901   00128A                     u1960:
  2902   00128A                     
  2903                           ;clock.c: 62:         *days = 1;
  2904   00128A  500A               	movf	UpdateClock@days^0,w,c
  2905   00128C  6ED9               	movwf	fsr2l,c
  2906   00128E  6ADA               	clrf	fsr2h,c
  2907   001290  0E01               	movlw	1
  2908   001292  6EDE               	movwf	postinc2,c
  2909   001294  0E00               	movlw	0
  2910   001296  6EDD               	movwf	postdec2,c
  2911   001298                     
  2912                           ;clock.c: 63:         *months = *months + 1 ;
  2913   001298  500C               	movf	UpdateClock@months^0,w,c
  2914   00129A  6ED9               	movwf	fsr2l,c
  2915   00129C  6ADA               	clrf	fsr2h,c
  2916   00129E  CFDE F011          	movff	postinc2,??_UpdateClock
  2917   0012A2  CFDD F012          	movff	postdec2,??_UpdateClock+1
  2918   0012A6  0E01               	movlw	1
  2919   0012A8  2611               	addwf	??_UpdateClock^0,f,c
  2920   0012AA  0E00               	movlw	0
  2921   0012AC  2212               	addwfc	(??_UpdateClock+1)^0,f,c
  2922   0012AE  500C               	movf	UpdateClock@months^0,w,c
  2923   0012B0  6ED9               	movwf	fsr2l,c
  2924   0012B2  6ADA               	clrf	fsr2h,c
  2925   0012B4  C011  FFDE         	movff	??_UpdateClock,postinc2
  2926   0012B8  C012  FFDD         	movff	??_UpdateClock+1,postdec2
  2927   0012BC                     
  2928                           ;clock.c: 65:         if (*months >= 12+1) {
  2929   0012BC  500C               	movf	UpdateClock@months^0,w,c
  2930   0012BE  6ED9               	movwf	fsr2l,c
  2931   0012C0  6ADA               	clrf	fsr2h,c
  2932   0012C2  0E01               	movlw	1
  2933   0012C4  BEDB               	btfsc	plusw2,7,c
  2934   0012C6  EF6F  F009         	goto	u1971
  2935   0012CA  0E01               	movlw	1
  2936   0012CC  50DB               	movf	plusw2,w,c
  2937   0012CE  E109               	bnz	u1970
  2938   0012D0  0E0D               	movlw	13
  2939   0012D2  5CDE               	subwf	postinc2,w,c
  2940   0012D4  A0D8               	btfss	status,0,c
  2941   0012D6  EF6F  F009         	goto	u1971
  2942   0012DA  EF71  F009         	goto	u1970
  2943   0012DE                     u1971:
  2944   0012DE  EF8A  F009         	goto	l251
  2945   0012E2                     u1970:
  2946   0012E2                     
  2947                           ;clock.c: 66:             *months = 1;
  2948   0012E2  500C               	movf	UpdateClock@months^0,w,c
  2949   0012E4  6ED9               	movwf	fsr2l,c
  2950   0012E6  6ADA               	clrf	fsr2h,c
  2951   0012E8  0E01               	movlw	1
  2952   0012EA  6EDE               	movwf	postinc2,c
  2953   0012EC  0E00               	movlw	0
  2954   0012EE  6EDD               	movwf	postdec2,c
  2955   0012F0                     
  2956                           ;clock.c: 67:             *years = *years + 1;
  2957   0012F0  500D               	movf	UpdateClock@years^0,w,c
  2958   0012F2  6ED9               	movwf	fsr2l,c
  2959   0012F4  6ADA               	clrf	fsr2h,c
  2960   0012F6  CFDE F011          	movff	postinc2,??_UpdateClock
  2961   0012FA  CFDD F012          	movff	postdec2,??_UpdateClock+1
  2962   0012FE  0E01               	movlw	1
  2963   001300  2611               	addwf	??_UpdateClock^0,f,c
  2964   001302  0E00               	movlw	0
  2965   001304  2212               	addwfc	(??_UpdateClock+1)^0,f,c
  2966   001306  500D               	movf	UpdateClock@years^0,w,c
  2967   001308  6ED9               	movwf	fsr2l,c
  2968   00130A  6ADA               	clrf	fsr2h,c
  2969   00130C  C011  FFDE         	movff	??_UpdateClock,postinc2
  2970   001310  C012  FFDD         	movff	??_UpdateClock+1,postdec2
  2971   001314                     l251:
  2972   001314  0012               	return		;funcret
  2973   001316                     __end_of_UpdateClock:
  2974                           	callstack 0
  2975                           
  2976 ;; *************** function ___awmod *****************
  2977 ;; Defined at:
  2978 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\awmod.c"
  2979 ;; Parameters:    Size  Location     Type
  2980 ;;  dividend        2    0[COMRAM] int 
  2981 ;;  divisor         2    2[COMRAM] int 
  2982 ;; Auto vars:     Size  Location     Type
  2983 ;;  sign            1    5[COMRAM] unsigned char 
  2984 ;;  counter         1    4[COMRAM] unsigned char 
  2985 ;; Return value:  Size  Location     Type
  2986 ;;                  2    0[COMRAM] int 
  2987 ;; Registers used:
  2988 ;;		wreg, status,2, status,0
  2989 ;; Tracked objects:
  2990 ;;		On entry : 0/0
  2991 ;;		On exit  : 0/0
  2992 ;;		Unchanged: 0/0
  2993 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2994 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2995 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2996 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2997 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2998 ;;Total ram usage:        6 bytes
  2999 ;; Hardware stack levels used: 1
  3000 ;; Hardware stack levels required when called: 1
  3001 ;; This function calls:
  3002 ;;		Nothing
  3003 ;; This function is called by:
  3004 ;;		_UpdateClock
  3005 ;;		_dtoa
  3006 ;; This function uses a non-reentrant model
  3007 ;;
  3008                           
  3009                           	psect	text14
  3010   0019F2                     __ptext14:
  3011                           	callstack 0
  3012   0019F2                     ___awmod:
  3013                           	callstack 25
  3014   0019F2  0E00               	movlw	0
  3015   0019F4  6E06               	movwf	___awmod@sign^0,c
  3016   0019F6  BE02               	btfsc	(___awmod@dividend+1)^0,7,c
  3017   0019F8  EF02  F00D         	goto	u1400
  3018   0019FC  EF00  F00D         	goto	u1401
  3019   001A00                     u1401:
  3020   001A00  EF08  F00D         	goto	l1945
  3021   001A04                     u1400:
  3022   001A04  6C01               	negf	___awmod@dividend^0,c
  3023   001A06  1E02               	comf	(___awmod@dividend+1)^0,f,c
  3024   001A08  B0D8               	btfsc	status,0,c
  3025   001A0A  2A02               	incf	(___awmod@dividend+1)^0,f,c
  3026   001A0C  0E01               	movlw	1
  3027   001A0E  6E06               	movwf	___awmod@sign^0,c
  3028   001A10                     l1945:
  3029   001A10  BE04               	btfsc	(___awmod@divisor+1)^0,7,c
  3030   001A12  EF0F  F00D         	goto	u1410
  3031   001A16  EF0D  F00D         	goto	u1411
  3032   001A1A                     u1411:
  3033   001A1A  EF13  F00D         	goto	l1949
  3034   001A1E                     u1410:
  3035   001A1E  6C03               	negf	___awmod@divisor^0,c
  3036   001A20  1E04               	comf	(___awmod@divisor+1)^0,f,c
  3037   001A22  B0D8               	btfsc	status,0,c
  3038   001A24  2A04               	incf	(___awmod@divisor+1)^0,f,c
  3039   001A26                     l1949:
  3040   001A26  5003               	movf	___awmod@divisor^0,w,c
  3041   001A28  1004               	iorwf	(___awmod@divisor+1)^0,w,c
  3042   001A2A  B4D8               	btfsc	status,2,c
  3043   001A2C  EF1A  F00D         	goto	u1421
  3044   001A30  EF1C  F00D         	goto	u1420
  3045   001A34                     u1421:
  3046   001A34  EF40  F00D         	goto	l1965
  3047   001A38                     u1420:
  3048   001A38  0E01               	movlw	1
  3049   001A3A  6E05               	movwf	___awmod@counter^0,c
  3050   001A3C  EF24  F00D         	goto	l1955
  3051   001A40                     l1953:
  3052   001A40  90D8               	bcf	status,0,c
  3053   001A42  3603               	rlcf	___awmod@divisor^0,f,c
  3054   001A44  3604               	rlcf	(___awmod@divisor+1)^0,f,c
  3055   001A46  2A05               	incf	___awmod@counter^0,f,c
  3056   001A48                     l1955:
  3057   001A48  AE04               	btfss	(___awmod@divisor+1)^0,7,c
  3058   001A4A  EF29  F00D         	goto	u1431
  3059   001A4E  EF2B  F00D         	goto	u1430
  3060   001A52                     u1431:
  3061   001A52  EF20  F00D         	goto	l1953
  3062   001A56                     u1430:
  3063   001A56                     l1957:
  3064   001A56  5003               	movf	___awmod@divisor^0,w,c
  3065   001A58  5C01               	subwf	___awmod@dividend^0,w,c
  3066   001A5A  5004               	movf	(___awmod@divisor+1)^0,w,c
  3067   001A5C  5802               	subwfb	(___awmod@dividend+1)^0,w,c
  3068   001A5E  A0D8               	btfss	status,0,c
  3069   001A60  EF34  F00D         	goto	u1441
  3070   001A64  EF36  F00D         	goto	u1440
  3071   001A68                     u1441:
  3072   001A68  EF3A  F00D         	goto	l1961
  3073   001A6C                     u1440:
  3074   001A6C  5003               	movf	___awmod@divisor^0,w,c
  3075   001A6E  5E01               	subwf	___awmod@dividend^0,f,c
  3076   001A70  5004               	movf	(___awmod@divisor+1)^0,w,c
  3077   001A72  5A02               	subwfb	(___awmod@dividend+1)^0,f,c
  3078   001A74                     l1961:
  3079   001A74  90D8               	bcf	status,0,c
  3080   001A76  3204               	rrcf	(___awmod@divisor+1)^0,f,c
  3081   001A78  3203               	rrcf	___awmod@divisor^0,f,c
  3082   001A7A  2E05               	decfsz	___awmod@counter^0,f,c
  3083   001A7C  EF2B  F00D         	goto	l1957
  3084   001A80                     l1965:
  3085   001A80  5006               	movf	___awmod@sign^0,w,c
  3086   001A82  B4D8               	btfsc	status,2,c
  3087   001A84  EF46  F00D         	goto	u1451
  3088   001A88  EF48  F00D         	goto	u1450
  3089   001A8C                     u1451:
  3090   001A8C  EF4C  F00D         	goto	l1969
  3091   001A90                     u1450:
  3092   001A90  6C01               	negf	___awmod@dividend^0,c
  3093   001A92  1E02               	comf	(___awmod@dividend+1)^0,f,c
  3094   001A94  B0D8               	btfsc	status,0,c
  3095   001A96  2A02               	incf	(___awmod@dividend+1)^0,f,c
  3096   001A98                     l1969:
  3097   001A98  C001  F001         	movff	___awmod@dividend,?___awmod
  3098   001A9C  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
  3099   001AA0  0012               	return		;funcret
  3100   001AA2                     __end_of___awmod:
  3101                           	callstack 0
  3102                           
  3103 ;; *************** function _Timer0_init *****************
  3104 ;; Defined at:
  3105 ;;		line 8 in file "timers.c"
  3106 ;; Parameters:    Size  Location     Type
  3107 ;;		None
  3108 ;; Auto vars:     Size  Location     Type
  3109 ;;		None
  3110 ;; Return value:  Size  Location     Type
  3111 ;;                  1    wreg      void 
  3112 ;; Registers used:
  3113 ;;		wreg, status,2
  3114 ;; Tracked objects:
  3115 ;;		On entry : 0/0
  3116 ;;		On exit  : 0/0
  3117 ;;		Unchanged: 0/0
  3118 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3119 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3120 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3121 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3122 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3123 ;;Total ram usage:        0 bytes
  3124 ;; Hardware stack levels used: 1
  3125 ;; Hardware stack levels required when called: 1
  3126 ;; This function calls:
  3127 ;;		Nothing
  3128 ;; This function is called by:
  3129 ;;		_main
  3130 ;; This function uses a non-reentrant model
  3131 ;;
  3132                           
  3133                           	psect	text15
  3134   001EEA                     __ptext15:
  3135                           	callstack 0
  3136   001EEA                     _Timer0_init:
  3137                           	callstack 29
  3138   001EEA                     
  3139                           ;timers.c: 10:     T0CON1bits.T0CS=0b010;
  3140   001EEA  50D6               	movf	214,w,c	;volatile
  3141   001EEC  0B1F               	andlw	-225
  3142   001EEE  0940               	iorlw	64
  3143   001EF0  6ED6               	movwf	214,c	;volatile
  3144   001EF2                     
  3145                           ;timers.c: 11:     T0CON1bits.T0ASYNC=1;
  3146   001EF2  88D6               	bsf	214,4,c	;volatile
  3147                           
  3148                           ;timers.c: 13:     T0CON1bits.T0CKPS=0b1000;
  3149   001EF4  50D6               	movf	214,w,c	;volatile
  3150   001EF6  0BF0               	andlw	-16
  3151   001EF8  0908               	iorlw	8
  3152   001EFA  6ED6               	movwf	214,c	;volatile
  3153   001EFC                     
  3154                           ;timers.c: 15:     T0CON0bits.T016BIT=1;
  3155   001EFC  88D5               	bsf	213,4,c	;volatile
  3156                           
  3157                           ;timers.c: 18:     TMR0H = 0b00001011;
  3158   001EFE  0E0B               	movlw	11
  3159   001F00  6ED4               	movwf	212,c	;volatile
  3160                           
  3161                           ;timers.c: 19:     TMR0L = 0b11011100;
  3162   001F02  0EDC               	movlw	220
  3163   001F04  6ED3               	movwf	211,c	;volatile
  3164   001F06                     
  3165                           ;timers.c: 35:     T0CON0bits.T0EN=1;
  3166   001F06  8ED5               	bsf	213,7,c	;volatile
  3167   001F08  0012               	return		;funcret
  3168   001F0A                     __end_of_Timer0_init:
  3169                           	callstack 0
  3170                           
  3171 ;; *************** function _LEDarray_init *****************
  3172 ;; Defined at:
  3173 ;;		line 8 in file "LEDarray.c"
  3174 ;; Parameters:    Size  Location     Type
  3175 ;;		None
  3176 ;; Auto vars:     Size  Location     Type
  3177 ;;		None
  3178 ;; Return value:  Size  Location     Type
  3179 ;;                  1    wreg      void 
  3180 ;; Registers used:
  3181 ;;		None
  3182 ;; Tracked objects:
  3183 ;;		On entry : 0/0
  3184 ;;		On exit  : 0/0
  3185 ;;		Unchanged: 0/0
  3186 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3187 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3188 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3189 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3190 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3191 ;;Total ram usage:        0 bytes
  3192 ;; Hardware stack levels used: 1
  3193 ;; Hardware stack levels required when called: 1
  3194 ;; This function calls:
  3195 ;;		Nothing
  3196 ;; This function is called by:
  3197 ;;		_main
  3198 ;; This function uses a non-reentrant model
  3199 ;;
  3200                           
  3201                           	psect	text16
  3202   001EA0                     __ptext16:
  3203                           	callstack 0
  3204   001EA0                     _LEDarray_init:
  3205                           	callstack 29
  3206   001EA0                     
  3207                           ;LEDarray.c: 16:     TRISGbits.TRISG0 = 0;
  3208   001EA0  9087               	bcf	135,0,c	;volatile
  3209                           
  3210                           ;LEDarray.c: 17:     LATGbits.LATG0 = 0;
  3211   001EA2  907F               	bcf	127,0,c	;volatile
  3212                           
  3213                           ;LEDarray.c: 19:     TRISGbits.TRISG1 = 0;
  3214   001EA4  9287               	bcf	135,1,c	;volatile
  3215                           
  3216                           ;LEDarray.c: 20:     LATGbits.LATG1 = 0;
  3217   001EA6  927F               	bcf	127,1,c	;volatile
  3218                           
  3219                           ;LEDarray.c: 22:     TRISAbits.TRISA2 = 0;
  3220   001EA8  9481               	bcf	129,2,c	;volatile
  3221                           
  3222                           ;LEDarray.c: 23:     LATAbits.LATA2 = 0;
  3223   001EAA  9479               	bcf	121,2,c	;volatile
  3224                           
  3225                           ;LEDarray.c: 25:     TRISFbits.TRISF6 = 0;
  3226   001EAC  9C86               	bcf	134,6,c	;volatile
  3227                           
  3228                           ;LEDarray.c: 26:     LATFbits.LATF6 = 0;
  3229   001EAE  9C7E               	bcf	126,6,c	;volatile
  3230                           
  3231                           ;LEDarray.c: 28:     TRISAbits.TRISA4 = 0;
  3232   001EB0  9881               	bcf	129,4,c	;volatile
  3233                           
  3234                           ;LEDarray.c: 29:     LATAbits.LATA4 = 0;
  3235   001EB2  9879               	bcf	121,4,c	;volatile
  3236                           
  3237                           ;LEDarray.c: 31:     TRISAbits.TRISA5 = 0;
  3238   001EB4  9A81               	bcf	129,5,c	;volatile
  3239                           
  3240                           ;LEDarray.c: 32:     LATAbits.LATA5 = 0;
  3241   001EB6  9A79               	bcf	121,5,c	;volatile
  3242                           
  3243                           ;LEDarray.c: 34:     TRISFbits.TRISF0 = 0;
  3244   001EB8  9086               	bcf	134,0,c	;volatile
  3245                           
  3246                           ;LEDarray.c: 35:     LATFbits.LATF0 = 0;
  3247   001EBA  907E               	bcf	126,0,c	;volatile
  3248                           
  3249                           ;LEDarray.c: 37:     TRISBbits.TRISB0 = 0;
  3250   001EBC  9082               	bcf	130,0,c	;volatile
  3251                           
  3252                           ;LEDarray.c: 38:     LATBbits.LATB0 = 0;
  3253   001EBE  907A               	bcf	122,0,c	;volatile
  3254                           
  3255                           ;LEDarray.c: 40:     TRISBbits.TRISB1 = 0;
  3256   001EC0  9282               	bcf	130,1,c	;volatile
  3257                           
  3258                           ;LEDarray.c: 41:     LATBbits.LATB1 = 0;
  3259   001EC2  927A               	bcf	122,1,c	;volatile
  3260   001EC4  0012               	return		;funcret
  3261   001EC6                     __end_of_LEDarray_init:
  3262                           	callstack 0
  3263                           
  3264 ;; *************** function _LEDarray_disp_bin *****************
  3265 ;; Defined at:
  3266 ;;		line 49 in file "LEDarray.c"
  3267 ;; Parameters:    Size  Location     Type
  3268 ;;  number          2    0[COMRAM] unsigned int 
  3269 ;; Auto vars:     Size  Location     Type
  3270 ;;		None
  3271 ;; Return value:  Size  Location     Type
  3272 ;;                  1    wreg      void 
  3273 ;; Registers used:
  3274 ;;		None
  3275 ;; Tracked objects:
  3276 ;;		On entry : 0/0
  3277 ;;		On exit  : 0/0
  3278 ;;		Unchanged: 0/0
  3279 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3280 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3281 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3282 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3283 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3284 ;;Total ram usage:        2 bytes
  3285 ;; Hardware stack levels used: 1
  3286 ;; Hardware stack levels required when called: 1
  3287 ;; This function calls:
  3288 ;;		Nothing
  3289 ;; This function is called by:
  3290 ;;		_main
  3291 ;; This function uses a non-reentrant model
  3292 ;;
  3293                           
  3294                           	psect	text17
  3295   001866                     __ptext17:
  3296                           	callstack 0
  3297   001866                     _LEDarray_disp_bin:
  3298                           	callstack 29
  3299   001866                     
  3300                           ;LEDarray.c: 49: void LEDarray_disp_bin(unsigned int number);LEDarray.c: 50: {;LEDarray.
      +                          c: 53:     if (number & 0b000000001){ LATGbits.LATG0 = 1 ; }
  3301   001866  A001               	btfss	LEDarray_disp_bin@number^0,0,c
  3302   001868  EF38  F00C         	goto	u1981
  3303   00186C  EF3A  F00C         	goto	u1980
  3304   001870                     u1981:
  3305   001870  EF3D  F00C         	goto	l121
  3306   001874                     u1980:
  3307   001874  807F               	bsf	127,0,c	;volatile
  3308   001876  EF3E  F00C         	goto	l122
  3309   00187A                     l121:
  3310   00187A  907F               	bcf	127,0,c	;volatile
  3311   00187C                     l122:
  3312                           
  3313                           ;LEDarray.c: 56:     if (number & 0b000000010){ LATGbits.LATG1 = 1 ; }
  3314   00187C  A201               	btfss	LEDarray_disp_bin@number^0,1,c
  3315   00187E  EF43  F00C         	goto	u1991
  3316   001882  EF45  F00C         	goto	u1990
  3317   001886                     u1991:
  3318   001886  EF48  F00C         	goto	l123
  3319   00188A                     u1990:
  3320   00188A  827F               	bsf	127,1,c	;volatile
  3321   00188C  EF49  F00C         	goto	l124
  3322   001890                     l123:
  3323   001890  927F               	bcf	127,1,c	;volatile
  3324   001892                     l124:
  3325                           
  3326                           ;LEDarray.c: 59:     if (number & 0b000000100){ LATAbits.LATA2 = 1 ; }
  3327   001892  A401               	btfss	LEDarray_disp_bin@number^0,2,c
  3328   001894  EF4E  F00C         	goto	u2001
  3329   001898  EF50  F00C         	goto	u2000
  3330   00189C                     u2001:
  3331   00189C  EF53  F00C         	goto	l125
  3332   0018A0                     u2000:
  3333   0018A0  8479               	bsf	121,2,c	;volatile
  3334   0018A2  EF54  F00C         	goto	l126
  3335   0018A6                     l125:
  3336   0018A6  9479               	bcf	121,2,c	;volatile
  3337   0018A8                     l126:
  3338                           
  3339                           ;LEDarray.c: 62:     if (number & 0b000001000){ LATFbits.LATF6 = 1 ; }
  3340   0018A8  A601               	btfss	LEDarray_disp_bin@number^0,3,c
  3341   0018AA  EF59  F00C         	goto	u2011
  3342   0018AE  EF5B  F00C         	goto	u2010
  3343   0018B2                     u2011:
  3344   0018B2  EF5E  F00C         	goto	l127
  3345   0018B6                     u2010:
  3346   0018B6  8C7E               	bsf	126,6,c	;volatile
  3347   0018B8  EF5F  F00C         	goto	l128
  3348   0018BC                     l127:
  3349   0018BC  9C7E               	bcf	126,6,c	;volatile
  3350   0018BE                     l128:
  3351                           
  3352                           ;LEDarray.c: 65:     if (number & 0b000010000){ LATAbits.LATA4 = 1 ; }
  3353   0018BE  A801               	btfss	LEDarray_disp_bin@number^0,4,c
  3354   0018C0  EF64  F00C         	goto	u2021
  3355   0018C4  EF66  F00C         	goto	u2020
  3356   0018C8                     u2021:
  3357   0018C8  EF69  F00C         	goto	l129
  3358   0018CC                     u2020:
  3359   0018CC  8879               	bsf	121,4,c	;volatile
  3360   0018CE  EF6A  F00C         	goto	l130
  3361   0018D2                     l129:
  3362   0018D2  9879               	bcf	121,4,c	;volatile
  3363   0018D4                     l130:
  3364                           
  3365                           ;LEDarray.c: 68:     if (number & 0b000100000){ LATAbits.LATA5 = 1 ; }
  3366   0018D4  AA01               	btfss	LEDarray_disp_bin@number^0,5,c
  3367   0018D6  EF6F  F00C         	goto	u2031
  3368   0018DA  EF71  F00C         	goto	u2030
  3369   0018DE                     u2031:
  3370   0018DE  EF74  F00C         	goto	l131
  3371   0018E2                     u2030:
  3372   0018E2  8A79               	bsf	121,5,c	;volatile
  3373   0018E4  EF75  F00C         	goto	l132
  3374   0018E8                     l131:
  3375   0018E8  9A79               	bcf	121,5,c	;volatile
  3376   0018EA                     l132:
  3377                           
  3378                           ;LEDarray.c: 71:     if (number & 0b001000000){ LATFbits.LATF0 = 1 ; }
  3379   0018EA  AC01               	btfss	LEDarray_disp_bin@number^0,6,c
  3380   0018EC  EF7A  F00C         	goto	u2041
  3381   0018F0  EF7C  F00C         	goto	u2040
  3382   0018F4                     u2041:
  3383   0018F4  EF7F  F00C         	goto	l133
  3384   0018F8                     u2040:
  3385   0018F8  807E               	bsf	126,0,c	;volatile
  3386   0018FA  EF80  F00C         	goto	l134
  3387   0018FE                     l133:
  3388   0018FE  907E               	bcf	126,0,c	;volatile
  3389   001900                     l134:
  3390                           
  3391                           ;LEDarray.c: 74:     if (number & 0b010000000){ LATBbits.LATB0 = 1 ; }
  3392   001900  AE01               	btfss	LEDarray_disp_bin@number^0,7,c
  3393   001902  EF85  F00C         	goto	u2051
  3394   001906  EF87  F00C         	goto	u2050
  3395   00190A                     u2051:
  3396   00190A  EF8A  F00C         	goto	l135
  3397   00190E                     u2050:
  3398   00190E  807A               	bsf	122,0,c	;volatile
  3399   001910  EF8B  F00C         	goto	l136
  3400   001914                     l135:
  3401   001914  907A               	bcf	122,0,c	;volatile
  3402   001916                     l136:
  3403                           
  3404                           ;LEDarray.c: 77:     if (number & 0b100000000){ LATBbits.LATB1 = 1 ; }
  3405   001916  A002               	btfss	(LEDarray_disp_bin@number+1)^0,0,c
  3406   001918  EF90  F00C         	goto	u2061
  3407   00191C  EF92  F00C         	goto	u2060
  3408   001920                     u2061:
  3409   001920  EF95  F00C         	goto	l137
  3410   001924                     u2060:
  3411   001924  827A               	bsf	122,1,c	;volatile
  3412   001926  EF96  F00C         	goto	l139
  3413   00192A                     l137:
  3414   00192A  927A               	bcf	122,1,c	;volatile
  3415   00192C                     l139:
  3416   00192C  0012               	return		;funcret
  3417   00192E                     __end_of_LEDarray_disp_bin:
  3418                           	callstack 0
  3419                           
  3420 ;; *************** function _LCD_setline *****************
  3421 ;; Defined at:
  3422 ;;		line 120 in file "LCD.c"
  3423 ;; Parameters:    Size  Location     Type
  3424 ;;  line            1    wreg     unsigned char 
  3425 ;; Auto vars:     Size  Location     Type
  3426 ;;  line            1    3[COMRAM] unsigned char 
  3427 ;; Return value:  Size  Location     Type
  3428 ;;                  1    wreg      void 
  3429 ;; Registers used:
  3430 ;;		wreg, status,2, status,0, cstack
  3431 ;; Tracked objects:
  3432 ;;		On entry : 0/0
  3433 ;;		On exit  : 0/0
  3434 ;;		Unchanged: 0/0
  3435 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3436 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3437 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3438 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3439 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3440 ;;Total ram usage:        1 bytes
  3441 ;; Hardware stack levels used: 1
  3442 ;; Hardware stack levels required when called: 4
  3443 ;; This function calls:
  3444 ;;		_LCD_sendbyte
  3445 ;; This function is called by:
  3446 ;;		_main
  3447 ;; This function uses a non-reentrant model
  3448 ;;
  3449                           
  3450                           	psect	text18
  3451   001DAA                     __ptext18:
  3452                           	callstack 0
  3453   001DAA                     _LCD_setline:
  3454                           	callstack 26
  3455                           
  3456                           ;incstack = 0
  3457                           ;LCD_setline@line stored from wreg
  3458   001DAA  6E04               	movwf	LCD_setline@line^0,c
  3459   001DAC                     
  3460                           ;LCD.c: 120: void LCD_setline (char line);LCD.c: 121: {;LCD.c: 124:     if (line == 2){
  3461   001DAC  0E02               	movlw	2
  3462   001DAE  1804               	xorwf	LCD_setline@line^0,w,c
  3463   001DB0  A4D8               	btfss	status,2,c
  3464   001DB2  EFDD  F00E         	goto	u2071
  3465   001DB6  EFDF  F00E         	goto	u2070
  3466   001DBA                     u2071:
  3467   001DBA  EFE4  F00E         	goto	l2327
  3468   001DBE                     u2070:
  3469   001DBE                     
  3470                           ;LCD.c: 125:         LCD_sendbyte(0xC0,0);
  3471   001DBE  0E00               	movlw	0
  3472   001DC0  6E02               	movwf	LCD_sendbyte@type^0,c
  3473   001DC2  0EC0               	movlw	192
  3474   001DC4  EC63  F00F         	call	_LCD_sendbyte
  3475   001DC8                     l2327:
  3476                           
  3477                           ;LCD.c: 128:     if (line==1){
  3478   001DC8  0404               	decf	LCD_setline@line^0,w,c
  3479   001DCA  A4D8               	btfss	status,2,c
  3480   001DCC  EFEA  F00E         	goto	u2081
  3481   001DD0  EFEC  F00E         	goto	u2080
  3482   001DD4                     u2081:
  3483   001DD4  EFF1  F00E         	goto	l292
  3484   001DD8                     u2080:
  3485   001DD8                     
  3486                           ;LCD.c: 129:         LCD_sendbyte(0x80,0);
  3487   001DD8  0E00               	movlw	0
  3488   001DDA  6E02               	movwf	LCD_sendbyte@type^0,c
  3489   001DDC  0E80               	movlw	128
  3490   001DDE  EC63  F00F         	call	_LCD_sendbyte
  3491   001DE2                     l292:
  3492   001DE2  0012               	return		;funcret
  3493   001DE4                     __end_of_LCD_setline:
  3494                           	callstack 0
  3495                           
  3496 ;; *************** function _LCD_sendstring *****************
  3497 ;; Defined at:
  3498 ;;		line 136 in file "LCD.c"
  3499 ;; Parameters:    Size  Location     Type
  3500 ;;  string          1    3[COMRAM] PTR unsigned char 
  3501 ;;		 -> main@buf(20), 
  3502 ;; Auto vars:     Size  Location     Type
  3503 ;;		None
  3504 ;; Return value:  Size  Location     Type
  3505 ;;                  1    wreg      void 
  3506 ;; Registers used:
  3507 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3508 ;; Tracked objects:
  3509 ;;		On entry : 0/0
  3510 ;;		On exit  : 0/0
  3511 ;;		Unchanged: 0/0
  3512 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3513 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3514 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3515 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3516 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3517 ;;Total ram usage:        1 bytes
  3518 ;; Hardware stack levels used: 1
  3519 ;; Hardware stack levels required when called: 4
  3520 ;; This function calls:
  3521 ;;		_LCD_sendbyte
  3522 ;; This function is called by:
  3523 ;;		_main
  3524 ;;		_ADC2String
  3525 ;; This function uses a non-reentrant model
  3526 ;;
  3527                           
  3528                           	psect	text19
  3529   001E4C                     __ptext19:
  3530                           	callstack 0
  3531   001E4C                     _LCD_sendstring:
  3532                           	callstack 26
  3533   001E4C                     
  3534                           ;LCD.c: 136: void LCD_sendstring(char *string);LCD.c: 137: {;LCD.c: 139:     while(*stri
      +                          ng != 0){
  3535   001E4C  EF31  F00F         	goto	l2349
  3536   001E50                     l2345:
  3537                           
  3538                           ;LCD.c: 140:   LCD_sendbyte(*string++,1);
  3539   001E50  0E01               	movlw	1
  3540   001E52  6E02               	movwf	LCD_sendbyte@type^0,c
  3541   001E54  5004               	movf	LCD_sendstring@string^0,w,c
  3542   001E56  6ED9               	movwf	fsr2l,c
  3543   001E58  6ADA               	clrf	fsr2h,c
  3544   001E5A  50DF               	movf	indf2,w,c
  3545   001E5C  EC63  F00F         	call	_LCD_sendbyte
  3546   001E60  2A04               	incf	LCD_sendstring@string^0,f,c
  3547   001E62                     l2349:
  3548                           
  3549                           ;LCD.c: 139:     while(*string != 0){
  3550   001E62  5004               	movf	LCD_sendstring@string^0,w,c
  3551   001E64  6ED9               	movwf	fsr2l,c
  3552   001E66  6ADA               	clrf	fsr2h,c
  3553   001E68  50DF               	movf	indf2,w,c
  3554   001E6A  A4D8               	btfss	status,2,c
  3555   001E6C  EF3A  F00F         	goto	u2091
  3556   001E70  EF3C  F00F         	goto	u2090
  3557   001E74                     u2091:
  3558   001E74  EF28  F00F         	goto	l2345
  3559   001E78                     u2090:
  3560   001E78  0012               	return		;funcret
  3561   001E7A                     __end_of_LCD_sendstring:
  3562                           	callstack 0
  3563                           
  3564 ;; *************** function _LCD_Init *****************
  3565 ;; Defined at:
  3566 ;;		line 57 in file "LCD.c"
  3567 ;; Parameters:    Size  Location     Type
  3568 ;;		None
  3569 ;; Auto vars:     Size  Location     Type
  3570 ;;		None
  3571 ;; Return value:  Size  Location     Type
  3572 ;;                  1    wreg      void 
  3573 ;; Registers used:
  3574 ;;		wreg, status,2, status,0, cstack
  3575 ;; Tracked objects:
  3576 ;;		On entry : 0/0
  3577 ;;		On exit  : 0/0
  3578 ;;		Unchanged: 0/0
  3579 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3580 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3581 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3582 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3583 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3584 ;;Total ram usage:        2 bytes
  3585 ;; Hardware stack levels used: 1
  3586 ;; Hardware stack levels required when called: 4
  3587 ;; This function calls:
  3588 ;;		_LCD_sendbyte
  3589 ;;		_LCD_sendnibble
  3590 ;; This function is called by:
  3591 ;;		_main
  3592 ;; This function uses a non-reentrant model
  3593 ;;
  3594                           
  3595                           	psect	text20
  3596   001746                     __ptext20:
  3597                           	callstack 0
  3598   001746                     _LCD_Init:
  3599                           	callstack 26
  3600   001746                     
  3601                           ;LCD.c: 69:     TRISBbits.TRISB3 = 0;
  3602   001746  9682               	bcf	130,3,c	;volatile
  3603                           
  3604                           ;LCD.c: 71:     LATBbits.LATB3 = 0;
  3605   001748  967A               	bcf	122,3,c	;volatile
  3606                           
  3607                           ;LCD.c: 73:     TRISBbits.TRISB2 = 0;
  3608   00174A  9482               	bcf	130,2,c	;volatile
  3609                           
  3610                           ;LCD.c: 75:     LATBbits.LATB2 = 0;
  3611   00174C  947A               	bcf	122,2,c	;volatile
  3612                           
  3613                           ;LCD.c: 77:     TRISEbits.TRISE3 = 0;
  3614   00174E  9685               	bcf	133,3,c	;volatile
  3615                           
  3616                           ;LCD.c: 79:     LATEbits.LATE3 = 0;
  3617   001750  967D               	bcf	125,3,c	;volatile
  3618                           
  3619                           ;LCD.c: 81:     TRISEbits.TRISE1 = 0;
  3620   001752  9285               	bcf	133,1,c	;volatile
  3621                           
  3622                           ;LCD.c: 83:     LATEbits.LATE1 = 0;
  3623   001754  927D               	bcf	125,1,c	;volatile
  3624                           
  3625                           ;LCD.c: 85:     TRISCbits.TRISC2 = 0;
  3626   001756  9483               	bcf	131,2,c	;volatile
  3627                           
  3628                           ;LCD.c: 86:     LATCbits.LATC2 = 0;
  3629   001758  947B               	bcf	123,2,c	;volatile
  3630                           
  3631                           ;LCD.c: 88:     TRISCbits.TRISC6 = 0;
  3632   00175A  9C83               	bcf	131,6,c	;volatile
  3633                           
  3634                           ;LCD.c: 89:     LATCbits.LATC6 = 0;
  3635   00175C  9C7B               	bcf	123,6,c	;volatile
  3636   00175E                     
  3637                           ;LCD.c: 91:     _delay((unsigned long)((150)*(64000000/4000.0)));
  3638   00175E  0E0D               	movlw	13
  3639   001760  6E05               	movwf	(??_LCD_Init+1)^0,c
  3640   001762  0E2D               	movlw	45
  3641   001764  6E04               	movwf	??_LCD_Init^0,c
  3642   001766  0ED8               	movlw	216
  3643   001768                     u2477:
  3644   001768  2EE8               	decfsz	wreg,f,c
  3645   00176A  D7FE               	bra	u2477
  3646   00176C  2E04               	decfsz	??_LCD_Init^0,f,c
  3647   00176E  D7FC               	bra	u2477
  3648   001770  2E05               	decfsz	(??_LCD_Init+1)^0,f,c
  3649   001772  D7FA               	bra	u2477
  3650   001774                     
  3651                           ;LCD.c: 92:     LCD_sendnibble(0b0011);
  3652   001774  0E03               	movlw	3
  3653   001776  EC42  F00E         	call	_LCD_sendnibble
  3654   00177A                     
  3655                           ;LCD.c: 93:     _delay((unsigned long)((5)*(64000000/4000.0)));
  3656   00177A  0E68               	movlw	104
  3657   00177C  6E04               	movwf	??_LCD_Init^0,c
  3658   00177E  0EE4               	movlw	228
  3659   001780                     u2487:
  3660   001780  2EE8               	decfsz	wreg,f,c
  3661   001782  D7FE               	bra	u2487
  3662   001784  2E04               	decfsz	??_LCD_Init^0,f,c
  3663   001786  D7FC               	bra	u2487
  3664   001788  D000               	nop2	
  3665                           
  3666                           ;LCD.c: 94:     LCD_sendnibble(0b0011);
  3667   00178A  0E03               	movlw	3
  3668   00178C  EC42  F00E         	call	_LCD_sendnibble
  3669   001790                     
  3670                           ;LCD.c: 95:     _delay((unsigned long)((150)*(64000000/4000000.0)));
  3671   001790  0E04               	movlw	4
  3672   001792  6E04               	movwf	??_LCD_Init^0,c
  3673   001794  0E1C               	movlw	28
  3674   001796                     u2497:
  3675   001796  2EE8               	decfsz	wreg,f,c
  3676   001798  D7FE               	bra	u2497
  3677   00179A  2E04               	decfsz	??_LCD_Init^0,f,c
  3678   00179C  D7FC               	bra	u2497
  3679   00179E  D000               	nop2	
  3680   0017A0                     
  3681                           ;LCD.c: 96:     LCD_sendnibble(0b0011);
  3682   0017A0  0E03               	movlw	3
  3683   0017A2  EC42  F00E         	call	_LCD_sendnibble
  3684                           
  3685                           ;LCD.c: 97:     _delay((unsigned long)((150)*(64000000/4000000.0)));
  3686   0017A6  0E04               	movlw	4
  3687   0017A8  6E04               	movwf	??_LCD_Init^0,c
  3688   0017AA  0E1C               	movlw	28
  3689   0017AC                     u2507:
  3690   0017AC  2EE8               	decfsz	wreg,f,c
  3691   0017AE  D7FE               	bra	u2507
  3692   0017B0  2E04               	decfsz	??_LCD_Init^0,f,c
  3693   0017B2  D7FC               	bra	u2507
  3694   0017B4  D000               	nop2	
  3695   0017B6                     
  3696                           ;LCD.c: 98:     LCD_sendnibble(0b0010);
  3697   0017B6  0E02               	movlw	2
  3698   0017B8  EC42  F00E         	call	_LCD_sendnibble
  3699   0017BC                     
  3700                           ;LCD.c: 99:     _delay((unsigned long)((150)*(64000000/4000000.0)));
  3701   0017BC  0E04               	movlw	4
  3702   0017BE  6E04               	movwf	??_LCD_Init^0,c
  3703   0017C0  0E1C               	movlw	28
  3704   0017C2                     u2517:
  3705   0017C2  2EE8               	decfsz	wreg,f,c
  3706   0017C4  D7FE               	bra	u2517
  3707   0017C6  2E04               	decfsz	??_LCD_Init^0,f,c
  3708   0017C8  D7FC               	bra	u2517
  3709   0017CA  D000               	nop2	
  3710   0017CC                     
  3711                           ;LCD.c: 100:     LCD_sendbyte(0b00101100,0);
  3712   0017CC  0E00               	movlw	0
  3713   0017CE  6E02               	movwf	LCD_sendbyte@type^0,c
  3714   0017D0  0E2C               	movlw	44
  3715   0017D2  EC63  F00F         	call	_LCD_sendbyte
  3716   0017D6                     
  3717                           ;LCD.c: 101:     _delay((unsigned long)((100)*(64000000/4000000.0)));
  3718   0017D6  0EE4               	movlw	228
  3719   0017D8                     u2527:
  3720   0017D8  D000               	nop2	
  3721   0017DA  D000               	nop2	
  3722   0017DC  2EE8               	decfsz	wreg,f,c
  3723   0017DE  D7FC               	bra	u2527
  3724   0017E0  D000               	nop2	
  3725   0017E2  D000               	nop2	
  3726   0017E4                     
  3727                           ;LCD.c: 102:     LCD_sendbyte(0b00001000,0);
  3728   0017E4  0E00               	movlw	0
  3729   0017E6  6E02               	movwf	LCD_sendbyte@type^0,c
  3730   0017E8  0E08               	movlw	8
  3731   0017EA  EC63  F00F         	call	_LCD_sendbyte
  3732   0017EE                     
  3733                           ;LCD.c: 103:     _delay((unsigned long)((100)*(64000000/4000.0)));
  3734   0017EE  0E09               	movlw	9
  3735   0017F0  6E05               	movwf	(??_LCD_Init+1)^0,c
  3736   0017F2  0E1E               	movlw	30
  3737   0017F4  6E04               	movwf	??_LCD_Init^0,c
  3738   0017F6  0EE4               	movlw	228
  3739   0017F8                     u2537:
  3740   0017F8  2EE8               	decfsz	wreg,f,c
  3741   0017FA  D7FE               	bra	u2537
  3742   0017FC  2E04               	decfsz	??_LCD_Init^0,f,c
  3743   0017FE  D7FC               	bra	u2537
  3744   001800  2E05               	decfsz	(??_LCD_Init+1)^0,f,c
  3745   001802  D7FA               	bra	u2537
  3746   001804  D000               	nop2	
  3747   001806                     
  3748                           ;LCD.c: 104:     LCD_sendbyte(0b00000001,0);
  3749   001806  0E00               	movlw	0
  3750   001808  6E02               	movwf	LCD_sendbyte@type^0,c
  3751   00180A  0E01               	movlw	1
  3752   00180C  EC63  F00F         	call	_LCD_sendbyte
  3753   001810                     
  3754                           ;LCD.c: 105:     _delay((unsigned long)((5)*(64000000/4000.0)));
  3755   001810  0E68               	movlw	104
  3756   001812  6E04               	movwf	??_LCD_Init^0,c
  3757   001814  0EE4               	movlw	228
  3758   001816                     u2547:
  3759   001816  2EE8               	decfsz	wreg,f,c
  3760   001818  D7FE               	bra	u2547
  3761   00181A  2E04               	decfsz	??_LCD_Init^0,f,c
  3762   00181C  D7FC               	bra	u2547
  3763   00181E  D000               	nop2	
  3764   001820                     
  3765                           ;LCD.c: 106:     LCD_sendbyte(0b00000110,0);
  3766   001820  0E00               	movlw	0
  3767   001822  6E02               	movwf	LCD_sendbyte@type^0,c
  3768   001824  0E06               	movlw	6
  3769   001826  EC63  F00F         	call	_LCD_sendbyte
  3770   00182A                     
  3771                           ;LCD.c: 107:     _delay((unsigned long)((100)*(64000000/4000.0)));
  3772   00182A  0E09               	movlw	9
  3773   00182C  6E05               	movwf	(??_LCD_Init+1)^0,c
  3774   00182E  0E1E               	movlw	30
  3775   001830  6E04               	movwf	??_LCD_Init^0,c
  3776   001832  0EE4               	movlw	228
  3777   001834                     u2557:
  3778   001834  2EE8               	decfsz	wreg,f,c
  3779   001836  D7FE               	bra	u2557
  3780   001838  2E04               	decfsz	??_LCD_Init^0,f,c
  3781   00183A  D7FC               	bra	u2557
  3782   00183C  2E05               	decfsz	(??_LCD_Init+1)^0,f,c
  3783   00183E  D7FA               	bra	u2557
  3784   001840  D000               	nop2	
  3785   001842                     
  3786                           ;LCD.c: 108:     LCD_sendbyte(0b00001100,0);
  3787   001842  0E00               	movlw	0
  3788   001844  6E02               	movwf	LCD_sendbyte@type^0,c
  3789   001846  0E0C               	movlw	12
  3790   001848  EC63  F00F         	call	_LCD_sendbyte
  3791   00184C                     
  3792                           ;LCD.c: 109:     _delay((unsigned long)((100)*(64000000/4000.0)));
  3793   00184C  0E09               	movlw	9
  3794   00184E  6E05               	movwf	(??_LCD_Init+1)^0,c
  3795   001850  0E1E               	movlw	30
  3796   001852  6E04               	movwf	??_LCD_Init^0,c
  3797   001854  0EE4               	movlw	228
  3798   001856                     u2567:
  3799   001856  2EE8               	decfsz	wreg,f,c
  3800   001858  D7FE               	bra	u2567
  3801   00185A  2E04               	decfsz	??_LCD_Init^0,f,c
  3802   00185C  D7FC               	bra	u2567
  3803   00185E  2E05               	decfsz	(??_LCD_Init+1)^0,f,c
  3804   001860  D7FA               	bra	u2567
  3805   001862  D000               	nop2	
  3806   001864  0012               	return		;funcret
  3807   001866                     __end_of_LCD_Init:
  3808                           	callstack 0
  3809                           
  3810 ;; *************** function _LCD_sendbyte *****************
  3811 ;; Defined at:
  3812 ;;		line 40 in file "LCD.c"
  3813 ;; Parameters:    Size  Location     Type
  3814 ;;  Byte            1    wreg     unsigned char 
  3815 ;;  type            1    1[COMRAM] unsigned char 
  3816 ;; Auto vars:     Size  Location     Type
  3817 ;;  Byte            1    2[COMRAM] unsigned char 
  3818 ;; Return value:  Size  Location     Type
  3819 ;;                  1    wreg      void 
  3820 ;; Registers used:
  3821 ;;		wreg, status,2, status,0, cstack
  3822 ;; Tracked objects:
  3823 ;;		On entry : 0/0
  3824 ;;		On exit  : 0/0
  3825 ;;		Unchanged: 0/0
  3826 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3827 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3828 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3829 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3830 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3831 ;;Total ram usage:        2 bytes
  3832 ;; Hardware stack levels used: 1
  3833 ;; Hardware stack levels required when called: 3
  3834 ;; This function calls:
  3835 ;;		_LCD_sendnibble
  3836 ;; This function is called by:
  3837 ;;		_LCD_Init
  3838 ;;		_LCD_setline
  3839 ;;		_LCD_sendstring
  3840 ;;		_LCD_scroll
  3841 ;; This function uses a non-reentrant model
  3842 ;;
  3843                           
  3844                           	psect	text21
  3845   001EC6                     __ptext21:
  3846                           	callstack 0
  3847   001EC6                     _LCD_sendbyte:
  3848                           	callstack 26
  3849                           
  3850                           ;incstack = 0
  3851                           ;LCD_sendbyte@Byte stored from wreg
  3852   001EC6  6E03               	movwf	LCD_sendbyte@Byte^0,c
  3853   001EC8                     
  3854                           ;LCD.c: 40: void LCD_sendbyte(unsigned char Byte, char type);LCD.c: 41: {;LCD.c: 42:    
      +                           LATCbits.LATC6 = type;
  3855   001EC8  B002               	btfsc	LCD_sendbyte@type^0,0,c
  3856   001ECA  D002               	bra	u1725
  3857   001ECC  9C7B               	bcf	123,6,c	;volatile
  3858   001ECE  D001               	bra	u1726
  3859   001ED0                     u1725:
  3860   001ED0  8C7B               	bsf	123,6,c	;volatile
  3861   001ED2                     u1726:
  3862   001ED2                     
  3863                           ;LCD.c: 44:     LCD_sendnibble(Byte>>4);
  3864   001ED2  3803               	swapf	LCD_sendbyte@Byte^0,w,c
  3865   001ED4  0B0F               	andlw	15
  3866   001ED6  EC42  F00E         	call	_LCD_sendnibble
  3867   001EDA                     
  3868                           ;LCD.c: 45:     LCD_sendnibble(Byte);
  3869   001EDA  5003               	movf	LCD_sendbyte@Byte^0,w,c
  3870   001EDC  EC42  F00E         	call	_LCD_sendnibble
  3871   001EE0                     
  3872                           ;LCD.c: 51:     _delay((unsigned long)((50)*(64000000/4000000.0)));
  3873   001EE0  0EA0               	movlw	160
  3874   001EE2                     u2577:
  3875   001EE2  D000               	nop2	
  3876   001EE4  2EE8               	decfsz	wreg,f,c
  3877   001EE6  D7FD               	bra	u2577
  3878   001EE8  0012               	return		;funcret
  3879   001EEA                     __end_of_LCD_sendbyte:
  3880                           	callstack 0
  3881                           
  3882 ;; *************** function _LCD_sendnibble *****************
  3883 ;; Defined at:
  3884 ;;		line 22 in file "LCD.c"
  3885 ;; Parameters:    Size  Location     Type
  3886 ;;  number          1    wreg     unsigned char 
  3887 ;; Auto vars:     Size  Location     Type
  3888 ;;  number          1    0[COMRAM] unsigned char 
  3889 ;; Return value:  Size  Location     Type
  3890 ;;                  1    wreg      void 
  3891 ;; Registers used:
  3892 ;;		wreg, cstack
  3893 ;; Tracked objects:
  3894 ;;		On entry : 0/0
  3895 ;;		On exit  : 0/0
  3896 ;;		Unchanged: 0/0
  3897 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3898 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3899 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3900 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3901 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3902 ;;Total ram usage:        1 bytes
  3903 ;; Hardware stack levels used: 1
  3904 ;; Hardware stack levels required when called: 2
  3905 ;; This function calls:
  3906 ;;		_LCD_E_TOG
  3907 ;; This function is called by:
  3908 ;;		_LCD_sendbyte
  3909 ;;		_LCD_Init
  3910 ;; This function uses a non-reentrant model
  3911 ;;
  3912                           
  3913                           	psect	text22
  3914   001C84                     __ptext22:
  3915                           	callstack 0
  3916   001C84                     _LCD_sendnibble:
  3917                           	callstack 26
  3918                           
  3919                           ;incstack = 0
  3920                           ;LCD_sendnibble@number stored from wreg
  3921   001C84  6E01               	movwf	LCD_sendnibble@number^0,c
  3922   001C86                     
  3923                           ;LCD.c: 22: void LCD_sendnibble(unsigned char number);LCD.c: 23: {;LCD.c: 24:     if (nu
      +                          mber & 0b0001) {LATBbits.LATB3=1;} else {LATBbits.LATB3=0;}
  3924   001C86  A001               	btfss	LCD_sendnibble@number^0,0,c
  3925   001C88  EF48  F00E         	goto	u1631
  3926   001C8C  EF4A  F00E         	goto	u1630
  3927   001C90                     u1631:
  3928   001C90  EF4D  F00E         	goto	l273
  3929   001C94                     u1630:
  3930   001C94  867A               	bsf	122,3,c	;volatile
  3931   001C96  EF4E  F00E         	goto	l2067
  3932   001C9A                     l273:
  3933   001C9A  967A               	bcf	122,3,c	;volatile
  3934   001C9C                     l2067:
  3935                           
  3936                           ;LCD.c: 25:     if (number & 0b0010) {LATBbits.LATB2=1;} else {LATBbits.LATB2=0;}
  3937   001C9C  A201               	btfss	LCD_sendnibble@number^0,1,c
  3938   001C9E  EF53  F00E         	goto	u1641
  3939   001CA2  EF55  F00E         	goto	u1640
  3940   001CA6                     u1641:
  3941   001CA6  EF58  F00E         	goto	l275
  3942   001CAA                     u1640:
  3943   001CAA  847A               	bsf	122,2,c	;volatile
  3944   001CAC  EF59  F00E         	goto	l2071
  3945   001CB0                     l275:
  3946   001CB0  947A               	bcf	122,2,c	;volatile
  3947   001CB2                     l2071:
  3948                           
  3949                           ;LCD.c: 26:     if (number & 0b0100) {LATEbits.LATE3=1;} else {LATEbits.LATE3=0;}
  3950   001CB2  A401               	btfss	LCD_sendnibble@number^0,2,c
  3951   001CB4  EF5E  F00E         	goto	u1651
  3952   001CB8  EF60  F00E         	goto	u1650
  3953   001CBC                     u1651:
  3954   001CBC  EF63  F00E         	goto	l277
  3955   001CC0                     u1650:
  3956   001CC0  867D               	bsf	125,3,c	;volatile
  3957   001CC2  EF64  F00E         	goto	l2075
  3958   001CC6                     l277:
  3959   001CC6  967D               	bcf	125,3,c	;volatile
  3960   001CC8                     l2075:
  3961                           
  3962                           ;LCD.c: 27:     if (number & 0b1000) {LATEbits.LATE1=1;} else {LATEbits.LATE1=0;}
  3963   001CC8  A601               	btfss	LCD_sendnibble@number^0,3,c
  3964   001CCA  EF69  F00E         	goto	u1661
  3965   001CCE  EF6B  F00E         	goto	u1660
  3966   001CD2                     u1661:
  3967   001CD2  EF6E  F00E         	goto	l279
  3968   001CD6                     u1660:
  3969   001CD6  827D               	bsf	125,1,c	;volatile
  3970   001CD8  EF6F  F00E         	goto	l2079
  3971   001CDC                     l279:
  3972   001CDC  927D               	bcf	125,1,c	;volatile
  3973   001CDE                     l2079:
  3974                           
  3975                           ;LCD.c: 31:     LCD_E_TOG();
  3976   001CDE  EC9E  F00F         	call	_LCD_E_TOG	;wreg free
  3977   001CE2                     
  3978                           ;LCD.c: 32:     _delay((unsigned long)((5)*(64000000/4000000.0)));
  3979   001CE2  0E1A               	movlw	26
  3980   001CE4                     u2587:
  3981   001CE4  2EE8               	decfsz	wreg,f,c
  3982   001CE6  D7FE               	bra	u2587
  3983   001CE8  D000               	nop2	
  3984   001CEA  0012               	return		;funcret
  3985   001CEC                     __end_of_LCD_sendnibble:
  3986                           	callstack 0
  3987                           
  3988 ;; *************** function _LCD_E_TOG *****************
  3989 ;; Defined at:
  3990 ;;		line 10 in file "LCD.c"
  3991 ;; Parameters:    Size  Location     Type
  3992 ;;		None
  3993 ;; Auto vars:     Size  Location     Type
  3994 ;;		None
  3995 ;; Return value:  Size  Location     Type
  3996 ;;                  1    wreg      void 
  3997 ;; Registers used:
  3998 ;;		wreg
  3999 ;; Tracked objects:
  4000 ;;		On entry : 0/0
  4001 ;;		On exit  : 0/0
  4002 ;;		Unchanged: 0/0
  4003 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4004 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4005 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4006 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4007 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4008 ;;Total ram usage:        0 bytes
  4009 ;; Hardware stack levels used: 1
  4010 ;; Hardware stack levels required when called: 1
  4011 ;; This function calls:
  4012 ;;		Nothing
  4013 ;; This function is called by:
  4014 ;;		_LCD_sendnibble
  4015 ;; This function uses a non-reentrant model
  4016 ;;
  4017                           
  4018                           	psect	text23
  4019   001F3C                     __ptext23:
  4020                           	callstack 0
  4021   001F3C                     _LCD_E_TOG:
  4022                           	callstack 26
  4023   001F3C                     
  4024                           ;LCD.c: 13:      LATCbits.LATC2 = 1;
  4025   001F3C  847B               	bsf	123,2,c	;volatile
  4026   001F3E                     
  4027                           ;LCD.c: 14:  _delay((unsigned long)((2)*(64000000/4000000.0)));
  4028   001F3E  0E0A               	movlw	10
  4029   001F40                     u2597:
  4030   001F40  2EE8               	decfsz	wreg,f,c
  4031   001F42  D7FE               	bra	u2597
  4032   001F44  D000               	nop2	
  4033   001F46                     
  4034                           ;LCD.c: 15:      LATCbits.LATC2 = 0;
  4035   001F46  947B               	bcf	123,2,c	;volatile
  4036   001F48  0012               	return		;funcret
  4037   001F4A                     __end_of_LCD_E_TOG:
  4038                           	callstack 0
  4039                           
  4040 ;; *************** function _Interrupts_init *****************
  4041 ;; Defined at:
  4042 ;;		line 9 in file "interrupts.c"
  4043 ;; Parameters:    Size  Location     Type
  4044 ;;		None
  4045 ;; Auto vars:     Size  Location     Type
  4046 ;;		None
  4047 ;; Return value:  Size  Location     Type
  4048 ;;                  1    wreg      void 
  4049 ;; Registers used:
  4050 ;;		None
  4051 ;; Tracked objects:
  4052 ;;		On entry : 0/0
  4053 ;;		On exit  : 0/0
  4054 ;;		Unchanged: 0/0
  4055 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4056 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4057 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4058 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4059 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4060 ;;Total ram usage:        0 bytes
  4061 ;; Hardware stack levels used: 1
  4062 ;; Hardware stack levels required when called: 1
  4063 ;; This function calls:
  4064 ;;		Nothing
  4065 ;; This function is called by:
  4066 ;;		_main
  4067 ;; This function uses a non-reentrant model
  4068 ;;
  4069                           
  4070                           	psect	text24
  4071   001F4A                     __ptext24:
  4072                           	callstack 0
  4073   001F4A                     _Interrupts_init:
  4074                           	callstack 29
  4075   001F4A                     
  4076                           ;interrupts.c: 15:   INTCONbits.PEIE = 1;
  4077   001F4A  8CF2               	bsf	242,6,c	;volatile
  4078                           
  4079                           ;interrupts.c: 19:     PIE0bits.TMR0IE = 1;
  4080   001F4C  010E               	movlb	14	; () banked
  4081   001F4E  8B29               	bsf	41,5,b	;volatile
  4082                           
  4083                           ;interrupts.c: 20:     PIR0bits.TMR0IF = 0;
  4084   001F50  9B33               	bcf	51,5,b	;volatile
  4085                           
  4086                           ;interrupts.c: 21:     IPR0bits.TMR0IP = 1;
  4087   001F52  8B1F               	bsf	31,5,b	;volatile
  4088                           
  4089                           ;interrupts.c: 24:     INTCONbits.GIE=1;
  4090   001F54  8EF2               	bsf	242,7,c	;volatile
  4091   001F56                     
  4092                           ; BSR set to: 14
  4093   001F56  0012               	return		;funcret
  4094   001F58                     __end_of_Interrupts_init:
  4095                           	callstack 0
  4096                           
  4097 ;; *************** function _ADC_init *****************
  4098 ;; Defined at:
  4099 ;;		line 9 in file "ADC.c"
  4100 ;; Parameters:    Size  Location     Type
  4101 ;;		None
  4102 ;; Auto vars:     Size  Location     Type
  4103 ;;		None
  4104 ;; Return value:  Size  Location     Type
  4105 ;;                  1    wreg      void 
  4106 ;; Registers used:
  4107 ;;		wreg, status,2
  4108 ;; Tracked objects:
  4109 ;;		On entry : 0/0
  4110 ;;		On exit  : 0/0
  4111 ;;		Unchanged: 0/0
  4112 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4113 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4114 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4115 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4116 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4117 ;;Total ram usage:        0 bytes
  4118 ;; Hardware stack levels used: 1
  4119 ;; Hardware stack levels required when called: 1
  4120 ;; This function calls:
  4121 ;;		Nothing
  4122 ;; This function is called by:
  4123 ;;		_main
  4124 ;; This function uses a non-reentrant model
  4125 ;;
  4126                           
  4127                           	psect	text25
  4128   001F0A                     __ptext25:
  4129                           	callstack 0
  4130   001F0A                     _ADC_init:
  4131                           	callstack 29
  4132   001F0A                     
  4133                           ;ADC.c: 11:     TRISAbits.TRISA3=1;
  4134   001F0A  8681               	bsf	129,3,c	;volatile
  4135                           
  4136                           ;ADC.c: 12:     ANSELAbits.ANSELA3=1;
  4137   001F0C  010E               	movlb	14	; () banked
  4138   001F0E  8792               	bsf	146,3,b	;volatile
  4139                           
  4140                           ;ADC.c: 14:     ADREFbits.ADNREF = 0;
  4141   001F10  010F               	movlb	15	; () banked
  4142   001F12  9958               	bcf	88,4,b	;volatile
  4143   001F14                     
  4144                           ; BSR set to: 15
  4145                           ;ADC.c: 15:     ADREFbits.ADPREF = 0b00;
  4146   001F14  0EFC               	movlw	-4
  4147   001F16  1758               	andwf	88,f,b	;volatile
  4148                           
  4149                           ;ADC.c: 16:     ADPCH=0b11;
  4150   001F18  0E03               	movlw	3
  4151   001F1A  6F5F               	movwf	95,b	;volatile
  4152   001F1C                     
  4153                           ; BSR set to: 15
  4154                           ;ADC.c: 17:     ADCON0bits.ADFM = 0;
  4155   001F1C  9460               	bcf	96,2,c	;volatile
  4156   001F1E                     
  4157                           ; BSR set to: 15
  4158                           ;ADC.c: 18:     ADCON0bits.ADCS = 1;
  4159   001F1E  8860               	bsf	96,4,c	;volatile
  4160   001F20                     
  4161                           ; BSR set to: 15
  4162                           ;ADC.c: 19:     ADCON0bits.ADON = 1;
  4163   001F20  8E60               	bsf	96,7,c	;volatile
  4164   001F22                     
  4165                           ; BSR set to: 15
  4166   001F22  0012               	return		;funcret
  4167   001F24                     __end_of_ADC_init:
  4168                           	callstack 0
  4169                           
  4170 ;; *************** function _HighISR *****************
  4171 ;; Defined at:
  4172 ;;		line 31 in file "interrupts.c"
  4173 ;; Parameters:    Size  Location     Type
  4174 ;;		None
  4175 ;; Auto vars:     Size  Location     Type
  4176 ;;		None
  4177 ;; Return value:  Size  Location     Type
  4178 ;;                  1    wreg      void 
  4179 ;; Registers used:
  4180 ;;		wreg, status,2, status,0
  4181 ;; Tracked objects:
  4182 ;;		On entry : 0/0
  4183 ;;		On exit  : 0/0
  4184 ;;		Unchanged: 0/0
  4185 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4186 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4187 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4188 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4189 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4190 ;;Total ram usage:        0 bytes
  4191 ;; Hardware stack levels used: 1
  4192 ;; This function calls:
  4193 ;;		Nothing
  4194 ;; This function is called by:
  4195 ;;		Interrupt level 2
  4196 ;; This function uses a non-reentrant model
  4197 ;;
  4198                           
  4199                           	psect	intcode
  4200   000008                     __pintcode:
  4201                           	callstack 0
  4202   000008                     _HighISR:
  4203                           	callstack 22
  4204                           
  4205                           ; BSR set to: 15
  4206                           ;incstack = 0
  4207   000008  824B               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  4208   00000A                     
  4209                           ;interrupts.c: 35:     if(PIR0bits.TMR0IF){
  4210   00000A  010E               	movlb	14	; () banked
  4211   00000C  AB33               	btfss	51,5,b	;volatile
  4212   00000E  EF0B  F000         	goto	i2u211_41
  4213   000012  EF0D  F000         	goto	i2u211_40
  4214   000016                     i2u211_41:
  4215   000016  EF16  F000         	goto	i2l79
  4216   00001A                     i2u211_40:
  4217   00001A                     
  4218                           ; BSR set to: 14
  4219                           ;interrupts.c: 37:         TMR0H = 0b00001011;
  4220   00001A  0E0B               	movlw	11
  4221   00001C  6ED4               	movwf	212,c	;volatile
  4222                           
  4223                           ;interrupts.c: 38:         TMR0L = 0b11011100;
  4224   00001E  0EDC               	movlw	220
  4225   000020  6ED3               	movwf	211,c	;volatile
  4226   000022                     
  4227                           ; BSR set to: 14
  4228                           ;interrupts.c: 39:         GLOBALsecs++;
  4229   000022  0100               	movlb	0	; () banked
  4230   000024  4BA6               	infsnz	_GLOBALsecs& (0+255),f,b
  4231   000026  2BA7               	incf	(_GLOBALsecs+1)& (0+255),f,b
  4232   000028                     
  4233                           ; BSR set to: 0
  4234                           ;interrupts.c: 40:         PIR0bits.TMR0IF=0;
  4235   000028  010E               	movlb	14	; () banked
  4236   00002A  9B33               	bcf	51,5,b	;volatile
  4237   00002C                     i2l79:
  4238                           
  4239                           ; BSR set to: 14
  4240   00002C  924B               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  4241   00002E  0011               	retfie		f
  4242   000030                     __end_of_HighISR:
  4243                           	callstack 0
  4244                           
  4245                           	psect	rparam
  4246   000000                     
  4247                           	psect	temp
  4248   00004B                     btemp:
  4249                           	callstack 0
  4250   00004B                     	ds	1
  4251   000000                     int$flags	set	btemp
  4252   000000                     wtemp8	set	btemp+1
  4253   000000                     ttemp5	set	btemp+1
  4254   000000                     ttemp6	set	btemp+4
  4255   000000                     ttemp7	set	btemp+8
  4256                           
  4257                           	psect	config
  4258                           
  4259                           ;Config register CONFIG1L @ 0x300000
  4260                           ;	External Oscillator mode Selection bits
  4261                           ;	FEXTOSC = HS, HS (crystal oscillator) above 8 MHz; PFM set to high power
  4262                           ;	Power-up default value for COSC bits
  4263                           ;	RSTOSC = EXTOSC_4PLL, EXTOSC with 4x PLL, with EXTOSC operating per FEXTOSC bits
  4264   300000                     	org	3145728
  4265   300000  AA                 	db	170
  4266                           
  4267                           ;Config register CONFIG1H @ 0x300001
  4268                           ;	unspecified, using default values
  4269                           ;	Clock Out Enable bit
  4270                           ;	CLKOUTEN = 0x1, unprogrammed default
  4271                           ;	Clock Switch Enable bit
  4272                           ;	CSWEN = 0x1, unprogrammed default
  4273                           ;	Fail-Safe Clock Monitor Enable bit
  4274                           ;	FCMEN = 0x1, unprogrammed default
  4275   300001                     	org	3145729
  4276   300001  FF                 	db	255
  4277                           
  4278                           ;Config register CONFIG3L @ 0x300004
  4279                           ;	WDT Period Select bits
  4280                           ;	WDTCPS = 0x1F, unprogrammed default
  4281                           ;	WDT operating mode
  4282                           ;	WDTE = OFF, WDT Disabled
  4283   300004                     	org	3145732
  4284   300004  9F                 	db	159
  4285                           
  4286                           ;Config register CONFIG3H @ 0x300005
  4287                           ;	unspecified, using default values
  4288                           ;	WDT Window Select bits
  4289                           ;	WDTCWS = 0x7, unprogrammed default
  4290                           ;	WDT input clock selector
  4291                           ;	WDTCCS = 0x7, unprogrammed default
  4292   300005                     	org	3145733
  4293   300005  FF                 	db	255
  4294                           tosu	equ	0xFFF
  4295                           tosh	equ	0xFFE
  4296                           tosl	equ	0xFFD
  4297                           stkptr	equ	0xFFC
  4298                           pclatu	equ	0xFFB
  4299                           pclath	equ	0xFFA
  4300                           pcl	equ	0xFF9
  4301                           tblptru	equ	0xFF8
  4302                           tblptrh	equ	0xFF7
  4303                           tblptrl	equ	0xFF6
  4304                           tablat	equ	0xFF5
  4305                           prodh	equ	0xFF4
  4306                           prodl	equ	0xFF3
  4307                           indf0	equ	0xFEF
  4308                           postinc0	equ	0xFEE
  4309                           postdec0	equ	0xFED
  4310                           preinc0	equ	0xFEC
  4311                           plusw0	equ	0xFEB
  4312                           fsr0h	equ	0xFEA
  4313                           fsr0l	equ	0xFE9
  4314                           wreg	equ	0xFE8
  4315                           indf1	equ	0xFE7
  4316                           postinc1	equ	0xFE6
  4317                           postdec1	equ	0xFE5
  4318                           preinc1	equ	0xFE4
  4319                           plusw1	equ	0xFE3
  4320                           fsr1h	equ	0xFE2
  4321                           fsr1l	equ	0xFE1
  4322                           bsr	equ	0xFE0
  4323                           indf2	equ	0xFDF
  4324                           postinc2	equ	0xFDE
  4325                           postdec2	equ	0xFDD
  4326                           preinc2	equ	0xFDC
  4327                           plusw2	equ	0xFDB
  4328                           fsr2h	equ	0xFDA
  4329                           fsr2l	equ	0xFD9
  4330                           status	equ	0xFD8

Data Sizes:
    Strings     67
    Constant    0
    Data        24
    BSS         39
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     69      74
    BANK0           160     38      96
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          234      0       0

Pointer List with Targets:

    dtoa@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    f$.$buffer	PTR unsigned char  size(2) Largest target is 0

    f$.$source	PTR const unsigned char  size(2) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    fputc@fp$.$buffer	PTR unsigned char  size(2) Largest target is 0

    fputc@fp$.$source	PTR const unsigned char  size(2) Largest target is 0

    fputs@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    fputs@s	PTR const unsigned char  size(1) Largest target is 32
		 -> dbuf(BANK0[32]), 

    LCD_sendstring@string	PTR unsigned char  size(1) Largest target is 20
		 -> main@buf(BANK0[20]), 

    pad@buf	PTR unsigned char  size(1) Largest target is 32
		 -> dbuf(BANK0[32]), 

    pad@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    read_prec_or_width@ap	PTR PTR void [1] size(1) Largest target is 1
		 -> sprintf@ap(COMRAM[1]), 

    read_prec_or_width@fmt	PTR PTR const unsigned char  size(1) Largest target is 1
		 -> vfprintf@cfmt(COMRAM[1]), 

    S1789$buffer	PTR unsigned char  size(2) Largest target is 0

    S1789$source	PTR const unsigned char  size(2) Largest target is 0

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    sprintf@fmt	PTR const unsigned char  size(1) Largest target is 26
		 -> STR_1(CODE[26]), STR_2(CODE[20]), STR_3(CODE[21]), 

    sprintf@s	PTR unsigned char  size(1) Largest target is 20
		 -> main@buf(BANK0[20]), 

    UpdateClock@days	PTR int  size(1) Largest target is 16
		 -> main@clock(BANK0[16]), 

    UpdateClock@DoW	PTR int  size(1) Largest target is 16
		 -> main@clock(BANK0[16]), 

    UpdateClock@DSTstate	PTR int  size(1) Largest target is 16
		 -> main@clock(BANK0[16]), 

    UpdateClock@hours	PTR int  size(1) Largest target is 16
		 -> main@clock(BANK0[16]), 

    UpdateClock@minutes	PTR int  size(1) Largest target is 16
		 -> main@clock(BANK0[16]), 

    UpdateClock@months	PTR int  size(1) Largest target is 16
		 -> main@clock(BANK0[16]), 

    UpdateClock@seconds	PTR int  size(1) Largest target is 2
		 -> GLOBALsecs(BANK0[2]), 

    UpdateClock@years	PTR int  size(1) Largest target is 16
		 -> main@clock(BANK0[16]), 

    vfpfcnvrt@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(COMRAM[1]), 

    vfpfcnvrt@cp	PTR unsigned char  size(1) Largest target is 26
		 -> STR_1(CODE[26]), STR_2(CODE[20]), STR_3(CODE[21]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(1) Largest target is 1
		 -> vfprintf@cfmt(COMRAM[1]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    vfprintf@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(COMRAM[1]), 

    vfprintf@cfmt	PTR unsigned char  size(1) Largest target is 26
		 -> STR_1(CODE[26]), STR_2(CODE[20]), STR_3(CODE[21]), 

    vfprintf@fmt	PTR const unsigned char  size(1) Largest target is 26
		 -> STR_1(CODE[26]), STR_2(CODE[20]), STR_3(CODE[21]), 

    vfprintf@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 


Critical Paths under _main in COMRAM

    _main->_sprintf
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_dtoa
    _read_prec_or_width->___wmul
    _dtoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _abs->___awmod
    _UpdateClock->___awmod
    _LCD_setline->_LCD_sendbyte
    _LCD_sendstring->_LCD_sendbyte
    _LCD_Init->_LCD_sendbyte
    _LCD_sendbyte->_LCD_sendnibble

Critical Paths under _HighISR in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _HighISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _HighISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _HighISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _HighISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _HighISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _HighISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _HighISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _HighISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _HighISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _HighISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _HighISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _HighISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _HighISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _HighISR in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                38    38      0   16838
                                              0 BANK0     38    38      0
                           _ADC_init
                    _Interrupts_init
                           _LCD_Init
                     _LCD_sendstring
                        _LCD_setline
                  _LEDarray_disp_bin
                      _LEDarray_init
                        _Timer0_init
                        _UpdateClock
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             25    15     10   10262
                                             46 COMRAM    23    13     10
                           _vfprintf
 ---------------------------------------------------------------------------------
 (2) _vfprintf                                             4     1      3    9605
                                             42 COMRAM     4     1      3
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (3) _vfpfcnvrt                                           12     9      3    9246
                                             31 COMRAM    11     8      3
                               _dtoa
                              _fputc
                 _read_prec_or_width
 ---------------------------------------------------------------------------------
 (4) _read_prec_or_width                                   5     3      2    3835
                                              6 COMRAM     5     3      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4    3503
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) _dtoa                                                11     8      3    4079
                                             20 COMRAM    11     8      3
                            ___awdiv
                            ___awmod
                                _abs
                                _pad
 ---------------------------------------------------------------------------------
 (5) _pad                                                  7     3      4    2172
                                             13 COMRAM     7     3      4
                              _fputc
                              _fputs
 ---------------------------------------------------------------------------------
 (6) _fputs                                                5     3      2    1083
                                              8 COMRAM     5     3      2
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _fputc                                                8     5      3     682
                                              0 COMRAM     8     5      3
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (5) _abs                                                  4     2      2     142
                                              6 COMRAM     4     2      2
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (5) ___awdiv                                              8     4      4     452
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (1) _UpdateClock                                         40    30     10    2630
                                              6 COMRAM    40    30     10
                            ___awmod
 ---------------------------------------------------------------------------------
 (5) ___awmod                                              6     2      4     752
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _Timer0_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LEDarray_init                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LEDarray_disp_bin                                    2     0      2     274
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _LCD_setline                                          1     1      0     882
                                              3 COMRAM     1     1      0
                       _LCD_sendbyte
 ---------------------------------------------------------------------------------
 (1) _LCD_sendstring                                       1     0      1    1111
                                              3 COMRAM     1     0      1
                       _LCD_sendbyte
 ---------------------------------------------------------------------------------
 (1) _LCD_Init                                             2     2      0     926
                                              3 COMRAM     2     2      0
                       _LCD_sendbyte
                     _LCD_sendnibble
 ---------------------------------------------------------------------------------
 (2) _LCD_sendbyte                                         2     1      1     838
                                              1 COMRAM     2     1      1
                     _LCD_sendnibble
 ---------------------------------------------------------------------------------
 (3) _LCD_sendnibble                                       1     1      0      88
                                              0 COMRAM     1     1      0
                          _LCD_E_TOG
 ---------------------------------------------------------------------------------
 (4) _LCD_E_TOG                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Interrupts_init                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ADC_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _HighISR                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_init
   _Interrupts_init
   _LCD_Init
     _LCD_sendbyte
       _LCD_sendnibble
         _LCD_E_TOG
     _LCD_sendnibble
   _LCD_sendstring
     _LCD_sendbyte
   _LCD_setline
     _LCD_sendbyte
   _LEDarray_disp_bin
   _LEDarray_init
   _Timer0_init
   _UpdateClock
     ___awmod
   _sprintf
     _vfprintf
       _vfpfcnvrt
         _dtoa
           ___awdiv
           ___awmod
           _abs
             ___awmod (ARG)
           _pad
             _fputc
               _putch
             _fputs
               _fputc
         _fputc
         _read_prec_or_width
           ___wmul

 _HighISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             DE9      0       0      46        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK13           EA      0       0      30        0.0%
BANK13              EA      0       0      31        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     26      60       5       60.0%
BITBIGSFRllhhhh     84      0       0      38        0.0%
BITBIGSFRllhhll     5E      0       0      41        0.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     45      4A       1       78.7%
BITBIGSFRhhl        4A      0       0      34        0.0%
BITBIGSFRllhhlh     33      0       0      40        0.0%
BITBIGSFRllll       30      0       0      44        0.0%
BITBIGSFRhhhl       1B      0       0      33        0.0%
BITBIGSFRllhhhh     14      0       0      35        0.0%
BITBIGSFRhhhh        D      0       0      32        0.0%
BITBIGSFRlllh        9      0       0      43        0.0%
BITBIGSFRllhl        9      0       0      42        0.0%
BITBIGSFRllhhhl      8      0       0      39        0.0%
BITBIGSFRllhhhh      6      0       0      37        0.0%
BITBIGSFRllhhhh      3      0       0      36        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      AA      45        0.0%
DATA                 0      0      AA       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.45 build 20230818022343 
Symbol Table                                                                                   Thu Feb 08 23:53:50 2024

                        l53 1F08                          l73 1F56                ___awdiv@sign 0006  
       ___wmul@multiplicand 0003           ??_Interrupts_init 0001                         l121 187A  
                       l130 18D4                         l122 187C                         l131 18E8  
                       l123 1890                         l132 18EA                         l124 1892  
                       l133 18FE                         l125 18A6                         l134 1900  
                       l126 18A8                         l118 1EC4                         l135 1914  
                       l127 18BC                         l136 1916                         l128 18BE  
                       l137 192A                         l129 18D2                         l226 1F22  
                       l139 192C                         l251 1314                         l307 1E9E  
                       l270 1F48                         l281 1CEA                         l273 1C9A  
                       l275 1CB0                         l284 1EE8                         l292 1DE2  
                       l277 1CC6                         l279 1CDC                         l287 1864  
                       l551 1AA0                         l298 1E78                         l538 19F0  
                       l985 1E16                         _abs 1E18                         _pad 1BFA  
              ___awmod@sign 0006                         wreg 0FE8                        l1010 1C82  
                      l1005 1C2A                        l1013 14F6                        l1030 1B46  
                      l1008 1C68                        l2001 149C                        l1026 15FE  
                      l1034 1B4E                        l2011 14DE                        l2003 14B0  
                      ?_abs 0007                        l2021 150E                        l2013 14EA  
                      l2005 14B8                        l2101 1372                        l1062 1E4A  
                      l2031 157C                        l2023 153C                        l2015 14F2  
                      l2007 14C8                        l2111 13E4                        l2103 13A8  
                      l1055 1D2C                        l2201 1842                        l2041 15D6  
                      l2033 158E                        l2025 1540                        l2017 14FE  
                      l2009 14CE                        l1049 1496                        l2121 1450  
                      l2113 13EE                        l2105 13B8                        l1074 1BF8  
                      l1082 1DA8                        l2211 1F1E                        l2203 184C  
                      l1059 1E32                        l2043 15DC                        l2035 159E  
                      l2027 1546                        l2019 1508                        l2051 1AAA  
                      l2115 140E                        l2107 13CC                        l2213 1F20  
                      l2205 1F0A                        l2141 1ED2                        l2301 12F0  
                      l2221 0E7E                        l1085 1F58                        l2045 15E8  
                      l2037 15B8                        l2029 1562                        l2053 1AD0  
                      l2061 1B1C                        l2125 1464                        l2117 142E  
                      l2109 13DA                        l2207 1F14                        l2071 1CB2  
                      l2063 1C86                        l2143 1EDA                        l2311 18B6  
                      l2303 1866                        l2231 0F02                        l2223 0EA4  
                      l2215 0E46                        l2039 15C6                        l2055 1AD8  
                      l2119 1446                        l2151 1D04                        l2209 1F1C  
                      l2081 1CE2                        l2073 1CC0                        l2065 1C94  
                      l2145 1EE0                        l2321 1924                        l2313 18CC  
                      l2305 1874                        l2161 1EF2                        l2241 0F86  
                      l2233 0F28                        l2225 0EAE                        l2217 0E58  
                      l2057 1AF4                        l2049 1AA2                        l2129 1470  
                      l2153 1D24                        l2401 16C6                        l2075 1CC8  
                      l2067 1C9C                        l2139 1EC8                        l2171 175E  
                      l2323 1DAC                        l2315 18E2                        l2307 188A  
                      l2163 1EFC                        l2251 101A                        l2243 0FAA  
                      l2235 0F32                        l2227 0ED4                        l2219 0E6A  
                      l2059 1B14                        l2091 1354                        l2083 1316  
                      l2147 1CEC                        l2331 1DE4                        l2411 1712  
                      l2403 16D2                        l2077 1CD6                        l2069 1CAA  
                      l2181 17B6                        l2173 1774                        l2325 1DBE  
                      l2317 18F8                        l2309 18A0                        l2157 1EA0  
                      l2165 1F06                        l2261 10BC                        l2253 1034  
                      l2245 0FCE                        l2237 0F56                        l2229 0EDE  
                      l2093 135C                        l2085 133C                        l2149 1CF4  
                      l2333 1DEC                        l2413 1736                        l2405 16D8  
                      l2167 1F4A                        l2079 1CDE                        l2191 17EE  
                      l2183 17BC                        l2175 177A                        l2343 1E4C  
                      l2327 1DC8                        l2319 190E                        l2159 1EEA  
                      l2271 113C                        l2255 105A                        l2263 10CA  
                      l2247 0FF4                        l2239 0F7C                        l2095 135E  
                      l2087 1344                        l2335 1DF4                        l2407 1704  
                      l2351 1600                        l2193 1806                        l2185 17CC  
                      l2177 1790                        l2169 1746                        l2345 1E50  
                      l2329 1DD8                        l2281 11CA                        l2273 1156  
                      l2265 10E2                        l2257 1074                        l2249 1002  
                      l2097 136A                        l2089 1350                        l2337 1DFC  
                      l2409 170C                        l2361 1614                        l2353 1604  
                      l2195 1810                        l2187 17D6                        l2179 17A0  
                      l2347 1E60                        l2291 124C                        l2283 11D2  
                      l2275 117E                        l2267 10FC                        l2259 1098  
                      l2339 1E0C                        l2371 1626                        l2363 1616  
                      l2355 1608                        l2197 1820                        l2189 17E4  
                      l2349 1E62                        l2293 128A                        l2285 11FE  
                      l2269 1122                        l2277 1188                        l1901 194C  
                      l2381 164E                        l2373 162E                        l2365 1618  
                      l2357 160C                        l2199 182A                        l2295 1298  
                      l2287 1218                        l2279 11B0                        l1911 1980  
                      l1903 195A                        l2391 166E                        l2383 1656  
                      l2375 1636                        l2367 161A                        l2359 1610  
                      l2297 12BC                        l2289 1244                        l1921 19BA  
                      l1913 1988                        l1905 1962                        l2393 1676  
                      l2385 165E                        l2377 163E                        l2369 161C  
                      l2299 12E2                        l1931 19E0                        l1923 19C2  
                      l1915 1990                        l1907 1966                        l2395 167E  
                      l2387 1666                        l2379 1646                        l1941 1A04  
                      l1933 19E8                        l1925 19C4                        l1917 199E  
                      l1909 196E                        l2397 1692                        l2389 166E  
                      l1951 1A38                        l1943 1A0C                        l1927 19CA  
                      l1919 19A4                        l1871 1B7A                        l2399 169A  
                      l1961 1A74                        l1953 1A40                        l1945 1A10  
                      l1937 19F2                        l1929 19D0                        l1873 1B96  
                      l1865 1B50                        l1881 1D7A                        l1963 1A7A  
                      l1955 1A48                        l1947 1A1E                        l1939 19F6  
                      l1875 1BC8                        l1867 1B60                        l1883 1D88  
                      l2579 139A                        l1957 1A56                        l1965 1A80  
                      l1949 1A26                        l1893 192E                        l1869 1B70  
                      l1885 1D8C                        l1981 1C36                        l1973 1BFA  
                      ?_pad 000E                        l1967 1A90                        l1959 1A6C  
                      l1895 1932                        l1991 1E26                        l1879 1D6E  
                      l1983 1C46                        l1975 1C08                        l1887 1E7A  
                      l1993 1F3C                        l1969 1A98                        l1897 1940  
                      l1985 1C4A                        l1977 1C14                        l1889 1E96  
                      l1995 1F3E                        l1899 1948                        l1987 1C76  
                      l1979 1C22                        l1997 1F46                        l1989 1E18  
                      l1999 1498                main@TestMode 0074                        STR_1 0E01  
                      STR_2 0E30                        STR_3 0E1B                        u2000 18A0  
                      u2001 189C                        u2010 18B6                        u2011 18B2  
                      u2020 18CC                        u1300 1B70                        u2100 1692  
                      u2021 18C8                        u1301 1B6C                        u2101 168E  
                      u2030 18E2                        u1310 1B96                        u2031 18DE  
                      u1311 1B92                        u2040 18F8                        u1400 1A04  
                      u1320 1BC8                        u2041 18F4                        u1401 1A00  
                      u1321 1BC4                        u2050 190E                        u1410 1A1E  
                      u1330 1DA8                        u2051 190A                        u1411 1A1A  
                      u1331 1DA4                        u2060 1924                        u1420 1A38  
                      u1340 1940                        u1500 1E26                        u2061 1920  
                      u1421 1A34                        u1341 193C                        u1501 1E22  
                      u2070 1DBE                        u1430 1A56                        u1350 195A  
                      u1510 14AC                        u2071 1DBA                        u1431 1A52  
                      u1351 1956                        u1511 14A6                        u2080 1DD8  
                      u1440 1A6C                        u1360 1980                        u1600 15D6  
                      u1520 14AE                        u2081 1DD4                        u1441 1A68  
                      u1361 197C                        u1601 15D2                        u2090 1E78  
                      u1450 1A90                        u1370 199E                        u1290 1B60  
                      u1530 14C8                        u1610 1AD0                        u2091 1E74  
                      u1451 1A8C                        u1371 199A                        u1291 1B5C  
                      u1531 14C4                        u1611 1ACC                        u1380 19BA  
                      u1460 1C08                        u1540 14DE                        u1620 1B46  
                      u1700 140E                        u1381 19B6                        u1461 1C04  
                      u1541 14DA                        u1621 1B42                        u1701 140A  
                      u1630 1C94                        u1390 19E0                        u1470 1C22  
                      u1550 157C                        u1710 142E                        u1631 1C90  
                      u1391 19DC                        u1471 1C1E                        u1551 1578  
                      u1711 142A                        u1640 1CAA                        u1800 0FF4  
                      u1480 1C68                        u1560 158E                        u1641 1CA6  
                      u1801 0FF0                        u1481 1C64                        u1561 158A  
                      u1650 1CC0                        u1810 101A                        u1490 1C76  
                      u1570 159E                        u1730 1D24                        u1651 1CBC  
                      u2507 17AC                        u1811 1016                        u1491 1C72  
                      u1571 159A                        u1731 1D20                        u1660 1CD6  
                      u1900 1156                        u1820 1034                        u1580 15B8  
                      u1661 1CD2                        u1725 1ED0                        u2517 17C2  
                      u1901 1152                        u1821 1030                        u1741 0E50  
                      u1581 15B4                        u1726 1ED2                        u1910 11B0  
                      u1830 105A                        u1750 0E6A                        u1590 15C6  
                      u1670 133C                        u2527 17D8                        u1911 11AC  
                      u1831 1056                        u1751 0E66                        u1591 15C2  
                      u1671 1338                        u1920 11CA                        u1840 1074  
                      u1760 0EA4                        u1680 13B8                        u2537 17F8  
                      u1921 11C6                        u1841 1070                        u1761 0EA0  
                      u1681 13B4                        u1930 11FE                        u1850 1098  
                      u1770 0ED4                        u1690 13DA                        u2547 1816  
                      u1931 11FA                        u1851 1094                        u1771 0ED0  
                      u1691 13D6                        u1940 1218                        u1860 10E2  
                      u1780 0F28                        u2557 1834                        u2477 1768  
                      u1941 1214                        u1861 10DE                        u1781 0F24  
                      u1950 1244                        u1870 10FC                        u1790 0F7C  
                      u2567 1856                        u2487 1780                        u1951 1240  
                      u1871 10F8                        u1791 0F78                        u1960 128A  
                      u1880 1122                        u2577 1EE2                        u2497 1796  
                      u1961 1286                        u1881 111E                        u1970 12E2  
                      u1890 113C                        u2587 1CE4                        u1971 12DE  
                      u1891 1138                        u1980 1874                        u2597 1F40  
                      u1981 1870                        u1990 188A                        u1991 1886  
                      i2l79 002C                        abs@a 0007                        _dbuf 0086  
                      _main 1600                        _dtoa 1498                        _prec 0048  
                      pad@i 0013                        pad@p 0010                        fsr1h 0FE2  
                      fsr2h 0FDA                        indf1 0FE7                        indf2 0FDF  
                      fsr1l 0FE1                        fsr2l 0FD9                        btemp 004B  
              ?_LCD_setline 0001                        prodh 0FF4                        prodl 0FF3  
                      start 0030            __end_of_ADC_init 1F24             __end_of_HighISR 0030  
              ___param_bank 0000                       ??_abs 0009                       ??_pad 0012  
          __end_of_LCD_Init 1866                       ?_main 0001                       ?_dtoa 0015  
                     _ADPCH 0F5F             __end_of___awdiv 19F2             __end_of___awmod 1AA2  
           ___awdiv@divisor 0003             ___awdiv@counter 0005                vfpfcnvrt@fmt 0021  
                     _TMR0H 0FD4                       _TMR0L 0FD3                       _flags 004A  
       read_prec_or_width@c 0009         read_prec_or_width@n 000A                       _fputc 1B50  
                     _fputs 1D6E                       pad@fp 000E                       _width 0046  
                     _putch 1F58                       dtoa@d 0016                       dtoa@i 001E  
                     dtoa@p 001A                       dtoa@s 001D                       dtoa@w 001B  
             ?_LCD_sendbyte 0002                       tablat 0FF5                       plusw1 0FE3  
                     plusw2 0FDB                       ttemp5 004C                       ttemp6 004F  
                     ttemp7 0053                       status 0FD8                       wtemp8 004C  
           __end_of_sprintf 1E18             __initialization 1D2E                __end_of_main 1746  
              __end_of_dtoa 1600           __end_of_LCD_E_TOG 1F4A                      ??_main 0046  
                    ??_dtoa 0018               __activetblptr 0003  __end_of_read_prec_or_width 1B50  
                    ?_fputc 0001                      ?_fputs 0009                      _ADRESH 0F64  
            ??_LCD_sendbyte 0003            ___awdiv@dividend 0001                      ?_putch 0001  
          UpdateClock@hours 0009                      i2l2421 0028                      i2l2415 000A  
                    i2l2417 001A                      i2l2419 0022            UpdateClock@years 000D  
             vfpfcnvrt@done 0029                   ??_HighISR 0001           _LEDarray_disp_bin 1866  
        ?_LEDarray_disp_bin 0001               ??_Timer0_init 0001                vfprintf@cfmt 002E  
                    ___wmul 1E7A                   ??___awdiv 0005                   ??___awmod 0005  
      read_prec_or_width@ap 0008         ??_LEDarray_disp_bin 0003                      clear_0 1D54  
          ___awdiv@quotient 0007             ___awmod@divisor 0003                      isa$std 0001  
           ___awmod@counter 0005                      pad@buf 000F                      dtoa@fp 0015  
                    fputc@c 0001                      fputs@c 000B                      fputs@i 000C  
                    fputs@s 0009                __mediumconst 0000                      tblptrh 0FF7  
                    tblptrl 0FF6                      tblptru 0FF8                   ?_ADC_init 0001  
                    putch@c 0001            __end_of_vfprintf 1D2E                   ??_sprintf 0039  
 __end_of_LEDarray_disp_bin 192E                  __accesstop 0060               ??_UpdateClock 0011  
   __end_of__initialization 1D64                   ?_LCD_Init 0001               ___rparam_used 0001  
             _LEDarray_init 1EA0             _Interrupts_init 1F4A              __pcstackCOMRAM 0001  
              __pidataBANK0 1F24               __end_of_fputc 1BFA               __end_of_fputs 1DAA  
             __end_of_putch 1F5A         __end_of_Timer0_init 1F0A                  ??_ADC_init 0001  
                   ??_fputc 0004                     ??_fputs 000B                     ??_putch 0001  
         UpdateClock@F14152 00A8                  __pbssBANK0 0086         UpdateClock@DSTstate 000E  
                ??_LCD_Init 0004              _LCD_sendnibble 1C84              ?_LEDarray_init 0001  
            _LCD_sendstring 1E4C         __end_of_UpdateClock 1316                     ?___wmul 0001  
      __end_of_LCD_sendbyte 1EEA           UpdateClock@months 000C      __end_of_LCD_sendnibble 1CEC  
       UpdateClock@TestMode 000F     __end_of_Interrupts_init 1F58                     _HighISR 0008  
    __end_of_LCD_sendstring 1E7A                   _ADREFbits 0F58                     __Hparam 0000  
                   __Lparam 0000                 _Timer0_init 1EEA                     ___awdiv 192E  
                   ___awmod 19F2                   ?_vfprintf 002B                __psmallconst 0E00  
                   __pcinit 1D2E                     __ramtop 0E00                     __ptext0 1600  
                   __ptext1 1DE4                     __ptext2 1CEC                     __ptext3 1316  
                   __ptext4 1AA2                     __ptext5 1E7A                     __ptext6 1498  
                   __ptext7 1BFA                     __ptext8 1D6E                     __ptext9 1B50  
     read_prec_or_width@fmt 0007            ___awmod@dividend 0001                   _LCD_E_TOG 1F3C  
           LCD_setline@line 0004                     main@buf 0060                     _sprintf 1DE4  
      end_of_initialization 1D64             ?_LCD_sendnibble 0001                     fputc@fp 0003  
           ??_LEDarray_init 0001                     fputs@fp 000A                 _UpdateClock 0E46  
           ?_LCD_sendstring 0004          _read_prec_or_width 1AA2           __end_of_vfpfcnvrt 1498  
                   postdec1 0FE5                     postdec2 0FDD         ?_read_prec_or_width 0007  
                   postinc0 0FEE                     postinc1 0FE6                     postinc2 0FDE  
          vfpfcnvrt@convarg 0025                  ??_vfprintf 002E                  ?_LCD_E_TOG 0001  
                 _TRISAbits 0F81                   _TRISBbits 0F82                   _TRISCbits 0F83  
                 _TRISDbits 0F84                   _TRISEbits 0F85                   _TRISFbits 0F86  
                 _TRISGbits 0F87                   _TRISHbits 0F88        ??_read_prec_or_width 0009  
               _CM1CON0bits 0ED0                 _CM1CON1bits 0ED1            ?_Interrupts_init 0001  
               vfpfcnvrt@ap 0022                 vfpfcnvrt@cp 002A                 vfpfcnvrt@fp 0020  
            __end_of___wmul 1EA0        LCD_sendnibble@number 0001         start_initialization 1D2E  
               __end_of_abs 1E4C                 __end_of_pad 1C84                _LCD_sendbyte 1EC6  
           UpdateClock@days 000A               ??_LCD_setline 0004                 vfprintf@fmt 002C  
      LCD_sendstring@string 0004                    ??___wmul 0005                 __pdataBANK0 00A8  
               __pbssCOMRAM 0046                 ??_LCD_E_TOG 0001               __pcstackBANK0 0060  
                  ?_HighISR 0001                   _dtoa$1868 0018                ?_Timer0_init 0001  
                 __pintcode 0008                    ?___awdiv 0001                    ?___awmod 0001  
       __end_of_LCD_setline 1DE4                 __smallconst 0E00            ??_LCD_sendnibble 0001  
                  _ADC_init 1F0A            ??_LCD_sendstring 0005                    ?_sprintf 002F  
          LCD_sendbyte@Byte 0003                    _LCD_Init 1746            LCD_sendbyte@type 0002  
              ?_UpdateClock 0007              ___wmul@product 0005                    _LATAbits 0F79  
        UpdateClock@minutes 0008          UpdateClock@seconds 0007                    _LATBbits 0F7A  
                  _LATCbits 0F7B                    _LATDbits 0F7C                    _LATEbits 0F7D  
                  _LATFbits 0F7E                    _LATGbits 0F7F                    _LATHbits 0F80  
                  _IPR0bits 0E1F                    _PIE0bits 0E29                    i2u211_40 001A  
                  i2u211_41 0016                    _PIR0bits 0E33                   _vfpfcnvrt 1316  
                _ADCON0bits 0F60           ___wmul@multiplier 0001                   main@clock 0076  
    UpdateClock@DaysInMonth 0017                  _CM1NCHbits 0ED2                  _CM1PCHbits 0ED3  
                 copy_data0 1D42       __end_of_LEDarray_init 1EC6              UpdateClock@DoW 000B  
               _LCD_setline 1DAA                    __Hrparam 0000                  vfprintf@ap 002D  
                  __Lrparam 0000                  vfprintf@fp 002B                  ?_vfpfcnvrt 0020  
                _ANSELAbits 0E92                  sprintf@fmt 0030                  _T0CON0bits 0FD5  
                _T0CON1bits 0FD6                    __ptext10 1F58                    __ptext11 1E18  
                  __ptext20 1746                    __ptext12 192E                    __ptext21 1EC6  
                  __ptext13 0E46                    __ptext22 1C84                    __ptext14 19F2  
                  __ptext23 1F3C                    __ptext15 1EEA                    __ptext24 1F4A  
                  __ptext16 1EA0                    __ptext25 1F0A                    __ptext17 1866  
                  __ptext18 1DAA                    __ptext19 1E4C     LEDarray_disp_bin@number 0001  
                _GLOBALsecs 00A6                    isa$xinst 0000                    int$flags 004B  
                  _vfprintf 1CEC                  _INTCONbits 0FF2                    intlevel2 0000  
                 sprintf@ap 0039                _DAC1CON0bits 0EC6                _DAC1CON1bits 0EC7  
               ??_vfpfcnvrt 0023                    sprintf@f 003A                    sprintf@s 002F  
