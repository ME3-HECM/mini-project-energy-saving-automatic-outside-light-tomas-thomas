

Microchip MPLAB XC8 Assembler V2.45 build 20230818022343 
                                                                                               Thu Feb 08 21:45:21 2024

Microchip MPLAB XC8 C Compiler v2.45 (Free license) build 20230818022343 Og1 
     1                           	processor	18F67K40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1,group=3
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=2
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=3
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=3
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=3
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=3
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=2
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=2
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1
    34                           	psect	text21,global,reloc=2,class=CODE,delta=1
    35                           	psect	text22,global,reloc=2,class=CODE,delta=1
    36                           	psect	text23,global,reloc=2,class=CODE,delta=1
    37                           	psect	text24,global,reloc=2,class=CODE,delta=1
    38                           	psect	text25,global,reloc=2,class=CODE,delta=1
    39                           	psect	text26,global,reloc=2,class=CODE,delta=1
    40                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    41                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    42                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    43                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    44                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    45   000000                     
    46                           ; Generated 21/07/2023 GMT
    47                           ; 
    48                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    49                           ; All rights reserved.
    50                           ; 
    51                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    52                           ; 
    53                           ; Redistribution and use in source and binary forms, with or without modification, are
    54                           ; permitted provided that the following conditions are met:
    55                           ; 
    56                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    57                           ;        conditions and the following disclaimer.
    58                           ; 
    59                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    60                           ;        of conditions and the following disclaimer in the documentation and/or other
    61                           ;        materials provided with the distribution. Publication is not required when
    62                           ;        this file is used in an embedded application.
    63                           ; 
    64                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    65                           ;        software without specific prior written permission.
    66                           ; 
    67                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    68                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    69                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    70                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    71                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    72                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    73                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    74                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    75                           ; 
    76                           ; 
    77                           ; Code-generator required, PIC18F67K40 Definitions
    78                           ; 
    79                           ; SFR Addresses
    80   000000                     
    81                           	psect	idataBANK0
    82   001E08                     __pidataBANK0:
    83                           	callstack 0
    84                           
    85                           ;initializer for UpdateClock@F14152
    86   001E08  001F               	dw	31
    87   001E0A  001C               	dw	28
    88   001E0C  001F               	dw	31
    89   001E0E  001E               	dw	30
    90   001E10  001F               	dw	31
    91   001E12  001E               	dw	30
    92   001E14  001F               	dw	31
    93   001E16  001F               	dw	31
    94   001E18  001E               	dw	30
    95   001E1A  001F               	dw	31
    96   001E1C  001E               	dw	30
    97   001E1E  001F               	dw	31
    98   000000                     _TRISCbits	set	3971
    99   000000                     _TRISEbits	set	3973
   100   000000                     _LATEbits	set	3965
   101   000000                     _LATCbits	set	3963
   102   000000                     _LATBbits	set	3962
   103   000000                     _TRISBbits	set	3970
   104   000000                     _LATFbits	set	3966
   105   000000                     _TRISAbits	set	3969
   106   000000                     _LATGbits	set	3967
   107   000000                     _TRISGbits	set	3975
   108   000000                     _CM1CON1bits	set	3793
   109   000000                     _TRISFbits	set	3974
   110   000000                     _LATHbits	set	3968
   111   000000                     _TRISHbits	set	3976
   112   000000                     _IPR0bits	set	3615
   113   000000                     _PIE0bits	set	3625
   114   000000                     _LATDbits	set	3964
   115   000000                     _TRISDbits	set	3972
   116   000000                     _TMR0L	set	4051
   117   000000                     _TMR0H	set	4052
   118   000000                     _T0CON0bits	set	4053
   119   000000                     _T0CON1bits	set	4054
   120   000000                     _INTCONbits	set	4082
   121   000000                     _PIR0bits	set	3635
   122   000000                     _ANSELAbits	set	3730
   123   000000                     _DAC1CON0bits	set	3782
   124   000000                     _CM1CON0bits	set	3792
   125   000000                     _CM1NCHbits	set	3794
   126   000000                     _DAC1CON1bits	set	3783
   127   000000                     _ADREFbits	set	3928
   128   000000                     _LATAbits	set	3961
   129   000000                     _CM1PCHbits	set	3795
   130   000000                     _ADPCH	set	3935
   131   000000                     _ADRESH	set	3940
   132   000000                     _ADCON0bits	set	3936
   133                           
   134                           	psect	smallconst
   135   000E00                     __psmallconst:
   136                           	callstack 0
   137   000E00  00                 	db	0
   138   000E01                     STR_1:
   139                           
   140                           ; BSR set to: 14
   141   000E01  54                 	db	84	;'T'
   142   000E02  69                 	db	105	;'i'
   143   000E03  6D                 	db	109	;'m'
   144   000E04  65                 	db	101	;'e'
   145   000E05  3A                 	db	58	;':'
   146   000E06  25                 	db	37
   147   000E07  30                 	db	48	;'0'
   148   000E08  32                 	db	50	;'2'
   149   000E09  64                 	db	100	;'d'
   150   000E0A  3A                 	db	58	;':'
   151   000E0B  25                 	db	37
   152   000E0C  30                 	db	48	;'0'
   153   000E0D  32                 	db	50	;'2'
   154   000E0E  64                 	db	100	;'d'
   155   000E0F  3A                 	db	58	;':'
   156   000E10  25                 	db	37
   157   000E11  30                 	db	48	;'0'
   158   000E12  32                 	db	50	;'2'
   159   000E13  64                 	db	100	;'d'
   160   000E14  20                 	db	32
   161   000E15  44                 	db	68	;'D'
   162   000E16  25                 	db	37
   163   000E17  30                 	db	48	;'0'
   164   000E18  31                 	db	49	;'1'
   165   000E19  64                 	db	100	;'d'
   166   000E1A  00                 	db	0
   167   000E1B                     
   168                           ; BSR set to: 14
   169   000E1B  54                 	db	84	;'T'
   170   000E1C  69                 	db	105	;'i'
   171   000E1D  6D                 	db	109	;'m'
   172   000E1E  65                 	db	101	;'e'
   173   000E1F  3A                 	db	58	;':'
   174   000E20  20                 	db	32
   175   000E21  25                 	db	37
   176   000E22  30                 	db	48	;'0'
   177   000E23  32                 	db	50	;'2'
   178   000E24  64                 	db	100	;'d'
   179   000E25  3A                 	db	58	;':'
   180   000E26  25                 	db	37
   181   000E27  30                 	db	48	;'0'
   182   000E28  32                 	db	50	;'2'
   183   000E29  64                 	db	100	;'d'
   184   000E2A  3A                 	db	58	;':'
   185   000E2B  25                 	db	37
   186   000E2C  30                 	db	48	;'0'
   187   000E2D  34                 	db	52	;'4'
   188   000E2E  64                 	db	100	;'d'
   189   000E2F  00                 	db	0
   190   000E30                     STR_2:
   191                           
   192                           ; BSR set to: 14
   193   000E30  44                 	db	68	;'D'
   194   000E31  61                 	db	97	;'a'
   195   000E32  74                 	db	116	;'t'
   196   000E33  65                 	db	101	;'e'
   197   000E34  3A                 	db	58	;':'
   198   000E35  25                 	db	37
   199   000E36  30                 	db	48	;'0'
   200   000E37  32                 	db	50	;'2'
   201   000E38  64                 	db	100	;'d'
   202   000E39  2F                 	db	47
   203   000E3A  25                 	db	37
   204   000E3B  30                 	db	48	;'0'
   205   000E3C  32                 	db	50	;'2'
   206   000E3D  64                 	db	100	;'d'
   207   000E3E  2F                 	db	47
   208   000E3F  25                 	db	37
   209   000E40  30                 	db	48	;'0'
   210   000E41  34                 	db	52	;'4'
   211   000E42  64                 	db	100	;'d'
   212   000E43  00                 	db	0
   213   000E44  00                 	db	0	; dummy byte at the end
   214   000000                     
   215                           ; #config settings
   216                           
   217                           	psect	cinit
   218   001C12                     __pcinit:
   219                           	callstack 0
   220   001C12                     start_initialization:
   221                           	callstack 0
   222   001C12                     __initialization:
   223                           	callstack 0
   224                           
   225                           ; Initialize objects allocated to BANK0 (24 bytes)
   226                           ; load TBLPTR registers with __pidataBANK0
   227   001C12  0E08               	movlw	low __pidataBANK0
   228   001C14  6EF6               	movwf	tblptrl,c
   229   001C16  0E1E               	movlw	high __pidataBANK0
   230   001C18  6EF7               	movwf	tblptrh,c
   231   001C1A  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   232   001C1C  6EF8               	movwf	tblptru,c
   233   001C1E  EE00  F0A6         	lfsr	0,__pdataBANK0
   234   001C22  EE10 F018          	lfsr	1,24
   235   001C26                     copy_data0:
   236   001C26  0009               	tblrd		*+
   237   001C28  CFF5 FFEE          	movff	tablat,postinc0
   238   001C2C  50E5               	movf	postdec1,w,c
   239   001C2E  50E1               	movf	fsr1l,w,c
   240   001C30  E1FA               	bnz	copy_data0
   241                           
   242                           ; Clear objects allocated to BANK0 (34 bytes)
   243   001C32  EE00  F084         	lfsr	0,__pbssBANK0
   244   001C36  0E22               	movlw	34
   245   001C38                     clear_0:
   246   001C38  6AEE               	clrf	postinc0,c
   247   001C3A  06E8               	decf	wreg,f,c
   248   001C3C  E1FD               	bnz	clear_0
   249                           
   250                           ; Clear objects allocated to COMRAM (5 bytes)
   251   001C3E  6A4A               	clrf	(__pbssCOMRAM+4)& (0+255),c
   252   001C40  6A49               	clrf	(__pbssCOMRAM+3)& (0+255),c
   253   001C42  6A48               	clrf	(__pbssCOMRAM+2)& (0+255),c
   254   001C44  6A47               	clrf	(__pbssCOMRAM+1)& (0+255),c
   255   001C46  6A46               	clrf	__pbssCOMRAM& (0+255),c
   256   001C48                     end_of_initialization:
   257                           	callstack 0
   258   001C48                     __end_of__initialization:
   259                           	callstack 0
   260   001C48  904B               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   261   001C4A  924B               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   262   001C4C  0100               	movlb	0
   263   001C4E  EFDF  F008         	goto	_main	;jump to C main() function
   264                           
   265                           	psect	bssCOMRAM
   266   000046                     __pbssCOMRAM:
   267                           	callstack 0
   268   000046                     _width:
   269                           	callstack 0
   270   000046                     	ds	2
   271   000048                     _prec:
   272                           	callstack 0
   273   000048                     	ds	2
   274   00004A                     _flags:
   275                           	callstack 0
   276   00004A                     	ds	1
   277                           
   278                           	psect	bssBANK0
   279   000084                     __pbssBANK0:
   280                           	callstack 0
   281   000084                     _dbuf:
   282                           	callstack 0
   283   000084                     	ds	32
   284   0000A4                     _GLOBALsecs:
   285                           	callstack 0
   286   0000A4                     	ds	2
   287                           
   288                           	psect	dataBANK0
   289   0000A6                     __pdataBANK0:
   290                           	callstack 0
   291   0000A6                     UpdateClock@F14152:
   292                           	callstack 0
   293   0000A6                     	ds	24
   294                           
   295                           	psect	cstackBANK0
   296   000060                     __pcstackBANK0:
   297                           	callstack 0
   298   000060                     main@buf:
   299                           	callstack 0
   300                           
   301                           ; 20 bytes @ 0x0
   302   000060                     	ds	20
   303   000074                     main@TestMode:
   304                           	callstack 0
   305                           
   306                           ; 2 bytes @ 0x14
   307   000074                     	ds	2
   308   000076                     main@clock:
   309                           	callstack 0
   310                           
   311                           ; 14 bytes @ 0x16
   312   000076                     	ds	14
   313                           
   314                           	psect	cstackCOMRAM
   315   000001                     __pcstackCOMRAM:
   316                           	callstack 0
   317   000001                     ?___wmul:
   318                           	callstack 0
   319   000001                     ?___awdiv:
   320                           	callstack 0
   321   000001                     ?___awmod:
   322                           	callstack 0
   323   000001                     LCD_sendnibble@number:
   324                           	callstack 0
   325   000001                     LEDarray_disp_bin@number:
   326                           	callstack 0
   327   000001                     ___wmul@multiplier:
   328                           	callstack 0
   329   000001                     ___awdiv@dividend:
   330                           	callstack 0
   331   000001                     ___awmod@dividend:
   332                           	callstack 0
   333   000001                     fputc@c:
   334                           	callstack 0
   335                           
   336                           ; 2 bytes @ 0x0
   337   000001                     	ds	1
   338   000002                     LCD_sendbyte@type:
   339                           	callstack 0
   340                           
   341                           ; 1 bytes @ 0x1
   342   000002                     	ds	1
   343   000003                     LCD_sendbyte@Byte:
   344                           	callstack 0
   345   000003                     fputc@fp:
   346                           	callstack 0
   347   000003                     ___wmul@multiplicand:
   348                           	callstack 0
   349   000003                     ___awdiv@divisor:
   350                           	callstack 0
   351   000003                     ___awmod@divisor:
   352                           	callstack 0
   353                           
   354                           ; 2 bytes @ 0x2
   355   000003                     	ds	1
   356   000004                     ??_LCD_Init:
   357   000004                     ??_fputc:
   358   000004                     LCD_setline@line:
   359                           	callstack 0
   360   000004                     LCD_sendstring@string:
   361                           	callstack 0
   362                           
   363                           ; 1 bytes @ 0x3
   364   000004                     	ds	1
   365   000005                     ___awdiv@counter:
   366                           	callstack 0
   367   000005                     ___awmod@counter:
   368                           	callstack 0
   369   000005                     ___wmul@product:
   370                           	callstack 0
   371                           
   372                           ; 2 bytes @ 0x4
   373   000005                     	ds	1
   374   000006                     ___awdiv@sign:
   375                           	callstack 0
   376   000006                     ___awmod@sign:
   377                           	callstack 0
   378                           
   379                           ; 1 bytes @ 0x5
   380   000006                     	ds	1
   381   000007                     ?_abs:
   382                           	callstack 0
   383   000007                     ?_read_prec_or_width:
   384                           	callstack 0
   385   000007                     UpdateClock@seconds:
   386                           	callstack 0
   387   000007                     read_prec_or_width@fmt:
   388                           	callstack 0
   389   000007                     ___awdiv@quotient:
   390                           	callstack 0
   391   000007                     abs@a:
   392                           	callstack 0
   393                           
   394                           ; 2 bytes @ 0x6
   395   000007                     	ds	1
   396   000008                     UpdateClock@minutes:
   397                           	callstack 0
   398   000008                     read_prec_or_width@ap:
   399                           	callstack 0
   400                           
   401                           ; 1 bytes @ 0x7
   402   000008                     	ds	1
   403   000009                     ??_abs:
   404   000009                     UpdateClock@hours:
   405                           	callstack 0
   406   000009                     read_prec_or_width@c:
   407                           	callstack 0
   408   000009                     fputs@s:
   409                           	callstack 0
   410                           
   411                           ; 1 bytes @ 0x8
   412   000009                     	ds	1
   413   00000A                     UpdateClock@days:
   414                           	callstack 0
   415   00000A                     fputs@fp:
   416                           	callstack 0
   417   00000A                     read_prec_or_width@n:
   418                           	callstack 0
   419                           
   420                           ; 2 bytes @ 0x9
   421   00000A                     	ds	1
   422   00000B                     UpdateClock@DoW:
   423                           	callstack 0
   424   00000B                     fputs@c:
   425                           	callstack 0
   426                           
   427                           ; 1 bytes @ 0xA
   428   00000B                     	ds	1
   429   00000C                     UpdateClock@months:
   430                           	callstack 0
   431   00000C                     fputs@i:
   432                           	callstack 0
   433                           
   434                           ; 2 bytes @ 0xB
   435   00000C                     	ds	1
   436   00000D                     UpdateClock@years:
   437                           	callstack 0
   438                           
   439                           ; 1 bytes @ 0xC
   440   00000D                     	ds	1
   441   00000E                     pad@fp:
   442                           	callstack 0
   443   00000E                     UpdateClock@TestMode:
   444                           	callstack 0
   445                           
   446                           ; 2 bytes @ 0xD
   447   00000E                     	ds	1
   448   00000F                     pad@buf:
   449                           	callstack 0
   450                           
   451                           ; 1 bytes @ 0xE
   452   00000F                     	ds	1
   453   000010                     ??_UpdateClock:
   454   000010                     pad@p:
   455                           	callstack 0
   456                           
   457                           ; 2 bytes @ 0xF
   458   000010                     	ds	2
   459   000012                     ??_pad:
   460                           
   461                           ; 1 bytes @ 0x11
   462   000012                     	ds	1
   463   000013                     pad@i:
   464                           	callstack 0
   465                           
   466                           ; 2 bytes @ 0x12
   467   000013                     	ds	2
   468   000015                     dtoa@fp:
   469                           	callstack 0
   470                           
   471                           ; 1 bytes @ 0x14
   472   000015                     	ds	1
   473   000016                     dtoa@d:
   474                           	callstack 0
   475   000016                     UpdateClock@DaysInMonth:
   476                           	callstack 0
   477                           
   478                           ; 24 bytes @ 0x15
   479   000016                     	ds	2
   480   000018                     _dtoa$1872:
   481                           	callstack 0
   482                           
   483                           ; 2 bytes @ 0x17
   484   000018                     	ds	2
   485   00001A                     dtoa@p:
   486                           	callstack 0
   487                           
   488                           ; 1 bytes @ 0x19
   489   00001A                     	ds	1
   490   00001B                     dtoa@w:
   491                           	callstack 0
   492                           
   493                           ; 2 bytes @ 0x1A
   494   00001B                     	ds	2
   495   00001D                     dtoa@s:
   496                           	callstack 0
   497                           
   498                           ; 1 bytes @ 0x1C
   499   00001D                     	ds	1
   500   00001E                     dtoa@i:
   501                           	callstack 0
   502                           
   503                           ; 2 bytes @ 0x1D
   504   00001E                     	ds	2
   505   000020                     vfpfcnvrt@fp:
   506                           	callstack 0
   507                           
   508                           ; 1 bytes @ 0x1F
   509   000020                     	ds	1
   510   000021                     vfpfcnvrt@fmt:
   511                           	callstack 0
   512                           
   513                           ; 1 bytes @ 0x20
   514   000021                     	ds	1
   515   000022                     vfpfcnvrt@ap:
   516                           	callstack 0
   517                           
   518                           ; 1 bytes @ 0x21
   519   000022                     	ds	1
   520   000023                     ??_vfpfcnvrt:
   521                           
   522                           ; 1 bytes @ 0x22
   523   000023                     	ds	2
   524   000025                     vfpfcnvrt@convarg:
   525                           	callstack 0
   526                           
   527                           ; 4 bytes @ 0x24
   528   000025                     	ds	4
   529   000029                     vfpfcnvrt@done:
   530                           	callstack 0
   531                           
   532                           ; 1 bytes @ 0x28
   533   000029                     	ds	1
   534   00002A                     vfpfcnvrt@cp:
   535                           	callstack 0
   536                           
   537                           ; 1 bytes @ 0x29
   538   00002A                     	ds	1
   539   00002B                     ?_vfprintf:
   540                           	callstack 0
   541   00002B                     vfprintf@fp:
   542                           	callstack 0
   543                           
   544                           ; 1 bytes @ 0x2A
   545   00002B                     	ds	1
   546   00002C                     vfprintf@fmt:
   547                           	callstack 0
   548                           
   549                           ; 1 bytes @ 0x2B
   550   00002C                     	ds	1
   551   00002D                     vfprintf@ap:
   552                           	callstack 0
   553                           
   554                           ; 1 bytes @ 0x2C
   555   00002D                     	ds	1
   556   00002E                     vfprintf@cfmt:
   557                           	callstack 0
   558                           
   559                           ; 1 bytes @ 0x2D
   560   00002E                     	ds	1
   561   00002F                     ?_sprintf:
   562                           	callstack 0
   563   00002F                     sprintf@s:
   564                           	callstack 0
   565                           
   566                           ; 1 bytes @ 0x2E
   567   00002F                     	ds	1
   568   000030                     sprintf@fmt:
   569                           	callstack 0
   570                           
   571                           ; 1 bytes @ 0x2F
   572   000030                     	ds	9
   573   000039                     sprintf@ap:
   574                           	callstack 0
   575                           
   576                           ; 1 bytes @ 0x38
   577   000039                     	ds	1
   578   00003A                     sprintf@f:
   579                           	callstack 0
   580                           
   581                           ; 12 bytes @ 0x39
   582   00003A                     	ds	12
   583   000046                     
   584                           ; 1 bytes @ 0x45
   585 ;;
   586 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   587 ;;
   588 ;; *************** function _main *****************
   589 ;; Defined at:
   590 ;;		line 30 in file "main.c"
   591 ;; Parameters:    Size  Location     Type
   592 ;;		None
   593 ;; Auto vars:     Size  Location     Type
   594 ;;  buf            20    0[BANK0 ] unsigned char [20]
   595 ;;  clock          14   22[BANK0 ] struct time_structure
   596 ;;  TestMode        2   20[BANK0 ] int 
   597 ;; Return value:  Size  Location     Type
   598 ;;                  1    wreg      void 
   599 ;; Registers used:
   600 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   601 ;; Tracked objects:
   602 ;;		On entry : 0/0
   603 ;;		On exit  : 0/0
   604 ;;		Unchanged: 0/0
   605 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   606 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   607 ;;      Locals:         0      36       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   608 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   609 ;;      Totals:         0      36       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   610 ;;Total ram usage:       36 bytes
   611 ;; Hardware stack levels required when called: 9
   612 ;; This function calls:
   613 ;;		_ADC_init
   614 ;;		_Interrupts_init
   615 ;;		_LCD_Init
   616 ;;		_LCD_sendstring
   617 ;;		_LCD_setline
   618 ;;		_LEDarray_disp_bin
   619 ;;		_LEDarray_init
   620 ;;		_Timer0_init
   621 ;;		_UpdateClock
   622 ;;		_clock_init
   623 ;;		_sprintf
   624 ;; This function is called by:
   625 ;;		Startup code after reset
   626 ;; This function uses a non-reentrant model
   627 ;;
   628                           
   629                           	psect	text0
   630   0011BE                     __ptext0:
   631                           	callstack 0
   632   0011BE                     _main:
   633                           	callstack 22
   634   0011BE                     
   635                           ;main.c: 33:     LEDarray_init();
   636   0011BE  ECC2  F00E         	call	_LEDarray_init	;wreg free
   637   0011C2                     
   638                           ;main.c: 34:     Timer0_init();
   639   0011C2  ECE7  F00E         	call	_Timer0_init	;wreg free
   640   0011C6                     
   641                           ;main.c: 35:     Interrupts_init();
   642   0011C6  EC17  F00F         	call	_Interrupts_init	;wreg free
   643   0011CA                     
   644                           ;main.c: 37:     LCD_Init();
   645   0011CA  EC15  F00B         	call	_LCD_Init	;wreg free
   646   0011CE                     
   647                           ;main.c: 38:     ADC_init();
   648   0011CE  ECF7  F00E         	call	_ADC_init	;wreg free
   649   0011D2                     
   650                           ;main.c: 39:     clock_init();
   651   0011D2  EC1F  F00F         	call	_clock_init	;wreg free
   652   0011D6                     
   653                           ;main.c: 41:     char buf[20];;main.c: 45:     TRISDbits.TRISD7 = 0;
   654   0011D6  9E84               	bcf	132,7,c	;volatile
   655   0011D8                     
   656                           ;main.c: 46:     LATDbits.LATD7 = 0;
   657   0011D8  9E7C               	bcf	124,7,c	;volatile
   658   0011DA                     
   659                           ;main.c: 49:     TRISHbits.TRISH3 = 0;
   660   0011DA  9688               	bcf	136,3,c	;volatile
   661   0011DC                     
   662                           ;main.c: 50:     LATHbits.LATH3 = 0;
   663   0011DC  9680               	bcf	128,3,c	;volatile
   664   0011DE                     
   665                           ;main.c: 64:     struct time_structure clock;;main.c: 66:         GLOBALsecs = 55;
   666   0011DE  0E00               	movlw	0
   667   0011E0  0100               	movlb	0	; () banked
   668   0011E2  6FA5               	movwf	(_GLOBALsecs+1)& (0+255),b
   669   0011E4  0E37               	movlw	55
   670   0011E6  6FA4               	movwf	_GLOBALsecs& (0+255),b
   671   0011E8                     
   672                           ; BSR set to: 0
   673                           ;main.c: 67:         clock.minutes = 59;
   674   0011E8  0E00               	movlw	0
   675   0011EA  6F79               	movwf	(main@clock+3)& (0+255),b
   676   0011EC  0E3B               	movlw	59
   677   0011EE  6F78               	movwf	(main@clock+2)& (0+255),b
   678   0011F0                     
   679                           ; BSR set to: 0
   680                           ;main.c: 68:         clock.hours = 2;
   681   0011F0  0E00               	movlw	0
   682   0011F2  6F7B               	movwf	(main@clock+5)& (0+255),b
   683   0011F4  0E02               	movlw	2
   684   0011F6  6F7A               	movwf	(main@clock+4)& (0+255),b
   685   0011F8                     
   686                           ; BSR set to: 0
   687                           ;main.c: 69:         clock.days = 28;
   688   0011F8  0E00               	movlw	0
   689   0011FA  6F7D               	movwf	(main@clock+7)& (0+255),b
   690   0011FC  0E1C               	movlw	28
   691   0011FE  6F7C               	movwf	(main@clock+6)& (0+255),b
   692   001200                     
   693                           ; BSR set to: 0
   694                           ;main.c: 70:         clock.DoW = 3;
   695   001200  0E00               	movlw	0
   696   001202  6F7F               	movwf	(main@clock+9)& (0+255),b
   697   001204  0E03               	movlw	3
   698   001206  6F7E               	movwf	(main@clock+8)& (0+255),b
   699   001208                     
   700                           ; BSR set to: 0
   701                           ;main.c: 71:         clock.months = 2;
   702   001208  0E00               	movlw	0
   703   00120A  6F81               	movwf	(main@clock+11)& (0+255),b
   704   00120C  0E02               	movlw	2
   705   00120E  6F80               	movwf	(main@clock+10)& (0+255),b
   706   001210                     
   707                           ; BSR set to: 0
   708                           ;main.c: 72:         clock.years = 1901;
   709   001210  0E07               	movlw	7
   710   001212  6F83               	movwf	(main@clock+13)& (0+255),b
   711   001214  0E6D               	movlw	109
   712   001216  6F82               	movwf	(main@clock+12)& (0+255),b
   713   001218                     
   714                           ; BSR set to: 0
   715                           ;main.c: 76:         int TestMode = 1;
   716   001218  0E00               	movlw	0
   717   00121A  6F75               	movwf	(main@TestMode+1)& (0+255),b
   718   00121C  0E01               	movlw	1
   719   00121E  6F74               	movwf	main@TestMode& (0+255),b
   720   001220                     l37:
   721                           
   722                           ;main.c: 82:         if (TestMode == 0){clock.seconds = GLOBALsecs;}
   723   001220  0100               	movlb	0	; () banked
   724   001222  5174               	movf	main@TestMode& (0+255),w,b
   725   001224  1175               	iorwf	(main@TestMode+1)& (0+255),w,b
   726   001226  A4D8               	btfss	status,2,c
   727   001228  EF18  F009         	goto	u1931
   728   00122C  EF1A  F009         	goto	u1930
   729   001230                     u1931:
   730   001230  EF1E  F009         	goto	l2350
   731   001234                     u1930:
   732   001234                     
   733                           ; BSR set to: 0
   734   001234  C0A4  F076         	movff	_GLOBALsecs,main@clock
   735   001238  C0A5  F077         	movff	_GLOBALsecs+1,main@clock+1
   736   00123C                     l2350:
   737                           
   738                           ; BSR set to: 0
   739                           ;main.c: 84:         UpdateClock(&GLOBALsecs, &clock.minutes, &clock.hours, &clock.days,
      +                           &clock.DoW, &clock.months, &clock.years, TestMode);
   740   00123C  0EA4               	movlw	low _GLOBALsecs
   741   00123E  6E07               	movwf	UpdateClock@seconds^0,c
   742   001240  0E78               	movlw	low (main@clock+2)
   743   001242  6E08               	movwf	UpdateClock@minutes^0,c
   744   001244  0E7A               	movlw	low (main@clock+4)
   745   001246  6E09               	movwf	UpdateClock@hours^0,c
   746   001248  0E7C               	movlw	low (main@clock+6)
   747   00124A  6E0A               	movwf	UpdateClock@days^0,c
   748   00124C  0E7E               	movlw	low (main@clock+8)
   749   00124E  6E0B               	movwf	UpdateClock@DoW^0,c
   750   001250  0E80               	movlw	low (main@clock+10)
   751   001252  6E0C               	movwf	UpdateClock@months^0,c
   752   001254  0E82               	movlw	low (main@clock+12)
   753   001256  6E0D               	movwf	UpdateClock@years^0,c
   754   001258  C074  F00E         	movff	main@TestMode,UpdateClock@TestMode
   755   00125C  C075  F00F         	movff	main@TestMode+1,UpdateClock@TestMode+1
   756   001260  EC23  F007         	call	_UpdateClock	;wreg free
   757   001264                     
   758                           ;main.c: 87:         LEDarray_disp_bin(clock.hours);
   759   001264  C07A  F001         	movff	main@clock+4,LEDarray_disp_bin@number
   760   001268  C07B  F002         	movff	main@clock+5,LEDarray_disp_bin@number+1
   761   00126C  ECA5  F00B         	call	_LEDarray_disp_bin	;wreg free
   762   001270                     
   763                           ;main.c: 90:         if (clock.months == 3 ){
   764   001270  0E03               	movlw	3
   765   001272  0100               	movlb	0	; () banked
   766   001274  1980               	xorwf	(main@clock+10)& (0+255),w,b
   767   001276  1181               	iorwf	(main@clock+11)& (0+255),w,b
   768   001278  A4D8               	btfss	status,2,c
   769   00127A  EF41  F009         	goto	u1941
   770   00127E  EF43  F009         	goto	u1940
   771   001282                     u1941:
   772   001282  EF46  F009         	goto	l39
   773   001286                     u1940:
   774   001286                     
   775                           ; BSR set to: 0
   776                           ;main.c: 91:             LATDbits.LATD7 = 1;
   777   001286  8E7C               	bsf	124,7,c	;volatile
   778                           
   779                           ;main.c: 92:         }
   780   001288  EF47  F009         	goto	l2358
   781   00128C                     l39:
   782                           
   783                           ; BSR set to: 0
   784                           ;main.c: 94:             LATDbits.LATD7 = 0;
   785   00128C  9E7C               	bcf	124,7,c	;volatile
   786   00128E                     l2358:
   787                           
   788                           ; BSR set to: 0
   789                           ;main.c: 99:             if (clock.hours >= 1 && clock.hours <=5){
   790   00128E  BF7B               	btfsc	(main@clock+5)& (0+255),7,b
   791   001290  EF52  F009         	goto	u1951
   792   001294  517B               	movf	(main@clock+5)& (0+255),w,b
   793   001296  E108               	bnz	u1950
   794   001298  057A               	decf	(main@clock+4)& (0+255),w,b
   795   00129A  A0D8               	btfss	status,0,c
   796   00129C  EF52  F009         	goto	u1951
   797   0012A0  EF54  F009         	goto	u1950
   798   0012A4                     u1951:
   799   0012A4  EF65  F009         	goto	l42
   800   0012A8                     u1950:
   801   0012A8                     
   802                           ; BSR set to: 0
   803   0012A8  BF7B               	btfsc	(main@clock+5)& (0+255),7,b
   804   0012AA  EF62  F009         	goto	u1960
   805   0012AE  517B               	movf	(main@clock+5)& (0+255),w,b
   806   0012B0  E107               	bnz	u1961
   807   0012B2  0E06               	movlw	6
   808   0012B4  5D7A               	subwf	(main@clock+4)& (0+255),w,b
   809   0012B6  B0D8               	btfsc	status,0,c
   810   0012B8  EF60  F009         	goto	u1961
   811   0012BC  EF62  F009         	goto	u1960
   812   0012C0                     u1961:
   813   0012C0  EF65  F009         	goto	l42
   814   0012C4                     u1960:
   815   0012C4                     
   816                           ; BSR set to: 0
   817                           ;main.c: 100:                 LATHbits.LATH3 = 0;
   818   0012C4  9680               	bcf	128,3,c	;volatile
   819                           
   820                           ;main.c: 101:             }
   821   0012C6  EF66  F009         	goto	l2364
   822   0012CA                     l42:
   823                           
   824                           ; BSR set to: 0
   825                           ;main.c: 103:                 LATHbits.LATH3 = 1;
   826   0012CA  8680               	bsf	128,3,c	;volatile
   827   0012CC                     l2364:
   828                           
   829                           ; BSR set to: 0
   830                           ;main.c: 107:        LCD_setline(1);
   831   0012CC  0E01               	movlw	1
   832   0012CE  EC47  F00E         	call	_LCD_setline
   833   0012D2                     
   834                           ;main.c: 108:        sprintf(buf, "Time:%02d:%02d:%02d D%01d",clock.hours, clock.minutes
      +                          , clock.seconds, clock.DoW);
   835   0012D2  0E60               	movlw	low main@buf
   836   0012D4  6E2F               	movwf	sprintf@s^0,c
   837   0012D6  0E01               	movlw	low STR_1
   838   0012D8  6E30               	movwf	sprintf@fmt^0,c
   839   0012DA  C07A  F031         	movff	main@clock+4,?_sprintf+2
   840   0012DE  C07B  F032         	movff	main@clock+5,?_sprintf+3
   841   0012E2  C078  F033         	movff	main@clock+2,?_sprintf+4
   842   0012E6  C079  F034         	movff	main@clock+3,?_sprintf+5
   843   0012EA  C076  F035         	movff	main@clock,?_sprintf+6
   844   0012EE  C077  F036         	movff	main@clock+1,?_sprintf+7
   845   0012F2  C07E  F037         	movff	main@clock+8,?_sprintf+8
   846   0012F6  C07F  F038         	movff	main@clock+9,?_sprintf+9
   847   0012FA  EC64  F00E         	call	_sprintf	;wreg free
   848   0012FE                     
   849                           ;main.c: 109:        LCD_sendstring(buf);
   850   0012FE  0E60               	movlw	low main@buf
   851   001300  6E04               	movwf	LCD_sendstring@string^0,c
   852   001302  EC98  F00E         	call	_LCD_sendstring	;wreg free
   853   001306                     
   854                           ;main.c: 111:        LCD_setline(2);
   855   001306  0E02               	movlw	2
   856   001308  EC47  F00E         	call	_LCD_setline
   857   00130C                     
   858                           ;main.c: 112:        sprintf(buf, "Date:%02d/%02d/%04d",clock.days, clock.months, clock.
      +                          years);
   859   00130C  0E60               	movlw	low main@buf
   860   00130E  6E2F               	movwf	sprintf@s^0,c
   861   001310  0E30               	movlw	low STR_2
   862   001312  6E30               	movwf	sprintf@fmt^0,c
   863   001314  C07C  F031         	movff	main@clock+6,?_sprintf+2
   864   001318  C07D  F032         	movff	main@clock+7,?_sprintf+3
   865   00131C  C080  F033         	movff	main@clock+10,?_sprintf+4
   866   001320  C081  F034         	movff	main@clock+11,?_sprintf+5
   867   001324  C082  F035         	movff	main@clock+12,?_sprintf+6
   868   001328  C083  F036         	movff	main@clock+13,?_sprintf+7
   869   00132C  EC64  F00E         	call	_sprintf	;wreg free
   870                           
   871                           ;main.c: 113:        LCD_sendstring(buf);
   872   001330  0E60               	movlw	low main@buf
   873   001332  6E04               	movwf	LCD_sendstring@string^0,c
   874   001334  EC98  F00E         	call	_LCD_sendstring	;wreg free
   875   001338  EF10  F009         	goto	l37
   876   00133C  EF18  F000         	goto	start
   877   001340                     __end_of_main:
   878                           	callstack 0
   879                           
   880 ;; *************** function _sprintf *****************
   881 ;; Defined at:
   882 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\nf_sprintf.c"
   883 ;; Parameters:    Size  Location     Type
   884 ;;  s               1   46[COMRAM] PTR unsigned char 
   885 ;;		 -> main@buf(20), 
   886 ;;  fmt             1   47[COMRAM] PTR const unsigned char 
   887 ;;		 -> STR_3(21), STR_2(20), STR_1(26), 
   888 ;; Auto vars:     Size  Location     Type
   889 ;;  f              12   57[COMRAM] struct _IO_FILE
   890 ;;  ret             2    0        int 
   891 ;;  ap              1   56[COMRAM] PTR void [1]
   892 ;;		 -> ?_sprintf(2), 
   893 ;; Return value:  Size  Location     Type
   894 ;;                  2   46[COMRAM] int 
   895 ;; Registers used:
   896 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   897 ;; Tracked objects:
   898 ;;		On entry : 0/0
   899 ;;		On exit  : 0/0
   900 ;;		Unchanged: 0/0
   901 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   902 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   903 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   904 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   905 ;;      Totals:        23       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   906 ;;Total ram usage:       23 bytes
   907 ;; Hardware stack levels used: 1
   908 ;; Hardware stack levels required when called: 8
   909 ;; This function calls:
   910 ;;		_vfprintf
   911 ;; This function is called by:
   912 ;;		_main
   913 ;;		_ADC2String
   914 ;; This function uses a non-reentrant model
   915 ;;
   916                           
   917                           	psect	text1
   918   001CC8                     __ptext1:
   919                           	callstack 0
   920   001CC8                     _sprintf:
   921                           	callstack 22
   922   001CC8  0E31               	movlw	low (?_sprintf+2)
   923   001CCA  6E39               	movwf	sprintf@ap^0,c
   924   001CCC  C02F  F03A         	movff	sprintf@s,sprintf@f
   925   001CD0  0E00               	movlw	0
   926   001CD2  6E3E               	movwf	(sprintf@f+4)^0,c
   927   001CD4  0E00               	movlw	0
   928   001CD6  6E3D               	movwf	(sprintf@f+3)^0,c
   929   001CD8  0E00               	movlw	0
   930   001CDA  6E45               	movwf	(sprintf@f+11)^0,c
   931   001CDC  0E00               	movlw	0
   932   001CDE  6E44               	movwf	(sprintf@f+10)^0,c
   933   001CE0  0E3A               	movlw	low sprintf@f
   934   001CE2  6E2B               	movwf	vfprintf@fp^0,c
   935   001CE4  C030  F02C         	movff	sprintf@fmt,vfprintf@fmt
   936   001CE8  0E39               	movlw	low sprintf@ap
   937   001CEA  6E2D               	movwf	vfprintf@ap^0,c
   938   001CEC  ECE8  F00D         	call	_vfprintf	;wreg free
   939   001CF0  502F               	movf	sprintf@s^0,w,c
   940   001CF2  243D               	addwf	(sprintf@f+3)^0,w,c
   941   001CF4  6ED9               	movwf	fsr2l,c
   942   001CF6  6ADA               	clrf	fsr2h,c
   943   001CF8  6ADF               	clrf	indf2,c
   944   001CFA  0012               	return		;funcret
   945   001CFC                     __end_of_sprintf:
   946                           	callstack 0
   947                           
   948 ;; *************** function _vfprintf *****************
   949 ;; Defined at:
   950 ;;		line 1817 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
   951 ;; Parameters:    Size  Location     Type
   952 ;;  fp              1   42[COMRAM] PTR struct _IO_FILE
   953 ;;		 -> sprintf@f(12), 
   954 ;;  fmt             1   43[COMRAM] PTR const unsigned char 
   955 ;;		 -> STR_3(21), STR_2(20), STR_1(26), 
   956 ;;  ap              1   44[COMRAM] PTR PTR void 
   957 ;;		 -> sprintf@ap(1), 
   958 ;; Auto vars:     Size  Location     Type
   959 ;;  cfmt            1   45[COMRAM] PTR unsigned char 
   960 ;;		 -> STR_3(21), STR_2(20), STR_1(26), 
   961 ;; Return value:  Size  Location     Type
   962 ;;                  2   42[COMRAM] int 
   963 ;; Registers used:
   964 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   965 ;; Tracked objects:
   966 ;;		On entry : 0/0
   967 ;;		On exit  : 0/0
   968 ;;		Unchanged: 0/0
   969 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   970 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   971 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   972 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   973 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   974 ;;Total ram usage:        4 bytes
   975 ;; Hardware stack levels used: 1
   976 ;; Hardware stack levels required when called: 7
   977 ;; This function calls:
   978 ;;		_vfpfcnvrt
   979 ;; This function is called by:
   980 ;;		_sprintf
   981 ;; This function uses a non-reentrant model
   982 ;;
   983                           
   984                           	psect	text2
   985   001BD0                     __ptext2:
   986                           	callstack 0
   987   001BD0                     _vfprintf:
   988                           	callstack 22
   989   001BD0                     
   990                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1817: int vfprint
      +                          f(FILE *fp, const char *fmt, va_list ap);C:\Program Files\Microchip\xc8\v2.45\pic\source
      +                          s\c99\common\doprnt.c: 1818: {;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\comm
      +                          on\doprnt.c: 1820:     char *cfmt;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\
      +                          common\doprnt.c: 1822:     cfmt = (char *)fmt;
   991   001BD0  C02C  F02E         	movff	vfprintf@fmt,vfprintf@cfmt
   992                           
   993                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1826:     while (
      +                          *cfmt) {
   994   001BD4  EFF4  F00D         	goto	l2138
   995   001BD8                     l2136:
   996                           
   997                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1830:    vfpfcnvr
      +                          t(fp, &cfmt, ap);
   998   001BD8  C02B  F020         	movff	vfprintf@fp,vfpfcnvrt@fp
   999   001BDC  0E2E               	movlw	low vfprintf@cfmt
  1000   001BDE  6E21               	movwf	vfpfcnvrt@fmt^0,c
  1001   001BE0  C02D  F022         	movff	vfprintf@ap,vfpfcnvrt@ap
  1002   001BE4  ECA0  F009         	call	_vfpfcnvrt	;wreg free
  1003   001BE8                     l2138:
  1004                           
  1005                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1826:     while (
      +                          *cfmt) {
  1006   001BE8  C02E  FFF6         	movff	vfprintf@cfmt,tblptrl
  1007   001BEC                     	if	1	;There is more than 1 active tblptr byte
  1008   001BEC  0E0E               	movlw	high __smallconst
  1009   001BEE  6EF7               	movwf	tblptrh,c
  1010   001BF0                     	endif
  1011   001BF0                     	if	0	;tblptru may be non-zero
  1012   001BF0                     	endif
  1013   001BF0                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1014   001BF0  0E00               	movlw	low (__smallconst shr (0+16))
  1015   001BF2  6EF8               	movwf	tblptru,c
  1016   001BF4                     	endif
  1017   001BF4  0008               	tblrd		*
  1018   001BF6  50F5               	movf	tablat,w,c
  1019   001BF8  0900               	iorlw	0
  1020   001BFA  A4D8               	btfss	status,2,c
  1021   001BFC  EF02  F00E         	goto	u1661
  1022   001C00  EF04  F00E         	goto	u1660
  1023   001C04                     u1661:
  1024   001C04  EFEC  F00D         	goto	l2136
  1025   001C08                     u1660:
  1026   001C08                     
  1027                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1835:  return 0;
  1028   001C08  0E00               	movlw	0
  1029   001C0A  6E2C               	movwf	(?_vfprintf+1)^0,c
  1030   001C0C  0E00               	movlw	0
  1031   001C0E  6E2B               	movwf	?_vfprintf^0,c
  1032   001C10  0012               	return		;funcret
  1033   001C12                     __end_of_vfprintf:
  1034                           	callstack 0
  1035                           
  1036 ;; *************** function _vfpfcnvrt *****************
  1037 ;; Defined at:
  1038 ;;		line 1177 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
  1039 ;; Parameters:    Size  Location     Type
  1040 ;;  fp              1   31[COMRAM] PTR struct _IO_FILE
  1041 ;;		 -> sprintf@f(12), 
  1042 ;;  fmt             1   32[COMRAM] PTR PTR unsigned char 
  1043 ;;		 -> vfprintf@cfmt(1), 
  1044 ;;  ap              1   33[COMRAM] PTR PTR void 
  1045 ;;		 -> sprintf@ap(1), 
  1046 ;; Auto vars:     Size  Location     Type
  1047 ;;  convarg         4   36[COMRAM] struct .
  1048 ;;  cp              1   41[COMRAM] PTR unsigned char 
  1049 ;;		 -> STR_3(21), STR_2(20), STR_1(26), 
  1050 ;;  done            1   40[COMRAM] _Bool 
  1051 ;;  c               1    0        unsigned char 
  1052 ;; Return value:  Size  Location     Type
  1053 ;;                  1    wreg      void 
  1054 ;; Registers used:
  1055 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1056 ;; Tracked objects:
  1057 ;;		On entry : 0/0
  1058 ;;		On exit  : 0/0
  1059 ;;		Unchanged: 0/0
  1060 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1061 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1062 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1063 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1064 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1065 ;;Total ram usage:       11 bytes
  1066 ;; Hardware stack levels used: 1
  1067 ;; Hardware stack levels required when called: 6
  1068 ;; This function calls:
  1069 ;;		_dtoa
  1070 ;;		_fputc
  1071 ;;		_read_prec_or_width
  1072 ;; This function is called by:
  1073 ;;		_vfprintf
  1074 ;; This function uses a non-reentrant model
  1075 ;;
  1076                           
  1077                           	psect	text3
  1078   001340                     __ptext3:
  1079                           	callstack 0
  1080   001340                     _vfpfcnvrt:
  1081                           	callstack 22
  1082   001340                     
  1083                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1177: vfpfcnvrt(F
      +                          ILE *fp, char *fmt[], va_list ap);C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\c
      +                          ommon\doprnt.c: 1178: {;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\dopr
      +                          nt.c: 1179:     char c, *cp;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common
      +                          \doprnt.c: 1180:     _Bool done;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\co
      +                          mmon\doprnt.c: 1188:  } convarg;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\co
      +                          mmon\doprnt.c: 1201:     if ((*fmt)[0] == '%') {
  1084   001340  5021               	movf	vfpfcnvrt@fmt^0,w,c
  1085   001342  6ED9               	movwf	fsr2l,c
  1086   001344  6ADA               	clrf	fsr2h,c
  1087   001346  CFDF FFF6          	movff	indf2,tblptrl
  1088   00134A                     	if	1	;There is more than 1 active tblptr byte
  1089   00134A  0E0E               	movlw	high __smallconst
  1090   00134C  6EF7               	movwf	tblptrh,c
  1091   00134E                     	endif
  1092   00134E                     	if	0	;tblptru may be non-zero
  1093   00134E                     	endif
  1094   00134E                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1095   00134E  0E00               	movlw	low (__smallconst shr (0+16))
  1096   001350  6EF8               	movwf	tblptru,c
  1097   001352                     	endif
  1098   001352  0008               	tblrd		*
  1099   001354  50F5               	movf	tablat,w,c
  1100   001356  0A25               	xorlw	37
  1101   001358  A4D8               	btfss	status,2,c
  1102   00135A  EFB1  F009         	goto	u1601
  1103   00135E  EFB3  F009         	goto	u1600
  1104   001362                     u1601:
  1105   001362  EF4D  F00A         	goto	l2116
  1106   001366                     u1600:
  1107   001366                     
  1108                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1202:         ++*
      +                          fmt;
  1109   001366  5021               	movf	vfpfcnvrt@fmt^0,w,c
  1110   001368  6ED9               	movwf	fsr2l,c
  1111   00136A  6ADA               	clrf	fsr2h,c
  1112   00136C  2ADF               	incf	indf2,f,c
  1113   00136E                     
  1114                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1204:         fla
      +                          gs = width = 0;
  1115   00136E  0E00               	movlw	0
  1116   001370  6E47               	movwf	(_width+1)^0,c
  1117   001372  0E00               	movlw	0
  1118   001374  6E46               	movwf	_width^0,c
  1119   001376  C046  F04A         	movff	_width,_flags
  1120   00137A                     
  1121                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1205:         pre
      +                          c = -1;
  1122   00137A  6848               	setf	_prec^0,c
  1123   00137C  6849               	setf	(_prec+1)^0,c
  1124   00137E                     
  1125                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1209:         don
      +                          e = 0;
  1126   00137E  0E00               	movlw	0
  1127   001380  6E29               	movwf	vfpfcnvrt@done^0,c
  1128                           
  1129                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1210:         whi
      +                          le (!done) {
  1130   001382  EFE9  F009         	goto	l2090
  1131   001386                     l2080:
  1132                           
  1133                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1220:            
      +                                   flags |= (1 << 1);
  1134   001386  824A               	bsf	_flags^0,1,c
  1135   001388                     
  1136                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1221:            
      +                                   ++*fmt;
  1137   001388  5021               	movf	vfpfcnvrt@fmt^0,w,c
  1138   00138A  6ED9               	movwf	fsr2l,c
  1139   00138C  6ADA               	clrf	fsr2h,c
  1140   00138E  2ADF               	incf	indf2,f,c
  1141                           
  1142                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1222:            
      +                                   break;
  1143   001390  EFE9  F009         	goto	l2090
  1144   001394                     l2084:
  1145                           
  1146                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1243:            
      +                                   done = 1;
  1147   001394  0E01               	movlw	1
  1148   001396  6E29               	movwf	vfpfcnvrt@done^0,c
  1149                           
  1150                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1244:            
      +                                   break;
  1151   001398  EFE9  F009         	goto	l2090
  1152   00139C                     l2088:
  1153   00139C  5021               	movf	vfpfcnvrt@fmt^0,w,c
  1154   00139E  6ED9               	movwf	fsr2l,c
  1155   0013A0  6ADA               	clrf	fsr2h,c
  1156   0013A2  CFDF FFF6          	movff	indf2,tblptrl
  1157   0013A6                     	if	1	;There is more than 1 active tblptr byte
  1158   0013A6  0E0E               	movlw	high __smallconst
  1159   0013A8  6EF7               	movwf	tblptrh,c
  1160   0013AA                     	endif
  1161   0013AA                     	if	0	;tblptru may be non-zero
  1162   0013AA                     	endif
  1163   0013AA                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1164   0013AA  0E00               	movlw	low (__smallconst shr (0+16))
  1165   0013AC  6EF8               	movwf	tblptru,c
  1166   0013AE                     	endif
  1167   0013AE  0008               	tblrd		*
  1168   0013B0  50F5               	movf	tablat,w,c
  1169   0013B2  6E23               	movwf	??_vfpfcnvrt^0,c
  1170   0013B4  6A24               	clrf	(??_vfpfcnvrt+1)^0,c
  1171                           
  1172                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1173                           ; Switch size 1, requested type "simple"
  1174                           ; Number of cases is 1, Range of values is 0 to 0
  1175                           ; switch strategies available:
  1176                           ; Name         Instructions Cycles
  1177                           ; simple_byte            4     3 (average)
  1178                           ;	Chosen strategy is simple_byte
  1179   0013B6  5024               	movf	(??_vfpfcnvrt+1)^0,w,c
  1180   0013B8  0A00               	xorlw	0	; case 0
  1181   0013BA  B4D8               	btfsc	status,2,c
  1182   0013BC  EFE2  F009         	goto	l2538
  1183   0013C0  EFCA  F009         	goto	l2084
  1184   0013C4                     l2538:
  1185                           
  1186                           ; Switch size 1, requested type "simple"
  1187                           ; Number of cases is 1, Range of values is 48 to 48
  1188                           ; switch strategies available:
  1189                           ; Name         Instructions Cycles
  1190                           ; simple_byte            4     3 (average)
  1191                           ;	Chosen strategy is simple_byte
  1192   0013C4  5023               	movf	??_vfpfcnvrt^0,w,c
  1193   0013C6  0A30               	xorlw	48	; case 48
  1194   0013C8  B4D8               	btfsc	status,2,c
  1195   0013CA  EFC3  F009         	goto	l2080
  1196   0013CE  EFCA  F009         	goto	l2084
  1197   0013D2                     l2090:
  1198                           
  1199                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1210:         whi
      +                          le (!done) {
  1200   0013D2  5029               	movf	vfpfcnvrt@done^0,w,c
  1201   0013D4  B4D8               	btfsc	status,2,c
  1202   0013D6  EFEF  F009         	goto	u1611
  1203   0013DA  EFF1  F009         	goto	u1610
  1204   0013DE                     u1611:
  1205   0013DE  EFCE  F009         	goto	l2088
  1206   0013E2                     u1610:
  1207   0013E2                     
  1208                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1256:   width = r
      +                          ead_prec_or_width(fmt, ap);
  1209   0013E2  C021  F007         	movff	vfpfcnvrt@fmt,read_prec_or_width@fmt
  1210   0013E6  C022  F008         	movff	vfpfcnvrt@ap,read_prec_or_width@ap
  1211   0013EA  ECC3  F00C         	call	_read_prec_or_width	;wreg free
  1212   0013EE  C007  F046         	movff	?_read_prec_or_width,_width
  1213   0013F2  C008  F047         	movff	?_read_prec_or_width+1,_width+1
  1214   0013F6                     
  1215                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1257:   if (width
      +                           < 0) {
  1216   0013F6  BE47               	btfsc	(_width+1)^0,7,c
  1217   0013F8  EF02  F00A         	goto	u1620
  1218   0013FC  EF00  F00A         	goto	u1621
  1219   001400                     u1621:
  1220   001400  EF07  F00A         	goto	l2098
  1221   001404                     u1620:
  1222   001404                     
  1223                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1258:    flags |=
      +                           (1 << 0);
  1224   001404  804A               	bsf	_flags^0,0,c
  1225                           
  1226                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1259:    width = 
      +                          -width;
  1227   001406  6C46               	negf	_width^0,c
  1228   001408  1E47               	comf	(_width+1)^0,f,c
  1229   00140A  B0D8               	btfsc	status,0,c
  1230   00140C  2A47               	incf	(_width+1)^0,f,c
  1231   00140E                     l2098:
  1232                           
  1233                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1291:   cp = *fmt
      +                          ;
  1234   00140E  5021               	movf	vfpfcnvrt@fmt^0,w,c
  1235   001410  6ED9               	movwf	fsr2l,c
  1236   001412  6ADA               	clrf	fsr2h,c
  1237   001414  50DF               	movf	indf2,w,c
  1238   001416  6E2A               	movwf	vfpfcnvrt@cp^0,c
  1239   001418                     
  1240                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1361:   if (*cp =
      +                          = 'd' || *cp == 'i') {
  1241   001418  C02A  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  1242   00141C                     	if	1	;There is more than 1 active tblptr byte
  1243   00141C  0E0E               	movlw	high __smallconst
  1244   00141E  6EF7               	movwf	tblptrh,c
  1245   001420                     	endif
  1246   001420                     	if	0	;tblptru may be non-zero
  1247   001420                     	endif
  1248   001420                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1249   001420  0E00               	movlw	low (__smallconst shr (0+16))
  1250   001422  6EF8               	movwf	tblptru,c
  1251   001424                     	endif
  1252   001424  0008               	tblrd		*
  1253   001426  50F5               	movf	tablat,w,c
  1254   001428  0A64               	xorlw	100
  1255   00142A  B4D8               	btfsc	status,2,c
  1256   00142C  EF1A  F00A         	goto	u1631
  1257   001430  EF1C  F00A         	goto	u1630
  1258   001434                     u1631:
  1259   001434  EF2C  F00A         	goto	l2104
  1260   001438                     u1630:
  1261   001438  C02A  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  1262   00143C                     	if	1	;There is more than 1 active tblptr byte
  1263   00143C  0E0E               	movlw	high __smallconst
  1264   00143E  6EF7               	movwf	tblptrh,c
  1265   001440                     	endif
  1266   001440                     	if	0	;tblptru may be non-zero
  1267   001440                     	endif
  1268   001440                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1269   001440  0E00               	movlw	low (__smallconst shr (0+16))
  1270   001442  6EF8               	movwf	tblptru,c
  1271   001444                     	endif
  1272   001444  0008               	tblrd		*
  1273   001446  50F5               	movf	tablat,w,c
  1274   001448  0A69               	xorlw	105
  1275   00144A  A4D8               	btfss	status,2,c
  1276   00144C  EF2A  F00A         	goto	u1641
  1277   001450  EF2C  F00A         	goto	u1640
  1278   001454                     u1641:
  1279   001454  EF47  F00A         	goto	l2112
  1280   001458                     u1640:
  1281   001458                     l2104:
  1282                           
  1283                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1404:    convarg.
      +                          sint = (vfpf_sint_t)(int)(*(int *)__va_arg(*(int **)ap, (int)0));
  1284   001458  5022               	movf	vfpfcnvrt@ap^0,w,c
  1285   00145A  6ED9               	movwf	fsr2l,c
  1286   00145C  6ADA               	clrf	fsr2h,c
  1287   00145E  0E02               	movlw	2
  1288   001460  26DF               	addwf	indf2,f,c
  1289   001462  5CDF               	subwf	indf2,w,c
  1290   001464  6ED9               	movwf	fsr2l,c
  1291   001466  6ADA               	clrf	fsr2h,c
  1292   001468  CFDE F025          	movff	postinc2,vfpfcnvrt@convarg
  1293   00146C  CFDE F026          	movff	postinc2,vfpfcnvrt@convarg+1
  1294   001470                     
  1295                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1406:    *fmt = c
      +                          p+1;
  1296   001470  5021               	movf	vfpfcnvrt@fmt^0,w,c
  1297   001472  6ED9               	movwf	fsr2l,c
  1298   001474  6ADA               	clrf	fsr2h,c
  1299   001476  282A               	incf	vfpfcnvrt@cp^0,w,c
  1300   001478  6EDF               	movwf	indf2,c
  1301   00147A                     
  1302                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1432:    return (
      +                          void) dtoa(fp, convarg.sint);;	Return value of _vfpfcnvrt is never used
  1303   00147A  C020  F015         	movff	vfpfcnvrt@fp,dtoa@fp
  1304   00147E  C025  F016         	movff	vfpfcnvrt@convarg,dtoa@d
  1305   001482  C026  F017         	movff	vfpfcnvrt@convarg+1,dtoa@d+1
  1306   001486  EC61  F00A         	call	_dtoa	;wreg free
  1307   00148A  EF60  F00A         	goto	l1062
  1308   00148E                     l2112:
  1309                           
  1310                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1806:         ++*
      +                          fmt;
  1311   00148E  5021               	movf	vfpfcnvrt@fmt^0,w,c
  1312   001490  6ED9               	movwf	fsr2l,c
  1313   001492  6ADA               	clrf	fsr2h,c
  1314   001494  2ADF               	incf	indf2,f,c
  1315   001496  EF60  F00A         	goto	l1062
  1316   00149A                     l2116:
  1317                           
  1318                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1811:     fputc((
      +                          int)(*fmt)[0], fp);
  1319   00149A  5021               	movf	vfpfcnvrt@fmt^0,w,c
  1320   00149C  6ED9               	movwf	fsr2l,c
  1321   00149E  6ADA               	clrf	fsr2h,c
  1322   0014A0  CFDF FFF6          	movff	indf2,tblptrl
  1323   0014A4                     	if	1	;There is more than 1 active tblptr byte
  1324   0014A4  0E0E               	movlw	high __smallconst
  1325   0014A6  6EF7               	movwf	tblptrh,c
  1326   0014A8                     	endif
  1327   0014A8                     	if	0	;tblptru may be non-zero
  1328   0014A8                     	endif
  1329   0014A8                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1330   0014A8  0E00               	movlw	low (__smallconst shr (0+16))
  1331   0014AA  6EF8               	movwf	tblptru,c
  1332   0014AC                     	endif
  1333   0014AC  0008               	tblrd		*
  1334   0014AE  50F5               	movf	tablat,w,c
  1335   0014B0  6E01               	movwf	fputc@c^0,c
  1336   0014B2  6A02               	clrf	(fputc@c+1)^0,c
  1337   0014B4  C020  F003         	movff	vfpfcnvrt@fp,fputc@fp
  1338   0014B8  EC1A  F00D         	call	_fputc	;wreg free
  1339   0014BC  EF47  F00A         	goto	l2112
  1340   0014C0                     l1062:
  1341   0014C0  0012               	return		;funcret
  1342   0014C2                     __end_of_vfpfcnvrt:
  1343                           	callstack 0
  1344                           
  1345 ;; *************** function _read_prec_or_width *****************
  1346 ;; Defined at:
  1347 ;;		line 1158 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
  1348 ;; Parameters:    Size  Location     Type
  1349 ;;  fmt             1    6[COMRAM] PTR PTR const unsigned c
  1350 ;;		 -> vfprintf@cfmt(1), 
  1351 ;;  ap              1    7[COMRAM] PTR PTR void [1]
  1352 ;;		 -> sprintf@ap(1), 
  1353 ;; Auto vars:     Size  Location     Type
  1354 ;;  c               1    8[COMRAM] unsigned char 
  1355 ;;  n               2    9[COMRAM] int 
  1356 ;; Return value:  Size  Location     Type
  1357 ;;                  2    6[COMRAM] int 
  1358 ;; Registers used:
  1359 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1360 ;; Tracked objects:
  1361 ;;		On entry : 0/0
  1362 ;;		On exit  : 0/0
  1363 ;;		Unchanged: 0/0
  1364 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1365 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1366 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1367 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1368 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1369 ;;Total ram usage:        5 bytes
  1370 ;; Hardware stack levels used: 1
  1371 ;; Hardware stack levels required when called: 2
  1372 ;; This function calls:
  1373 ;;		___wmul
  1374 ;; This function is called by:
  1375 ;;		_vfpfcnvrt
  1376 ;; This function uses a non-reentrant model
  1377 ;;
  1378                           
  1379                           	psect	text4
  1380   001986                     __ptext4:
  1381                           	callstack 0
  1382   001986                     _read_prec_or_width:
  1383                           	callstack 25
  1384   001986                     
  1385                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1159:     int n =
      +                           0;
  1386   001986  0E00               	movlw	0
  1387   001988  6E0B               	movwf	(read_prec_or_width@n+1)^0,c
  1388   00198A  0E00               	movlw	0
  1389   00198C  6E0A               	movwf	read_prec_or_width@n^0,c
  1390   00198E                     
  1391                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1160:     if ((*f
      +                          mt)[0] == '*') {
  1392   00198E  5007               	movf	read_prec_or_width@fmt^0,w,c
  1393   001990  6ED9               	movwf	fsr2l,c
  1394   001992  6ADA               	clrf	fsr2h,c
  1395   001994  CFDF FFF6          	movff	indf2,tblptrl
  1396   001998                     	if	1	;There is more than 1 active tblptr byte
  1397   001998  0E0E               	movlw	high __smallconst
  1398   00199A  6EF7               	movwf	tblptrh,c
  1399   00199C                     	endif
  1400   00199C                     	if	0	;tblptru may be non-zero
  1401   00199C                     	endif
  1402   00199C                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1403   00199C  0E00               	movlw	low (__smallconst shr (0+16))
  1404   00199E  6EF8               	movwf	tblptru,c
  1405   0019A0                     	endif
  1406   0019A0  0008               	tblrd		*
  1407   0019A2  50F5               	movf	tablat,w,c
  1408   0019A4  0A2A               	xorlw	42
  1409   0019A6  A4D8               	btfss	status,2,c
  1410   0019A8  EFD8  F00C         	goto	u1541
  1411   0019AC  EFDA  F00C         	goto	u1540
  1412   0019B0                     u1541:
  1413   0019B0  EF00  F00D         	goto	l2048
  1414   0019B4                     u1540:
  1415   0019B4                     
  1416                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1161:         ++*
      +                          fmt;
  1417   0019B4  5007               	movf	read_prec_or_width@fmt^0,w,c
  1418   0019B6  6ED9               	movwf	fsr2l,c
  1419   0019B8  6ADA               	clrf	fsr2h,c
  1420   0019BA  2ADF               	incf	indf2,f,c
  1421   0019BC                     
  1422                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1162:         n =
      +                           (*(int *)__va_arg(*(int **)*ap, (int)0));
  1423   0019BC  5008               	movf	read_prec_or_width@ap^0,w,c
  1424   0019BE  6ED9               	movwf	fsr2l,c
  1425   0019C0  6ADA               	clrf	fsr2h,c
  1426   0019C2  0E02               	movlw	2
  1427   0019C4  26DF               	addwf	indf2,f,c
  1428   0019C6  5CDF               	subwf	indf2,w,c
  1429   0019C8  6ED9               	movwf	fsr2l,c
  1430   0019CA  6ADA               	clrf	fsr2h,c
  1431   0019CC  CFDE F00A          	movff	postinc2,read_prec_or_width@n
  1432   0019D0  CFDE F00B          	movff	postinc2,read_prec_or_width@n+1
  1433                           
  1434                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1163:     } else 
      +                          {
  1435   0019D4  EF15  F00D         	goto	l1043
  1436   0019D8                     l2044:
  1437                           
  1438                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1166:            
      +                           n = n * 10 + c;
  1439   0019D8  C00A  F001         	movff	read_prec_or_width@n,___wmul@multiplier
  1440   0019DC  C00B  F002         	movff	read_prec_or_width@n+1,___wmul@multiplier+1
  1441   0019E0  0E00               	movlw	0
  1442   0019E2  6E04               	movwf	(___wmul@multiplicand+1)^0,c
  1443   0019E4  0E0A               	movlw	10
  1444   0019E6  6E03               	movwf	___wmul@multiplicand^0,c
  1445   0019E8  ECAF  F00E         	call	___wmul	;wreg free
  1446   0019EC  5009               	movf	read_prec_or_width@c^0,w,c
  1447   0019EE  2401               	addwf	?___wmul^0,w,c
  1448   0019F0  6E0A               	movwf	read_prec_or_width@n^0,c
  1449   0019F2  0E00               	movlw	0
  1450   0019F4  2002               	addwfc	(?___wmul+1)^0,w,c
  1451   0019F6  6E0B               	movwf	(read_prec_or_width@n+1)^0,c
  1452   0019F8                     
  1453                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1167:            
      +                           ++*fmt;
  1454   0019F8  5007               	movf	read_prec_or_width@fmt^0,w,c
  1455   0019FA  6ED9               	movwf	fsr2l,c
  1456   0019FC  6ADA               	clrf	fsr2h,c
  1457   0019FE  2ADF               	incf	indf2,f,c
  1458   001A00                     l2048:
  1459                           
  1460                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1165:         whi
      +                          le ((c = ((unsigned)(*fmt)[0]) - '0') < 10) {
  1461   001A00  5007               	movf	read_prec_or_width@fmt^0,w,c
  1462   001A02  6ED9               	movwf	fsr2l,c
  1463   001A04  6ADA               	clrf	fsr2h,c
  1464   001A06  CFDF FFF6          	movff	indf2,tblptrl
  1465   001A0A                     	if	1	;There is more than 1 active tblptr byte
  1466   001A0A  0E0E               	movlw	high __smallconst
  1467   001A0C  6EF7               	movwf	tblptrh,c
  1468   001A0E                     	endif
  1469   001A0E                     	if	0	;tblptru may be non-zero
  1470   001A0E                     	endif
  1471   001A0E                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1472   001A0E  0E00               	movlw	low (__smallconst shr (0+16))
  1473   001A10  6EF8               	movwf	tblptru,c
  1474   001A12                     	endif
  1475   001A12  0008               	tblrd		*
  1476   001A14  50F5               	movf	tablat,w,c
  1477   001A16  0FD0               	addlw	208
  1478   001A18  6E09               	movwf	read_prec_or_width@c^0,c
  1479   001A1A  0E09               	movlw	9
  1480   001A1C  6409               	cpfsgt	read_prec_or_width@c^0,c
  1481   001A1E  EF13  F00D         	goto	u1551
  1482   001A22  EF15  F00D         	goto	u1550
  1483   001A26                     u1551:
  1484   001A26  EFEC  F00C         	goto	l2044
  1485   001A2A                     u1550:
  1486   001A2A                     l1043:
  1487                           
  1488                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1170:     return 
      +                          n;
  1489   001A2A  C00A  F007         	movff	read_prec_or_width@n,?_read_prec_or_width
  1490   001A2E  C00B  F008         	movff	read_prec_or_width@n+1,?_read_prec_or_width+1
  1491   001A32  0012               	return		;funcret
  1492   001A34                     __end_of_read_prec_or_width:
  1493                           	callstack 0
  1494                           
  1495 ;; *************** function ___wmul *****************
  1496 ;; Defined at:
  1497 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\Umul16.c"
  1498 ;; Parameters:    Size  Location     Type
  1499 ;;  multiplier      2    0[COMRAM] unsigned int 
  1500 ;;  multiplicand    2    2[COMRAM] unsigned int 
  1501 ;; Auto vars:     Size  Location     Type
  1502 ;;  product         2    4[COMRAM] unsigned int 
  1503 ;; Return value:  Size  Location     Type
  1504 ;;                  2    0[COMRAM] unsigned int 
  1505 ;; Registers used:
  1506 ;;		wreg, status,2, status,0, prodl, prodh
  1507 ;; Tracked objects:
  1508 ;;		On entry : 0/0
  1509 ;;		On exit  : 0/0
  1510 ;;		Unchanged: 0/0
  1511 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1512 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1513 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1514 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1515 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1516 ;;Total ram usage:        6 bytes
  1517 ;; Hardware stack levels used: 1
  1518 ;; Hardware stack levels required when called: 1
  1519 ;; This function calls:
  1520 ;;		Nothing
  1521 ;; This function is called by:
  1522 ;;		_read_prec_or_width
  1523 ;;		_LEDarray_disp_light
  1524 ;;		_LEDarray_disp_PPM
  1525 ;;		_ADC2String
  1526 ;; This function uses a non-reentrant model
  1527 ;;
  1528                           
  1529                           	psect	text5
  1530   001D5E                     __ptext5:
  1531                           	callstack 0
  1532   001D5E                     ___wmul:
  1533                           	callstack 25
  1534   001D5E  5001               	movf	___wmul@multiplier^0,w,c
  1535   001D60  0203               	mulwf	___wmul@multiplicand^0,c
  1536   001D62  CFF3 F005          	movff	prodl,___wmul@product
  1537   001D66  CFF4 F006          	movff	prodh,___wmul@product+1
  1538   001D6A  5001               	movf	___wmul@multiplier^0,w,c
  1539   001D6C  0204               	mulwf	(___wmul@multiplicand+1)^0,c
  1540   001D6E  50F3               	movf	243,w,c
  1541   001D70  2606               	addwf	(___wmul@product+1)^0,f,c
  1542   001D72  5002               	movf	(___wmul@multiplier+1)^0,w,c
  1543   001D74  0203               	mulwf	___wmul@multiplicand^0,c
  1544   001D76  50F3               	movf	243,w,c
  1545   001D78  2606               	addwf	(___wmul@product+1)^0,f,c
  1546   001D7A  C005  F001         	movff	___wmul@product,?___wmul
  1547   001D7E  C006  F002         	movff	___wmul@product+1,?___wmul+1
  1548   001D82  0012               	return		;funcret
  1549   001D84                     __end_of___wmul:
  1550                           	callstack 0
  1551                           
  1552 ;; *************** function _dtoa *****************
  1553 ;; Defined at:
  1554 ;;		line 513 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
  1555 ;; Parameters:    Size  Location     Type
  1556 ;;  fp              1   20[COMRAM] PTR struct _IO_FILE
  1557 ;;		 -> sprintf@f(12), 
  1558 ;;  d               2   21[COMRAM] int 
  1559 ;; Auto vars:     Size  Location     Type
  1560 ;;  i               2   29[COMRAM] int 
  1561 ;;  w               2   26[COMRAM] int 
  1562 ;;  s               1   28[COMRAM] unsigned char 
  1563 ;;  p               1   25[COMRAM] _Bool 
  1564 ;; Return value:  Size  Location     Type
  1565 ;;                  1    wreg      void 
  1566 ;; Registers used:
  1567 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1568 ;; Tracked objects:
  1569 ;;		On entry : 0/0
  1570 ;;		On exit  : 0/0
  1571 ;;		Unchanged: 0/0
  1572 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1573 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1574 ;;      Locals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1575 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1576 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1577 ;;Total ram usage:       11 bytes
  1578 ;; Hardware stack levels used: 1
  1579 ;; Hardware stack levels required when called: 5
  1580 ;; This function calls:
  1581 ;;		___awdiv
  1582 ;;		___awmod
  1583 ;;		_abs
  1584 ;;		_pad
  1585 ;; This function is called by:
  1586 ;;		_vfpfcnvrt
  1587 ;; This function uses a non-reentrant model
  1588 ;;
  1589                           
  1590                           	psect	text6
  1591   0014C2                     __ptext6:
  1592                           	callstack 0
  1593   0014C2                     _dtoa:
  1594                           	callstack 22
  1595   0014C2                     
  1596                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 513: static void 
      +                          dtoa(FILE *fp, vfpf_sint_t d);C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\commo
      +                          n\doprnt.c: 514: {;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c:
      +                           515:  char s;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 516
      +                          :     int i, w;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 52
      +                          0:  _Bool p = 1;
  1597   0014C2  0E01               	movlw	1
  1598   0014C4  6E1A               	movwf	dtoa@p^0,c
  1599   0014C6                     
  1600                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 524:     s = d < 
      +                          0 ? 1 : 0;
  1601   0014C6  BE17               	btfsc	(dtoa@d+1)^0,7,c
  1602   0014C8  EF68  F00A         	goto	u1441
  1603   0014CC  EF6B  F00A         	goto	u1440
  1604   0014D0                     u1441:
  1605   0014D0  0E01               	movlw	1
  1606   0014D2  EF6C  F00A         	goto	u1450
  1607   0014D6                     u1440:
  1608   0014D6  0E00               	movlw	0
  1609   0014D8                     u1450:
  1610   0014D8  6E1D               	movwf	dtoa@s^0,c
  1611   0014DA                     
  1612                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 535:     w = widt
      +                          h;
  1613   0014DA  C046  F01B         	movff	_width,dtoa@w
  1614   0014DE  C047  F01C         	movff	_width+1,dtoa@w+1
  1615   0014E2                     
  1616                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 536:     if (s
  1617   0014E2  501D               	movf	dtoa@s^0,w,c
  1618   0014E4  B4D8               	btfsc	status,2,c
  1619   0014E6  EF77  F00A         	goto	u1461
  1620   0014EA  EF79  F00A         	goto	u1460
  1621   0014EE                     u1461:
  1622   0014EE  EF90  F00A         	goto	l1026
  1623   0014F2                     u1460:
  1624   0014F2                     
  1625                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 540:     ) {;C:\P
      +                          rogram Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 541:         --w;
  1626   0014F2  061B               	decf	dtoa@w^0,f,c
  1627   0014F4  A0D8               	btfss	status,0,c
  1628   0014F6  061C               	decf	(dtoa@w+1)^0,f,c
  1629   0014F8                     
  1630                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 542:   s = s ? '-
      +                          ' : '+';
  1631   0014F8  501D               	movf	dtoa@s^0,w,c
  1632   0014FA  A4D8               	btfss	status,2,c
  1633   0014FC  EF82  F00A         	goto	u1471
  1634   001500  EF84  F00A         	goto	u1470
  1635   001504                     u1471:
  1636   001504  EF8A  F00A         	goto	l2000
  1637   001508                     u1470:
  1638   001508  0E00               	movlw	0
  1639   00150A  6E19               	movwf	(_dtoa$1872+1)^0,c
  1640   00150C  0E2B               	movlw	43
  1641   00150E  6E18               	movwf	_dtoa$1872^0,c
  1642   001510  EF8E  F00A         	goto	l2002
  1643   001514                     l2000:
  1644   001514  0E00               	movlw	0
  1645   001516  6E19               	movwf	(_dtoa$1872+1)^0,c
  1646   001518  0E2D               	movlw	45
  1647   00151A  6E18               	movwf	_dtoa$1872^0,c
  1648   00151C                     l2002:
  1649   00151C  C018  F01D         	movff	_dtoa$1872,dtoa@s
  1650   001520                     l1026:
  1651                           
  1652                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 552:     i = size
      +                          of(dbuf) - 1;
  1653   001520  0E00               	movlw	0
  1654   001522  6E1F               	movwf	(dtoa@i+1)^0,c
  1655   001524  0E1F               	movlw	31
  1656   001526  6E1E               	movwf	dtoa@i^0,c
  1657   001528                     
  1658                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 553:     dbuf[i] 
      +                          = '\0';
  1659   001528  0E00               	movlw	0
  1660   00152A  0100               	movlb	0	; () banked
  1661   00152C  6FA3               	movwf	(_dbuf+31)& (0+255),b
  1662                           
  1663                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 554:     while (!
      +                          (i < 1) && (d != 0
  1664   00152E  EFC6  F00A         	goto	l2016
  1665   001532                     l2006:
  1666                           
  1667                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 563:     )) {;C:\
      +                          Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 564:         --i;
  1668   001532  061E               	decf	dtoa@i^0,f,c
  1669   001534  A0D8               	btfss	status,0,c
  1670   001536  061F               	decf	(dtoa@i+1)^0,f,c
  1671   001538                     
  1672                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 565:         dbuf
      +                          [i] = (char)((int)'0' + abs(d % 10));
  1673   001538  501E               	movf	dtoa@i^0,w,c
  1674   00153A  0F84               	addlw	low _dbuf
  1675   00153C  6ED9               	movwf	fsr2l,c
  1676   00153E  6ADA               	clrf	fsr2h,c
  1677   001540  C016  F001         	movff	dtoa@d,___awmod@dividend
  1678   001544  C017  F002         	movff	dtoa@d+1,___awmod@dividend+1
  1679   001548  0E00               	movlw	0
  1680   00154A  6E04               	movwf	(___awmod@divisor+1)^0,c
  1681   00154C  0E0A               	movlw	10
  1682   00154E  6E03               	movwf	___awmod@divisor^0,c
  1683   001550  EC6B  F00C         	call	___awmod	;wreg free
  1684   001554  C001  F007         	movff	?___awmod,abs@a
  1685   001558  C002  F008         	movff	?___awmod+1,abs@a+1
  1686   00155C  EC7E  F00E         	call	_abs	;wreg free
  1687   001560  5007               	movf	?_abs^0,w,c
  1688   001562  0F30               	addlw	48
  1689   001564  6EDF               	movwf	indf2,c
  1690   001566                     
  1691                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 569:   p = 0;
  1692   001566  0E00               	movlw	0
  1693   001568  6E1A               	movwf	dtoa@p^0,c
  1694   00156A                     
  1695                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 571:         --w;
  1696   00156A  061B               	decf	dtoa@w^0,f,c
  1697   00156C  A0D8               	btfss	status,0,c
  1698   00156E  061C               	decf	(dtoa@w+1)^0,f,c
  1699   001570                     
  1700                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 572:         d = 
      +                          d / 10;
  1701   001570  C016  F001         	movff	dtoa@d,___awdiv@dividend
  1702   001574  C017  F002         	movff	dtoa@d+1,___awdiv@dividend+1
  1703   001578  0E00               	movlw	0
  1704   00157A  6E04               	movwf	(___awdiv@divisor+1)^0,c
  1705   00157C  0E0A               	movlw	10
  1706   00157E  6E03               	movwf	___awdiv@divisor^0,c
  1707   001580  EC09  F00C         	call	___awdiv	;wreg free
  1708   001584  C001  F016         	movff	?___awdiv,dtoa@d
  1709   001588  C002  F017         	movff	?___awdiv+1,dtoa@d+1
  1710   00158C                     l2016:
  1711                           
  1712                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 554:     while (!
      +                          (i < 1) && (d != 0
  1713   00158C  BE1F               	btfsc	(dtoa@i+1)^0,7,c
  1714   00158E  EFD1  F00A         	goto	u1481
  1715   001592  501F               	movf	(dtoa@i+1)^0,w,c
  1716   001594  E108               	bnz	u1480
  1717   001596  041E               	decf	dtoa@i^0,w,c
  1718   001598  A0D8               	btfss	status,0,c
  1719   00159A  EFD1  F00A         	goto	u1481
  1720   00159E  EFD3  F00A         	goto	u1480
  1721   0015A2                     u1481:
  1722   0015A2  EFF8  F00A         	goto	l2026
  1723   0015A6                     u1480:
  1724   0015A6  5016               	movf	dtoa@d^0,w,c
  1725   0015A8  1017               	iorwf	(dtoa@d+1)^0,w,c
  1726   0015AA  A4D8               	btfss	status,2,c
  1727   0015AC  EFDA  F00A         	goto	u1491
  1728   0015B0  EFDC  F00A         	goto	u1490
  1729   0015B4                     u1491:
  1730   0015B4  EF99  F00A         	goto	l2006
  1731   0015B8                     u1490:
  1732   0015B8  501A               	movf	dtoa@p^0,w,c
  1733   0015BA  A4D8               	btfss	status,2,c
  1734   0015BC  EFE2  F00A         	goto	u1501
  1735   0015C0  EFE4  F00A         	goto	u1500
  1736   0015C4                     u1501:
  1737   0015C4  EF99  F00A         	goto	l2006
  1738   0015C8                     u1500:
  1739   0015C8  BE1C               	btfsc	(dtoa@w+1)^0,7,c
  1740   0015CA  EFEF  F00A         	goto	u1511
  1741   0015CE  501C               	movf	(dtoa@w+1)^0,w,c
  1742   0015D0  E108               	bnz	u1510
  1743   0015D2  041B               	decf	dtoa@w^0,w,c
  1744   0015D4  A0D8               	btfss	status,0,c
  1745   0015D6  EFEF  F00A         	goto	u1511
  1746   0015DA  EFF1  F00A         	goto	u1510
  1747   0015DE                     u1511:
  1748   0015DE  EFF8  F00A         	goto	l2026
  1749   0015E2                     u1510:
  1750   0015E2  B24A               	btfsc	_flags^0,1,c
  1751   0015E4  EFF6  F00A         	goto	u1521
  1752   0015E8  EFF8  F00A         	goto	u1520
  1753   0015EC                     u1521:
  1754   0015EC  EF99  F00A         	goto	l2006
  1755   0015F0                     u1520:
  1756   0015F0                     l2026:
  1757                           
  1758                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 576:     if (s !=
      +                           0) {
  1759   0015F0  501D               	movf	dtoa@s^0,w,c
  1760   0015F2  B4D8               	btfsc	status,2,c
  1761   0015F4  EFFE  F00A         	goto	u1531
  1762   0015F8  EF00  F00B         	goto	u1530
  1763   0015FC                     u1531:
  1764   0015FC  EF09  F00B         	goto	l2032
  1765   001600                     u1530:
  1766   001600                     
  1767                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 577:         --i;
  1768   001600  061E               	decf	dtoa@i^0,f,c
  1769   001602  A0D8               	btfss	status,0,c
  1770   001604  061F               	decf	(dtoa@i+1)^0,f,c
  1771   001606                     
  1772                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 578:         dbuf
      +                          [i] = s;
  1773   001606  501E               	movf	dtoa@i^0,w,c
  1774   001608  0F84               	addlw	low _dbuf
  1775   00160A  6ED9               	movwf	fsr2l,c
  1776   00160C  6ADA               	clrf	fsr2h,c
  1777   00160E  C01D  FFDF         	movff	dtoa@s,indf2
  1778   001612                     l2032:
  1779                           
  1780                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 582:     return (
      +                          void) pad(fp, &dbuf[i], w);
  1781   001612  C015  F00E         	movff	dtoa@fp,pad@fp
  1782   001616  501E               	movf	dtoa@i^0,w,c
  1783   001618  0F84               	addlw	low _dbuf
  1784   00161A  6E0F               	movwf	pad@buf^0,c
  1785   00161C  C01B  F010         	movff	dtoa@w,pad@p
  1786   001620  C01C  F011         	movff	dtoa@w+1,pad@p+1
  1787   001624  EC6F  F00D         	call	_pad	;wreg free
  1788   001628  0012               	return		;funcret
  1789   00162A                     __end_of_dtoa:
  1790                           	callstack 0
  1791                           
  1792 ;; *************** function _pad *****************
  1793 ;; Defined at:
  1794 ;;		line 193 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
  1795 ;; Parameters:    Size  Location     Type
  1796 ;;  fp              1   13[COMRAM] PTR struct _IO_FILE
  1797 ;;		 -> sprintf@f(12), 
  1798 ;;  buf             1   14[COMRAM] PTR unsigned char 
  1799 ;;		 -> dbuf(32), 
  1800 ;;  p               2   15[COMRAM] int 
  1801 ;; Auto vars:     Size  Location     Type
  1802 ;;  i               2   18[COMRAM] int 
  1803 ;; Return value:  Size  Location     Type
  1804 ;;                  1    wreg      void 
  1805 ;; Registers used:
  1806 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1807 ;; Tracked objects:
  1808 ;;		On entry : 0/0
  1809 ;;		On exit  : 0/0
  1810 ;;		Unchanged: 0/0
  1811 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1812 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1813 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1814 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1815 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1816 ;;Total ram usage:        7 bytes
  1817 ;; Hardware stack levels used: 1
  1818 ;; Hardware stack levels required when called: 4
  1819 ;; This function calls:
  1820 ;;		_fputc
  1821 ;;		_fputs
  1822 ;; This function is called by:
  1823 ;;		_dtoa
  1824 ;; This function uses a non-reentrant model
  1825 ;;
  1826                           
  1827                           	psect	text7
  1828   001ADE                     __ptext7:
  1829                           	callstack 0
  1830   001ADE                     _pad:
  1831                           	callstack 22
  1832   001ADE                     
  1833                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 193: static void 
      +                          pad(FILE *fp, char *buf, int p);C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\com
      +                          mon\doprnt.c: 194: {;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.
      +                          c: 195:     int i;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c:
      +                           199:     if (flags & (1 << 0)) {
  1834   001ADE  A04A               	btfss	_flags^0,0,c
  1835   001AE0  EF74  F00D         	goto	u1391
  1836   001AE4  EF76  F00D         	goto	u1390
  1837   001AE8                     u1391:
  1838   001AE8  EF7C  F00D         	goto	l1964
  1839   001AEC                     u1390:
  1840   001AEC                     
  1841                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 200:         fput
      +                          s((const char *)buf, fp);
  1842   001AEC  C00F  F009         	movff	pad@buf,fputs@s
  1843   001AF0  C00E  F00A         	movff	pad@fp,fputs@fp
  1844   001AF4  EC29  F00E         	call	_fputs	;wreg free
  1845   001AF8                     l1964:
  1846                           
  1847                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 205:  if (p < 0) 
      +                          {
  1848   001AF8  BE11               	btfsc	(pad@p+1)^0,7,c
  1849   001AFA  EF83  F00D         	goto	u1400
  1850   001AFE  EF81  F00D         	goto	u1401
  1851   001B02                     u1401:
  1852   001B02  EF87  F00D         	goto	l1018
  1853   001B06                     u1400:
  1854   001B06                     
  1855                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 206:   p = 0;
  1856   001B06  0E00               	movlw	0
  1857   001B08  6E11               	movwf	(pad@p+1)^0,c
  1858   001B0A  0E00               	movlw	0
  1859   001B0C  6E10               	movwf	pad@p^0,c
  1860   001B0E                     l1018:
  1861                           
  1862                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 208:     i = 0;
  1863   001B0E  0E00               	movlw	0
  1864   001B10  6E14               	movwf	(pad@i+1)^0,c
  1865   001B12  0E00               	movlw	0
  1866   001B14  6E13               	movwf	pad@i^0,c
  1867                           
  1868                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 209:     while (i
      +                           < p) {
  1869   001B16  EF97  F00D         	goto	l1972
  1870   001B1A                     l1968:
  1871                           
  1872                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 210:         fput
      +                          c(' ', fp);
  1873   001B1A  0E00               	movlw	0
  1874   001B1C  6E02               	movwf	(fputc@c+1)^0,c
  1875   001B1E  0E20               	movlw	32
  1876   001B20  6E01               	movwf	fputc@c^0,c
  1877   001B22  C00E  F003         	movff	pad@fp,fputc@fp
  1878   001B26  EC1A  F00D         	call	_fputc	;wreg free
  1879   001B2A                     
  1880                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 211:         ++i;
  1881   001B2A  4A13               	infsnz	pad@i^0,f,c
  1882   001B2C  2A14               	incf	(pad@i+1)^0,f,c
  1883   001B2E                     l1972:
  1884                           
  1885                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 209:     while (i
      +                           < p) {
  1886   001B2E  5010               	movf	pad@p^0,w,c
  1887   001B30  5C13               	subwf	pad@i^0,w,c
  1888   001B32  5014               	movf	(pad@i+1)^0,w,c
  1889   001B34  0A80               	xorlw	128
  1890   001B36  6E12               	movwf	??_pad^0,c
  1891   001B38  5011               	movf	(pad@p+1)^0,w,c
  1892   001B3A  0A80               	xorlw	128
  1893   001B3C  5812               	subwfb	??_pad^0,w,c
  1894   001B3E  A0D8               	btfss	status,0,c
  1895   001B40  EFA4  F00D         	goto	u1411
  1896   001B44  EFA6  F00D         	goto	u1410
  1897   001B48                     u1411:
  1898   001B48  EF8D  F00D         	goto	l1968
  1899   001B4C                     u1410:
  1900   001B4C                     
  1901                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 216:     if (!(fl
      +                          ags & (1 << 0))) {
  1902   001B4C  B04A               	btfsc	_flags^0,0,c
  1903   001B4E  EFAB  F00D         	goto	u1421
  1904   001B52  EFAD  F00D         	goto	u1420
  1905   001B56                     u1421:
  1906   001B56  EFB3  F00D         	goto	l1023
  1907   001B5A                     u1420:
  1908   001B5A                     
  1909                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 218:         fput
      +                          s((const char *)buf, fp);
  1910   001B5A  C00F  F009         	movff	pad@buf,fputs@s
  1911   001B5E  C00E  F00A         	movff	pad@fp,fputs@fp
  1912   001B62  EC29  F00E         	call	_fputs	;wreg free
  1913   001B66                     l1023:
  1914   001B66  0012               	return		;funcret
  1915   001B68                     __end_of_pad:
  1916                           	callstack 0
  1917                           
  1918 ;; *************** function _fputs *****************
  1919 ;; Defined at:
  1920 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\nf_fputs.c"
  1921 ;; Parameters:    Size  Location     Type
  1922 ;;  s               1    8[COMRAM] PTR const unsigned char 
  1923 ;;		 -> dbuf(32), 
  1924 ;;  fp              1    9[COMRAM] PTR struct _IO_FILE
  1925 ;;		 -> sprintf@f(12), 
  1926 ;; Auto vars:     Size  Location     Type
  1927 ;;  i               2   11[COMRAM] int 
  1928 ;;  c               1   10[COMRAM] unsigned char 
  1929 ;; Return value:  Size  Location     Type
  1930 ;;                  2    8[COMRAM] int 
  1931 ;; Registers used:
  1932 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1933 ;; Tracked objects:
  1934 ;;		On entry : 0/0
  1935 ;;		On exit  : 0/0
  1936 ;;		Unchanged: 0/0
  1937 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1938 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1939 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1940 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1941 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1942 ;;Total ram usage:        5 bytes
  1943 ;; Hardware stack levels used: 1
  1944 ;; Hardware stack levels required when called: 3
  1945 ;; This function calls:
  1946 ;;		_fputc
  1947 ;; This function is called by:
  1948 ;;		_pad
  1949 ;; This function uses a non-reentrant model
  1950 ;;
  1951                           
  1952                           	psect	text8
  1953   001C52                     __ptext8:
  1954                           	callstack 0
  1955   001C52                     _fputs:
  1956                           	callstack 22
  1957   001C52  0E00               	movlw	0
  1958   001C54  6E0D               	movwf	(fputs@i+1)^0,c
  1959   001C56  0E00               	movlw	0
  1960   001C58  6E0C               	movwf	fputs@i^0,c
  1961   001C5A  EF38  F00E         	goto	l1872
  1962   001C5E                     l1868:
  1963   001C5E  C00B  F001         	movff	fputs@c,fputc@c
  1964   001C62  6A02               	clrf	(fputc@c+1)^0,c
  1965   001C64  C00A  F003         	movff	fputs@fp,fputc@fp
  1966   001C68  EC1A  F00D         	call	_fputc	;wreg free
  1967   001C6C  4A0C               	infsnz	fputs@i^0,f,c
  1968   001C6E  2A0D               	incf	(fputs@i+1)^0,f,c
  1969   001C70                     l1872:
  1970   001C70  5009               	movf	fputs@s^0,w,c
  1971   001C72  240C               	addwf	fputs@i^0,w,c
  1972   001C74  6ED9               	movwf	fsr2l,c
  1973   001C76  6ADA               	clrf	fsr2h,c
  1974   001C78  50DF               	movf	indf2,w,c
  1975   001C7A  6E0B               	movwf	fputs@c^0,c
  1976   001C7C  500B               	movf	fputs@c^0,w,c
  1977   001C7E  A4D8               	btfss	status,2,c
  1978   001C80  EF44  F00E         	goto	u1261
  1979   001C84  EF46  F00E         	goto	u1260
  1980   001C88                     u1261:
  1981   001C88  EF2F  F00E         	goto	l1868
  1982   001C8C                     u1260:
  1983   001C8C  0012               	return		;funcret
  1984   001C8E                     __end_of_fputs:
  1985                           	callstack 0
  1986                           
  1987 ;; *************** function _fputc *****************
  1988 ;; Defined at:
  1989 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\nf_fputc.c"
  1990 ;; Parameters:    Size  Location     Type
  1991 ;;  c               2    0[COMRAM] int 
  1992 ;;  fp              1    2[COMRAM] PTR struct _IO_FILE
  1993 ;;		 -> sprintf@f(12), 
  1994 ;; Auto vars:     Size  Location     Type
  1995 ;;		None
  1996 ;; Return value:  Size  Location     Type
  1997 ;;                  2    0[COMRAM] int 
  1998 ;; Registers used:
  1999 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2000 ;; Tracked objects:
  2001 ;;		On entry : 0/0
  2002 ;;		On exit  : 0/0
  2003 ;;		Unchanged: 0/0
  2004 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2005 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2006 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2007 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2008 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2009 ;;Total ram usage:        8 bytes
  2010 ;; Hardware stack levels used: 1
  2011 ;; Hardware stack levels required when called: 2
  2012 ;; This function calls:
  2013 ;;		_putch
  2014 ;; This function is called by:
  2015 ;;		_pad
  2016 ;;		_vfpfcnvrt
  2017 ;;		_fputs
  2018 ;; This function uses a non-reentrant model
  2019 ;;
  2020                           
  2021                           	psect	text9
  2022   001A34                     __ptext9:
  2023                           	callstack 0
  2024   001A34                     _fputc:
  2025                           	callstack 25
  2026   001A34  5003               	movf	fputc@fp^0,w,c
  2027   001A36  B4D8               	btfsc	status,2,c
  2028   001A38  EF20  F00D         	goto	u1221
  2029   001A3C  EF22  F00D         	goto	u1220
  2030   001A40                     u1221:
  2031   001A40  EF2A  F00D         	goto	l1856
  2032   001A44                     u1220:
  2033   001A44  5003               	movf	fputc@fp^0,w,c
  2034   001A46  A4D8               	btfss	status,2,c
  2035   001A48  EF28  F00D         	goto	u1231
  2036   001A4C  EF2A  F00D         	goto	u1230
  2037   001A50                     u1231:
  2038   001A50  EF2F  F00D         	goto	l1858
  2039   001A54                     u1230:
  2040   001A54                     l1856:
  2041   001A54  5001               	movf	fputc@c^0,w,c
  2042   001A56  EC1E  F00F         	call	_putch
  2043   001A5A  EF6E  F00D         	goto	l1087
  2044   001A5E                     l1858:
  2045   001A5E  5003               	movf	fputc@fp^0,w,c
  2046   001A60  6ED9               	movwf	fsr2l,c
  2047   001A62  6ADA               	clrf	fsr2h,c
  2048   001A64  0E0A               	movlw	10
  2049   001A66  26D9               	addwf	fsr2l,f,c
  2050   001A68  50DE               	movf	postinc2,w,c
  2051   001A6A  10DE               	iorwf	postinc2,w,c
  2052   001A6C  B4D8               	btfsc	status,2,c
  2053   001A6E  EF3B  F00D         	goto	u1241
  2054   001A72  EF3D  F00D         	goto	u1240
  2055   001A76                     u1241:
  2056   001A76  EF56  F00D         	goto	l1862
  2057   001A7A                     u1240:
  2058   001A7A  5003               	movf	fputc@fp^0,w,c
  2059   001A7C  6ED9               	movwf	fsr2l,c
  2060   001A7E  6ADA               	clrf	fsr2h,c
  2061   001A80  0E0A               	movlw	10
  2062   001A82  26D9               	addwf	fsr2l,f,c
  2063   001A84  5003               	movf	fputc@fp^0,w,c
  2064   001A86  6EE1               	movwf	fsr1l,c
  2065   001A88  6AE2               	clrf	fsr1h,c
  2066   001A8A  0E03               	movlw	3
  2067   001A8C  26E1               	addwf	fsr1l,f,c
  2068   001A8E  50DE               	movf	postinc2,w,c
  2069   001A90  5CE6               	subwf	postinc1,w,c
  2070   001A92  50E6               	movf	postinc1,w,c
  2071   001A94  0A80               	xorlw	128
  2072   001A96  6E08               	movwf	(??_fputc+4)^0,c
  2073   001A98  50DE               	movf	postinc2,w,c
  2074   001A9A  0A80               	xorlw	128
  2075   001A9C  5808               	subwfb	(??_fputc+4)^0,w,c
  2076   001A9E  B0D8               	btfsc	status,0,c
  2077   001AA0  EF54  F00D         	goto	u1251
  2078   001AA4  EF56  F00D         	goto	u1250
  2079   001AA8                     u1251:
  2080   001AA8  EF6E  F00D         	goto	l1087
  2081   001AAC                     u1250:
  2082   001AAC                     l1862:
  2083   001AAC  5003               	movf	fputc@fp^0,w,c
  2084   001AAE  6ED9               	movwf	fsr2l,c
  2085   001AB0  6ADA               	clrf	fsr2h,c
  2086   001AB2  0E03               	movlw	3
  2087   001AB4  26D9               	addwf	fsr2l,f,c
  2088   001AB6  50DF               	movf	indf2,w,c
  2089   001AB8  6E04               	movwf	??_fputc^0,c
  2090   001ABA  5003               	movf	fputc@fp^0,w,c
  2091   001ABC  6ED9               	movwf	fsr2l,c
  2092   001ABE  6ADA               	clrf	fsr2h,c
  2093   001AC0  50DF               	movf	indf2,w,c
  2094   001AC2  2404               	addwf	??_fputc^0,w,c
  2095   001AC4  6ED9               	movwf	fsr2l,c
  2096   001AC6  6ADA               	clrf	fsr2h,c
  2097   001AC8  C001  FFDF         	movff	fputc@c,indf2
  2098   001ACC  5003               	movf	fputc@fp^0,w,c
  2099   001ACE  6ED9               	movwf	fsr2l,c
  2100   001AD0  6ADA               	clrf	fsr2h,c
  2101   001AD2  0E03               	movlw	3
  2102   001AD4  26D9               	addwf	fsr2l,f,c
  2103   001AD6  2ADE               	incf	postinc2,f,c
  2104   001AD8  0E00               	movlw	0
  2105   001ADA  22DD               	addwfc	postdec2,f,c
  2106   001ADC                     l1087:
  2107   001ADC  0012               	return		;funcret
  2108   001ADE                     __end_of_fputc:
  2109                           	callstack 0
  2110                           
  2111 ;; *************** function _putch *****************
  2112 ;; Defined at:
  2113 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\putch.c"
  2114 ;; Parameters:    Size  Location     Type
  2115 ;;  c               1    wreg     unsigned char 
  2116 ;; Auto vars:     Size  Location     Type
  2117 ;;  c               1    0[COMRAM] unsigned char 
  2118 ;; Return value:  Size  Location     Type
  2119 ;;                  1    wreg      void 
  2120 ;; Registers used:
  2121 ;;		wreg
  2122 ;; Tracked objects:
  2123 ;;		On entry : 0/0
  2124 ;;		On exit  : 0/0
  2125 ;;		Unchanged: 0/0
  2126 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2127 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2128 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2129 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2130 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2131 ;;Total ram usage:        0 bytes
  2132 ;; Hardware stack levels used: 1
  2133 ;; Hardware stack levels required when called: 1
  2134 ;; This function calls:
  2135 ;;		Nothing
  2136 ;; This function is called by:
  2137 ;;		_fputc
  2138 ;; This function uses a non-reentrant model
  2139 ;;
  2140                           
  2141                           	psect	text10
  2142   001E3C                     __ptext10:
  2143                           	callstack 0
  2144   001E3C                     _putch:
  2145                           	callstack 25
  2146   001E3C  0012               	return		;funcret
  2147   001E3E                     __end_of_putch:
  2148                           	callstack 0
  2149                           
  2150 ;; *************** function _abs *****************
  2151 ;; Defined at:
  2152 ;;		line 1 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\abs.c"
  2153 ;; Parameters:    Size  Location     Type
  2154 ;;  a               2    6[COMRAM] int 
  2155 ;; Auto vars:     Size  Location     Type
  2156 ;;		None
  2157 ;; Return value:  Size  Location     Type
  2158 ;;                  2    6[COMRAM] int 
  2159 ;; Registers used:
  2160 ;;		wreg, status,2, status,0
  2161 ;; Tracked objects:
  2162 ;;		On entry : 0/0
  2163 ;;		On exit  : 0/0
  2164 ;;		Unchanged: 0/0
  2165 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2166 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2167 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2168 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2169 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2170 ;;Total ram usage:        4 bytes
  2171 ;; Hardware stack levels used: 1
  2172 ;; Hardware stack levels required when called: 1
  2173 ;; This function calls:
  2174 ;;		Nothing
  2175 ;; This function is called by:
  2176 ;;		_dtoa
  2177 ;; This function uses a non-reentrant model
  2178 ;;
  2179                           
  2180                           	psect	text11
  2181   001CFC                     __ptext11:
  2182                           	callstack 0
  2183   001CFC                     _abs:
  2184                           	callstack 25
  2185   001CFC  BE08               	btfsc	(abs@a+1)^0,7,c
  2186   001CFE  EF83  F00E         	goto	u1431
  2187   001D02  EF85  F00E         	goto	u1430
  2188   001D06                     u1431:
  2189   001D06  EF8B  F00E         	goto	l1072
  2190   001D0A                     u1430:
  2191   001D0A  C007  F007         	movff	abs@a,?_abs
  2192   001D0E  C008  F008         	movff	abs@a+1,?_abs+1
  2193   001D12  EF97  F00E         	goto	l1075
  2194   001D16                     l1072:
  2195   001D16  C007  F009         	movff	abs@a,??_abs
  2196   001D1A  C008  F00A         	movff	abs@a+1,??_abs+1
  2197   001D1E  1E09               	comf	??_abs^0,f,c
  2198   001D20  1E0A               	comf	(??_abs+1)^0,f,c
  2199   001D22  4A09               	infsnz	??_abs^0,f,c
  2200   001D24  2A0A               	incf	(??_abs+1)^0,f,c
  2201   001D26  C009  F007         	movff	??_abs,?_abs
  2202   001D2A  C00A  F008         	movff	??_abs+1,?_abs+1
  2203   001D2E                     l1075:
  2204   001D2E  0012               	return		;funcret
  2205   001D30                     __end_of_abs:
  2206                           	callstack 0
  2207                           
  2208 ;; *************** function ___awdiv *****************
  2209 ;; Defined at:
  2210 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\awdiv.c"
  2211 ;; Parameters:    Size  Location     Type
  2212 ;;  dividend        2    0[COMRAM] int 
  2213 ;;  divisor         2    2[COMRAM] int 
  2214 ;; Auto vars:     Size  Location     Type
  2215 ;;  quotient        2    6[COMRAM] int 
  2216 ;;  sign            1    5[COMRAM] unsigned char 
  2217 ;;  counter         1    4[COMRAM] unsigned char 
  2218 ;; Return value:  Size  Location     Type
  2219 ;;                  2    0[COMRAM] int 
  2220 ;; Registers used:
  2221 ;;		wreg, status,2, status,0
  2222 ;; Tracked objects:
  2223 ;;		On entry : 0/0
  2224 ;;		On exit  : 0/0
  2225 ;;		Unchanged: 0/0
  2226 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2227 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2228 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2229 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2230 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2231 ;;Total ram usage:        8 bytes
  2232 ;; Hardware stack levels used: 1
  2233 ;; Hardware stack levels required when called: 1
  2234 ;; This function calls:
  2235 ;;		Nothing
  2236 ;; This function is called by:
  2237 ;;		_dtoa
  2238 ;; This function uses a non-reentrant model
  2239 ;;
  2240                           
  2241                           	psect	text12
  2242   001812                     __ptext12:
  2243                           	callstack 0
  2244   001812                     ___awdiv:
  2245                           	callstack 25
  2246   001812  0E00               	movlw	0
  2247   001814  6E06               	movwf	___awdiv@sign^0,c
  2248   001816  BE04               	btfsc	(___awdiv@divisor+1)^0,7,c
  2249   001818  EF12  F00C         	goto	u1270
  2250   00181C  EF10  F00C         	goto	u1271
  2251   001820                     u1271:
  2252   001820  EF18  F00C         	goto	l1888
  2253   001824                     u1270:
  2254   001824  6C03               	negf	___awdiv@divisor^0,c
  2255   001826  1E04               	comf	(___awdiv@divisor+1)^0,f,c
  2256   001828  B0D8               	btfsc	status,0,c
  2257   00182A  2A04               	incf	(___awdiv@divisor+1)^0,f,c
  2258   00182C  0E01               	movlw	1
  2259   00182E  6E06               	movwf	___awdiv@sign^0,c
  2260   001830                     l1888:
  2261   001830  BE02               	btfsc	(___awdiv@dividend+1)^0,7,c
  2262   001832  EF1F  F00C         	goto	u1280
  2263   001836  EF1D  F00C         	goto	u1281
  2264   00183A                     u1281:
  2265   00183A  EF25  F00C         	goto	l1894
  2266   00183E                     u1280:
  2267   00183E  6C01               	negf	___awdiv@dividend^0,c
  2268   001840  1E02               	comf	(___awdiv@dividend+1)^0,f,c
  2269   001842  B0D8               	btfsc	status,0,c
  2270   001844  2A02               	incf	(___awdiv@dividend+1)^0,f,c
  2271   001846  0E01               	movlw	1
  2272   001848  1A06               	xorwf	___awdiv@sign^0,f,c
  2273   00184A                     l1894:
  2274   00184A  0E00               	movlw	0
  2275   00184C  6E08               	movwf	(___awdiv@quotient+1)^0,c
  2276   00184E  0E00               	movlw	0
  2277   001850  6E07               	movwf	___awdiv@quotient^0,c
  2278   001852  5003               	movf	___awdiv@divisor^0,w,c
  2279   001854  1004               	iorwf	(___awdiv@divisor+1)^0,w,c
  2280   001856  B4D8               	btfsc	status,2,c
  2281   001858  EF30  F00C         	goto	u1291
  2282   00185C  EF32  F00C         	goto	u1290
  2283   001860                     u1291:
  2284   001860  EF5A  F00C         	goto	l1916
  2285   001864                     u1290:
  2286   001864  0E01               	movlw	1
  2287   001866  6E05               	movwf	___awdiv@counter^0,c
  2288   001868  EF3A  F00C         	goto	l1902
  2289   00186C                     l1900:
  2290   00186C  90D8               	bcf	status,0,c
  2291   00186E  3603               	rlcf	___awdiv@divisor^0,f,c
  2292   001870  3604               	rlcf	(___awdiv@divisor+1)^0,f,c
  2293   001872  2A05               	incf	___awdiv@counter^0,f,c
  2294   001874                     l1902:
  2295   001874  AE04               	btfss	(___awdiv@divisor+1)^0,7,c
  2296   001876  EF3F  F00C         	goto	u1301
  2297   00187A  EF41  F00C         	goto	u1300
  2298   00187E                     u1301:
  2299   00187E  EF36  F00C         	goto	l1900
  2300   001882                     u1300:
  2301   001882                     l1904:
  2302   001882  90D8               	bcf	status,0,c
  2303   001884  3607               	rlcf	___awdiv@quotient^0,f,c
  2304   001886  3608               	rlcf	(___awdiv@quotient+1)^0,f,c
  2305   001888  5003               	movf	___awdiv@divisor^0,w,c
  2306   00188A  5C01               	subwf	___awdiv@dividend^0,w,c
  2307   00188C  5004               	movf	(___awdiv@divisor+1)^0,w,c
  2308   00188E  5802               	subwfb	(___awdiv@dividend+1)^0,w,c
  2309   001890  A0D8               	btfss	status,0,c
  2310   001892  EF4D  F00C         	goto	u1311
  2311   001896  EF4F  F00C         	goto	u1310
  2312   00189A                     u1311:
  2313   00189A  EF54  F00C         	goto	l1912
  2314   00189E                     u1310:
  2315   00189E  5003               	movf	___awdiv@divisor^0,w,c
  2316   0018A0  5E01               	subwf	___awdiv@dividend^0,f,c
  2317   0018A2  5004               	movf	(___awdiv@divisor+1)^0,w,c
  2318   0018A4  5A02               	subwfb	(___awdiv@dividend+1)^0,f,c
  2319   0018A6  8007               	bsf	___awdiv@quotient^0,0,c
  2320   0018A8                     l1912:
  2321   0018A8  90D8               	bcf	status,0,c
  2322   0018AA  3204               	rrcf	(___awdiv@divisor+1)^0,f,c
  2323   0018AC  3203               	rrcf	___awdiv@divisor^0,f,c
  2324   0018AE  2E05               	decfsz	___awdiv@counter^0,f,c
  2325   0018B0  EF41  F00C         	goto	l1904
  2326   0018B4                     l1916:
  2327   0018B4  5006               	movf	___awdiv@sign^0,w,c
  2328   0018B6  B4D8               	btfsc	status,2,c
  2329   0018B8  EF60  F00C         	goto	u1321
  2330   0018BC  EF62  F00C         	goto	u1320
  2331   0018C0                     u1321:
  2332   0018C0  EF66  F00C         	goto	l1920
  2333   0018C4                     u1320:
  2334   0018C4  6C07               	negf	___awdiv@quotient^0,c
  2335   0018C6  1E08               	comf	(___awdiv@quotient+1)^0,f,c
  2336   0018C8  B0D8               	btfsc	status,0,c
  2337   0018CA  2A08               	incf	(___awdiv@quotient+1)^0,f,c
  2338   0018CC                     l1920:
  2339   0018CC  C007  F001         	movff	___awdiv@quotient,?___awdiv
  2340   0018D0  C008  F002         	movff	___awdiv@quotient+1,?___awdiv+1
  2341   0018D4  0012               	return		;funcret
  2342   0018D6                     __end_of___awdiv:
  2343                           	callstack 0
  2344                           
  2345 ;; *************** function _clock_init *****************
  2346 ;; Defined at:
  2347 ;;		line 5 in file "clock.c"
  2348 ;; Parameters:    Size  Location     Type
  2349 ;;		None
  2350 ;; Auto vars:     Size  Location     Type
  2351 ;;		None
  2352 ;; Return value:  Size  Location     Type
  2353 ;;                  1    wreg      void 
  2354 ;; Registers used:
  2355 ;;		None
  2356 ;; Tracked objects:
  2357 ;;		On entry : 0/0
  2358 ;;		On exit  : 0/0
  2359 ;;		Unchanged: 0/0
  2360 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2361 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2362 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2363 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2364 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2365 ;;Total ram usage:        0 bytes
  2366 ;; Hardware stack levels used: 1
  2367 ;; Hardware stack levels required when called: 1
  2368 ;; This function calls:
  2369 ;;		Nothing
  2370 ;; This function is called by:
  2371 ;;		_main
  2372 ;; This function uses a non-reentrant model
  2373 ;;
  2374                           
  2375                           	psect	text13
  2376   001E3E                     __ptext13:
  2377                           	callstack 0
  2378   001E3E                     _clock_init:
  2379                           	callstack 29
  2380   001E3E  0012               	return		;funcret
  2381   001E40                     __end_of_clock_init:
  2382                           	callstack 0
  2383                           
  2384 ;; *************** function _UpdateClock *****************
  2385 ;; Defined at:
  2386 ;;		line 9 in file "clock.c"
  2387 ;; Parameters:    Size  Location     Type
  2388 ;;  seconds         1    6[COMRAM] PTR int 
  2389 ;;		 -> GLOBALsecs(2), 
  2390 ;;  minutes         1    7[COMRAM] PTR int 
  2391 ;;		 -> main@clock(14), 
  2392 ;;  hours           1    8[COMRAM] PTR int 
  2393 ;;		 -> main@clock(14), 
  2394 ;;  days            1    9[COMRAM] PTR int 
  2395 ;;		 -> main@clock(14), 
  2396 ;;  DoW             1   10[COMRAM] PTR int 
  2397 ;;		 -> main@clock(14), 
  2398 ;;  months          1   11[COMRAM] PTR int 
  2399 ;;		 -> main@clock(14), 
  2400 ;;  years           1   12[COMRAM] PTR int 
  2401 ;;		 -> main@clock(14), 
  2402 ;;  TestMode        2   13[COMRAM] int 
  2403 ;; Auto vars:     Size  Location     Type
  2404 ;;  DaysInMonth    24   21[COMRAM] int [12]
  2405 ;; Return value:  Size  Location     Type
  2406 ;;                  1    wreg      void 
  2407 ;; Registers used:
  2408 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2409 ;; Tracked objects:
  2410 ;;		On entry : 0/0
  2411 ;;		On exit  : 0/0
  2412 ;;		Unchanged: 0/0
  2413 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2414 ;;      Params:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2415 ;;      Locals:        24       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2416 ;;      Temps:          6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2417 ;;      Totals:        39       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2418 ;;Total ram usage:       39 bytes
  2419 ;; Hardware stack levels used: 1
  2420 ;; Hardware stack levels required when called: 2
  2421 ;; This function calls:
  2422 ;;		___awmod
  2423 ;; This function is called by:
  2424 ;;		_main
  2425 ;; This function uses a non-reentrant model
  2426 ;;
  2427                           
  2428                           	psect	text14
  2429   000E46                     __ptext14:
  2430                           	callstack 0
  2431   000E46                     _UpdateClock:
  2432                           	callstack 28
  2433   000E46                     
  2434                           ;clock.c: 11:     int DaysInMonth[] = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
  2435   000E46  EE20  F0A6         	lfsr	2,UpdateClock@F14152
  2436   000E4A  EE10  F016         	lfsr	1,UpdateClock@DaysInMonth
  2437   000E4E  0E17               	movlw	23
  2438   000E50                     u1671:
  2439   000E50  CFDB FFE3          	movff	plusw2,plusw1
  2440   000E54  06E8               	decf	wreg,f,c
  2441   000E56  E2FC               	bc	u1671
  2442   000E58                     
  2443                           ;clock.c: 13:     if (TestMode == 1){
  2444   000E58  040E               	decf	UpdateClock@TestMode^0,w,c
  2445   000E5A  100F               	iorwf	(UpdateClock@TestMode+1)^0,w,c
  2446   000E5C  A4D8               	btfss	status,2,c
  2447   000E5E  EF33  F007         	goto	u1681
  2448   000E62  EF35  F007         	goto	u1680
  2449   000E66                     u1681:
  2450   000E66  EF6E  F007         	goto	l2214
  2451   000E6A                     u1680:
  2452   000E6A                     
  2453                           ;clock.c: 14:        *hours = *seconds;
  2454   000E6A  5007               	movf	UpdateClock@seconds^0,w,c
  2455   000E6C  6ED9               	movwf	fsr2l,c
  2456   000E6E  6ADA               	clrf	fsr2h,c
  2457   000E70  5009               	movf	UpdateClock@hours^0,w,c
  2458   000E72  6EE1               	movwf	fsr1l,c
  2459   000E74  6AE2               	clrf	fsr1h,c
  2460   000E76  CFDE FFE6          	movff	postinc2,postinc1
  2461   000E7A  CFDD FFE5          	movff	postdec2,postdec1
  2462   000E7E                     
  2463                           ;clock.c: 15:         if (*seconds >= 24 ){
  2464   000E7E  5007               	movf	UpdateClock@seconds^0,w,c
  2465   000E80  6ED9               	movwf	fsr2l,c
  2466   000E82  6ADA               	clrf	fsr2h,c
  2467   000E84  0E01               	movlw	1
  2468   000E86  BEDB               	btfsc	plusw2,7,c
  2469   000E88  EF50  F007         	goto	u1691
  2470   000E8C  0E01               	movlw	1
  2471   000E8E  50DB               	movf	plusw2,w,c
  2472   000E90  E109               	bnz	u1690
  2473   000E92  0E18               	movlw	24
  2474   000E94  5CDE               	subwf	postinc2,w,c
  2475   000E96  A0D8               	btfss	status,0,c
  2476   000E98  EF50  F007         	goto	u1691
  2477   000E9C  EF52  F007         	goto	u1690
  2478   000EA0                     u1691:
  2479   000EA0  EF6E  F007         	goto	l2214
  2480   000EA4                     u1690:
  2481   000EA4                     
  2482                           ;clock.c: 16:             *seconds = 0;
  2483   000EA4  5007               	movf	UpdateClock@seconds^0,w,c
  2484   000EA6  6ED9               	movwf	fsr2l,c
  2485   000EA8  6ADA               	clrf	fsr2h,c
  2486   000EAA  6ADE               	clrf	postinc2,c
  2487   000EAC  6ADD               	clrf	postdec2,c
  2488                           
  2489                           ;clock.c: 17:             *hours = 0;
  2490   000EAE  5009               	movf	UpdateClock@hours^0,w,c
  2491   000EB0  6ED9               	movwf	fsr2l,c
  2492   000EB2  6ADA               	clrf	fsr2h,c
  2493   000EB4  6ADE               	clrf	postinc2,c
  2494   000EB6  6ADD               	clrf	postdec2,c
  2495   000EB8                     
  2496                           ;clock.c: 18:             *days = *days + 1;
  2497   000EB8  500A               	movf	UpdateClock@days^0,w,c
  2498   000EBA  6ED9               	movwf	fsr2l,c
  2499   000EBC  6ADA               	clrf	fsr2h,c
  2500   000EBE  CFDE F010          	movff	postinc2,??_UpdateClock
  2501   000EC2  CFDD F011          	movff	postdec2,??_UpdateClock+1
  2502   000EC6  0E01               	movlw	1
  2503   000EC8  2610               	addwf	??_UpdateClock^0,f,c
  2504   000ECA  0E00               	movlw	0
  2505   000ECC  2211               	addwfc	(??_UpdateClock+1)^0,f,c
  2506   000ECE  500A               	movf	UpdateClock@days^0,w,c
  2507   000ED0  6ED9               	movwf	fsr2l,c
  2508   000ED2  6ADA               	clrf	fsr2h,c
  2509   000ED4  C010  FFDE         	movff	??_UpdateClock,postinc2
  2510   000ED8  C011  FFDD         	movff	??_UpdateClock+1,postdec2
  2511   000EDC                     l2214:
  2512                           
  2513                           ;clock.c: 22:     if (*seconds >= 60 ){
  2514   000EDC  5007               	movf	UpdateClock@seconds^0,w,c
  2515   000EDE  6ED9               	movwf	fsr2l,c
  2516   000EE0  6ADA               	clrf	fsr2h,c
  2517   000EE2  0E01               	movlw	1
  2518   000EE4  BEDB               	btfsc	plusw2,7,c
  2519   000EE6  EF7F  F007         	goto	u1701
  2520   000EEA  0E01               	movlw	1
  2521   000EEC  50DB               	movf	plusw2,w,c
  2522   000EEE  E109               	bnz	u1700
  2523   000EF0  0E3C               	movlw	60
  2524   000EF2  5CDE               	subwf	postinc2,w,c
  2525   000EF4  A0D8               	btfss	status,0,c
  2526   000EF6  EF7F  F007         	goto	u1701
  2527   000EFA  EF81  F007         	goto	u1700
  2528   000EFE                     u1701:
  2529   000EFE  EF98  F007         	goto	l2220
  2530   000F02                     u1700:
  2531   000F02                     
  2532                           ;clock.c: 23:         *seconds = 0;
  2533   000F02  5007               	movf	UpdateClock@seconds^0,w,c
  2534   000F04  6ED9               	movwf	fsr2l,c
  2535   000F06  6ADA               	clrf	fsr2h,c
  2536   000F08  6ADE               	clrf	postinc2,c
  2537   000F0A  6ADD               	clrf	postdec2,c
  2538   000F0C                     
  2539                           ;clock.c: 24:         *minutes = *minutes + 1;
  2540   000F0C  5008               	movf	UpdateClock@minutes^0,w,c
  2541   000F0E  6ED9               	movwf	fsr2l,c
  2542   000F10  6ADA               	clrf	fsr2h,c
  2543   000F12  CFDE F010          	movff	postinc2,??_UpdateClock
  2544   000F16  CFDD F011          	movff	postdec2,??_UpdateClock+1
  2545   000F1A  0E01               	movlw	1
  2546   000F1C  2610               	addwf	??_UpdateClock^0,f,c
  2547   000F1E  0E00               	movlw	0
  2548   000F20  2211               	addwfc	(??_UpdateClock+1)^0,f,c
  2549   000F22  5008               	movf	UpdateClock@minutes^0,w,c
  2550   000F24  6ED9               	movwf	fsr2l,c
  2551   000F26  6ADA               	clrf	fsr2h,c
  2552   000F28  C010  FFDE         	movff	??_UpdateClock,postinc2
  2553   000F2C  C011  FFDD         	movff	??_UpdateClock+1,postdec2
  2554   000F30                     l2220:
  2555                           
  2556                           ;clock.c: 27:     if (*minutes >= 60){
  2557   000F30  5008               	movf	UpdateClock@minutes^0,w,c
  2558   000F32  6ED9               	movwf	fsr2l,c
  2559   000F34  6ADA               	clrf	fsr2h,c
  2560   000F36  0E01               	movlw	1
  2561   000F38  BEDB               	btfsc	plusw2,7,c
  2562   000F3A  EFA9  F007         	goto	u1711
  2563   000F3E  0E01               	movlw	1
  2564   000F40  50DB               	movf	plusw2,w,c
  2565   000F42  E109               	bnz	u1710
  2566   000F44  0E3C               	movlw	60
  2567   000F46  5CDE               	subwf	postinc2,w,c
  2568   000F48  A0D8               	btfss	status,0,c
  2569   000F4A  EFA9  F007         	goto	u1711
  2570   000F4E  EFAB  F007         	goto	u1710
  2571   000F52                     u1711:
  2572   000F52  EFC2  F007         	goto	l2226
  2573   000F56                     u1710:
  2574   000F56                     
  2575                           ;clock.c: 28:         *minutes = 0;
  2576   000F56  5008               	movf	UpdateClock@minutes^0,w,c
  2577   000F58  6ED9               	movwf	fsr2l,c
  2578   000F5A  6ADA               	clrf	fsr2h,c
  2579   000F5C  6ADE               	clrf	postinc2,c
  2580   000F5E  6ADD               	clrf	postdec2,c
  2581   000F60                     
  2582                           ;clock.c: 29:         *hours = *hours + 1;
  2583   000F60  5009               	movf	UpdateClock@hours^0,w,c
  2584   000F62  6ED9               	movwf	fsr2l,c
  2585   000F64  6ADA               	clrf	fsr2h,c
  2586   000F66  CFDE F010          	movff	postinc2,??_UpdateClock
  2587   000F6A  CFDD F011          	movff	postdec2,??_UpdateClock+1
  2588   000F6E  0E01               	movlw	1
  2589   000F70  2610               	addwf	??_UpdateClock^0,f,c
  2590   000F72  0E00               	movlw	0
  2591   000F74  2211               	addwfc	(??_UpdateClock+1)^0,f,c
  2592   000F76  5009               	movf	UpdateClock@hours^0,w,c
  2593   000F78  6ED9               	movwf	fsr2l,c
  2594   000F7A  6ADA               	clrf	fsr2h,c
  2595   000F7C  C010  FFDE         	movff	??_UpdateClock,postinc2
  2596   000F80  C011  FFDD         	movff	??_UpdateClock+1,postdec2
  2597   000F84                     l2226:
  2598                           
  2599                           ;clock.c: 32:     if (*hours >= 24){
  2600   000F84  5009               	movf	UpdateClock@hours^0,w,c
  2601   000F86  6ED9               	movwf	fsr2l,c
  2602   000F88  6ADA               	clrf	fsr2h,c
  2603   000F8A  0E01               	movlw	1
  2604   000F8C  BEDB               	btfsc	plusw2,7,c
  2605   000F8E  EFD3  F007         	goto	u1721
  2606   000F92  0E01               	movlw	1
  2607   000F94  50DB               	movf	plusw2,w,c
  2608   000F96  E109               	bnz	u1720
  2609   000F98  0E18               	movlw	24
  2610   000F9A  5CDE               	subwf	postinc2,w,c
  2611   000F9C  A0D8               	btfss	status,0,c
  2612   000F9E  EFD3  F007         	goto	u1721
  2613   000FA2  EFD5  F007         	goto	u1720
  2614   000FA6                     u1721:
  2615   000FA6  EFFE  F007         	goto	l2234
  2616   000FAA                     u1720:
  2617   000FAA                     
  2618                           ;clock.c: 33:         *hours = 0;
  2619   000FAA  5009               	movf	UpdateClock@hours^0,w,c
  2620   000FAC  6ED9               	movwf	fsr2l,c
  2621   000FAE  6ADA               	clrf	fsr2h,c
  2622   000FB0  6ADE               	clrf	postinc2,c
  2623   000FB2  6ADD               	clrf	postdec2,c
  2624   000FB4                     
  2625                           ;clock.c: 34:         *days = *days + 1;
  2626   000FB4  500A               	movf	UpdateClock@days^0,w,c
  2627   000FB6  6ED9               	movwf	fsr2l,c
  2628   000FB8  6ADA               	clrf	fsr2h,c
  2629   000FBA  CFDE F010          	movff	postinc2,??_UpdateClock
  2630   000FBE  CFDD F011          	movff	postdec2,??_UpdateClock+1
  2631   000FC2  0E01               	movlw	1
  2632   000FC4  2610               	addwf	??_UpdateClock^0,f,c
  2633   000FC6  0E00               	movlw	0
  2634   000FC8  2211               	addwfc	(??_UpdateClock+1)^0,f,c
  2635   000FCA  500A               	movf	UpdateClock@days^0,w,c
  2636   000FCC  6ED9               	movwf	fsr2l,c
  2637   000FCE  6ADA               	clrf	fsr2h,c
  2638   000FD0  C010  FFDE         	movff	??_UpdateClock,postinc2
  2639   000FD4  C011  FFDD         	movff	??_UpdateClock+1,postdec2
  2640   000FD8                     
  2641                           ;clock.c: 35:         *DoW = *DoW + 1;
  2642   000FD8  500B               	movf	UpdateClock@DoW^0,w,c
  2643   000FDA  6ED9               	movwf	fsr2l,c
  2644   000FDC  6ADA               	clrf	fsr2h,c
  2645   000FDE  CFDE F010          	movff	postinc2,??_UpdateClock
  2646   000FE2  CFDD F011          	movff	postdec2,??_UpdateClock+1
  2647   000FE6  0E01               	movlw	1
  2648   000FE8  2610               	addwf	??_UpdateClock^0,f,c
  2649   000FEA  0E00               	movlw	0
  2650   000FEC  2211               	addwfc	(??_UpdateClock+1)^0,f,c
  2651   000FEE  500B               	movf	UpdateClock@DoW^0,w,c
  2652   000FF0  6ED9               	movwf	fsr2l,c
  2653   000FF2  6ADA               	clrf	fsr2h,c
  2654   000FF4  C010  FFDE         	movff	??_UpdateClock,postinc2
  2655   000FF8  C011  FFDD         	movff	??_UpdateClock+1,postdec2
  2656   000FFC                     l2234:
  2657                           
  2658                           ;clock.c: 38:     if (*DoW >= 8){
  2659   000FFC  500B               	movf	UpdateClock@DoW^0,w,c
  2660   000FFE  6ED9               	movwf	fsr2l,c
  2661   001000  6ADA               	clrf	fsr2h,c
  2662   001002  0E01               	movlw	1
  2663   001004  BEDB               	btfsc	plusw2,7,c
  2664   001006  EF0F  F008         	goto	u1731
  2665   00100A  0E01               	movlw	1
  2666   00100C  50DB               	movf	plusw2,w,c
  2667   00100E  E109               	bnz	u1730
  2668   001010  0E08               	movlw	8
  2669   001012  5CDE               	subwf	postinc2,w,c
  2670   001014  A0D8               	btfss	status,0,c
  2671   001016  EF0F  F008         	goto	u1731
  2672   00101A  EF11  F008         	goto	u1730
  2673   00101E                     u1731:
  2674   00101E  EF18  F008         	goto	l2238
  2675   001022                     u1730:
  2676   001022                     
  2677                           ;clock.c: 39:         *DoW = 1;
  2678   001022  500B               	movf	UpdateClock@DoW^0,w,c
  2679   001024  6ED9               	movwf	fsr2l,c
  2680   001026  6ADA               	clrf	fsr2h,c
  2681   001028  0E01               	movlw	1
  2682   00102A  6EDE               	movwf	postinc2,c
  2683   00102C  0E00               	movlw	0
  2684   00102E  6EDD               	movwf	postdec2,c
  2685   001030                     l2238:
  2686                           
  2687                           ;clock.c: 43:     if ((*years)%4 == 0 && *months == 2){
  2688   001030  500D               	movf	UpdateClock@years^0,w,c
  2689   001032  6ED9               	movwf	fsr2l,c
  2690   001034  6ADA               	clrf	fsr2h,c
  2691   001036  CFDE F010          	movff	postinc2,??_UpdateClock
  2692   00103A  CFDD F011          	movff	postdec2,??_UpdateClock+1
  2693   00103E  0E03               	movlw	3
  2694   001040  1610               	andwf	??_UpdateClock^0,f,c
  2695   001042  0E00               	movlw	0
  2696   001044  1611               	andwf	(??_UpdateClock+1)^0,f,c
  2697   001046  5010               	movf	??_UpdateClock^0,w,c
  2698   001048  1011               	iorwf	(??_UpdateClock+1)^0,w,c
  2699   00104A  A4D8               	btfss	status,2,c
  2700   00104C  EF2A  F008         	goto	u1741
  2701   001050  EF2C  F008         	goto	u1740
  2702   001054                     u1741:
  2703   001054  EF3D  F008         	goto	l2244
  2704   001058                     u1740:
  2705   001058  500C               	movf	UpdateClock@months^0,w,c
  2706   00105A  6ED9               	movwf	fsr2l,c
  2707   00105C  6ADA               	clrf	fsr2h,c
  2708   00105E  0E02               	movlw	2
  2709   001060  18DE               	xorwf	postinc2,w,c
  2710   001062  10DE               	iorwf	postinc2,w,c
  2711   001064  A4D8               	btfss	status,2,c
  2712   001066  EF37  F008         	goto	u1751
  2713   00106A  EF39  F008         	goto	u1750
  2714   00106E                     u1751:
  2715   00106E  EF3D  F008         	goto	l2244
  2716   001072                     u1750:
  2717   001072                     
  2718                           ;clock.c: 44:        DaysInMonth[1] = 29;
  2719   001072  0E00               	movlw	0
  2720   001074  6E19               	movwf	(UpdateClock@DaysInMonth+3)^0,c
  2721   001076  0E1D               	movlw	29
  2722   001078  6E18               	movwf	(UpdateClock@DaysInMonth+2)^0,c
  2723   00107A                     l2244:
  2724                           
  2725                           ;clock.c: 48:     if (*years%100 == 0 && *months == 2){
  2726   00107A  500D               	movf	UpdateClock@years^0,w,c
  2727   00107C  6ED9               	movwf	fsr2l,c
  2728   00107E  6ADA               	clrf	fsr2h,c
  2729   001080  CFDE F001          	movff	postinc2,___awmod@dividend
  2730   001084  CFDD F002          	movff	postdec2,___awmod@dividend+1
  2731   001088  0E00               	movlw	0
  2732   00108A  6E04               	movwf	(___awmod@divisor+1)^0,c
  2733   00108C  0E64               	movlw	100
  2734   00108E  6E03               	movwf	___awmod@divisor^0,c
  2735   001090  EC6B  F00C         	call	___awmod	;wreg free
  2736   001094  5001               	movf	?___awmod^0,w,c
  2737   001096  1002               	iorwf	(?___awmod+1)^0,w,c
  2738   001098  A4D8               	btfss	status,2,c
  2739   00109A  EF51  F008         	goto	u1761
  2740   00109E  EF53  F008         	goto	u1760
  2741   0010A2                     u1761:
  2742   0010A2  EF7A  F008         	goto	l2252
  2743   0010A6                     u1760:
  2744   0010A6  500C               	movf	UpdateClock@months^0,w,c
  2745   0010A8  6ED9               	movwf	fsr2l,c
  2746   0010AA  6ADA               	clrf	fsr2h,c
  2747   0010AC  0E02               	movlw	2
  2748   0010AE  18DE               	xorwf	postinc2,w,c
  2749   0010B0  10DE               	iorwf	postinc2,w,c
  2750   0010B2  A4D8               	btfss	status,2,c
  2751   0010B4  EF5E  F008         	goto	u1771
  2752   0010B8  EF60  F008         	goto	u1770
  2753   0010BC                     u1771:
  2754   0010BC  EF7A  F008         	goto	l2252
  2755   0010C0                     u1770:
  2756   0010C0                     
  2757                           ;clock.c: 49:         if(*years%400 != 0){
  2758   0010C0  500D               	movf	UpdateClock@years^0,w,c
  2759   0010C2  6ED9               	movwf	fsr2l,c
  2760   0010C4  6ADA               	clrf	fsr2h,c
  2761   0010C6  CFDE F001          	movff	postinc2,___awmod@dividend
  2762   0010CA  CFDD F002          	movff	postdec2,___awmod@dividend+1
  2763   0010CE  0E01               	movlw	1
  2764   0010D0  6E04               	movwf	(___awmod@divisor+1)^0,c
  2765   0010D2  0E90               	movlw	144
  2766   0010D4  6E03               	movwf	___awmod@divisor^0,c
  2767   0010D6  EC6B  F00C         	call	___awmod	;wreg free
  2768   0010DA  5001               	movf	?___awmod^0,w,c
  2769   0010DC  1002               	iorwf	(?___awmod+1)^0,w,c
  2770   0010DE  B4D8               	btfsc	status,2,c
  2771   0010E0  EF74  F008         	goto	u1781
  2772   0010E4  EF76  F008         	goto	u1780
  2773   0010E8                     u1781:
  2774   0010E8  EF7A  F008         	goto	l2252
  2775   0010EC                     u1780:
  2776   0010EC                     
  2777                           ;clock.c: 50:             DaysInMonth[1] = 28;
  2778   0010EC  0E00               	movlw	0
  2779   0010EE  6E19               	movwf	(UpdateClock@DaysInMonth+3)^0,c
  2780   0010F0  0E1C               	movlw	28
  2781   0010F2  6E18               	movwf	(UpdateClock@DaysInMonth+2)^0,c
  2782   0010F4                     l2252:
  2783                           
  2784                           ;clock.c: 55:     if (*days > (DaysInMonth[*months-1] ) ) {
  2785   0010F4  500A               	movf	UpdateClock@days^0,w,c
  2786   0010F6  6ED9               	movwf	fsr2l,c
  2787   0010F8  6ADA               	clrf	fsr2h,c
  2788   0010FA  500C               	movf	UpdateClock@months^0,w,c
  2789   0010FC  6EE1               	movwf	fsr1l,c
  2790   0010FE  6AE2               	clrf	fsr1h,c
  2791   001100  50E7               	movf	indf1,w,c
  2792   001102  0D02               	mullw	2
  2793   001104  CFF3 F012          	movff	prodl,??_UpdateClock+2
  2794   001108  0EFE               	movlw	254
  2795   00110A  2612               	addwf	(??_UpdateClock+2)^0,f,c
  2796   00110C  5012               	movf	(??_UpdateClock+2)^0,w,c
  2797   00110E  0F16               	addlw	low UpdateClock@DaysInMonth
  2798   001110  6EE1               	movwf	fsr1l,c
  2799   001112  6AE2               	clrf	fsr1h,c
  2800   001114  50DE               	movf	postinc2,w,c
  2801   001116  5CE6               	subwf	postinc1,w,c
  2802   001118  50E6               	movf	postinc1,w,c
  2803   00111A  0A80               	xorlw	128
  2804   00111C  6E15               	movwf	(??_UpdateClock+5)^0,c
  2805   00111E  50DE               	movf	postinc2,w,c
  2806   001120  0A80               	xorlw	128
  2807   001122  5815               	subwfb	(??_UpdateClock+5)^0,w,c
  2808   001124  B0D8               	btfsc	status,0,c
  2809   001126  EF97  F008         	goto	u1791
  2810   00112A  EF99  F008         	goto	u1790
  2811   00112E                     u1791:
  2812   00112E  EFDE  F008         	goto	l259
  2813   001132                     u1790:
  2814   001132                     
  2815                           ;clock.c: 56:         *days = 1;
  2816   001132  500A               	movf	UpdateClock@days^0,w,c
  2817   001134  6ED9               	movwf	fsr2l,c
  2818   001136  6ADA               	clrf	fsr2h,c
  2819   001138  0E01               	movlw	1
  2820   00113A  6EDE               	movwf	postinc2,c
  2821   00113C  0E00               	movlw	0
  2822   00113E  6EDD               	movwf	postdec2,c
  2823   001140                     
  2824                           ;clock.c: 57:         *months = *months + 1 ;
  2825   001140  500C               	movf	UpdateClock@months^0,w,c
  2826   001142  6ED9               	movwf	fsr2l,c
  2827   001144  6ADA               	clrf	fsr2h,c
  2828   001146  CFDE F010          	movff	postinc2,??_UpdateClock
  2829   00114A  CFDD F011          	movff	postdec2,??_UpdateClock+1
  2830   00114E  0E01               	movlw	1
  2831   001150  2610               	addwf	??_UpdateClock^0,f,c
  2832   001152  0E00               	movlw	0
  2833   001154  2211               	addwfc	(??_UpdateClock+1)^0,f,c
  2834   001156  500C               	movf	UpdateClock@months^0,w,c
  2835   001158  6ED9               	movwf	fsr2l,c
  2836   00115A  6ADA               	clrf	fsr2h,c
  2837   00115C  C010  FFDE         	movff	??_UpdateClock,postinc2
  2838   001160  C011  FFDD         	movff	??_UpdateClock+1,postdec2
  2839   001164                     
  2840                           ;clock.c: 59:         if (*months >= 12+1) {
  2841   001164  500C               	movf	UpdateClock@months^0,w,c
  2842   001166  6ED9               	movwf	fsr2l,c
  2843   001168  6ADA               	clrf	fsr2h,c
  2844   00116A  0E01               	movlw	1
  2845   00116C  BEDB               	btfsc	plusw2,7,c
  2846   00116E  EFC3  F008         	goto	u1801
  2847   001172  0E01               	movlw	1
  2848   001174  50DB               	movf	plusw2,w,c
  2849   001176  E109               	bnz	u1800
  2850   001178  0E0D               	movlw	13
  2851   00117A  5CDE               	subwf	postinc2,w,c
  2852   00117C  A0D8               	btfss	status,0,c
  2853   00117E  EFC3  F008         	goto	u1801
  2854   001182  EFC5  F008         	goto	u1800
  2855   001186                     u1801:
  2856   001186  EFDE  F008         	goto	l259
  2857   00118A                     u1800:
  2858   00118A                     
  2859                           ;clock.c: 60:             *months = 1;
  2860   00118A  500C               	movf	UpdateClock@months^0,w,c
  2861   00118C  6ED9               	movwf	fsr2l,c
  2862   00118E  6ADA               	clrf	fsr2h,c
  2863   001190  0E01               	movlw	1
  2864   001192  6EDE               	movwf	postinc2,c
  2865   001194  0E00               	movlw	0
  2866   001196  6EDD               	movwf	postdec2,c
  2867   001198                     
  2868                           ;clock.c: 61:             *years = *years + 1;
  2869   001198  500D               	movf	UpdateClock@years^0,w,c
  2870   00119A  6ED9               	movwf	fsr2l,c
  2871   00119C  6ADA               	clrf	fsr2h,c
  2872   00119E  CFDE F010          	movff	postinc2,??_UpdateClock
  2873   0011A2  CFDD F011          	movff	postdec2,??_UpdateClock+1
  2874   0011A6  0E01               	movlw	1
  2875   0011A8  2610               	addwf	??_UpdateClock^0,f,c
  2876   0011AA  0E00               	movlw	0
  2877   0011AC  2211               	addwfc	(??_UpdateClock+1)^0,f,c
  2878   0011AE  500D               	movf	UpdateClock@years^0,w,c
  2879   0011B0  6ED9               	movwf	fsr2l,c
  2880   0011B2  6ADA               	clrf	fsr2h,c
  2881   0011B4  C010  FFDE         	movff	??_UpdateClock,postinc2
  2882   0011B8  C011  FFDD         	movff	??_UpdateClock+1,postdec2
  2883   0011BC                     l259:
  2884   0011BC  0012               	return		;funcret
  2885   0011BE                     __end_of_UpdateClock:
  2886                           	callstack 0
  2887                           
  2888 ;; *************** function ___awmod *****************
  2889 ;; Defined at:
  2890 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\awmod.c"
  2891 ;; Parameters:    Size  Location     Type
  2892 ;;  dividend        2    0[COMRAM] int 
  2893 ;;  divisor         2    2[COMRAM] int 
  2894 ;; Auto vars:     Size  Location     Type
  2895 ;;  sign            1    5[COMRAM] unsigned char 
  2896 ;;  counter         1    4[COMRAM] unsigned char 
  2897 ;; Return value:  Size  Location     Type
  2898 ;;                  2    0[COMRAM] int 
  2899 ;; Registers used:
  2900 ;;		wreg, status,2, status,0
  2901 ;; Tracked objects:
  2902 ;;		On entry : 0/0
  2903 ;;		On exit  : 0/0
  2904 ;;		Unchanged: 0/0
  2905 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2906 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2907 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2908 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2909 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2910 ;;Total ram usage:        6 bytes
  2911 ;; Hardware stack levels used: 1
  2912 ;; Hardware stack levels required when called: 1
  2913 ;; This function calls:
  2914 ;;		Nothing
  2915 ;; This function is called by:
  2916 ;;		_UpdateClock
  2917 ;;		_dtoa
  2918 ;; This function uses a non-reentrant model
  2919 ;;
  2920                           
  2921                           	psect	text15
  2922   0018D6                     __ptext15:
  2923                           	callstack 0
  2924   0018D6                     ___awmod:
  2925                           	callstack 25
  2926   0018D6  0E00               	movlw	0
  2927   0018D8  6E06               	movwf	___awmod@sign^0,c
  2928   0018DA  BE02               	btfsc	(___awmod@dividend+1)^0,7,c
  2929   0018DC  EF74  F00C         	goto	u1330
  2930   0018E0  EF72  F00C         	goto	u1331
  2931   0018E4                     u1331:
  2932   0018E4  EF7A  F00C         	goto	l1932
  2933   0018E8                     u1330:
  2934   0018E8  6C01               	negf	___awmod@dividend^0,c
  2935   0018EA  1E02               	comf	(___awmod@dividend+1)^0,f,c
  2936   0018EC  B0D8               	btfsc	status,0,c
  2937   0018EE  2A02               	incf	(___awmod@dividend+1)^0,f,c
  2938   0018F0  0E01               	movlw	1
  2939   0018F2  6E06               	movwf	___awmod@sign^0,c
  2940   0018F4                     l1932:
  2941   0018F4  BE04               	btfsc	(___awmod@divisor+1)^0,7,c
  2942   0018F6  EF81  F00C         	goto	u1340
  2943   0018FA  EF7F  F00C         	goto	u1341
  2944   0018FE                     u1341:
  2945   0018FE  EF85  F00C         	goto	l1936
  2946   001902                     u1340:
  2947   001902  6C03               	negf	___awmod@divisor^0,c
  2948   001904  1E04               	comf	(___awmod@divisor+1)^0,f,c
  2949   001906  B0D8               	btfsc	status,0,c
  2950   001908  2A04               	incf	(___awmod@divisor+1)^0,f,c
  2951   00190A                     l1936:
  2952   00190A  5003               	movf	___awmod@divisor^0,w,c
  2953   00190C  1004               	iorwf	(___awmod@divisor+1)^0,w,c
  2954   00190E  B4D8               	btfsc	status,2,c
  2955   001910  EF8C  F00C         	goto	u1351
  2956   001914  EF8E  F00C         	goto	u1350
  2957   001918                     u1351:
  2958   001918  EFB2  F00C         	goto	l1952
  2959   00191C                     u1350:
  2960   00191C  0E01               	movlw	1
  2961   00191E  6E05               	movwf	___awmod@counter^0,c
  2962   001920  EF96  F00C         	goto	l1942
  2963   001924                     l1940:
  2964   001924  90D8               	bcf	status,0,c
  2965   001926  3603               	rlcf	___awmod@divisor^0,f,c
  2966   001928  3604               	rlcf	(___awmod@divisor+1)^0,f,c
  2967   00192A  2A05               	incf	___awmod@counter^0,f,c
  2968   00192C                     l1942:
  2969   00192C  AE04               	btfss	(___awmod@divisor+1)^0,7,c
  2970   00192E  EF9B  F00C         	goto	u1361
  2971   001932  EF9D  F00C         	goto	u1360
  2972   001936                     u1361:
  2973   001936  EF92  F00C         	goto	l1940
  2974   00193A                     u1360:
  2975   00193A                     l1944:
  2976   00193A  5003               	movf	___awmod@divisor^0,w,c
  2977   00193C  5C01               	subwf	___awmod@dividend^0,w,c
  2978   00193E  5004               	movf	(___awmod@divisor+1)^0,w,c
  2979   001940  5802               	subwfb	(___awmod@dividend+1)^0,w,c
  2980   001942  A0D8               	btfss	status,0,c
  2981   001944  EFA6  F00C         	goto	u1371
  2982   001948  EFA8  F00C         	goto	u1370
  2983   00194C                     u1371:
  2984   00194C  EFAC  F00C         	goto	l1948
  2985   001950                     u1370:
  2986   001950  5003               	movf	___awmod@divisor^0,w,c
  2987   001952  5E01               	subwf	___awmod@dividend^0,f,c
  2988   001954  5004               	movf	(___awmod@divisor+1)^0,w,c
  2989   001956  5A02               	subwfb	(___awmod@dividend+1)^0,f,c
  2990   001958                     l1948:
  2991   001958  90D8               	bcf	status,0,c
  2992   00195A  3204               	rrcf	(___awmod@divisor+1)^0,f,c
  2993   00195C  3203               	rrcf	___awmod@divisor^0,f,c
  2994   00195E  2E05               	decfsz	___awmod@counter^0,f,c
  2995   001960  EF9D  F00C         	goto	l1944
  2996   001964                     l1952:
  2997   001964  5006               	movf	___awmod@sign^0,w,c
  2998   001966  B4D8               	btfsc	status,2,c
  2999   001968  EFB8  F00C         	goto	u1381
  3000   00196C  EFBA  F00C         	goto	u1380
  3001   001970                     u1381:
  3002   001970  EFBE  F00C         	goto	l1956
  3003   001974                     u1380:
  3004   001974  6C01               	negf	___awmod@dividend^0,c
  3005   001976  1E02               	comf	(___awmod@dividend+1)^0,f,c
  3006   001978  B0D8               	btfsc	status,0,c
  3007   00197A  2A02               	incf	(___awmod@dividend+1)^0,f,c
  3008   00197C                     l1956:
  3009   00197C  C001  F001         	movff	___awmod@dividend,?___awmod
  3010   001980  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
  3011   001984  0012               	return		;funcret
  3012   001986                     __end_of___awmod:
  3013                           	callstack 0
  3014                           
  3015 ;; *************** function _Timer0_init *****************
  3016 ;; Defined at:
  3017 ;;		line 8 in file "timers.c"
  3018 ;; Parameters:    Size  Location     Type
  3019 ;;		None
  3020 ;; Auto vars:     Size  Location     Type
  3021 ;;		None
  3022 ;; Return value:  Size  Location     Type
  3023 ;;                  1    wreg      void 
  3024 ;; Registers used:
  3025 ;;		wreg, status,2
  3026 ;; Tracked objects:
  3027 ;;		On entry : 0/0
  3028 ;;		On exit  : 0/0
  3029 ;;		Unchanged: 0/0
  3030 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3031 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3032 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3033 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3034 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3035 ;;Total ram usage:        0 bytes
  3036 ;; Hardware stack levels used: 1
  3037 ;; Hardware stack levels required when called: 1
  3038 ;; This function calls:
  3039 ;;		Nothing
  3040 ;; This function is called by:
  3041 ;;		_main
  3042 ;; This function uses a non-reentrant model
  3043 ;;
  3044                           
  3045                           	psect	text16
  3046   001DCE                     __ptext16:
  3047                           	callstack 0
  3048   001DCE                     _Timer0_init:
  3049                           	callstack 29
  3050   001DCE                     
  3051                           ;timers.c: 10:     T0CON1bits.T0CS=0b010;
  3052   001DCE  50D6               	movf	214,w,c	;volatile
  3053   001DD0  0B1F               	andlw	-225
  3054   001DD2  0940               	iorlw	64
  3055   001DD4  6ED6               	movwf	214,c	;volatile
  3056   001DD6                     
  3057                           ;timers.c: 11:     T0CON1bits.T0ASYNC=1;
  3058   001DD6  88D6               	bsf	214,4,c	;volatile
  3059                           
  3060                           ;timers.c: 13:     T0CON1bits.T0CKPS=0b1000;
  3061   001DD8  50D6               	movf	214,w,c	;volatile
  3062   001DDA  0BF0               	andlw	-16
  3063   001DDC  0908               	iorlw	8
  3064   001DDE  6ED6               	movwf	214,c	;volatile
  3065   001DE0                     
  3066                           ;timers.c: 15:     T0CON0bits.T016BIT=1;
  3067   001DE0  88D5               	bsf	213,4,c	;volatile
  3068                           
  3069                           ;timers.c: 18:     TMR0H = 0b00001011;
  3070   001DE2  0E0B               	movlw	11
  3071   001DE4  6ED4               	movwf	212,c	;volatile
  3072                           
  3073                           ;timers.c: 19:     TMR0L = 0b11011100;
  3074   001DE6  0EDC               	movlw	220
  3075   001DE8  6ED3               	movwf	211,c	;volatile
  3076   001DEA                     
  3077                           ;timers.c: 35:     T0CON0bits.T0EN=1;
  3078   001DEA  8ED5               	bsf	213,7,c	;volatile
  3079   001DEC  0012               	return		;funcret
  3080   001DEE                     __end_of_Timer0_init:
  3081                           	callstack 0
  3082                           
  3083 ;; *************** function _LEDarray_init *****************
  3084 ;; Defined at:
  3085 ;;		line 8 in file "LEDarray.c"
  3086 ;; Parameters:    Size  Location     Type
  3087 ;;		None
  3088 ;; Auto vars:     Size  Location     Type
  3089 ;;		None
  3090 ;; Return value:  Size  Location     Type
  3091 ;;                  1    wreg      void 
  3092 ;; Registers used:
  3093 ;;		None
  3094 ;; Tracked objects:
  3095 ;;		On entry : 0/0
  3096 ;;		On exit  : 0/0
  3097 ;;		Unchanged: 0/0
  3098 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3099 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3100 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3101 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3102 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3103 ;;Total ram usage:        0 bytes
  3104 ;; Hardware stack levels used: 1
  3105 ;; Hardware stack levels required when called: 1
  3106 ;; This function calls:
  3107 ;;		Nothing
  3108 ;; This function is called by:
  3109 ;;		_main
  3110 ;; This function uses a non-reentrant model
  3111 ;;
  3112                           
  3113                           	psect	text17
  3114   001D84                     __ptext17:
  3115                           	callstack 0
  3116   001D84                     _LEDarray_init:
  3117                           	callstack 29
  3118   001D84                     
  3119                           ;LEDarray.c: 16:     TRISGbits.TRISG0 = 0;
  3120   001D84  9087               	bcf	135,0,c	;volatile
  3121                           
  3122                           ;LEDarray.c: 17:     LATGbits.LATG0 = 0;
  3123   001D86  907F               	bcf	127,0,c	;volatile
  3124                           
  3125                           ;LEDarray.c: 19:     TRISGbits.TRISG1 = 0;
  3126   001D88  9287               	bcf	135,1,c	;volatile
  3127                           
  3128                           ;LEDarray.c: 20:     LATGbits.LATG1 = 0;
  3129   001D8A  927F               	bcf	127,1,c	;volatile
  3130                           
  3131                           ;LEDarray.c: 22:     TRISAbits.TRISA2 = 0;
  3132   001D8C  9481               	bcf	129,2,c	;volatile
  3133                           
  3134                           ;LEDarray.c: 23:     LATAbits.LATA2 = 0;
  3135   001D8E  9479               	bcf	121,2,c	;volatile
  3136                           
  3137                           ;LEDarray.c: 25:     TRISFbits.TRISF6 = 0;
  3138   001D90  9C86               	bcf	134,6,c	;volatile
  3139                           
  3140                           ;LEDarray.c: 26:     LATFbits.LATF6 = 0;
  3141   001D92  9C7E               	bcf	126,6,c	;volatile
  3142                           
  3143                           ;LEDarray.c: 28:     TRISAbits.TRISA4 = 0;
  3144   001D94  9881               	bcf	129,4,c	;volatile
  3145                           
  3146                           ;LEDarray.c: 29:     LATAbits.LATA4 = 0;
  3147   001D96  9879               	bcf	121,4,c	;volatile
  3148                           
  3149                           ;LEDarray.c: 31:     TRISAbits.TRISA5 = 0;
  3150   001D98  9A81               	bcf	129,5,c	;volatile
  3151                           
  3152                           ;LEDarray.c: 32:     LATAbits.LATA5 = 0;
  3153   001D9A  9A79               	bcf	121,5,c	;volatile
  3154                           
  3155                           ;LEDarray.c: 34:     TRISFbits.TRISF0 = 0;
  3156   001D9C  9086               	bcf	134,0,c	;volatile
  3157                           
  3158                           ;LEDarray.c: 35:     LATFbits.LATF0 = 0;
  3159   001D9E  907E               	bcf	126,0,c	;volatile
  3160                           
  3161                           ;LEDarray.c: 37:     TRISBbits.TRISB0 = 0;
  3162   001DA0  9082               	bcf	130,0,c	;volatile
  3163                           
  3164                           ;LEDarray.c: 38:     LATBbits.LATB0 = 0;
  3165   001DA2  907A               	bcf	122,0,c	;volatile
  3166                           
  3167                           ;LEDarray.c: 40:     TRISBbits.TRISB1 = 0;
  3168   001DA4  9282               	bcf	130,1,c	;volatile
  3169                           
  3170                           ;LEDarray.c: 41:     LATBbits.LATB1 = 0;
  3171   001DA6  927A               	bcf	122,1,c	;volatile
  3172   001DA8  0012               	return		;funcret
  3173   001DAA                     __end_of_LEDarray_init:
  3174                           	callstack 0
  3175                           
  3176 ;; *************** function _LEDarray_disp_bin *****************
  3177 ;; Defined at:
  3178 ;;		line 49 in file "LEDarray.c"
  3179 ;; Parameters:    Size  Location     Type
  3180 ;;  number          2    0[COMRAM] unsigned int 
  3181 ;; Auto vars:     Size  Location     Type
  3182 ;;		None
  3183 ;; Return value:  Size  Location     Type
  3184 ;;                  1    wreg      void 
  3185 ;; Registers used:
  3186 ;;		None
  3187 ;; Tracked objects:
  3188 ;;		On entry : 0/0
  3189 ;;		On exit  : 0/0
  3190 ;;		Unchanged: 0/0
  3191 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3192 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3193 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3194 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3195 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3196 ;;Total ram usage:        2 bytes
  3197 ;; Hardware stack levels used: 1
  3198 ;; Hardware stack levels required when called: 1
  3199 ;; This function calls:
  3200 ;;		Nothing
  3201 ;; This function is called by:
  3202 ;;		_main
  3203 ;; This function uses a non-reentrant model
  3204 ;;
  3205                           
  3206                           	psect	text18
  3207   00174A                     __ptext18:
  3208                           	callstack 0
  3209   00174A                     _LEDarray_disp_bin:
  3210                           	callstack 29
  3211   00174A                     
  3212                           ;LEDarray.c: 49: void LEDarray_disp_bin(unsigned int number);LEDarray.c: 50: {;LEDarray.
      +                          c: 53:     if (number & 0b000000001){ LATGbits.LATG0 = 1 ; }
  3213   00174A  A001               	btfss	LEDarray_disp_bin@number^0,0,c
  3214   00174C  EFAA  F00B         	goto	u1811
  3215   001750  EFAC  F00B         	goto	u1810
  3216   001754                     u1811:
  3217   001754  EFAF  F00B         	goto	l127
  3218   001758                     u1810:
  3219   001758  807F               	bsf	127,0,c	;volatile
  3220   00175A  EFB0  F00B         	goto	l128
  3221   00175E                     l127:
  3222   00175E  907F               	bcf	127,0,c	;volatile
  3223   001760                     l128:
  3224                           
  3225                           ;LEDarray.c: 56:     if (number & 0b000000010){ LATGbits.LATG1 = 1 ; }
  3226   001760  A201               	btfss	LEDarray_disp_bin@number^0,1,c
  3227   001762  EFB5  F00B         	goto	u1821
  3228   001766  EFB7  F00B         	goto	u1820
  3229   00176A                     u1821:
  3230   00176A  EFBA  F00B         	goto	l129
  3231   00176E                     u1820:
  3232   00176E  827F               	bsf	127,1,c	;volatile
  3233   001770  EFBB  F00B         	goto	l130
  3234   001774                     l129:
  3235   001774  927F               	bcf	127,1,c	;volatile
  3236   001776                     l130:
  3237                           
  3238                           ;LEDarray.c: 59:     if (number & 0b000000100){ LATAbits.LATA2 = 1 ; }
  3239   001776  A401               	btfss	LEDarray_disp_bin@number^0,2,c
  3240   001778  EFC0  F00B         	goto	u1831
  3241   00177C  EFC2  F00B         	goto	u1830
  3242   001780                     u1831:
  3243   001780  EFC5  F00B         	goto	l131
  3244   001784                     u1830:
  3245   001784  8479               	bsf	121,2,c	;volatile
  3246   001786  EFC6  F00B         	goto	l132
  3247   00178A                     l131:
  3248   00178A  9479               	bcf	121,2,c	;volatile
  3249   00178C                     l132:
  3250                           
  3251                           ;LEDarray.c: 62:     if (number & 0b000001000){ LATFbits.LATF6 = 1 ; }
  3252   00178C  A601               	btfss	LEDarray_disp_bin@number^0,3,c
  3253   00178E  EFCB  F00B         	goto	u1841
  3254   001792  EFCD  F00B         	goto	u1840
  3255   001796                     u1841:
  3256   001796  EFD0  F00B         	goto	l133
  3257   00179A                     u1840:
  3258   00179A  8C7E               	bsf	126,6,c	;volatile
  3259   00179C  EFD1  F00B         	goto	l134
  3260   0017A0                     l133:
  3261   0017A0  9C7E               	bcf	126,6,c	;volatile
  3262   0017A2                     l134:
  3263                           
  3264                           ;LEDarray.c: 65:     if (number & 0b000010000){ LATAbits.LATA4 = 1 ; }
  3265   0017A2  A801               	btfss	LEDarray_disp_bin@number^0,4,c
  3266   0017A4  EFD6  F00B         	goto	u1851
  3267   0017A8  EFD8  F00B         	goto	u1850
  3268   0017AC                     u1851:
  3269   0017AC  EFDB  F00B         	goto	l135
  3270   0017B0                     u1850:
  3271   0017B0  8879               	bsf	121,4,c	;volatile
  3272   0017B2  EFDC  F00B         	goto	l136
  3273   0017B6                     l135:
  3274   0017B6  9879               	bcf	121,4,c	;volatile
  3275   0017B8                     l136:
  3276                           
  3277                           ;LEDarray.c: 68:     if (number & 0b000100000){ LATAbits.LATA5 = 1 ; }
  3278   0017B8  AA01               	btfss	LEDarray_disp_bin@number^0,5,c
  3279   0017BA  EFE1  F00B         	goto	u1861
  3280   0017BE  EFE3  F00B         	goto	u1860
  3281   0017C2                     u1861:
  3282   0017C2  EFE6  F00B         	goto	l137
  3283   0017C6                     u1860:
  3284   0017C6  8A79               	bsf	121,5,c	;volatile
  3285   0017C8  EFE7  F00B         	goto	l138
  3286   0017CC                     l137:
  3287   0017CC  9A79               	bcf	121,5,c	;volatile
  3288   0017CE                     l138:
  3289                           
  3290                           ;LEDarray.c: 71:     if (number & 0b001000000){ LATFbits.LATF0 = 1 ; }
  3291   0017CE  AC01               	btfss	LEDarray_disp_bin@number^0,6,c
  3292   0017D0  EFEC  F00B         	goto	u1871
  3293   0017D4  EFEE  F00B         	goto	u1870
  3294   0017D8                     u1871:
  3295   0017D8  EFF1  F00B         	goto	l139
  3296   0017DC                     u1870:
  3297   0017DC  807E               	bsf	126,0,c	;volatile
  3298   0017DE  EFF2  F00B         	goto	l140
  3299   0017E2                     l139:
  3300   0017E2  907E               	bcf	126,0,c	;volatile
  3301   0017E4                     l140:
  3302                           
  3303                           ;LEDarray.c: 74:     if (number & 0b010000000){ LATBbits.LATB0 = 1 ; }
  3304   0017E4  AE01               	btfss	LEDarray_disp_bin@number^0,7,c
  3305   0017E6  EFF7  F00B         	goto	u1881
  3306   0017EA  EFF9  F00B         	goto	u1880
  3307   0017EE                     u1881:
  3308   0017EE  EFFC  F00B         	goto	l141
  3309   0017F2                     u1880:
  3310   0017F2  807A               	bsf	122,0,c	;volatile
  3311   0017F4  EFFD  F00B         	goto	l142
  3312   0017F8                     l141:
  3313   0017F8  907A               	bcf	122,0,c	;volatile
  3314   0017FA                     l142:
  3315                           
  3316                           ;LEDarray.c: 77:     if (number & 0b100000000){ LATBbits.LATB1 = 1 ; }
  3317   0017FA  A002               	btfss	(LEDarray_disp_bin@number+1)^0,0,c
  3318   0017FC  EF02  F00C         	goto	u1891
  3319   001800  EF04  F00C         	goto	u1890
  3320   001804                     u1891:
  3321   001804  EF07  F00C         	goto	l143
  3322   001808                     u1890:
  3323   001808  827A               	bsf	122,1,c	;volatile
  3324   00180A  EF08  F00C         	goto	l145
  3325   00180E                     l143:
  3326   00180E  927A               	bcf	122,1,c	;volatile
  3327   001810                     l145:
  3328   001810  0012               	return		;funcret
  3329   001812                     __end_of_LEDarray_disp_bin:
  3330                           	callstack 0
  3331                           
  3332 ;; *************** function _LCD_setline *****************
  3333 ;; Defined at:
  3334 ;;		line 120 in file "LCD.c"
  3335 ;; Parameters:    Size  Location     Type
  3336 ;;  line            1    wreg     unsigned char 
  3337 ;; Auto vars:     Size  Location     Type
  3338 ;;  line            1    3[COMRAM] unsigned char 
  3339 ;; Return value:  Size  Location     Type
  3340 ;;                  1    wreg      void 
  3341 ;; Registers used:
  3342 ;;		wreg, status,2, status,0, cstack
  3343 ;; Tracked objects:
  3344 ;;		On entry : 0/0
  3345 ;;		On exit  : 0/0
  3346 ;;		Unchanged: 0/0
  3347 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3348 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3349 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3350 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3351 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3352 ;;Total ram usage:        1 bytes
  3353 ;; Hardware stack levels used: 1
  3354 ;; Hardware stack levels required when called: 4
  3355 ;; This function calls:
  3356 ;;		_LCD_sendbyte
  3357 ;; This function is called by:
  3358 ;;		_main
  3359 ;; This function uses a non-reentrant model
  3360 ;;
  3361                           
  3362                           	psect	text19
  3363   001C8E                     __ptext19:
  3364                           	callstack 0
  3365   001C8E                     _LCD_setline:
  3366                           	callstack 26
  3367                           
  3368                           ;incstack = 0
  3369                           ;LCD_setline@line stored from wreg
  3370   001C8E  6E04               	movwf	LCD_setline@line^0,c
  3371   001C90                     
  3372                           ;LCD.c: 120: void LCD_setline (char line);LCD.c: 121: {;LCD.c: 124:     if (line == 2){
  3373   001C90  0E02               	movlw	2
  3374   001C92  1804               	xorwf	LCD_setline@line^0,w,c
  3375   001C94  A4D8               	btfss	status,2,c
  3376   001C96  EF4F  F00E         	goto	u1901
  3377   001C9A  EF51  F00E         	goto	u1900
  3378   001C9E                     u1901:
  3379   001C9E  EF56  F00E         	goto	l2288
  3380   001CA2                     u1900:
  3381   001CA2                     
  3382                           ;LCD.c: 125:         LCD_sendbyte(0xC0,0);
  3383   001CA2  0E00               	movlw	0
  3384   001CA4  6E02               	movwf	LCD_sendbyte@type^0,c
  3385   001CA6  0EC0               	movlw	192
  3386   001CA8  ECD5  F00E         	call	_LCD_sendbyte
  3387   001CAC                     l2288:
  3388                           
  3389                           ;LCD.c: 128:     if (line==1){
  3390   001CAC  0404               	decf	LCD_setline@line^0,w,c
  3391   001CAE  A4D8               	btfss	status,2,c
  3392   001CB0  EF5C  F00E         	goto	u1911
  3393   001CB4  EF5E  F00E         	goto	u1910
  3394   001CB8                     u1911:
  3395   001CB8  EF63  F00E         	goto	l300
  3396   001CBC                     u1910:
  3397   001CBC                     
  3398                           ;LCD.c: 129:         LCD_sendbyte(0x80,0);
  3399   001CBC  0E00               	movlw	0
  3400   001CBE  6E02               	movwf	LCD_sendbyte@type^0,c
  3401   001CC0  0E80               	movlw	128
  3402   001CC2  ECD5  F00E         	call	_LCD_sendbyte
  3403   001CC6                     l300:
  3404   001CC6  0012               	return		;funcret
  3405   001CC8                     __end_of_LCD_setline:
  3406                           	callstack 0
  3407                           
  3408 ;; *************** function _LCD_sendstring *****************
  3409 ;; Defined at:
  3410 ;;		line 136 in file "LCD.c"
  3411 ;; Parameters:    Size  Location     Type
  3412 ;;  string          1    3[COMRAM] PTR unsigned char 
  3413 ;;		 -> main@buf(20), 
  3414 ;; Auto vars:     Size  Location     Type
  3415 ;;		None
  3416 ;; Return value:  Size  Location     Type
  3417 ;;                  1    wreg      void 
  3418 ;; Registers used:
  3419 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3420 ;; Tracked objects:
  3421 ;;		On entry : 0/0
  3422 ;;		On exit  : 0/0
  3423 ;;		Unchanged: 0/0
  3424 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3425 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3426 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3427 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3428 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3429 ;;Total ram usage:        1 bytes
  3430 ;; Hardware stack levels used: 1
  3431 ;; Hardware stack levels required when called: 4
  3432 ;; This function calls:
  3433 ;;		_LCD_sendbyte
  3434 ;; This function is called by:
  3435 ;;		_main
  3436 ;;		_ADC2String
  3437 ;; This function uses a non-reentrant model
  3438 ;;
  3439                           
  3440                           	psect	text20
  3441   001D30                     __ptext20:
  3442                           	callstack 0
  3443   001D30                     _LCD_sendstring:
  3444                           	callstack 26
  3445   001D30                     
  3446                           ;LCD.c: 136: void LCD_sendstring(char *string);LCD.c: 137: {;LCD.c: 139:     while(*stri
      +                          ng != 0){
  3447   001D30  EFA3  F00E         	goto	l2310
  3448   001D34                     l2306:
  3449                           
  3450                           ;LCD.c: 140:   LCD_sendbyte(*string++,1);
  3451   001D34  0E01               	movlw	1
  3452   001D36  6E02               	movwf	LCD_sendbyte@type^0,c
  3453   001D38  5004               	movf	LCD_sendstring@string^0,w,c
  3454   001D3A  6ED9               	movwf	fsr2l,c
  3455   001D3C  6ADA               	clrf	fsr2h,c
  3456   001D3E  50DF               	movf	indf2,w,c
  3457   001D40  ECD5  F00E         	call	_LCD_sendbyte
  3458   001D44  2A04               	incf	LCD_sendstring@string^0,f,c
  3459   001D46                     l2310:
  3460                           
  3461                           ;LCD.c: 139:     while(*string != 0){
  3462   001D46  5004               	movf	LCD_sendstring@string^0,w,c
  3463   001D48  6ED9               	movwf	fsr2l,c
  3464   001D4A  6ADA               	clrf	fsr2h,c
  3465   001D4C  50DF               	movf	indf2,w,c
  3466   001D4E  A4D8               	btfss	status,2,c
  3467   001D50  EFAC  F00E         	goto	u1921
  3468   001D54  EFAE  F00E         	goto	u1920
  3469   001D58                     u1921:
  3470   001D58  EF9A  F00E         	goto	l2306
  3471   001D5C                     u1920:
  3472   001D5C  0012               	return		;funcret
  3473   001D5E                     __end_of_LCD_sendstring:
  3474                           	callstack 0
  3475                           
  3476 ;; *************** function _LCD_Init *****************
  3477 ;; Defined at:
  3478 ;;		line 57 in file "LCD.c"
  3479 ;; Parameters:    Size  Location     Type
  3480 ;;		None
  3481 ;; Auto vars:     Size  Location     Type
  3482 ;;		None
  3483 ;; Return value:  Size  Location     Type
  3484 ;;                  1    wreg      void 
  3485 ;; Registers used:
  3486 ;;		wreg, status,2, status,0, cstack
  3487 ;; Tracked objects:
  3488 ;;		On entry : 0/0
  3489 ;;		On exit  : 0/0
  3490 ;;		Unchanged: 0/0
  3491 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3492 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3493 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3494 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3495 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3496 ;;Total ram usage:        2 bytes
  3497 ;; Hardware stack levels used: 1
  3498 ;; Hardware stack levels required when called: 4
  3499 ;; This function calls:
  3500 ;;		_LCD_sendbyte
  3501 ;;		_LCD_sendnibble
  3502 ;; This function is called by:
  3503 ;;		_main
  3504 ;; This function uses a non-reentrant model
  3505 ;;
  3506                           
  3507                           	psect	text21
  3508   00162A                     __ptext21:
  3509                           	callstack 0
  3510   00162A                     _LCD_Init:
  3511                           	callstack 26
  3512   00162A                     
  3513                           ;LCD.c: 69:     TRISBbits.TRISB3 = 0;
  3514   00162A  9682               	bcf	130,3,c	;volatile
  3515                           
  3516                           ;LCD.c: 71:     LATBbits.LATB3 = 0;
  3517   00162C  967A               	bcf	122,3,c	;volatile
  3518                           
  3519                           ;LCD.c: 73:     TRISBbits.TRISB2 = 0;
  3520   00162E  9482               	bcf	130,2,c	;volatile
  3521                           
  3522                           ;LCD.c: 75:     LATBbits.LATB2 = 0;
  3523   001630  947A               	bcf	122,2,c	;volatile
  3524                           
  3525                           ;LCD.c: 77:     TRISEbits.TRISE3 = 0;
  3526   001632  9685               	bcf	133,3,c	;volatile
  3527                           
  3528                           ;LCD.c: 79:     LATEbits.LATE3 = 0;
  3529   001634  967D               	bcf	125,3,c	;volatile
  3530                           
  3531                           ;LCD.c: 81:     TRISEbits.TRISE1 = 0;
  3532   001636  9285               	bcf	133,1,c	;volatile
  3533                           
  3534                           ;LCD.c: 83:     LATEbits.LATE1 = 0;
  3535   001638  927D               	bcf	125,1,c	;volatile
  3536                           
  3537                           ;LCD.c: 85:     TRISCbits.TRISC2 = 0;
  3538   00163A  9483               	bcf	131,2,c	;volatile
  3539                           
  3540                           ;LCD.c: 86:     LATCbits.LATC2 = 0;
  3541   00163C  947B               	bcf	123,2,c	;volatile
  3542                           
  3543                           ;LCD.c: 88:     TRISCbits.TRISC6 = 0;
  3544   00163E  9C83               	bcf	131,6,c	;volatile
  3545                           
  3546                           ;LCD.c: 89:     LATCbits.LATC6 = 0;
  3547   001640  9C7B               	bcf	123,6,c	;volatile
  3548   001642                     
  3549                           ;LCD.c: 91:     _delay((unsigned long)((150)*(64000000/4000.0)));
  3550   001642  0E0D               	movlw	13
  3551   001644  6E05               	movwf	(??_LCD_Init+1)^0,c
  3552   001646  0E2D               	movlw	45
  3553   001648  6E04               	movwf	??_LCD_Init^0,c
  3554   00164A  0ED8               	movlw	216
  3555   00164C                     u2337:
  3556   00164C  2EE8               	decfsz	wreg,f,c
  3557   00164E  D7FE               	bra	u2337
  3558   001650  2E04               	decfsz	??_LCD_Init^0,f,c
  3559   001652  D7FC               	bra	u2337
  3560   001654  2E05               	decfsz	(??_LCD_Init+1)^0,f,c
  3561   001656  D7FA               	bra	u2337
  3562   001658                     
  3563                           ;LCD.c: 92:     LCD_sendnibble(0b0011);
  3564   001658  0E03               	movlw	3
  3565   00165A  ECB4  F00D         	call	_LCD_sendnibble
  3566   00165E                     
  3567                           ;LCD.c: 93:     _delay((unsigned long)((5)*(64000000/4000.0)));
  3568   00165E  0E68               	movlw	104
  3569   001660  6E04               	movwf	??_LCD_Init^0,c
  3570   001662  0EE4               	movlw	228
  3571   001664                     u2347:
  3572   001664  2EE8               	decfsz	wreg,f,c
  3573   001666  D7FE               	bra	u2347
  3574   001668  2E04               	decfsz	??_LCD_Init^0,f,c
  3575   00166A  D7FC               	bra	u2347
  3576   00166C  D000               	nop2	
  3577                           
  3578                           ;LCD.c: 94:     LCD_sendnibble(0b0011);
  3579   00166E  0E03               	movlw	3
  3580   001670  ECB4  F00D         	call	_LCD_sendnibble
  3581   001674                     
  3582                           ;LCD.c: 95:     _delay((unsigned long)((150)*(64000000/4000000.0)));
  3583   001674  0E04               	movlw	4
  3584   001676  6E04               	movwf	??_LCD_Init^0,c
  3585   001678  0E1C               	movlw	28
  3586   00167A                     u2357:
  3587   00167A  2EE8               	decfsz	wreg,f,c
  3588   00167C  D7FE               	bra	u2357
  3589   00167E  2E04               	decfsz	??_LCD_Init^0,f,c
  3590   001680  D7FC               	bra	u2357
  3591   001682  D000               	nop2	
  3592   001684                     
  3593                           ;LCD.c: 96:     LCD_sendnibble(0b0011);
  3594   001684  0E03               	movlw	3
  3595   001686  ECB4  F00D         	call	_LCD_sendnibble
  3596                           
  3597                           ;LCD.c: 97:     _delay((unsigned long)((150)*(64000000/4000000.0)));
  3598   00168A  0E04               	movlw	4
  3599   00168C  6E04               	movwf	??_LCD_Init^0,c
  3600   00168E  0E1C               	movlw	28
  3601   001690                     u2367:
  3602   001690  2EE8               	decfsz	wreg,f,c
  3603   001692  D7FE               	bra	u2367
  3604   001694  2E04               	decfsz	??_LCD_Init^0,f,c
  3605   001696  D7FC               	bra	u2367
  3606   001698  D000               	nop2	
  3607   00169A                     
  3608                           ;LCD.c: 98:     LCD_sendnibble(0b0010);
  3609   00169A  0E02               	movlw	2
  3610   00169C  ECB4  F00D         	call	_LCD_sendnibble
  3611   0016A0                     
  3612                           ;LCD.c: 99:     _delay((unsigned long)((150)*(64000000/4000000.0)));
  3613   0016A0  0E04               	movlw	4
  3614   0016A2  6E04               	movwf	??_LCD_Init^0,c
  3615   0016A4  0E1C               	movlw	28
  3616   0016A6                     u2377:
  3617   0016A6  2EE8               	decfsz	wreg,f,c
  3618   0016A8  D7FE               	bra	u2377
  3619   0016AA  2E04               	decfsz	??_LCD_Init^0,f,c
  3620   0016AC  D7FC               	bra	u2377
  3621   0016AE  D000               	nop2	
  3622   0016B0                     
  3623                           ;LCD.c: 100:     LCD_sendbyte(0b00101100,0);
  3624   0016B0  0E00               	movlw	0
  3625   0016B2  6E02               	movwf	LCD_sendbyte@type^0,c
  3626   0016B4  0E2C               	movlw	44
  3627   0016B6  ECD5  F00E         	call	_LCD_sendbyte
  3628   0016BA                     
  3629                           ;LCD.c: 101:     _delay((unsigned long)((100)*(64000000/4000000.0)));
  3630   0016BA  0EE4               	movlw	228
  3631   0016BC                     u2387:
  3632   0016BC  D000               	nop2	
  3633   0016BE  D000               	nop2	
  3634   0016C0  2EE8               	decfsz	wreg,f,c
  3635   0016C2  D7FC               	bra	u2387
  3636   0016C4  D000               	nop2	
  3637   0016C6  D000               	nop2	
  3638   0016C8                     
  3639                           ;LCD.c: 102:     LCD_sendbyte(0b00001000,0);
  3640   0016C8  0E00               	movlw	0
  3641   0016CA  6E02               	movwf	LCD_sendbyte@type^0,c
  3642   0016CC  0E08               	movlw	8
  3643   0016CE  ECD5  F00E         	call	_LCD_sendbyte
  3644   0016D2                     
  3645                           ;LCD.c: 103:     _delay((unsigned long)((100)*(64000000/4000.0)));
  3646   0016D2  0E09               	movlw	9
  3647   0016D4  6E05               	movwf	(??_LCD_Init+1)^0,c
  3648   0016D6  0E1E               	movlw	30
  3649   0016D8  6E04               	movwf	??_LCD_Init^0,c
  3650   0016DA  0EE4               	movlw	228
  3651   0016DC                     u2397:
  3652   0016DC  2EE8               	decfsz	wreg,f,c
  3653   0016DE  D7FE               	bra	u2397
  3654   0016E0  2E04               	decfsz	??_LCD_Init^0,f,c
  3655   0016E2  D7FC               	bra	u2397
  3656   0016E4  2E05               	decfsz	(??_LCD_Init+1)^0,f,c
  3657   0016E6  D7FA               	bra	u2397
  3658   0016E8  D000               	nop2	
  3659   0016EA                     
  3660                           ;LCD.c: 104:     LCD_sendbyte(0b00000001,0);
  3661   0016EA  0E00               	movlw	0
  3662   0016EC  6E02               	movwf	LCD_sendbyte@type^0,c
  3663   0016EE  0E01               	movlw	1
  3664   0016F0  ECD5  F00E         	call	_LCD_sendbyte
  3665   0016F4                     
  3666                           ;LCD.c: 105:     _delay((unsigned long)((5)*(64000000/4000.0)));
  3667   0016F4  0E68               	movlw	104
  3668   0016F6  6E04               	movwf	??_LCD_Init^0,c
  3669   0016F8  0EE4               	movlw	228
  3670   0016FA                     u2407:
  3671   0016FA  2EE8               	decfsz	wreg,f,c
  3672   0016FC  D7FE               	bra	u2407
  3673   0016FE  2E04               	decfsz	??_LCD_Init^0,f,c
  3674   001700  D7FC               	bra	u2407
  3675   001702  D000               	nop2	
  3676   001704                     
  3677                           ;LCD.c: 106:     LCD_sendbyte(0b00000110,0);
  3678   001704  0E00               	movlw	0
  3679   001706  6E02               	movwf	LCD_sendbyte@type^0,c
  3680   001708  0E06               	movlw	6
  3681   00170A  ECD5  F00E         	call	_LCD_sendbyte
  3682   00170E                     
  3683                           ;LCD.c: 107:     _delay((unsigned long)((100)*(64000000/4000.0)));
  3684   00170E  0E09               	movlw	9
  3685   001710  6E05               	movwf	(??_LCD_Init+1)^0,c
  3686   001712  0E1E               	movlw	30
  3687   001714  6E04               	movwf	??_LCD_Init^0,c
  3688   001716  0EE4               	movlw	228
  3689   001718                     u2417:
  3690   001718  2EE8               	decfsz	wreg,f,c
  3691   00171A  D7FE               	bra	u2417
  3692   00171C  2E04               	decfsz	??_LCD_Init^0,f,c
  3693   00171E  D7FC               	bra	u2417
  3694   001720  2E05               	decfsz	(??_LCD_Init+1)^0,f,c
  3695   001722  D7FA               	bra	u2417
  3696   001724  D000               	nop2	
  3697   001726                     
  3698                           ;LCD.c: 108:     LCD_sendbyte(0b00001100,0);
  3699   001726  0E00               	movlw	0
  3700   001728  6E02               	movwf	LCD_sendbyte@type^0,c
  3701   00172A  0E0C               	movlw	12
  3702   00172C  ECD5  F00E         	call	_LCD_sendbyte
  3703   001730                     
  3704                           ;LCD.c: 109:     _delay((unsigned long)((100)*(64000000/4000.0)));
  3705   001730  0E09               	movlw	9
  3706   001732  6E05               	movwf	(??_LCD_Init+1)^0,c
  3707   001734  0E1E               	movlw	30
  3708   001736  6E04               	movwf	??_LCD_Init^0,c
  3709   001738  0EE4               	movlw	228
  3710   00173A                     u2427:
  3711   00173A  2EE8               	decfsz	wreg,f,c
  3712   00173C  D7FE               	bra	u2427
  3713   00173E  2E04               	decfsz	??_LCD_Init^0,f,c
  3714   001740  D7FC               	bra	u2427
  3715   001742  2E05               	decfsz	(??_LCD_Init+1)^0,f,c
  3716   001744  D7FA               	bra	u2427
  3717   001746  D000               	nop2	
  3718   001748  0012               	return		;funcret
  3719   00174A                     __end_of_LCD_Init:
  3720                           	callstack 0
  3721                           
  3722 ;; *************** function _LCD_sendbyte *****************
  3723 ;; Defined at:
  3724 ;;		line 40 in file "LCD.c"
  3725 ;; Parameters:    Size  Location     Type
  3726 ;;  Byte            1    wreg     unsigned char 
  3727 ;;  type            1    1[COMRAM] unsigned char 
  3728 ;; Auto vars:     Size  Location     Type
  3729 ;;  Byte            1    2[COMRAM] unsigned char 
  3730 ;; Return value:  Size  Location     Type
  3731 ;;                  1    wreg      void 
  3732 ;; Registers used:
  3733 ;;		wreg, status,2, status,0, cstack
  3734 ;; Tracked objects:
  3735 ;;		On entry : 0/0
  3736 ;;		On exit  : 0/0
  3737 ;;		Unchanged: 0/0
  3738 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3739 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3740 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3741 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3742 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3743 ;;Total ram usage:        2 bytes
  3744 ;; Hardware stack levels used: 1
  3745 ;; Hardware stack levels required when called: 3
  3746 ;; This function calls:
  3747 ;;		_LCD_sendnibble
  3748 ;; This function is called by:
  3749 ;;		_LCD_Init
  3750 ;;		_LCD_setline
  3751 ;;		_LCD_sendstring
  3752 ;;		_LCD_scroll
  3753 ;; This function uses a non-reentrant model
  3754 ;;
  3755                           
  3756                           	psect	text22
  3757   001DAA                     __ptext22:
  3758                           	callstack 0
  3759   001DAA                     _LCD_sendbyte:
  3760                           	callstack 26
  3761                           
  3762                           ;incstack = 0
  3763                           ;LCD_sendbyte@Byte stored from wreg
  3764   001DAA  6E03               	movwf	LCD_sendbyte@Byte^0,c
  3765   001DAC                     
  3766                           ;LCD.c: 40: void LCD_sendbyte(unsigned char Byte, char type);LCD.c: 41: {;LCD.c: 42:    
      +                           LATCbits.LATC6 = type;
  3767   001DAC  B002               	btfsc	LCD_sendbyte@type^0,0,c
  3768   001DAE  D002               	bra	u1655
  3769   001DB0  9C7B               	bcf	123,6,c	;volatile
  3770   001DB2  D001               	bra	u1656
  3771   001DB4                     u1655:
  3772   001DB4  8C7B               	bsf	123,6,c	;volatile
  3773   001DB6                     u1656:
  3774   001DB6                     
  3775                           ;LCD.c: 44:     LCD_sendnibble(Byte>>4);
  3776   001DB6  3803               	swapf	LCD_sendbyte@Byte^0,w,c
  3777   001DB8  0B0F               	andlw	15
  3778   001DBA  ECB4  F00D         	call	_LCD_sendnibble
  3779   001DBE                     
  3780                           ;LCD.c: 45:     LCD_sendnibble(Byte);
  3781   001DBE  5003               	movf	LCD_sendbyte@Byte^0,w,c
  3782   001DC0  ECB4  F00D         	call	_LCD_sendnibble
  3783   001DC4                     
  3784                           ;LCD.c: 51:     _delay((unsigned long)((50)*(64000000/4000000.0)));
  3785   001DC4  0EA0               	movlw	160
  3786   001DC6                     u2437:
  3787   001DC6  D000               	nop2	
  3788   001DC8  2EE8               	decfsz	wreg,f,c
  3789   001DCA  D7FD               	bra	u2437
  3790   001DCC  0012               	return		;funcret
  3791   001DCE                     __end_of_LCD_sendbyte:
  3792                           	callstack 0
  3793                           
  3794 ;; *************** function _LCD_sendnibble *****************
  3795 ;; Defined at:
  3796 ;;		line 22 in file "LCD.c"
  3797 ;; Parameters:    Size  Location     Type
  3798 ;;  number          1    wreg     unsigned char 
  3799 ;; Auto vars:     Size  Location     Type
  3800 ;;  number          1    0[COMRAM] unsigned char 
  3801 ;; Return value:  Size  Location     Type
  3802 ;;                  1    wreg      void 
  3803 ;; Registers used:
  3804 ;;		wreg, cstack
  3805 ;; Tracked objects:
  3806 ;;		On entry : 0/0
  3807 ;;		On exit  : 0/0
  3808 ;;		Unchanged: 0/0
  3809 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3810 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3811 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3812 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3813 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3814 ;;Total ram usage:        1 bytes
  3815 ;; Hardware stack levels used: 1
  3816 ;; Hardware stack levels required when called: 2
  3817 ;; This function calls:
  3818 ;;		_LCD_E_TOG
  3819 ;; This function is called by:
  3820 ;;		_LCD_sendbyte
  3821 ;;		_LCD_Init
  3822 ;; This function uses a non-reentrant model
  3823 ;;
  3824                           
  3825                           	psect	text23
  3826   001B68                     __ptext23:
  3827                           	callstack 0
  3828   001B68                     _LCD_sendnibble:
  3829                           	callstack 26
  3830                           
  3831                           ;incstack = 0
  3832                           ;LCD_sendnibble@number stored from wreg
  3833   001B68  6E01               	movwf	LCD_sendnibble@number^0,c
  3834   001B6A                     
  3835                           ;LCD.c: 22: void LCD_sendnibble(unsigned char number);LCD.c: 23: {;LCD.c: 24:     if (nu
      +                          mber & 0b0001) {LATBbits.LATB3=1;} else {LATBbits.LATB3=0;}
  3836   001B6A  A001               	btfss	LCD_sendnibble@number^0,0,c
  3837   001B6C  EFBA  F00D         	goto	u1561
  3838   001B70  EFBC  F00D         	goto	u1560
  3839   001B74                     u1561:
  3840   001B74  EFBF  F00D         	goto	l281
  3841   001B78                     u1560:
  3842   001B78  867A               	bsf	122,3,c	;volatile
  3843   001B7A  EFC0  F00D         	goto	l2054
  3844   001B7E                     l281:
  3845   001B7E  967A               	bcf	122,3,c	;volatile
  3846   001B80                     l2054:
  3847                           
  3848                           ;LCD.c: 25:     if (number & 0b0010) {LATBbits.LATB2=1;} else {LATBbits.LATB2=0;}
  3849   001B80  A201               	btfss	LCD_sendnibble@number^0,1,c
  3850   001B82  EFC5  F00D         	goto	u1571
  3851   001B86  EFC7  F00D         	goto	u1570
  3852   001B8A                     u1571:
  3853   001B8A  EFCA  F00D         	goto	l283
  3854   001B8E                     u1570:
  3855   001B8E  847A               	bsf	122,2,c	;volatile
  3856   001B90  EFCB  F00D         	goto	l2058
  3857   001B94                     l283:
  3858   001B94  947A               	bcf	122,2,c	;volatile
  3859   001B96                     l2058:
  3860                           
  3861                           ;LCD.c: 26:     if (number & 0b0100) {LATEbits.LATE3=1;} else {LATEbits.LATE3=0;}
  3862   001B96  A401               	btfss	LCD_sendnibble@number^0,2,c
  3863   001B98  EFD0  F00D         	goto	u1581
  3864   001B9C  EFD2  F00D         	goto	u1580
  3865   001BA0                     u1581:
  3866   001BA0  EFD5  F00D         	goto	l285
  3867   001BA4                     u1580:
  3868   001BA4  867D               	bsf	125,3,c	;volatile
  3869   001BA6  EFD6  F00D         	goto	l2062
  3870   001BAA                     l285:
  3871   001BAA  967D               	bcf	125,3,c	;volatile
  3872   001BAC                     l2062:
  3873                           
  3874                           ;LCD.c: 27:     if (number & 0b1000) {LATEbits.LATE1=1;} else {LATEbits.LATE1=0;}
  3875   001BAC  A601               	btfss	LCD_sendnibble@number^0,3,c
  3876   001BAE  EFDB  F00D         	goto	u1591
  3877   001BB2  EFDD  F00D         	goto	u1590
  3878   001BB6                     u1591:
  3879   001BB6  EFE0  F00D         	goto	l287
  3880   001BBA                     u1590:
  3881   001BBA  827D               	bsf	125,1,c	;volatile
  3882   001BBC  EFE1  F00D         	goto	l2066
  3883   001BC0                     l287:
  3884   001BC0  927D               	bcf	125,1,c	;volatile
  3885   001BC2                     l2066:
  3886                           
  3887                           ;LCD.c: 31:     LCD_E_TOG();
  3888   001BC2  EC10  F00F         	call	_LCD_E_TOG	;wreg free
  3889   001BC6                     
  3890                           ;LCD.c: 32:     _delay((unsigned long)((5)*(64000000/4000000.0)));
  3891   001BC6  0E1A               	movlw	26
  3892   001BC8                     u2447:
  3893   001BC8  2EE8               	decfsz	wreg,f,c
  3894   001BCA  D7FE               	bra	u2447
  3895   001BCC  D000               	nop2	
  3896   001BCE  0012               	return		;funcret
  3897   001BD0                     __end_of_LCD_sendnibble:
  3898                           	callstack 0
  3899                           
  3900 ;; *************** function _LCD_E_TOG *****************
  3901 ;; Defined at:
  3902 ;;		line 10 in file "LCD.c"
  3903 ;; Parameters:    Size  Location     Type
  3904 ;;		None
  3905 ;; Auto vars:     Size  Location     Type
  3906 ;;		None
  3907 ;; Return value:  Size  Location     Type
  3908 ;;                  1    wreg      void 
  3909 ;; Registers used:
  3910 ;;		wreg
  3911 ;; Tracked objects:
  3912 ;;		On entry : 0/0
  3913 ;;		On exit  : 0/0
  3914 ;;		Unchanged: 0/0
  3915 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3916 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3917 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3918 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3919 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3920 ;;Total ram usage:        0 bytes
  3921 ;; Hardware stack levels used: 1
  3922 ;; Hardware stack levels required when called: 1
  3923 ;; This function calls:
  3924 ;;		Nothing
  3925 ;; This function is called by:
  3926 ;;		_LCD_sendnibble
  3927 ;; This function uses a non-reentrant model
  3928 ;;
  3929                           
  3930                           	psect	text24
  3931   001E20                     __ptext24:
  3932                           	callstack 0
  3933   001E20                     _LCD_E_TOG:
  3934                           	callstack 26
  3935   001E20                     
  3936                           ;LCD.c: 13:      LATCbits.LATC2 = 1;
  3937   001E20  847B               	bsf	123,2,c	;volatile
  3938   001E22                     
  3939                           ;LCD.c: 14:  _delay((unsigned long)((2)*(64000000/4000000.0)));
  3940   001E22  0E0A               	movlw	10
  3941   001E24                     u2457:
  3942   001E24  2EE8               	decfsz	wreg,f,c
  3943   001E26  D7FE               	bra	u2457
  3944   001E28  D000               	nop2	
  3945   001E2A                     
  3946                           ;LCD.c: 15:      LATCbits.LATC2 = 0;
  3947   001E2A  947B               	bcf	123,2,c	;volatile
  3948   001E2C  0012               	return		;funcret
  3949   001E2E                     __end_of_LCD_E_TOG:
  3950                           	callstack 0
  3951                           
  3952 ;; *************** function _Interrupts_init *****************
  3953 ;; Defined at:
  3954 ;;		line 9 in file "interrupts.c"
  3955 ;; Parameters:    Size  Location     Type
  3956 ;;		None
  3957 ;; Auto vars:     Size  Location     Type
  3958 ;;		None
  3959 ;; Return value:  Size  Location     Type
  3960 ;;                  1    wreg      void 
  3961 ;; Registers used:
  3962 ;;		None
  3963 ;; Tracked objects:
  3964 ;;		On entry : 0/0
  3965 ;;		On exit  : 0/0
  3966 ;;		Unchanged: 0/0
  3967 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3968 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3969 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3970 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3971 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3972 ;;Total ram usage:        0 bytes
  3973 ;; Hardware stack levels used: 1
  3974 ;; Hardware stack levels required when called: 1
  3975 ;; This function calls:
  3976 ;;		Nothing
  3977 ;; This function is called by:
  3978 ;;		_main
  3979 ;; This function uses a non-reentrant model
  3980 ;;
  3981                           
  3982                           	psect	text25
  3983   001E2E                     __ptext25:
  3984                           	callstack 0
  3985   001E2E                     _Interrupts_init:
  3986                           	callstack 29
  3987   001E2E                     
  3988                           ;interrupts.c: 15:   INTCONbits.PEIE = 1;
  3989   001E2E  8CF2               	bsf	242,6,c	;volatile
  3990                           
  3991                           ;interrupts.c: 19:     PIE0bits.TMR0IE = 1;
  3992   001E30  010E               	movlb	14	; () banked
  3993   001E32  8B29               	bsf	41,5,b	;volatile
  3994                           
  3995                           ;interrupts.c: 20:     PIR0bits.TMR0IF = 0;
  3996   001E34  9B33               	bcf	51,5,b	;volatile
  3997                           
  3998                           ;interrupts.c: 21:     IPR0bits.TMR0IP = 1;
  3999   001E36  8B1F               	bsf	31,5,b	;volatile
  4000                           
  4001                           ;interrupts.c: 24:     INTCONbits.GIE=1;
  4002   001E38  8EF2               	bsf	242,7,c	;volatile
  4003   001E3A                     
  4004                           ; BSR set to: 14
  4005   001E3A  0012               	return		;funcret
  4006   001E3C                     __end_of_Interrupts_init:
  4007                           	callstack 0
  4008                           
  4009 ;; *************** function _ADC_init *****************
  4010 ;; Defined at:
  4011 ;;		line 9 in file "ADC.c"
  4012 ;; Parameters:    Size  Location     Type
  4013 ;;		None
  4014 ;; Auto vars:     Size  Location     Type
  4015 ;;		None
  4016 ;; Return value:  Size  Location     Type
  4017 ;;                  1    wreg      void 
  4018 ;; Registers used:
  4019 ;;		wreg, status,2
  4020 ;; Tracked objects:
  4021 ;;		On entry : 0/0
  4022 ;;		On exit  : 0/0
  4023 ;;		Unchanged: 0/0
  4024 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4025 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4026 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4027 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4028 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4029 ;;Total ram usage:        0 bytes
  4030 ;; Hardware stack levels used: 1
  4031 ;; Hardware stack levels required when called: 1
  4032 ;; This function calls:
  4033 ;;		Nothing
  4034 ;; This function is called by:
  4035 ;;		_main
  4036 ;; This function uses a non-reentrant model
  4037 ;;
  4038                           
  4039                           	psect	text26
  4040   001DEE                     __ptext26:
  4041                           	callstack 0
  4042   001DEE                     _ADC_init:
  4043                           	callstack 29
  4044   001DEE                     
  4045                           ;ADC.c: 11:     TRISAbits.TRISA3=1;
  4046   001DEE  8681               	bsf	129,3,c	;volatile
  4047                           
  4048                           ;ADC.c: 12:     ANSELAbits.ANSELA3=1;
  4049   001DF0  010E               	movlb	14	; () banked
  4050   001DF2  8792               	bsf	146,3,b	;volatile
  4051                           
  4052                           ;ADC.c: 14:     ADREFbits.ADNREF = 0;
  4053   001DF4  010F               	movlb	15	; () banked
  4054   001DF6  9958               	bcf	88,4,b	;volatile
  4055   001DF8                     
  4056                           ; BSR set to: 15
  4057                           ;ADC.c: 15:     ADREFbits.ADPREF = 0b00;
  4058   001DF8  0EFC               	movlw	-4
  4059   001DFA  1758               	andwf	88,f,b	;volatile
  4060                           
  4061                           ;ADC.c: 16:     ADPCH=0b11;
  4062   001DFC  0E03               	movlw	3
  4063   001DFE  6F5F               	movwf	95,b	;volatile
  4064   001E00                     
  4065                           ; BSR set to: 15
  4066                           ;ADC.c: 17:     ADCON0bits.ADFM = 0;
  4067   001E00  9460               	bcf	96,2,c	;volatile
  4068   001E02                     
  4069                           ; BSR set to: 15
  4070                           ;ADC.c: 18:     ADCON0bits.ADCS = 1;
  4071   001E02  8860               	bsf	96,4,c	;volatile
  4072   001E04                     
  4073                           ; BSR set to: 15
  4074                           ;ADC.c: 19:     ADCON0bits.ADON = 1;
  4075   001E04  8E60               	bsf	96,7,c	;volatile
  4076   001E06                     
  4077                           ; BSR set to: 15
  4078   001E06  0012               	return		;funcret
  4079   001E08                     __end_of_ADC_init:
  4080                           	callstack 0
  4081                           
  4082 ;; *************** function _HighISR *****************
  4083 ;; Defined at:
  4084 ;;		line 31 in file "interrupts.c"
  4085 ;; Parameters:    Size  Location     Type
  4086 ;;		None
  4087 ;; Auto vars:     Size  Location     Type
  4088 ;;		None
  4089 ;; Return value:  Size  Location     Type
  4090 ;;                  1    wreg      void 
  4091 ;; Registers used:
  4092 ;;		wreg, status,2, status,0
  4093 ;; Tracked objects:
  4094 ;;		On entry : 0/0
  4095 ;;		On exit  : 0/0
  4096 ;;		Unchanged: 0/0
  4097 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4098 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4099 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4100 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4101 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4102 ;;Total ram usage:        0 bytes
  4103 ;; Hardware stack levels used: 1
  4104 ;; This function calls:
  4105 ;;		Nothing
  4106 ;; This function is called by:
  4107 ;;		Interrupt level 2
  4108 ;; This function uses a non-reentrant model
  4109 ;;
  4110                           
  4111                           	psect	intcode
  4112   000008                     __pintcode:
  4113                           	callstack 0
  4114   000008                     _HighISR:
  4115                           	callstack 22
  4116                           
  4117                           ; BSR set to: 15
  4118                           ;incstack = 0
  4119   000008  824B               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  4120   00000A                     
  4121                           ;interrupts.c: 35:     if(PIR0bits.TMR0IF){
  4122   00000A  010E               	movlb	14	; () banked
  4123   00000C  AB33               	btfss	51,5,b	;volatile
  4124   00000E  EF0B  F000         	goto	i2u197_41
  4125   000012  EF0D  F000         	goto	i2u197_40
  4126   000016                     i2u197_41:
  4127   000016  EF16  F000         	goto	i2l85
  4128   00001A                     i2u197_40:
  4129   00001A                     
  4130                           ; BSR set to: 14
  4131                           ;interrupts.c: 37:         TMR0H = 0b00001011;
  4132   00001A  0E0B               	movlw	11
  4133   00001C  6ED4               	movwf	212,c	;volatile
  4134                           
  4135                           ;interrupts.c: 38:         TMR0L = 0b11011100;
  4136   00001E  0EDC               	movlw	220
  4137   000020  6ED3               	movwf	211,c	;volatile
  4138   000022                     
  4139                           ; BSR set to: 14
  4140                           ;interrupts.c: 39:         GLOBALsecs++;
  4141   000022  0100               	movlb	0	; () banked
  4142   000024  4BA4               	infsnz	_GLOBALsecs& (0+255),f,b
  4143   000026  2BA5               	incf	(_GLOBALsecs+1)& (0+255),f,b
  4144   000028                     
  4145                           ; BSR set to: 0
  4146                           ;interrupts.c: 40:         PIR0bits.TMR0IF=0;
  4147   000028  010E               	movlb	14	; () banked
  4148   00002A  9B33               	bcf	51,5,b	;volatile
  4149   00002C                     i2l85:
  4150                           
  4151                           ; BSR set to: 14
  4152   00002C  924B               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  4153   00002E  0011               	retfie		f
  4154   000030                     __end_of_HighISR:
  4155                           	callstack 0
  4156                           
  4157                           	psect	rparam
  4158   000000                     
  4159                           	psect	temp
  4160   00004B                     btemp:
  4161                           	callstack 0
  4162   00004B                     	ds	1
  4163   000000                     int$flags	set	btemp
  4164   000000                     wtemp8	set	btemp+1
  4165   000000                     ttemp5	set	btemp+1
  4166   000000                     ttemp6	set	btemp+4
  4167   000000                     ttemp7	set	btemp+8
  4168                           
  4169                           	psect	config
  4170                           
  4171                           ;Config register CONFIG1L @ 0x300000
  4172                           ;	External Oscillator mode Selection bits
  4173                           ;	FEXTOSC = HS, HS (crystal oscillator) above 8 MHz; PFM set to high power
  4174                           ;	Power-up default value for COSC bits
  4175                           ;	RSTOSC = EXTOSC_4PLL, EXTOSC with 4x PLL, with EXTOSC operating per FEXTOSC bits
  4176   300000                     	org	3145728
  4177   300000  AA                 	db	170
  4178                           
  4179                           ;Config register CONFIG1H @ 0x300001
  4180                           ;	unspecified, using default values
  4181                           ;	Clock Out Enable bit
  4182                           ;	CLKOUTEN = 0x1, unprogrammed default
  4183                           ;	Clock Switch Enable bit
  4184                           ;	CSWEN = 0x1, unprogrammed default
  4185                           ;	Fail-Safe Clock Monitor Enable bit
  4186                           ;	FCMEN = 0x1, unprogrammed default
  4187   300001                     	org	3145729
  4188   300001  FF                 	db	255
  4189                           
  4190                           ;Config register CONFIG3L @ 0x300004
  4191                           ;	WDT Period Select bits
  4192                           ;	WDTCPS = 0x1F, unprogrammed default
  4193                           ;	WDT operating mode
  4194                           ;	WDTE = OFF, WDT Disabled
  4195   300004                     	org	3145732
  4196   300004  9F                 	db	159
  4197                           
  4198                           ;Config register CONFIG3H @ 0x300005
  4199                           ;	unspecified, using default values
  4200                           ;	WDT Window Select bits
  4201                           ;	WDTCWS = 0x7, unprogrammed default
  4202                           ;	WDT input clock selector
  4203                           ;	WDTCCS = 0x7, unprogrammed default
  4204   300005                     	org	3145733
  4205   300005  FF                 	db	255
  4206                           tosu	equ	0xFFF
  4207                           tosh	equ	0xFFE
  4208                           tosl	equ	0xFFD
  4209                           stkptr	equ	0xFFC
  4210                           pclatu	equ	0xFFB
  4211                           pclath	equ	0xFFA
  4212                           pcl	equ	0xFF9
  4213                           tblptru	equ	0xFF8
  4214                           tblptrh	equ	0xFF7
  4215                           tblptrl	equ	0xFF6
  4216                           tablat	equ	0xFF5
  4217                           prodh	equ	0xFF4
  4218                           prodl	equ	0xFF3
  4219                           indf0	equ	0xFEF
  4220                           postinc0	equ	0xFEE
  4221                           postdec0	equ	0xFED
  4222                           preinc0	equ	0xFEC
  4223                           plusw0	equ	0xFEB
  4224                           fsr0h	equ	0xFEA
  4225                           fsr0l	equ	0xFE9
  4226                           wreg	equ	0xFE8
  4227                           indf1	equ	0xFE7
  4228                           postinc1	equ	0xFE6
  4229                           postdec1	equ	0xFE5
  4230                           preinc1	equ	0xFE4
  4231                           plusw1	equ	0xFE3
  4232                           fsr1h	equ	0xFE2
  4233                           fsr1l	equ	0xFE1
  4234                           bsr	equ	0xFE0
  4235                           indf2	equ	0xFDF
  4236                           postinc2	equ	0xFDE
  4237                           postdec2	equ	0xFDD
  4238                           preinc2	equ	0xFDC
  4239                           plusw2	equ	0xFDB
  4240                           fsr2h	equ	0xFDA
  4241                           fsr2l	equ	0xFD9
  4242                           status	equ	0xFD8

Data Sizes:
    Strings     67
    Constant    0
    Data        24
    BSS         39
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     69      74
    BANK0           160     36      94
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          234      0       0

Pointer List with Targets:

    dtoa@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    f$.$buffer	PTR unsigned char  size(2) Largest target is 0

    f$.$source	PTR const unsigned char  size(2) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    fputc@fp$.$buffer	PTR unsigned char  size(2) Largest target is 0

    fputc@fp$.$source	PTR const unsigned char  size(2) Largest target is 0

    fputs@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    fputs@s	PTR const unsigned char  size(1) Largest target is 32
		 -> dbuf(BANK0[32]), 

    LCD_sendstring@string	PTR unsigned char  size(1) Largest target is 20
		 -> main@buf(BANK0[20]), 

    pad@buf	PTR unsigned char  size(1) Largest target is 32
		 -> dbuf(BANK0[32]), 

    pad@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    read_prec_or_width@ap	PTR PTR void [1] size(1) Largest target is 1
		 -> sprintf@ap(COMRAM[1]), 

    read_prec_or_width@fmt	PTR PTR const unsigned char  size(1) Largest target is 1
		 -> vfprintf@cfmt(COMRAM[1]), 

    S1793$buffer	PTR unsigned char  size(2) Largest target is 0

    S1793$source	PTR const unsigned char  size(2) Largest target is 0

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    sprintf@fmt	PTR const unsigned char  size(1) Largest target is 26
		 -> STR_1(CODE[26]), STR_2(CODE[20]), STR_3(CODE[21]), 

    sprintf@s	PTR unsigned char  size(1) Largest target is 20
		 -> main@buf(BANK0[20]), 

    UpdateClock@days	PTR int  size(1) Largest target is 14
		 -> main@clock(BANK0[14]), 

    UpdateClock@DoW	PTR int  size(1) Largest target is 14
		 -> main@clock(BANK0[14]), 

    UpdateClock@hours	PTR int  size(1) Largest target is 14
		 -> main@clock(BANK0[14]), 

    UpdateClock@minutes	PTR int  size(1) Largest target is 14
		 -> main@clock(BANK0[14]), 

    UpdateClock@months	PTR int  size(1) Largest target is 14
		 -> main@clock(BANK0[14]), 

    UpdateClock@seconds	PTR int  size(1) Largest target is 2
		 -> GLOBALsecs(BANK0[2]), 

    UpdateClock@years	PTR int  size(1) Largest target is 14
		 -> main@clock(BANK0[14]), 

    vfpfcnvrt@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(COMRAM[1]), 

    vfpfcnvrt@cp	PTR unsigned char  size(1) Largest target is 26
		 -> STR_1(CODE[26]), STR_2(CODE[20]), STR_3(CODE[21]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(1) Largest target is 1
		 -> vfprintf@cfmt(COMRAM[1]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    vfprintf@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(COMRAM[1]), 

    vfprintf@cfmt	PTR unsigned char  size(1) Largest target is 26
		 -> STR_1(CODE[26]), STR_2(CODE[20]), STR_3(CODE[21]), 

    vfprintf@fmt	PTR const unsigned char  size(1) Largest target is 26
		 -> STR_1(CODE[26]), STR_2(CODE[20]), STR_3(CODE[21]), 

    vfprintf@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 


Critical Paths under _main in COMRAM

    _main->_sprintf
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_dtoa
    _read_prec_or_width->___wmul
    _dtoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _abs->___awmod
    _UpdateClock->___awmod
    _LCD_setline->_LCD_sendbyte
    _LCD_sendstring->_LCD_sendbyte
    _LCD_Init->_LCD_sendbyte
    _LCD_sendbyte->_LCD_sendnibble

Critical Paths under _HighISR in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _HighISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _HighISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _HighISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _HighISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _HighISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _HighISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _HighISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _HighISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _HighISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _HighISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _HighISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _HighISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _HighISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _HighISR in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                36    36      0   16437
                                              0 BANK0     36    36      0
                           _ADC_init
                    _Interrupts_init
                           _LCD_Init
                     _LCD_sendstring
                        _LCD_setline
                  _LEDarray_disp_bin
                      _LEDarray_init
                        _Timer0_init
                        _UpdateClock
                         _clock_init
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             25    15     10   10262
                                             46 COMRAM    23    13     10
                           _vfprintf
 ---------------------------------------------------------------------------------
 (2) _vfprintf                                             4     1      3    9605
                                             42 COMRAM     4     1      3
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (3) _vfpfcnvrt                                           12     9      3    9246
                                             31 COMRAM    11     8      3
                               _dtoa
                              _fputc
                 _read_prec_or_width
 ---------------------------------------------------------------------------------
 (4) _read_prec_or_width                                   5     3      2    3835
                                              6 COMRAM     5     3      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4    3503
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) _dtoa                                                11     8      3    4079
                                             20 COMRAM    11     8      3
                            ___awdiv
                            ___awmod
                                _abs
                                _pad
 ---------------------------------------------------------------------------------
 (5) _pad                                                  7     3      4    2172
                                             13 COMRAM     7     3      4
                              _fputc
                              _fputs
 ---------------------------------------------------------------------------------
 (6) _fputs                                                5     3      2    1083
                                              8 COMRAM     5     3      2
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _fputc                                                8     5      3     682
                                              0 COMRAM     8     5      3
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (5) _abs                                                  4     2      2     142
                                              6 COMRAM     4     2      2
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (5) ___awdiv                                              8     4      4     452
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (1) _clock_init                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _UpdateClock                                         39    30      9    2268
                                              6 COMRAM    39    30      9
                            ___awmod
 ---------------------------------------------------------------------------------
 (5) ___awmod                                              6     2      4     752
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _Timer0_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LEDarray_init                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LEDarray_disp_bin                                    2     0      2     274
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _LCD_setline                                          1     1      0     882
                                              3 COMRAM     1     1      0
                       _LCD_sendbyte
 ---------------------------------------------------------------------------------
 (1) _LCD_sendstring                                       1     0      1    1111
                                              3 COMRAM     1     0      1
                       _LCD_sendbyte
 ---------------------------------------------------------------------------------
 (1) _LCD_Init                                             2     2      0     926
                                              3 COMRAM     2     2      0
                       _LCD_sendbyte
                     _LCD_sendnibble
 ---------------------------------------------------------------------------------
 (2) _LCD_sendbyte                                         2     1      1     838
                                              1 COMRAM     2     1      1
                     _LCD_sendnibble
 ---------------------------------------------------------------------------------
 (3) _LCD_sendnibble                                       1     1      0      88
                                              0 COMRAM     1     1      0
                          _LCD_E_TOG
 ---------------------------------------------------------------------------------
 (4) _LCD_E_TOG                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Interrupts_init                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ADC_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _HighISR                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_init
   _Interrupts_init
   _LCD_Init
     _LCD_sendbyte
       _LCD_sendnibble
         _LCD_E_TOG
     _LCD_sendnibble
   _LCD_sendstring
     _LCD_sendbyte
   _LCD_setline
     _LCD_sendbyte
   _LEDarray_disp_bin
   _LEDarray_init
   _Timer0_init
   _UpdateClock
     ___awmod
   _clock_init
   _sprintf
     _vfprintf
       _vfpfcnvrt
         _dtoa
           ___awdiv
           ___awmod
           _abs
             ___awmod (ARG)
           _pad
             _fputc
               _putch
             _fputs
               _fputc
         _fputc
         _read_prec_or_width
           ___wmul

 _HighISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             DE9      0       0      46        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK13           EA      0       0      30        0.0%
BANK13              EA      0       0      31        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     24      5E       5       58.8%
BITBIGSFRllhhhh     84      0       0      38        0.0%
BITBIGSFRllhhll     5E      0       0      41        0.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     45      4A       1       78.7%
BITBIGSFRhhl        4A      0       0      34        0.0%
BITBIGSFRllhhlh     33      0       0      40        0.0%
BITBIGSFRllll       30      0       0      44        0.0%
BITBIGSFRhhhl       1B      0       0      33        0.0%
BITBIGSFRllhhhh     14      0       0      35        0.0%
BITBIGSFRhhhh        D      0       0      32        0.0%
BITBIGSFRlllh        9      0       0      43        0.0%
BITBIGSFRllhl        9      0       0      42        0.0%
BITBIGSFRllhhhl      8      0       0      39        0.0%
BITBIGSFRllhhhh      6      0       0      37        0.0%
BITBIGSFRllhhhh      3      0       0      36        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      A8      45        0.0%
DATA                 0      0      A8       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.45 build 20230818022343 
Symbol Table                                                                                   Thu Feb 08 21:45:21 2024

                        l42 12CA                          l37 1220                          l39 128C  
                        l59 1DEC                          l79 1E3A                ___awdiv@sign 0006  
       ___wmul@multiplicand 0003           ??_Interrupts_init 0001                         l130 1776  
                       l131 178A                         l300 1CC6                         l140 17E4  
                       l132 178C                         l124 1DA8                         l141 17F8  
                       l133 17A0                         l142 17FA                         l134 17A2  
                       l143 180E                         l135 17B6                         l127 175E  
                       l232 1E06                         l136 17B8                         l128 1760  
                       l320 1D82                         l145 1810                         l137 17CC  
                       l129 1774                         l306 1D5C                         l138 17CE  
                       l139 17E2                         l243 1E3E                         l281 1B7E  
                       l283 1B94                         l259 11BC                         l292 1DCC  
                       l285 1BAA                         l278 1E2C                         l287 1BC0  
                       l295 1748                         l551 18D4                         l289 1BCE  
                       l564 1984                         l998 1CFA                         _abs 1CFC  
                       _pad 1ADE                ___awmod@sign 0006                         wreg 0FE8  
                      l1021 1B4C                        l1023 1B66                        l2000 1514  
                      l1018 1B0E                        l2010 1566                        l2002 151C  
                      l1026 1520                        l1043 1A2A                        ?_abs 0007  
                      l2020 15B8                        l2012 156A                        l2004 1528  
                      l2100 1418                        l2030 1606                        l2022 15C8  
                      l2014 1570                        l2006 1532                        l1062 14C0  
                      l2102 1438                        l1039 1628                        l1047 1A32  
                      l2200 1E04                        l1072 1D16                        l2032 1612  
                      l2024 15E2                        l2008 1538                        l2016 158C  
                      l2040 19B4                        l2112 148E                        l2104 1458  
                      l2050 1B6A                        l2130 1DBE                        l2210 0EA4  
                      l2202 0E46                        l2018 15A6                        l2026 15F0  
                      l2042 19BC                        l2106 1470                        l1075 1D2E  
                      l2060 1BA4                        l2052 1B78                        l2132 1DC4  
                      l2220 0F30                        l2212 0EB8                        l2204 0E58  
                      l2028 1600                        l2044 19D8                        l2036 1986  
                      l2108 147A                        l2116 149A                        l1068 1C10  
                      l2140 1C08                        l2300 1CF0                        l2062 1BAC  
                      l2054 1B80                        l2126 1DAC                        l2310 1D46  
                      l2150 1DE0                        l2230 0FB4                        l2222 0F56  
                      l2206 0E6A                        l2214 0EDC                        l2046 19F8  
                      l2038 198E                        l2070 1340                        l2134 1BD0  
                      l1087 1ADC                        l1095 1C8C                        l2064 1BBA  
                      l2056 1B8E                        l2128 1DB6                        l2160 1658  
                      l2304 1D30                        l2144 1D84                        l2152 1DEA  
                      l2240 1058                        l2232 0FD8                        l2224 0F60  
                      l2216 0F02                        l2208 0E7E                        l2048 1A00  
                      l2080 1386                        l2072 1366                        l2136 1BD8  
                      l2320 11CE                        l2312 11BE                        l2154 1E2E  
                      l2066 1BC2                        l2058 1B96                        l2170 16A0  
                      l2162 165E                        l2306 1D34                        l2146 1DCE  
                      l2250 10EC                        l2242 1072                        l2234 0FFC  
                      l2226 0F84                        l2218 0F0C                        l1098 1E3C  
                      l2082 1388                        l2090 13D2                        l2074 136E  
                      l2138 1BE8                        l2330 11DC                        l2322 11D2  
                      l2314 11C2                        l2068 1BC6                        l2180 16EA  
                      l2172 16B0                        l2164 1674                        l2156 162A  
                      l2308 1D44                        l2148 1DD6                        l2260 118A  
                      l2252 10F4                        l2244 107A                        l2236 1022  
                      l2228 0FAA                        l2092 13E2                        l2084 1394  
                      l2076 137A                        l2340 1200                        l2332 11DE  
                      l2324 11D6                        l2316 11C6                        l2190 1730  
                      l2182 16F4                        l2174 16BA                        l2166 1684  
                      l2158 1642                        l2270 1784                        l2262 1198  
                      l2254 1132                        l2246 10A6                        l2238 1030  
                      l2094 13F6                        l2078 137E                        l2350 123C  
                      l2342 1208                        l2334 11E8                        l2326 11D8  
                      l2318 11CA                        l2192 1DEE                        l2184 1704  
                      l2176 16C8                        l2168 169A                        l2280 17F2  
                      l2272 179A                        l2264 174A                        l2256 1140  
                      l2248 10C0                        l2096 1404                        l2088 139C  
                      l2360 12A8                        l2352 1264                        l2344 1210  
                      l2336 11F0                        l2328 11DA                        l2194 1DF8  
                      l2186 170E                        l2178 16D2                        l2290 1CBC  
                      l2282 1808                        l2274 17B0                        l2266 1758  
                      l2258 1164                        l2098 140E                        l2370 1306  
                      l2362 12C4                        l2354 1270                        l2346 1218  
                      l2338 11F8                        l2196 1E00                        l2188 1726  
                      l2284 1C90                        l2276 17C6                        l2268 176E  
                      l1900 186C                        l2292 1CC8                        l2372 130C  
                      l2364 12CC                        l2356 1286                        l2348 1234  
                      l2198 1E02                        l2286 1CA2                        l2278 17DC  
                      l1910 18A6                        l1902 1874                        l2294 1CD0  
                      l2366 12D2                        l2358 128E                        l2288 1CAC  
                      l1920 18CC                        l1912 18A8                        l1904 1882  
                      l2296 1CD8                        l2368 12FE                        l1930 18F0  
                      l1914 18AE                        l1906 1888                        l2538 13C4  
                      l2298 1CE0                        l1940 1924                        l1932 18F4  
                      l1924 18D6                        l1908 189E                        l1916 18B4  
                      l1860 1A7A                        l1852 1A34                        l1950 195E  
                      l1942 192C                        l1934 1902                        l1926 18DA  
                      l1918 18C4                        l1862 1AAC                        l1854 1A44  
                      l1870 1C6C                        l1944 193A                        l1952 1964  
                      l1936 190A                        l1928 18E8                        l1880 1812  
                      l1856 1A54                        l1872 1C70                        l1960 1ADE  
                      l1954 1974                        l1946 1950                        l1938 191C  
                      l1890 183E                        l1882 1816                        l1858 1A5E  
                      l1866 1C52                        l1970 1B2A                        l1962 1AEC  
                      l1874 1D5E                        l1980 1E20                        l1956 197C  
                      l1948 1958                        l1892 1846                        l1884 1824  
                      l1868 1C5E                        l1972 1B2E                        l1964 1AF8  
                      l1876 1D7A                        l1982 1E22                        l1894 184A  
                      l1886 182C                        l1974 1B5A                        l1966 1B06  
                      l1990 14DA                        ?_pad 000E                        l1984 1E2A  
                      l1896 1852                        l1888 1830                        l1976 1CFC  
                      l1968 1B1A                        l1992 14E2                        l1898 1864  
                      l1978 1D0A                        l1994 14F2                        l1986 14C2  
                      l1996 14F8                        l1988 14C6                        l1998 1508  
              main@TestMode 0074                        STR_1 0E01                        STR_2 0E30  
                      STR_3 0E1B                        u1300 1882                        u1220 1A44  
                      u1301 187E                        u1221 1A40                        u1310 189E  
                      u1230 1A54                        u1311 189A                        u1231 1A50  
                      u1320 18C4                        u1240 1A7A                        u1400 1B06  
                      u1321 18C0                        u1241 1A76                        u1401 1B02  
                      u1330 18E8                        u1250 1AAC                        u1410 1B4C  
                      u1331 18E4                        u1251 1AA8                        u1411 1B48  
                      u1340 1902                        u1260 1C8C                        u1420 1B5A  
                      u1500 15C8                        u1341 18FE                        u1261 1C88  
                      u1421 1B56                        u1501 15C4                        u1350 191C  
                      u1270 1824                        u1430 1D0A                        u1510 15E2  
                      u1351 1918                        u1271 1820                        u1431 1D06  
                      u1511 15DE                        u1360 193A                        u1280 183E  
                      u1520 15F0                        u1440 14D6                        u1600 1366  
                      u1361 1936                        u1281 183A                        u1521 15EC  
                      u1441 14D0                        u1601 1362                        u1370 1950  
                      u1290 1864                        u1530 1600                        u1450 14D8  
                      u1610 13E2                        u1371 194C                        u1291 1860  
                      u1531 15FC                        u1611 13DE                        u1380 1974  
                      u1700 0F02                        u1460 14F2                        u1540 19B4  
                      u1620 1404                        u1381 1970                        u1701 0EFE  
                      u1461 14EE                        u1541 19B0                        u1621 1400  
                      u1710 0F56                        u1390 1AEC                        u1470 1508  
                      u1550 1A2A                        u1630 1438                        u2407 16FA  
                      u1711 0F52                        u1391 1AE8                        u1471 1504  
                      u1551 1A26                        u1631 1434                        u1560 1B78  
                      u1800 118A                        u1720 0FAA                        u1480 15A6  
                      u1640 1458                        u1561 1B74                        u2417 1718  
                      u2337 164C                        u1801 1186                        u1721 0FA6  
                      u1481 15A2                        u1641 1454                        u1570 1B8E  
                      u1810 1758                        u1730 1022                        u1490 15B8  
                      u1571 1B8A                        u2427 173A                        u2347 1664  
                      u1811 1754                        u1731 101E                        u1491 15B4  
                      u1580 1BA4                        u1900 1CA2                        u1820 176E  
                      u1740 1058                        u1660 1C08                        u1581 1BA0  
                      u2437 1DC6                        u2357 167A                        u1901 1C9E  
                      u1821 176A                        u1741 1054                        u1661 1C04  
                      u1590 1BBA                        u1910 1CBC                        u1830 1784  
                      u1750 1072                        u2447 1BC8                        u1591 1BB6  
                      u1655 1DB4                        u2367 1690                        u1911 1CB8  
                      u1831 1780                        u1751 106E                        u1671 0E50  
                      u1656 1DB6                        u1920 1D5C                        u1840 179A  
                      u1760 10A6                        u1680 0E6A                        u2457 1E24  
                      u2377 16A6                        u1921 1D58                        u1841 1796  
                      u1761 10A2                        u1681 0E66                        u1850 17B0  
                      u1770 10C0                        u1690 0EA4                        u1930 1234  
                      u2387 16BC                        u1851 17AC                        u1771 10BC  
                      u1691 0EA0                        u1931 1230                        u1860 17C6  
                      u1780 10EC                        u1940 1286                        u2397 16DC  
                      u1861 17C2                        u1781 10E8                        u1941 1282  
                      u1870 17DC                        u1790 1132                        u1950 12A8  
                      u1871 17D8                        u1791 112E                        u1951 12A4  
                      u1880 17F2                        u1960 12C4                        u1881 17EE  
                      u1961 12C0                        u1890 1808                        u1891 1804  
                      i2l85 002C                        abs@a 0007                        _dbuf 0084  
                      _main 11BE                        _dtoa 14C2                        _prec 0048  
                      pad@i 0013                        pad@p 0010                        fsr1h 0FE2  
                      fsr2h 0FDA                        indf1 0FE7                        indf2 0FDF  
                      fsr1l 0FE1                        fsr2l 0FD9                        btemp 004B  
              ?_LCD_setline 0001                        prodh 0FF4                        prodl 0FF3  
                      start 0030            __end_of_ADC_init 1E08             __end_of_HighISR 0030  
              ___param_bank 0000                       ??_abs 0009                       ??_pad 0012  
          __end_of_LCD_Init 174A                       ?_main 0001                       ?_dtoa 0015  
                     _ADPCH 0F5F             __end_of___awdiv 18D6             __end_of___awmod 1986  
           ___awdiv@divisor 0003             ___awdiv@counter 0005                vfpfcnvrt@fmt 0021  
                     _TMR0H 0FD4                       _TMR0L 0FD3                       _flags 004A  
       read_prec_or_width@c 0009         read_prec_or_width@n 000A                       _fputc 1A34  
                     _fputs 1C52                       pad@fp 000E                       _width 0046  
                     _putch 1E3C                       dtoa@d 0016                       dtoa@i 001E  
                     dtoa@p 001A                       dtoa@s 001D                       dtoa@w 001B  
             ?_LCD_sendbyte 0002                       tablat 0FF5                       plusw1 0FE3  
                     plusw2 0FDB                       ttemp5 004C                       ttemp6 004F  
                     ttemp7 0053                       status 0FD8                       wtemp8 004C  
           __end_of_sprintf 1CFC             __initialization 1C12                __end_of_main 1340  
              __end_of_dtoa 162A           __end_of_LCD_E_TOG 1E2E                      ??_main 0046  
                    ??_dtoa 0018               __activetblptr 0003  __end_of_read_prec_or_width 1A34  
                    ?_fputc 0001                      ?_fputs 0009                      _ADRESH 0F64  
            ??_LCD_sendbyte 0003            ___awdiv@dividend 0001                      ?_putch 0001  
          UpdateClock@hours 0009                      i2l2380 0028                      i2l2374 000A  
                    i2l2376 001A                      i2l2378 0022            UpdateClock@years 000D  
             vfpfcnvrt@done 0029                   ??_HighISR 0001           _LEDarray_disp_bin 174A  
        ?_LEDarray_disp_bin 0001               ??_Timer0_init 0001                vfprintf@cfmt 002E  
                    ___wmul 1D5E                   ??___awdiv 0005                   ??___awmod 0005  
      read_prec_or_width@ap 0008         ??_LEDarray_disp_bin 0003                      clear_0 1C38  
          ___awdiv@quotient 0007             ___awmod@divisor 0003                      isa$std 0001  
           ___awmod@counter 0005                      pad@buf 000F                      dtoa@fp 0015  
                    fputc@c 0001                      fputs@c 000B                      fputs@i 000C  
                    fputs@s 0009                __mediumconst 0000                      tblptrh 0FF7  
                    tblptrl 0FF6                      tblptru 0FF8                   ?_ADC_init 0001  
                    putch@c 0001            __end_of_vfprintf 1C12                   ??_sprintf 0039  
 __end_of_LEDarray_disp_bin 1812                  __accesstop 0060               ??_UpdateClock 0010  
   __end_of__initialization 1C48                   ?_LCD_Init 0001               ___rparam_used 0001  
             _LEDarray_init 1D84             _Interrupts_init 1E2E              __pcstackCOMRAM 0001  
              __pidataBANK0 1E08               __end_of_fputc 1ADE               __end_of_fputs 1C8E  
             __end_of_putch 1E3E         __end_of_Timer0_init 1DEE                  ??_ADC_init 0001  
                   ??_fputc 0004                     ??_fputs 000B                     ??_putch 0001  
         UpdateClock@F14152 00A6                  __pbssBANK0 0084                  ??_LCD_Init 0004  
            _LCD_sendnibble 1B68              ?_LEDarray_init 0001              _LCD_sendstring 1D30  
       __end_of_UpdateClock 11BE                     ?___wmul 0001        __end_of_LCD_sendbyte 1DCE  
                _clock_init 1E3E           UpdateClock@months 000C      __end_of_LCD_sendnibble 1BD0  
       UpdateClock@TestMode 000E     __end_of_Interrupts_init 1E3C                     _HighISR 0008  
    __end_of_LCD_sendstring 1D5E                   _ADREFbits 0F58                     __Hparam 0000  
                   __Lparam 0000                 _Timer0_init 1DCE                     ___awdiv 1812  
                   ___awmod 18D6                   ?_vfprintf 002B                __psmallconst 0E00  
                   __pcinit 1C12                     __ramtop 0E00                     __ptext0 11BE  
                   __ptext1 1CC8                     __ptext2 1BD0                     __ptext3 1340  
                   __ptext4 1986                     __ptext5 1D5E                     __ptext6 14C2  
                   __ptext7 1ADE                     __ptext8 1C52                     __ptext9 1A34  
     read_prec_or_width@fmt 0007            ___awmod@dividend 0001                   _LCD_E_TOG 1E20  
           LCD_setline@line 0004                     main@buf 0060                     _sprintf 1CC8  
      end_of_initialization 1C48             ?_LCD_sendnibble 0001                     fputc@fp 0003  
           ??_LEDarray_init 0001                     fputs@fp 000A                 _UpdateClock 0E46  
           ?_LCD_sendstring 0004          _read_prec_or_width 1986           __end_of_vfpfcnvrt 14C2  
                   postdec1 0FE5                     postdec2 0FDD         ?_read_prec_or_width 0007  
                   postinc0 0FEE                     postinc1 0FE6                     postinc2 0FDE  
          vfpfcnvrt@convarg 0025                  ??_vfprintf 002E                 ?_clock_init 0001  
                ?_LCD_E_TOG 0001                   _TRISAbits 0F81                   _TRISBbits 0F82  
                 _TRISCbits 0F83                   _TRISDbits 0F84                   _TRISEbits 0F85  
                 _TRISFbits 0F86                   _TRISGbits 0F87                   _TRISHbits 0F88  
      ??_read_prec_or_width 0009                 _CM1CON0bits 0ED0                 _CM1CON1bits 0ED1  
          ?_Interrupts_init 0001                 vfpfcnvrt@ap 0022                 vfpfcnvrt@cp 002A  
               vfpfcnvrt@fp 0020              __end_of___wmul 1D84        LCD_sendnibble@number 0001  
       start_initialization 1C12                 __end_of_abs 1D30                 __end_of_pad 1B68  
              _LCD_sendbyte 1DAA             UpdateClock@days 000A               ??_LCD_setline 0004  
               vfprintf@fmt 002C        LCD_sendstring@string 0004                    ??___wmul 0005  
               __pdataBANK0 00A6                 __pbssCOMRAM 0046                 ??_LCD_E_TOG 0001  
             __pcstackBANK0 0060                    ?_HighISR 0001                   _dtoa$1872 0018  
              ?_Timer0_init 0001                   __pintcode 0008                    ?___awdiv 0001  
                  ?___awmod 0001         __end_of_LCD_setline 1CC8                 __smallconst 0E00  
          ??_LCD_sendnibble 0001                    _ADC_init 1DEE            ??_LCD_sendstring 0005  
                  ?_sprintf 002F            LCD_sendbyte@Byte 0003                    _LCD_Init 162A  
          LCD_sendbyte@type 0002                ?_UpdateClock 0007              ___wmul@product 0005  
                  _LATAbits 0F79          UpdateClock@minutes 0008          UpdateClock@seconds 0007  
                  _LATBbits 0F7A                    _LATCbits 0F7B                    _LATDbits 0F7C  
                  _LATEbits 0F7D                    _LATFbits 0F7E                    _LATGbits 0F7F  
                  _LATHbits 0F80                    _IPR0bits 0E1F                    _PIE0bits 0E29  
                  _PIR0bits 0E33                    i2u197_40 001A                    i2u197_41 0016  
                 _vfpfcnvrt 1340                ??_clock_init 0001                  _ADCON0bits 0F60  
         ___wmul@multiplier 0001                   main@clock 0076      UpdateClock@DaysInMonth 0016  
                _CM1NCHbits 0ED2                  _CM1PCHbits 0ED3                   copy_data0 1C26  
     __end_of_LEDarray_init 1DAA              UpdateClock@DoW 000B                 _LCD_setline 1C8E  
        __end_of_clock_init 1E40                    __Hrparam 0000                  vfprintf@ap 002D  
                  __Lrparam 0000                  vfprintf@fp 002B                  ?_vfpfcnvrt 0020  
                _ANSELAbits 0E92                  sprintf@fmt 0030                  _T0CON0bits 0FD5  
                _T0CON1bits 0FD6                    __ptext10 1E3C                    __ptext11 1CFC  
                  __ptext20 1D30                    __ptext12 1812                    __ptext21 162A  
                  __ptext13 1E3E                    __ptext22 1DAA                    __ptext14 0E46  
                  __ptext23 1B68                    __ptext15 18D6                    __ptext24 1E20  
                  __ptext16 1DCE                    __ptext25 1E2E                    __ptext17 1D84  
                  __ptext26 1DEE                    __ptext18 174A                    __ptext19 1C8E  
   LEDarray_disp_bin@number 0001                  _GLOBALsecs 00A4                    isa$xinst 0000  
                  int$flags 004B                    _vfprintf 1BD0                  _INTCONbits 0FF2  
                  intlevel2 0000                   sprintf@ap 0039                _DAC1CON0bits 0EC6  
              _DAC1CON1bits 0EC7                 ??_vfpfcnvrt 0023                    sprintf@f 003A  
                  sprintf@s 002F  
