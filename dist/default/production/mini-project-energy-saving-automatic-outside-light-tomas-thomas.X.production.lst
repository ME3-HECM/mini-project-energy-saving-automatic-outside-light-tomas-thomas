

Microchip MPLAB XC8 Assembler V2.45 build 20230818022343 
                                                                                               Thu Feb 08 22:04:49 2024

Microchip MPLAB XC8 C Compiler v2.45 (Free license) build 20230818022343 Og1 
     1                           	processor	18F67K40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1
    14                           	psect	text4,global,reloc=2,class=CODE,delta=1
    15                           	psect	text5,global,reloc=2,class=CODE,delta=1
    16                           	psect	text6,global,reloc=2,class=CODE,delta=1
    17                           	psect	text7,global,reloc=2,class=CODE,delta=1
    18                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    19                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
    20                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    21                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    22                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    23                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    24   000000                     
    25                           ; Generated 21/07/2023 GMT
    26                           ; 
    27                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    28                           ; All rights reserved.
    29                           ; 
    30                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    31                           ; 
    32                           ; Redistribution and use in source and binary forms, with or without modification, are
    33                           ; permitted provided that the following conditions are met:
    34                           ; 
    35                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    36                           ;        conditions and the following disclaimer.
    37                           ; 
    38                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    39                           ;        of conditions and the following disclaimer in the documentation and/or other
    40                           ;        materials provided with the distribution. Publication is not required when
    41                           ;        this file is used in an embedded application.
    42                           ; 
    43                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    44                           ;        software without specific prior written permission.
    45                           ; 
    46                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    47                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    48                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    49                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    50                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    51                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    52                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    53                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    54                           ; 
    55                           ; 
    56                           ; Code-generator required, PIC18F67K40 Definitions
    57                           ; 
    58                           ; SFR Addresses
    59   000000                     _T0CON0bits	set	4053
    60   000000                     _T0CON1bits	set	4054
    61   000000                     _CM1CON1bits	set	3793
    62                           
    63                           	psect	nvCOMRAM
    64   00003F                     __pnvCOMRAM:
    65                           	callstack 0
    66   00003F                     _GLOBALsecs:
    67                           	callstack 0
    68   00003F                     	ds	2
    69   000000                     _IPR0bits	set	3615
    70   000000                     _PIE0bits	set	3625
    71   000000                     _ANSELAbits	set	3730
    72   000000                     _LATDbits	set	3964
    73   000000                     _TRISDbits	set	3972
    74   000000                     _TRISFbits	set	3974
    75   000000                     _TRISGbits	set	3975
    76   000000                     _TRISHbits	set	3976
    77   000000                     _LATFbits	set	3966
    78   000000                     _LATGbits	set	3967
    79   000000                     _LATHbits	set	3968
    80   000000                     _TMR0L	set	4051
    81   000000                     _TMR0H	set	4052
    82   000000                     _INTCONbits	set	4082
    83   000000                     _TRISBbits	set	3970
    84   000000                     _TRISAbits	set	3969
    85   000000                     _DAC1CON0bits	set	3782
    86   000000                     _ADREFbits	set	3928
    87   000000                     _ADPCH	set	3935
    88   000000                     _ADRESH	set	3940
    89   000000                     _ADCON0bits	set	3936
    90   000000                     _LATAbits	set	3961
    91   000000                     _LATBbits	set	3962
    92   000000                     _CM1CON0bits	set	3792
    93   000000                     _CM1NCHbits	set	3794
    94   000000                     _DAC1CON1bits	set	3783
    95   000000                     _CM1PCHbits	set	3795
    96   000000                     _PIR0bits	set	3635
    97                           
    98                           ; #config settings
    99                           
   100                           	psect	cinit
   101   001390                     __pcinit:
   102                           	callstack 0
   103   001390                     start_initialization:
   104                           	callstack 0
   105   001390                     __initialization:
   106                           	callstack 0
   107                           
   108                           ; Clear objects allocated to COMRAM (56 bytes)
   109   001390  EE00  F001         	lfsr	0,__pbssCOMRAM
   110   001394  0E38               	movlw	56
   111   001396                     clear_0:
   112   001396  6AEE               	clrf	postinc0,c
   113   001398  06E8               	decf	wreg,f,c
   114   00139A  E1FD               	bnz	clear_0
   115   00139C                     end_of_initialization:
   116                           	callstack 0
   117   00139C                     __end_of__initialization:
   118                           	callstack 0
   119   00139C  9041               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   120   00139E  9241               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   121   0013A0  0100               	movlb	0
   122   0013A2  EF01  F007         	goto	_main	;jump to C main() function
   123                           
   124                           	psect	bssCOMRAM
   125   000001                     __pbssCOMRAM:
   126                           	callstack 0
   127   000001                     	ds	14
   128   00000F                     	ds	14
   129   00001D                     	ds	14
   130   00002B                     	ds	14
   131                           
   132                           	psect	cstackBANK0
   133   000060                     __pcstackBANK0:
   134                           	callstack 0
   135   000060                     main@14166:
   136                           	callstack 0
   137                           
   138                           ; 14 bytes @ 0x0
   139   000060                     	ds	14
   140   00006E                     main@14168:
   141                           	callstack 0
   142                           
   143                           ; 14 bytes @ 0xE
   144   00006E                     	ds	14
   145   00007C                     main@14170:
   146                           	callstack 0
   147                           
   148                           ; 14 bytes @ 0x1C
   149   00007C                     	ds	14
   150   00008A                     main@14172:
   151                           	callstack 0
   152                           
   153                           ; 14 bytes @ 0x2A
   154   00008A                     	ds	14
   155   000098                     main@light_threshold:
   156                           	callstack 0
   157                           
   158                           ; 2 bytes @ 0x38
   159   000098                     	ds	2
   160   00009A                     main@curval:
   161                           	callstack 0
   162                           
   163                           ; 2 bytes @ 0x3A
   164   00009A                     	ds	2
   165   00009C                     main@Jan:
   166                           	callstack 0
   167                           
   168                           ; 6 bytes @ 0x3C
   169   00009C                     	ds	6
   170   0000A2                     main@Feb:
   171                           	callstack 0
   172                           
   173                           ; 6 bytes @ 0x42
   174   0000A2                     	ds	6
   175   0000A8                     main@Mar:
   176                           	callstack 0
   177                           
   178                           ; 6 bytes @ 0x48
   179   0000A8                     	ds	6
   180   0000AE                     main@Apr:
   181                           	callstack 0
   182                           
   183                           ; 6 bytes @ 0x4E
   184   0000AE                     	ds	6
   185   0000B4                     main@May:
   186                           	callstack 0
   187                           
   188                           ; 6 bytes @ 0x54
   189   0000B4                     	ds	6
   190   0000BA                     main@Jun:
   191                           	callstack 0
   192                           
   193                           ; 6 bytes @ 0x5A
   194   0000BA                     	ds	6
   195   0000C0                     main@Jul:
   196                           	callstack 0
   197                           
   198                           ; 6 bytes @ 0x60
   199   0000C0                     	ds	6
   200   0000C6                     main@Aug:
   201                           	callstack 0
   202                           
   203                           ; 6 bytes @ 0x66
   204   0000C6                     	ds	6
   205   0000CC                     main@Sep:
   206                           	callstack 0
   207                           
   208                           ; 6 bytes @ 0x6C
   209   0000CC                     	ds	6
   210   0000D2                     main@Oct:
   211                           	callstack 0
   212                           
   213                           ; 6 bytes @ 0x72
   214   0000D2                     	ds	6
   215   0000D8                     main@Nov:
   216                           	callstack 0
   217                           
   218                           ; 6 bytes @ 0x78
   219   0000D8                     	ds	6
   220   0000DE                     main@Dec:
   221                           	callstack 0
   222                           
   223                           ; 6 bytes @ 0x7E
   224   0000DE                     	ds	6
   225   0000E4                     main@Dawn:
   226                           	callstack 0
   227                           
   228                           ; 6 bytes @ 0x84
   229   0000E4                     	ds	6
   230   0000EA                     main@Dusk:
   231                           	callstack 0
   232                           
   233                           ; 6 bytes @ 0x8A
   234   0000EA                     	ds	6
   235   0000F0                     main@DSTon:
   236                           	callstack 0
   237                           
   238                           ; 8 bytes @ 0x90
   239   0000F0                     	ds	8
   240   0000F8                     main@clock:
   241                           	callstack 0
   242                           
   243                           ; 8 bytes @ 0x98
   244   0000F8                     	ds	8
   245                           
   246                           	psect	cstackCOMRAM
   247   000039                     __pcstackCOMRAM:
   248                           	callstack 0
   249   000039                     ?_ADC_getval:
   250                           	callstack 0
   251   000039                     UpdateClock@seconds:
   252                           	callstack 0
   253   000039                     LEDarray_disp_bin@number:
   254                           	callstack 0
   255                           
   256                           ; 2 bytes @ 0x0
   257   000039                     	ds	1
   258   00003A                     UpdateClock@minutes:
   259                           	callstack 0
   260                           
   261                           ; 1 bytes @ 0x1
   262   00003A                     	ds	1
   263   00003B                     UpdateClock@hours:
   264                           	callstack 0
   265   00003B                     ADC_getval@tmpval:
   266                           	callstack 0
   267                           
   268                           ; 2 bytes @ 0x2
   269   00003B                     	ds	1
   270   00003C                     UpdateClock@days:
   271                           	callstack 0
   272                           
   273                           ; 1 bytes @ 0x3
   274   00003C                     	ds	1
   275   00003D                     ??_UpdateClock:
   276                           
   277                           ; 1 bytes @ 0x4
   278   00003D                     	ds	2
   279   00003F                     
   280                           ; 1 bytes @ 0x6
   281 ;;
   282 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   283 ;;
   284 ;; *************** function _main *****************
   285 ;; Defined at:
   286 ;;		line 28 in file "main.c"
   287 ;; Parameters:    Size  Location     Type
   288 ;;		None
   289 ;; Auto vars:     Size  Location     Type
   290 ;;  curval          2   58[BANK0 ] unsigned int 
   291 ;;  14172          14   42[BANK0 ] int [7]
   292 ;;  14170          14   28[BANK0 ] int [7]
   293 ;;  14168          14   14[BANK0 ] int [7]
   294 ;;  14166          14    0[BANK0 ] int [7]
   295 ;;  clock           8  152[BANK0 ] struct time_structure
   296 ;;  DSTon           8  144[BANK0 ] struct time_structure
   297 ;;  Dusk            6  138[BANK0 ] struct array_structure
   298 ;;  Dawn            6  132[BANK0 ] struct array_structure
   299 ;;  Dec             6  126[BANK0 ] struct month_structure
   300 ;;  Nov             6  120[BANK0 ] struct month_structure
   301 ;;  Oct             6  114[BANK0 ] struct month_structure
   302 ;;  Sep             6  108[BANK0 ] struct month_structure
   303 ;;  Aug             6  102[BANK0 ] struct month_structure
   304 ;;  Jul             6   96[BANK0 ] struct month_structure
   305 ;;  Jun             6   90[BANK0 ] struct month_structure
   306 ;;  May             6   84[BANK0 ] struct month_structure
   307 ;;  Apr             6   78[BANK0 ] struct month_structure
   308 ;;  Mar             6   72[BANK0 ] struct month_structure
   309 ;;  Feb             6   66[BANK0 ] struct month_structure
   310 ;;  Jan             6   60[BANK0 ] struct month_structure
   311 ;;  light_thresh    2   56[BANK0 ] unsigned int 
   312 ;; Return value:  Size  Location     Type
   313 ;;                  1    wreg      void 
   314 ;; Registers used:
   315 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
   316 ;; Tracked objects:
   317 ;;		On entry : 0/0
   318 ;;		On exit  : 0/0
   319 ;;		Unchanged: 0/0
   320 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   321 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   322 ;;      Locals:         0     160       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   323 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   324 ;;      Totals:         0     160       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   325 ;;Total ram usage:      160 bytes
   326 ;; Hardware stack levels required when called: 2
   327 ;; This function calls:
   328 ;;		_ADC_getval
   329 ;;		_ADC_init
   330 ;;		_Interrupts_init
   331 ;;		_LEDarray_disp_bin
   332 ;;		_LEDarray_init
   333 ;;		_Timer0_init
   334 ;;		_UpdateClock
   335 ;; This function is called by:
   336 ;;		Startup code after reset
   337 ;; This function uses a non-reentrant model
   338 ;;
   339                           
   340                           	psect	text0
   341   000E02                     __ptext0:
   342                           	callstack 0
   343   000E02                     _main:
   344                           	callstack 29
   345   000E02                     
   346                           ;main.c: 216:         Dawn.hours = (int[]){0, 0, 0, 0, 0, 0, 0};;main.c: 217:         Da
      +                          wn.minutes = (int[]){0, 0, 0, 0, 0, 0, 0};;main.c: 221:         Dusk.hours = (int[]){0, 
      +                          0, 0, 0, 0, 0, 0};;main.c: 222:         Dusk.minutes = (int[]){0, 0, 0, 0, 0, 0, 0};;mai
      +                          n.c: 31:     LEDarray_init();
   347   000E02  EC98  F009         	call	_LEDarray_init	;wreg free
   348   000E06                     
   349                           ;main.c: 32:     Timer0_init();
   350   000E06  ECAB  F009         	call	_Timer0_init	;wreg free
   351   000E0A                     
   352                           ;main.c: 33:     Interrupts_init();
   353   000E0A  ECD3  F009         	call	_Interrupts_init	;wreg free
   354   000E0E                     
   355                           ;main.c: 37:     TRISDbits.TRISD7 = 0;
   356   000E0E  9E84               	bcf	132,7,c	;volatile
   357   000E10                     
   358                           ;main.c: 38:     LATDbits.LATD7 = 0;
   359   000E10  9E7C               	bcf	124,7,c	;volatile
   360   000E12                     
   361                           ;main.c: 41:     TRISHbits.TRISH3 = 0;
   362   000E12  9688               	bcf	136,3,c	;volatile
   363   000E14                     
   364                           ;main.c: 42:     LATHbits.LATH3 = 0;
   365   000E14  9680               	bcf	128,3,c	;volatile
   366   000E16                     
   367                           ;main.c: 54:     struct time_structure clock;;main.c: 56:         GLOBALsecs = 50;
   368   000E16  0E00               	movlw	0
   369   000E18  6E40               	movwf	(_GLOBALsecs+1)^0,c
   370   000E1A  0E32               	movlw	50
   371   000E1C  6E3F               	movwf	_GLOBALsecs^0,c
   372   000E1E                     
   373                           ;main.c: 57:         clock.minutes = 59;
   374   000E1E  0E00               	movlw	0
   375   000E20  0100               	movlb	0	; () banked
   376   000E22  6FFB               	movwf	(main@clock+3)& (0+255),b
   377   000E24  0E3B               	movlw	59
   378   000E26  6FFA               	movwf	(main@clock+2)& (0+255),b
   379   000E28                     
   380                           ; BSR set to: 0
   381                           ;main.c: 58:         clock.hours = 12;
   382   000E28  0E00               	movlw	0
   383   000E2A  6FFD               	movwf	(main@clock+5)& (0+255),b
   384   000E2C  0E0C               	movlw	12
   385   000E2E  6FFC               	movwf	(main@clock+4)& (0+255),b
   386   000E30                     
   387                           ; BSR set to: 0
   388                           ;main.c: 59:         clock.days = 1;
   389   000E30  0E00               	movlw	0
   390   000E32  6FFF               	movwf	(main@clock+7)& (0+255),b
   391   000E34  0E01               	movlw	1
   392   000E36  6FFE               	movwf	(main@clock+6)& (0+255),b
   393   000E38                     
   394                           ; BSR set to: 0
   395                           ;main.c: 63:     struct time_structure DSTon;;main.c: 64:         DSTon.minutes = 0;
   396   000E38  0E00               	movlw	0
   397   000E3A  6FF3               	movwf	(main@DSTon+3)& (0+255),b
   398   000E3C  0E00               	movlw	0
   399   000E3E  6FF2               	movwf	(main@DSTon+2)& (0+255),b
   400   000E40                     
   401                           ; BSR set to: 0
   402                           ;main.c: 65:         DSTon.hours = 0;
   403   000E40  0E00               	movlw	0
   404   000E42  6FF5               	movwf	(main@DSTon+5)& (0+255),b
   405   000E44  0E00               	movlw	0
   406   000E46  6FF4               	movwf	(main@DSTon+4)& (0+255),b
   407   000E48                     
   408                           ; BSR set to: 0
   409                           ;main.c: 66:         DSTon.days = 0;
   410   000E48  0E00               	movlw	0
   411   000E4A  6FF7               	movwf	(main@DSTon+7)& (0+255),b
   412   000E4C  0E00               	movlw	0
   413   000E4E  6FF6               	movwf	(main@DSTon+6)& (0+255),b
   414   000E50                     
   415                           ; BSR set to: 0
   416                           ;main.c: 72:         GLOBALsecs = clock.hours;
   417   000E50  C0FC  F03F         	movff	main@clock+4,_GLOBALsecs
   418   000E54  C0FD  F040         	movff	main@clock+5,_GLOBALsecs+1
   419   000E58                     
   420                           ; BSR set to: 0
   421                           ;main.c: 130:     struct month_structure Jan;;main.c: 132:         Jan.days = 31;
   422   000E58  0E00               	movlw	0
   423   000E5A  6FA1               	movwf	(main@Jan+5)& (0+255),b
   424   000E5C  0E1F               	movlw	31
   425   000E5E  6FA0               	movwf	(main@Jan+4)& (0+255),b
   426   000E60                     
   427                           ; BSR set to: 0
   428                           ;main.c: 133:         Jan.solarMidHours = 0;
   429   000E60  0E00               	movlw	0
   430   000E62  6F9F               	movwf	(main@Jan+3)& (0+255),b
   431   000E64  0E00               	movlw	0
   432   000E66  6F9E               	movwf	(main@Jan+2)& (0+255),b
   433   000E68                     
   434                           ; BSR set to: 0
   435                           ;main.c: 134:         Jan.solarMidMinutes = 9;
   436   000E68  0E00               	movlw	0
   437   000E6A  6F9D               	movwf	(main@Jan+1)& (0+255),b
   438   000E6C  0E09               	movlw	9
   439   000E6E  6F9C               	movwf	main@Jan& (0+255),b
   440   000E70                     
   441                           ; BSR set to: 0
   442                           ;main.c: 136:     struct month_structure Feb;;main.c: 138:         Feb.days = 28;
   443   000E70  0E00               	movlw	0
   444   000E72  6FA7               	movwf	(main@Feb+5)& (0+255),b
   445   000E74  0E1C               	movlw	28
   446   000E76  6FA6               	movwf	(main@Feb+4)& (0+255),b
   447   000E78                     
   448                           ; BSR set to: 0
   449                           ;main.c: 139:         Feb.solarMidHours = 0;
   450   000E78  0E00               	movlw	0
   451   000E7A  6FA5               	movwf	(main@Feb+3)& (0+255),b
   452   000E7C  0E00               	movlw	0
   453   000E7E  6FA4               	movwf	(main@Feb+2)& (0+255),b
   454   000E80                     
   455                           ; BSR set to: 0
   456                           ;main.c: 140:         Feb.solarMidMinutes = 13;
   457   000E80  0E00               	movlw	0
   458   000E82  6FA3               	movwf	(main@Feb+1)& (0+255),b
   459   000E84  0E0D               	movlw	13
   460   000E86  6FA2               	movwf	main@Feb& (0+255),b
   461   000E88                     
   462                           ; BSR set to: 0
   463                           ;main.c: 142:     struct month_structure Mar;;main.c: 144:         Mar.days = 31;
   464   000E88  0E00               	movlw	0
   465   000E8A  6FAD               	movwf	(main@Mar+5)& (0+255),b
   466   000E8C  0E1F               	movlw	31
   467   000E8E  6FAC               	movwf	(main@Mar+4)& (0+255),b
   468   000E90                     
   469                           ; BSR set to: 0
   470                           ;main.c: 145:         Mar.solarMidHours = 0;
   471   000E90  0E00               	movlw	0
   472   000E92  6FAB               	movwf	(main@Mar+3)& (0+255),b
   473   000E94  0E00               	movlw	0
   474   000E96  6FAA               	movwf	(main@Mar+2)& (0+255),b
   475   000E98                     
   476                           ; BSR set to: 0
   477                           ;main.c: 146:         Mar.solarMidMinutes = 8;
   478   000E98  0E00               	movlw	0
   479   000E9A  6FA9               	movwf	(main@Mar+1)& (0+255),b
   480   000E9C  0E08               	movlw	8
   481   000E9E  6FA8               	movwf	main@Mar& (0+255),b
   482   000EA0                     
   483                           ; BSR set to: 0
   484                           ;main.c: 148:     struct month_structure Apr;;main.c: 150:         Apr.days = 30;
   485   000EA0  0E00               	movlw	0
   486   000EA2  6FB3               	movwf	(main@Apr+5)& (0+255),b
   487   000EA4  0E1E               	movlw	30
   488   000EA6  6FB2               	movwf	(main@Apr+4)& (0+255),b
   489   000EA8                     
   490                           ; BSR set to: 0
   491                           ;main.c: 151:         Apr.solarMidHours = 0;
   492   000EA8  0E00               	movlw	0
   493   000EAA  6FB1               	movwf	(main@Apr+3)& (0+255),b
   494   000EAC  0E00               	movlw	0
   495   000EAE  6FB0               	movwf	(main@Apr+2)& (0+255),b
   496   000EB0                     
   497                           ; BSR set to: 0
   498                           ;main.c: 152:         Apr.solarMidMinutes = 1;
   499   000EB0  0E00               	movlw	0
   500   000EB2  6FAF               	movwf	(main@Apr+1)& (0+255),b
   501   000EB4  0E01               	movlw	1
   502   000EB6  6FAE               	movwf	main@Apr& (0+255),b
   503   000EB8                     
   504                           ; BSR set to: 0
   505                           ;main.c: 154:     struct month_structure May;;main.c: 156:         May.days = 31;
   506   000EB8  0E00               	movlw	0
   507   000EBA  6FB9               	movwf	(main@May+5)& (0+255),b
   508   000EBC  0E1F               	movlw	31
   509   000EBE  6FB8               	movwf	(main@May+4)& (0+255),b
   510   000EC0                     
   511                           ; BSR set to: 0
   512                           ;main.c: 157:         May.solarMidHours = 23;
   513   000EC0  0E00               	movlw	0
   514   000EC2  6FB7               	movwf	(main@May+3)& (0+255),b
   515   000EC4  0E17               	movlw	23
   516   000EC6  6FB6               	movwf	(main@May+2)& (0+255),b
   517   000EC8                     
   518                           ; BSR set to: 0
   519                           ;main.c: 158:         May.solarMidMinutes = 57;
   520   000EC8  0E00               	movlw	0
   521   000ECA  6FB5               	movwf	(main@May+1)& (0+255),b
   522   000ECC  0E39               	movlw	57
   523   000ECE  6FB4               	movwf	main@May& (0+255),b
   524   000ED0                     
   525                           ; BSR set to: 0
   526                           ;main.c: 160:     struct month_structure Jun;;main.c: 162:         Jun.days = 30;
   527   000ED0  0E00               	movlw	0
   528   000ED2  6FBF               	movwf	(main@Jun+5)& (0+255),b
   529   000ED4  0E1E               	movlw	30
   530   000ED6  6FBE               	movwf	(main@Jun+4)& (0+255),b
   531   000ED8                     
   532                           ; BSR set to: 0
   533                           ;main.c: 163:         Jun.solarMidHours = 0;
   534   000ED8  0E00               	movlw	0
   535   000EDA  6FBD               	movwf	(main@Jun+3)& (0+255),b
   536   000EDC  0E00               	movlw	0
   537   000EDE  6FBC               	movwf	(main@Jun+2)& (0+255),b
   538   000EE0                     
   539                           ; BSR set to: 0
   540                           ;main.c: 164:         Jun.solarMidMinutes = 1;
   541   000EE0  0E00               	movlw	0
   542   000EE2  6FBB               	movwf	(main@Jun+1)& (0+255),b
   543   000EE4  0E01               	movlw	1
   544   000EE6  6FBA               	movwf	main@Jun& (0+255),b
   545   000EE8                     
   546                           ; BSR set to: 0
   547                           ;main.c: 166:     struct month_structure Jul;;main.c: 168:         Jul.days = 31;
   548   000EE8  0E00               	movlw	0
   549   000EEA  6FC5               	movwf	(main@Jul+5)& (0+255),b
   550   000EEC  0E1F               	movlw	31
   551   000EEE  6FC4               	movwf	(main@Jul+4)& (0+255),b
   552   000EF0                     
   553                           ; BSR set to: 0
   554                           ;main.c: 169:         Jul.solarMidHours = 0;
   555   000EF0  0E00               	movlw	0
   556   000EF2  6FC3               	movwf	(main@Jul+3)& (0+255),b
   557   000EF4  0E00               	movlw	0
   558   000EF6  6FC2               	movwf	(main@Jul+2)& (0+255),b
   559   000EF8                     
   560                           ; BSR set to: 0
   561                           ;main.c: 170:         Jul.solarMidMinutes = 5;
   562   000EF8  0E00               	movlw	0
   563   000EFA  6FC1               	movwf	(main@Jul+1)& (0+255),b
   564   000EFC  0E05               	movlw	5
   565   000EFE  6FC0               	movwf	main@Jul& (0+255),b
   566   000F00                     
   567                           ; BSR set to: 0
   568                           ;main.c: 172:     struct month_structure Aug;;main.c: 174:         Aug.days = 31;
   569   000F00  0E00               	movlw	0
   570   000F02  6FCB               	movwf	(main@Aug+5)& (0+255),b
   571   000F04  0E1F               	movlw	31
   572   000F06  6FCA               	movwf	(main@Aug+4)& (0+255),b
   573   000F08                     
   574                           ; BSR set to: 0
   575                           ;main.c: 175:         Aug.solarMidHours = 0;
   576   000F08  0E00               	movlw	0
   577   000F0A  6FC9               	movwf	(main@Aug+3)& (0+255),b
   578   000F0C  0E00               	movlw	0
   579   000F0E  6FC8               	movwf	(main@Aug+2)& (0+255),b
   580   000F10                     
   581                           ; BSR set to: 0
   582                           ;main.c: 176:         Aug.solarMidMinutes = 3;
   583   000F10  0E00               	movlw	0
   584   000F12  6FC7               	movwf	(main@Aug+1)& (0+255),b
   585   000F14  0E03               	movlw	3
   586   000F16  6FC6               	movwf	main@Aug& (0+255),b
   587   000F18                     
   588                           ; BSR set to: 0
   589                           ;main.c: 178:     struct month_structure Sep;;main.c: 180:         Sep.days = 30;
   590   000F18  0E00               	movlw	0
   591   000F1A  6FD1               	movwf	(main@Sep+5)& (0+255),b
   592   000F1C  0E1E               	movlw	30
   593   000F1E  6FD0               	movwf	(main@Sep+4)& (0+255),b
   594   000F20                     
   595                           ; BSR set to: 0
   596                           ;main.c: 181:         Sep.solarMidHours = 23;
   597   000F20  0E00               	movlw	0
   598   000F22  6FCF               	movwf	(main@Sep+3)& (0+255),b
   599   000F24  0E17               	movlw	23
   600   000F26  6FCE               	movwf	(main@Sep+2)& (0+255),b
   601   000F28                     
   602                           ; BSR set to: 0
   603                           ;main.c: 182:         Sep.solarMidMinutes = 55;
   604   000F28  0E00               	movlw	0
   605   000F2A  6FCD               	movwf	(main@Sep+1)& (0+255),b
   606   000F2C  0E37               	movlw	55
   607   000F2E  6FCC               	movwf	main@Sep& (0+255),b
   608   000F30                     
   609                           ; BSR set to: 0
   610                           ;main.c: 184:     struct month_structure Oct;;main.c: 186:         Oct.days = 31;
   611   000F30  0E00               	movlw	0
   612   000F32  6FD7               	movwf	(main@Oct+5)& (0+255),b
   613   000F34  0E1F               	movlw	31
   614   000F36  6FD6               	movwf	(main@Oct+4)& (0+255),b
   615   000F38                     
   616                           ; BSR set to: 0
   617                           ;main.c: 187:         Oct.solarMidHours = 23;
   618   000F38  0E00               	movlw	0
   619   000F3A  6FD5               	movwf	(main@Oct+3)& (0+255),b
   620   000F3C  0E17               	movlw	23
   621   000F3E  6FD4               	movwf	(main@Oct+2)& (0+255),b
   622   000F40                     
   623                           ; BSR set to: 0
   624                           ;main.c: 188:         Oct.solarMidMinutes = 47;
   625   000F40  0E00               	movlw	0
   626   000F42  6FD3               	movwf	(main@Oct+1)& (0+255),b
   627   000F44  0E2F               	movlw	47
   628   000F46  6FD2               	movwf	main@Oct& (0+255),b
   629   000F48                     
   630                           ; BSR set to: 0
   631                           ;main.c: 190:     struct month_structure Nov;;main.c: 192:         Nov.days = 30;
   632   000F48  0E00               	movlw	0
   633   000F4A  6FDD               	movwf	(main@Nov+5)& (0+255),b
   634   000F4C  0E1E               	movlw	30
   635   000F4E  6FDC               	movwf	(main@Nov+4)& (0+255),b
   636   000F50                     
   637                           ; BSR set to: 0
   638                           ;main.c: 193:         Nov.solarMidHours = 23;
   639   000F50  0E00               	movlw	0
   640   000F52  6FDB               	movwf	(main@Nov+3)& (0+255),b
   641   000F54  0E17               	movlw	23
   642   000F56  6FDA               	movwf	(main@Nov+2)& (0+255),b
   643   000F58                     
   644                           ; BSR set to: 0
   645                           ;main.c: 194:         Nov.solarMidMinutes = 46;
   646   000F58  0E00               	movlw	0
   647   000F5A  6FD9               	movwf	(main@Nov+1)& (0+255),b
   648   000F5C  0E2E               	movlw	46
   649   000F5E  6FD8               	movwf	main@Nov& (0+255),b
   650   000F60                     
   651                           ; BSR set to: 0
   652                           ;main.c: 196:     struct month_structure Dec;;main.c: 198:         Dec.days = 31;
   653   000F60  0E00               	movlw	0
   654   000F62  6FE3               	movwf	(main@Dec+5)& (0+255),b
   655   000F64  0E1F               	movlw	31
   656   000F66  6FE2               	movwf	(main@Dec+4)& (0+255),b
   657   000F68                     
   658                           ; BSR set to: 0
   659                           ;main.c: 199:         Dec.solarMidHours = 23;
   660   000F68  0E00               	movlw	0
   661   000F6A  6FE1               	movwf	(main@Dec+3)& (0+255),b
   662   000F6C  0E17               	movlw	23
   663   000F6E  6FE0               	movwf	(main@Dec+2)& (0+255),b
   664   000F70                     
   665                           ; BSR set to: 0
   666                           ;main.c: 200:         Dec.solarMidMinutes = 56;
   667   000F70  0E00               	movlw	0
   668   000F72  6FDF               	movwf	(main@Dec+1)& (0+255),b
   669   000F74  0E38               	movlw	56
   670   000F76  6FDE               	movwf	main@Dec& (0+255),b
   671   000F78                     
   672                           ; BSR set to: 0
   673                           ;main.c: 214:     struct array_structure Dawn;;main.c: 215:         Dawn.size = 7;
   674   000F78  0E00               	movlw	0
   675   000F7A  6FE5               	movwf	(main@Dawn+1)& (0+255),b
   676   000F7C  0E07               	movlw	7
   677   000F7E  6FE4               	movwf	main@Dawn& (0+255),b
   678   000F80                     
   679                           ; BSR set to: 0
   680                           ;main.c: 216:         Dawn.hours = (int[]){0, 0, 0, 0, 0, 0, 0};
   681   000F80  EE20  F060         	lfsr	2,main@14166
   682   000F84  0E0D               	movlw	13
   683   000F86                     u851:
   684   000F86  6ADE               	clrf	postinc2,c
   685   000F88  06E8               	decf	wreg,f,c
   686   000F8A  E2FD               	bc	u851
   687   000F8C                     
   688                           ; BSR set to: 0
   689   000F8C  0E00               	movlw	high main@14166
   690   000F8E  6FE7               	movwf	(main@Dawn+3)& (0+255),b
   691   000F90  0E60               	movlw	low main@14166
   692   000F92  6FE6               	movwf	(main@Dawn+2)& (0+255),b
   693   000F94                     
   694                           ; BSR set to: 0
   695                           ;main.c: 217:         Dawn.minutes = (int[]){0, 0, 0, 0, 0, 0, 0};
   696   000F94  EE20  F06E         	lfsr	2,main@14168
   697   000F98  0E0D               	movlw	13
   698   000F9A                     u861:
   699   000F9A  6ADE               	clrf	postinc2,c
   700   000F9C  06E8               	decf	wreg,f,c
   701   000F9E  E2FD               	bc	u861
   702   000FA0                     
   703                           ; BSR set to: 0
   704   000FA0  0E00               	movlw	high main@14168
   705   000FA2  6FE9               	movwf	(main@Dawn+5)& (0+255),b
   706   000FA4  0E6E               	movlw	low main@14168
   707   000FA6  6FE8               	movwf	(main@Dawn+4)& (0+255),b
   708   000FA8                     
   709                           ; BSR set to: 0
   710                           ;main.c: 219:     struct array_structure Dusk;;main.c: 220:         Dusk.size = 7;
   711   000FA8  0E00               	movlw	0
   712   000FAA  6FEB               	movwf	(main@Dusk+1)& (0+255),b
   713   000FAC  0E07               	movlw	7
   714   000FAE  6FEA               	movwf	main@Dusk& (0+255),b
   715   000FB0                     
   716                           ; BSR set to: 0
   717                           ;main.c: 221:         Dusk.hours = (int[]){0, 0, 0, 0, 0, 0, 0};
   718   000FB0  EE20  F07C         	lfsr	2,main@14170
   719   000FB4  0E0D               	movlw	13
   720   000FB6                     u871:
   721   000FB6  6ADE               	clrf	postinc2,c
   722   000FB8  06E8               	decf	wreg,f,c
   723   000FBA  E2FD               	bc	u871
   724   000FBC                     
   725                           ; BSR set to: 0
   726   000FBC  0E00               	movlw	high main@14170
   727   000FBE  6FED               	movwf	(main@Dusk+3)& (0+255),b
   728   000FC0  0E7C               	movlw	low main@14170
   729   000FC2  6FEC               	movwf	(main@Dusk+2)& (0+255),b
   730   000FC4                     
   731                           ; BSR set to: 0
   732                           ;main.c: 222:         Dusk.minutes = (int[]){0, 0, 0, 0, 0, 0, 0};
   733   000FC4  EE20  F08A         	lfsr	2,main@14172
   734   000FC8  0E0D               	movlw	13
   735   000FCA                     u881:
   736   000FCA  6ADE               	clrf	postinc2,c
   737   000FCC  06E8               	decf	wreg,f,c
   738   000FCE  E2FD               	bc	u881
   739   000FD0                     
   740                           ; BSR set to: 0
   741   000FD0  0E00               	movlw	high main@14172
   742   000FD2  6FEF               	movwf	(main@Dusk+5)& (0+255),b
   743   000FD4  0E8A               	movlw	low main@14172
   744   000FD6  6FEE               	movwf	(main@Dusk+4)& (0+255),b
   745   000FD8                     
   746                           ; BSR set to: 0
   747                           ;main.c: 233:     ADC_init();
   748   000FD8  ECBB  F009         	call	_ADC_init	;wreg free
   749                           
   750                           ;main.c: 236:     unsigned int light_threshold = 70;
   751   000FDC  0E00               	movlw	0
   752   000FDE  0100               	movlb	0	; () banked
   753   000FE0  6F99               	movwf	(main@light_threshold+1)& (0+255),b
   754   000FE2  0E46               	movlw	70
   755   000FE4  6F98               	movwf	main@light_threshold& (0+255),b
   756   000FE6                     l1562:
   757                           
   758                           ; BSR set to: 0
   759                           ;main.c: 245:         clock.seconds = GLOBALsecs;
   760   000FE6  C03F  F0F8         	movff	_GLOBALsecs,main@clock
   761   000FEA  C040  F0F9         	movff	_GLOBALsecs+1,main@clock+1
   762   000FEE                     
   763                           ; BSR set to: 0
   764                           ;main.c: 246:         UpdateClock(&GLOBALsecs, &clock.minutes, &clock.hours, &clock.days
      +                          );
   765   000FEE  0E3F               	movlw	low _GLOBALsecs
   766   000FF0  6E39               	movwf	UpdateClock@seconds^0,c
   767   000FF2  0EFA               	movlw	low (main@clock+2)
   768   000FF4  6E3A               	movwf	UpdateClock@minutes^0,c
   769   000FF6  0EFC               	movlw	low (main@clock+4)
   770   000FF8  6E3B               	movwf	UpdateClock@hours^0,c
   771   000FFA  0EFE               	movlw	low (main@clock+6)
   772   000FFC  6E3C               	movwf	UpdateClock@days^0,c
   773   000FFE  EC64  F008         	call	_UpdateClock	;wreg free
   774   001002                     
   775                           ;main.c: 249:         LEDarray_disp_bin(clock.hours);
   776   001002  C0FC  F039         	movff	main@clock+4,LEDarray_disp_bin@number
   777   001006  C0FD  F03A         	movff	main@clock+5,LEDarray_disp_bin@number+1
   778   00100A  EC1C  F009         	call	_LEDarray_disp_bin	;wreg free
   779   00100E                     
   780                           ;main.c: 262:         unsigned int curval = ADC_getval();
   781   00100E  EC80  F009         	call	_ADC_getval	;wreg free
   782   001012  C039  F09A         	movff	?_ADC_getval,main@curval
   783   001016  C03A  F09B         	movff	?_ADC_getval+1,main@curval+1
   784   00101A                     
   785                           ;main.c: 265:         if (curval < light_threshold){
   786   00101A  0100               	movlb	0	; () banked
   787   00101C  5198               	movf	main@light_threshold& (0+255),w,b
   788   00101E  5D9A               	subwf	main@curval& (0+255),w,b
   789   001020  5199               	movf	(main@light_threshold+1)& (0+255),w,b
   790   001022  599B               	subwfb	(main@curval+1)& (0+255),w,b
   791   001024  B0D8               	btfsc	status,0,c
   792   001026  EF17  F008         	goto	u891
   793   00102A  EF19  F008         	goto	u890
   794   00102E                     u891:
   795   00102E  EF54  F008         	goto	l1580
   796   001032                     u890:
   797   001032                     
   798                           ; BSR set to: 0
   799                           ;main.c: 268:             if ((clock.hours >= 1 && clock.hours < 5) || (clock.hours >= 8
      +                           && clock.hours < 15)) {
   800   001032  BFFD               	btfsc	(main@clock+5)& (0+255),7,b
   801   001034  EF24  F008         	goto	u901
   802   001038  51FD               	movf	(main@clock+5)& (0+255),w,b
   803   00103A  E108               	bnz	u900
   804   00103C  05FC               	decf	(main@clock+4)& (0+255),w,b
   805   00103E  A0D8               	btfss	status,0,c
   806   001040  EF24  F008         	goto	u901
   807   001044  EF26  F008         	goto	u900
   808   001048                     u901:
   809   001048  EF34  F008         	goto	l1576
   810   00104C                     u900:
   811   00104C                     
   812                           ; BSR set to: 0
   813   00104C  BFFD               	btfsc	(main@clock+5)& (0+255),7,b
   814   00104E  EF32  F008         	goto	u911
   815   001052  51FD               	movf	(main@clock+5)& (0+255),w,b
   816   001054  E109               	bnz	u910
   817   001056  0E05               	movlw	5
   818   001058  5DFC               	subwf	(main@clock+4)& (0+255),w,b
   819   00105A  A0D8               	btfss	status,0,c
   820   00105C  EF32  F008         	goto	u911
   821   001060  EF34  F008         	goto	u910
   822   001064                     u911:
   823   001064  EF50  F008         	goto	l41
   824   001068                     u910:
   825   001068                     l1576:
   826                           
   827                           ; BSR set to: 0
   828   001068  BFFD               	btfsc	(main@clock+5)& (0+255),7,b
   829   00106A  EF40  F008         	goto	u921
   830   00106E  51FD               	movf	(main@clock+5)& (0+255),w,b
   831   001070  E109               	bnz	u920
   832   001072  0E08               	movlw	8
   833   001074  5DFC               	subwf	(main@clock+4)& (0+255),w,b
   834   001076  A0D8               	btfss	status,0,c
   835   001078  EF40  F008         	goto	u921
   836   00107C  EF42  F008         	goto	u920
   837   001080                     u921:
   838   001080  EF53  F008         	goto	l39
   839   001084                     u920:
   840   001084                     
   841                           ; BSR set to: 0
   842   001084  BFFD               	btfsc	(main@clock+5)& (0+255),7,b
   843   001086  EF50  F008         	goto	u930
   844   00108A  51FD               	movf	(main@clock+5)& (0+255),w,b
   845   00108C  E107               	bnz	u931
   846   00108E  0E0F               	movlw	15
   847   001090  5DFC               	subwf	(main@clock+4)& (0+255),w,b
   848   001092  B0D8               	btfsc	status,0,c
   849   001094  EF4E  F008         	goto	u931
   850   001098  EF50  F008         	goto	u930
   851   00109C                     u931:
   852   00109C  EF53  F008         	goto	l39
   853   0010A0                     u930:
   854   0010A0                     l41:
   855                           
   856                           ; BSR set to: 0
   857                           ;main.c: 269:                 LATHbits.LATH3 = 0;
   858   0010A0  9680               	bcf	128,3,c	;volatile
   859                           
   860                           ;main.c: 270:             }
   861   0010A2  EF54  F008         	goto	l1580
   862   0010A6                     l39:
   863                           
   864                           ; BSR set to: 0
   865                           ;main.c: 273:                 LATHbits.LATH3 = 1;
   866   0010A6  8680               	bsf	128,3,c	;volatile
   867   0010A8                     l1580:
   868                           
   869                           ; BSR set to: 0
   870                           ;main.c: 277:         if (curval > light_threshold){
   871   0010A8  519A               	movf	main@curval& (0+255),w,b
   872   0010AA  5D98               	subwf	main@light_threshold& (0+255),w,b
   873   0010AC  519B               	movf	(main@curval+1)& (0+255),w,b
   874   0010AE  5999               	subwfb	(main@light_threshold+1)& (0+255),w,b
   875   0010B0  B0D8               	btfsc	status,0,c
   876   0010B2  EF5D  F008         	goto	u941
   877   0010B6  EF5F  F008         	goto	u940
   878   0010BA                     u941:
   879   0010BA  EFF3  F007         	goto	l1562
   880   0010BE                     u940:
   881   0010BE                     
   882                           ; BSR set to: 0
   883                           ;main.c: 278:             LATHbits.LATH3 = 0;
   884   0010BE  9680               	bcf	128,3,c	;volatile
   885   0010C0  EFF3  F007         	goto	l1562
   886   0010C4  EF16  F000         	goto	start
   887   0010C8                     __end_of_main:
   888                           	callstack 0
   889                           
   890 ;; *************** function _UpdateClock *****************
   891 ;; Defined at:
   892 ;;		line 24 in file "clock.c"
   893 ;; Parameters:    Size  Location     Type
   894 ;;  seconds         1    0[COMRAM] PTR int 
   895 ;;		 -> GLOBALsecs(2), 
   896 ;;  minutes         1    1[COMRAM] PTR int 
   897 ;;		 -> main@clock(8), 
   898 ;;  hours           1    2[COMRAM] PTR int 
   899 ;;		 -> main@clock(8), 
   900 ;;  days            1    3[COMRAM] PTR int 
   901 ;;		 -> main@clock(8), 
   902 ;; Auto vars:     Size  Location     Type
   903 ;;		None
   904 ;; Return value:  Size  Location     Type
   905 ;;                  1    wreg      void 
   906 ;; Registers used:
   907 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
   908 ;; Tracked objects:
   909 ;;		On entry : 0/0
   910 ;;		On exit  : 0/0
   911 ;;		Unchanged: 0/0
   912 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   913 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   914 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   915 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   916 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   917 ;;Total ram usage:        6 bytes
   918 ;; Hardware stack levels used: 1
   919 ;; Hardware stack levels required when called: 1
   920 ;; This function calls:
   921 ;;		Nothing
   922 ;; This function is called by:
   923 ;;		_main
   924 ;; This function uses a non-reentrant model
   925 ;;
   926                           
   927                           	psect	text1
   928   0010C8                     __ptext1:
   929                           	callstack 0
   930   0010C8                     _UpdateClock:
   931                           	callstack 29
   932   0010C8                     
   933                           ;clock.c: 27:             *hours = *seconds;
   934   0010C8  5039               	movf	UpdateClock@seconds^0,w,c
   935   0010CA  6ED9               	movwf	fsr2l,c
   936   0010CC  6ADA               	clrf	fsr2h,c
   937   0010CE  503B               	movf	UpdateClock@hours^0,w,c
   938   0010D0  6EE1               	movwf	fsr1l,c
   939   0010D2  6AE2               	clrf	fsr1h,c
   940   0010D4  CFDE FFE6          	movff	postinc2,postinc1
   941   0010D8  CFDD FFE5          	movff	postdec2,postdec1
   942   0010DC                     
   943                           ;clock.c: 28:             if (*seconds >= 24 ){
   944   0010DC  5039               	movf	UpdateClock@seconds^0,w,c
   945   0010DE  6ED9               	movwf	fsr2l,c
   946   0010E0  6ADA               	clrf	fsr2h,c
   947   0010E2  0E01               	movlw	1
   948   0010E4  BEDB               	btfsc	plusw2,7,c
   949   0010E6  EF7F  F008         	goto	u711
   950   0010EA  0E01               	movlw	1
   951   0010EC  50DB               	movf	plusw2,w,c
   952   0010EE  E109               	bnz	u710
   953   0010F0  0E18               	movlw	24
   954   0010F2  5CDE               	subwf	postinc2,w,c
   955   0010F4  A0D8               	btfss	status,0,c
   956   0010F6  EF7F  F008         	goto	u711
   957   0010FA  EF81  F008         	goto	u710
   958   0010FE                     u711:
   959   0010FE  EF9D  F008         	goto	l1392
   960   001102                     u710:
   961   001102                     
   962                           ;clock.c: 29:                 *seconds = 0;
   963   001102  5039               	movf	UpdateClock@seconds^0,w,c
   964   001104  6ED9               	movwf	fsr2l,c
   965   001106  6ADA               	clrf	fsr2h,c
   966   001108  6ADE               	clrf	postinc2,c
   967   00110A  6ADD               	clrf	postdec2,c
   968                           
   969                           ;clock.c: 30:                 *hours = 0;
   970   00110C  503B               	movf	UpdateClock@hours^0,w,c
   971   00110E  6ED9               	movwf	fsr2l,c
   972   001110  6ADA               	clrf	fsr2h,c
   973   001112  6ADE               	clrf	postinc2,c
   974   001114  6ADD               	clrf	postdec2,c
   975   001116                     
   976                           ;clock.c: 31:                 *days = *days + 1;
   977   001116  503C               	movf	UpdateClock@days^0,w,c
   978   001118  6ED9               	movwf	fsr2l,c
   979   00111A  6ADA               	clrf	fsr2h,c
   980   00111C  CFDE F03D          	movff	postinc2,??_UpdateClock
   981   001120  CFDD F03E          	movff	postdec2,??_UpdateClock+1
   982   001124  0E01               	movlw	1
   983   001126  263D               	addwf	??_UpdateClock^0,f,c
   984   001128  0E00               	movlw	0
   985   00112A  223E               	addwfc	(??_UpdateClock+1)^0,f,c
   986   00112C  503C               	movf	UpdateClock@days^0,w,c
   987   00112E  6ED9               	movwf	fsr2l,c
   988   001130  6ADA               	clrf	fsr2h,c
   989   001132  C03D  FFDE         	movff	??_UpdateClock,postinc2
   990   001136  C03E  FFDD         	movff	??_UpdateClock+1,postdec2
   991   00113A                     l1392:
   992                           
   993                           ;clock.c: 35:     if (*seconds >= 60 ){
   994   00113A  5039               	movf	UpdateClock@seconds^0,w,c
   995   00113C  6ED9               	movwf	fsr2l,c
   996   00113E  6ADA               	clrf	fsr2h,c
   997   001140  0E01               	movlw	1
   998   001142  BEDB               	btfsc	plusw2,7,c
   999   001144  EFAE  F008         	goto	u721
  1000   001148  0E01               	movlw	1
  1001   00114A  50DB               	movf	plusw2,w,c
  1002   00114C  E109               	bnz	u720
  1003   00114E  0E3C               	movlw	60
  1004   001150  5CDE               	subwf	postinc2,w,c
  1005   001152  A0D8               	btfss	status,0,c
  1006   001154  EFAE  F008         	goto	u721
  1007   001158  EFB0  F008         	goto	u720
  1008   00115C                     u721:
  1009   00115C  EFC7  F008         	goto	l1398
  1010   001160                     u720:
  1011   001160                     
  1012                           ;clock.c: 36:         *seconds = 0;
  1013   001160  5039               	movf	UpdateClock@seconds^0,w,c
  1014   001162  6ED9               	movwf	fsr2l,c
  1015   001164  6ADA               	clrf	fsr2h,c
  1016   001166  6ADE               	clrf	postinc2,c
  1017   001168  6ADD               	clrf	postdec2,c
  1018   00116A                     
  1019                           ;clock.c: 37:         *minutes = *minutes + 1;
  1020   00116A  503A               	movf	UpdateClock@minutes^0,w,c
  1021   00116C  6ED9               	movwf	fsr2l,c
  1022   00116E  6ADA               	clrf	fsr2h,c
  1023   001170  CFDE F03D          	movff	postinc2,??_UpdateClock
  1024   001174  CFDD F03E          	movff	postdec2,??_UpdateClock+1
  1025   001178  0E01               	movlw	1
  1026   00117A  263D               	addwf	??_UpdateClock^0,f,c
  1027   00117C  0E00               	movlw	0
  1028   00117E  223E               	addwfc	(??_UpdateClock+1)^0,f,c
  1029   001180  503A               	movf	UpdateClock@minutes^0,w,c
  1030   001182  6ED9               	movwf	fsr2l,c
  1031   001184  6ADA               	clrf	fsr2h,c
  1032   001186  C03D  FFDE         	movff	??_UpdateClock,postinc2
  1033   00118A  C03E  FFDD         	movff	??_UpdateClock+1,postdec2
  1034   00118E                     l1398:
  1035                           
  1036                           ;clock.c: 40:     if (*minutes >= 60){
  1037   00118E  503A               	movf	UpdateClock@minutes^0,w,c
  1038   001190  6ED9               	movwf	fsr2l,c
  1039   001192  6ADA               	clrf	fsr2h,c
  1040   001194  0E01               	movlw	1
  1041   001196  BEDB               	btfsc	plusw2,7,c
  1042   001198  EFD8  F008         	goto	u731
  1043   00119C  0E01               	movlw	1
  1044   00119E  50DB               	movf	plusw2,w,c
  1045   0011A0  E109               	bnz	u730
  1046   0011A2  0E3C               	movlw	60
  1047   0011A4  5CDE               	subwf	postinc2,w,c
  1048   0011A6  A0D8               	btfss	status,0,c
  1049   0011A8  EFD8  F008         	goto	u731
  1050   0011AC  EFDA  F008         	goto	u730
  1051   0011B0                     u731:
  1052   0011B0  EFF1  F008         	goto	l1404
  1053   0011B4                     u730:
  1054   0011B4                     
  1055                           ;clock.c: 41:     *minutes = 0;
  1056   0011B4  503A               	movf	UpdateClock@minutes^0,w,c
  1057   0011B6  6ED9               	movwf	fsr2l,c
  1058   0011B8  6ADA               	clrf	fsr2h,c
  1059   0011BA  6ADE               	clrf	postinc2,c
  1060   0011BC  6ADD               	clrf	postdec2,c
  1061   0011BE                     
  1062                           ;clock.c: 42:     *hours = *hours + 1;
  1063   0011BE  503B               	movf	UpdateClock@hours^0,w,c
  1064   0011C0  6ED9               	movwf	fsr2l,c
  1065   0011C2  6ADA               	clrf	fsr2h,c
  1066   0011C4  CFDE F03D          	movff	postinc2,??_UpdateClock
  1067   0011C8  CFDD F03E          	movff	postdec2,??_UpdateClock+1
  1068   0011CC  0E01               	movlw	1
  1069   0011CE  263D               	addwf	??_UpdateClock^0,f,c
  1070   0011D0  0E00               	movlw	0
  1071   0011D2  223E               	addwfc	(??_UpdateClock+1)^0,f,c
  1072   0011D4  503B               	movf	UpdateClock@hours^0,w,c
  1073   0011D6  6ED9               	movwf	fsr2l,c
  1074   0011D8  6ADA               	clrf	fsr2h,c
  1075   0011DA  C03D  FFDE         	movff	??_UpdateClock,postinc2
  1076   0011DE  C03E  FFDD         	movff	??_UpdateClock+1,postdec2
  1077   0011E2                     l1404:
  1078                           
  1079                           ;clock.c: 45:     if (*hours >= 24){
  1080   0011E2  503B               	movf	UpdateClock@hours^0,w,c
  1081   0011E4  6ED9               	movwf	fsr2l,c
  1082   0011E6  6ADA               	clrf	fsr2h,c
  1083   0011E8  0E01               	movlw	1
  1084   0011EA  BEDB               	btfsc	plusw2,7,c
  1085   0011EC  EF02  F009         	goto	u741
  1086   0011F0  0E01               	movlw	1
  1087   0011F2  50DB               	movf	plusw2,w,c
  1088   0011F4  E109               	bnz	u740
  1089   0011F6  0E18               	movlw	24
  1090   0011F8  5CDE               	subwf	postinc2,w,c
  1091   0011FA  A0D8               	btfss	status,0,c
  1092   0011FC  EF02  F009         	goto	u741
  1093   001200  EF04  F009         	goto	u740
  1094   001204                     u741:
  1095   001204  EF1B  F009         	goto	l252
  1096   001208                     u740:
  1097   001208                     
  1098                           ;clock.c: 46:     *hours = 0;
  1099   001208  503B               	movf	UpdateClock@hours^0,w,c
  1100   00120A  6ED9               	movwf	fsr2l,c
  1101   00120C  6ADA               	clrf	fsr2h,c
  1102   00120E  6ADE               	clrf	postinc2,c
  1103   001210  6ADD               	clrf	postdec2,c
  1104   001212                     
  1105                           ;clock.c: 47:     *days = *days + 1;
  1106   001212  503C               	movf	UpdateClock@days^0,w,c
  1107   001214  6ED9               	movwf	fsr2l,c
  1108   001216  6ADA               	clrf	fsr2h,c
  1109   001218  CFDE F03D          	movff	postinc2,??_UpdateClock
  1110   00121C  CFDD F03E          	movff	postdec2,??_UpdateClock+1
  1111   001220  0E01               	movlw	1
  1112   001222  263D               	addwf	??_UpdateClock^0,f,c
  1113   001224  0E00               	movlw	0
  1114   001226  223E               	addwfc	(??_UpdateClock+1)^0,f,c
  1115   001228  503C               	movf	UpdateClock@days^0,w,c
  1116   00122A  6ED9               	movwf	fsr2l,c
  1117   00122C  6ADA               	clrf	fsr2h,c
  1118   00122E  C03D  FFDE         	movff	??_UpdateClock,postinc2
  1119   001232  C03E  FFDD         	movff	??_UpdateClock+1,postdec2
  1120   001236                     l252:
  1121   001236  0012               	return		;funcret
  1122   001238                     __end_of_UpdateClock:
  1123                           	callstack 0
  1124                           
  1125 ;; *************** function _Timer0_init *****************
  1126 ;; Defined at:
  1127 ;;		line 8 in file "timers.c"
  1128 ;; Parameters:    Size  Location     Type
  1129 ;;		None
  1130 ;; Auto vars:     Size  Location     Type
  1131 ;;		None
  1132 ;; Return value:  Size  Location     Type
  1133 ;;                  1    wreg      void 
  1134 ;; Registers used:
  1135 ;;		wreg, status,2
  1136 ;; Tracked objects:
  1137 ;;		On entry : 0/0
  1138 ;;		On exit  : 0/0
  1139 ;;		Unchanged: 0/0
  1140 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1141 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1142 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1143 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1144 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1145 ;;Total ram usage:        0 bytes
  1146 ;; Hardware stack levels used: 1
  1147 ;; Hardware stack levels required when called: 1
  1148 ;; This function calls:
  1149 ;;		Nothing
  1150 ;; This function is called by:
  1151 ;;		_main
  1152 ;; This function uses a non-reentrant model
  1153 ;;
  1154                           
  1155                           	psect	text2
  1156   001356                     __ptext2:
  1157                           	callstack 0
  1158   001356                     _Timer0_init:
  1159                           	callstack 29
  1160   001356                     
  1161                           ;timers.c: 10:     T0CON1bits.T0CS=0b010;
  1162   001356  50D6               	movf	214,w,c	;volatile
  1163   001358  0B1F               	andlw	-225
  1164   00135A  0940               	iorlw	64
  1165   00135C  6ED6               	movwf	214,c	;volatile
  1166   00135E                     
  1167                           ;timers.c: 11:     T0CON1bits.T0ASYNC=1;
  1168   00135E  88D6               	bsf	214,4,c	;volatile
  1169                           
  1170                           ;timers.c: 13:     T0CON1bits.T0CKPS=0b1000;
  1171   001360  50D6               	movf	214,w,c	;volatile
  1172   001362  0BF0               	andlw	-16
  1173   001364  0908               	iorlw	8
  1174   001366  6ED6               	movwf	214,c	;volatile
  1175   001368                     
  1176                           ;timers.c: 15:     T0CON0bits.T016BIT=1;
  1177   001368  88D5               	bsf	213,4,c	;volatile
  1178                           
  1179                           ;timers.c: 18:     TMR0H = 0b00001011;
  1180   00136A  0E0B               	movlw	11
  1181   00136C  6ED4               	movwf	212,c	;volatile
  1182                           
  1183                           ;timers.c: 19:     TMR0L = 0b11011100;
  1184   00136E  0EDC               	movlw	220
  1185   001370  6ED3               	movwf	211,c	;volatile
  1186   001372                     
  1187                           ;timers.c: 35:     T0CON0bits.T0EN=1;
  1188   001372  8ED5               	bsf	213,7,c	;volatile
  1189   001374  0012               	return		;funcret
  1190   001376                     __end_of_Timer0_init:
  1191                           	callstack 0
  1192                           
  1193 ;; *************** function _LEDarray_init *****************
  1194 ;; Defined at:
  1195 ;;		line 8 in file "LEDarray.c"
  1196 ;; Parameters:    Size  Location     Type
  1197 ;;		None
  1198 ;; Auto vars:     Size  Location     Type
  1199 ;;		None
  1200 ;; Return value:  Size  Location     Type
  1201 ;;                  1    wreg      void 
  1202 ;; Registers used:
  1203 ;;		None
  1204 ;; Tracked objects:
  1205 ;;		On entry : 0/0
  1206 ;;		On exit  : 0/0
  1207 ;;		Unchanged: 0/0
  1208 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1209 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1210 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1211 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1212 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1213 ;;Total ram usage:        0 bytes
  1214 ;; Hardware stack levels used: 1
  1215 ;; Hardware stack levels required when called: 1
  1216 ;; This function calls:
  1217 ;;		Nothing
  1218 ;; This function is called by:
  1219 ;;		_main
  1220 ;; This function uses a non-reentrant model
  1221 ;;
  1222                           
  1223                           	psect	text3
  1224   001330                     __ptext3:
  1225                           	callstack 0
  1226   001330                     _LEDarray_init:
  1227                           	callstack 29
  1228   001330                     
  1229                           ;LEDarray.c: 16:     TRISGbits.TRISG0 = 0;
  1230   001330  9087               	bcf	135,0,c	;volatile
  1231                           
  1232                           ;LEDarray.c: 17:     LATGbits.LATG0 = 0;
  1233   001332  907F               	bcf	127,0,c	;volatile
  1234                           
  1235                           ;LEDarray.c: 19:     TRISGbits.TRISG1 = 0;
  1236   001334  9287               	bcf	135,1,c	;volatile
  1237                           
  1238                           ;LEDarray.c: 20:     LATGbits.LATG1 = 0;
  1239   001336  927F               	bcf	127,1,c	;volatile
  1240                           
  1241                           ;LEDarray.c: 22:     TRISAbits.TRISA2 = 0;
  1242   001338  9481               	bcf	129,2,c	;volatile
  1243                           
  1244                           ;LEDarray.c: 23:     LATAbits.LATA2 = 0;
  1245   00133A  9479               	bcf	121,2,c	;volatile
  1246                           
  1247                           ;LEDarray.c: 25:     TRISFbits.TRISF6 = 0;
  1248   00133C  9C86               	bcf	134,6,c	;volatile
  1249                           
  1250                           ;LEDarray.c: 26:     LATFbits.LATF6 = 0;
  1251   00133E  9C7E               	bcf	126,6,c	;volatile
  1252                           
  1253                           ;LEDarray.c: 28:     TRISAbits.TRISA4 = 0;
  1254   001340  9881               	bcf	129,4,c	;volatile
  1255                           
  1256                           ;LEDarray.c: 29:     LATAbits.LATA4 = 0;
  1257   001342  9879               	bcf	121,4,c	;volatile
  1258                           
  1259                           ;LEDarray.c: 31:     TRISAbits.TRISA5 = 0;
  1260   001344  9A81               	bcf	129,5,c	;volatile
  1261                           
  1262                           ;LEDarray.c: 32:     LATAbits.LATA5 = 0;
  1263   001346  9A79               	bcf	121,5,c	;volatile
  1264                           
  1265                           ;LEDarray.c: 34:     TRISFbits.TRISF0 = 0;
  1266   001348  9086               	bcf	134,0,c	;volatile
  1267                           
  1268                           ;LEDarray.c: 35:     LATFbits.LATF0 = 0;
  1269   00134A  907E               	bcf	126,0,c	;volatile
  1270                           
  1271                           ;LEDarray.c: 37:     TRISBbits.TRISB0 = 0;
  1272   00134C  9082               	bcf	130,0,c	;volatile
  1273                           
  1274                           ;LEDarray.c: 38:     LATBbits.LATB0 = 0;
  1275   00134E  907A               	bcf	122,0,c	;volatile
  1276                           
  1277                           ;LEDarray.c: 40:     TRISBbits.TRISB1 = 0;
  1278   001350  9282               	bcf	130,1,c	;volatile
  1279                           
  1280                           ;LEDarray.c: 41:     LATBbits.LATB1 = 0;
  1281   001352  927A               	bcf	122,1,c	;volatile
  1282   001354  0012               	return		;funcret
  1283   001356                     __end_of_LEDarray_init:
  1284                           	callstack 0
  1285                           
  1286 ;; *************** function _LEDarray_disp_bin *****************
  1287 ;; Defined at:
  1288 ;;		line 49 in file "LEDarray.c"
  1289 ;; Parameters:    Size  Location     Type
  1290 ;;  number          2    0[COMRAM] unsigned int 
  1291 ;; Auto vars:     Size  Location     Type
  1292 ;;		None
  1293 ;; Return value:  Size  Location     Type
  1294 ;;                  1    wreg      void 
  1295 ;; Registers used:
  1296 ;;		None
  1297 ;; Tracked objects:
  1298 ;;		On entry : 0/0
  1299 ;;		On exit  : 0/0
  1300 ;;		Unchanged: 0/0
  1301 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1302 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1303 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1304 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1305 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1306 ;;Total ram usage:        2 bytes
  1307 ;; Hardware stack levels used: 1
  1308 ;; Hardware stack levels required when called: 1
  1309 ;; This function calls:
  1310 ;;		Nothing
  1311 ;; This function is called by:
  1312 ;;		_main
  1313 ;; This function uses a non-reentrant model
  1314 ;;
  1315                           
  1316                           	psect	text4
  1317   001238                     __ptext4:
  1318                           	callstack 0
  1319   001238                     _LEDarray_disp_bin:
  1320                           	callstack 29
  1321   001238                     
  1322                           ;LEDarray.c: 49: void LEDarray_disp_bin(unsigned int number);LEDarray.c: 50: {;LEDarray.
      +                          c: 53:     if (number & 0b000000001){ LATGbits.LATG0 = 1 ; }
  1323   001238  A039               	btfss	LEDarray_disp_bin@number^0,0,c
  1324   00123A  EF21  F009         	goto	u751
  1325   00123E  EF23  F009         	goto	u750
  1326   001242                     u751:
  1327   001242  EF26  F009         	goto	l91
  1328   001246                     u750:
  1329   001246  807F               	bsf	127,0,c	;volatile
  1330   001248  EF27  F009         	goto	l92
  1331   00124C                     l91:
  1332   00124C  907F               	bcf	127,0,c	;volatile
  1333   00124E                     l92:
  1334                           
  1335                           ;LEDarray.c: 56:     if (number & 0b000000010){ LATGbits.LATG1 = 1 ; }
  1336   00124E  A239               	btfss	LEDarray_disp_bin@number^0,1,c
  1337   001250  EF2C  F009         	goto	u761
  1338   001254  EF2E  F009         	goto	u760
  1339   001258                     u761:
  1340   001258  EF31  F009         	goto	l93
  1341   00125C                     u760:
  1342   00125C  827F               	bsf	127,1,c	;volatile
  1343   00125E  EF32  F009         	goto	l94
  1344   001262                     l93:
  1345   001262  927F               	bcf	127,1,c	;volatile
  1346   001264                     l94:
  1347                           
  1348                           ;LEDarray.c: 59:     if (number & 0b000000100){ LATAbits.LATA2 = 1 ; }
  1349   001264  A439               	btfss	LEDarray_disp_bin@number^0,2,c
  1350   001266  EF37  F009         	goto	u771
  1351   00126A  EF39  F009         	goto	u770
  1352   00126E                     u771:
  1353   00126E  EF3C  F009         	goto	l95
  1354   001272                     u770:
  1355   001272  8479               	bsf	121,2,c	;volatile
  1356   001274  EF3D  F009         	goto	l96
  1357   001278                     l95:
  1358   001278  9479               	bcf	121,2,c	;volatile
  1359   00127A                     l96:
  1360                           
  1361                           ;LEDarray.c: 62:     if (number & 0b000001000){ LATFbits.LATF6 = 1 ; }
  1362   00127A  A639               	btfss	LEDarray_disp_bin@number^0,3,c
  1363   00127C  EF42  F009         	goto	u781
  1364   001280  EF44  F009         	goto	u780
  1365   001284                     u781:
  1366   001284  EF47  F009         	goto	l97
  1367   001288                     u780:
  1368   001288  8C7E               	bsf	126,6,c	;volatile
  1369   00128A  EF48  F009         	goto	l98
  1370   00128E                     l97:
  1371   00128E  9C7E               	bcf	126,6,c	;volatile
  1372   001290                     l98:
  1373                           
  1374                           ;LEDarray.c: 65:     if (number & 0b000010000){ LATAbits.LATA4 = 1 ; }
  1375   001290  A839               	btfss	LEDarray_disp_bin@number^0,4,c
  1376   001292  EF4D  F009         	goto	u791
  1377   001296  EF4F  F009         	goto	u790
  1378   00129A                     u791:
  1379   00129A  EF52  F009         	goto	l99
  1380   00129E                     u790:
  1381   00129E  8879               	bsf	121,4,c	;volatile
  1382   0012A0  EF53  F009         	goto	l100
  1383   0012A4                     l99:
  1384   0012A4  9879               	bcf	121,4,c	;volatile
  1385   0012A6                     l100:
  1386                           
  1387                           ;LEDarray.c: 68:     if (number & 0b000100000){ LATAbits.LATA5 = 1 ; }
  1388   0012A6  AA39               	btfss	LEDarray_disp_bin@number^0,5,c
  1389   0012A8  EF58  F009         	goto	u801
  1390   0012AC  EF5A  F009         	goto	u800
  1391   0012B0                     u801:
  1392   0012B0  EF5D  F009         	goto	l101
  1393   0012B4                     u800:
  1394   0012B4  8A79               	bsf	121,5,c	;volatile
  1395   0012B6  EF5E  F009         	goto	l102
  1396   0012BA                     l101:
  1397   0012BA  9A79               	bcf	121,5,c	;volatile
  1398   0012BC                     l102:
  1399                           
  1400                           ;LEDarray.c: 71:     if (number & 0b001000000){ LATFbits.LATF0 = 1 ; }
  1401   0012BC  AC39               	btfss	LEDarray_disp_bin@number^0,6,c
  1402   0012BE  EF63  F009         	goto	u811
  1403   0012C2  EF65  F009         	goto	u810
  1404   0012C6                     u811:
  1405   0012C6  EF68  F009         	goto	l103
  1406   0012CA                     u810:
  1407   0012CA  807E               	bsf	126,0,c	;volatile
  1408   0012CC  EF69  F009         	goto	l104
  1409   0012D0                     l103:
  1410   0012D0  907E               	bcf	126,0,c	;volatile
  1411   0012D2                     l104:
  1412                           
  1413                           ;LEDarray.c: 74:     if (number & 0b010000000){ LATBbits.LATB0 = 1 ; }
  1414   0012D2  AE39               	btfss	LEDarray_disp_bin@number^0,7,c
  1415   0012D4  EF6E  F009         	goto	u821
  1416   0012D8  EF70  F009         	goto	u820
  1417   0012DC                     u821:
  1418   0012DC  EF73  F009         	goto	l105
  1419   0012E0                     u820:
  1420   0012E0  807A               	bsf	122,0,c	;volatile
  1421   0012E2  EF74  F009         	goto	l106
  1422   0012E6                     l105:
  1423   0012E6  907A               	bcf	122,0,c	;volatile
  1424   0012E8                     l106:
  1425                           
  1426                           ;LEDarray.c: 77:     if (number & 0b100000000){ LATBbits.LATB1 = 1 ; }
  1427   0012E8  A03A               	btfss	(LEDarray_disp_bin@number+1)^0,0,c
  1428   0012EA  EF79  F009         	goto	u831
  1429   0012EE  EF7B  F009         	goto	u830
  1430   0012F2                     u831:
  1431   0012F2  EF7E  F009         	goto	l107
  1432   0012F6                     u830:
  1433   0012F6  827A               	bsf	122,1,c	;volatile
  1434   0012F8  EF7F  F009         	goto	l109
  1435   0012FC                     l107:
  1436   0012FC  927A               	bcf	122,1,c	;volatile
  1437   0012FE                     l109:
  1438   0012FE  0012               	return		;funcret
  1439   001300                     __end_of_LEDarray_disp_bin:
  1440                           	callstack 0
  1441                           
  1442 ;; *************** function _Interrupts_init *****************
  1443 ;; Defined at:
  1444 ;;		line 9 in file "interrupts.c"
  1445 ;; Parameters:    Size  Location     Type
  1446 ;;		None
  1447 ;; Auto vars:     Size  Location     Type
  1448 ;;		None
  1449 ;; Return value:  Size  Location     Type
  1450 ;;                  1    wreg      void 
  1451 ;; Registers used:
  1452 ;;		None
  1453 ;; Tracked objects:
  1454 ;;		On entry : 0/0
  1455 ;;		On exit  : 0/0
  1456 ;;		Unchanged: 0/0
  1457 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1458 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1459 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1460 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1461 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1462 ;;Total ram usage:        0 bytes
  1463 ;; Hardware stack levels used: 1
  1464 ;; Hardware stack levels required when called: 1
  1465 ;; This function calls:
  1466 ;;		Nothing
  1467 ;; This function is called by:
  1468 ;;		_main
  1469 ;; This function uses a non-reentrant model
  1470 ;;
  1471                           
  1472                           	psect	text5
  1473   0013A6                     __ptext5:
  1474                           	callstack 0
  1475   0013A6                     _Interrupts_init:
  1476                           	callstack 29
  1477   0013A6                     
  1478                           ;interrupts.c: 15:   INTCONbits.PEIE = 1;
  1479   0013A6  8CF2               	bsf	242,6,c	;volatile
  1480                           
  1481                           ;interrupts.c: 19:     PIE0bits.TMR0IE = 1;
  1482   0013A8  010E               	movlb	14	; () banked
  1483   0013AA  8B29               	bsf	41,5,b	;volatile
  1484                           
  1485                           ;interrupts.c: 20:     PIR0bits.TMR0IF = 0;
  1486   0013AC  9B33               	bcf	51,5,b	;volatile
  1487                           
  1488                           ;interrupts.c: 21:     IPR0bits.TMR0IP = 1;
  1489   0013AE  8B1F               	bsf	31,5,b	;volatile
  1490                           
  1491                           ;interrupts.c: 24:     INTCONbits.GIE=1;
  1492   0013B0  8EF2               	bsf	242,7,c	;volatile
  1493   0013B2                     
  1494                           ; BSR set to: 14
  1495   0013B2  0012               	return		;funcret
  1496   0013B4                     __end_of_Interrupts_init:
  1497                           	callstack 0
  1498                           
  1499 ;; *************** function _ADC_init *****************
  1500 ;; Defined at:
  1501 ;;		line 9 in file "ADC.c"
  1502 ;; Parameters:    Size  Location     Type
  1503 ;;		None
  1504 ;; Auto vars:     Size  Location     Type
  1505 ;;		None
  1506 ;; Return value:  Size  Location     Type
  1507 ;;                  1    wreg      void 
  1508 ;; Registers used:
  1509 ;;		wreg, status,2
  1510 ;; Tracked objects:
  1511 ;;		On entry : 0/0
  1512 ;;		On exit  : 0/0
  1513 ;;		Unchanged: 0/0
  1514 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1515 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1516 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1517 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1518 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1519 ;;Total ram usage:        0 bytes
  1520 ;; Hardware stack levels used: 1
  1521 ;; Hardware stack levels required when called: 1
  1522 ;; This function calls:
  1523 ;;		Nothing
  1524 ;; This function is called by:
  1525 ;;		_main
  1526 ;; This function uses a non-reentrant model
  1527 ;;
  1528                           
  1529                           	psect	text6
  1530   001376                     __ptext6:
  1531                           	callstack 0
  1532   001376                     _ADC_init:
  1533                           	callstack 29
  1534   001376                     
  1535                           ;ADC.c: 11:     TRISAbits.TRISA3=1;
  1536   001376  8681               	bsf	129,3,c	;volatile
  1537                           
  1538                           ;ADC.c: 12:     ANSELAbits.ANSELA3=1;
  1539   001378  010E               	movlb	14	; () banked
  1540   00137A  8792               	bsf	146,3,b	;volatile
  1541                           
  1542                           ;ADC.c: 14:     ADREFbits.ADNREF = 0;
  1543   00137C  010F               	movlb	15	; () banked
  1544   00137E  9958               	bcf	88,4,b	;volatile
  1545   001380                     
  1546                           ; BSR set to: 15
  1547                           ;ADC.c: 15:     ADREFbits.ADPREF = 0b00;
  1548   001380  0EFC               	movlw	-4
  1549   001382  1758               	andwf	88,f,b	;volatile
  1550                           
  1551                           ;ADC.c: 16:     ADPCH=0b11;
  1552   001384  0E03               	movlw	3
  1553   001386  6F5F               	movwf	95,b	;volatile
  1554   001388                     
  1555                           ; BSR set to: 15
  1556                           ;ADC.c: 17:     ADCON0bits.ADFM = 0;
  1557   001388  9460               	bcf	96,2,c	;volatile
  1558   00138A                     
  1559                           ; BSR set to: 15
  1560                           ;ADC.c: 18:     ADCON0bits.ADCS = 1;
  1561   00138A  8860               	bsf	96,4,c	;volatile
  1562   00138C                     
  1563                           ; BSR set to: 15
  1564                           ;ADC.c: 19:     ADCON0bits.ADON = 1;
  1565   00138C  8E60               	bsf	96,7,c	;volatile
  1566   00138E                     
  1567                           ; BSR set to: 15
  1568   00138E  0012               	return		;funcret
  1569   001390                     __end_of_ADC_init:
  1570                           	callstack 0
  1571                           
  1572 ;; *************** function _ADC_getval *****************
  1573 ;; Defined at:
  1574 ;;		line 22 in file "ADC.c"
  1575 ;; Parameters:    Size  Location     Type
  1576 ;;		None
  1577 ;; Auto vars:     Size  Location     Type
  1578 ;;  tmpval          2    2[COMRAM] unsigned int 
  1579 ;; Return value:  Size  Location     Type
  1580 ;;                  2    0[COMRAM] unsigned int 
  1581 ;; Registers used:
  1582 ;;		wreg, status,2, status,0
  1583 ;; Tracked objects:
  1584 ;;		On entry : 0/0
  1585 ;;		On exit  : 0/0
  1586 ;;		Unchanged: 0/0
  1587 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1588 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1589 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1590 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1591 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1592 ;;Total ram usage:        4 bytes
  1593 ;; Hardware stack levels used: 1
  1594 ;; Hardware stack levels required when called: 1
  1595 ;; This function calls:
  1596 ;;		Nothing
  1597 ;; This function is called by:
  1598 ;;		_main
  1599 ;; This function uses a non-reentrant model
  1600 ;;
  1601                           
  1602                           	psect	text7
  1603   001300                     __ptext7:
  1604                           	callstack 0
  1605   001300                     _ADC_getval:
  1606                           	callstack 29
  1607   001300                     
  1608                           ;ADC.c: 24:     unsigned int tmpval;;ADC.c: 26:     ADCON0bits.GO = 1;
  1609   001300  8060               	bsf	96,0,c	;volatile
  1610   001302                     l66:
  1611   001302  B060               	btfsc	96,0,c	;volatile
  1612   001304  EF86  F009         	goto	u841
  1613   001308  EF88  F009         	goto	u840
  1614   00130C                     u841:
  1615   00130C  EF81  F009         	goto	l66
  1616   001310                     u840:
  1617   001310                     
  1618                           ;ADC.c: 30:     tmpval = ADRESH;
  1619   001310  CF64 F03B          	movff	3940,ADC_getval@tmpval	;volatile
  1620   001314  6A3C               	clrf	(ADC_getval@tmpval+1)^0,c
  1621   001316                     
  1622                           ;ADC.c: 34:     tmpval = 255 - tmpval;
  1623   001316  503B               	movf	ADC_getval@tmpval^0,w,c
  1624   001318  08FF               	sublw	255
  1625   00131A  6E3B               	movwf	ADC_getval@tmpval^0,c
  1626   00131C  503C               	movf	(ADC_getval@tmpval+1)^0,w,c
  1627   00131E  A0D8               	btfss	status,0,c
  1628   001320  2AE8               	incf	wreg,f,c
  1629   001322  0800               	sublw	0
  1630   001324  6E3C               	movwf	(ADC_getval@tmpval+1)^0,c
  1631   001326                     
  1632                           ;ADC.c: 36:     return tmpval;
  1633   001326  C03B  F039         	movff	ADC_getval@tmpval,?_ADC_getval
  1634   00132A  C03C  F03A         	movff	ADC_getval@tmpval+1,?_ADC_getval+1
  1635   00132E  0012               	return		;funcret
  1636   001330                     __end_of_ADC_getval:
  1637                           	callstack 0
  1638                           
  1639 ;; *************** function _HighISR *****************
  1640 ;; Defined at:
  1641 ;;		line 31 in file "interrupts.c"
  1642 ;; Parameters:    Size  Location     Type
  1643 ;;		None
  1644 ;; Auto vars:     Size  Location     Type
  1645 ;;		None
  1646 ;; Return value:  Size  Location     Type
  1647 ;;                  1    wreg      void 
  1648 ;; Registers used:
  1649 ;;		wreg, status,2, status,0
  1650 ;; Tracked objects:
  1651 ;;		On entry : 0/0
  1652 ;;		On exit  : 0/0
  1653 ;;		Unchanged: 0/0
  1654 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1655 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1656 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1657 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1658 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1659 ;;Total ram usage:        0 bytes
  1660 ;; Hardware stack levels used: 1
  1661 ;; This function calls:
  1662 ;;		Nothing
  1663 ;; This function is called by:
  1664 ;;		Interrupt level 2
  1665 ;; This function uses a non-reentrant model
  1666 ;;
  1667                           
  1668                           	psect	intcode
  1669   000008                     __pintcode:
  1670                           	callstack 0
  1671   000008                     _HighISR:
  1672                           	callstack 29
  1673                           
  1674                           ;incstack = 0
  1675   000008  8241               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  1676   00000A                     
  1677                           ;interrupts.c: 35:     if(PIR0bits.TMR0IF){
  1678   00000A  010E               	movlb	14	; () banked
  1679   00000C  AB33               	btfss	51,5,b	;volatile
  1680   00000E  EF0B  F000         	goto	i2u69_41
  1681   000012  EF0D  F000         	goto	i2u69_40
  1682   000016                     i2u69_41:
  1683   000016  EF14  F000         	goto	i2l224
  1684   00001A                     i2u69_40:
  1685   00001A                     
  1686                           ; BSR set to: 14
  1687                           ;interrupts.c: 37:         TMR0H = 0b00001011;
  1688   00001A  0E0B               	movlw	11
  1689   00001C  6ED4               	movwf	212,c	;volatile
  1690                           
  1691                           ;interrupts.c: 38:         TMR0L = 0b11011100;
  1692   00001E  0EDC               	movlw	220
  1693   000020  6ED3               	movwf	211,c	;volatile
  1694   000022                     
  1695                           ; BSR set to: 14
  1696                           ;interrupts.c: 39:         GLOBALsecs++;
  1697   000022  4A3F               	infsnz	_GLOBALsecs^0,f,c
  1698   000024  2A40               	incf	(_GLOBALsecs+1)^0,f,c
  1699   000026                     
  1700                           ; BSR set to: 14
  1701                           ;interrupts.c: 40:         PIR0bits.TMR0IF=0;
  1702   000026  9B33               	bcf	51,5,b	;volatile
  1703   000028                     i2l224:
  1704                           
  1705                           ; BSR set to: 14
  1706   000028  9241               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1707   00002A  0011               	retfie		f
  1708   00002C                     __end_of_HighISR:
  1709                           	callstack 0
  1710                           
  1711                           	psect	smallconst
  1712   000E00                     __psmallconst:
  1713                           	callstack 0
  1714   000E00  00                 	db	0
  1715   000E01  00                 	db	0	; dummy byte at the end
  1716   000000                     
  1717                           	psect	rparam
  1718   000000                     
  1719                           	psect	temp
  1720   000041                     btemp:
  1721                           	callstack 0
  1722   000041                     	ds	1
  1723   000000                     int$flags	set	btemp
  1724   000000                     wtemp8	set	btemp+1
  1725   000000                     ttemp5	set	btemp+1
  1726   000000                     ttemp6	set	btemp+4
  1727   000000                     ttemp7	set	btemp+8
  1728                           
  1729                           	psect	config
  1730                           
  1731                           ;Config register CONFIG1L @ 0x300000
  1732                           ;	External Oscillator mode Selection bits
  1733                           ;	FEXTOSC = HS, HS (crystal oscillator) above 8 MHz; PFM set to high power
  1734                           ;	Power-up default value for COSC bits
  1735                           ;	RSTOSC = EXTOSC_4PLL, EXTOSC with 4x PLL, with EXTOSC operating per FEXTOSC bits
  1736   300000                     	org	3145728
  1737   300000  AA                 	db	170
  1738                           
  1739                           ;Config register CONFIG1H @ 0x300001
  1740                           ;	unspecified, using default values
  1741                           ;	Clock Out Enable bit
  1742                           ;	CLKOUTEN = 0x1, unprogrammed default
  1743                           ;	Clock Switch Enable bit
  1744                           ;	CSWEN = 0x1, unprogrammed default
  1745                           ;	Fail-Safe Clock Monitor Enable bit
  1746                           ;	FCMEN = 0x1, unprogrammed default
  1747   300001                     	org	3145729
  1748   300001  FF                 	db	255
  1749                           
  1750                           ;Config register CONFIG3L @ 0x300004
  1751                           ;	WDT Period Select bits
  1752                           ;	WDTCPS = 0x1F, unprogrammed default
  1753                           ;	WDT operating mode
  1754                           ;	WDTE = OFF, WDT Disabled
  1755   300004                     	org	3145732
  1756   300004  9F                 	db	159
  1757                           
  1758                           ;Config register CONFIG3H @ 0x300005
  1759                           ;	unspecified, using default values
  1760                           ;	WDT Window Select bits
  1761                           ;	WDTCWS = 0x7, unprogrammed default
  1762                           ;	WDT input clock selector
  1763                           ;	WDTCCS = 0x7, unprogrammed default
  1764   300005                     	org	3145733
  1765   300005  FF                 	db	255
  1766                           tosu	equ	0xFFF
  1767                           tosh	equ	0xFFE
  1768                           tosl	equ	0xFFD
  1769                           stkptr	equ	0xFFC
  1770                           pclatu	equ	0xFFB
  1771                           pclath	equ	0xFFA
  1772                           pcl	equ	0xFF9
  1773                           tblptru	equ	0xFF8
  1774                           tblptrh	equ	0xFF7
  1775                           tblptrl	equ	0xFF6
  1776                           tablat	equ	0xFF5
  1777                           prodh	equ	0xFF4
  1778                           prodl	equ	0xFF3
  1779                           indf0	equ	0xFEF
  1780                           postinc0	equ	0xFEE
  1781                           postdec0	equ	0xFED
  1782                           preinc0	equ	0xFEC
  1783                           plusw0	equ	0xFEB
  1784                           fsr0h	equ	0xFEA
  1785                           fsr0l	equ	0xFE9
  1786                           wreg	equ	0xFE8
  1787                           indf1	equ	0xFE7
  1788                           postinc1	equ	0xFE6
  1789                           postdec1	equ	0xFE5
  1790                           preinc1	equ	0xFE4
  1791                           plusw1	equ	0xFE3
  1792                           fsr1h	equ	0xFE2
  1793                           fsr1l	equ	0xFE1
  1794                           bsr	equ	0xFE0
  1795                           indf2	equ	0xFDF
  1796                           postinc2	equ	0xFDE
  1797                           postdec2	equ	0xFDD
  1798                           preinc2	equ	0xFDC
  1799                           plusw2	equ	0xFDB
  1800                           fsr2h	equ	0xFDA
  1801                           fsr2l	equ	0xFD9
  1802                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         56
    Persistent  2
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94      6      64
    BANK0           160    160     160
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          234      0       0

Pointer List with Targets:

    UpdateClock@days	PTR int  size(1) Largest target is 8
		 -> main@clock(BANK0[8]), 

    UpdateClock@hours	PTR int  size(1) Largest target is 8
		 -> main@clock(BANK0[8]), 

    UpdateClock@minutes	PTR int  size(1) Largest target is 8
		 -> main@clock(BANK0[8]), 

    UpdateClock@seconds	PTR int  size(1) Largest target is 2
		 -> GLOBALsecs(COMRAM[2]), 


Critical Paths under _main in COMRAM

    _main->_UpdateClock

Critical Paths under _HighISR in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _HighISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _HighISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _HighISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _HighISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _HighISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _HighISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _HighISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _HighISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _HighISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _HighISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _HighISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _HighISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _HighISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _HighISR in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                               160   160      0    2281
                                              0 BANK0    160   160      0
                         _ADC_getval
                           _ADC_init
                    _Interrupts_init
                  _LEDarray_disp_bin
                      _LEDarray_init
                        _Timer0_init
                        _UpdateClock
 ---------------------------------------------------------------------------------
 (1) _UpdateClock                                          6     2      4     722
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _Timer0_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LEDarray_init                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LEDarray_disp_bin                                    2     0      2     274
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _Interrupts_init                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ADC_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ADC_getval                                           4     2      2      46
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (2) _HighISR                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_getval
   _ADC_init
   _Interrupts_init
   _LEDarray_disp_bin
   _LEDarray_init
   _Timer0_init
   _UpdateClock

 _HighISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             DE9      0       0      50        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK13           EA      0       0      30        0.0%
BANK13              EA      0       0      31        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     A0      A0       5      100.0%
BITBIGSFRllhlhh     84      0       0      42        0.0%
BITBIGSFRlllhh      5E      0       0      45        0.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E      6      40       1       68.1%
BITBIGSFRhhll       4A      0       0      34        0.0%
BITBIGSFRllhll      33      0       0      44        0.0%
BITBIGSFRlllll      30      0       0      48        0.0%
BITBIGSFRhhlhh      1B      0       0      33        0.0%
BITBIGSFRllhhhh     14      0       0      39        0.0%
BITBIGSFRhhh         D      0       0      32        0.0%
BITBIGSFRllllh       9      0       0      47        0.0%
BITBIGSFRlllhl       9      0       0      46        0.0%
BITBIGSFRllhlhl      8      0       0      43        0.0%
BITBIGSFRllhhl       6      0       0      41        0.0%
BITBIGSFRllhhhl      3      0       0      40        0.0%
BITBIGSFRllhhhh      1      0       0      38        0.0%
BITBIGSFRlhh         1      0       0      36        0.0%
BITBIGSFRlhl         1      0       0      37        0.0%
BITBIGSFRhl          1      0       0      35        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      E0      49        0.0%
DATA                 0      0      E0       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.45 build 20230818022343 
Symbol Table                                                                                   Thu Feb 08 22:04:49 2024

                       l41 10A0                         l63 138E                         l39 10A6  
                       l66 1302                         l91 124C                         l68 1310  
                       l92 124E                         l69 132E                         l93 1262  
                       l94 1264                         l95 1278                         l96 127A  
                       l88 1354                         l97 128E                         l98 1290  
                       l99 12A4          ??_Interrupts_init 0039                        l100 12A6  
                      l101 12BA                        l102 12BC                        l103 12D0  
                      l104 12D2                        l105 12E6                        l106 12E8  
                      l107 12FC                        l109 12FE                        l218 13B2  
                      l252 1236                        l237 1374                        u710 1102  
                      u711 10FE                        u800 12B4                        u720 1160  
                      u801 12B0                        u721 115C                        u810 12CA  
                      u730 11B4                        u811 12C6                        u731 11B0  
                      u820 12E0                        u740 1208                        u900 104C  
                      u821 12DC                        u741 1204                        u901 1048  
                      u830 12F6                        u750 1246                        u910 1068  
                      u831 12F2                        u751 1242                        u911 1064  
                      u840 1310                        u760 125C                        u920 1084  
                      u841 130C                        u761 1258                        u921 1080  
                      u770 1272                        u930 10A0                        u771 126E  
                      u931 109C                        u851 0F86                        u780 1288  
                      u940 10BE                        u781 1284                        u941 10BA  
                      u861 0F9A                        u790 129E                        u791 129A  
                      u871 0FB6                        u881 0FCA                        u890 1032  
                      u891 102E                        wreg 0FE8                       l1400 11B4  
                     l1410 1238                       l1402 11BE                       l1420 129E  
                     l1412 1246                       l1404 11E2                       l1500 0ED8  
                     l1430 1300                       l1422 12B4                       l1414 125C  
                     l1406 1208                       l1510 0F00                       l1502 0EE0  
                     l1432 1316                       l1424 12CA                       l1416 1272  
                     l1408 1212                       l1520 0F28                       l1512 0F08  
                     l1504 0EE8                       l1440 0E06                       l1434 1326  
                     l1426 12E0                       l1418 1288                       l1362 1330  
                     l1370 1372                       l1530 0F50                       l1522 0F30  
                     l1514 0F10                       l1506 0EF0                       l1450 0E14  
                     l1442 0E0A                       l1380 138A                       l1372 13A6  
                     l1428 12F6                       l1364 1356                       l1540 0F78  
                     l1532 0F58                       l1524 0F38                       l1516 0F18  
                     l1508 0EF8                       l1460 0E38                       l1452 0E16  
                     l1444 0E0E                       l1382 138C                       l1374 1376  
                     l1366 135E                       l1390 1116                       l1550 0FA8  
                     l1542 0F80                       l1534 0F60                       l1526 0F40  
                     l1518 0F20                       l1470 0E60                       l1462 0E40  
                     l1454 0E1E                       l1446 0E10                       l1438 0E02  
                     l1376 1380                       l1368 1368                       l1392 113A  
                     l1384 10C8                       l1560 0FD8                       l1552 0FB0  
                     l1544 0F8C                       l1536 0F68                       l1528 0F48  
                     l1480 0E88                       l1472 0E68                       l1464 0E48  
                     l1456 0E28                       l1448 0E12                       l1378 1388  
                     l1394 1160                       l1386 10DC                       l1570 101A  
                     l1562 0FE6                       l1554 0FBC                       l1546 0F94  
                     l1538 0F70                       l1490 0EB0                       l1482 0E90  
                     l1474 0E70                       l1466 0E50                       l1458 0E30  
                     l1396 116A                       l1388 1102                       l1572 1032  
                     l1580 10A8                       l1564 0FEE                       l1556 0FC4  
                     l1548 0FA0                       l1492 0EB8                       l1484 0E98  
                     l1476 0E78                       l1468 0E58                       l1398 118E  
                     l1582 10BE                       l1574 104C                       l1566 1002  
                     l1558 0FD0                       l1494 0EC0                       l1486 0EA0  
                     l1478 0E80                       l1576 1068                       l1568 100E  
                     l1496 0EC8                       l1488 0EA8                       l1578 1084  
                     l1498 0ED0                       _main 0E02                       fsr1h 0FE2  
                     fsr2h 0FDA                       fsr1l 0FE1                       fsr2l 0FD9  
                     btemp 0041                       start 002C           __end_of_ADC_init 1390  
      main@light_threshold 0098            __end_of_HighISR 002C               ___param_bank 0000  
                    ?_main 0039                      _ADPCH 0F5F                      i2l224 0028  
                    _TMR0H 0FD4                      _TMR0L 0FD3                      plusw2 0FDB  
                    ttemp5 0042                      ttemp6 0045                      ttemp7 0049  
                    status 0FD8                      wtemp8 0042            __initialization 1390  
             __end_of_main 10C8                     ??_main 003F              __activetblptr 0000  
                   _ADRESH 0F64           UpdateClock@hours 003B                     i2l1340 001A  
                   i2l1342 0022                     i2l1344 0026                     i2l1338 000A  
                ??_HighISR 0039          _LEDarray_disp_bin 1238         ?_LEDarray_disp_bin 0039  
             ??_ADC_getval 003B              ??_Timer0_init 0039        ??_LEDarray_disp_bin 003B  
                   clear_0 1396                     isa$std 0001               __mediumconst 0000  
                ?_ADC_init 0039         __end_of_ADC_getval 1330  __end_of_LEDarray_disp_bin 1300  
               __accesstop 0060              ??_UpdateClock 003D    __end_of__initialization 139C  
            ___rparam_used 0001              _LEDarray_init 1330            _Interrupts_init 13A6  
           __pcstackCOMRAM 0039        __end_of_Timer0_init 1376                 ??_ADC_init 0039  
               __pnvCOMRAM 003F             ?_LEDarray_init 0039        __end_of_UpdateClock 1238  
                  i2u69_40 001A                    i2u69_41 0016    __end_of_Interrupts_init 13B4  
                  _HighISR 0008                  _ADREFbits 0F58                    __Hparam 0000  
                  __Lparam 0000                _Timer0_init 1356               __psmallconst 0E00  
                  __pcinit 1390                    __ramtop 0E00                    __ptext0 0E02  
                  __ptext1 10C8                    __ptext2 1356                    __ptext3 1330  
                  __ptext4 1238                    __ptext5 13A6                    __ptext6 1376  
                  __ptext7 1300                    main@Dec 00DE                    main@Feb 00A2  
                  main@Aug 00C6                    main@Apr 00AE                    main@Jan 009C  
                  main@Mar 00A8                    main@May 00B4                    main@Oct 00D2  
                  main@Jul 00C0                    main@Jun 00BA                    main@Sep 00CC  
                  main@Nov 00D8       end_of_initialization 139C           ADC_getval@tmpval 003B  
          ??_LEDarray_init 0039                _UpdateClock 10C8                    postdec1 0FE5  
                  postdec2 0FDD                    postinc0 0FEE                    postinc1 0FE6  
                  postinc2 0FDE                 main@F14171 0001                 main@F14165 002B  
               main@F14167 001D                 main@F14169 000F                  _TRISAbits 0F81  
                _TRISBbits 0F82                  _TRISDbits 0F84                  _TRISFbits 0F86  
                _TRISGbits 0F87                  _TRISHbits 0F88                _CM1CON0bits 0ED0  
              _CM1CON1bits 0ED1           ?_Interrupts_init 0039                 main@curval 009A  
      start_initialization 1390            UpdateClock@days 003C                __pbssCOMRAM 0001  
            __pcstackBANK0 0060                   ?_HighISR 0039               ?_Timer0_init 0039  
                __pintcode 0008                __smallconst 0E00                   _ADC_init 1376  
             ?_UpdateClock 0039                   _LATAbits 0F79         UpdateClock@minutes 003A  
       UpdateClock@seconds 0039                   _LATBbits 0F7A                   _LATDbits 0F7C  
                 _LATFbits 0F7E                   _LATGbits 0F7F                   _LATHbits 0F80  
                 _IPR0bits 0E1F                   _PIE0bits 0E29                   _PIR0bits 0E33  
                main@14170 007C                  main@14172 008A                  main@14166 0060  
                main@14168 006E                  main@DSTon 00F0                 _ADCON0bits 0F60  
                main@clock 00F8                 _CM1NCHbits 0ED2                 _CM1PCHbits 0ED3  
    __end_of_LEDarray_init 1356                   __Hrparam 0000                 _ADC_getval 1300  
                 __Lrparam 0000                 _ANSELAbits 0E92                 _T0CON0bits 0FD5  
               _T0CON1bits 0FD6    LEDarray_disp_bin@number 0039                 _GLOBALsecs 003F  
                 isa$xinst 0000                   int$flags 0041                   main@Dawn 00E4  
                 main@Dusk 00EA                 _INTCONbits 0FF2                   intlevel2 0000  
             _DAC1CON0bits 0EC6               _DAC1CON1bits 0EC7                ?_ADC_getval 0039  
