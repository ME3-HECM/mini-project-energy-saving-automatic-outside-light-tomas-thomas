

Microchip MPLAB XC8 Assembler V2.45 build 20230818022343 
                                                                                               Fri Feb 09 00:30:11 2024

Microchip MPLAB XC8 C Compiler v2.45 (Free license) build 20230818022343 Og1 
     1                           	processor	18F67K40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
     8                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1
    14                           	psect	text4,global,reloc=2,class=CODE,delta=1
    15                           	psect	text5,global,reloc=2,class=CODE,delta=1
    16                           	psect	text6,global,reloc=2,class=CODE,delta=1
    17                           	psect	text7,global,reloc=2,class=CODE,delta=1
    18                           	psect	text8,global,reloc=2,class=CODE,delta=1
    19                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    20                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
    21                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    22                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    23                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    24                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    25   000000                     
    26                           ; Generated 21/07/2023 GMT
    27                           ; 
    28                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    29                           ; All rights reserved.
    30                           ; 
    31                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    32                           ; 
    33                           ; Redistribution and use in source and binary forms, with or without modification, are
    34                           ; permitted provided that the following conditions are met:
    35                           ; 
    36                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    37                           ;        conditions and the following disclaimer.
    38                           ; 
    39                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    40                           ;        of conditions and the following disclaimer in the documentation and/or other
    41                           ;        materials provided with the distribution. Publication is not required when
    42                           ;        this file is used in an embedded application.
    43                           ; 
    44                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    45                           ;        software without specific prior written permission.
    46                           ; 
    47                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    48                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    49                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    50                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    51                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    52                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    53                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    54                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    55                           ; 
    56                           ; 
    57                           ; Code-generator required, PIC18F67K40 Definitions
    58                           ; 
    59                           ; SFR Addresses
    60   000000                     _T0CON0bits	set	4053
    61   000000                     _T0CON1bits	set	4054
    62   000000                     _CM1CON1bits	set	3793
    63                           
    64                           	psect	nvBANK1
    65   0001E0                     __pnvBANK1:
    66                           	callstack 0
    67   0001E0                     _GLOBALsecs:
    68                           	callstack 0
    69   0001E0                     	ds	2
    70   000000                     _IPR0bits	set	3615
    71   000000                     _PIE0bits	set	3625
    72   000000                     _ANSELAbits	set	3730
    73   000000                     _LATDbits	set	3964
    74   000000                     _TRISDbits	set	3972
    75   000000                     _TRISFbits	set	3974
    76   000000                     _TRISGbits	set	3975
    77   000000                     _TRISHbits	set	3976
    78   000000                     _LATFbits	set	3966
    79   000000                     _LATGbits	set	3967
    80   000000                     _LATHbits	set	3968
    81   000000                     _TMR0L	set	4051
    82   000000                     _TMR0H	set	4052
    83   000000                     _INTCONbits	set	4082
    84   000000                     _TRISBbits	set	3970
    85   000000                     _TRISAbits	set	3969
    86   000000                     _DAC1CON0bits	set	3782
    87   000000                     _ADREFbits	set	3928
    88   000000                     _ADPCH	set	3935
    89   000000                     _ADRESH	set	3940
    90   000000                     _ADCON0bits	set	3936
    91   000000                     _LATAbits	set	3961
    92   000000                     _LATBbits	set	3962
    93   000000                     _CM1CON0bits	set	3792
    94   000000                     _CM1NCHbits	set	3794
    95   000000                     _DAC1CON1bits	set	3783
    96   000000                     _CM1PCHbits	set	3795
    97   000000                     _PIR0bits	set	3635
    98                           
    99                           ; #config settings
   100                           
   101                           	psect	cinit
   102   0014DC                     __pcinit:
   103                           	callstack 0
   104   0014DC                     start_initialization:
   105                           	callstack 0
   106   0014DC                     __initialization:
   107                           	callstack 0
   108                           
   109                           ; Clear objects allocated to BANK1 (56 bytes)
   110   0014DC  EE01  F0A8         	lfsr	0,__pbssBANK1
   111   0014E0  0E38               	movlw	56
   112   0014E2                     clear_0:
   113   0014E2  6AEE               	clrf	postinc0,c
   114   0014E4  06E8               	decf	wreg,f,c
   115   0014E6  E1FD               	bnz	clear_0
   116   0014E8                     end_of_initialization:
   117                           	callstack 0
   118   0014E8                     __end_of__initialization:
   119                           	callstack 0
   120   0014E8  900E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   121   0014EA  920E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   122   0014EC  0100               	movlb	0
   123   0014EE  EF01  F007         	goto	_main	;jump to C main() function
   124                           
   125                           	psect	bssBANK1
   126   0001A8                     __pbssBANK1:
   127                           	callstack 0
   128   0001A8                     	ds	14
   129   0001B6                     	ds	14
   130   0001C4                     	ds	14
   131   0001D2                     	ds	14
   132                           
   133                           	psect	cstackBANK1
   134   000100                     __pcstackBANK1:
   135                           	callstack 0
   136   000100                     main@14169:
   137                           	callstack 0
   138                           
   139                           ; 14 bytes @ 0x0
   140   000100                     	ds	14
   141   00010E                     main@14171:
   142                           	callstack 0
   143                           
   144                           ; 14 bytes @ 0xE
   145   00010E                     	ds	14
   146   00011C                     main@14173:
   147                           	callstack 0
   148                           
   149                           ; 14 bytes @ 0x1C
   150   00011C                     	ds	14
   151   00012A                     main@14175:
   152                           	callstack 0
   153                           
   154                           ; 14 bytes @ 0x2A
   155   00012A                     	ds	14
   156   000138                     main@previousClockDays:
   157                           	callstack 0
   158                           
   159                           ; 2 bytes @ 0x38
   160   000138                     	ds	2
   161   00013A                     main@daycount:
   162                           	callstack 0
   163                           
   164                           ; 2 bytes @ 0x3A
   165   00013A                     	ds	2
   166   00013C                     main@light_threshold:
   167                           	callstack 0
   168                           
   169                           ; 2 bytes @ 0x3C
   170   00013C                     	ds	2
   171   00013E                     main@curval:
   172                           	callstack 0
   173                           
   174                           ; 2 bytes @ 0x3E
   175   00013E                     	ds	2
   176   000140                     main@Jan:
   177                           	callstack 0
   178                           
   179                           ; 6 bytes @ 0x40
   180   000140                     	ds	6
   181   000146                     main@Feb:
   182                           	callstack 0
   183                           
   184                           ; 6 bytes @ 0x46
   185   000146                     	ds	6
   186   00014C                     main@Mar:
   187                           	callstack 0
   188                           
   189                           ; 6 bytes @ 0x4C
   190   00014C                     	ds	6
   191   000152                     main@Apr:
   192                           	callstack 0
   193                           
   194                           ; 6 bytes @ 0x52
   195   000152                     	ds	6
   196   000158                     main@May:
   197                           	callstack 0
   198                           
   199                           ; 6 bytes @ 0x58
   200   000158                     	ds	6
   201   00015E                     main@Jun:
   202                           	callstack 0
   203                           
   204                           ; 6 bytes @ 0x5E
   205   00015E                     	ds	6
   206   000164                     main@Jul:
   207                           	callstack 0
   208                           
   209                           ; 6 bytes @ 0x64
   210   000164                     	ds	6
   211   00016A                     main@Aug:
   212                           	callstack 0
   213                           
   214                           ; 6 bytes @ 0x6A
   215   00016A                     	ds	6
   216   000170                     main@Sep:
   217                           	callstack 0
   218                           
   219                           ; 6 bytes @ 0x70
   220   000170                     	ds	6
   221   000176                     main@Oct:
   222                           	callstack 0
   223                           
   224                           ; 6 bytes @ 0x76
   225   000176                     	ds	6
   226   00017C                     main@Nov:
   227                           	callstack 0
   228                           
   229                           ; 6 bytes @ 0x7C
   230   00017C                     	ds	6
   231   000182                     main@Dec:
   232                           	callstack 0
   233                           
   234                           ; 6 bytes @ 0x82
   235   000182                     	ds	6
   236   000188                     main@DSTon:
   237                           	callstack 0
   238                           
   239                           ; 8 bytes @ 0x88
   240   000188                     	ds	8
   241   000190                     main@Dawn:
   242                           	callstack 0
   243                           
   244                           ; 8 bytes @ 0x90
   245   000190                     	ds	8
   246   000198                     main@Dusk:
   247                           	callstack 0
   248                           
   249                           ; 8 bytes @ 0x98
   250   000198                     	ds	8
   251   0001A0                     main@clock:
   252                           	callstack 0
   253                           
   254                           ; 8 bytes @ 0xA0
   255   0001A0                     	ds	8
   256                           
   257                           	psect	cstackCOMRAM
   258   000001                     __pcstackCOMRAM:
   259                           	callstack 0
   260   000001                     ?_ADC_getval:
   261                           	callstack 0
   262   000001                     LEDarray_disp_bin@number:
   263                           	callstack 0
   264   000001                     UpdateClock@seconds:
   265                           	callstack 0
   266   000001                     ArrayAppend@arrayTime:
   267                           	callstack 0
   268                           
   269                           ; 2 bytes @ 0x0
   270   000001                     	ds	2
   271   000003                     ADC_getval@tmpval:
   272                           	callstack 0
   273   000003                     UpdateClock@minutes:
   274                           	callstack 0
   275   000003                     ArrayAppend@size:
   276                           	callstack 0
   277                           
   278                           ; 2 bytes @ 0x2
   279   000003                     	ds	2
   280   000005                     UpdateClock@hours:
   281                           	callstack 0
   282   000005                     ArrayAppend@Time:
   283                           	callstack 0
   284                           
   285                           ; 2 bytes @ 0x4
   286   000005                     	ds	2
   287   000007                     ??_ArrayAppend:
   288   000007                     UpdateClock@days:
   289                           	callstack 0
   290                           
   291                           ; 2 bytes @ 0x6
   292   000007                     	ds	2
   293   000009                     ??_UpdateClock:
   294                           
   295                           ; 1 bytes @ 0x8
   296   000009                     	ds	1
   297   00000A                     ArrayAppend@i:
   298                           	callstack 0
   299                           
   300                           ; 2 bytes @ 0x9
   301   00000A                     	ds	2
   302   00000C                     ??_main:
   303                           
   304                           ; 1 bytes @ 0xB
   305   00000C                     	ds	2
   306                           
   307 ;;
   308 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   309 ;;
   310 ;; *************** function _main *****************
   311 ;; Defined at:
   312 ;;		line 28 in file "main.c"
   313 ;; Parameters:    Size  Location     Type
   314 ;;		None
   315 ;; Auto vars:     Size  Location     Type
   316 ;;  curval          2   62[BANK1 ] unsigned int 
   317 ;;  14175          14   42[BANK1 ] int [7]
   318 ;;  14173          14   28[BANK1 ] int [7]
   319 ;;  14171          14   14[BANK1 ] int [7]
   320 ;;  14169          14    0[BANK1 ] int [7]
   321 ;;  clock           8  160[BANK1 ] struct time_structure
   322 ;;  Dusk            8  152[BANK1 ] struct array_structure
   323 ;;  Dawn            8  144[BANK1 ] struct array_structure
   324 ;;  DSTon           8  136[BANK1 ] struct time_structure
   325 ;;  Dec             6  130[BANK1 ] struct month_structure
   326 ;;  Nov             6  124[BANK1 ] struct month_structure
   327 ;;  Oct             6  118[BANK1 ] struct month_structure
   328 ;;  Sep             6  112[BANK1 ] struct month_structure
   329 ;;  Aug             6  106[BANK1 ] struct month_structure
   330 ;;  Jul             6  100[BANK1 ] struct month_structure
   331 ;;  Jun             6   94[BANK1 ] struct month_structure
   332 ;;  May             6   88[BANK1 ] struct month_structure
   333 ;;  Apr             6   82[BANK1 ] struct month_structure
   334 ;;  Mar             6   76[BANK1 ] struct month_structure
   335 ;;  Feb             6   70[BANK1 ] struct month_structure
   336 ;;  Jan             6   64[BANK1 ] struct month_structure
   337 ;;  light_thresh    2   60[BANK1 ] unsigned int 
   338 ;;  daycount        2   58[BANK1 ] unsigned int 
   339 ;;  previousCloc    2   56[BANK1 ] unsigned int 
   340 ;; Return value:  Size  Location     Type
   341 ;;                  1    wreg      void 
   342 ;; Registers used:
   343 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
   344 ;; Tracked objects:
   345 ;;		On entry : 0/0
   346 ;;		On exit  : 0/0
   347 ;;		Unchanged: 0/0
   348 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   349 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   350 ;;      Locals:         0       0     168       0       0       0       0       0       0       0       0       0       
      +0       0       0
   351 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   352 ;;      Totals:         2       0     168       0       0       0       0       0       0       0       0       0       
      +0       0       0
   353 ;;Total ram usage:      170 bytes
   354 ;; Hardware stack levels required when called: 2
   355 ;; This function calls:
   356 ;;		_ADC_getval
   357 ;;		_ADC_init
   358 ;;		_ArrayAppend
   359 ;;		_Interrupts_init
   360 ;;		_LEDarray_disp_bin
   361 ;;		_LEDarray_init
   362 ;;		_Timer0_init
   363 ;;		_UpdateClock
   364 ;; This function is called by:
   365 ;;		Startup code after reset
   366 ;; This function uses a non-reentrant model
   367 ;;
   368                           
   369                           	psect	text0
   370   000E02                     __ptext0:
   371                           	callstack 0
   372   000E02                     _main:
   373                           	callstack 29
   374   000E02                     
   375                           ;main.c: 218:         Dawn.hours = (int[]){0, 0, 0, 0, 0, 0, 0};;main.c: 219:         Da
      +                          wn.minutes = (int[]){0, 0, 0, 0, 0, 0, 0};;main.c: 224:         Dusk.hours = (int[]){0, 
      +                          0, 0, 0, 0, 0, 0};;main.c: 225:         Dusk.minutes = (int[]){0, 0, 0, 0, 0, 0, 0};;mai
      +                          n.c: 31:     LEDarray_init();
   376   000E02  EC3E  F00A         	call	_LEDarray_init	;wreg free
   377   000E06                     
   378                           ;main.c: 32:     Timer0_init();
   379   000E06  EC51  F00A         	call	_Timer0_init	;wreg free
   380   000E0A                     
   381                           ;main.c: 33:     Interrupts_init();
   382   000E0A  EC79  F00A         	call	_Interrupts_init	;wreg free
   383   000E0E                     
   384                           ;main.c: 37:     TRISDbits.TRISD7 = 0;
   385   000E0E  9E84               	bcf	132,7,c	;volatile
   386   000E10                     
   387                           ;main.c: 38:     LATDbits.LATD7 = 0;
   388   000E10  9E7C               	bcf	124,7,c	;volatile
   389   000E12                     
   390                           ;main.c: 41:     TRISHbits.TRISH3 = 0;
   391   000E12  9688               	bcf	136,3,c	;volatile
   392   000E14                     
   393                           ;main.c: 42:     LATHbits.LATH3 = 0;
   394   000E14  9680               	bcf	128,3,c	;volatile
   395   000E16                     
   396                           ;main.c: 54:     struct time_structure clock;;main.c: 56:         GLOBALsecs = 50;
   397   000E16  0E00               	movlw	0
   398   000E18  0101               	movlb	1	; () banked
   399   000E1A  6FE1               	movwf	(_GLOBALsecs+1)& (0+255),b
   400   000E1C  0E32               	movlw	50
   401   000E1E  6FE0               	movwf	_GLOBALsecs& (0+255),b
   402   000E20                     
   403                           ; BSR set to: 1
   404                           ;main.c: 57:         clock.minutes = 59;
   405   000E20  0E00               	movlw	0
   406   000E22  6FA3               	movwf	(main@clock+3)& (0+255),b
   407   000E24  0E3B               	movlw	59
   408   000E26  6FA2               	movwf	(main@clock+2)& (0+255),b
   409   000E28                     
   410                           ; BSR set to: 1
   411                           ;main.c: 58:         clock.hours = 12;
   412   000E28  0E00               	movlw	0
   413   000E2A  6FA5               	movwf	(main@clock+5)& (0+255),b
   414   000E2C  0E0C               	movlw	12
   415   000E2E  6FA4               	movwf	(main@clock+4)& (0+255),b
   416   000E30                     
   417                           ; BSR set to: 1
   418                           ;main.c: 59:         clock.days = 1;
   419   000E30  0E00               	movlw	0
   420   000E32  6FA7               	movwf	(main@clock+7)& (0+255),b
   421   000E34  0E01               	movlw	1
   422   000E36  6FA6               	movwf	(main@clock+6)& (0+255),b
   423   000E38                     
   424                           ; BSR set to: 1
   425                           ;main.c: 63:     struct time_structure DSTon;;main.c: 64:         DSTon.minutes = 0;
   426   000E38  0E00               	movlw	0
   427   000E3A  6F8B               	movwf	(main@DSTon+3)& (0+255),b
   428   000E3C  0E00               	movlw	0
   429   000E3E  6F8A               	movwf	(main@DSTon+2)& (0+255),b
   430   000E40                     
   431                           ; BSR set to: 1
   432                           ;main.c: 65:         DSTon.hours = 0;
   433   000E40  0E00               	movlw	0
   434   000E42  6F8D               	movwf	(main@DSTon+5)& (0+255),b
   435   000E44  0E00               	movlw	0
   436   000E46  6F8C               	movwf	(main@DSTon+4)& (0+255),b
   437   000E48                     
   438                           ; BSR set to: 1
   439                           ;main.c: 66:         DSTon.days = 0;
   440   000E48  0E00               	movlw	0
   441   000E4A  6F8F               	movwf	(main@DSTon+7)& (0+255),b
   442   000E4C  0E00               	movlw	0
   443   000E4E  6F8E               	movwf	(main@DSTon+6)& (0+255),b
   444   000E50                     
   445                           ; BSR set to: 1
   446                           ;main.c: 72:         GLOBALsecs = clock.hours;
   447   000E50  C1A4  F1E0         	movff	main@clock+4,_GLOBALsecs
   448   000E54  C1A5  F1E1         	movff	main@clock+5,_GLOBALsecs+1
   449   000E58                     
   450                           ; BSR set to: 1
   451                           ;main.c: 130:     struct month_structure Jan;;main.c: 132:         Jan.days = 31;
   452   000E58  0E00               	movlw	0
   453   000E5A  6F45               	movwf	(main@Jan+5)& (0+255),b
   454   000E5C  0E1F               	movlw	31
   455   000E5E  6F44               	movwf	(main@Jan+4)& (0+255),b
   456   000E60                     
   457                           ; BSR set to: 1
   458                           ;main.c: 133:         Jan.solarMidHours = 0;
   459   000E60  0E00               	movlw	0
   460   000E62  6F43               	movwf	(main@Jan+3)& (0+255),b
   461   000E64  0E00               	movlw	0
   462   000E66  6F42               	movwf	(main@Jan+2)& (0+255),b
   463   000E68                     
   464                           ; BSR set to: 1
   465                           ;main.c: 134:         Jan.solarMidMinutes = 9;
   466   000E68  0E00               	movlw	0
   467   000E6A  6F41               	movwf	(main@Jan+1)& (0+255),b
   468   000E6C  0E09               	movlw	9
   469   000E6E  6F40               	movwf	main@Jan& (0+255),b
   470   000E70                     
   471                           ; BSR set to: 1
   472                           ;main.c: 136:     struct month_structure Feb;;main.c: 138:         Feb.days = 28;
   473   000E70  0E00               	movlw	0
   474   000E72  6F4B               	movwf	(main@Feb+5)& (0+255),b
   475   000E74  0E1C               	movlw	28
   476   000E76  6F4A               	movwf	(main@Feb+4)& (0+255),b
   477   000E78                     
   478                           ; BSR set to: 1
   479                           ;main.c: 139:         Feb.solarMidHours = 0;
   480   000E78  0E00               	movlw	0
   481   000E7A  6F49               	movwf	(main@Feb+3)& (0+255),b
   482   000E7C  0E00               	movlw	0
   483   000E7E  6F48               	movwf	(main@Feb+2)& (0+255),b
   484   000E80                     
   485                           ; BSR set to: 1
   486                           ;main.c: 140:         Feb.solarMidMinutes = 13;
   487   000E80  0E00               	movlw	0
   488   000E82  6F47               	movwf	(main@Feb+1)& (0+255),b
   489   000E84  0E0D               	movlw	13
   490   000E86  6F46               	movwf	main@Feb& (0+255),b
   491   000E88                     
   492                           ; BSR set to: 1
   493                           ;main.c: 142:     struct month_structure Mar;;main.c: 144:         Mar.days = 31;
   494   000E88  0E00               	movlw	0
   495   000E8A  6F51               	movwf	(main@Mar+5)& (0+255),b
   496   000E8C  0E1F               	movlw	31
   497   000E8E  6F50               	movwf	(main@Mar+4)& (0+255),b
   498   000E90                     
   499                           ; BSR set to: 1
   500                           ;main.c: 145:         Mar.solarMidHours = 0;
   501   000E90  0E00               	movlw	0
   502   000E92  6F4F               	movwf	(main@Mar+3)& (0+255),b
   503   000E94  0E00               	movlw	0
   504   000E96  6F4E               	movwf	(main@Mar+2)& (0+255),b
   505   000E98                     
   506                           ; BSR set to: 1
   507                           ;main.c: 146:         Mar.solarMidMinutes = 8;
   508   000E98  0E00               	movlw	0
   509   000E9A  6F4D               	movwf	(main@Mar+1)& (0+255),b
   510   000E9C  0E08               	movlw	8
   511   000E9E  6F4C               	movwf	main@Mar& (0+255),b
   512   000EA0                     
   513                           ; BSR set to: 1
   514                           ;main.c: 148:     struct month_structure Apr;;main.c: 150:         Apr.days = 30;
   515   000EA0  0E00               	movlw	0
   516   000EA2  6F57               	movwf	(main@Apr+5)& (0+255),b
   517   000EA4  0E1E               	movlw	30
   518   000EA6  6F56               	movwf	(main@Apr+4)& (0+255),b
   519   000EA8                     
   520                           ; BSR set to: 1
   521                           ;main.c: 151:         Apr.solarMidHours = 0;
   522   000EA8  0E00               	movlw	0
   523   000EAA  6F55               	movwf	(main@Apr+3)& (0+255),b
   524   000EAC  0E00               	movlw	0
   525   000EAE  6F54               	movwf	(main@Apr+2)& (0+255),b
   526   000EB0                     
   527                           ; BSR set to: 1
   528                           ;main.c: 152:         Apr.solarMidMinutes = 1;
   529   000EB0  0E00               	movlw	0
   530   000EB2  6F53               	movwf	(main@Apr+1)& (0+255),b
   531   000EB4  0E01               	movlw	1
   532   000EB6  6F52               	movwf	main@Apr& (0+255),b
   533   000EB8                     
   534                           ; BSR set to: 1
   535                           ;main.c: 154:     struct month_structure May;;main.c: 156:         May.days = 31;
   536   000EB8  0E00               	movlw	0
   537   000EBA  6F5D               	movwf	(main@May+5)& (0+255),b
   538   000EBC  0E1F               	movlw	31
   539   000EBE  6F5C               	movwf	(main@May+4)& (0+255),b
   540   000EC0                     
   541                           ; BSR set to: 1
   542                           ;main.c: 157:         May.solarMidHours = 23;
   543   000EC0  0E00               	movlw	0
   544   000EC2  6F5B               	movwf	(main@May+3)& (0+255),b
   545   000EC4  0E17               	movlw	23
   546   000EC6  6F5A               	movwf	(main@May+2)& (0+255),b
   547   000EC8                     
   548                           ; BSR set to: 1
   549                           ;main.c: 158:         May.solarMidMinutes = 57;
   550   000EC8  0E00               	movlw	0
   551   000ECA  6F59               	movwf	(main@May+1)& (0+255),b
   552   000ECC  0E39               	movlw	57
   553   000ECE  6F58               	movwf	main@May& (0+255),b
   554   000ED0                     
   555                           ; BSR set to: 1
   556                           ;main.c: 160:     struct month_structure Jun;;main.c: 162:         Jun.days = 30;
   557   000ED0  0E00               	movlw	0
   558   000ED2  6F63               	movwf	(main@Jun+5)& (0+255),b
   559   000ED4  0E1E               	movlw	30
   560   000ED6  6F62               	movwf	(main@Jun+4)& (0+255),b
   561   000ED8                     
   562                           ; BSR set to: 1
   563                           ;main.c: 163:         Jun.solarMidHours = 0;
   564   000ED8  0E00               	movlw	0
   565   000EDA  6F61               	movwf	(main@Jun+3)& (0+255),b
   566   000EDC  0E00               	movlw	0
   567   000EDE  6F60               	movwf	(main@Jun+2)& (0+255),b
   568   000EE0                     
   569                           ; BSR set to: 1
   570                           ;main.c: 164:         Jun.solarMidMinutes = 1;
   571   000EE0  0E00               	movlw	0
   572   000EE2  6F5F               	movwf	(main@Jun+1)& (0+255),b
   573   000EE4  0E01               	movlw	1
   574   000EE6  6F5E               	movwf	main@Jun& (0+255),b
   575   000EE8                     
   576                           ; BSR set to: 1
   577                           ;main.c: 166:     struct month_structure Jul;;main.c: 168:         Jul.days = 31;
   578   000EE8  0E00               	movlw	0
   579   000EEA  6F69               	movwf	(main@Jul+5)& (0+255),b
   580   000EEC  0E1F               	movlw	31
   581   000EEE  6F68               	movwf	(main@Jul+4)& (0+255),b
   582   000EF0                     
   583                           ; BSR set to: 1
   584                           ;main.c: 169:         Jul.solarMidHours = 0;
   585   000EF0  0E00               	movlw	0
   586   000EF2  6F67               	movwf	(main@Jul+3)& (0+255),b
   587   000EF4  0E00               	movlw	0
   588   000EF6  6F66               	movwf	(main@Jul+2)& (0+255),b
   589   000EF8                     
   590                           ; BSR set to: 1
   591                           ;main.c: 170:         Jul.solarMidMinutes = 5;
   592   000EF8  0E00               	movlw	0
   593   000EFA  6F65               	movwf	(main@Jul+1)& (0+255),b
   594   000EFC  0E05               	movlw	5
   595   000EFE  6F64               	movwf	main@Jul& (0+255),b
   596   000F00                     
   597                           ; BSR set to: 1
   598                           ;main.c: 172:     struct month_structure Aug;;main.c: 174:         Aug.days = 31;
   599   000F00  0E00               	movlw	0
   600   000F02  6F6F               	movwf	(main@Aug+5)& (0+255),b
   601   000F04  0E1F               	movlw	31
   602   000F06  6F6E               	movwf	(main@Aug+4)& (0+255),b
   603   000F08                     
   604                           ; BSR set to: 1
   605                           ;main.c: 175:         Aug.solarMidHours = 0;
   606   000F08  0E00               	movlw	0
   607   000F0A  6F6D               	movwf	(main@Aug+3)& (0+255),b
   608   000F0C  0E00               	movlw	0
   609   000F0E  6F6C               	movwf	(main@Aug+2)& (0+255),b
   610   000F10                     
   611                           ; BSR set to: 1
   612                           ;main.c: 176:         Aug.solarMidMinutes = 3;
   613   000F10  0E00               	movlw	0
   614   000F12  6F6B               	movwf	(main@Aug+1)& (0+255),b
   615   000F14  0E03               	movlw	3
   616   000F16  6F6A               	movwf	main@Aug& (0+255),b
   617   000F18                     
   618                           ; BSR set to: 1
   619                           ;main.c: 178:     struct month_structure Sep;;main.c: 180:         Sep.days = 30;
   620   000F18  0E00               	movlw	0
   621   000F1A  6F75               	movwf	(main@Sep+5)& (0+255),b
   622   000F1C  0E1E               	movlw	30
   623   000F1E  6F74               	movwf	(main@Sep+4)& (0+255),b
   624   000F20                     
   625                           ; BSR set to: 1
   626                           ;main.c: 181:         Sep.solarMidHours = 23;
   627   000F20  0E00               	movlw	0
   628   000F22  6F73               	movwf	(main@Sep+3)& (0+255),b
   629   000F24  0E17               	movlw	23
   630   000F26  6F72               	movwf	(main@Sep+2)& (0+255),b
   631   000F28                     
   632                           ; BSR set to: 1
   633                           ;main.c: 182:         Sep.solarMidMinutes = 55;
   634   000F28  0E00               	movlw	0
   635   000F2A  6F71               	movwf	(main@Sep+1)& (0+255),b
   636   000F2C  0E37               	movlw	55
   637   000F2E  6F70               	movwf	main@Sep& (0+255),b
   638   000F30                     
   639                           ; BSR set to: 1
   640                           ;main.c: 184:     struct month_structure Oct;;main.c: 186:         Oct.days = 31;
   641   000F30  0E00               	movlw	0
   642   000F32  6F7B               	movwf	(main@Oct+5)& (0+255),b
   643   000F34  0E1F               	movlw	31
   644   000F36  6F7A               	movwf	(main@Oct+4)& (0+255),b
   645   000F38                     
   646                           ; BSR set to: 1
   647                           ;main.c: 187:         Oct.solarMidHours = 23;
   648   000F38  0E00               	movlw	0
   649   000F3A  6F79               	movwf	(main@Oct+3)& (0+255),b
   650   000F3C  0E17               	movlw	23
   651   000F3E  6F78               	movwf	(main@Oct+2)& (0+255),b
   652   000F40                     
   653                           ; BSR set to: 1
   654                           ;main.c: 188:         Oct.solarMidMinutes = 47;
   655   000F40  0E00               	movlw	0
   656   000F42  6F77               	movwf	(main@Oct+1)& (0+255),b
   657   000F44  0E2F               	movlw	47
   658   000F46  6F76               	movwf	main@Oct& (0+255),b
   659   000F48                     
   660                           ; BSR set to: 1
   661                           ;main.c: 190:     struct month_structure Nov;;main.c: 192:         Nov.days = 30;
   662   000F48  0E00               	movlw	0
   663   000F4A  6F81               	movwf	(main@Nov+5)& (0+255),b
   664   000F4C  0E1E               	movlw	30
   665   000F4E  6F80               	movwf	(main@Nov+4)& (0+255),b
   666   000F50                     
   667                           ; BSR set to: 1
   668                           ;main.c: 193:         Nov.solarMidHours = 23;
   669   000F50  0E00               	movlw	0
   670   000F52  6F7F               	movwf	(main@Nov+3)& (0+255),b
   671   000F54  0E17               	movlw	23
   672   000F56  6F7E               	movwf	(main@Nov+2)& (0+255),b
   673   000F58                     
   674                           ; BSR set to: 1
   675                           ;main.c: 194:         Nov.solarMidMinutes = 46;
   676   000F58  0E00               	movlw	0
   677   000F5A  6F7D               	movwf	(main@Nov+1)& (0+255),b
   678   000F5C  0E2E               	movlw	46
   679   000F5E  6F7C               	movwf	main@Nov& (0+255),b
   680   000F60                     
   681                           ; BSR set to: 1
   682                           ;main.c: 196:     struct month_structure Dec;;main.c: 198:         Dec.days = 31;
   683   000F60  0E00               	movlw	0
   684   000F62  6F87               	movwf	(main@Dec+5)& (0+255),b
   685   000F64  0E1F               	movlw	31
   686   000F66  6F86               	movwf	(main@Dec+4)& (0+255),b
   687   000F68                     
   688                           ; BSR set to: 1
   689                           ;main.c: 199:         Dec.solarMidHours = 23;
   690   000F68  0E00               	movlw	0
   691   000F6A  6F85               	movwf	(main@Dec+3)& (0+255),b
   692   000F6C  0E17               	movlw	23
   693   000F6E  6F84               	movwf	(main@Dec+2)& (0+255),b
   694   000F70                     
   695                           ; BSR set to: 1
   696                           ;main.c: 200:         Dec.solarMidMinutes = 56;
   697   000F70  0E00               	movlw	0
   698   000F72  6F83               	movwf	(main@Dec+1)& (0+255),b
   699   000F74  0E38               	movlw	56
   700   000F76  6F82               	movwf	main@Dec& (0+255),b
   701   000F78                     
   702                           ; BSR set to: 1
   703                           ;main.c: 215:     struct array_structure Dawn;;main.c: 216:         Dawn.size = 7;
   704   000F78  0E00               	movlw	0
   705   000F7A  6F91               	movwf	(main@Dawn+1)& (0+255),b
   706   000F7C  0E07               	movlw	7
   707   000F7E  6F90               	movwf	main@Dawn& (0+255),b
   708   000F80                     
   709                           ; BSR set to: 1
   710                           ;main.c: 217:         Dawn.count = 0;
   711   000F80  0E00               	movlw	0
   712   000F82  6F93               	movwf	(main@Dawn+3)& (0+255),b
   713   000F84  0E00               	movlw	0
   714   000F86  6F92               	movwf	(main@Dawn+2)& (0+255),b
   715   000F88                     
   716                           ; BSR set to: 1
   717                           ;main.c: 218:         Dawn.hours = (int[]){0, 0, 0, 0, 0, 0, 0};
   718   000F88  EE21  F000         	lfsr	2,main@14169
   719   000F8C  0E0D               	movlw	13
   720   000F8E                     u1061:
   721   000F8E  6ADE               	clrf	postinc2,c
   722   000F90  06E8               	decf	wreg,f,c
   723   000F92  E2FD               	bc	u1061
   724   000F94                     
   725                           ; BSR set to: 1
   726   000F94  0E01               	movlw	high main@14169
   727   000F96  6F95               	movwf	(main@Dawn+5)& (0+255),b
   728   000F98  0E00               	movlw	low main@14169
   729   000F9A  6F94               	movwf	(main@Dawn+4)& (0+255),b
   730   000F9C                     
   731                           ; BSR set to: 1
   732                           ;main.c: 219:         Dawn.minutes = (int[]){0, 0, 0, 0, 0, 0, 0};
   733   000F9C  EE21  F00E         	lfsr	2,main@14171
   734   000FA0  0E0D               	movlw	13
   735   000FA2                     u1071:
   736   000FA2  6ADE               	clrf	postinc2,c
   737   000FA4  06E8               	decf	wreg,f,c
   738   000FA6  E2FD               	bc	u1071
   739   000FA8                     
   740                           ; BSR set to: 1
   741   000FA8  0E01               	movlw	high main@14171
   742   000FAA  6F97               	movwf	(main@Dawn+7)& (0+255),b
   743   000FAC  0E0E               	movlw	low main@14171
   744   000FAE  6F96               	movwf	(main@Dawn+6)& (0+255),b
   745   000FB0                     
   746                           ; BSR set to: 1
   747                           ;main.c: 221:     struct array_structure Dusk;;main.c: 222:         Dusk.size = 7;
   748   000FB0  0E00               	movlw	0
   749   000FB2  6F99               	movwf	(main@Dusk+1)& (0+255),b
   750   000FB4  0E07               	movlw	7
   751   000FB6  6F98               	movwf	main@Dusk& (0+255),b
   752   000FB8                     
   753                           ; BSR set to: 1
   754                           ;main.c: 223:         Dusk.count = 0;
   755   000FB8  0E00               	movlw	0
   756   000FBA  6F9B               	movwf	(main@Dusk+3)& (0+255),b
   757   000FBC  0E00               	movlw	0
   758   000FBE  6F9A               	movwf	(main@Dusk+2)& (0+255),b
   759   000FC0                     
   760                           ; BSR set to: 1
   761                           ;main.c: 224:         Dusk.hours = (int[]){0, 0, 0, 0, 0, 0, 0};
   762   000FC0  EE21  F01C         	lfsr	2,main@14173
   763   000FC4  0E0D               	movlw	13
   764   000FC6                     u1081:
   765   000FC6  6ADE               	clrf	postinc2,c
   766   000FC8  06E8               	decf	wreg,f,c
   767   000FCA  E2FD               	bc	u1081
   768   000FCC                     
   769                           ; BSR set to: 1
   770   000FCC  0E01               	movlw	high main@14173
   771   000FCE  6F9D               	movwf	(main@Dusk+5)& (0+255),b
   772   000FD0  0E1C               	movlw	low main@14173
   773   000FD2  6F9C               	movwf	(main@Dusk+4)& (0+255),b
   774   000FD4                     
   775                           ; BSR set to: 1
   776                           ;main.c: 225:         Dusk.minutes = (int[]){0, 0, 0, 0, 0, 0, 0};
   777   000FD4  EE21  F02A         	lfsr	2,main@14175
   778   000FD8  0E0D               	movlw	13
   779   000FDA                     u1091:
   780   000FDA  6ADE               	clrf	postinc2,c
   781   000FDC  06E8               	decf	wreg,f,c
   782   000FDE  E2FD               	bc	u1091
   783   000FE0                     
   784                           ; BSR set to: 1
   785   000FE0  0E01               	movlw	high main@14175
   786   000FE2  6F9F               	movwf	(main@Dusk+7)& (0+255),b
   787   000FE4  0E2A               	movlw	low main@14175
   788   000FE6  6F9E               	movwf	(main@Dusk+6)& (0+255),b
   789   000FE8                     
   790                           ; BSR set to: 1
   791                           ;main.c: 236:     ADC_init();
   792   000FE8  EC61  F00A         	call	_ADC_init	;wreg free
   793                           
   794                           ;main.c: 239:     unsigned int light_threshold = 70;
   795   000FEC  0E00               	movlw	0
   796   000FEE  0101               	movlb	1	; () banked
   797   000FF0  6F3D               	movwf	(main@light_threshold+1)& (0+255),b
   798   000FF2  0E46               	movlw	70
   799   000FF4  6F3C               	movwf	main@light_threshold& (0+255),b
   800                           
   801                           ;main.c: 242:     unsigned int daycount = 0;
   802   000FF6  0E00               	movlw	0
   803   000FF8  6F3B               	movwf	(main@daycount+1)& (0+255),b
   804   000FFA  0E00               	movlw	0
   805   000FFC  6F3A               	movwf	main@daycount& (0+255),b
   806   000FFE                     
   807                           ; BSR set to: 1
   808                           ;main.c: 245:     unsigned int previousClockDays = clock.days;
   809   000FFE  C1A6  F138         	movff	main@clock+6,main@previousClockDays
   810   001002  C1A7  F139         	movff	main@clock+7,main@previousClockDays+1
   811   001006                     l1878:
   812                           
   813                           ; BSR set to: 1
   814                           ;main.c: 254:         clock.seconds = GLOBALsecs;
   815   001006  C1E0  F1A0         	movff	_GLOBALsecs,main@clock
   816   00100A  C1E1  F1A1         	movff	_GLOBALsecs+1,main@clock+1
   817   00100E                     
   818                           ; BSR set to: 1
   819                           ;main.c: 255:         UpdateClock(&GLOBALsecs, &clock.minutes, &clock.hours, &clock.days
      +                          );
   820   00100E  0EE0               	movlw	low _GLOBALsecs
   821   001010  6E01               	movwf	UpdateClock@seconds^0,c
   822   001012  0E01               	movlw	high _GLOBALsecs
   823   001014  6E02               	movwf	(UpdateClock@seconds+1)^0,c
   824   001016  0EA2               	movlw	low (main@clock+2)
   825   001018  6E03               	movwf	UpdateClock@minutes^0,c
   826   00101A  0E01               	movlw	high (main@clock+2)
   827   00101C  6E04               	movwf	(UpdateClock@minutes+1)^0,c
   828   00101E  0EA4               	movlw	low (main@clock+4)
   829   001020  6E05               	movwf	UpdateClock@hours^0,c
   830   001022  0E01               	movlw	high (main@clock+4)
   831   001024  6E06               	movwf	(UpdateClock@hours+1)^0,c
   832   001026  0EA6               	movlw	low (main@clock+6)
   833   001028  6E07               	movwf	UpdateClock@days^0,c
   834   00102A  0E01               	movlw	high (main@clock+6)
   835   00102C  6E08               	movwf	(UpdateClock@days+1)^0,c
   836   00102E  ECBB  F008         	call	_UpdateClock	;wreg free
   837   001032                     
   838                           ;main.c: 258:         LEDarray_disp_bin(clock.hours);
   839   001032  C1A4  F001         	movff	main@clock+4,LEDarray_disp_bin@number
   840   001036  C1A5  F002         	movff	main@clock+5,LEDarray_disp_bin@number+1
   841   00103A  EC86  F009         	call	_LEDarray_disp_bin	;wreg free
   842   00103E                     
   843                           ;main.c: 271:         unsigned int curval = ADC_getval();
   844   00103E  EC26  F00A         	call	_ADC_getval	;wreg free
   845   001042  C001  F13E         	movff	?_ADC_getval,main@curval
   846   001046  C002  F13F         	movff	?_ADC_getval+1,main@curval+1
   847   00104A                     
   848                           ;main.c: 274:         if (curval < light_threshold){
   849   00104A  0101               	movlb	1	; () banked
   850   00104C  513C               	movf	main@light_threshold& (0+255),w,b
   851   00104E  5D3E               	subwf	main@curval& (0+255),w,b
   852   001050  513D               	movf	(main@light_threshold+1)& (0+255),w,b
   853   001052  593F               	subwfb	(main@curval+1)& (0+255),w,b
   854   001054  B0D8               	btfsc	status,0,c
   855   001056  EF2F  F008         	goto	u1101
   856   00105A  EF31  F008         	goto	u1100
   857   00105E                     u1101:
   858   00105E  EF70  F008         	goto	l1906
   859   001062                     u1100:
   860   001062                     
   861                           ; BSR set to: 1
   862                           ;main.c: 277:             if ((clock.hours >= 1 && clock.hours < 5) || (clock.hours >= 8
      +                           && clock.hours < 15)) {
   863   001062  BFA5               	btfsc	(main@clock+5)& (0+255),7,b
   864   001064  EF3C  F008         	goto	u1111
   865   001068  51A5               	movf	(main@clock+5)& (0+255),w,b
   866   00106A  E108               	bnz	u1110
   867   00106C  05A4               	decf	(main@clock+4)& (0+255),w,b
   868   00106E  A0D8               	btfss	status,0,c
   869   001070  EF3C  F008         	goto	u1111
   870   001074  EF3E  F008         	goto	u1110
   871   001078                     u1111:
   872   001078  EF4C  F008         	goto	l1892
   873   00107C                     u1110:
   874   00107C                     
   875                           ; BSR set to: 1
   876   00107C  BFA5               	btfsc	(main@clock+5)& (0+255),7,b
   877   00107E  EF4A  F008         	goto	u1121
   878   001082  51A5               	movf	(main@clock+5)& (0+255),w,b
   879   001084  E109               	bnz	u1120
   880   001086  0E05               	movlw	5
   881   001088  5DA4               	subwf	(main@clock+4)& (0+255),w,b
   882   00108A  A0D8               	btfss	status,0,c
   883   00108C  EF4A  F008         	goto	u1121
   884   001090  EF4C  F008         	goto	u1120
   885   001094                     u1121:
   886   001094  EF68  F008         	goto	l45
   887   001098                     u1120:
   888   001098                     l1892:
   889                           
   890                           ; BSR set to: 1
   891   001098  BFA5               	btfsc	(main@clock+5)& (0+255),7,b
   892   00109A  EF58  F008         	goto	u1131
   893   00109E  51A5               	movf	(main@clock+5)& (0+255),w,b
   894   0010A0  E109               	bnz	u1130
   895   0010A2  0E08               	movlw	8
   896   0010A4  5DA4               	subwf	(main@clock+4)& (0+255),w,b
   897   0010A6  A0D8               	btfss	status,0,c
   898   0010A8  EF58  F008         	goto	u1131
   899   0010AC  EF5A  F008         	goto	u1130
   900   0010B0                     u1131:
   901   0010B0  EF6B  F008         	goto	l43
   902   0010B4                     u1130:
   903   0010B4                     
   904                           ; BSR set to: 1
   905   0010B4  BFA5               	btfsc	(main@clock+5)& (0+255),7,b
   906   0010B6  EF68  F008         	goto	u1140
   907   0010BA  51A5               	movf	(main@clock+5)& (0+255),w,b
   908   0010BC  E107               	bnz	u1141
   909   0010BE  0E0F               	movlw	15
   910   0010C0  5DA4               	subwf	(main@clock+4)& (0+255),w,b
   911   0010C2  B0D8               	btfsc	status,0,c
   912   0010C4  EF66  F008         	goto	u1141
   913   0010C8  EF68  F008         	goto	u1140
   914   0010CC                     u1141:
   915   0010CC  EF6B  F008         	goto	l43
   916   0010D0                     u1140:
   917   0010D0                     l45:
   918                           
   919                           ; BSR set to: 1
   920                           ;main.c: 278:                 LATHbits.LATH3 = 0;
   921   0010D0  9680               	bcf	128,3,c	;volatile
   922                           
   923                           ;main.c: 279:             }
   924   0010D2  EF70  F008         	goto	l1906
   925   0010D6                     l43:
   926                           
   927                           ; BSR set to: 1
   928                           ;main.c: 282:                 LATHbits.LATH3 = 1;
   929   0010D6  8680               	bsf	128,3,c	;volatile
   930   0010D8                     
   931                           ; BSR set to: 1
   932                           ;main.c: 283:                 if ((Dusk.count = 0)&&(clock.hours >=15 && clock.hours < 8
      +                          )) {
   933   0010D8  0E00               	movlw	0
   934   0010DA  6F9B               	movwf	(main@Dusk+3)& (0+255),b
   935   0010DC  0E00               	movlw	0
   936   0010DE  6F9A               	movwf	(main@Dusk+2)& (0+255),b
   937   0010E0                     l1906:
   938                           
   939                           ; BSR set to: 1
   940                           ;main.c: 291:         if (curval > light_threshold){
   941   0010E0  513E               	movf	main@curval& (0+255),w,b
   942   0010E2  5D3C               	subwf	main@light_threshold& (0+255),w,b
   943   0010E4  513F               	movf	(main@curval+1)& (0+255),w,b
   944   0010E6  593D               	subwfb	(main@light_threshold+1)& (0+255),w,b
   945   0010E8  B0D8               	btfsc	status,0,c
   946   0010EA  EF79  F008         	goto	u1151
   947   0010EE  EF7B  F008         	goto	u1150
   948   0010F2                     u1151:
   949   0010F2  EF80  F008         	goto	l1920
   950   0010F6                     u1150:
   951   0010F6                     
   952                           ; BSR set to: 1
   953                           ;main.c: 292:             LATHbits.LATH3 = 0;
   954   0010F6  9680               	bcf	128,3,c	;volatile
   955   0010F8                     
   956                           ; BSR set to: 1
   957                           ;main.c: 293:             if ((Dawn.count = 0)&&(clock.hours >=4 && clock.hours < 8)) {
   958   0010F8  0E00               	movlw	0
   959   0010FA  6F93               	movwf	(main@Dawn+3)& (0+255),b
   960   0010FC  0E00               	movlw	0
   961   0010FE  6F92               	movwf	(main@Dawn+2)& (0+255),b
   962   001100                     l1920:
   963                           
   964                           ; BSR set to: 1
   965                           ;main.c: 300:         if (clock.days > previousClockDays) {
   966   001100  51A6               	movf	(main@clock+6)& (0+255),w,b
   967   001102  5D38               	subwf	main@previousClockDays& (0+255),w,b
   968   001104  51A7               	movf	(main@clock+7)& (0+255),w,b
   969   001106  5939               	subwfb	(main@previousClockDays+1)& (0+255),w,b
   970   001108  B0D8               	btfsc	status,0,c
   971   00110A  EF89  F008         	goto	u1161
   972   00110E  EF8B  F008         	goto	u1160
   973   001112                     u1161:
   974   001112  EF03  F008         	goto	l1878
   975   001116                     u1160:
   976   001116                     
   977                           ; BSR set to: 1
   978                           ;main.c: 301:             Dawn.count = 0;
   979   001116  0E00               	movlw	0
   980   001118  6F93               	movwf	(main@Dawn+3)& (0+255),b
   981   00111A  0E00               	movlw	0
   982   00111C  6F92               	movwf	(main@Dawn+2)& (0+255),b
   983                           
   984                           ;main.c: 302:             Dusk.count = 0;
   985   00111E  0E00               	movlw	0
   986   001120  6F9B               	movwf	(main@Dusk+3)& (0+255),b
   987   001122  0E00               	movlw	0
   988   001124  6F9A               	movwf	(main@Dusk+2)& (0+255),b
   989   001126                     
   990                           ; BSR set to: 1
   991                           ;main.c: 303:             daycount++;
   992   001126  4B3A               	infsnz	main@daycount& (0+255),f,b
   993   001128  2B3B               	incf	(main@daycount+1)& (0+255),f,b
   994   00112A                     
   995                           ; BSR set to: 1
   996                           ;main.c: 305:             LATDbits.LATD7 = 1;
   997   00112A  8E7C               	bsf	124,7,c	;volatile
   998   00112C                     
   999                           ; BSR set to: 1
  1000                           ;main.c: 306:             previousClockDays = clock.days;
  1001   00112C  C1A6  F138         	movff	main@clock+6,main@previousClockDays
  1002   001130  C1A7  F139         	movff	main@clock+7,main@previousClockDays+1
  1003   001134                     
  1004                           ; BSR set to: 1
  1005                           ;main.c: 308:             if (daycount == 7) {
  1006   001134  0E07               	movlw	7
  1007   001136  193A               	xorwf	main@daycount& (0+255),w,b
  1008   001138  113B               	iorwf	(main@daycount+1)& (0+255),w,b
  1009   00113A  A4D8               	btfss	status,2,c
  1010   00113C  EFA2  F008         	goto	u1171
  1011   001140  EFA4  F008         	goto	u1170
  1012   001144                     u1171:
  1013   001144  EF03  F008         	goto	l1878
  1014   001148                     u1170:
  1015   001148                     
  1016                           ; BSR set to: 1
  1017                           ;main.c: 318:                 LATDbits.LATD7 = 1;
  1018   001148  8E7C               	bsf	124,7,c	;volatile
  1019                           
  1020                           ;main.c: 319:                 LATHbits.LATH3 = 1;
  1021   00114A  8680               	bsf	128,3,c	;volatile
  1022   00114C                     
  1023                           ; BSR set to: 1
  1024                           ;main.c: 320:                 _delay((unsigned long)((500)*(64000000/4000.0)));
  1025   00114C  0E29               	movlw	41
  1026   00114E  6E0D               	movwf	(??_main+1)^0,c
  1027   001150  0E96               	movlw	150
  1028   001152  6E0C               	movwf	??_main^0,c
  1029   001154  0E7F               	movlw	127
  1030   001156                     u1187:
  1031   001156  2EE8               	decfsz	wreg,f,c
  1032   001158  D7FE               	bra	u1187
  1033   00115A  2E0C               	decfsz	??_main^0,f,c
  1034   00115C  D7FC               	bra	u1187
  1035   00115E  2E0D               	decfsz	(??_main+1)^0,f,c
  1036   001160  D7FA               	bra	u1187
  1037   001162  0000               	nop	
  1038   001164                     
  1039                           ;main.c: 325:                 daycount = 0;
  1040   001164  0E00               	movlw	0
  1041   001166  0101               	movlb	1	; () banked
  1042   001168  6F3B               	movwf	(main@daycount+1)& (0+255),b
  1043   00116A  0E00               	movlw	0
  1044   00116C  6F3A               	movwf	main@daycount& (0+255),b
  1045   00116E  EF03  F008         	goto	l1878
  1046   001172  EF18  F000         	goto	start
  1047   001176                     __end_of_main:
  1048                           	callstack 0
  1049                           
  1050 ;; *************** function _UpdateClock *****************
  1051 ;; Defined at:
  1052 ;;		line 24 in file "clock.c"
  1053 ;; Parameters:    Size  Location     Type
  1054 ;;  seconds         2    0[COMRAM] PTR int 
  1055 ;;		 -> GLOBALsecs(2), 
  1056 ;;  minutes         2    2[COMRAM] PTR int 
  1057 ;;		 -> main@clock(8), 
  1058 ;;  hours           2    4[COMRAM] PTR int 
  1059 ;;		 -> main@clock(8), 
  1060 ;;  days            2    6[COMRAM] PTR int 
  1061 ;;		 -> main@clock(8), 
  1062 ;; Auto vars:     Size  Location     Type
  1063 ;;		None
  1064 ;; Return value:  Size  Location     Type
  1065 ;;                  1    wreg      void 
  1066 ;; Registers used:
  1067 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  1068 ;; Tracked objects:
  1069 ;;		On entry : 0/0
  1070 ;;		On exit  : 0/0
  1071 ;;		Unchanged: 0/0
  1072 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1073 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1074 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1075 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1076 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1077 ;;Total ram usage:       10 bytes
  1078 ;; Hardware stack levels used: 1
  1079 ;; Hardware stack levels required when called: 1
  1080 ;; This function calls:
  1081 ;;		Nothing
  1082 ;; This function is called by:
  1083 ;;		_main
  1084 ;; This function uses a non-reentrant model
  1085 ;;
  1086                           
  1087                           	psect	text1
  1088   001176                     __ptext1:
  1089                           	callstack 0
  1090   001176                     _UpdateClock:
  1091                           	callstack 29
  1092   001176                     
  1093                           ;clock.c: 27:             *hours = *seconds;
  1094   001176  C001  FFD9         	movff	UpdateClock@seconds,fsr2l
  1095   00117A  C002  FFDA         	movff	UpdateClock@seconds+1,fsr2h
  1096   00117E  C005  FFE1         	movff	UpdateClock@hours,fsr1l
  1097   001182  C006  FFE2         	movff	UpdateClock@hours+1,fsr1h
  1098   001186  CFDE FFE6          	movff	postinc2,postinc1
  1099   00118A  CFDD FFE5          	movff	postdec2,postdec1
  1100   00118E                     
  1101                           ;clock.c: 28:             if (*seconds >= 24 ){
  1102   00118E  C001  FFD9         	movff	UpdateClock@seconds,fsr2l
  1103   001192  C002  FFDA         	movff	UpdateClock@seconds+1,fsr2h
  1104   001196  0E01               	movlw	1
  1105   001198  BEDB               	btfsc	plusw2,7,c
  1106   00119A  EFD9  F008         	goto	u1021
  1107   00119E  0E01               	movlw	1
  1108   0011A0  50DB               	movf	plusw2,w,c
  1109   0011A2  E109               	bnz	u1020
  1110   0011A4  0E18               	movlw	24
  1111   0011A6  5CDE               	subwf	postinc2,w,c
  1112   0011A8  A0D8               	btfss	status,0,c
  1113   0011AA  EFD9  F008         	goto	u1021
  1114   0011AE  EFDB  F008         	goto	u1020
  1115   0011B2                     u1021:
  1116   0011B2  EFFB  F008         	goto	l1730
  1117   0011B6                     u1020:
  1118   0011B6                     
  1119                           ;clock.c: 29:                 *seconds = 0;
  1120   0011B6  C001  FFD9         	movff	UpdateClock@seconds,fsr2l
  1121   0011BA  C002  FFDA         	movff	UpdateClock@seconds+1,fsr2h
  1122   0011BE  6ADE               	clrf	postinc2,c
  1123   0011C0  6ADD               	clrf	postdec2,c
  1124                           
  1125                           ;clock.c: 30:                 *hours = 0;
  1126   0011C2  C005  FFD9         	movff	UpdateClock@hours,fsr2l
  1127   0011C6  C006  FFDA         	movff	UpdateClock@hours+1,fsr2h
  1128   0011CA  6ADE               	clrf	postinc2,c
  1129   0011CC  6ADD               	clrf	postdec2,c
  1130   0011CE                     
  1131                           ;clock.c: 31:                 *days = *days + 1;
  1132   0011CE  C007  FFD9         	movff	UpdateClock@days,fsr2l
  1133   0011D2  C008  FFDA         	movff	UpdateClock@days+1,fsr2h
  1134   0011D6  CFDE F009          	movff	postinc2,??_UpdateClock
  1135   0011DA  CFDD F00A          	movff	postdec2,??_UpdateClock+1
  1136   0011DE  0E01               	movlw	1
  1137   0011E0  2609               	addwf	??_UpdateClock^0,f,c
  1138   0011E2  0E00               	movlw	0
  1139   0011E4  220A               	addwfc	(??_UpdateClock+1)^0,f,c
  1140   0011E6  C007  FFD9         	movff	UpdateClock@days,fsr2l
  1141   0011EA  C008  FFDA         	movff	UpdateClock@days+1,fsr2h
  1142   0011EE  C009  FFDE         	movff	??_UpdateClock,postinc2
  1143   0011F2  C00A  FFDD         	movff	??_UpdateClock+1,postdec2
  1144   0011F6                     l1730:
  1145                           
  1146                           ;clock.c: 35:     if (*seconds >= 60 ){
  1147   0011F6  C001  FFD9         	movff	UpdateClock@seconds,fsr2l
  1148   0011FA  C002  FFDA         	movff	UpdateClock@seconds+1,fsr2h
  1149   0011FE  0E01               	movlw	1
  1150   001200  BEDB               	btfsc	plusw2,7,c
  1151   001202  EF0D  F009         	goto	u1031
  1152   001206  0E01               	movlw	1
  1153   001208  50DB               	movf	plusw2,w,c
  1154   00120A  E109               	bnz	u1030
  1155   00120C  0E3C               	movlw	60
  1156   00120E  5CDE               	subwf	postinc2,w,c
  1157   001210  A0D8               	btfss	status,0,c
  1158   001212  EF0D  F009         	goto	u1031
  1159   001216  EF0F  F009         	goto	u1030
  1160   00121A                     u1031:
  1161   00121A  EF29  F009         	goto	l1736
  1162   00121E                     u1030:
  1163   00121E                     
  1164                           ;clock.c: 36:         *seconds = 0;
  1165   00121E  C001  FFD9         	movff	UpdateClock@seconds,fsr2l
  1166   001222  C002  FFDA         	movff	UpdateClock@seconds+1,fsr2h
  1167   001226  6ADE               	clrf	postinc2,c
  1168   001228  6ADD               	clrf	postdec2,c
  1169   00122A                     
  1170                           ;clock.c: 37:         *minutes = *minutes + 1;
  1171   00122A  C003  FFD9         	movff	UpdateClock@minutes,fsr2l
  1172   00122E  C004  FFDA         	movff	UpdateClock@minutes+1,fsr2h
  1173   001232  CFDE F009          	movff	postinc2,??_UpdateClock
  1174   001236  CFDD F00A          	movff	postdec2,??_UpdateClock+1
  1175   00123A  0E01               	movlw	1
  1176   00123C  2609               	addwf	??_UpdateClock^0,f,c
  1177   00123E  0E00               	movlw	0
  1178   001240  220A               	addwfc	(??_UpdateClock+1)^0,f,c
  1179   001242  C003  FFD9         	movff	UpdateClock@minutes,fsr2l
  1180   001246  C004  FFDA         	movff	UpdateClock@minutes+1,fsr2h
  1181   00124A  C009  FFDE         	movff	??_UpdateClock,postinc2
  1182   00124E  C00A  FFDD         	movff	??_UpdateClock+1,postdec2
  1183   001252                     l1736:
  1184                           
  1185                           ;clock.c: 40:     if (*minutes >= 60){
  1186   001252  C003  FFD9         	movff	UpdateClock@minutes,fsr2l
  1187   001256  C004  FFDA         	movff	UpdateClock@minutes+1,fsr2h
  1188   00125A  0E01               	movlw	1
  1189   00125C  BEDB               	btfsc	plusw2,7,c
  1190   00125E  EF3B  F009         	goto	u1041
  1191   001262  0E01               	movlw	1
  1192   001264  50DB               	movf	plusw2,w,c
  1193   001266  E109               	bnz	u1040
  1194   001268  0E3C               	movlw	60
  1195   00126A  5CDE               	subwf	postinc2,w,c
  1196   00126C  A0D8               	btfss	status,0,c
  1197   00126E  EF3B  F009         	goto	u1041
  1198   001272  EF3D  F009         	goto	u1040
  1199   001276                     u1041:
  1200   001276  EF57  F009         	goto	l1742
  1201   00127A                     u1040:
  1202   00127A                     
  1203                           ;clock.c: 41:     *minutes = 0;
  1204   00127A  C003  FFD9         	movff	UpdateClock@minutes,fsr2l
  1205   00127E  C004  FFDA         	movff	UpdateClock@minutes+1,fsr2h
  1206   001282  6ADE               	clrf	postinc2,c
  1207   001284  6ADD               	clrf	postdec2,c
  1208   001286                     
  1209                           ;clock.c: 42:     *hours = *hours + 1;
  1210   001286  C005  FFD9         	movff	UpdateClock@hours,fsr2l
  1211   00128A  C006  FFDA         	movff	UpdateClock@hours+1,fsr2h
  1212   00128E  CFDE F009          	movff	postinc2,??_UpdateClock
  1213   001292  CFDD F00A          	movff	postdec2,??_UpdateClock+1
  1214   001296  0E01               	movlw	1
  1215   001298  2609               	addwf	??_UpdateClock^0,f,c
  1216   00129A  0E00               	movlw	0
  1217   00129C  220A               	addwfc	(??_UpdateClock+1)^0,f,c
  1218   00129E  C005  FFD9         	movff	UpdateClock@hours,fsr2l
  1219   0012A2  C006  FFDA         	movff	UpdateClock@hours+1,fsr2h
  1220   0012A6  C009  FFDE         	movff	??_UpdateClock,postinc2
  1221   0012AA  C00A  FFDD         	movff	??_UpdateClock+1,postdec2
  1222   0012AE                     l1742:
  1223                           
  1224                           ;clock.c: 45:     if (*hours >= 24){
  1225   0012AE  C005  FFD9         	movff	UpdateClock@hours,fsr2l
  1226   0012B2  C006  FFDA         	movff	UpdateClock@hours+1,fsr2h
  1227   0012B6  0E01               	movlw	1
  1228   0012B8  BEDB               	btfsc	plusw2,7,c
  1229   0012BA  EF69  F009         	goto	u1051
  1230   0012BE  0E01               	movlw	1
  1231   0012C0  50DB               	movf	plusw2,w,c
  1232   0012C2  E109               	bnz	u1050
  1233   0012C4  0E18               	movlw	24
  1234   0012C6  5CDE               	subwf	postinc2,w,c
  1235   0012C8  A0D8               	btfss	status,0,c
  1236   0012CA  EF69  F009         	goto	u1051
  1237   0012CE  EF6B  F009         	goto	u1050
  1238   0012D2                     u1051:
  1239   0012D2  EF85  F009         	goto	l260
  1240   0012D6                     u1050:
  1241   0012D6                     
  1242                           ;clock.c: 46:     *hours = 0;
  1243   0012D6  C005  FFD9         	movff	UpdateClock@hours,fsr2l
  1244   0012DA  C006  FFDA         	movff	UpdateClock@hours+1,fsr2h
  1245   0012DE  6ADE               	clrf	postinc2,c
  1246   0012E0  6ADD               	clrf	postdec2,c
  1247   0012E2                     
  1248                           ;clock.c: 47:     *days = *days + 1;
  1249   0012E2  C007  FFD9         	movff	UpdateClock@days,fsr2l
  1250   0012E6  C008  FFDA         	movff	UpdateClock@days+1,fsr2h
  1251   0012EA  CFDE F009          	movff	postinc2,??_UpdateClock
  1252   0012EE  CFDD F00A          	movff	postdec2,??_UpdateClock+1
  1253   0012F2  0E01               	movlw	1
  1254   0012F4  2609               	addwf	??_UpdateClock^0,f,c
  1255   0012F6  0E00               	movlw	0
  1256   0012F8  220A               	addwfc	(??_UpdateClock+1)^0,f,c
  1257   0012FA  C007  FFD9         	movff	UpdateClock@days,fsr2l
  1258   0012FE  C008  FFDA         	movff	UpdateClock@days+1,fsr2h
  1259   001302  C009  FFDE         	movff	??_UpdateClock,postinc2
  1260   001306  C00A  FFDD         	movff	??_UpdateClock+1,postdec2
  1261   00130A                     l260:
  1262   00130A  0012               	return		;funcret
  1263   00130C                     __end_of_UpdateClock:
  1264                           	callstack 0
  1265                           
  1266 ;; *************** function _Timer0_init *****************
  1267 ;; Defined at:
  1268 ;;		line 8 in file "timers.c"
  1269 ;; Parameters:    Size  Location     Type
  1270 ;;		None
  1271 ;; Auto vars:     Size  Location     Type
  1272 ;;		None
  1273 ;; Return value:  Size  Location     Type
  1274 ;;                  1    wreg      void 
  1275 ;; Registers used:
  1276 ;;		wreg, status,2
  1277 ;; Tracked objects:
  1278 ;;		On entry : 0/0
  1279 ;;		On exit  : 0/0
  1280 ;;		Unchanged: 0/0
  1281 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1282 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1283 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1284 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1285 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1286 ;;Total ram usage:        0 bytes
  1287 ;; Hardware stack levels used: 1
  1288 ;; Hardware stack levels required when called: 1
  1289 ;; This function calls:
  1290 ;;		Nothing
  1291 ;; This function is called by:
  1292 ;;		_main
  1293 ;; This function uses a non-reentrant model
  1294 ;;
  1295                           
  1296                           	psect	text2
  1297   0014A2                     __ptext2:
  1298                           	callstack 0
  1299   0014A2                     _Timer0_init:
  1300                           	callstack 29
  1301   0014A2                     
  1302                           ;timers.c: 10:     T0CON1bits.T0CS=0b010;
  1303   0014A2  50D6               	movf	214,w,c	;volatile
  1304   0014A4  0B1F               	andlw	-225
  1305   0014A6  0940               	iorlw	64
  1306   0014A8  6ED6               	movwf	214,c	;volatile
  1307   0014AA                     
  1308                           ;timers.c: 11:     T0CON1bits.T0ASYNC=1;
  1309   0014AA  88D6               	bsf	214,4,c	;volatile
  1310                           
  1311                           ;timers.c: 13:     T0CON1bits.T0CKPS=0b1000;
  1312   0014AC  50D6               	movf	214,w,c	;volatile
  1313   0014AE  0BF0               	andlw	-16
  1314   0014B0  0908               	iorlw	8
  1315   0014B2  6ED6               	movwf	214,c	;volatile
  1316   0014B4                     
  1317                           ;timers.c: 15:     T0CON0bits.T016BIT=1;
  1318   0014B4  88D5               	bsf	213,4,c	;volatile
  1319                           
  1320                           ;timers.c: 18:     TMR0H = 0b00001011;
  1321   0014B6  0E0B               	movlw	11
  1322   0014B8  6ED4               	movwf	212,c	;volatile
  1323                           
  1324                           ;timers.c: 19:     TMR0L = 0b11011100;
  1325   0014BA  0EDC               	movlw	220
  1326   0014BC  6ED3               	movwf	211,c	;volatile
  1327   0014BE                     
  1328                           ;timers.c: 35:     T0CON0bits.T0EN=1;
  1329   0014BE  8ED5               	bsf	213,7,c	;volatile
  1330   0014C0  0012               	return		;funcret
  1331   0014C2                     __end_of_Timer0_init:
  1332                           	callstack 0
  1333                           
  1334 ;; *************** function _LEDarray_init *****************
  1335 ;; Defined at:
  1336 ;;		line 8 in file "LEDarray.c"
  1337 ;; Parameters:    Size  Location     Type
  1338 ;;		None
  1339 ;; Auto vars:     Size  Location     Type
  1340 ;;		None
  1341 ;; Return value:  Size  Location     Type
  1342 ;;                  1    wreg      void 
  1343 ;; Registers used:
  1344 ;;		None
  1345 ;; Tracked objects:
  1346 ;;		On entry : 0/0
  1347 ;;		On exit  : 0/0
  1348 ;;		Unchanged: 0/0
  1349 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1350 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1351 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1352 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1353 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1354 ;;Total ram usage:        0 bytes
  1355 ;; Hardware stack levels used: 1
  1356 ;; Hardware stack levels required when called: 1
  1357 ;; This function calls:
  1358 ;;		Nothing
  1359 ;; This function is called by:
  1360 ;;		_main
  1361 ;; This function uses a non-reentrant model
  1362 ;;
  1363                           
  1364                           	psect	text3
  1365   00147C                     __ptext3:
  1366                           	callstack 0
  1367   00147C                     _LEDarray_init:
  1368                           	callstack 29
  1369   00147C                     
  1370                           ;LEDarray.c: 16:     TRISGbits.TRISG0 = 0;
  1371   00147C  9087               	bcf	135,0,c	;volatile
  1372                           
  1373                           ;LEDarray.c: 17:     LATGbits.LATG0 = 0;
  1374   00147E  907F               	bcf	127,0,c	;volatile
  1375                           
  1376                           ;LEDarray.c: 19:     TRISGbits.TRISG1 = 0;
  1377   001480  9287               	bcf	135,1,c	;volatile
  1378                           
  1379                           ;LEDarray.c: 20:     LATGbits.LATG1 = 0;
  1380   001482  927F               	bcf	127,1,c	;volatile
  1381                           
  1382                           ;LEDarray.c: 22:     TRISAbits.TRISA2 = 0;
  1383   001484  9481               	bcf	129,2,c	;volatile
  1384                           
  1385                           ;LEDarray.c: 23:     LATAbits.LATA2 = 0;
  1386   001486  9479               	bcf	121,2,c	;volatile
  1387                           
  1388                           ;LEDarray.c: 25:     TRISFbits.TRISF6 = 0;
  1389   001488  9C86               	bcf	134,6,c	;volatile
  1390                           
  1391                           ;LEDarray.c: 26:     LATFbits.LATF6 = 0;
  1392   00148A  9C7E               	bcf	126,6,c	;volatile
  1393                           
  1394                           ;LEDarray.c: 28:     TRISAbits.TRISA4 = 0;
  1395   00148C  9881               	bcf	129,4,c	;volatile
  1396                           
  1397                           ;LEDarray.c: 29:     LATAbits.LATA4 = 0;
  1398   00148E  9879               	bcf	121,4,c	;volatile
  1399                           
  1400                           ;LEDarray.c: 31:     TRISAbits.TRISA5 = 0;
  1401   001490  9A81               	bcf	129,5,c	;volatile
  1402                           
  1403                           ;LEDarray.c: 32:     LATAbits.LATA5 = 0;
  1404   001492  9A79               	bcf	121,5,c	;volatile
  1405                           
  1406                           ;LEDarray.c: 34:     TRISFbits.TRISF0 = 0;
  1407   001494  9086               	bcf	134,0,c	;volatile
  1408                           
  1409                           ;LEDarray.c: 35:     LATFbits.LATF0 = 0;
  1410   001496  907E               	bcf	126,0,c	;volatile
  1411                           
  1412                           ;LEDarray.c: 37:     TRISBbits.TRISB0 = 0;
  1413   001498  9082               	bcf	130,0,c	;volatile
  1414                           
  1415                           ;LEDarray.c: 38:     LATBbits.LATB0 = 0;
  1416   00149A  907A               	bcf	122,0,c	;volatile
  1417                           
  1418                           ;LEDarray.c: 40:     TRISBbits.TRISB1 = 0;
  1419   00149C  9282               	bcf	130,1,c	;volatile
  1420                           
  1421                           ;LEDarray.c: 41:     LATBbits.LATB1 = 0;
  1422   00149E  927A               	bcf	122,1,c	;volatile
  1423   0014A0  0012               	return		;funcret
  1424   0014A2                     __end_of_LEDarray_init:
  1425                           	callstack 0
  1426                           
  1427 ;; *************** function _LEDarray_disp_bin *****************
  1428 ;; Defined at:
  1429 ;;		line 49 in file "LEDarray.c"
  1430 ;; Parameters:    Size  Location     Type
  1431 ;;  number          2    0[COMRAM] unsigned int 
  1432 ;; Auto vars:     Size  Location     Type
  1433 ;;		None
  1434 ;; Return value:  Size  Location     Type
  1435 ;;                  1    wreg      void 
  1436 ;; Registers used:
  1437 ;;		None
  1438 ;; Tracked objects:
  1439 ;;		On entry : 0/0
  1440 ;;		On exit  : 0/0
  1441 ;;		Unchanged: 0/0
  1442 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1443 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1444 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1445 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1446 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1447 ;;Total ram usage:        2 bytes
  1448 ;; Hardware stack levels used: 1
  1449 ;; Hardware stack levels required when called: 1
  1450 ;; This function calls:
  1451 ;;		Nothing
  1452 ;; This function is called by:
  1453 ;;		_main
  1454 ;; This function uses a non-reentrant model
  1455 ;;
  1456                           
  1457                           	psect	text4
  1458   00130C                     __ptext4:
  1459                           	callstack 0
  1460   00130C                     _LEDarray_disp_bin:
  1461                           	callstack 29
  1462   00130C                     
  1463                           ;LEDarray.c: 49: void LEDarray_disp_bin(unsigned int number);LEDarray.c: 50: {;LEDarray.
      +                          c: 53:     if (number & 0b000000001){ LATGbits.LATG0 = 1 ; }
  1464   00130C  A001               	btfss	LEDarray_disp_bin@number^0,0,c
  1465   00130E  EF8B  F009         	goto	u781
  1466   001312  EF8D  F009         	goto	u780
  1467   001316                     u781:
  1468   001316  EF90  F009         	goto	l99
  1469   00131A                     u780:
  1470   00131A  807F               	bsf	127,0,c	;volatile
  1471   00131C  EF91  F009         	goto	l100
  1472   001320                     l99:
  1473   001320  907F               	bcf	127,0,c	;volatile
  1474   001322                     l100:
  1475                           
  1476                           ;LEDarray.c: 56:     if (number & 0b000000010){ LATGbits.LATG1 = 1 ; }
  1477   001322  A201               	btfss	LEDarray_disp_bin@number^0,1,c
  1478   001324  EF96  F009         	goto	u791
  1479   001328  EF98  F009         	goto	u790
  1480   00132C                     u791:
  1481   00132C  EF9B  F009         	goto	l101
  1482   001330                     u790:
  1483   001330  827F               	bsf	127,1,c	;volatile
  1484   001332  EF9C  F009         	goto	l102
  1485   001336                     l101:
  1486   001336  927F               	bcf	127,1,c	;volatile
  1487   001338                     l102:
  1488                           
  1489                           ;LEDarray.c: 59:     if (number & 0b000000100){ LATAbits.LATA2 = 1 ; }
  1490   001338  A401               	btfss	LEDarray_disp_bin@number^0,2,c
  1491   00133A  EFA1  F009         	goto	u801
  1492   00133E  EFA3  F009         	goto	u800
  1493   001342                     u801:
  1494   001342  EFA6  F009         	goto	l103
  1495   001346                     u800:
  1496   001346  8479               	bsf	121,2,c	;volatile
  1497   001348  EFA7  F009         	goto	l104
  1498   00134C                     l103:
  1499   00134C  9479               	bcf	121,2,c	;volatile
  1500   00134E                     l104:
  1501                           
  1502                           ;LEDarray.c: 62:     if (number & 0b000001000){ LATFbits.LATF6 = 1 ; }
  1503   00134E  A601               	btfss	LEDarray_disp_bin@number^0,3,c
  1504   001350  EFAC  F009         	goto	u811
  1505   001354  EFAE  F009         	goto	u810
  1506   001358                     u811:
  1507   001358  EFB1  F009         	goto	l105
  1508   00135C                     u810:
  1509   00135C  8C7E               	bsf	126,6,c	;volatile
  1510   00135E  EFB2  F009         	goto	l106
  1511   001362                     l105:
  1512   001362  9C7E               	bcf	126,6,c	;volatile
  1513   001364                     l106:
  1514                           
  1515                           ;LEDarray.c: 65:     if (number & 0b000010000){ LATAbits.LATA4 = 1 ; }
  1516   001364  A801               	btfss	LEDarray_disp_bin@number^0,4,c
  1517   001366  EFB7  F009         	goto	u821
  1518   00136A  EFB9  F009         	goto	u820
  1519   00136E                     u821:
  1520   00136E  EFBC  F009         	goto	l107
  1521   001372                     u820:
  1522   001372  8879               	bsf	121,4,c	;volatile
  1523   001374  EFBD  F009         	goto	l108
  1524   001378                     l107:
  1525   001378  9879               	bcf	121,4,c	;volatile
  1526   00137A                     l108:
  1527                           
  1528                           ;LEDarray.c: 68:     if (number & 0b000100000){ LATAbits.LATA5 = 1 ; }
  1529   00137A  AA01               	btfss	LEDarray_disp_bin@number^0,5,c
  1530   00137C  EFC2  F009         	goto	u831
  1531   001380  EFC4  F009         	goto	u830
  1532   001384                     u831:
  1533   001384  EFC7  F009         	goto	l109
  1534   001388                     u830:
  1535   001388  8A79               	bsf	121,5,c	;volatile
  1536   00138A  EFC8  F009         	goto	l110
  1537   00138E                     l109:
  1538   00138E  9A79               	bcf	121,5,c	;volatile
  1539   001390                     l110:
  1540                           
  1541                           ;LEDarray.c: 71:     if (number & 0b001000000){ LATFbits.LATF0 = 1 ; }
  1542   001390  AC01               	btfss	LEDarray_disp_bin@number^0,6,c
  1543   001392  EFCD  F009         	goto	u841
  1544   001396  EFCF  F009         	goto	u840
  1545   00139A                     u841:
  1546   00139A  EFD2  F009         	goto	l111
  1547   00139E                     u840:
  1548   00139E  807E               	bsf	126,0,c	;volatile
  1549   0013A0  EFD3  F009         	goto	l112
  1550   0013A4                     l111:
  1551   0013A4  907E               	bcf	126,0,c	;volatile
  1552   0013A6                     l112:
  1553                           
  1554                           ;LEDarray.c: 74:     if (number & 0b010000000){ LATBbits.LATB0 = 1 ; }
  1555   0013A6  AE01               	btfss	LEDarray_disp_bin@number^0,7,c
  1556   0013A8  EFD8  F009         	goto	u851
  1557   0013AC  EFDA  F009         	goto	u850
  1558   0013B0                     u851:
  1559   0013B0  EFDD  F009         	goto	l113
  1560   0013B4                     u850:
  1561   0013B4  807A               	bsf	122,0,c	;volatile
  1562   0013B6  EFDE  F009         	goto	l114
  1563   0013BA                     l113:
  1564   0013BA  907A               	bcf	122,0,c	;volatile
  1565   0013BC                     l114:
  1566                           
  1567                           ;LEDarray.c: 77:     if (number & 0b100000000){ LATBbits.LATB1 = 1 ; }
  1568   0013BC  A002               	btfss	(LEDarray_disp_bin@number+1)^0,0,c
  1569   0013BE  EFE3  F009         	goto	u861
  1570   0013C2  EFE5  F009         	goto	u860
  1571   0013C6                     u861:
  1572   0013C6  EFE8  F009         	goto	l115
  1573   0013CA                     u860:
  1574   0013CA  827A               	bsf	122,1,c	;volatile
  1575   0013CC  EFE9  F009         	goto	l117
  1576   0013D0                     l115:
  1577   0013D0  927A               	bcf	122,1,c	;volatile
  1578   0013D2                     l117:
  1579   0013D2  0012               	return		;funcret
  1580   0013D4                     __end_of_LEDarray_disp_bin:
  1581                           	callstack 0
  1582                           
  1583 ;; *************** function _Interrupts_init *****************
  1584 ;; Defined at:
  1585 ;;		line 9 in file "interrupts.c"
  1586 ;; Parameters:    Size  Location     Type
  1587 ;;		None
  1588 ;; Auto vars:     Size  Location     Type
  1589 ;;		None
  1590 ;; Return value:  Size  Location     Type
  1591 ;;                  1    wreg      void 
  1592 ;; Registers used:
  1593 ;;		None
  1594 ;; Tracked objects:
  1595 ;;		On entry : 0/0
  1596 ;;		On exit  : 0/0
  1597 ;;		Unchanged: 0/0
  1598 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1599 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1600 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1601 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1602 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1603 ;;Total ram usage:        0 bytes
  1604 ;; Hardware stack levels used: 1
  1605 ;; Hardware stack levels required when called: 1
  1606 ;; This function calls:
  1607 ;;		Nothing
  1608 ;; This function is called by:
  1609 ;;		_main
  1610 ;; This function uses a non-reentrant model
  1611 ;;
  1612                           
  1613                           	psect	text5
  1614   0014F2                     __ptext5:
  1615                           	callstack 0
  1616   0014F2                     _Interrupts_init:
  1617                           	callstack 29
  1618   0014F2                     
  1619                           ;interrupts.c: 15:   INTCONbits.PEIE = 1;
  1620   0014F2  8CF2               	bsf	242,6,c	;volatile
  1621                           
  1622                           ;interrupts.c: 19:     PIE0bits.TMR0IE = 1;
  1623   0014F4  010E               	movlb	14	; () banked
  1624   0014F6  8B29               	bsf	41,5,b	;volatile
  1625                           
  1626                           ;interrupts.c: 20:     PIR0bits.TMR0IF = 0;
  1627   0014F8  9B33               	bcf	51,5,b	;volatile
  1628                           
  1629                           ;interrupts.c: 21:     IPR0bits.TMR0IP = 1;
  1630   0014FA  8B1F               	bsf	31,5,b	;volatile
  1631                           
  1632                           ;interrupts.c: 24:     INTCONbits.GIE=1;
  1633   0014FC  8EF2               	bsf	242,7,c	;volatile
  1634   0014FE                     
  1635                           ; BSR set to: 14
  1636   0014FE  0012               	return		;funcret
  1637   001500                     __end_of_Interrupts_init:
  1638                           	callstack 0
  1639                           
  1640 ;; *************** function _ArrayAppend *****************
  1641 ;; Defined at:
  1642 ;;		line 6 in file "arrayfunction.c"
  1643 ;; Parameters:    Size  Location     Type
  1644 ;;  arrayTime       2    0[COMRAM] PTR int 
  1645 ;;		 -> RAM(3583), main@14175(14), main@14173(14), main@14171(14), 
  1646 ;;		 -> main@14169(14), 
  1647 ;;  size            2    2[COMRAM] int 
  1648 ;;  Time            2    4[COMRAM] int 
  1649 ;; Auto vars:     Size  Location     Type
  1650 ;;  i               2    9[COMRAM] int 
  1651 ;; Return value:  Size  Location     Type
  1652 ;;                  2    0[COMRAM] int 
  1653 ;; Registers used:
  1654 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  1655 ;; Tracked objects:
  1656 ;;		On entry : 0/0
  1657 ;;		On exit  : 0/0
  1658 ;;		Unchanged: 0/0
  1659 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1660 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1661 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1662 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1663 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1664 ;;Total ram usage:       11 bytes
  1665 ;; Hardware stack levels used: 1
  1666 ;; Hardware stack levels required when called: 1
  1667 ;; This function calls:
  1668 ;;		Nothing
  1669 ;; This function is called by:
  1670 ;;		_main
  1671 ;; This function uses a non-reentrant model
  1672 ;;
  1673                           
  1674                           	psect	text6
  1675   0013D4                     __ptext6:
  1676                           	callstack 0
  1677   0013D4                     _ArrayAppend:
  1678                           	callstack 29
  1679   0013D4                     
  1680                           ;arrayfunction.c: 8:         for (int i = 1; i <= size-1; i++) {
  1681   0013D4  0E00               	movlw	0
  1682   0013D6  6E0B               	movwf	(ArrayAppend@i+1)^0,c
  1683   0013D8  0E01               	movlw	1
  1684   0013DA  6E0A               	movwf	ArrayAppend@i^0,c
  1685   0013DC  EF10  F00A         	goto	l1522
  1686   0013E0                     l1512:
  1687                           
  1688                           ;arrayfunction.c: 10:             if (i = 6) {
  1689   0013E0  0E00               	movlw	0
  1690   0013E2  6E0B               	movwf	(ArrayAppend@i+1)^0,c
  1691   0013E4  0E06               	movlw	6
  1692   0013E6  6E0A               	movwf	ArrayAppend@i^0,c
  1693   0013E8                     
  1694                           ;arrayfunction.c: 11:                 arrayTime[i-1] = arrayTime[i];
  1695   0013E8  EE20 F00C          	lfsr	2,12
  1696   0013EC  5001               	movf	ArrayAppend@arrayTime^0,w,c
  1697   0013EE  26D9               	addwf	fsr2l,f,c
  1698   0013F0  5002               	movf	(ArrayAppend@arrayTime+1)^0,w,c
  1699   0013F2  22DA               	addwfc	fsr2h,f,c
  1700   0013F4  EE10 F00A          	lfsr	1,10
  1701   0013F8  5001               	movf	ArrayAppend@arrayTime^0,w,c
  1702   0013FA  26E1               	addwf	fsr1l,f,c
  1703   0013FC  5002               	movf	(ArrayAppend@arrayTime+1)^0,w,c
  1704   0013FE  22E2               	addwfc	fsr1h,f,c
  1705   001400  CFDE FFE6          	movff	postinc2,postinc1
  1706   001404  CFDD FFE5          	movff	postdec2,postdec1
  1707   001408                     
  1708                           ;arrayfunction.c: 12:                 arrayTime[i] = Time;
  1709   001408  EE20 F00C          	lfsr	2,12
  1710   00140C  5001               	movf	ArrayAppend@arrayTime^0,w,c
  1711   00140E  26D9               	addwf	fsr2l,f,c
  1712   001410  5002               	movf	(ArrayAppend@arrayTime+1)^0,w,c
  1713   001412  22DA               	addwfc	fsr2h,f,c
  1714   001414  C005  FFDE         	movff	ArrayAppend@Time,postinc2
  1715   001418  C006  FFDD         	movff	ArrayAppend@Time+1,postdec2
  1716   00141C                     
  1717                           ;arrayfunction.c: 18:         }
  1718   00141C  4A0A               	infsnz	ArrayAppend@i^0,f,c
  1719   00141E  2A0B               	incf	(ArrayAppend@i+1)^0,f,c
  1720   001420                     l1522:
  1721   001420  0EFF               	movlw	255
  1722   001422  2403               	addwf	ArrayAppend@size^0,w,c
  1723   001424  6E07               	movwf	??_ArrayAppend^0,c
  1724   001426  0EFF               	movlw	255
  1725   001428  2004               	addwfc	(ArrayAppend@size+1)^0,w,c
  1726   00142A  6E08               	movwf	(??_ArrayAppend+1)^0,c
  1727   00142C  500A               	movf	ArrayAppend@i^0,w,c
  1728   00142E  5C07               	subwf	??_ArrayAppend^0,w,c
  1729   001430  5008               	movf	(??_ArrayAppend+1)^0,w,c
  1730   001432  0A80               	xorlw	128
  1731   001434  6E09               	movwf	(??_ArrayAppend+2)^0,c
  1732   001436  500B               	movf	(ArrayAppend@i+1)^0,w,c
  1733   001438  0A80               	xorlw	128
  1734   00143A  5809               	subwfb	(??_ArrayAppend+2)^0,w,c
  1735   00143C  B0D8               	btfsc	status,0,c
  1736   00143E  EF23  F00A         	goto	u881
  1737   001442  EF25  F00A         	goto	u880
  1738   001446                     u881:
  1739   001446  EFF0  F009         	goto	l1512
  1740   00144A                     u880:
  1741   00144A  0012               	return		;funcret
  1742   00144C                     __end_of_ArrayAppend:
  1743                           	callstack 0
  1744                           
  1745 ;; *************** function _ADC_init *****************
  1746 ;; Defined at:
  1747 ;;		line 9 in file "ADC.c"
  1748 ;; Parameters:    Size  Location     Type
  1749 ;;		None
  1750 ;; Auto vars:     Size  Location     Type
  1751 ;;		None
  1752 ;; Return value:  Size  Location     Type
  1753 ;;                  1    wreg      void 
  1754 ;; Registers used:
  1755 ;;		wreg, status,2
  1756 ;; Tracked objects:
  1757 ;;		On entry : 0/0
  1758 ;;		On exit  : 0/0
  1759 ;;		Unchanged: 0/0
  1760 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1761 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1762 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1763 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1764 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1765 ;;Total ram usage:        0 bytes
  1766 ;; Hardware stack levels used: 1
  1767 ;; Hardware stack levels required when called: 1
  1768 ;; This function calls:
  1769 ;;		Nothing
  1770 ;; This function is called by:
  1771 ;;		_main
  1772 ;; This function uses a non-reentrant model
  1773 ;;
  1774                           
  1775                           	psect	text7
  1776   0014C2                     __ptext7:
  1777                           	callstack 0
  1778   0014C2                     _ADC_init:
  1779                           	callstack 29
  1780   0014C2                     
  1781                           ;ADC.c: 11:     TRISAbits.TRISA3=1;
  1782   0014C2  8681               	bsf	129,3,c	;volatile
  1783                           
  1784                           ;ADC.c: 12:     ANSELAbits.ANSELA3=1;
  1785   0014C4  010E               	movlb	14	; () banked
  1786   0014C6  8792               	bsf	146,3,b	;volatile
  1787                           
  1788                           ;ADC.c: 14:     ADREFbits.ADNREF = 0;
  1789   0014C8  010F               	movlb	15	; () banked
  1790   0014CA  9958               	bcf	88,4,b	;volatile
  1791   0014CC                     
  1792                           ; BSR set to: 15
  1793                           ;ADC.c: 15:     ADREFbits.ADPREF = 0b00;
  1794   0014CC  0EFC               	movlw	-4
  1795   0014CE  1758               	andwf	88,f,b	;volatile
  1796                           
  1797                           ;ADC.c: 16:     ADPCH=0b11;
  1798   0014D0  0E03               	movlw	3
  1799   0014D2  6F5F               	movwf	95,b	;volatile
  1800   0014D4                     
  1801                           ; BSR set to: 15
  1802                           ;ADC.c: 17:     ADCON0bits.ADFM = 0;
  1803   0014D4  9460               	bcf	96,2,c	;volatile
  1804   0014D6                     
  1805                           ; BSR set to: 15
  1806                           ;ADC.c: 18:     ADCON0bits.ADCS = 1;
  1807   0014D6  8860               	bsf	96,4,c	;volatile
  1808   0014D8                     
  1809                           ; BSR set to: 15
  1810                           ;ADC.c: 19:     ADCON0bits.ADON = 1;
  1811   0014D8  8E60               	bsf	96,7,c	;volatile
  1812   0014DA                     
  1813                           ; BSR set to: 15
  1814   0014DA  0012               	return		;funcret
  1815   0014DC                     __end_of_ADC_init:
  1816                           	callstack 0
  1817                           
  1818 ;; *************** function _ADC_getval *****************
  1819 ;; Defined at:
  1820 ;;		line 22 in file "ADC.c"
  1821 ;; Parameters:    Size  Location     Type
  1822 ;;		None
  1823 ;; Auto vars:     Size  Location     Type
  1824 ;;  tmpval          2    2[COMRAM] unsigned int 
  1825 ;; Return value:  Size  Location     Type
  1826 ;;                  2    0[COMRAM] unsigned int 
  1827 ;; Registers used:
  1828 ;;		wreg, status,2, status,0
  1829 ;; Tracked objects:
  1830 ;;		On entry : 0/0
  1831 ;;		On exit  : 0/0
  1832 ;;		Unchanged: 0/0
  1833 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1834 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1835 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1836 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1837 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1838 ;;Total ram usage:        4 bytes
  1839 ;; Hardware stack levels used: 1
  1840 ;; Hardware stack levels required when called: 1
  1841 ;; This function calls:
  1842 ;;		Nothing
  1843 ;; This function is called by:
  1844 ;;		_main
  1845 ;; This function uses a non-reentrant model
  1846 ;;
  1847                           
  1848                           	psect	text8
  1849   00144C                     __ptext8:
  1850                           	callstack 0
  1851   00144C                     _ADC_getval:
  1852                           	callstack 29
  1853   00144C                     
  1854                           ;ADC.c: 24:     unsigned int tmpval;;ADC.c: 26:     ADCON0bits.GO = 1;
  1855   00144C  8060               	bsf	96,0,c	;volatile
  1856   00144E                     l74:
  1857   00144E  B060               	btfsc	96,0,c	;volatile
  1858   001450  EF2C  F00A         	goto	u871
  1859   001454  EF2E  F00A         	goto	u870
  1860   001458                     u871:
  1861   001458  EF27  F00A         	goto	l74
  1862   00145C                     u870:
  1863   00145C                     
  1864                           ;ADC.c: 30:     tmpval = ADRESH;
  1865   00145C  CF64 F003          	movff	3940,ADC_getval@tmpval	;volatile
  1866   001460  6A04               	clrf	(ADC_getval@tmpval+1)^0,c
  1867   001462                     
  1868                           ;ADC.c: 34:     tmpval = 255 - tmpval;
  1869   001462  5003               	movf	ADC_getval@tmpval^0,w,c
  1870   001464  08FF               	sublw	255
  1871   001466  6E03               	movwf	ADC_getval@tmpval^0,c
  1872   001468  5004               	movf	(ADC_getval@tmpval+1)^0,w,c
  1873   00146A  A0D8               	btfss	status,0,c
  1874   00146C  2AE8               	incf	wreg,f,c
  1875   00146E  0800               	sublw	0
  1876   001470  6E04               	movwf	(ADC_getval@tmpval+1)^0,c
  1877   001472                     
  1878                           ;ADC.c: 36:     return tmpval;
  1879   001472  C003  F001         	movff	ADC_getval@tmpval,?_ADC_getval
  1880   001476  C004  F002         	movff	ADC_getval@tmpval+1,?_ADC_getval+1
  1881   00147A  0012               	return		;funcret
  1882   00147C                     __end_of_ADC_getval:
  1883                           	callstack 0
  1884                           
  1885 ;; *************** function _HighISR *****************
  1886 ;; Defined at:
  1887 ;;		line 31 in file "interrupts.c"
  1888 ;; Parameters:    Size  Location     Type
  1889 ;;		None
  1890 ;; Auto vars:     Size  Location     Type
  1891 ;;		None
  1892 ;; Return value:  Size  Location     Type
  1893 ;;                  1    wreg      void 
  1894 ;; Registers used:
  1895 ;;		wreg, status,2, status,0
  1896 ;; Tracked objects:
  1897 ;;		On entry : 0/0
  1898 ;;		On exit  : 0/0
  1899 ;;		Unchanged: 0/0
  1900 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1901 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1902 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1903 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1904 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1905 ;;Total ram usage:        0 bytes
  1906 ;; Hardware stack levels used: 1
  1907 ;; This function calls:
  1908 ;;		Nothing
  1909 ;; This function is called by:
  1910 ;;		Interrupt level 2
  1911 ;; This function uses a non-reentrant model
  1912 ;;
  1913                           
  1914                           	psect	intcode
  1915   000008                     __pintcode:
  1916                           	callstack 0
  1917   000008                     _HighISR:
  1918                           	callstack 29
  1919                           
  1920                           ;incstack = 0
  1921   000008  820E               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  1922   00000A                     
  1923                           ;interrupts.c: 35:     if(PIR0bits.TMR0IF){
  1924   00000A  010E               	movlb	14	; () banked
  1925   00000C  AB33               	btfss	51,5,b	;volatile
  1926   00000E  EF0B  F000         	goto	i2u101_41
  1927   000012  EF0D  F000         	goto	i2u101_40
  1928   000016                     i2u101_41:
  1929   000016  EF16  F000         	goto	i2l232
  1930   00001A                     i2u101_40:
  1931   00001A                     
  1932                           ; BSR set to: 14
  1933                           ;interrupts.c: 37:         TMR0H = 0b00001011;
  1934   00001A  0E0B               	movlw	11
  1935   00001C  6ED4               	movwf	212,c	;volatile
  1936                           
  1937                           ;interrupts.c: 38:         TMR0L = 0b11011100;
  1938   00001E  0EDC               	movlw	220
  1939   000020  6ED3               	movwf	211,c	;volatile
  1940   000022                     
  1941                           ; BSR set to: 14
  1942                           ;interrupts.c: 39:         GLOBALsecs++;
  1943   000022  0101               	movlb	1	; () banked
  1944   000024  4BE0               	infsnz	_GLOBALsecs& (0+255),f,b
  1945   000026  2BE1               	incf	(_GLOBALsecs+1)& (0+255),f,b
  1946   000028                     
  1947                           ; BSR set to: 1
  1948                           ;interrupts.c: 40:         PIR0bits.TMR0IF=0;
  1949   000028  010E               	movlb	14	; () banked
  1950   00002A  9B33               	bcf	51,5,b	;volatile
  1951   00002C                     i2l232:
  1952                           
  1953                           ; BSR set to: 14
  1954   00002C  920E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1955   00002E  0011               	retfie		f
  1956   000030                     __end_of_HighISR:
  1957                           	callstack 0
  1958                           
  1959                           	psect	smallconst
  1960   000E00                     __psmallconst:
  1961                           	callstack 0
  1962   000E00  00                 	db	0
  1963   000E01  00                 	db	0	; dummy byte at the end
  1964   000000                     
  1965                           	psect	rparam
  1966   000000                     
  1967                           	psect	temp
  1968   00000E                     btemp:
  1969                           	callstack 0
  1970   00000E                     	ds	1
  1971   000000                     int$flags	set	btemp
  1972   000000                     wtemp8	set	btemp+1
  1973   000000                     ttemp5	set	btemp+1
  1974   000000                     ttemp6	set	btemp+4
  1975   000000                     ttemp7	set	btemp+8
  1976                           
  1977                           	psect	config
  1978                           
  1979                           ;Config register CONFIG1L @ 0x300000
  1980                           ;	External Oscillator mode Selection bits
  1981                           ;	FEXTOSC = HS, HS (crystal oscillator) above 8 MHz; PFM set to high power
  1982                           ;	Power-up default value for COSC bits
  1983                           ;	RSTOSC = EXTOSC_4PLL, EXTOSC with 4x PLL, with EXTOSC operating per FEXTOSC bits
  1984   300000                     	org	3145728
  1985   300000  AA                 	db	170
  1986                           
  1987                           ;Config register CONFIG1H @ 0x300001
  1988                           ;	unspecified, using default values
  1989                           ;	Clock Out Enable bit
  1990                           ;	CLKOUTEN = 0x1, unprogrammed default
  1991                           ;	Clock Switch Enable bit
  1992                           ;	CSWEN = 0x1, unprogrammed default
  1993                           ;	Fail-Safe Clock Monitor Enable bit
  1994                           ;	FCMEN = 0x1, unprogrammed default
  1995   300001                     	org	3145729
  1996   300001  FF                 	db	255
  1997                           
  1998                           ;Config register CONFIG3L @ 0x300004
  1999                           ;	WDT Period Select bits
  2000                           ;	WDTCPS = 0x1F, unprogrammed default
  2001                           ;	WDT operating mode
  2002                           ;	WDTE = OFF, WDT Disabled
  2003   300004                     	org	3145732
  2004   300004  9F                 	db	159
  2005                           
  2006                           ;Config register CONFIG3H @ 0x300005
  2007                           ;	unspecified, using default values
  2008                           ;	WDT Window Select bits
  2009                           ;	WDTCWS = 0x7, unprogrammed default
  2010                           ;	WDT input clock selector
  2011                           ;	WDTCCS = 0x7, unprogrammed default
  2012   300005                     	org	3145733
  2013   300005  FF                 	db	255
  2014                           tosu	equ	0xFFF
  2015                           tosh	equ	0xFFE
  2016                           tosl	equ	0xFFD
  2017                           stkptr	equ	0xFFC
  2018                           pclatu	equ	0xFFB
  2019                           pclath	equ	0xFFA
  2020                           pcl	equ	0xFF9
  2021                           tblptru	equ	0xFF8
  2022                           tblptrh	equ	0xFF7
  2023                           tblptrl	equ	0xFF6
  2024                           tablat	equ	0xFF5
  2025                           prodh	equ	0xFF4
  2026                           prodl	equ	0xFF3
  2027                           indf0	equ	0xFEF
  2028                           postinc0	equ	0xFEE
  2029                           postdec0	equ	0xFED
  2030                           preinc0	equ	0xFEC
  2031                           plusw0	equ	0xFEB
  2032                           fsr0h	equ	0xFEA
  2033                           fsr0l	equ	0xFE9
  2034                           wreg	equ	0xFE8
  2035                           indf1	equ	0xFE7
  2036                           postinc1	equ	0xFE6
  2037                           postdec1	equ	0xFE5
  2038                           preinc1	equ	0xFE4
  2039                           plusw1	equ	0xFE3
  2040                           fsr1h	equ	0xFE2
  2041                           fsr1l	equ	0xFE1
  2042                           bsr	equ	0xFE0
  2043                           indf2	equ	0xFDF
  2044                           postinc2	equ	0xFDE
  2045                           postdec2	equ	0xFDD
  2046                           preinc2	equ	0xFDC
  2047                           plusw2	equ	0xFDB
  2048                           fsr2h	equ	0xFDA
  2049                           fsr2l	equ	0xFD9
  2050                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         56
    Persistent  2
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     13      13
    BANK0           160      0       0
    BANK1           256    168     226
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          234      0       0

Pointer List with Targets:

    ArrayAppend@arrayTime	PTR int  size(2) Largest target is 3583
		 -> main@14169(BANK1[14]), main@14171(BANK1[14]), main@14173(BANK1[14]), main@14175(BANK1[14]), 
		 -> RAM(DATA[3583]), 

    UpdateClock@days	PTR int  size(2) Largest target is 8
		 -> main@clock(BANK1[8]), 

    UpdateClock@hours	PTR int  size(2) Largest target is 8
		 -> main@clock(BANK1[8]), 

    UpdateClock@minutes	PTR int  size(2) Largest target is 8
		 -> main@clock(BANK1[8]), 

    UpdateClock@seconds	PTR int  size(2) Largest target is 2
		 -> GLOBALsecs(BANK1[2]), 


Critical Paths under _main in COMRAM

    _main->_ArrayAppend

Critical Paths under _HighISR in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _HighISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _HighISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _HighISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _HighISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _HighISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _HighISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _HighISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _HighISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _HighISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _HighISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _HighISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _HighISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _HighISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _HighISR in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                               170   170      0    5511
                                             11 COMRAM     2     2      0
                                              0 BANK1    168   168      0
                         _ADC_getval
                           _ADC_init
                        _ArrayAppend
                    _Interrupts_init
                  _LEDarray_disp_bin
                      _LEDarray_init
                        _Timer0_init
                        _UpdateClock
 ---------------------------------------------------------------------------------
 (1) _UpdateClock                                         10     2      8     949
                                              0 COMRAM    10     2      8
 ---------------------------------------------------------------------------------
 (1) _Timer0_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LEDarray_init                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LEDarray_disp_bin                                    2     0      2     274
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _Interrupts_init                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ArrayAppend                                         11     5      6    1207
                                              0 COMRAM    11     5      6
 ---------------------------------------------------------------------------------
 (1) _ADC_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ADC_getval                                           4     2      2      46
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (2) _HighISR                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_getval
   _ADC_init
   _ArrayAppend
   _Interrupts_init
   _LEDarray_disp_bin
   _LEDarray_init
   _Timer0_init
   _UpdateClock

 _HighISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             DE9      0       0      50        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     A8      E2       7       88.3%
BITBANK13           EA      0       0      30        0.0%
BANK13              EA      0       0      31        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITBIGSFRllhlhh     84      0       0      42        0.0%
BITBIGSFRlllhh      5E      0       0      45        0.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E      D       D       1       13.8%
BITBIGSFRhhll       4A      0       0      34        0.0%
BITBIGSFRllhll      33      0       0      44        0.0%
BITBIGSFRlllll      30      0       0      48        0.0%
BITBIGSFRhhlhh      1B      0       0      33        0.0%
BITBIGSFRllhhhh     14      0       0      39        0.0%
BITBIGSFRhhh         D      0       0      32        0.0%
BITBIGSFRllllh       9      0       0      47        0.0%
BITBIGSFRlllhl       9      0       0      46        0.0%
BITBIGSFRllhlhl      8      0       0      43        0.0%
BITBIGSFRllhhl       6      0       0      41        0.0%
BITBIGSFRllhhhl      3      0       0      40        0.0%
BITBIGSFRllhhhh      1      0       0      38        0.0%
BITBIGSFRlhh         1      0       0      36        0.0%
BITBIGSFRlhl         1      0       0      37        0.0%
BITBIGSFRhl          1      0       0      35        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      EF      49        0.0%
DATA                 0      0      EF       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.45 build 20230818022343 
Symbol Table                                                                                   Fri Feb 09 00:30:11 2024

                       l43 10D6                         l45 10D0                         l71 14DA  
                       l74 144E                         l76 145C                         l77 147A  
                       l96 14A0                         l99 1320          ??_Interrupts_init 0001  
                      l100 1322                        l101 1336                        l110 1390  
                      l102 1338                        l111 13A4                        l103 134C  
                      l112 13A6                        l104 134E                        l113 13BA  
                      l105 1362                        l114 13BC                        l106 1364  
                      l115 13D0                        l107 1378                        l108 137A  
                      l117 13D2                        l109 138E                        l226 14FE  
                      l260 130A                        l245 14C0                        l268 144A  
                      u800 1346                        u801 1342                        u810 135C  
                      u811 1358                        u820 1372                        u821 136E  
                      u830 1388                        u831 1384                        u840 139E  
                      u841 139A                        u850 13B4                        u851 13B0  
                      u860 13CA                        u780 131A                        u861 13C6  
                      u781 1316                        u870 145C                        u790 1330  
                      u871 1458                        u791 132C                        u880 144A  
                      u881 1446                        wreg 0FE8                       l1500 13CA  
                     l1502 144C                       l1510 13D4                       l1504 1462  
                     l1520 141C                       l1512 13E0                       l1440 14B4  
                     l1506 1472                       l1450 14D4                       l1514 13E8  
                     l1522 1420                       l1434 147C                       l1442 14BE  
                     l1452 14D6                       l1516 1408                       l1444 14F2  
                     l1436 14A2                       l1454 14D8                       l1446 14C2  
                     l1438 14AA                       l1448 14CC                       l1800 0EB0  
                     l1490 135C                       l1482 130C                       l1730 11F6  
                     l1722 1176                       l1810 0ED8                       l1802 0EB8  
                     l1492 1372                       l1484 131A                       l1740 1286  
                     l1732 121E                       l1724 118E                       l1820 0F00  
                     l1812 0EE0                       l1804 0EC0                       l1494 1388  
                     l1486 1330                       l1742 12AE                       l1734 122A  
                     l1726 11B6                       l1910 10F8                       l1830 0F28  
                     l1822 0F08                       l1814 0EE8                       l1806 0EC8  
                     l1750 0E06                       l1496 139E                       l1488 1346  
                     l1744 12D6                       l1736 1252                       l1728 11CE  
                     l1920 1100                       l1840 0F50                       l1832 0F30  
                     l1824 0F10                       l1816 0EF0                       l1808 0ED0  
                     l1760 0E14                       l1752 0E0A                       l1498 13B4  
                     l1746 12E2                       l1738 127A                       l1930 1134  
                     l1922 1116                       l1906 10E0                       l1850 0F78  
                     l1842 0F58                       l1834 0F38                       l1826 0F18  
                     l1818 0EF8                       l1770 0E38                       l1762 0E16  
                     l1754 0E0E                       l1932 1148                       l1924 1126  
                     l1908 10F6                       l1860 0FA8                       l1852 0F80  
                     l1844 0F60                       l1836 0F40                       l1828 0F20  
                     l1780 0E60                       l1772 0E40                       l1764 0E20  
                     l1756 0E10                       l1748 0E02                       l1934 114C  
                     l1926 112A                       l1870 0FD4                       l1862 0FB0  
                     l1854 0F88                       l1846 0F68                       l1838 0F48  
                     l1790 0E88                       l1782 0E68                       l1774 0E48  
                     l1766 0E28                       l1758 0E12                       l1936 1164  
                     l1928 112C                       l1880 100E                       l1872 0FE0  
                     l1864 0FB8                       l1856 0F94                       l1848 0F70  
                     l1792 0E90                       l1784 0E70                       l1776 0E50  
                     l1768 0E30                       l1890 107C                       l1882 1032  
                     l1874 0FE8                       l1866 0FC0                       l1858 0F9C  
                     l1794 0E98                       l1786 0E78                       l1778 0E58  
                     l1892 1098                       l1884 103E                       l1876 0FFE  
                     l1868 0FCC                       l1796 0EA0                       l1788 0E80  
                     l1894 10B4                       l1886 104A                       l1878 1006  
                     l1798 0EA8                       l1896 10D8                       l1888 1062  
                     u1020 11B6                       u1100 1062                       u1021 11B2  
                     u1101 105E                       u1030 121E                       u1110 107C  
                     u1031 121A                       u1111 1078                       u1040 127A  
                     u1120 1098                       u1041 1276                       u1121 1094  
                     u1050 12D6                       u1130 10B4                       u1051 12D2  
                     u1131 10B0                       u1140 10D0                       u1141 10CC  
                     u1061 0F8E                       u1150 10F6                       u1151 10F2  
                     u1071 0FA2                       u1160 1116                       u1161 1112  
                     u1081 0FC6                       u1170 1148                       u1171 1144  
                     u1091 0FDA                       u1187 1156                       _main 0E02  
                     fsr1h 0FE2                       fsr2h 0FDA                       fsr1l 0FE1  
                     fsr2l 0FD9                       btemp 000E                       start 0030  
         __end_of_ADC_init 14DC        main@light_threshold 013C            __end_of_HighISR 0030  
             ___param_bank 0000        __end_of_ArrayAppend 144C               main@daycount 013A  
                    ?_main 0001                      _ADPCH 0F5F                      i2l232 002C  
                    _TMR0H 0FD4                      _TMR0L 0FD3                      plusw2 0FDB  
                    ttemp5 000F                      ttemp6 0012                      ttemp7 0016  
                    status 0FD8                      wtemp8 000F            __initialization 14DC  
          ArrayAppend@Time 0005               __end_of_main 1176            ArrayAppend@size 0003  
                   ??_main 000C              __activetblptr 0000                     _ADRESH 0F64  
         UpdateClock@hours 0005                     i2l1720 0028                     i2l1714 000A  
                   i2l1716 001A                     i2l1718 0022                  ??_HighISR 0001  
              _ArrayAppend 13D4          _LEDarray_disp_bin 130C         ?_LEDarray_disp_bin 0001  
             ??_ADC_getval 0003              ??_Timer0_init 0001        ??_LEDarray_disp_bin 0003  
                   clear_0 14E2                     isa$std 0001               __mediumconst 0000  
                ?_ADC_init 0001         __end_of_ADC_getval 147C  __end_of_LEDarray_disp_bin 13D4  
               __accesstop 0060              ??_UpdateClock 0009    __end_of__initialization 14E8  
            ___rparam_used 0001              _LEDarray_init 147C            _Interrupts_init 14F2  
           __pcstackCOMRAM 0001        __end_of_Timer0_init 14C2                 ??_ADC_init 0001  
               __pbssBANK1 01A8             ?_LEDarray_init 0001        __end_of_UpdateClock 130C  
  __end_of_Interrupts_init 1500                    _HighISR 0008       ArrayAppend@arrayTime 0001  
                _ADREFbits 0F58                    __Hparam 0000                    __Lparam 0000  
              _Timer0_init 14A2               __psmallconst 0E00                    __pcinit 14DC  
                  __ramtop 0E00                    __ptext0 0E02                    __ptext1 1176  
                  __ptext2 14A2                    __ptext3 147C                    __ptext4 130C  
                  __ptext5 14F2                    __ptext6 13D4                    __ptext7 14C2  
                  __ptext8 144C                    main@Dec 0182                    main@Feb 0146  
                  main@Aug 016A                    main@Apr 0152                    main@Jan 0140  
                  main@Mar 014C                    main@May 0158                    main@Oct 0176  
                  main@Jul 0164                    main@Jun 015E                    main@Sep 0170  
                  main@Nov 017C       end_of_initialization 14E8           ADC_getval@tmpval 0003  
          ??_LEDarray_init 0001                _UpdateClock 1176               ?_ArrayAppend 0001  
                  postdec1 0FE5                    postdec2 0FDD                    postinc0 0FEE  
                  postinc1 0FE6                    postinc2 0FDE                 main@F14170 01C4  
               main@F14172 01B6                 main@F14174 01A8                 main@F14168 01D2  
                _TRISAbits 0F81                  _TRISBbits 0F82                  _TRISDbits 0F84  
                _TRISFbits 0F86                  _TRISGbits 0F87                  _TRISHbits 0F88  
    main@previousClockDays 0138                _CM1CON0bits 0ED0                _CM1CON1bits 0ED1  
         ?_Interrupts_init 0001                 main@curval 013E        start_initialization 14DC  
          UpdateClock@days 0007              __pcstackBANK1 0100                   ?_HighISR 0001  
                __pnvBANK1 01E0               ?_Timer0_init 0001                  __pintcode 0008  
              __smallconst 0E00                   _ADC_init 14C2               ?_UpdateClock 0001  
                 _LATAbits 0F79         UpdateClock@minutes 0003         UpdateClock@seconds 0001  
                 _LATBbits 0F7A                   _LATDbits 0F7C                   _LATFbits 0F7E  
                 _LATGbits 0F7F                   _LATHbits 0F80                   _IPR0bits 0E1F  
                 _PIE0bits 0E29                   i2u101_40 001A                   i2u101_41 0016  
                 _PIR0bits 0E33                  main@14171 010E                  main@14173 011C  
                main@14175 012A                  main@14169 0100                  main@DSTon 0188  
               _ADCON0bits 0F60                  main@clock 01A0                 _CM1NCHbits 0ED2  
               _CM1PCHbits 0ED3      __end_of_LEDarray_init 14A2                   __Hrparam 0000  
               _ADC_getval 144C                   __Lrparam 0000                 _ANSELAbits 0E92  
               _T0CON0bits 0FD5                 _T0CON1bits 0FD6    LEDarray_disp_bin@number 0001  
               _GLOBALsecs 01E0                   isa$xinst 0000                   int$flags 000E  
                 main@Dawn 0190                   main@Dusk 0198               ArrayAppend@i 000A  
               _INTCONbits 0FF2                   intlevel2 0000               _DAC1CON0bits 0EC6  
             _DAC1CON1bits 0EC7                ?_ADC_getval 0001              ??_ArrayAppend 0007  
