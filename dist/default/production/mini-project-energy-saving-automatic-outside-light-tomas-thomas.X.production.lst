

Microchip MPLAB XC8 Assembler V2.45 build 20230818022343 
                                                                                               Fri Feb 09 02:50:37 2024

Microchip MPLAB XC8 C Compiler v2.45 (Free license) build 20230818022343 Og1 
     1                           	processor	18F67K40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    15                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    16                           	psect	text0,global,reloc=2,class=CODE,delta=1
    17                           	psect	text1,global,reloc=2,class=CODE,delta=1,group=3
    18                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=1
    19                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    20                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    21                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=2
    22                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    24                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=3
    25                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=3
    26                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=3
    27                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=3
    28                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=2
    29                           	psect	text13,global,reloc=2,class=CODE,delta=1
    30                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=2
    31                           	psect	text15,global,reloc=2,class=CODE,delta=1
    32                           	psect	text16,global,reloc=2,class=CODE,delta=1
    33                           	psect	text17,global,reloc=2,class=CODE,delta=1
    34                           	psect	text18,global,reloc=2,class=CODE,delta=1
    35                           	psect	text19,global,reloc=2,class=CODE,delta=1
    36                           	psect	text20,global,reloc=2,class=CODE,delta=1
    37                           	psect	text21,global,reloc=2,class=CODE,delta=1
    38                           	psect	text22,global,reloc=2,class=CODE,delta=1
    39                           	psect	text23,global,reloc=2,class=CODE,delta=1
    40                           	psect	text24,global,reloc=2,class=CODE,delta=1
    41                           	psect	text25,global,reloc=2,class=CODE,delta=1
    42                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    43                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    44                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    45                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    46                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    47   000000                     
    48                           ; Generated 21/07/2023 GMT
    49                           ; 
    50                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    51                           ; All rights reserved.
    52                           ; 
    53                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    54                           ; 
    55                           ; Redistribution and use in source and binary forms, with or without modification, are
    56                           ; permitted provided that the following conditions are met:
    57                           ; 
    58                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    59                           ;        conditions and the following disclaimer.
    60                           ; 
    61                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    62                           ;        of conditions and the following disclaimer in the documentation and/or other
    63                           ;        materials provided with the distribution. Publication is not required when
    64                           ;        this file is used in an embedded application.
    65                           ; 
    66                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    67                           ;        software without specific prior written permission.
    68                           ; 
    69                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    70                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    71                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    72                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    73                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    74                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    75                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    76                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    77                           ; 
    78                           ; 
    79                           ; Code-generator required, PIC18F67K40 Definitions
    80                           ; 
    81                           ; SFR Addresses
    82   000000                     
    83                           	psect	idataBANK0
    84   002034                     __pidataBANK0:
    85                           	callstack 0
    86                           
    87                           ;initializer for UpdateClock@F14152
    88   002034  001F               	dw	31
    89   002036  001C               	dw	28
    90   002038  001F               	dw	31
    91   00203A  001E               	dw	30
    92   00203C  001F               	dw	31
    93   00203E  001E               	dw	30
    94   002040  001F               	dw	31
    95   002042  001F               	dw	31
    96   002044  001E               	dw	30
    97   002046  001F               	dw	31
    98   002048  001E               	dw	30
    99   00204A  001F               	dw	31
   100                           
   101                           	psect	idataBANK1
   102   001DF0                     __pidataBANK1:
   103                           	callstack 0
   104                           
   105                           ;initializer for main@F14518
   106   001DF0  001F               	dw	31
   107   001DF2  001C               	dw	28
   108   001DF4  001F               	dw	31
   109   001DF6  001E               	dw	30
   110   001DF8  001F               	dw	31
   111   001DFA  001E               	dw	30
   112   001DFC  001F               	dw	31
   113   001DFE  001F               	dw	31
   114   001E00  001E               	dw	30
   115   001E02  001F               	dw	31
   116   001E04  001E               	dw	30
   117   001E06  001F               	dw	31
   118   001E08  0000               	dw	0
   119   001E0A  0000               	dw	0
   120   001E0C  0000               	dw	0
   121   001E0E  0000               	dw	0
   122   001E10  0017               	dw	23
   123   001E12  0000               	dw	0
   124   001E14  0000               	dw	0
   125   001E16  0000               	dw	0
   126   001E18  0017               	dw	23
   127   001E1A  0017               	dw	23
   128   001E1C  0017               	dw	23
   129   001E1E  0017               	dw	23
   130   001E20  0009               	dw	9
   131   001E22  000D               	dw	13
   132   001E24  0008               	dw	8
   133   001E26  0001               	dw	1
   134   001E28  0039               	dw	57
   135   001E2A  0001               	dw	1
   136   001E2C  0005               	dw	5
   137   001E2E  0003               	dw	3
   138   001E30  0037               	dw	55
   139   001E32  002F               	dw	47
   140   001E34  002E               	dw	46
   141   001E36  0038               	dw	56
   142   000000                     _TRISCbits	set	3971
   143   000000                     _TRISEbits	set	3973
   144   000000                     _LATEbits	set	3965
   145   000000                     _LATCbits	set	3963
   146   000000                     _LATBbits	set	3962
   147   000000                     _TRISBbits	set	3970
   148   000000                     _LATFbits	set	3966
   149   000000                     _TRISAbits	set	3969
   150   000000                     _LATGbits	set	3967
   151   000000                     _TRISGbits	set	3975
   152   000000                     _CM1CON1bits	set	3793
   153   000000                     _TRISFbits	set	3974
   154   000000                     _LATHbits	set	3968
   155   000000                     _TRISHbits	set	3976
   156   000000                     _IPR0bits	set	3615
   157   000000                     _PIE0bits	set	3625
   158   000000                     _LATDbits	set	3964
   159   000000                     _TRISDbits	set	3972
   160   000000                     _TMR0L	set	4051
   161   000000                     _TMR0H	set	4052
   162   000000                     _T0CON0bits	set	4053
   163   000000                     _T0CON1bits	set	4054
   164   000000                     _INTCONbits	set	4082
   165   000000                     _PIR0bits	set	3635
   166   000000                     _ANSELAbits	set	3730
   167   000000                     _DAC1CON0bits	set	3782
   168   000000                     _CM1CON0bits	set	3792
   169   000000                     _CM1NCHbits	set	3794
   170   000000                     _DAC1CON1bits	set	3783
   171   000000                     _ADREFbits	set	3928
   172   000000                     _LATAbits	set	3961
   173   000000                     _CM1PCHbits	set	3795
   174   000000                     _ADPCH	set	3935
   175   000000                     _ADRESH	set	3940
   176   000000                     _ADCON0bits	set	3936
   177                           
   178                           	psect	smallconst
   179   000E00                     __psmallconst:
   180                           	callstack 0
   181   000E00  00                 	db	0
   182   000E01                     STR_1:
   183                           
   184                           ; BSR set to: 14
   185   000E01  54                 	db	84	;'T'
   186   000E02  69                 	db	105	;'i'
   187   000E03  6D                 	db	109	;'m'
   188   000E04  65                 	db	101	;'e'
   189   000E05  3A                 	db	58	;':'
   190   000E06  25                 	db	37
   191   000E07  30                 	db	48	;'0'
   192   000E08  32                 	db	50	;'2'
   193   000E09  64                 	db	100	;'d'
   194   000E0A  3A                 	db	58	;':'
   195   000E0B  25                 	db	37
   196   000E0C  30                 	db	48	;'0'
   197   000E0D  32                 	db	50	;'2'
   198   000E0E  64                 	db	100	;'d'
   199   000E0F  3A                 	db	58	;':'
   200   000E10  25                 	db	37
   201   000E11  30                 	db	48	;'0'
   202   000E12  32                 	db	50	;'2'
   203   000E13  64                 	db	100	;'d'
   204   000E14  20                 	db	32
   205   000E15  44                 	db	68	;'D'
   206   000E16  25                 	db	37
   207   000E17  30                 	db	48	;'0'
   208   000E18  31                 	db	49	;'1'
   209   000E19  64                 	db	100	;'d'
   210   000E1A  00                 	db	0
   211   000E1B                     
   212                           ; BSR set to: 14
   213   000E1B  54                 	db	84	;'T'
   214   000E1C  69                 	db	105	;'i'
   215   000E1D  6D                 	db	109	;'m'
   216   000E1E  65                 	db	101	;'e'
   217   000E1F  3A                 	db	58	;':'
   218   000E20  20                 	db	32
   219   000E21  25                 	db	37
   220   000E22  30                 	db	48	;'0'
   221   000E23  32                 	db	50	;'2'
   222   000E24  64                 	db	100	;'d'
   223   000E25  3A                 	db	58	;':'
   224   000E26  25                 	db	37
   225   000E27  30                 	db	48	;'0'
   226   000E28  32                 	db	50	;'2'
   227   000E29  64                 	db	100	;'d'
   228   000E2A  3A                 	db	58	;':'
   229   000E2B  25                 	db	37
   230   000E2C  30                 	db	48	;'0'
   231   000E2D  34                 	db	52	;'4'
   232   000E2E  64                 	db	100	;'d'
   233   000E2F  00                 	db	0
   234   000E30                     STR_2:
   235                           
   236                           ; BSR set to: 14
   237   000E30  44                 	db	68	;'D'
   238   000E31  61                 	db	97	;'a'
   239   000E32  74                 	db	116	;'t'
   240   000E33  65                 	db	101	;'e'
   241   000E34  3A                 	db	58	;':'
   242   000E35  25                 	db	37
   243   000E36  30                 	db	48	;'0'
   244   000E37  32                 	db	50	;'2'
   245   000E38  64                 	db	100	;'d'
   246   000E39  2F                 	db	47
   247   000E3A  25                 	db	37
   248   000E3B  30                 	db	48	;'0'
   249   000E3C  32                 	db	50	;'2'
   250   000E3D  64                 	db	100	;'d'
   251   000E3E  2F                 	db	47
   252   000E3F  25                 	db	37
   253   000E40  30                 	db	48	;'0'
   254   000E41  34                 	db	52	;'4'
   255   000E42  64                 	db	100	;'d'
   256   000E43  00                 	db	0
   257   000E44  00                 	db	0	; dummy byte at the end
   258   000000                     
   259                           ; #config settings
   260                           
   261                           	psect	cinit
   262   001D8A                     __pcinit:
   263                           	callstack 0
   264   001D8A                     start_initialization:
   265                           	callstack 0
   266   001D8A                     __initialization:
   267                           	callstack 0
   268                           
   269                           ; Initialize objects allocated to BANK1 (72 bytes)
   270                           ; load TBLPTR registers with __pidataBANK1
   271   001D8A  0EF0               	movlw	low __pidataBANK1
   272   001D8C  6EF6               	movwf	tblptrl,c
   273   001D8E  0E1D               	movlw	high __pidataBANK1
   274   001D90  6EF7               	movwf	tblptrh,c
   275   001D92  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   276   001D94  6EF8               	movwf	tblptru,c
   277   001D96  EE01  F000         	lfsr	0,__pdataBANK1
   278   001D9A  EE10 F048          	lfsr	1,72
   279   001D9E                     copy_data0:
   280   001D9E  0009               	tblrd		*+
   281   001DA0  CFF5 FFEE          	movff	tablat,postinc0
   282   001DA4  50E5               	movf	postdec1,w,c
   283   001DA6  50E1               	movf	fsr1l,w,c
   284   001DA8  E1FA               	bnz	copy_data0
   285                           
   286                           ; Initialize objects allocated to BANK0 (24 bytes)
   287                           ; load TBLPTR registers with __pidataBANK0
   288   001DAA  0E34               	movlw	low __pidataBANK0
   289   001DAC  6EF6               	movwf	tblptrl,c
   290   001DAE  0E20               	movlw	high __pidataBANK0
   291   001DB0  6EF7               	movwf	tblptrh,c
   292   001DB2  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   293   001DB4  6EF8               	movwf	tblptru,c
   294   001DB6  EE00  F0CC         	lfsr	0,__pdataBANK0
   295   001DBA  EE10 F018          	lfsr	1,24
   296   001DBE                     copy_data1:
   297   001DBE  0009               	tblrd		*+
   298   001DC0  CFF5 FFEE          	movff	tablat,postinc0
   299   001DC4  50E5               	movf	postdec1,w,c
   300   001DC6  50E1               	movf	fsr1l,w,c
   301   001DC8  E1FA               	bnz	copy_data1
   302                           
   303                           ; Clear objects allocated to BANK1 (32 bytes)
   304   001DCA  EE01  F048         	lfsr	0,__pbssBANK1
   305   001DCE  0E20               	movlw	32
   306   001DD0                     clear_0:
   307   001DD0  6AEE               	clrf	postinc0,c
   308   001DD2  06E8               	decf	wreg,f,c
   309   001DD4  E1FD               	bnz	clear_0
   310                           
   311                           ; Clear objects allocated to BANK0 (2 bytes)
   312   001DD6  0100               	movlb	0
   313   001DD8  6BE5               	clrf	(__pbssBANK0+1)& (0+255),b
   314   001DDA  6BE4               	clrf	__pbssBANK0& (0+255),b
   315                           
   316                           ; Clear objects allocated to COMRAM (5 bytes)
   317   001DDC  6A4D               	clrf	(__pbssCOMRAM+4)& (0+255),c
   318   001DDE  6A4C               	clrf	(__pbssCOMRAM+3)& (0+255),c
   319   001DE0  6A4B               	clrf	(__pbssCOMRAM+2)& (0+255),c
   320   001DE2  6A4A               	clrf	(__pbssCOMRAM+1)& (0+255),c
   321   001DE4  6A49               	clrf	__pbssCOMRAM& (0+255),c
   322   001DE6                     end_of_initialization:
   323                           	callstack 0
   324   001DE6                     __end_of__initialization:
   325                           	callstack 0
   326   001DE6  904E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   327   001DE8  924E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   328   001DEA  0100               	movlb	0
   329   001DEC  EF3F  F00B         	goto	_main	;jump to C main() function
   330                           
   331                           	psect	bssCOMRAM
   332   000049                     __pbssCOMRAM:
   333                           	callstack 0
   334   000049                     _width:
   335                           	callstack 0
   336   000049                     	ds	2
   337   00004B                     _prec:
   338                           	callstack 0
   339   00004B                     	ds	2
   340   00004D                     _flags:
   341                           	callstack 0
   342   00004D                     	ds	1
   343                           
   344                           	psect	bssBANK0
   345   0000E4                     __pbssBANK0:
   346                           	callstack 0
   347   0000E4                     _GLOBALsecs:
   348                           	callstack 0
   349   0000E4                     	ds	2
   350                           
   351                           	psect	dataBANK0
   352   0000CC                     __pdataBANK0:
   353                           	callstack 0
   354   0000CC                     UpdateClock@F14152:
   355                           	callstack 0
   356   0000CC                     	ds	24
   357                           
   358                           	psect	bssBANK1
   359   000148                     __pbssBANK1:
   360                           	callstack 0
   361   000148                     _dbuf:
   362                           	callstack 0
   363   000148                     	ds	32
   364                           
   365                           	psect	dataBANK1
   366   000100                     __pdataBANK1:
   367                           	callstack 0
   368   000100                     main@F14518:
   369                           	callstack 0
   370   000100                     	ds	72
   371                           
   372                           	psect	cstackBANK0
   373   000060                     __pcstackBANK0:
   374                           	callstack 0
   375   000060                     main@buffer:
   376                           	callstack 0
   377                           
   378                           ; 18 bytes @ 0x0
   379   000060                     	ds	18
   380   000072                     main@SolarPerMonth:
   381                           	callstack 0
   382                           
   383                           ; 72 bytes @ 0x12
   384   000072                     	ds	72
   385   0000BA                     main@TestMode:
   386                           	callstack 0
   387                           
   388                           ; 2 bytes @ 0x5A
   389   0000BA                     	ds	2
   390   0000BC                     main@clock:
   391                           	callstack 0
   392                           
   393                           ; 16 bytes @ 0x5C
   394   0000BC                     	ds	16
   395                           
   396                           	psect	cstackCOMRAM
   397   000001                     __pcstackCOMRAM:
   398                           	callstack 0
   399   000001                     ?___wmul:
   400                           	callstack 0
   401   000001                     ?___awdiv:
   402                           	callstack 0
   403   000001                     ?___awmod:
   404                           	callstack 0
   405   000001                     LCD_sendnibble@number:
   406                           	callstack 0
   407   000001                     LEDarray_disp_bin@number:
   408                           	callstack 0
   409   000001                     ___wmul@multiplier:
   410                           	callstack 0
   411   000001                     ___awdiv@dividend:
   412                           	callstack 0
   413   000001                     ___awmod@dividend:
   414                           	callstack 0
   415   000001                     fputc@c:
   416                           	callstack 0
   417                           
   418                           ; 2 bytes @ 0x0
   419   000001                     	ds	1
   420   000002                     LCD_sendbyte@type:
   421                           	callstack 0
   422                           
   423                           ; 1 bytes @ 0x1
   424   000002                     	ds	1
   425   000003                     LCD_sendbyte@Byte:
   426                           	callstack 0
   427   000003                     fputc@fp:
   428                           	callstack 0
   429   000003                     ___wmul@multiplicand:
   430                           	callstack 0
   431   000003                     ___awdiv@divisor:
   432                           	callstack 0
   433   000003                     ___awmod@divisor:
   434                           	callstack 0
   435                           
   436                           ; 2 bytes @ 0x2
   437   000003                     	ds	1
   438   000004                     ??_LCD_Init:
   439   000004                     ??_fputc:
   440   000004                     LCD_setline@line:
   441                           	callstack 0
   442   000004                     LCD_sendstring@string:
   443                           	callstack 0
   444                           
   445                           ; 1 bytes @ 0x3
   446   000004                     	ds	1
   447   000005                     ___awdiv@counter:
   448                           	callstack 0
   449   000005                     ___awmod@counter:
   450                           	callstack 0
   451   000005                     ___wmul@product:
   452                           	callstack 0
   453                           
   454                           ; 2 bytes @ 0x4
   455   000005                     	ds	1
   456   000006                     ___awdiv@sign:
   457                           	callstack 0
   458   000006                     ___awmod@sign:
   459                           	callstack 0
   460                           
   461                           ; 1 bytes @ 0x5
   462   000006                     	ds	1
   463   000007                     ?_abs:
   464                           	callstack 0
   465   000007                     ?_read_prec_or_width:
   466                           	callstack 0
   467   000007                     UpdateClock@seconds:
   468                           	callstack 0
   469   000007                     read_prec_or_width@fmt:
   470                           	callstack 0
   471   000007                     ___awdiv@quotient:
   472                           	callstack 0
   473   000007                     abs@a:
   474                           	callstack 0
   475                           
   476                           ; 2 bytes @ 0x6
   477   000007                     	ds	1
   478   000008                     UpdateClock@minutes:
   479                           	callstack 0
   480   000008                     read_prec_or_width@ap:
   481                           	callstack 0
   482                           
   483                           ; 1 bytes @ 0x7
   484   000008                     	ds	1
   485   000009                     ??_abs:
   486   000009                     UpdateClock@hours:
   487                           	callstack 0
   488   000009                     read_prec_or_width@c:
   489                           	callstack 0
   490   000009                     fputs@s:
   491                           	callstack 0
   492                           
   493                           ; 2 bytes @ 0x8
   494   000009                     	ds	1
   495   00000A                     UpdateClock@days:
   496                           	callstack 0
   497   00000A                     read_prec_or_width@n:
   498                           	callstack 0
   499                           
   500                           ; 2 bytes @ 0x9
   501   00000A                     	ds	1
   502   00000B                     UpdateClock@DoW:
   503                           	callstack 0
   504   00000B                     fputs@fp:
   505                           	callstack 0
   506                           
   507                           ; 1 bytes @ 0xA
   508   00000B                     	ds	1
   509   00000C                     UpdateClock@months:
   510                           	callstack 0
   511   00000C                     fputs@c:
   512                           	callstack 0
   513                           
   514                           ; 1 bytes @ 0xB
   515   00000C                     	ds	1
   516   00000D                     UpdateClock@years:
   517                           	callstack 0
   518   00000D                     fputs@i:
   519                           	callstack 0
   520                           
   521                           ; 2 bytes @ 0xC
   522   00000D                     	ds	1
   523   00000E                     UpdateClock@DSTstate:
   524                           	callstack 0
   525                           
   526                           ; 1 bytes @ 0xD
   527   00000E                     	ds	1
   528   00000F                     pad@fp:
   529                           	callstack 0
   530   00000F                     UpdateClock@TestMode:
   531                           	callstack 0
   532                           
   533                           ; 2 bytes @ 0xE
   534   00000F                     	ds	1
   535   000010                     pad@buf:
   536                           	callstack 0
   537                           
   538                           ; 2 bytes @ 0xF
   539   000010                     	ds	1
   540   000011                     ??_UpdateClock:
   541                           
   542                           ; 1 bytes @ 0x10
   543   000011                     	ds	1
   544   000012                     pad@p:
   545                           	callstack 0
   546                           
   547                           ; 2 bytes @ 0x11
   548   000012                     	ds	2
   549   000014                     ??_pad:
   550                           
   551                           ; 1 bytes @ 0x13
   552   000014                     	ds	1
   553   000015                     pad@i:
   554                           	callstack 0
   555                           
   556                           ; 2 bytes @ 0x14
   557   000015                     	ds	2
   558   000017                     dtoa@fp:
   559                           	callstack 0
   560   000017                     UpdateClock@DaysInMonth:
   561                           	callstack 0
   562                           
   563                           ; 24 bytes @ 0x16
   564   000017                     	ds	1
   565   000018                     dtoa@d:
   566                           	callstack 0
   567                           
   568                           ; 2 bytes @ 0x17
   569   000018                     	ds	2
   570   00001A                     _dtoa$1891:
   571                           	callstack 0
   572                           
   573                           ; 2 bytes @ 0x19
   574   00001A                     	ds	2
   575   00001C                     dtoa@p:
   576                           	callstack 0
   577                           
   578                           ; 1 bytes @ 0x1B
   579   00001C                     	ds	1
   580   00001D                     dtoa@w:
   581                           	callstack 0
   582                           
   583                           ; 2 bytes @ 0x1C
   584   00001D                     	ds	2
   585   00001F                     dtoa@s:
   586                           	callstack 0
   587                           
   588                           ; 1 bytes @ 0x1E
   589   00001F                     	ds	1
   590   000020                     dtoa@i:
   591                           	callstack 0
   592                           
   593                           ; 2 bytes @ 0x1F
   594   000020                     	ds	2
   595   000022                     vfpfcnvrt@fp:
   596                           	callstack 0
   597                           
   598                           ; 1 bytes @ 0x21
   599   000022                     	ds	1
   600   000023                     vfpfcnvrt@fmt:
   601                           	callstack 0
   602                           
   603                           ; 1 bytes @ 0x22
   604   000023                     	ds	1
   605   000024                     vfpfcnvrt@ap:
   606                           	callstack 0
   607                           
   608                           ; 1 bytes @ 0x23
   609   000024                     	ds	1
   610   000025                     ??_vfpfcnvrt:
   611                           
   612                           ; 1 bytes @ 0x24
   613   000025                     	ds	2
   614   000027                     vfpfcnvrt@convarg:
   615                           	callstack 0
   616                           
   617                           ; 4 bytes @ 0x26
   618   000027                     	ds	4
   619   00002B                     vfpfcnvrt@done:
   620                           	callstack 0
   621                           
   622                           ; 1 bytes @ 0x2A
   623   00002B                     	ds	1
   624   00002C                     vfpfcnvrt@cp:
   625                           	callstack 0
   626                           
   627                           ; 1 bytes @ 0x2B
   628   00002C                     	ds	1
   629   00002D                     ?_vfprintf:
   630                           	callstack 0
   631   00002D                     vfprintf@fp:
   632                           	callstack 0
   633                           
   634                           ; 1 bytes @ 0x2C
   635   00002D                     	ds	1
   636   00002E                     vfprintf@fmt:
   637                           	callstack 0
   638                           
   639                           ; 1 bytes @ 0x2D
   640   00002E                     	ds	1
   641   00002F                     vfprintf@ap:
   642                           	callstack 0
   643                           
   644                           ; 1 bytes @ 0x2E
   645   00002F                     	ds	1
   646   000030                     vfprintf@cfmt:
   647                           	callstack 0
   648                           
   649                           ; 1 bytes @ 0x2F
   650   000030                     	ds	1
   651   000031                     ?_sprintf:
   652                           	callstack 0
   653   000031                     sprintf@s:
   654                           	callstack 0
   655                           
   656                           ; 1 bytes @ 0x30
   657   000031                     	ds	1
   658   000032                     sprintf@fmt:
   659                           	callstack 0
   660                           
   661                           ; 1 bytes @ 0x31
   662   000032                     	ds	9
   663   00003B                     sprintf@ap:
   664                           	callstack 0
   665                           
   666                           ; 1 bytes @ 0x3A
   667   00003B                     	ds	1
   668   00003C                     sprintf@f:
   669                           	callstack 0
   670                           
   671                           ; 12 bytes @ 0x3B
   672   00003C                     	ds	12
   673   000048                     ??_main:
   674                           
   675                           ; 1 bytes @ 0x47
   676   000048                     	ds	1
   677                           
   678 ;;
   679 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   680 ;;
   681 ;; *************** function _main *****************
   682 ;; Defined at:
   683 ;;		line 19 in file "main.c"
   684 ;; Parameters:    Size  Location     Type
   685 ;;		None
   686 ;; Auto vars:     Size  Location     Type
   687 ;;  SolarPerMont   72   18[BANK0 ] struct month_structure
   688 ;;  buffer         18    0[BANK0 ] unsigned char [18]
   689 ;;  clock          16   92[BANK0 ] struct time_structure
   690 ;;  TestMode        2   90[BANK0 ] int 
   691 ;; Return value:  Size  Location     Type
   692 ;;                  1    wreg      void 
   693 ;; Registers used:
   694 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   695 ;; Tracked objects:
   696 ;;		On entry : 0/0
   697 ;;		On exit  : 0/0
   698 ;;		Unchanged: 0/0
   699 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   700 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   701 ;;      Locals:         0     108       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   702 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   703 ;;      Totals:         1     108       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   704 ;;Total ram usage:      109 bytes
   705 ;; Hardware stack levels required when called: 9
   706 ;; This function calls:
   707 ;;		_ADC_init
   708 ;;		_Interrupts_init
   709 ;;		_LCD_Init
   710 ;;		_LCD_sendstring
   711 ;;		_LCD_setline
   712 ;;		_LEDarray_disp_bin
   713 ;;		_LEDarray_init
   714 ;;		_Timer0_init
   715 ;;		_UpdateClock
   716 ;;		_sprintf
   717 ;; This function is called by:
   718 ;;		Startup code after reset
   719 ;; This function uses a non-reentrant model
   720 ;;
   721                           
   722                           	psect	text0
   723   00167E                     __ptext0:
   724                           	callstack 0
   725   00167E                     _main:
   726                           	callstack 22
   727   00167E                     
   728                           ;main.c: 22:     LEDarray_init();
   729   00167E  ECD8  F00F         	call	_LEDarray_init	;wreg free
   730   001682                     
   731                           ;main.c: 23:     Timer0_init();
   732   001682  ECFD  F00F         	call	_Timer0_init	;wreg free
   733   001686                     
   734                           ;main.c: 24:     Interrupts_init();
   735   001686  EC2D  F010         	call	_Interrupts_init	;wreg free
   736   00168A                     
   737                           ;main.c: 25:     LCD_Init();
   738   00168A  ECEE  F00B         	call	_LCD_Init	;wreg free
   739   00168E                     
   740                           ;main.c: 26:     ADC_init();
   741   00168E  EC0D  F010         	call	_ADC_init	;wreg free
   742   001692                     
   743                           ;main.c: 28:     char buffer[18];;main.c: 32:     TRISDbits.TRISD7 = 0;
   744   001692  9E84               	bcf	132,7,c	;volatile
   745   001694                     
   746                           ;main.c: 33:     LATDbits.LATD7 = 0;
   747   001694  9E7C               	bcf	124,7,c	;volatile
   748   001696                     
   749                           ;main.c: 36:     TRISHbits.TRISH3 = 0;
   750   001696  9688               	bcf	136,3,c	;volatile
   751   001698                     
   752                           ;main.c: 37:     LATHbits.LATH3 = 0;
   753   001698  9680               	bcf	128,3,c	;volatile
   754   00169A                     
   755                           ;main.c: 46:     int TestMode = 0;
   756   00169A  0E00               	movlw	0
   757   00169C  0100               	movlb	0	; () banked
   758   00169E  6FBB               	movwf	(main@TestMode+1)& (0+255),b
   759   0016A0  0E00               	movlw	0
   760   0016A2  6FBA               	movwf	main@TestMode& (0+255),b
   761   0016A4                     
   762                           ; BSR set to: 0
   763                           ;main.c: 51:     struct time_structure clock;;main.c: 53:         GLOBALsecs = 00;
   764   0016A4  0E00               	movlw	0
   765   0016A6  6FE5               	movwf	(_GLOBALsecs+1)& (0+255),b
   766   0016A8  0E00               	movlw	0
   767   0016AA  6FE4               	movwf	_GLOBALsecs& (0+255),b
   768   0016AC                     
   769                           ; BSR set to: 0
   770                           ;main.c: 54:         clock.minutes = 59;
   771   0016AC  0E00               	movlw	0
   772   0016AE  6FBF               	movwf	(main@clock+3)& (0+255),b
   773   0016B0  0E3B               	movlw	59
   774   0016B2  6FBE               	movwf	(main@clock+2)& (0+255),b
   775   0016B4                     
   776                           ; BSR set to: 0
   777                           ;main.c: 55:         clock.hours = 22;
   778   0016B4  0E00               	movlw	0
   779   0016B6  6FC1               	movwf	(main@clock+5)& (0+255),b
   780   0016B8  0E16               	movlw	22
   781   0016BA  6FC0               	movwf	(main@clock+4)& (0+255),b
   782   0016BC                     
   783                           ; BSR set to: 0
   784                           ;main.c: 56:         clock.days = 28;
   785   0016BC  0E00               	movlw	0
   786   0016BE  6FC3               	movwf	(main@clock+7)& (0+255),b
   787   0016C0  0E1C               	movlw	28
   788   0016C2  6FC2               	movwf	(main@clock+6)& (0+255),b
   789   0016C4                     
   790                           ; BSR set to: 0
   791                           ;main.c: 57:         clock.DoW = 5;
   792   0016C4  0E00               	movlw	0
   793   0016C6  6FC5               	movwf	(main@clock+9)& (0+255),b
   794   0016C8  0E05               	movlw	5
   795   0016CA  6FC4               	movwf	(main@clock+8)& (0+255),b
   796   0016CC                     
   797                           ; BSR set to: 0
   798                           ;main.c: 58:         clock.months = 2;
   799   0016CC  0E00               	movlw	0
   800   0016CE  6FC7               	movwf	(main@clock+11)& (0+255),b
   801   0016D0  0E02               	movlw	2
   802   0016D2  6FC6               	movwf	(main@clock+10)& (0+255),b
   803   0016D4                     
   804                           ; BSR set to: 0
   805                           ;main.c: 59:         clock.years = 2024;
   806   0016D4  0E07               	movlw	7
   807   0016D6  6FC9               	movwf	(main@clock+13)& (0+255),b
   808   0016D8  0EE8               	movlw	232
   809   0016DA  6FC8               	movwf	(main@clock+12)& (0+255),b
   810   0016DC                     
   811                           ; BSR set to: 0
   812                           ;main.c: 60:         clock.DSTstate = 0;
   813   0016DC  0E00               	movlw	0
   814   0016DE  6FCB               	movwf	(main@clock+15)& (0+255),b
   815   0016E0  0E00               	movlw	0
   816   0016E2  6FCA               	movwf	(main@clock+14)& (0+255),b
   817   0016E4                     
   818                           ; BSR set to: 0
   819                           ;main.c: 92:     struct month_structure SolarPerMonth = {
   820   0016E4  EE21  F000         	lfsr	2,main@F14518
   821   0016E8  EE10  F072         	lfsr	1,main@SolarPerMonth
   822   0016EC  0E47               	movlw	71
   823   0016EE                     u2761:
   824   0016EE  CFDB FFE3          	movff	plusw2,plusw1
   825   0016F2  06E8               	decf	wreg,f,c
   826   0016F4  E2FC               	bc	u2761
   827   0016F6                     
   828                           ; BSR set to: 0
   829                           ;main.c: 149:     clock.seconds = GLOBALsecs;
   830   0016F6  C0E4  F0BC         	movff	_GLOBALsecs,main@clock
   831   0016FA  C0E5  F0BD         	movff	_GLOBALsecs+1,main@clock+1
   832   0016FE                     l2841:
   833                           
   834                           ;main.c: 158:         if (TestMode == 0){clock.seconds = GLOBALsecs;}
   835   0016FE  0100               	movlb	0	; () banked
   836   001700  51BA               	movf	main@TestMode& (0+255),w,b
   837   001702  11BB               	iorwf	(main@TestMode+1)& (0+255),w,b
   838   001704  A4D8               	btfss	status,2,c
   839   001706  EF87  F00B         	goto	u2771
   840   00170A  EF89  F00B         	goto	u2770
   841   00170E                     u2771:
   842   00170E  EF8D  F00B         	goto	l2845
   843   001712                     u2770:
   844   001712                     
   845                           ; BSR set to: 0
   846   001712  C0E4  F0BC         	movff	_GLOBALsecs,main@clock
   847   001716  C0E5  F0BD         	movff	_GLOBALsecs+1,main@clock+1
   848   00171A                     l2845:
   849                           
   850                           ; BSR set to: 0
   851                           ;main.c: 159:         UpdateClock(&GLOBALsecs, &clock.minutes, &clock.hours, &clock.days
      +                          , &clock.DoW, &clock.months, &clock.years, &clock.DSTstate, TestMode);
   852   00171A  0EE4               	movlw	low _GLOBALsecs
   853   00171C  6E07               	movwf	UpdateClock@seconds^0,c
   854   00171E  0EBE               	movlw	low (main@clock+2)
   855   001720  6E08               	movwf	UpdateClock@minutes^0,c
   856   001722  0EC0               	movlw	low (main@clock+4)
   857   001724  6E09               	movwf	UpdateClock@hours^0,c
   858   001726  0EC2               	movlw	low (main@clock+6)
   859   001728  6E0A               	movwf	UpdateClock@days^0,c
   860   00172A  0EC4               	movlw	low (main@clock+8)
   861   00172C  6E0B               	movwf	UpdateClock@DoW^0,c
   862   00172E  0EC6               	movlw	low (main@clock+10)
   863   001730  6E0C               	movwf	UpdateClock@months^0,c
   864   001732  0EC8               	movlw	low (main@clock+12)
   865   001734  6E0D               	movwf	UpdateClock@years^0,c
   866   001736  0ECA               	movlw	low (main@clock+14)
   867   001738  6E0E               	movwf	UpdateClock@DSTstate^0,c
   868   00173A  C0BA  F00F         	movff	main@TestMode,UpdateClock@TestMode
   869   00173E  C0BB  F010         	movff	main@TestMode+1,UpdateClock@TestMode+1
   870   001742  EC23  F007         	call	_UpdateClock	;wreg free
   871   001746                     
   872                           ;main.c: 162:         LEDarray_disp_bin(clock.hours);
   873   001746  C0C0  F001         	movff	main@clock+4,LEDarray_disp_bin@number
   874   00174A  C0C1  F002         	movff	main@clock+5,LEDarray_disp_bin@number+1
   875   00174E  EC7E  F00C         	call	_LEDarray_disp_bin	;wreg free
   876   001752                     
   877                           ;main.c: 165:         LCD_setline(1);
   878   001752  0E01               	movlw	1
   879   001754  EC5D  F00F         	call	_LCD_setline
   880   001758                     
   881                           ;main.c: 166:         sprintf(buffer, "Time:%02d:%02d:%02d D%01d",clock.hours, clock.min
      +                          utes, clock.seconds, clock.DoW);
   882   001758  0E60               	movlw	low main@buffer
   883   00175A  6E31               	movwf	sprintf@s^0,c
   884   00175C  0E01               	movlw	low STR_1
   885   00175E  6E32               	movwf	sprintf@fmt^0,c
   886   001760  C0C0  F033         	movff	main@clock+4,?_sprintf+2
   887   001764  C0C1  F034         	movff	main@clock+5,?_sprintf+3
   888   001768  C0BE  F035         	movff	main@clock+2,?_sprintf+4
   889   00176C  C0BF  F036         	movff	main@clock+3,?_sprintf+5
   890   001770  C0BC  F037         	movff	main@clock,?_sprintf+6
   891   001774  C0BD  F038         	movff	main@clock+1,?_sprintf+7
   892   001778  C0C4  F039         	movff	main@clock+8,?_sprintf+8
   893   00177C  C0C5  F03A         	movff	main@clock+9,?_sprintf+9
   894   001780  EC7A  F00F         	call	_sprintf	;wreg free
   895   001784                     
   896                           ;main.c: 167:         LCD_sendstring(buffer);
   897   001784  0E60               	movlw	low main@buffer
   898   001786  6E04               	movwf	LCD_sendstring@string^0,c
   899   001788  ECAE  F00F         	call	_LCD_sendstring	;wreg free
   900   00178C                     
   901                           ;main.c: 168:         LCD_setline(2);
   902   00178C  0E02               	movlw	2
   903   00178E  EC5D  F00F         	call	_LCD_setline
   904   001792                     
   905                           ;main.c: 170:         sprintf(buffer, "Date:%02d/%02d/%04d",clock.days, clock.months, So
      +                          larPerMonth.MidMinutes[GLOBALsecs]);
   906   001792  0E60               	movlw	low main@buffer
   907   001794  6E31               	movwf	sprintf@s^0,c
   908   001796  0E30               	movlw	low STR_2
   909   001798  6E32               	movwf	sprintf@fmt^0,c
   910   00179A  C0C2  F033         	movff	main@clock+6,?_sprintf+2
   911   00179E  C0C3  F034         	movff	main@clock+7,?_sprintf+3
   912   0017A2  C0C6  F035         	movff	main@clock+10,?_sprintf+4
   913   0017A6  C0C7  F036         	movff	main@clock+11,?_sprintf+5
   914   0017AA  0100               	movlb	0	; () banked
   915   0017AC  51E4               	movf	_GLOBALsecs& (0+255),w,b
   916   0017AE  0D02               	mullw	2
   917   0017B0  CFF3 F048          	movff	prodl,??_main
   918   0017B4  0E30               	movlw	48
   919   0017B6  2648               	addwf	??_main^0,f,c
   920   0017B8  5048               	movf	??_main^0,w,c
   921   0017BA  0F72               	addlw	low main@SolarPerMonth
   922   0017BC  6ED9               	movwf	fsr2l,c
   923   0017BE  6ADA               	clrf	fsr2h,c
   924   0017C0  CFDE F037          	movff	postinc2,?_sprintf+6
   925   0017C4  CFDD F038          	movff	postdec2,?_sprintf+7
   926   0017C8  EC7A  F00F         	call	_sprintf	;wreg free
   927   0017CC                     
   928                           ;main.c: 171:         LCD_sendstring(buffer);
   929   0017CC  0E60               	movlw	low main@buffer
   930   0017CE  6E04               	movwf	LCD_sendstring@string^0,c
   931   0017D0  ECAE  F00F         	call	_LCD_sendstring	;wreg free
   932   0017D4  EF7F  F00B         	goto	l2841
   933   0017D8  EF18  F000         	goto	start
   934   0017DC                     __end_of_main:
   935                           	callstack 0
   936                           
   937 ;; *************** function _sprintf *****************
   938 ;; Defined at:
   939 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\nf_sprintf.c"
   940 ;; Parameters:    Size  Location     Type
   941 ;;  s               1   48[COMRAM] PTR unsigned char 
   942 ;;		 -> main@buffer(18), 
   943 ;;  fmt             1   49[COMRAM] PTR const unsigned char 
   944 ;;		 -> STR_3(21), STR_2(20), STR_1(26), 
   945 ;; Auto vars:     Size  Location     Type
   946 ;;  f              12   59[COMRAM] struct _IO_FILE
   947 ;;  ret             2    0        int 
   948 ;;  ap              1   58[COMRAM] PTR void [1]
   949 ;;		 -> ?_sprintf(2), 
   950 ;; Return value:  Size  Location     Type
   951 ;;                  2   48[COMRAM] int 
   952 ;; Registers used:
   953 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   954 ;; Tracked objects:
   955 ;;		On entry : 0/0
   956 ;;		On exit  : 0/0
   957 ;;		Unchanged: 0/0
   958 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   959 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   960 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   961 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   962 ;;      Totals:        23       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   963 ;;Total ram usage:       23 bytes
   964 ;; Hardware stack levels used: 1
   965 ;; Hardware stack levels required when called: 8
   966 ;; This function calls:
   967 ;;		_vfprintf
   968 ;; This function is called by:
   969 ;;		_main
   970 ;;		_ADC2String
   971 ;; This function uses a non-reentrant model
   972 ;;
   973                           
   974                           	psect	text1
   975   001EF4                     __ptext1:
   976                           	callstack 0
   977   001EF4                     _sprintf:
   978                           	callstack 22
   979   001EF4  0E33               	movlw	low (?_sprintf+2)
   980   001EF6  6E3B               	movwf	sprintf@ap^0,c
   981   001EF8  C031  F03C         	movff	sprintf@s,sprintf@f
   982   001EFC  0E00               	movlw	0
   983   001EFE  6E40               	movwf	(sprintf@f+4)^0,c
   984   001F00  0E00               	movlw	0
   985   001F02  6E3F               	movwf	(sprintf@f+3)^0,c
   986   001F04  0E00               	movlw	0
   987   001F06  6E47               	movwf	(sprintf@f+11)^0,c
   988   001F08  0E00               	movlw	0
   989   001F0A  6E46               	movwf	(sprintf@f+10)^0,c
   990   001F0C  0E3C               	movlw	low sprintf@f
   991   001F0E  6E2D               	movwf	vfprintf@fp^0,c
   992   001F10  C032  F02E         	movff	sprintf@fmt,vfprintf@fmt
   993   001F14  0E3B               	movlw	low sprintf@ap
   994   001F16  6E2F               	movwf	vfprintf@ap^0,c
   995   001F18  EC1C  F00F         	call	_vfprintf	;wreg free
   996   001F1C  5031               	movf	sprintf@s^0,w,c
   997   001F1E  243F               	addwf	(sprintf@f+3)^0,w,c
   998   001F20  6ED9               	movwf	fsr2l,c
   999   001F22  6ADA               	clrf	fsr2h,c
  1000   001F24  6ADF               	clrf	indf2,c
  1001   001F26  0012               	return		;funcret
  1002   001F28                     __end_of_sprintf:
  1003                           	callstack 0
  1004                           
  1005 ;; *************** function _vfprintf *****************
  1006 ;; Defined at:
  1007 ;;		line 1817 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
  1008 ;; Parameters:    Size  Location     Type
  1009 ;;  fp              1   44[COMRAM] PTR struct _IO_FILE
  1010 ;;		 -> sprintf@f(12), 
  1011 ;;  fmt             1   45[COMRAM] PTR const unsigned char 
  1012 ;;		 -> STR_3(21), STR_2(20), STR_1(26), 
  1013 ;;  ap              1   46[COMRAM] PTR PTR void 
  1014 ;;		 -> sprintf@ap(1), 
  1015 ;; Auto vars:     Size  Location     Type
  1016 ;;  cfmt            1   47[COMRAM] PTR unsigned char 
  1017 ;;		 -> STR_3(21), STR_2(20), STR_1(26), 
  1018 ;; Return value:  Size  Location     Type
  1019 ;;                  2   44[COMRAM] int 
  1020 ;; Registers used:
  1021 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1022 ;; Tracked objects:
  1023 ;;		On entry : 0/0
  1024 ;;		On exit  : 0/0
  1025 ;;		Unchanged: 0/0
  1026 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1027 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1028 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1029 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1030 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1031 ;;Total ram usage:        4 bytes
  1032 ;; Hardware stack levels used: 1
  1033 ;; Hardware stack levels required when called: 7
  1034 ;; This function calls:
  1035 ;;		_vfpfcnvrt
  1036 ;; This function is called by:
  1037 ;;		_sprintf
  1038 ;; This function uses a non-reentrant model
  1039 ;;
  1040                           
  1041                           	psect	text2
  1042   001E38                     __ptext2:
  1043                           	callstack 0
  1044   001E38                     _vfprintf:
  1045                           	callstack 22
  1046   001E38                     
  1047                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1817: int vfprint
      +                          f(FILE *fp, const char *fmt, va_list ap);C:\Program Files\Microchip\xc8\v2.45\pic\source
      +                          s\c99\common\doprnt.c: 1818: {;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\comm
      +                          on\doprnt.c: 1820:     char *cfmt;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\
      +                          common\doprnt.c: 1822:     cfmt = (char *)fmt;
  1048   001E38  C02E  F030         	movff	vfprintf@fmt,vfprintf@cfmt
  1049                           
  1050                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1826:     while (
      +                          *cfmt) {
  1051   001E3C  EF28  F00F         	goto	l2777
  1052   001E40                     l2775:
  1053                           
  1054                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1830:    vfpfcnvr
      +                          t(fp, &cfmt, ap);
  1055   001E40  C02D  F022         	movff	vfprintf@fp,vfpfcnvrt@fp
  1056   001E44  0E30               	movlw	low vfprintf@cfmt
  1057   001E46  6E23               	movwf	vfpfcnvrt@fmt^0,c
  1058   001E48  C02F  F024         	movff	vfprintf@ap,vfpfcnvrt@ap
  1059   001E4C  ECC3  F009         	call	_vfpfcnvrt	;wreg free
  1060   001E50                     l2777:
  1061                           
  1062                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1826:     while (
      +                          *cfmt) {
  1063   001E50  C030  FFF6         	movff	vfprintf@cfmt,tblptrl
  1064   001E54                     	if	1	;There is more than 1 active tblptr byte
  1065   001E54  0E0E               	movlw	high __smallconst
  1066   001E56  6EF7               	movwf	tblptrh,c
  1067   001E58                     	endif
  1068   001E58                     	if	0	;tblptru may be non-zero
  1069   001E58                     	endif
  1070   001E58                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1071   001E58  0E00               	movlw	low (__smallconst shr (0+16))
  1072   001E5A  6EF8               	movwf	tblptru,c
  1073   001E5C                     	endif
  1074   001E5C  0008               	tblrd		*
  1075   001E5E  50F5               	movf	tablat,w,c
  1076   001E60  0900               	iorlw	0
  1077   001E62  A4D8               	btfss	status,2,c
  1078   001E64  EF36  F00F         	goto	u2751
  1079   001E68  EF38  F00F         	goto	u2750
  1080   001E6C                     u2751:
  1081   001E6C  EF20  F00F         	goto	l2775
  1082   001E70                     u2750:
  1083   001E70                     
  1084                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1835:  return 0;
  1085   001E70  0E00               	movlw	0
  1086   001E72  6E2E               	movwf	(?_vfprintf+1)^0,c
  1087   001E74  0E00               	movlw	0
  1088   001E76  6E2D               	movwf	?_vfprintf^0,c
  1089   001E78  0012               	return		;funcret
  1090   001E7A                     __end_of_vfprintf:
  1091                           	callstack 0
  1092                           
  1093 ;; *************** function _vfpfcnvrt *****************
  1094 ;; Defined at:
  1095 ;;		line 1177 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
  1096 ;; Parameters:    Size  Location     Type
  1097 ;;  fp              1   33[COMRAM] PTR struct _IO_FILE
  1098 ;;		 -> sprintf@f(12), 
  1099 ;;  fmt             1   34[COMRAM] PTR PTR unsigned char 
  1100 ;;		 -> vfprintf@cfmt(1), 
  1101 ;;  ap              1   35[COMRAM] PTR PTR void 
  1102 ;;		 -> sprintf@ap(1), 
  1103 ;; Auto vars:     Size  Location     Type
  1104 ;;  convarg         4   38[COMRAM] struct .
  1105 ;;  cp              1   43[COMRAM] PTR unsigned char 
  1106 ;;		 -> STR_3(21), STR_2(20), STR_1(26), 
  1107 ;;  done            1   42[COMRAM] _Bool 
  1108 ;;  c               1    0        unsigned char 
  1109 ;; Return value:  Size  Location     Type
  1110 ;;                  1    wreg      void 
  1111 ;; Registers used:
  1112 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1113 ;; Tracked objects:
  1114 ;;		On entry : 0/0
  1115 ;;		On exit  : 0/0
  1116 ;;		Unchanged: 0/0
  1117 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1118 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1119 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1120 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1121 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1122 ;;Total ram usage:       11 bytes
  1123 ;; Hardware stack levels used: 1
  1124 ;; Hardware stack levels required when called: 6
  1125 ;; This function calls:
  1126 ;;		_dtoa
  1127 ;;		_fputc
  1128 ;;		_read_prec_or_width
  1129 ;; This function is called by:
  1130 ;;		_vfprintf
  1131 ;; This function uses a non-reentrant model
  1132 ;;
  1133                           
  1134                           	psect	text3
  1135   001386                     __ptext3:
  1136                           	callstack 0
  1137   001386                     _vfpfcnvrt:
  1138                           	callstack 22
  1139   001386                     
  1140                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1177: vfpfcnvrt(F
      +                          ILE *fp, char *fmt[], va_list ap);C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\c
      +                          ommon\doprnt.c: 1178: {;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\dopr
      +                          nt.c: 1179:     char c, *cp;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common
      +                          \doprnt.c: 1180:     _Bool done;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\co
      +                          mmon\doprnt.c: 1188:  } convarg;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\co
      +                          mmon\doprnt.c: 1201:     if ((*fmt)[0] == '%') {
  1141   001386  5023               	movf	vfpfcnvrt@fmt^0,w,c
  1142   001388  6ED9               	movwf	fsr2l,c
  1143   00138A  6ADA               	clrf	fsr2h,c
  1144   00138C  CFDF FFF6          	movff	indf2,tblptrl
  1145   001390                     	if	1	;There is more than 1 active tblptr byte
  1146   001390  0E0E               	movlw	high __smallconst
  1147   001392  6EF7               	movwf	tblptrh,c
  1148   001394                     	endif
  1149   001394                     	if	0	;tblptru may be non-zero
  1150   001394                     	endif
  1151   001394                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1152   001394  0E00               	movlw	low (__smallconst shr (0+16))
  1153   001396  6EF8               	movwf	tblptru,c
  1154   001398                     	endif
  1155   001398  0008               	tblrd		*
  1156   00139A  50F5               	movf	tablat,w,c
  1157   00139C  0A25               	xorlw	37
  1158   00139E  A4D8               	btfss	status,2,c
  1159   0013A0  EFD4  F009         	goto	u2701
  1160   0013A4  EFD6  F009         	goto	u2700
  1161   0013A8                     u2701:
  1162   0013A8  EF70  F00A         	goto	l2763
  1163   0013AC                     u2700:
  1164   0013AC                     
  1165                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1202:         ++*
      +                          fmt;
  1166   0013AC  5023               	movf	vfpfcnvrt@fmt^0,w,c
  1167   0013AE  6ED9               	movwf	fsr2l,c
  1168   0013B0  6ADA               	clrf	fsr2h,c
  1169   0013B2  2ADF               	incf	indf2,f,c
  1170   0013B4                     
  1171                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1204:         fla
      +                          gs = width = 0;
  1172   0013B4  0E00               	movlw	0
  1173   0013B6  6E4A               	movwf	(_width+1)^0,c
  1174   0013B8  0E00               	movlw	0
  1175   0013BA  6E49               	movwf	_width^0,c
  1176   0013BC  C049  F04D         	movff	_width,_flags
  1177   0013C0                     
  1178                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1205:         pre
      +                          c = -1;
  1179   0013C0  684B               	setf	_prec^0,c
  1180   0013C2  684C               	setf	(_prec+1)^0,c
  1181   0013C4                     
  1182                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1209:         don
      +                          e = 0;
  1183   0013C4  0E00               	movlw	0
  1184   0013C6  6E2B               	movwf	vfpfcnvrt@done^0,c
  1185                           
  1186                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1210:         whi
      +                          le (!done) {
  1187   0013C8  EF0C  F00A         	goto	l2737
  1188   0013CC                     l2727:
  1189                           
  1190                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1220:            
      +                                   flags |= (1 << 1);
  1191   0013CC  824D               	bsf	_flags^0,1,c
  1192   0013CE                     
  1193                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1221:            
      +                                   ++*fmt;
  1194   0013CE  5023               	movf	vfpfcnvrt@fmt^0,w,c
  1195   0013D0  6ED9               	movwf	fsr2l,c
  1196   0013D2  6ADA               	clrf	fsr2h,c
  1197   0013D4  2ADF               	incf	indf2,f,c
  1198                           
  1199                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1222:            
      +                                   break;
  1200   0013D6  EF0C  F00A         	goto	l2737
  1201   0013DA                     l2731:
  1202                           
  1203                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1243:            
      +                                   done = 1;
  1204   0013DA  0E01               	movlw	1
  1205   0013DC  6E2B               	movwf	vfpfcnvrt@done^0,c
  1206                           
  1207                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1244:            
      +                                   break;
  1208   0013DE  EF0C  F00A         	goto	l2737
  1209   0013E2                     l2735:
  1210   0013E2  5023               	movf	vfpfcnvrt@fmt^0,w,c
  1211   0013E4  6ED9               	movwf	fsr2l,c
  1212   0013E6  6ADA               	clrf	fsr2h,c
  1213   0013E8  CFDF FFF6          	movff	indf2,tblptrl
  1214   0013EC                     	if	1	;There is more than 1 active tblptr byte
  1215   0013EC  0E0E               	movlw	high __smallconst
  1216   0013EE  6EF7               	movwf	tblptrh,c
  1217   0013F0                     	endif
  1218   0013F0                     	if	0	;tblptru may be non-zero
  1219   0013F0                     	endif
  1220   0013F0                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1221   0013F0  0E00               	movlw	low (__smallconst shr (0+16))
  1222   0013F2  6EF8               	movwf	tblptru,c
  1223   0013F4                     	endif
  1224   0013F4  0008               	tblrd		*
  1225   0013F6  50F5               	movf	tablat,w,c
  1226   0013F8  6E25               	movwf	??_vfpfcnvrt^0,c
  1227   0013FA  6A26               	clrf	(??_vfpfcnvrt+1)^0,c
  1228                           
  1229                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1230                           ; Switch size 1, requested type "simple"
  1231                           ; Number of cases is 1, Range of values is 0 to 0
  1232                           ; switch strategies available:
  1233                           ; Name         Instructions Cycles
  1234                           ; simple_byte            4     3 (average)
  1235                           ;	Chosen strategy is simple_byte
  1236   0013FC  5026               	movf	(??_vfpfcnvrt+1)^0,w,c
  1237   0013FE  0A00               	xorlw	0	; case 0
  1238   001400  B4D8               	btfsc	status,2,c
  1239   001402  EF05  F00A         	goto	l2891
  1240   001406  EFED  F009         	goto	l2731
  1241   00140A                     l2891:
  1242                           
  1243                           ; Switch size 1, requested type "simple"
  1244                           ; Number of cases is 1, Range of values is 48 to 48
  1245                           ; switch strategies available:
  1246                           ; Name         Instructions Cycles
  1247                           ; simple_byte            4     3 (average)
  1248                           ;	Chosen strategy is simple_byte
  1249   00140A  5025               	movf	??_vfpfcnvrt^0,w,c
  1250   00140C  0A30               	xorlw	48	; case 48
  1251   00140E  B4D8               	btfsc	status,2,c
  1252   001410  EFE6  F009         	goto	l2727
  1253   001414  EFED  F009         	goto	l2731
  1254   001418                     l2737:
  1255                           
  1256                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1210:         whi
      +                          le (!done) {
  1257   001418  502B               	movf	vfpfcnvrt@done^0,w,c
  1258   00141A  B4D8               	btfsc	status,2,c
  1259   00141C  EF12  F00A         	goto	u2711
  1260   001420  EF14  F00A         	goto	u2710
  1261   001424                     u2711:
  1262   001424  EFF1  F009         	goto	l2735
  1263   001428                     u2710:
  1264   001428                     
  1265                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1256:   width = r
      +                          ead_prec_or_width(fmt, ap);
  1266   001428  C023  F007         	movff	vfpfcnvrt@fmt,read_prec_or_width@fmt
  1267   00142C  C024  F008         	movff	vfpfcnvrt@ap,read_prec_or_width@ap
  1268   001430  EC9C  F00D         	call	_read_prec_or_width	;wreg free
  1269   001434  C007  F049         	movff	?_read_prec_or_width,_width
  1270   001438  C008  F04A         	movff	?_read_prec_or_width+1,_width+1
  1271   00143C                     
  1272                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1257:   if (width
      +                           < 0) {
  1273   00143C  BE4A               	btfsc	(_width+1)^0,7,c
  1274   00143E  EF25  F00A         	goto	u2720
  1275   001442  EF23  F00A         	goto	u2721
  1276   001446                     u2721:
  1277   001446  EF2A  F00A         	goto	l2745
  1278   00144A                     u2720:
  1279   00144A                     
  1280                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1258:    flags |=
      +                           (1 << 0);
  1281   00144A  804D               	bsf	_flags^0,0,c
  1282                           
  1283                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1259:    width = 
      +                          -width;
  1284   00144C  6C49               	negf	_width^0,c
  1285   00144E  1E4A               	comf	(_width+1)^0,f,c
  1286   001450  B0D8               	btfsc	status,0,c
  1287   001452  2A4A               	incf	(_width+1)^0,f,c
  1288   001454                     l2745:
  1289                           
  1290                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1291:   cp = *fmt
      +                          ;
  1291   001454  5023               	movf	vfpfcnvrt@fmt^0,w,c
  1292   001456  6ED9               	movwf	fsr2l,c
  1293   001458  6ADA               	clrf	fsr2h,c
  1294   00145A  50DF               	movf	indf2,w,c
  1295   00145C  6E2C               	movwf	vfpfcnvrt@cp^0,c
  1296   00145E                     
  1297                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1361:   if (*cp =
      +                          = 'd' || *cp == 'i') {
  1298   00145E  C02C  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  1299   001462                     	if	1	;There is more than 1 active tblptr byte
  1300   001462  0E0E               	movlw	high __smallconst
  1301   001464  6EF7               	movwf	tblptrh,c
  1302   001466                     	endif
  1303   001466                     	if	0	;tblptru may be non-zero
  1304   001466                     	endif
  1305   001466                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1306   001466  0E00               	movlw	low (__smallconst shr (0+16))
  1307   001468  6EF8               	movwf	tblptru,c
  1308   00146A                     	endif
  1309   00146A  0008               	tblrd		*
  1310   00146C  50F5               	movf	tablat,w,c
  1311   00146E  0A64               	xorlw	100
  1312   001470  B4D8               	btfsc	status,2,c
  1313   001472  EF3D  F00A         	goto	u2731
  1314   001476  EF3F  F00A         	goto	u2730
  1315   00147A                     u2731:
  1316   00147A  EF4F  F00A         	goto	l2751
  1317   00147E                     u2730:
  1318   00147E  C02C  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  1319   001482                     	if	1	;There is more than 1 active tblptr byte
  1320   001482  0E0E               	movlw	high __smallconst
  1321   001484  6EF7               	movwf	tblptrh,c
  1322   001486                     	endif
  1323   001486                     	if	0	;tblptru may be non-zero
  1324   001486                     	endif
  1325   001486                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1326   001486  0E00               	movlw	low (__smallconst shr (0+16))
  1327   001488  6EF8               	movwf	tblptru,c
  1328   00148A                     	endif
  1329   00148A  0008               	tblrd		*
  1330   00148C  50F5               	movf	tablat,w,c
  1331   00148E  0A69               	xorlw	105
  1332   001490  A4D8               	btfss	status,2,c
  1333   001492  EF4D  F00A         	goto	u2741
  1334   001496  EF4F  F00A         	goto	u2740
  1335   00149A                     u2741:
  1336   00149A  EF6A  F00A         	goto	l2759
  1337   00149E                     u2740:
  1338   00149E                     l2751:
  1339                           
  1340                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1404:    convarg.
      +                          sint = (vfpf_sint_t)(int)(*(int *)__va_arg(*(int **)ap, (int)0));
  1341   00149E  5024               	movf	vfpfcnvrt@ap^0,w,c
  1342   0014A0  6ED9               	movwf	fsr2l,c
  1343   0014A2  6ADA               	clrf	fsr2h,c
  1344   0014A4  0E02               	movlw	2
  1345   0014A6  26DF               	addwf	indf2,f,c
  1346   0014A8  5CDF               	subwf	indf2,w,c
  1347   0014AA  6ED9               	movwf	fsr2l,c
  1348   0014AC  6ADA               	clrf	fsr2h,c
  1349   0014AE  CFDE F027          	movff	postinc2,vfpfcnvrt@convarg
  1350   0014B2  CFDE F028          	movff	postinc2,vfpfcnvrt@convarg+1
  1351   0014B6                     
  1352                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1406:    *fmt = c
      +                          p+1;
  1353   0014B6  5023               	movf	vfpfcnvrt@fmt^0,w,c
  1354   0014B8  6ED9               	movwf	fsr2l,c
  1355   0014BA  6ADA               	clrf	fsr2h,c
  1356   0014BC  282C               	incf	vfpfcnvrt@cp^0,w,c
  1357   0014BE  6EDF               	movwf	indf2,c
  1358   0014C0                     
  1359                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1432:    return (
      +                          void) dtoa(fp, convarg.sint);;	Return value of _vfpfcnvrt is never used
  1360   0014C0  C022  F017         	movff	vfpfcnvrt@fp,dtoa@fp
  1361   0014C4  C027  F018         	movff	vfpfcnvrt@convarg,dtoa@d
  1362   0014C8  C028  F019         	movff	vfpfcnvrt@convarg+1,dtoa@d+1
  1363   0014CC  EC84  F00A         	call	_dtoa	;wreg free
  1364   0014D0  EF83  F00A         	goto	l1067
  1365   0014D4                     l2759:
  1366                           
  1367                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1806:         ++*
      +                          fmt;
  1368   0014D4  5023               	movf	vfpfcnvrt@fmt^0,w,c
  1369   0014D6  6ED9               	movwf	fsr2l,c
  1370   0014D8  6ADA               	clrf	fsr2h,c
  1371   0014DA  2ADF               	incf	indf2,f,c
  1372   0014DC  EF83  F00A         	goto	l1067
  1373   0014E0                     l2763:
  1374                           
  1375                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1811:     fputc((
      +                          int)(*fmt)[0], fp);
  1376   0014E0  5023               	movf	vfpfcnvrt@fmt^0,w,c
  1377   0014E2  6ED9               	movwf	fsr2l,c
  1378   0014E4  6ADA               	clrf	fsr2h,c
  1379   0014E6  CFDF FFF6          	movff	indf2,tblptrl
  1380   0014EA                     	if	1	;There is more than 1 active tblptr byte
  1381   0014EA  0E0E               	movlw	high __smallconst
  1382   0014EC  6EF7               	movwf	tblptrh,c
  1383   0014EE                     	endif
  1384   0014EE                     	if	0	;tblptru may be non-zero
  1385   0014EE                     	endif
  1386   0014EE                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1387   0014EE  0E00               	movlw	low (__smallconst shr (0+16))
  1388   0014F0  6EF8               	movwf	tblptru,c
  1389   0014F2                     	endif
  1390   0014F2  0008               	tblrd		*
  1391   0014F4  50F5               	movf	tablat,w,c
  1392   0014F6  6E01               	movwf	fputc@c^0,c
  1393   0014F8  6A02               	clrf	(fputc@c+1)^0,c
  1394   0014FA  C022  F003         	movff	vfpfcnvrt@fp,fputc@fp
  1395   0014FE  ECF3  F00D         	call	_fputc	;wreg free
  1396   001502  EF6A  F00A         	goto	l2759
  1397   001506                     l1067:
  1398   001506  0012               	return		;funcret
  1399   001508                     __end_of_vfpfcnvrt:
  1400                           	callstack 0
  1401                           
  1402 ;; *************** function _read_prec_or_width *****************
  1403 ;; Defined at:
  1404 ;;		line 1158 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
  1405 ;; Parameters:    Size  Location     Type
  1406 ;;  fmt             1    6[COMRAM] PTR PTR const unsigned c
  1407 ;;		 -> vfprintf@cfmt(1), 
  1408 ;;  ap              1    7[COMRAM] PTR PTR void [1]
  1409 ;;		 -> sprintf@ap(1), 
  1410 ;; Auto vars:     Size  Location     Type
  1411 ;;  c               1    8[COMRAM] unsigned char 
  1412 ;;  n               2    9[COMRAM] int 
  1413 ;; Return value:  Size  Location     Type
  1414 ;;                  2    6[COMRAM] int 
  1415 ;; Registers used:
  1416 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1417 ;; Tracked objects:
  1418 ;;		On entry : 0/0
  1419 ;;		On exit  : 0/0
  1420 ;;		Unchanged: 0/0
  1421 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1422 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1423 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1424 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1425 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1426 ;;Total ram usage:        5 bytes
  1427 ;; Hardware stack levels used: 1
  1428 ;; Hardware stack levels required when called: 2
  1429 ;; This function calls:
  1430 ;;		___wmul
  1431 ;; This function is called by:
  1432 ;;		_vfpfcnvrt
  1433 ;; This function uses a non-reentrant model
  1434 ;;
  1435                           
  1436                           	psect	text4
  1437   001B38                     __ptext4:
  1438                           	callstack 0
  1439   001B38                     _read_prec_or_width:
  1440                           	callstack 25
  1441   001B38                     
  1442                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1159:     int n =
      +                           0;
  1443   001B38  0E00               	movlw	0
  1444   001B3A  6E0B               	movwf	(read_prec_or_width@n+1)^0,c
  1445   001B3C  0E00               	movlw	0
  1446   001B3E  6E0A               	movwf	read_prec_or_width@n^0,c
  1447   001B40                     
  1448                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1160:     if ((*f
      +                          mt)[0] == '*') {
  1449   001B40  5007               	movf	read_prec_or_width@fmt^0,w,c
  1450   001B42  6ED9               	movwf	fsr2l,c
  1451   001B44  6ADA               	clrf	fsr2h,c
  1452   001B46  CFDF FFF6          	movff	indf2,tblptrl
  1453   001B4A                     	if	1	;There is more than 1 active tblptr byte
  1454   001B4A  0E0E               	movlw	high __smallconst
  1455   001B4C  6EF7               	movwf	tblptrh,c
  1456   001B4E                     	endif
  1457   001B4E                     	if	0	;tblptru may be non-zero
  1458   001B4E                     	endif
  1459   001B4E                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1460   001B4E  0E00               	movlw	low (__smallconst shr (0+16))
  1461   001B50  6EF8               	movwf	tblptru,c
  1462   001B52                     	endif
  1463   001B52  0008               	tblrd		*
  1464   001B54  50F5               	movf	tablat,w,c
  1465   001B56  0A2A               	xorlw	42
  1466   001B58  A4D8               	btfss	status,2,c
  1467   001B5A  EFB1  F00D         	goto	u1661
  1468   001B5E  EFB3  F00D         	goto	u1660
  1469   001B62                     u1661:
  1470   001B62  EFD9  F00D         	goto	l2115
  1471   001B66                     u1660:
  1472   001B66                     
  1473                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1161:         ++*
      +                          fmt;
  1474   001B66  5007               	movf	read_prec_or_width@fmt^0,w,c
  1475   001B68  6ED9               	movwf	fsr2l,c
  1476   001B6A  6ADA               	clrf	fsr2h,c
  1477   001B6C  2ADF               	incf	indf2,f,c
  1478   001B6E                     
  1479                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1162:         n =
      +                           (*(int *)__va_arg(*(int **)*ap, (int)0));
  1480   001B6E  5008               	movf	read_prec_or_width@ap^0,w,c
  1481   001B70  6ED9               	movwf	fsr2l,c
  1482   001B72  6ADA               	clrf	fsr2h,c
  1483   001B74  0E02               	movlw	2
  1484   001B76  26DF               	addwf	indf2,f,c
  1485   001B78  5CDF               	subwf	indf2,w,c
  1486   001B7A  6ED9               	movwf	fsr2l,c
  1487   001B7C  6ADA               	clrf	fsr2h,c
  1488   001B7E  CFDE F00A          	movff	postinc2,read_prec_or_width@n
  1489   001B82  CFDE F00B          	movff	postinc2,read_prec_or_width@n+1
  1490                           
  1491                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1163:     } else 
      +                          {
  1492   001B86  EFEE  F00D         	goto	l1048
  1493   001B8A                     l2111:
  1494                           
  1495                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1166:            
      +                           n = n * 10 + c;
  1496   001B8A  C00A  F001         	movff	read_prec_or_width@n,___wmul@multiplier
  1497   001B8E  C00B  F002         	movff	read_prec_or_width@n+1,___wmul@multiplier+1
  1498   001B92  0E00               	movlw	0
  1499   001B94  6E04               	movwf	(___wmul@multiplicand+1)^0,c
  1500   001B96  0E0A               	movlw	10
  1501   001B98  6E03               	movwf	___wmul@multiplicand^0,c
  1502   001B9A  ECC5  F00F         	call	___wmul	;wreg free
  1503   001B9E  5009               	movf	read_prec_or_width@c^0,w,c
  1504   001BA0  2401               	addwf	?___wmul^0,w,c
  1505   001BA2  6E0A               	movwf	read_prec_or_width@n^0,c
  1506   001BA4  0E00               	movlw	0
  1507   001BA6  2002               	addwfc	(?___wmul+1)^0,w,c
  1508   001BA8  6E0B               	movwf	(read_prec_or_width@n+1)^0,c
  1509   001BAA                     
  1510                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1167:            
      +                           ++*fmt;
  1511   001BAA  5007               	movf	read_prec_or_width@fmt^0,w,c
  1512   001BAC  6ED9               	movwf	fsr2l,c
  1513   001BAE  6ADA               	clrf	fsr2h,c
  1514   001BB0  2ADF               	incf	indf2,f,c
  1515   001BB2                     l2115:
  1516                           
  1517                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1165:         whi
      +                          le ((c = ((unsigned)(*fmt)[0]) - '0') < 10) {
  1518   001BB2  5007               	movf	read_prec_or_width@fmt^0,w,c
  1519   001BB4  6ED9               	movwf	fsr2l,c
  1520   001BB6  6ADA               	clrf	fsr2h,c
  1521   001BB8  CFDF FFF6          	movff	indf2,tblptrl
  1522   001BBC                     	if	1	;There is more than 1 active tblptr byte
  1523   001BBC  0E0E               	movlw	high __smallconst
  1524   001BBE  6EF7               	movwf	tblptrh,c
  1525   001BC0                     	endif
  1526   001BC0                     	if	0	;tblptru may be non-zero
  1527   001BC0                     	endif
  1528   001BC0                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1529   001BC0  0E00               	movlw	low (__smallconst shr (0+16))
  1530   001BC2  6EF8               	movwf	tblptru,c
  1531   001BC4                     	endif
  1532   001BC4  0008               	tblrd		*
  1533   001BC6  50F5               	movf	tablat,w,c
  1534   001BC8  0FD0               	addlw	208
  1535   001BCA  6E09               	movwf	read_prec_or_width@c^0,c
  1536   001BCC  0E09               	movlw	9
  1537   001BCE  6409               	cpfsgt	read_prec_or_width@c^0,c
  1538   001BD0  EFEC  F00D         	goto	u1671
  1539   001BD4  EFEE  F00D         	goto	u1670
  1540   001BD8                     u1671:
  1541   001BD8  EFC5  F00D         	goto	l2111
  1542   001BDC                     u1670:
  1543   001BDC                     l1048:
  1544                           
  1545                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1170:     return 
      +                          n;
  1546   001BDC  C00A  F007         	movff	read_prec_or_width@n,?_read_prec_or_width
  1547   001BE0  C00B  F008         	movff	read_prec_or_width@n+1,?_read_prec_or_width+1
  1548   001BE4  0012               	return		;funcret
  1549   001BE6                     __end_of_read_prec_or_width:
  1550                           	callstack 0
  1551                           
  1552 ;; *************** function ___wmul *****************
  1553 ;; Defined at:
  1554 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\Umul16.c"
  1555 ;; Parameters:    Size  Location     Type
  1556 ;;  multiplier      2    0[COMRAM] unsigned int 
  1557 ;;  multiplicand    2    2[COMRAM] unsigned int 
  1558 ;; Auto vars:     Size  Location     Type
  1559 ;;  product         2    4[COMRAM] unsigned int 
  1560 ;; Return value:  Size  Location     Type
  1561 ;;                  2    0[COMRAM] unsigned int 
  1562 ;; Registers used:
  1563 ;;		wreg, status,2, status,0, prodl, prodh
  1564 ;; Tracked objects:
  1565 ;;		On entry : 0/0
  1566 ;;		On exit  : 0/0
  1567 ;;		Unchanged: 0/0
  1568 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1569 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1570 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1571 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1572 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1573 ;;Total ram usage:        6 bytes
  1574 ;; Hardware stack levels used: 1
  1575 ;; Hardware stack levels required when called: 1
  1576 ;; This function calls:
  1577 ;;		Nothing
  1578 ;; This function is called by:
  1579 ;;		_read_prec_or_width
  1580 ;;		_LEDarray_disp_light
  1581 ;;		_LEDarray_disp_PPM
  1582 ;;		_ADC2String
  1583 ;; This function uses a non-reentrant model
  1584 ;;
  1585                           
  1586                           	psect	text5
  1587   001F8A                     __ptext5:
  1588                           	callstack 0
  1589   001F8A                     ___wmul:
  1590                           	callstack 25
  1591   001F8A  5001               	movf	___wmul@multiplier^0,w,c
  1592   001F8C  0203               	mulwf	___wmul@multiplicand^0,c
  1593   001F8E  CFF3 F005          	movff	prodl,___wmul@product
  1594   001F92  CFF4 F006          	movff	prodh,___wmul@product+1
  1595   001F96  5001               	movf	___wmul@multiplier^0,w,c
  1596   001F98  0204               	mulwf	(___wmul@multiplicand+1)^0,c
  1597   001F9A  50F3               	movf	243,w,c
  1598   001F9C  2606               	addwf	(___wmul@product+1)^0,f,c
  1599   001F9E  5002               	movf	(___wmul@multiplier+1)^0,w,c
  1600   001FA0  0203               	mulwf	___wmul@multiplicand^0,c
  1601   001FA2  50F3               	movf	243,w,c
  1602   001FA4  2606               	addwf	(___wmul@product+1)^0,f,c
  1603   001FA6  C005  F001         	movff	___wmul@product,?___wmul
  1604   001FAA  C006  F002         	movff	___wmul@product+1,?___wmul+1
  1605   001FAE  0012               	return		;funcret
  1606   001FB0                     __end_of___wmul:
  1607                           	callstack 0
  1608                           
  1609 ;; *************** function _dtoa *****************
  1610 ;; Defined at:
  1611 ;;		line 513 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
  1612 ;; Parameters:    Size  Location     Type
  1613 ;;  fp              1   22[COMRAM] PTR struct _IO_FILE
  1614 ;;		 -> sprintf@f(12), 
  1615 ;;  d               2   23[COMRAM] int 
  1616 ;; Auto vars:     Size  Location     Type
  1617 ;;  i               2   31[COMRAM] int 
  1618 ;;  w               2   28[COMRAM] int 
  1619 ;;  s               1   30[COMRAM] unsigned char 
  1620 ;;  p               1   27[COMRAM] _Bool 
  1621 ;; Return value:  Size  Location     Type
  1622 ;;                  1    wreg      void 
  1623 ;; Registers used:
  1624 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1625 ;; Tracked objects:
  1626 ;;		On entry : 0/0
  1627 ;;		On exit  : 0/0
  1628 ;;		Unchanged: 0/0
  1629 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1630 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1631 ;;      Locals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1632 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1633 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1634 ;;Total ram usage:       11 bytes
  1635 ;; Hardware stack levels used: 1
  1636 ;; Hardware stack levels required when called: 5
  1637 ;; This function calls:
  1638 ;;		___awdiv
  1639 ;;		___awmod
  1640 ;;		_abs
  1641 ;;		_pad
  1642 ;; This function is called by:
  1643 ;;		_vfpfcnvrt
  1644 ;; This function uses a non-reentrant model
  1645 ;;
  1646                           
  1647                           	psect	text6
  1648   001508                     __ptext6:
  1649                           	callstack 0
  1650   001508                     _dtoa:
  1651                           	callstack 22
  1652   001508                     
  1653                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 513: static void 
      +                          dtoa(FILE *fp, vfpf_sint_t d);C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\commo
      +                          n\doprnt.c: 514: {;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c:
      +                           515:  char s;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 516
      +                          :     int i, w;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 52
      +                          0:  _Bool p = 1;
  1654   001508  0E01               	movlw	1
  1655   00150A  6E1C               	movwf	dtoa@p^0,c
  1656   00150C                     
  1657                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 524:     s = d < 
      +                          0 ? 1 : 0;
  1658   00150C  BE19               	btfsc	(dtoa@d+1)^0,7,c
  1659   00150E  EF8B  F00A         	goto	u2601
  1660   001512  EF8E  F00A         	goto	u2600
  1661   001516                     u2601:
  1662   001516  0E01               	movlw	1
  1663   001518  EF8F  F00A         	goto	u2610
  1664   00151C                     u2600:
  1665   00151C  0E00               	movlw	0
  1666   00151E                     u2610:
  1667   00151E  6E1F               	movwf	dtoa@s^0,c
  1668   001520                     
  1669                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 535:     w = widt
      +                          h;
  1670   001520  C049  F01D         	movff	_width,dtoa@w
  1671   001524  C04A  F01E         	movff	_width+1,dtoa@w+1
  1672   001528                     
  1673                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 536:     if (s
  1674   001528  501F               	movf	dtoa@s^0,w,c
  1675   00152A  B4D8               	btfsc	status,2,c
  1676   00152C  EF9A  F00A         	goto	u2621
  1677   001530  EF9C  F00A         	goto	u2620
  1678   001534                     u2621:
  1679   001534  EFB3  F00A         	goto	l1031
  1680   001538                     u2620:
  1681   001538                     
  1682                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 540:     ) {;C:\P
      +                          rogram Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 541:         --w;
  1683   001538  061D               	decf	dtoa@w^0,f,c
  1684   00153A  A0D8               	btfss	status,0,c
  1685   00153C  061E               	decf	(dtoa@w+1)^0,f,c
  1686   00153E                     
  1687                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 542:   s = s ? '-
      +                          ' : '+';
  1688   00153E  501F               	movf	dtoa@s^0,w,c
  1689   001540  A4D8               	btfss	status,2,c
  1690   001542  EFA5  F00A         	goto	u2631
  1691   001546  EFA7  F00A         	goto	u2630
  1692   00154A                     u2631:
  1693   00154A  EFAD  F00A         	goto	l2681
  1694   00154E                     u2630:
  1695   00154E  0E00               	movlw	0
  1696   001550  6E1B               	movwf	(_dtoa$1891+1)^0,c
  1697   001552  0E2B               	movlw	43
  1698   001554  6E1A               	movwf	_dtoa$1891^0,c
  1699   001556  EFB1  F00A         	goto	l2683
  1700   00155A                     l2681:
  1701   00155A  0E00               	movlw	0
  1702   00155C  6E1B               	movwf	(_dtoa$1891+1)^0,c
  1703   00155E  0E2D               	movlw	45
  1704   001560  6E1A               	movwf	_dtoa$1891^0,c
  1705   001562                     l2683:
  1706   001562  C01A  F01F         	movff	_dtoa$1891,dtoa@s
  1707   001566                     l1031:
  1708                           
  1709                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 552:     i = size
      +                          of(dbuf) - 1;
  1710   001566  0E00               	movlw	0
  1711   001568  6E21               	movwf	(dtoa@i+1)^0,c
  1712   00156A  0E1F               	movlw	31
  1713   00156C  6E20               	movwf	dtoa@i^0,c
  1714   00156E                     
  1715                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 553:     dbuf[i] 
      +                          = '\0';
  1716   00156E  0E00               	movlw	0
  1717   001570  0101               	movlb	1	; () banked
  1718   001572  6F67               	movwf	(_dbuf+31)& (0+255),b
  1719                           
  1720                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 554:     while (!
      +                          (i < 1) && (d != 0
  1721   001574  EFEB  F00A         	goto	l2697
  1722   001578                     l2687:
  1723                           
  1724                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 563:     )) {;C:\
      +                          Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 564:         --i;
  1725   001578  0620               	decf	dtoa@i^0,f,c
  1726   00157A  A0D8               	btfss	status,0,c
  1727   00157C  0621               	decf	(dtoa@i+1)^0,f,c
  1728   00157E                     
  1729                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 565:         dbuf
      +                          [i] = (char)((int)'0' + abs(d % 10));
  1730   00157E  0E48               	movlw	low _dbuf
  1731   001580  2420               	addwf	dtoa@i^0,w,c
  1732   001582  6ED9               	movwf	fsr2l,c
  1733   001584  0E01               	movlw	high _dbuf
  1734   001586  2021               	addwfc	(dtoa@i+1)^0,w,c
  1735   001588  6EDA               	movwf	fsr2h,c
  1736   00158A  C018  F001         	movff	dtoa@d,___awmod@dividend
  1737   00158E  C019  F002         	movff	dtoa@d+1,___awmod@dividend+1
  1738   001592  0E00               	movlw	0
  1739   001594  6E04               	movwf	(___awmod@divisor+1)^0,c
  1740   001596  0E0A               	movlw	10
  1741   001598  6E03               	movwf	___awmod@divisor^0,c
  1742   00159A  EC44  F00D         	call	___awmod	;wreg free
  1743   00159E  C001  F007         	movff	?___awmod,abs@a
  1744   0015A2  C002  F008         	movff	?___awmod+1,abs@a+1
  1745   0015A6  EC94  F00F         	call	_abs	;wreg free
  1746   0015AA  5007               	movf	?_abs^0,w,c
  1747   0015AC  0F30               	addlw	48
  1748   0015AE  6EDF               	movwf	indf2,c
  1749   0015B0                     
  1750                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 569:   p = 0;
  1751   0015B0  0E00               	movlw	0
  1752   0015B2  6E1C               	movwf	dtoa@p^0,c
  1753   0015B4                     
  1754                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 571:         --w;
  1755   0015B4  061D               	decf	dtoa@w^0,f,c
  1756   0015B6  A0D8               	btfss	status,0,c
  1757   0015B8  061E               	decf	(dtoa@w+1)^0,f,c
  1758   0015BA                     
  1759                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 572:         d = 
      +                          d / 10;
  1760   0015BA  C018  F001         	movff	dtoa@d,___awdiv@dividend
  1761   0015BE  C019  F002         	movff	dtoa@d+1,___awdiv@dividend+1
  1762   0015C2  0E00               	movlw	0
  1763   0015C4  6E04               	movwf	(___awdiv@divisor+1)^0,c
  1764   0015C6  0E0A               	movlw	10
  1765   0015C8  6E03               	movwf	___awdiv@divisor^0,c
  1766   0015CA  ECE2  F00C         	call	___awdiv	;wreg free
  1767   0015CE  C001  F018         	movff	?___awdiv,dtoa@d
  1768   0015D2  C002  F019         	movff	?___awdiv+1,dtoa@d+1
  1769   0015D6                     l2697:
  1770                           
  1771                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 554:     while (!
      +                          (i < 1) && (d != 0
  1772   0015D6  BE21               	btfsc	(dtoa@i+1)^0,7,c
  1773   0015D8  EFF6  F00A         	goto	u2641
  1774   0015DC  5021               	movf	(dtoa@i+1)^0,w,c
  1775   0015DE  E108               	bnz	u2640
  1776   0015E0  0420               	decf	dtoa@i^0,w,c
  1777   0015E2  A0D8               	btfss	status,0,c
  1778   0015E4  EFF6  F00A         	goto	u2641
  1779   0015E8  EFF8  F00A         	goto	u2640
  1780   0015EC                     u2641:
  1781   0015EC  EF1D  F00B         	goto	l2707
  1782   0015F0                     u2640:
  1783   0015F0  5018               	movf	dtoa@d^0,w,c
  1784   0015F2  1019               	iorwf	(dtoa@d+1)^0,w,c
  1785   0015F4  A4D8               	btfss	status,2,c
  1786   0015F6  EFFF  F00A         	goto	u2651
  1787   0015FA  EF01  F00B         	goto	u2650
  1788   0015FE                     u2651:
  1789   0015FE  EFBC  F00A         	goto	l2687
  1790   001602                     u2650:
  1791   001602  501C               	movf	dtoa@p^0,w,c
  1792   001604  A4D8               	btfss	status,2,c
  1793   001606  EF07  F00B         	goto	u2661
  1794   00160A  EF09  F00B         	goto	u2660
  1795   00160E                     u2661:
  1796   00160E  EFBC  F00A         	goto	l2687
  1797   001612                     u2660:
  1798   001612  BE1E               	btfsc	(dtoa@w+1)^0,7,c
  1799   001614  EF14  F00B         	goto	u2671
  1800   001618  501E               	movf	(dtoa@w+1)^0,w,c
  1801   00161A  E108               	bnz	u2670
  1802   00161C  041D               	decf	dtoa@w^0,w,c
  1803   00161E  A0D8               	btfss	status,0,c
  1804   001620  EF14  F00B         	goto	u2671
  1805   001624  EF16  F00B         	goto	u2670
  1806   001628                     u2671:
  1807   001628  EF1D  F00B         	goto	l2707
  1808   00162C                     u2670:
  1809   00162C  B24D               	btfsc	_flags^0,1,c
  1810   00162E  EF1B  F00B         	goto	u2681
  1811   001632  EF1D  F00B         	goto	u2680
  1812   001636                     u2681:
  1813   001636  EFBC  F00A         	goto	l2687
  1814   00163A                     u2680:
  1815   00163A                     l2707:
  1816                           
  1817                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 576:     if (s !=
      +                           0) {
  1818   00163A  501F               	movf	dtoa@s^0,w,c
  1819   00163C  B4D8               	btfsc	status,2,c
  1820   00163E  EF23  F00B         	goto	u2691
  1821   001642  EF25  F00B         	goto	u2690
  1822   001646                     u2691:
  1823   001646  EF30  F00B         	goto	l2713
  1824   00164A                     u2690:
  1825   00164A                     
  1826                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 577:         --i;
  1827   00164A  0620               	decf	dtoa@i^0,f,c
  1828   00164C  A0D8               	btfss	status,0,c
  1829   00164E  0621               	decf	(dtoa@i+1)^0,f,c
  1830   001650                     
  1831                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 578:         dbuf
      +                          [i] = s;
  1832   001650  0E48               	movlw	low _dbuf
  1833   001652  2420               	addwf	dtoa@i^0,w,c
  1834   001654  6ED9               	movwf	fsr2l,c
  1835   001656  0E01               	movlw	high _dbuf
  1836   001658  2021               	addwfc	(dtoa@i+1)^0,w,c
  1837   00165A  6EDA               	movwf	fsr2h,c
  1838   00165C  C01F  FFDF         	movff	dtoa@s,indf2
  1839   001660                     l2713:
  1840                           
  1841                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 582:     return (
      +                          void) pad(fp, &dbuf[i], w);
  1842   001660  C017  F00F         	movff	dtoa@fp,pad@fp
  1843   001664  0E48               	movlw	low _dbuf
  1844   001666  2420               	addwf	dtoa@i^0,w,c
  1845   001668  6E10               	movwf	pad@buf^0,c
  1846   00166A  0E01               	movlw	high _dbuf
  1847   00166C  2021               	addwfc	(dtoa@i+1)^0,w,c
  1848   00166E  6E11               	movwf	(pad@buf+1)^0,c
  1849   001670  C01D  F012         	movff	dtoa@w,pad@p
  1850   001674  C01E  F013         	movff	dtoa@w+1,pad@p+1
  1851   001678  EC48  F00E         	call	_pad	;wreg free
  1852   00167C  0012               	return		;funcret
  1853   00167E                     __end_of_dtoa:
  1854                           	callstack 0
  1855                           
  1856 ;; *************** function _pad *****************
  1857 ;; Defined at:
  1858 ;;		line 193 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
  1859 ;; Parameters:    Size  Location     Type
  1860 ;;  fp              1   14[COMRAM] PTR struct _IO_FILE
  1861 ;;		 -> sprintf@f(12), 
  1862 ;;  buf             2   15[COMRAM] PTR unsigned char 
  1863 ;;		 -> dbuf(32), 
  1864 ;;  p               2   17[COMRAM] int 
  1865 ;; Auto vars:     Size  Location     Type
  1866 ;;  i               2   20[COMRAM] int 
  1867 ;; Return value:  Size  Location     Type
  1868 ;;                  1    wreg      void 
  1869 ;; Registers used:
  1870 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1871 ;; Tracked objects:
  1872 ;;		On entry : 0/0
  1873 ;;		On exit  : 0/0
  1874 ;;		Unchanged: 0/0
  1875 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1876 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1877 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1878 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1879 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1880 ;;Total ram usage:        8 bytes
  1881 ;; Hardware stack levels used: 1
  1882 ;; Hardware stack levels required when called: 4
  1883 ;; This function calls:
  1884 ;;		_fputc
  1885 ;;		_fputs
  1886 ;; This function is called by:
  1887 ;;		_dtoa
  1888 ;; This function uses a non-reentrant model
  1889 ;;
  1890                           
  1891                           	psect	text7
  1892   001C90                     __ptext7:
  1893                           	callstack 0
  1894   001C90                     _pad:
  1895                           	callstack 22
  1896   001C90                     
  1897                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 193: static void 
      +                          pad(FILE *fp, char *buf, int p);C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\com
      +                          mon\doprnt.c: 194: {;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.
      +                          c: 195:     int i;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c:
      +                           199:     if (flags & (1 << 0)) {
  1898   001C90  A04D               	btfss	_flags^0,0,c
  1899   001C92  EF4D  F00E         	goto	u2561
  1900   001C96  EF4F  F00E         	goto	u2560
  1901   001C9A                     u2561:
  1902   001C9A  EF57  F00E         	goto	l2655
  1903   001C9E                     u2560:
  1904   001C9E                     
  1905                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 200:         fput
      +                          s((const char *)buf, fp);
  1906   001C9E  C010  F009         	movff	pad@buf,fputs@s
  1907   001CA2  C011  F00A         	movff	pad@buf+1,fputs@s+1
  1908   001CA6  C00F  F00B         	movff	pad@fp,fputs@fp
  1909   001CAA  EC3D  F00F         	call	_fputs	;wreg free
  1910   001CAE                     l2655:
  1911                           
  1912                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 205:  if (p < 0) 
      +                          {
  1913   001CAE  BE13               	btfsc	(pad@p+1)^0,7,c
  1914   001CB0  EF5E  F00E         	goto	u2570
  1915   001CB4  EF5C  F00E         	goto	u2571
  1916   001CB8                     u2571:
  1917   001CB8  EF62  F00E         	goto	l1023
  1918   001CBC                     u2570:
  1919   001CBC                     
  1920                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 206:   p = 0;
  1921   001CBC  0E00               	movlw	0
  1922   001CBE  6E13               	movwf	(pad@p+1)^0,c
  1923   001CC0  0E00               	movlw	0
  1924   001CC2  6E12               	movwf	pad@p^0,c
  1925   001CC4                     l1023:
  1926                           
  1927                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 208:     i = 0;
  1928   001CC4  0E00               	movlw	0
  1929   001CC6  6E16               	movwf	(pad@i+1)^0,c
  1930   001CC8  0E00               	movlw	0
  1931   001CCA  6E15               	movwf	pad@i^0,c
  1932                           
  1933                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 209:     while (i
      +                           < p) {
  1934   001CCC  EF72  F00E         	goto	l2663
  1935   001CD0                     l2659:
  1936                           
  1937                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 210:         fput
      +                          c(' ', fp);
  1938   001CD0  0E00               	movlw	0
  1939   001CD2  6E02               	movwf	(fputc@c+1)^0,c
  1940   001CD4  0E20               	movlw	32
  1941   001CD6  6E01               	movwf	fputc@c^0,c
  1942   001CD8  C00F  F003         	movff	pad@fp,fputc@fp
  1943   001CDC  ECF3  F00D         	call	_fputc	;wreg free
  1944   001CE0                     
  1945                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 211:         ++i;
  1946   001CE0  4A15               	infsnz	pad@i^0,f,c
  1947   001CE2  2A16               	incf	(pad@i+1)^0,f,c
  1948   001CE4                     l2663:
  1949                           
  1950                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 209:     while (i
      +                           < p) {
  1951   001CE4  5012               	movf	pad@p^0,w,c
  1952   001CE6  5C15               	subwf	pad@i^0,w,c
  1953   001CE8  5016               	movf	(pad@i+1)^0,w,c
  1954   001CEA  0A80               	xorlw	128
  1955   001CEC  6E14               	movwf	??_pad^0,c
  1956   001CEE  5013               	movf	(pad@p+1)^0,w,c
  1957   001CF0  0A80               	xorlw	128
  1958   001CF2  5814               	subwfb	??_pad^0,w,c
  1959   001CF4  A0D8               	btfss	status,0,c
  1960   001CF6  EF7F  F00E         	goto	u2581
  1961   001CFA  EF81  F00E         	goto	u2580
  1962   001CFE                     u2581:
  1963   001CFE  EF68  F00E         	goto	l2659
  1964   001D02                     u2580:
  1965   001D02                     
  1966                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 216:     if (!(fl
      +                          ags & (1 << 0))) {
  1967   001D02  B04D               	btfsc	_flags^0,0,c
  1968   001D04  EF86  F00E         	goto	u2591
  1969   001D08  EF88  F00E         	goto	u2590
  1970   001D0C                     u2591:
  1971   001D0C  EF90  F00E         	goto	l1028
  1972   001D10                     u2590:
  1973   001D10                     
  1974                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 218:         fput
      +                          s((const char *)buf, fp);
  1975   001D10  C010  F009         	movff	pad@buf,fputs@s
  1976   001D14  C011  F00A         	movff	pad@buf+1,fputs@s+1
  1977   001D18  C00F  F00B         	movff	pad@fp,fputs@fp
  1978   001D1C  EC3D  F00F         	call	_fputs	;wreg free
  1979   001D20                     l1028:
  1980   001D20  0012               	return		;funcret
  1981   001D22                     __end_of_pad:
  1982                           	callstack 0
  1983                           
  1984 ;; *************** function _fputs *****************
  1985 ;; Defined at:
  1986 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\nf_fputs.c"
  1987 ;; Parameters:    Size  Location     Type
  1988 ;;  s               2    8[COMRAM] PTR const unsigned char 
  1989 ;;		 -> dbuf(32), 
  1990 ;;  fp              1   10[COMRAM] PTR struct _IO_FILE
  1991 ;;		 -> sprintf@f(12), 
  1992 ;; Auto vars:     Size  Location     Type
  1993 ;;  i               2   12[COMRAM] int 
  1994 ;;  c               1   11[COMRAM] unsigned char 
  1995 ;; Return value:  Size  Location     Type
  1996 ;;                  2    8[COMRAM] int 
  1997 ;; Registers used:
  1998 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1999 ;; Tracked objects:
  2000 ;;		On entry : 0/0
  2001 ;;		On exit  : 0/0
  2002 ;;		Unchanged: 0/0
  2003 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2004 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2005 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2006 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2007 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2008 ;;Total ram usage:        6 bytes
  2009 ;; Hardware stack levels used: 1
  2010 ;; Hardware stack levels required when called: 3
  2011 ;; This function calls:
  2012 ;;		_fputc
  2013 ;; This function is called by:
  2014 ;;		_pad
  2015 ;; This function uses a non-reentrant model
  2016 ;;
  2017                           
  2018                           	psect	text8
  2019   001E7A                     __ptext8:
  2020                           	callstack 0
  2021   001E7A                     _fputs:
  2022                           	callstack 22
  2023   001E7A  0E00               	movlw	0
  2024   001E7C  6E0E               	movwf	(fputs@i+1)^0,c
  2025   001E7E  0E00               	movlw	0
  2026   001E80  6E0D               	movwf	fputs@i^0,c
  2027   001E82  EF4C  F00F         	goto	l2649
  2028   001E86                     l2645:
  2029   001E86  C00C  F001         	movff	fputs@c,fputc@c
  2030   001E8A  6A02               	clrf	(fputc@c+1)^0,c
  2031   001E8C  C00B  F003         	movff	fputs@fp,fputc@fp
  2032   001E90  ECF3  F00D         	call	_fputc	;wreg free
  2033   001E94  4A0D               	infsnz	fputs@i^0,f,c
  2034   001E96  2A0E               	incf	(fputs@i+1)^0,f,c
  2035   001E98                     l2649:
  2036   001E98  500D               	movf	fputs@i^0,w,c
  2037   001E9A  2409               	addwf	fputs@s^0,w,c
  2038   001E9C  6ED9               	movwf	fsr2l,c
  2039   001E9E  500E               	movf	(fputs@i+1)^0,w,c
  2040   001EA0  200A               	addwfc	(fputs@s+1)^0,w,c
  2041   001EA2  6EDA               	movwf	fsr2h,c
  2042   001EA4  50DF               	movf	indf2,w,c
  2043   001EA6  6E0C               	movwf	fputs@c^0,c
  2044   001EA8  500C               	movf	fputs@c^0,w,c
  2045   001EAA  A4D8               	btfss	status,2,c
  2046   001EAC  EF5A  F00F         	goto	u2551
  2047   001EB0  EF5C  F00F         	goto	u2550
  2048   001EB4                     u2551:
  2049   001EB4  EF43  F00F         	goto	l2645
  2050   001EB8                     u2550:
  2051   001EB8  0012               	return		;funcret
  2052   001EBA                     __end_of_fputs:
  2053                           	callstack 0
  2054                           
  2055 ;; *************** function _fputc *****************
  2056 ;; Defined at:
  2057 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\nf_fputc.c"
  2058 ;; Parameters:    Size  Location     Type
  2059 ;;  c               2    0[COMRAM] int 
  2060 ;;  fp              1    2[COMRAM] PTR struct _IO_FILE
  2061 ;;		 -> sprintf@f(12), 
  2062 ;; Auto vars:     Size  Location     Type
  2063 ;;		None
  2064 ;; Return value:  Size  Location     Type
  2065 ;;                  2    0[COMRAM] int 
  2066 ;; Registers used:
  2067 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2068 ;; Tracked objects:
  2069 ;;		On entry : 0/0
  2070 ;;		On exit  : 0/0
  2071 ;;		Unchanged: 0/0
  2072 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2073 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2074 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2075 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2076 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2077 ;;Total ram usage:        8 bytes
  2078 ;; Hardware stack levels used: 1
  2079 ;; Hardware stack levels required when called: 2
  2080 ;; This function calls:
  2081 ;;		_putch
  2082 ;; This function is called by:
  2083 ;;		_pad
  2084 ;;		_vfpfcnvrt
  2085 ;;		_fputs
  2086 ;; This function uses a non-reentrant model
  2087 ;;
  2088                           
  2089                           	psect	text9
  2090   001BE6                     __ptext9:
  2091                           	callstack 0
  2092   001BE6                     _fputc:
  2093                           	callstack 25
  2094   001BE6  5003               	movf	fputc@fp^0,w,c
  2095   001BE8  B4D8               	btfsc	status,2,c
  2096   001BEA  EFF9  F00D         	goto	u1341
  2097   001BEE  EFFB  F00D         	goto	u1340
  2098   001BF2                     u1341:
  2099   001BF2  EF03  F00E         	goto	l1923
  2100   001BF6                     u1340:
  2101   001BF6  5003               	movf	fputc@fp^0,w,c
  2102   001BF8  A4D8               	btfss	status,2,c
  2103   001BFA  EF01  F00E         	goto	u1351
  2104   001BFE  EF03  F00E         	goto	u1350
  2105   001C02                     u1351:
  2106   001C02  EF08  F00E         	goto	l1925
  2107   001C06                     u1350:
  2108   001C06                     l1923:
  2109   001C06  5001               	movf	fputc@c^0,w,c
  2110   001C08  EC34  F010         	call	_putch
  2111   001C0C  EF47  F00E         	goto	l1092
  2112   001C10                     l1925:
  2113   001C10  5003               	movf	fputc@fp^0,w,c
  2114   001C12  6ED9               	movwf	fsr2l,c
  2115   001C14  6ADA               	clrf	fsr2h,c
  2116   001C16  0E0A               	movlw	10
  2117   001C18  26D9               	addwf	fsr2l,f,c
  2118   001C1A  50DE               	movf	postinc2,w,c
  2119   001C1C  10DE               	iorwf	postinc2,w,c
  2120   001C1E  B4D8               	btfsc	status,2,c
  2121   001C20  EF14  F00E         	goto	u1361
  2122   001C24  EF16  F00E         	goto	u1360
  2123   001C28                     u1361:
  2124   001C28  EF2F  F00E         	goto	l1929
  2125   001C2C                     u1360:
  2126   001C2C  5003               	movf	fputc@fp^0,w,c
  2127   001C2E  6ED9               	movwf	fsr2l,c
  2128   001C30  6ADA               	clrf	fsr2h,c
  2129   001C32  0E0A               	movlw	10
  2130   001C34  26D9               	addwf	fsr2l,f,c
  2131   001C36  5003               	movf	fputc@fp^0,w,c
  2132   001C38  6EE1               	movwf	fsr1l,c
  2133   001C3A  6AE2               	clrf	fsr1h,c
  2134   001C3C  0E03               	movlw	3
  2135   001C3E  26E1               	addwf	fsr1l,f,c
  2136   001C40  50DE               	movf	postinc2,w,c
  2137   001C42  5CE6               	subwf	postinc1,w,c
  2138   001C44  50E6               	movf	postinc1,w,c
  2139   001C46  0A80               	xorlw	128
  2140   001C48  6E08               	movwf	(??_fputc+4)^0,c
  2141   001C4A  50DE               	movf	postinc2,w,c
  2142   001C4C  0A80               	xorlw	128
  2143   001C4E  5808               	subwfb	(??_fputc+4)^0,w,c
  2144   001C50  B0D8               	btfsc	status,0,c
  2145   001C52  EF2D  F00E         	goto	u1371
  2146   001C56  EF2F  F00E         	goto	u1370
  2147   001C5A                     u1371:
  2148   001C5A  EF47  F00E         	goto	l1092
  2149   001C5E                     u1370:
  2150   001C5E                     l1929:
  2151   001C5E  5003               	movf	fputc@fp^0,w,c
  2152   001C60  6ED9               	movwf	fsr2l,c
  2153   001C62  6ADA               	clrf	fsr2h,c
  2154   001C64  0E03               	movlw	3
  2155   001C66  26D9               	addwf	fsr2l,f,c
  2156   001C68  50DF               	movf	indf2,w,c
  2157   001C6A  6E04               	movwf	??_fputc^0,c
  2158   001C6C  5003               	movf	fputc@fp^0,w,c
  2159   001C6E  6ED9               	movwf	fsr2l,c
  2160   001C70  6ADA               	clrf	fsr2h,c
  2161   001C72  50DF               	movf	indf2,w,c
  2162   001C74  2404               	addwf	??_fputc^0,w,c
  2163   001C76  6ED9               	movwf	fsr2l,c
  2164   001C78  6ADA               	clrf	fsr2h,c
  2165   001C7A  C001  FFDF         	movff	fputc@c,indf2
  2166   001C7E  5003               	movf	fputc@fp^0,w,c
  2167   001C80  6ED9               	movwf	fsr2l,c
  2168   001C82  6ADA               	clrf	fsr2h,c
  2169   001C84  0E03               	movlw	3
  2170   001C86  26D9               	addwf	fsr2l,f,c
  2171   001C88  2ADE               	incf	postinc2,f,c
  2172   001C8A  0E00               	movlw	0
  2173   001C8C  22DD               	addwfc	postdec2,f,c
  2174   001C8E                     l1092:
  2175   001C8E  0012               	return		;funcret
  2176   001C90                     __end_of_fputc:
  2177                           	callstack 0
  2178                           
  2179 ;; *************** function _putch *****************
  2180 ;; Defined at:
  2181 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\putch.c"
  2182 ;; Parameters:    Size  Location     Type
  2183 ;;  c               1    wreg     unsigned char 
  2184 ;; Auto vars:     Size  Location     Type
  2185 ;;  c               1    0[COMRAM] unsigned char 
  2186 ;; Return value:  Size  Location     Type
  2187 ;;                  1    wreg      void 
  2188 ;; Registers used:
  2189 ;;		wreg
  2190 ;; Tracked objects:
  2191 ;;		On entry : 0/0
  2192 ;;		On exit  : 0/0
  2193 ;;		Unchanged: 0/0
  2194 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2195 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2196 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2197 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2198 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2199 ;;Total ram usage:        0 bytes
  2200 ;; Hardware stack levels used: 1
  2201 ;; Hardware stack levels required when called: 1
  2202 ;; This function calls:
  2203 ;;		Nothing
  2204 ;; This function is called by:
  2205 ;;		_fputc
  2206 ;; This function uses a non-reentrant model
  2207 ;;
  2208                           
  2209                           	psect	text10
  2210   002068                     __ptext10:
  2211                           	callstack 0
  2212   002068                     _putch:
  2213                           	callstack 25
  2214   002068  0012               	return		;funcret
  2215   00206A                     __end_of_putch:
  2216                           	callstack 0
  2217                           
  2218 ;; *************** function _abs *****************
  2219 ;; Defined at:
  2220 ;;		line 1 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\abs.c"
  2221 ;; Parameters:    Size  Location     Type
  2222 ;;  a               2    6[COMRAM] int 
  2223 ;; Auto vars:     Size  Location     Type
  2224 ;;		None
  2225 ;; Return value:  Size  Location     Type
  2226 ;;                  2    6[COMRAM] int 
  2227 ;; Registers used:
  2228 ;;		wreg, status,2, status,0
  2229 ;; Tracked objects:
  2230 ;;		On entry : 0/0
  2231 ;;		On exit  : 0/0
  2232 ;;		Unchanged: 0/0
  2233 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2234 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2235 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2236 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2237 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2238 ;;Total ram usage:        4 bytes
  2239 ;; Hardware stack levels used: 1
  2240 ;; Hardware stack levels required when called: 1
  2241 ;; This function calls:
  2242 ;;		Nothing
  2243 ;; This function is called by:
  2244 ;;		_dtoa
  2245 ;; This function uses a non-reentrant model
  2246 ;;
  2247                           
  2248                           	psect	text11
  2249   001F28                     __ptext11:
  2250                           	callstack 0
  2251   001F28                     _abs:
  2252                           	callstack 25
  2253   001F28  BE08               	btfsc	(abs@a+1)^0,7,c
  2254   001F2A  EF99  F00F         	goto	u1551
  2255   001F2E  EF9B  F00F         	goto	u1550
  2256   001F32                     u1551:
  2257   001F32  EFA1  F00F         	goto	l1077
  2258   001F36                     u1550:
  2259   001F36  C007  F007         	movff	abs@a,?_abs
  2260   001F3A  C008  F008         	movff	abs@a+1,?_abs+1
  2261   001F3E  EFAD  F00F         	goto	l1080
  2262   001F42                     l1077:
  2263   001F42  C007  F009         	movff	abs@a,??_abs
  2264   001F46  C008  F00A         	movff	abs@a+1,??_abs+1
  2265   001F4A  1E09               	comf	??_abs^0,f,c
  2266   001F4C  1E0A               	comf	(??_abs+1)^0,f,c
  2267   001F4E  4A09               	infsnz	??_abs^0,f,c
  2268   001F50  2A0A               	incf	(??_abs+1)^0,f,c
  2269   001F52  C009  F007         	movff	??_abs,?_abs
  2270   001F56  C00A  F008         	movff	??_abs+1,?_abs+1
  2271   001F5A                     l1080:
  2272   001F5A  0012               	return		;funcret
  2273   001F5C                     __end_of_abs:
  2274                           	callstack 0
  2275                           
  2276 ;; *************** function ___awdiv *****************
  2277 ;; Defined at:
  2278 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\awdiv.c"
  2279 ;; Parameters:    Size  Location     Type
  2280 ;;  dividend        2    0[COMRAM] int 
  2281 ;;  divisor         2    2[COMRAM] int 
  2282 ;; Auto vars:     Size  Location     Type
  2283 ;;  quotient        2    6[COMRAM] int 
  2284 ;;  sign            1    5[COMRAM] unsigned char 
  2285 ;;  counter         1    4[COMRAM] unsigned char 
  2286 ;; Return value:  Size  Location     Type
  2287 ;;                  2    0[COMRAM] int 
  2288 ;; Registers used:
  2289 ;;		wreg, status,2, status,0
  2290 ;; Tracked objects:
  2291 ;;		On entry : 0/0
  2292 ;;		On exit  : 0/0
  2293 ;;		Unchanged: 0/0
  2294 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2295 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2296 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2297 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2298 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2299 ;;Total ram usage:        8 bytes
  2300 ;; Hardware stack levels used: 1
  2301 ;; Hardware stack levels required when called: 1
  2302 ;; This function calls:
  2303 ;;		Nothing
  2304 ;; This function is called by:
  2305 ;;		_dtoa
  2306 ;; This function uses a non-reentrant model
  2307 ;;
  2308                           
  2309                           	psect	text12
  2310   0019C4                     __ptext12:
  2311                           	callstack 0
  2312   0019C4                     ___awdiv:
  2313                           	callstack 25
  2314   0019C4  0E00               	movlw	0
  2315   0019C6  6E06               	movwf	___awdiv@sign^0,c
  2316   0019C8  BE04               	btfsc	(___awdiv@divisor+1)^0,7,c
  2317   0019CA  EFEB  F00C         	goto	u1390
  2318   0019CE  EFE9  F00C         	goto	u1391
  2319   0019D2                     u1391:
  2320   0019D2  EFF1  F00C         	goto	l1955
  2321   0019D6                     u1390:
  2322   0019D6  6C03               	negf	___awdiv@divisor^0,c
  2323   0019D8  1E04               	comf	(___awdiv@divisor+1)^0,f,c
  2324   0019DA  B0D8               	btfsc	status,0,c
  2325   0019DC  2A04               	incf	(___awdiv@divisor+1)^0,f,c
  2326   0019DE  0E01               	movlw	1
  2327   0019E0  6E06               	movwf	___awdiv@sign^0,c
  2328   0019E2                     l1955:
  2329   0019E2  BE02               	btfsc	(___awdiv@dividend+1)^0,7,c
  2330   0019E4  EFF8  F00C         	goto	u1400
  2331   0019E8  EFF6  F00C         	goto	u1401
  2332   0019EC                     u1401:
  2333   0019EC  EFFE  F00C         	goto	l1961
  2334   0019F0                     u1400:
  2335   0019F0  6C01               	negf	___awdiv@dividend^0,c
  2336   0019F2  1E02               	comf	(___awdiv@dividend+1)^0,f,c
  2337   0019F4  B0D8               	btfsc	status,0,c
  2338   0019F6  2A02               	incf	(___awdiv@dividend+1)^0,f,c
  2339   0019F8  0E01               	movlw	1
  2340   0019FA  1A06               	xorwf	___awdiv@sign^0,f,c
  2341   0019FC                     l1961:
  2342   0019FC  0E00               	movlw	0
  2343   0019FE  6E08               	movwf	(___awdiv@quotient+1)^0,c
  2344   001A00  0E00               	movlw	0
  2345   001A02  6E07               	movwf	___awdiv@quotient^0,c
  2346   001A04  5003               	movf	___awdiv@divisor^0,w,c
  2347   001A06  1004               	iorwf	(___awdiv@divisor+1)^0,w,c
  2348   001A08  B4D8               	btfsc	status,2,c
  2349   001A0A  EF09  F00D         	goto	u1411
  2350   001A0E  EF0B  F00D         	goto	u1410
  2351   001A12                     u1411:
  2352   001A12  EF33  F00D         	goto	l1983
  2353   001A16                     u1410:
  2354   001A16  0E01               	movlw	1
  2355   001A18  6E05               	movwf	___awdiv@counter^0,c
  2356   001A1A  EF13  F00D         	goto	l1969
  2357   001A1E                     l1967:
  2358   001A1E  90D8               	bcf	status,0,c
  2359   001A20  3603               	rlcf	___awdiv@divisor^0,f,c
  2360   001A22  3604               	rlcf	(___awdiv@divisor+1)^0,f,c
  2361   001A24  2A05               	incf	___awdiv@counter^0,f,c
  2362   001A26                     l1969:
  2363   001A26  AE04               	btfss	(___awdiv@divisor+1)^0,7,c
  2364   001A28  EF18  F00D         	goto	u1421
  2365   001A2C  EF1A  F00D         	goto	u1420
  2366   001A30                     u1421:
  2367   001A30  EF0F  F00D         	goto	l1967
  2368   001A34                     u1420:
  2369   001A34                     l1971:
  2370   001A34  90D8               	bcf	status,0,c
  2371   001A36  3607               	rlcf	___awdiv@quotient^0,f,c
  2372   001A38  3608               	rlcf	(___awdiv@quotient+1)^0,f,c
  2373   001A3A  5003               	movf	___awdiv@divisor^0,w,c
  2374   001A3C  5C01               	subwf	___awdiv@dividend^0,w,c
  2375   001A3E  5004               	movf	(___awdiv@divisor+1)^0,w,c
  2376   001A40  5802               	subwfb	(___awdiv@dividend+1)^0,w,c
  2377   001A42  A0D8               	btfss	status,0,c
  2378   001A44  EF26  F00D         	goto	u1431
  2379   001A48  EF28  F00D         	goto	u1430
  2380   001A4C                     u1431:
  2381   001A4C  EF2D  F00D         	goto	l1979
  2382   001A50                     u1430:
  2383   001A50  5003               	movf	___awdiv@divisor^0,w,c
  2384   001A52  5E01               	subwf	___awdiv@dividend^0,f,c
  2385   001A54  5004               	movf	(___awdiv@divisor+1)^0,w,c
  2386   001A56  5A02               	subwfb	(___awdiv@dividend+1)^0,f,c
  2387   001A58  8007               	bsf	___awdiv@quotient^0,0,c
  2388   001A5A                     l1979:
  2389   001A5A  90D8               	bcf	status,0,c
  2390   001A5C  3204               	rrcf	(___awdiv@divisor+1)^0,f,c
  2391   001A5E  3203               	rrcf	___awdiv@divisor^0,f,c
  2392   001A60  2E05               	decfsz	___awdiv@counter^0,f,c
  2393   001A62  EF1A  F00D         	goto	l1971
  2394   001A66                     l1983:
  2395   001A66  5006               	movf	___awdiv@sign^0,w,c
  2396   001A68  B4D8               	btfsc	status,2,c
  2397   001A6A  EF39  F00D         	goto	u1441
  2398   001A6E  EF3B  F00D         	goto	u1440
  2399   001A72                     u1441:
  2400   001A72  EF3F  F00D         	goto	l1987
  2401   001A76                     u1440:
  2402   001A76  6C07               	negf	___awdiv@quotient^0,c
  2403   001A78  1E08               	comf	(___awdiv@quotient+1)^0,f,c
  2404   001A7A  B0D8               	btfsc	status,0,c
  2405   001A7C  2A08               	incf	(___awdiv@quotient+1)^0,f,c
  2406   001A7E                     l1987:
  2407   001A7E  C007  F001         	movff	___awdiv@quotient,?___awdiv
  2408   001A82  C008  F002         	movff	___awdiv@quotient+1,?___awdiv+1
  2409   001A86  0012               	return		;funcret
  2410   001A88                     __end_of___awdiv:
  2411                           	callstack 0
  2412                           
  2413 ;; *************** function _UpdateClock *****************
  2414 ;; Defined at:
  2415 ;;		line 6 in file "clock.c"
  2416 ;; Parameters:    Size  Location     Type
  2417 ;;  seconds         1    6[COMRAM] PTR int 
  2418 ;;		 -> GLOBALsecs(2), 
  2419 ;;  minutes         1    7[COMRAM] PTR int 
  2420 ;;		 -> main@clock(16), 
  2421 ;;  hours           1    8[COMRAM] PTR int 
  2422 ;;		 -> main@clock(16), 
  2423 ;;  days            1    9[COMRAM] PTR int 
  2424 ;;		 -> main@clock(16), 
  2425 ;;  DoW             1   10[COMRAM] PTR int 
  2426 ;;		 -> main@clock(16), 
  2427 ;;  months          1   11[COMRAM] PTR int 
  2428 ;;		 -> main@clock(16), 
  2429 ;;  years           1   12[COMRAM] PTR int 
  2430 ;;		 -> main@clock(16), 
  2431 ;;  DSTstate        1   13[COMRAM] PTR int 
  2432 ;;		 -> main@clock(16), 
  2433 ;;  TestMode        2   14[COMRAM] int 
  2434 ;; Auto vars:     Size  Location     Type
  2435 ;;  DaysInMonth    24   22[COMRAM] int [12]
  2436 ;; Return value:  Size  Location     Type
  2437 ;;                  1    wreg      void 
  2438 ;; Registers used:
  2439 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2440 ;; Tracked objects:
  2441 ;;		On entry : 0/0
  2442 ;;		On exit  : 0/0
  2443 ;;		Unchanged: 0/0
  2444 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2445 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2446 ;;      Locals:        24       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2447 ;;      Temps:          6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2448 ;;      Totals:        40       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2449 ;;Total ram usage:       40 bytes
  2450 ;; Hardware stack levels used: 1
  2451 ;; Hardware stack levels required when called: 2
  2452 ;; This function calls:
  2453 ;;		___awmod
  2454 ;; This function is called by:
  2455 ;;		_main
  2456 ;; This function uses a non-reentrant model
  2457 ;;
  2458                           
  2459                           	psect	text13
  2460   000E46                     __ptext13:
  2461                           	callstack 0
  2462   000E46                     _UpdateClock:
  2463                           	callstack 28
  2464   000E46                     
  2465                           ;clock.c: 8:     int DaysInMonth[] = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
  2466   000E46  EE20  F0CC         	lfsr	2,UpdateClock@F14152
  2467   000E4A  EE10  F017         	lfsr	1,UpdateClock@DaysInMonth
  2468   000E4E  0E17               	movlw	23
  2469   000E50                     u1791:
  2470   000E50  CFDB FFE3          	movff	plusw2,plusw1
  2471   000E54  06E8               	decf	wreg,f,c
  2472   000E56  E2FC               	bc	u1791
  2473   000E58                     
  2474                           ;clock.c: 10:     if (TestMode == 1){
  2475   000E58  040F               	decf	UpdateClock@TestMode^0,w,c
  2476   000E5A  1010               	iorwf	(UpdateClock@TestMode+1)^0,w,c
  2477   000E5C  A4D8               	btfss	status,2,c
  2478   000E5E  EF33  F007         	goto	u1801
  2479   000E62  EF35  F007         	goto	u1800
  2480   000E66                     u1801:
  2481   000E66  EF57  F007         	goto	l2279
  2482   000E6A                     u1800:
  2483   000E6A                     
  2484                           ;clock.c: 11:        *hours = *seconds;
  2485   000E6A  5007               	movf	UpdateClock@seconds^0,w,c
  2486   000E6C  6ED9               	movwf	fsr2l,c
  2487   000E6E  6ADA               	clrf	fsr2h,c
  2488   000E70  5009               	movf	UpdateClock@hours^0,w,c
  2489   000E72  6EE1               	movwf	fsr1l,c
  2490   000E74  6AE2               	clrf	fsr1h,c
  2491   000E76  CFDE FFE6          	movff	postinc2,postinc1
  2492   000E7A  CFDD FFE5          	movff	postdec2,postdec1
  2493   000E7E                     
  2494                           ;clock.c: 12:         if (*seconds >= 24 ){
  2495   000E7E  5007               	movf	UpdateClock@seconds^0,w,c
  2496   000E80  6ED9               	movwf	fsr2l,c
  2497   000E82  6ADA               	clrf	fsr2h,c
  2498   000E84  0E01               	movlw	1
  2499   000E86  BEDB               	btfsc	plusw2,7,c
  2500   000E88  EF50  F007         	goto	u1811
  2501   000E8C  0E01               	movlw	1
  2502   000E8E  50DB               	movf	plusw2,w,c
  2503   000E90  E109               	bnz	u1810
  2504   000E92  0E18               	movlw	24
  2505   000E94  5CDE               	subwf	postinc2,w,c
  2506   000E96  A0D8               	btfss	status,0,c
  2507   000E98  EF50  F007         	goto	u1811
  2508   000E9C  EF52  F007         	goto	u1810
  2509   000EA0                     u1811:
  2510   000EA0  EF57  F007         	goto	l2279
  2511   000EA4                     u1810:
  2512   000EA4                     
  2513                           ;clock.c: 13:             *seconds = 0;
  2514   000EA4  5007               	movf	UpdateClock@seconds^0,w,c
  2515   000EA6  6ED9               	movwf	fsr2l,c
  2516   000EA8  6ADA               	clrf	fsr2h,c
  2517   000EAA  6ADE               	clrf	postinc2,c
  2518   000EAC  6ADD               	clrf	postdec2,c
  2519   000EAE                     l2279:
  2520                           
  2521                           ;clock.c: 17:     if (*seconds >= 60 ){
  2522   000EAE  5007               	movf	UpdateClock@seconds^0,w,c
  2523   000EB0  6ED9               	movwf	fsr2l,c
  2524   000EB2  6ADA               	clrf	fsr2h,c
  2525   000EB4  0E01               	movlw	1
  2526   000EB6  BEDB               	btfsc	plusw2,7,c
  2527   000EB8  EF68  F007         	goto	u1821
  2528   000EBC  0E01               	movlw	1
  2529   000EBE  50DB               	movf	plusw2,w,c
  2530   000EC0  E109               	bnz	u1820
  2531   000EC2  0E3C               	movlw	60
  2532   000EC4  5CDE               	subwf	postinc2,w,c
  2533   000EC6  A0D8               	btfss	status,0,c
  2534   000EC8  EF68  F007         	goto	u1821
  2535   000ECC  EF6A  F007         	goto	u1820
  2536   000ED0                     u1821:
  2537   000ED0  EF81  F007         	goto	l2285
  2538   000ED4                     u1820:
  2539   000ED4                     
  2540                           ;clock.c: 18:         *seconds = 0;
  2541   000ED4  5007               	movf	UpdateClock@seconds^0,w,c
  2542   000ED6  6ED9               	movwf	fsr2l,c
  2543   000ED8  6ADA               	clrf	fsr2h,c
  2544   000EDA  6ADE               	clrf	postinc2,c
  2545   000EDC  6ADD               	clrf	postdec2,c
  2546   000EDE                     
  2547                           ;clock.c: 19:         *minutes = *minutes + 1;
  2548   000EDE  5008               	movf	UpdateClock@minutes^0,w,c
  2549   000EE0  6ED9               	movwf	fsr2l,c
  2550   000EE2  6ADA               	clrf	fsr2h,c
  2551   000EE4  CFDE F011          	movff	postinc2,??_UpdateClock
  2552   000EE8  CFDD F012          	movff	postdec2,??_UpdateClock+1
  2553   000EEC  0E01               	movlw	1
  2554   000EEE  2611               	addwf	??_UpdateClock^0,f,c
  2555   000EF0  0E00               	movlw	0
  2556   000EF2  2212               	addwfc	(??_UpdateClock+1)^0,f,c
  2557   000EF4  5008               	movf	UpdateClock@minutes^0,w,c
  2558   000EF6  6ED9               	movwf	fsr2l,c
  2559   000EF8  6ADA               	clrf	fsr2h,c
  2560   000EFA  C011  FFDE         	movff	??_UpdateClock,postinc2
  2561   000EFE  C012  FFDD         	movff	??_UpdateClock+1,postdec2
  2562   000F02                     l2285:
  2563                           
  2564                           ;clock.c: 22:     if (*minutes >= 60){
  2565   000F02  5008               	movf	UpdateClock@minutes^0,w,c
  2566   000F04  6ED9               	movwf	fsr2l,c
  2567   000F06  6ADA               	clrf	fsr2h,c
  2568   000F08  0E01               	movlw	1
  2569   000F0A  BEDB               	btfsc	plusw2,7,c
  2570   000F0C  EF92  F007         	goto	u1831
  2571   000F10  0E01               	movlw	1
  2572   000F12  50DB               	movf	plusw2,w,c
  2573   000F14  E109               	bnz	u1830
  2574   000F16  0E3C               	movlw	60
  2575   000F18  5CDE               	subwf	postinc2,w,c
  2576   000F1A  A0D8               	btfss	status,0,c
  2577   000F1C  EF92  F007         	goto	u1831
  2578   000F20  EF94  F007         	goto	u1830
  2579   000F24                     u1831:
  2580   000F24  EFAB  F007         	goto	l2291
  2581   000F28                     u1830:
  2582   000F28                     
  2583                           ;clock.c: 23:         *minutes = 0;
  2584   000F28  5008               	movf	UpdateClock@minutes^0,w,c
  2585   000F2A  6ED9               	movwf	fsr2l,c
  2586   000F2C  6ADA               	clrf	fsr2h,c
  2587   000F2E  6ADE               	clrf	postinc2,c
  2588   000F30  6ADD               	clrf	postdec2,c
  2589   000F32                     
  2590                           ;clock.c: 24:         *hours = *hours + 1;
  2591   000F32  5009               	movf	UpdateClock@hours^0,w,c
  2592   000F34  6ED9               	movwf	fsr2l,c
  2593   000F36  6ADA               	clrf	fsr2h,c
  2594   000F38  CFDE F011          	movff	postinc2,??_UpdateClock
  2595   000F3C  CFDD F012          	movff	postdec2,??_UpdateClock+1
  2596   000F40  0E01               	movlw	1
  2597   000F42  2611               	addwf	??_UpdateClock^0,f,c
  2598   000F44  0E00               	movlw	0
  2599   000F46  2212               	addwfc	(??_UpdateClock+1)^0,f,c
  2600   000F48  5009               	movf	UpdateClock@hours^0,w,c
  2601   000F4A  6ED9               	movwf	fsr2l,c
  2602   000F4C  6ADA               	clrf	fsr2h,c
  2603   000F4E  C011  FFDE         	movff	??_UpdateClock,postinc2
  2604   000F52  C012  FFDD         	movff	??_UpdateClock+1,postdec2
  2605   000F56                     l2291:
  2606                           
  2607                           ;clock.c: 27:     if (*hours >= 24){
  2608   000F56  5009               	movf	UpdateClock@hours^0,w,c
  2609   000F58  6ED9               	movwf	fsr2l,c
  2610   000F5A  6ADA               	clrf	fsr2h,c
  2611   000F5C  0E01               	movlw	1
  2612   000F5E  BEDB               	btfsc	plusw2,7,c
  2613   000F60  EFBC  F007         	goto	u1841
  2614   000F64  0E01               	movlw	1
  2615   000F66  50DB               	movf	plusw2,w,c
  2616   000F68  E109               	bnz	u1840
  2617   000F6A  0E18               	movlw	24
  2618   000F6C  5CDE               	subwf	postinc2,w,c
  2619   000F6E  A0D8               	btfss	status,0,c
  2620   000F70  EFBC  F007         	goto	u1841
  2621   000F74  EFBE  F007         	goto	u1840
  2622   000F78                     u1841:
  2623   000F78  EFE7  F007         	goto	l2299
  2624   000F7C                     u1840:
  2625   000F7C                     
  2626                           ;clock.c: 28:         *hours = 0;
  2627   000F7C  5009               	movf	UpdateClock@hours^0,w,c
  2628   000F7E  6ED9               	movwf	fsr2l,c
  2629   000F80  6ADA               	clrf	fsr2h,c
  2630   000F82  6ADE               	clrf	postinc2,c
  2631   000F84  6ADD               	clrf	postdec2,c
  2632   000F86                     
  2633                           ;clock.c: 29:         *days = *days + 1;
  2634   000F86  500A               	movf	UpdateClock@days^0,w,c
  2635   000F88  6ED9               	movwf	fsr2l,c
  2636   000F8A  6ADA               	clrf	fsr2h,c
  2637   000F8C  CFDE F011          	movff	postinc2,??_UpdateClock
  2638   000F90  CFDD F012          	movff	postdec2,??_UpdateClock+1
  2639   000F94  0E01               	movlw	1
  2640   000F96  2611               	addwf	??_UpdateClock^0,f,c
  2641   000F98  0E00               	movlw	0
  2642   000F9A  2212               	addwfc	(??_UpdateClock+1)^0,f,c
  2643   000F9C  500A               	movf	UpdateClock@days^0,w,c
  2644   000F9E  6ED9               	movwf	fsr2l,c
  2645   000FA0  6ADA               	clrf	fsr2h,c
  2646   000FA2  C011  FFDE         	movff	??_UpdateClock,postinc2
  2647   000FA6  C012  FFDD         	movff	??_UpdateClock+1,postdec2
  2648   000FAA                     
  2649                           ;clock.c: 30:         *DoW = *DoW + 1;
  2650   000FAA  500B               	movf	UpdateClock@DoW^0,w,c
  2651   000FAC  6ED9               	movwf	fsr2l,c
  2652   000FAE  6ADA               	clrf	fsr2h,c
  2653   000FB0  CFDE F011          	movff	postinc2,??_UpdateClock
  2654   000FB4  CFDD F012          	movff	postdec2,??_UpdateClock+1
  2655   000FB8  0E01               	movlw	1
  2656   000FBA  2611               	addwf	??_UpdateClock^0,f,c
  2657   000FBC  0E00               	movlw	0
  2658   000FBE  2212               	addwfc	(??_UpdateClock+1)^0,f,c
  2659   000FC0  500B               	movf	UpdateClock@DoW^0,w,c
  2660   000FC2  6ED9               	movwf	fsr2l,c
  2661   000FC4  6ADA               	clrf	fsr2h,c
  2662   000FC6  C011  FFDE         	movff	??_UpdateClock,postinc2
  2663   000FCA  C012  FFDD         	movff	??_UpdateClock+1,postdec2
  2664   000FCE                     l2299:
  2665                           
  2666                           ;clock.c: 33:     if (*DoW >= 8){
  2667   000FCE  500B               	movf	UpdateClock@DoW^0,w,c
  2668   000FD0  6ED9               	movwf	fsr2l,c
  2669   000FD2  6ADA               	clrf	fsr2h,c
  2670   000FD4  0E01               	movlw	1
  2671   000FD6  BEDB               	btfsc	plusw2,7,c
  2672   000FD8  EFF8  F007         	goto	u1851
  2673   000FDC  0E01               	movlw	1
  2674   000FDE  50DB               	movf	plusw2,w,c
  2675   000FE0  E109               	bnz	u1850
  2676   000FE2  0E08               	movlw	8
  2677   000FE4  5CDE               	subwf	postinc2,w,c
  2678   000FE6  A0D8               	btfss	status,0,c
  2679   000FE8  EFF8  F007         	goto	u1851
  2680   000FEC  EFFA  F007         	goto	u1850
  2681   000FF0                     u1851:
  2682   000FF0  EF01  F008         	goto	l2303
  2683   000FF4                     u1850:
  2684   000FF4                     
  2685                           ;clock.c: 34:         *DoW = 1;
  2686   000FF4  500B               	movf	UpdateClock@DoW^0,w,c
  2687   000FF6  6ED9               	movwf	fsr2l,c
  2688   000FF8  6ADA               	clrf	fsr2h,c
  2689   000FFA  0E01               	movlw	1
  2690   000FFC  6EDE               	movwf	postinc2,c
  2691   000FFE  0E00               	movlw	0
  2692   001000  6EDD               	movwf	postdec2,c
  2693   001002                     l2303:
  2694                           
  2695                           ;clock.c: 37:     if((*DSTstate == 0) && (*months == 3) && (*days >= 25) && (*DoW == 7) 
      +                          && ( *hours >= 1) ){
  2696   001002  500E               	movf	UpdateClock@DSTstate^0,w,c
  2697   001004  6ED9               	movwf	fsr2l,c
  2698   001006  6ADA               	clrf	fsr2h,c
  2699   001008  50DE               	movf	postinc2,w,c
  2700   00100A  10DE               	iorwf	postinc2,w,c
  2701   00100C  A4D8               	btfss	status,2,c
  2702   00100E  EF0B  F008         	goto	u1861
  2703   001012  EF0D  F008         	goto	u1860
  2704   001016                     u1861:
  2705   001016  EF80  F008         	goto	l2321
  2706   00101A                     u1860:
  2707   00101A  500C               	movf	UpdateClock@months^0,w,c
  2708   00101C  6ED9               	movwf	fsr2l,c
  2709   00101E  6ADA               	clrf	fsr2h,c
  2710   001020  0E03               	movlw	3
  2711   001022  18DE               	xorwf	postinc2,w,c
  2712   001024  10DE               	iorwf	postinc2,w,c
  2713   001026  A4D8               	btfss	status,2,c
  2714   001028  EF18  F008         	goto	u1871
  2715   00102C  EF1A  F008         	goto	u1870
  2716   001030                     u1871:
  2717   001030  EF80  F008         	goto	l2321
  2718   001034                     u1870:
  2719   001034  500A               	movf	UpdateClock@days^0,w,c
  2720   001036  6ED9               	movwf	fsr2l,c
  2721   001038  6ADA               	clrf	fsr2h,c
  2722   00103A  0E01               	movlw	1
  2723   00103C  BEDB               	btfsc	plusw2,7,c
  2724   00103E  EF2B  F008         	goto	u1881
  2725   001042  0E01               	movlw	1
  2726   001044  50DB               	movf	plusw2,w,c
  2727   001046  E109               	bnz	u1880
  2728   001048  0E19               	movlw	25
  2729   00104A  5CDE               	subwf	postinc2,w,c
  2730   00104C  A0D8               	btfss	status,0,c
  2731   00104E  EF2B  F008         	goto	u1881
  2732   001052  EF2D  F008         	goto	u1880
  2733   001056                     u1881:
  2734   001056  EF80  F008         	goto	l2321
  2735   00105A                     u1880:
  2736   00105A  500B               	movf	UpdateClock@DoW^0,w,c
  2737   00105C  6ED9               	movwf	fsr2l,c
  2738   00105E  6ADA               	clrf	fsr2h,c
  2739   001060  0E07               	movlw	7
  2740   001062  18DE               	xorwf	postinc2,w,c
  2741   001064  10DE               	iorwf	postinc2,w,c
  2742   001066  A4D8               	btfss	status,2,c
  2743   001068  EF38  F008         	goto	u1891
  2744   00106C  EF3A  F008         	goto	u1890
  2745   001070                     u1891:
  2746   001070  EF80  F008         	goto	l2321
  2747   001074                     u1890:
  2748   001074  5009               	movf	UpdateClock@hours^0,w,c
  2749   001076  6ED9               	movwf	fsr2l,c
  2750   001078  6ADA               	clrf	fsr2h,c
  2751   00107A  0E01               	movlw	1
  2752   00107C  BEDB               	btfsc	plusw2,7,c
  2753   00107E  EF4A  F008         	goto	u1901
  2754   001082  0E01               	movlw	1
  2755   001084  50DB               	movf	plusw2,w,c
  2756   001086  E108               	bnz	u1900
  2757   001088  04DE               	decf	postinc2,w,c
  2758   00108A  A0D8               	btfss	status,0,c
  2759   00108C  EF4A  F008         	goto	u1901
  2760   001090  EF4C  F008         	goto	u1900
  2761   001094                     u1901:
  2762   001094  EF80  F008         	goto	l2321
  2763   001098                     u1900:
  2764   001098                     
  2765                           ;clock.c: 39:         *hours = *hours + 1;
  2766   001098  5009               	movf	UpdateClock@hours^0,w,c
  2767   00109A  6ED9               	movwf	fsr2l,c
  2768   00109C  6ADA               	clrf	fsr2h,c
  2769   00109E  CFDE F011          	movff	postinc2,??_UpdateClock
  2770   0010A2  CFDD F012          	movff	postdec2,??_UpdateClock+1
  2771   0010A6  0E01               	movlw	1
  2772   0010A8  2611               	addwf	??_UpdateClock^0,f,c
  2773   0010AA  0E00               	movlw	0
  2774   0010AC  2212               	addwfc	(??_UpdateClock+1)^0,f,c
  2775   0010AE  5009               	movf	UpdateClock@hours^0,w,c
  2776   0010B0  6ED9               	movwf	fsr2l,c
  2777   0010B2  6ADA               	clrf	fsr2h,c
  2778   0010B4  C011  FFDE         	movff	??_UpdateClock,postinc2
  2779   0010B8  C012  FFDD         	movff	??_UpdateClock+1,postdec2
  2780   0010BC                     
  2781                           ;clock.c: 40:         if (TestMode == 1){
  2782   0010BC  040F               	decf	UpdateClock@TestMode^0,w,c
  2783   0010BE  1010               	iorwf	(UpdateClock@TestMode+1)^0,w,c
  2784   0010C0  A4D8               	btfss	status,2,c
  2785   0010C2  EF65  F008         	goto	u1911
  2786   0010C6  EF67  F008         	goto	u1910
  2787   0010CA                     u1911:
  2788   0010CA  EF79  F008         	goto	l2319
  2789   0010CE                     u1910:
  2790   0010CE                     
  2791                           ;clock.c: 41:             *seconds = *seconds + 1;
  2792   0010CE  5007               	movf	UpdateClock@seconds^0,w,c
  2793   0010D0  6ED9               	movwf	fsr2l,c
  2794   0010D2  6ADA               	clrf	fsr2h,c
  2795   0010D4  CFDE F011          	movff	postinc2,??_UpdateClock
  2796   0010D8  CFDD F012          	movff	postdec2,??_UpdateClock+1
  2797   0010DC  0E01               	movlw	1
  2798   0010DE  2611               	addwf	??_UpdateClock^0,f,c
  2799   0010E0  0E00               	movlw	0
  2800   0010E2  2212               	addwfc	(??_UpdateClock+1)^0,f,c
  2801   0010E4  5007               	movf	UpdateClock@seconds^0,w,c
  2802   0010E6  6ED9               	movwf	fsr2l,c
  2803   0010E8  6ADA               	clrf	fsr2h,c
  2804   0010EA  C011  FFDE         	movff	??_UpdateClock,postinc2
  2805   0010EE  C012  FFDD         	movff	??_UpdateClock+1,postdec2
  2806   0010F2                     l2319:
  2807                           
  2808                           ;clock.c: 43:         *DSTstate = 1;
  2809   0010F2  500E               	movf	UpdateClock@DSTstate^0,w,c
  2810   0010F4  6ED9               	movwf	fsr2l,c
  2811   0010F6  6ADA               	clrf	fsr2h,c
  2812   0010F8  0E01               	movlw	1
  2813   0010FA  6EDE               	movwf	postinc2,c
  2814   0010FC  0E00               	movlw	0
  2815   0010FE  6EDD               	movwf	postdec2,c
  2816   001100                     l2321:
  2817                           
  2818                           ;clock.c: 47:     if((*DSTstate==1) && (*months == 10) && (*days >= 25) && (*DoW == 7) &
      +                          & (*hours == 2) ){
  2819   001100  500E               	movf	UpdateClock@DSTstate^0,w,c
  2820   001102  6ED9               	movwf	fsr2l,c
  2821   001104  6ADA               	clrf	fsr2h,c
  2822   001106  04DE               	decf	postinc2,w,c
  2823   001108  10DE               	iorwf	postinc2,w,c
  2824   00110A  A4D8               	btfss	status,2,c
  2825   00110C  EF8A  F008         	goto	u1921
  2826   001110  EF8C  F008         	goto	u1920
  2827   001114                     u1921:
  2828   001114  EFFC  F008         	goto	l2339
  2829   001118                     u1920:
  2830   001118  500C               	movf	UpdateClock@months^0,w,c
  2831   00111A  6ED9               	movwf	fsr2l,c
  2832   00111C  6ADA               	clrf	fsr2h,c
  2833   00111E  0E0A               	movlw	10
  2834   001120  18DE               	xorwf	postinc2,w,c
  2835   001122  10DE               	iorwf	postinc2,w,c
  2836   001124  A4D8               	btfss	status,2,c
  2837   001126  EF97  F008         	goto	u1931
  2838   00112A  EF99  F008         	goto	u1930
  2839   00112E                     u1931:
  2840   00112E  EFFC  F008         	goto	l2339
  2841   001132                     u1930:
  2842   001132  500A               	movf	UpdateClock@days^0,w,c
  2843   001134  6ED9               	movwf	fsr2l,c
  2844   001136  6ADA               	clrf	fsr2h,c
  2845   001138  0E01               	movlw	1
  2846   00113A  BEDB               	btfsc	plusw2,7,c
  2847   00113C  EFAA  F008         	goto	u1941
  2848   001140  0E01               	movlw	1
  2849   001142  50DB               	movf	plusw2,w,c
  2850   001144  E109               	bnz	u1940
  2851   001146  0E19               	movlw	25
  2852   001148  5CDE               	subwf	postinc2,w,c
  2853   00114A  A0D8               	btfss	status,0,c
  2854   00114C  EFAA  F008         	goto	u1941
  2855   001150  EFAC  F008         	goto	u1940
  2856   001154                     u1941:
  2857   001154  EFFC  F008         	goto	l2339
  2858   001158                     u1940:
  2859   001158  500B               	movf	UpdateClock@DoW^0,w,c
  2860   00115A  6ED9               	movwf	fsr2l,c
  2861   00115C  6ADA               	clrf	fsr2h,c
  2862   00115E  0E07               	movlw	7
  2863   001160  18DE               	xorwf	postinc2,w,c
  2864   001162  10DE               	iorwf	postinc2,w,c
  2865   001164  A4D8               	btfss	status,2,c
  2866   001166  EFB7  F008         	goto	u1951
  2867   00116A  EFB9  F008         	goto	u1950
  2868   00116E                     u1951:
  2869   00116E  EFFC  F008         	goto	l2339
  2870   001172                     u1950:
  2871   001172  5009               	movf	UpdateClock@hours^0,w,c
  2872   001174  6ED9               	movwf	fsr2l,c
  2873   001176  6ADA               	clrf	fsr2h,c
  2874   001178  0E02               	movlw	2
  2875   00117A  18DE               	xorwf	postinc2,w,c
  2876   00117C  10DE               	iorwf	postinc2,w,c
  2877   00117E  A4D8               	btfss	status,2,c
  2878   001180  EFC4  F008         	goto	u1961
  2879   001184  EFC6  F008         	goto	u1960
  2880   001188                     u1961:
  2881   001188  EFFC  F008         	goto	l2339
  2882   00118C                     u1960:
  2883   00118C                     
  2884                           ;clock.c: 48:         *hours = *hours - 1;
  2885   00118C  5009               	movf	UpdateClock@hours^0,w,c
  2886   00118E  6ED9               	movwf	fsr2l,c
  2887   001190  6ADA               	clrf	fsr2h,c
  2888   001192  CFDE F011          	movff	postinc2,??_UpdateClock
  2889   001196  CFDD F012          	movff	postdec2,??_UpdateClock+1
  2890   00119A  0EFF               	movlw	255
  2891   00119C  2411               	addwf	??_UpdateClock^0,w,c
  2892   00119E  6E13               	movwf	(??_UpdateClock+2)^0,c
  2893   0011A0  0EFF               	movlw	255
  2894   0011A2  2012               	addwfc	(??_UpdateClock+1)^0,w,c
  2895   0011A4  6E14               	movwf	(??_UpdateClock+3)^0,c
  2896   0011A6  5009               	movf	UpdateClock@hours^0,w,c
  2897   0011A8  6ED9               	movwf	fsr2l,c
  2898   0011AA  6ADA               	clrf	fsr2h,c
  2899   0011AC  C013  FFDE         	movff	??_UpdateClock+2,postinc2
  2900   0011B0  C014  FFDD         	movff	??_UpdateClock+3,postdec2
  2901   0011B4                     
  2902                           ;clock.c: 49:         if (TestMode == 1){
  2903   0011B4  040F               	decf	UpdateClock@TestMode^0,w,c
  2904   0011B6  1010               	iorwf	(UpdateClock@TestMode+1)^0,w,c
  2905   0011B8  A4D8               	btfss	status,2,c
  2906   0011BA  EFE1  F008         	goto	u1971
  2907   0011BE  EFE3  F008         	goto	u1970
  2908   0011C2                     u1971:
  2909   0011C2  EFF7  F008         	goto	l2337
  2910   0011C6                     u1970:
  2911   0011C6                     
  2912                           ;clock.c: 50:             *seconds = *seconds - 1;
  2913   0011C6  5007               	movf	UpdateClock@seconds^0,w,c
  2914   0011C8  6ED9               	movwf	fsr2l,c
  2915   0011CA  6ADA               	clrf	fsr2h,c
  2916   0011CC  CFDE F011          	movff	postinc2,??_UpdateClock
  2917   0011D0  CFDD F012          	movff	postdec2,??_UpdateClock+1
  2918   0011D4  0EFF               	movlw	255
  2919   0011D6  2411               	addwf	??_UpdateClock^0,w,c
  2920   0011D8  6E13               	movwf	(??_UpdateClock+2)^0,c
  2921   0011DA  0EFF               	movlw	255
  2922   0011DC  2012               	addwfc	(??_UpdateClock+1)^0,w,c
  2923   0011DE  6E14               	movwf	(??_UpdateClock+3)^0,c
  2924   0011E0  5007               	movf	UpdateClock@seconds^0,w,c
  2925   0011E2  6ED9               	movwf	fsr2l,c
  2926   0011E4  6ADA               	clrf	fsr2h,c
  2927   0011E6  C013  FFDE         	movff	??_UpdateClock+2,postinc2
  2928   0011EA  C014  FFDD         	movff	??_UpdateClock+3,postdec2
  2929   0011EE                     l2337:
  2930                           
  2931                           ;clock.c: 52:         *DSTstate = 0;
  2932   0011EE  500E               	movf	UpdateClock@DSTstate^0,w,c
  2933   0011F0  6ED9               	movwf	fsr2l,c
  2934   0011F2  6ADA               	clrf	fsr2h,c
  2935   0011F4  6ADE               	clrf	postinc2,c
  2936   0011F6  6ADD               	clrf	postdec2,c
  2937   0011F8                     l2339:
  2938                           
  2939                           ;clock.c: 56:     if ((*years)%4 == 0 && *months == 2){
  2940   0011F8  500D               	movf	UpdateClock@years^0,w,c
  2941   0011FA  6ED9               	movwf	fsr2l,c
  2942   0011FC  6ADA               	clrf	fsr2h,c
  2943   0011FE  CFDE F011          	movff	postinc2,??_UpdateClock
  2944   001202  CFDD F012          	movff	postdec2,??_UpdateClock+1
  2945   001206  0E03               	movlw	3
  2946   001208  1611               	andwf	??_UpdateClock^0,f,c
  2947   00120A  0E00               	movlw	0
  2948   00120C  1612               	andwf	(??_UpdateClock+1)^0,f,c
  2949   00120E  5011               	movf	??_UpdateClock^0,w,c
  2950   001210  1012               	iorwf	(??_UpdateClock+1)^0,w,c
  2951   001212  A4D8               	btfss	status,2,c
  2952   001214  EF0E  F009         	goto	u1981
  2953   001218  EF10  F009         	goto	u1980
  2954   00121C                     u1981:
  2955   00121C  EF21  F009         	goto	l2345
  2956   001220                     u1980:
  2957   001220  500C               	movf	UpdateClock@months^0,w,c
  2958   001222  6ED9               	movwf	fsr2l,c
  2959   001224  6ADA               	clrf	fsr2h,c
  2960   001226  0E02               	movlw	2
  2961   001228  18DE               	xorwf	postinc2,w,c
  2962   00122A  10DE               	iorwf	postinc2,w,c
  2963   00122C  A4D8               	btfss	status,2,c
  2964   00122E  EF1B  F009         	goto	u1991
  2965   001232  EF1D  F009         	goto	u1990
  2966   001236                     u1991:
  2967   001236  EF21  F009         	goto	l2345
  2968   00123A                     u1990:
  2969   00123A                     
  2970                           ;clock.c: 57:        DaysInMonth[1] = 29;
  2971   00123A  0E00               	movlw	0
  2972   00123C  6E1A               	movwf	(UpdateClock@DaysInMonth+3)^0,c
  2973   00123E  0E1D               	movlw	29
  2974   001240  6E19               	movwf	(UpdateClock@DaysInMonth+2)^0,c
  2975   001242                     l2345:
  2976                           
  2977                           ;clock.c: 61:     if (*years%100 == 0 && *months == 2 && *years%400 != 0){
  2978   001242  500D               	movf	UpdateClock@years^0,w,c
  2979   001244  6ED9               	movwf	fsr2l,c
  2980   001246  6ADA               	clrf	fsr2h,c
  2981   001248  CFDE F001          	movff	postinc2,___awmod@dividend
  2982   00124C  CFDD F002          	movff	postdec2,___awmod@dividend+1
  2983   001250  0E00               	movlw	0
  2984   001252  6E04               	movwf	(___awmod@divisor+1)^0,c
  2985   001254  0E64               	movlw	100
  2986   001256  6E03               	movwf	___awmod@divisor^0,c
  2987   001258  EC44  F00D         	call	___awmod	;wreg free
  2988   00125C  5001               	movf	?___awmod^0,w,c
  2989   00125E  1002               	iorwf	(?___awmod+1)^0,w,c
  2990   001260  A4D8               	btfss	status,2,c
  2991   001262  EF35  F009         	goto	u2001
  2992   001266  EF37  F009         	goto	u2000
  2993   00126A                     u2001:
  2994   00126A  EF5E  F009         	goto	l2353
  2995   00126E                     u2000:
  2996   00126E  500C               	movf	UpdateClock@months^0,w,c
  2997   001270  6ED9               	movwf	fsr2l,c
  2998   001272  6ADA               	clrf	fsr2h,c
  2999   001274  0E02               	movlw	2
  3000   001276  18DE               	xorwf	postinc2,w,c
  3001   001278  10DE               	iorwf	postinc2,w,c
  3002   00127A  A4D8               	btfss	status,2,c
  3003   00127C  EF42  F009         	goto	u2011
  3004   001280  EF44  F009         	goto	u2010
  3005   001284                     u2011:
  3006   001284  EF5E  F009         	goto	l2353
  3007   001288                     u2010:
  3008   001288  500D               	movf	UpdateClock@years^0,w,c
  3009   00128A  6ED9               	movwf	fsr2l,c
  3010   00128C  6ADA               	clrf	fsr2h,c
  3011   00128E  CFDE F001          	movff	postinc2,___awmod@dividend
  3012   001292  CFDD F002          	movff	postdec2,___awmod@dividend+1
  3013   001296  0E01               	movlw	1
  3014   001298  6E04               	movwf	(___awmod@divisor+1)^0,c
  3015   00129A  0E90               	movlw	144
  3016   00129C  6E03               	movwf	___awmod@divisor^0,c
  3017   00129E  EC44  F00D         	call	___awmod	;wreg free
  3018   0012A2  5001               	movf	?___awmod^0,w,c
  3019   0012A4  1002               	iorwf	(?___awmod+1)^0,w,c
  3020   0012A6  B4D8               	btfsc	status,2,c
  3021   0012A8  EF58  F009         	goto	u2021
  3022   0012AC  EF5A  F009         	goto	u2020
  3023   0012B0                     u2021:
  3024   0012B0  EF5E  F009         	goto	l2353
  3025   0012B4                     u2020:
  3026   0012B4                     
  3027                           ;clock.c: 62:             DaysInMonth[1] = 28;
  3028   0012B4  0E00               	movlw	0
  3029   0012B6  6E1A               	movwf	(UpdateClock@DaysInMonth+3)^0,c
  3030   0012B8  0E1C               	movlw	28
  3031   0012BA  6E19               	movwf	(UpdateClock@DaysInMonth+2)^0,c
  3032   0012BC                     l2353:
  3033                           
  3034                           ;clock.c: 66:     if (*days > (DaysInMonth[*months-1] ) ) {
  3035   0012BC  500A               	movf	UpdateClock@days^0,w,c
  3036   0012BE  6ED9               	movwf	fsr2l,c
  3037   0012C0  6ADA               	clrf	fsr2h,c
  3038   0012C2  500C               	movf	UpdateClock@months^0,w,c
  3039   0012C4  6EE1               	movwf	fsr1l,c
  3040   0012C6  6AE2               	clrf	fsr1h,c
  3041   0012C8  50E7               	movf	indf1,w,c
  3042   0012CA  0D02               	mullw	2
  3043   0012CC  CFF3 F013          	movff	prodl,??_UpdateClock+2
  3044   0012D0  0EFE               	movlw	254
  3045   0012D2  2613               	addwf	(??_UpdateClock+2)^0,f,c
  3046   0012D4  5013               	movf	(??_UpdateClock+2)^0,w,c
  3047   0012D6  0F17               	addlw	low UpdateClock@DaysInMonth
  3048   0012D8  6EE1               	movwf	fsr1l,c
  3049   0012DA  6AE2               	clrf	fsr1h,c
  3050   0012DC  50DE               	movf	postinc2,w,c
  3051   0012DE  5CE6               	subwf	postinc1,w,c
  3052   0012E0  50E6               	movf	postinc1,w,c
  3053   0012E2  0A80               	xorlw	128
  3054   0012E4  6E16               	movwf	(??_UpdateClock+5)^0,c
  3055   0012E6  50DE               	movf	postinc2,w,c
  3056   0012E8  0A80               	xorlw	128
  3057   0012EA  5816               	subwfb	(??_UpdateClock+5)^0,w,c
  3058   0012EC  B0D8               	btfsc	status,0,c
  3059   0012EE  EF7B  F009         	goto	u2031
  3060   0012F2  EF7D  F009         	goto	u2030
  3061   0012F6                     u2031:
  3062   0012F6  EFC2  F009         	goto	l255
  3063   0012FA                     u2030:
  3064   0012FA                     
  3065                           ;clock.c: 67:         *days = 1;
  3066   0012FA  500A               	movf	UpdateClock@days^0,w,c
  3067   0012FC  6ED9               	movwf	fsr2l,c
  3068   0012FE  6ADA               	clrf	fsr2h,c
  3069   001300  0E01               	movlw	1
  3070   001302  6EDE               	movwf	postinc2,c
  3071   001304  0E00               	movlw	0
  3072   001306  6EDD               	movwf	postdec2,c
  3073   001308                     
  3074                           ;clock.c: 68:         *months = *months + 1 ;
  3075   001308  500C               	movf	UpdateClock@months^0,w,c
  3076   00130A  6ED9               	movwf	fsr2l,c
  3077   00130C  6ADA               	clrf	fsr2h,c
  3078   00130E  CFDE F011          	movff	postinc2,??_UpdateClock
  3079   001312  CFDD F012          	movff	postdec2,??_UpdateClock+1
  3080   001316  0E01               	movlw	1
  3081   001318  2611               	addwf	??_UpdateClock^0,f,c
  3082   00131A  0E00               	movlw	0
  3083   00131C  2212               	addwfc	(??_UpdateClock+1)^0,f,c
  3084   00131E  500C               	movf	UpdateClock@months^0,w,c
  3085   001320  6ED9               	movwf	fsr2l,c
  3086   001322  6ADA               	clrf	fsr2h,c
  3087   001324  C011  FFDE         	movff	??_UpdateClock,postinc2
  3088   001328  C012  FFDD         	movff	??_UpdateClock+1,postdec2
  3089   00132C                     
  3090                           ;clock.c: 70:         if (*months >= 12+1) {
  3091   00132C  500C               	movf	UpdateClock@months^0,w,c
  3092   00132E  6ED9               	movwf	fsr2l,c
  3093   001330  6ADA               	clrf	fsr2h,c
  3094   001332  0E01               	movlw	1
  3095   001334  BEDB               	btfsc	plusw2,7,c
  3096   001336  EFA7  F009         	goto	u2041
  3097   00133A  0E01               	movlw	1
  3098   00133C  50DB               	movf	plusw2,w,c
  3099   00133E  E109               	bnz	u2040
  3100   001340  0E0D               	movlw	13
  3101   001342  5CDE               	subwf	postinc2,w,c
  3102   001344  A0D8               	btfss	status,0,c
  3103   001346  EFA7  F009         	goto	u2041
  3104   00134A  EFA9  F009         	goto	u2040
  3105   00134E                     u2041:
  3106   00134E  EFC2  F009         	goto	l255
  3107   001352                     u2040:
  3108   001352                     
  3109                           ;clock.c: 71:             *months = 1;
  3110   001352  500C               	movf	UpdateClock@months^0,w,c
  3111   001354  6ED9               	movwf	fsr2l,c
  3112   001356  6ADA               	clrf	fsr2h,c
  3113   001358  0E01               	movlw	1
  3114   00135A  6EDE               	movwf	postinc2,c
  3115   00135C  0E00               	movlw	0
  3116   00135E  6EDD               	movwf	postdec2,c
  3117   001360                     
  3118                           ;clock.c: 72:             *years = *years + 1;
  3119   001360  500D               	movf	UpdateClock@years^0,w,c
  3120   001362  6ED9               	movwf	fsr2l,c
  3121   001364  6ADA               	clrf	fsr2h,c
  3122   001366  CFDE F011          	movff	postinc2,??_UpdateClock
  3123   00136A  CFDD F012          	movff	postdec2,??_UpdateClock+1
  3124   00136E  0E01               	movlw	1
  3125   001370  2611               	addwf	??_UpdateClock^0,f,c
  3126   001372  0E00               	movlw	0
  3127   001374  2212               	addwfc	(??_UpdateClock+1)^0,f,c
  3128   001376  500D               	movf	UpdateClock@years^0,w,c
  3129   001378  6ED9               	movwf	fsr2l,c
  3130   00137A  6ADA               	clrf	fsr2h,c
  3131   00137C  C011  FFDE         	movff	??_UpdateClock,postinc2
  3132   001380  C012  FFDD         	movff	??_UpdateClock+1,postdec2
  3133   001384                     l255:
  3134   001384  0012               	return		;funcret
  3135   001386                     __end_of_UpdateClock:
  3136                           	callstack 0
  3137                           
  3138 ;; *************** function ___awmod *****************
  3139 ;; Defined at:
  3140 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\awmod.c"
  3141 ;; Parameters:    Size  Location     Type
  3142 ;;  dividend        2    0[COMRAM] int 
  3143 ;;  divisor         2    2[COMRAM] int 
  3144 ;; Auto vars:     Size  Location     Type
  3145 ;;  sign            1    5[COMRAM] unsigned char 
  3146 ;;  counter         1    4[COMRAM] unsigned char 
  3147 ;; Return value:  Size  Location     Type
  3148 ;;                  2    0[COMRAM] int 
  3149 ;; Registers used:
  3150 ;;		wreg, status,2, status,0
  3151 ;; Tracked objects:
  3152 ;;		On entry : 0/0
  3153 ;;		On exit  : 0/0
  3154 ;;		Unchanged: 0/0
  3155 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3156 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3157 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3158 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3159 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3160 ;;Total ram usage:        6 bytes
  3161 ;; Hardware stack levels used: 1
  3162 ;; Hardware stack levels required when called: 1
  3163 ;; This function calls:
  3164 ;;		Nothing
  3165 ;; This function is called by:
  3166 ;;		_UpdateClock
  3167 ;;		_dtoa
  3168 ;; This function uses a non-reentrant model
  3169 ;;
  3170                           
  3171                           	psect	text14
  3172   001A88                     __ptext14:
  3173                           	callstack 0
  3174   001A88                     ___awmod:
  3175                           	callstack 25
  3176   001A88  0E00               	movlw	0
  3177   001A8A  6E06               	movwf	___awmod@sign^0,c
  3178   001A8C  BE02               	btfsc	(___awmod@dividend+1)^0,7,c
  3179   001A8E  EF4D  F00D         	goto	u1450
  3180   001A92  EF4B  F00D         	goto	u1451
  3181   001A96                     u1451:
  3182   001A96  EF53  F00D         	goto	l1999
  3183   001A9A                     u1450:
  3184   001A9A  6C01               	negf	___awmod@dividend^0,c
  3185   001A9C  1E02               	comf	(___awmod@dividend+1)^0,f,c
  3186   001A9E  B0D8               	btfsc	status,0,c
  3187   001AA0  2A02               	incf	(___awmod@dividend+1)^0,f,c
  3188   001AA2  0E01               	movlw	1
  3189   001AA4  6E06               	movwf	___awmod@sign^0,c
  3190   001AA6                     l1999:
  3191   001AA6  BE04               	btfsc	(___awmod@divisor+1)^0,7,c
  3192   001AA8  EF5A  F00D         	goto	u1460
  3193   001AAC  EF58  F00D         	goto	u1461
  3194   001AB0                     u1461:
  3195   001AB0  EF5E  F00D         	goto	l2003
  3196   001AB4                     u1460:
  3197   001AB4  6C03               	negf	___awmod@divisor^0,c
  3198   001AB6  1E04               	comf	(___awmod@divisor+1)^0,f,c
  3199   001AB8  B0D8               	btfsc	status,0,c
  3200   001ABA  2A04               	incf	(___awmod@divisor+1)^0,f,c
  3201   001ABC                     l2003:
  3202   001ABC  5003               	movf	___awmod@divisor^0,w,c
  3203   001ABE  1004               	iorwf	(___awmod@divisor+1)^0,w,c
  3204   001AC0  B4D8               	btfsc	status,2,c
  3205   001AC2  EF65  F00D         	goto	u1471
  3206   001AC6  EF67  F00D         	goto	u1470
  3207   001ACA                     u1471:
  3208   001ACA  EF8B  F00D         	goto	l2019
  3209   001ACE                     u1470:
  3210   001ACE  0E01               	movlw	1
  3211   001AD0  6E05               	movwf	___awmod@counter^0,c
  3212   001AD2  EF6F  F00D         	goto	l2009
  3213   001AD6                     l2007:
  3214   001AD6  90D8               	bcf	status,0,c
  3215   001AD8  3603               	rlcf	___awmod@divisor^0,f,c
  3216   001ADA  3604               	rlcf	(___awmod@divisor+1)^0,f,c
  3217   001ADC  2A05               	incf	___awmod@counter^0,f,c
  3218   001ADE                     l2009:
  3219   001ADE  AE04               	btfss	(___awmod@divisor+1)^0,7,c
  3220   001AE0  EF74  F00D         	goto	u1481
  3221   001AE4  EF76  F00D         	goto	u1480
  3222   001AE8                     u1481:
  3223   001AE8  EF6B  F00D         	goto	l2007
  3224   001AEC                     u1480:
  3225   001AEC                     l2011:
  3226   001AEC  5003               	movf	___awmod@divisor^0,w,c
  3227   001AEE  5C01               	subwf	___awmod@dividend^0,w,c
  3228   001AF0  5004               	movf	(___awmod@divisor+1)^0,w,c
  3229   001AF2  5802               	subwfb	(___awmod@dividend+1)^0,w,c
  3230   001AF4  A0D8               	btfss	status,0,c
  3231   001AF6  EF7F  F00D         	goto	u1491
  3232   001AFA  EF81  F00D         	goto	u1490
  3233   001AFE                     u1491:
  3234   001AFE  EF85  F00D         	goto	l2015
  3235   001B02                     u1490:
  3236   001B02  5003               	movf	___awmod@divisor^0,w,c
  3237   001B04  5E01               	subwf	___awmod@dividend^0,f,c
  3238   001B06  5004               	movf	(___awmod@divisor+1)^0,w,c
  3239   001B08  5A02               	subwfb	(___awmod@dividend+1)^0,f,c
  3240   001B0A                     l2015:
  3241   001B0A  90D8               	bcf	status,0,c
  3242   001B0C  3204               	rrcf	(___awmod@divisor+1)^0,f,c
  3243   001B0E  3203               	rrcf	___awmod@divisor^0,f,c
  3244   001B10  2E05               	decfsz	___awmod@counter^0,f,c
  3245   001B12  EF76  F00D         	goto	l2011
  3246   001B16                     l2019:
  3247   001B16  5006               	movf	___awmod@sign^0,w,c
  3248   001B18  B4D8               	btfsc	status,2,c
  3249   001B1A  EF91  F00D         	goto	u1501
  3250   001B1E  EF93  F00D         	goto	u1500
  3251   001B22                     u1501:
  3252   001B22  EF97  F00D         	goto	l2023
  3253   001B26                     u1500:
  3254   001B26  6C01               	negf	___awmod@dividend^0,c
  3255   001B28  1E02               	comf	(___awmod@dividend+1)^0,f,c
  3256   001B2A  B0D8               	btfsc	status,0,c
  3257   001B2C  2A02               	incf	(___awmod@dividend+1)^0,f,c
  3258   001B2E                     l2023:
  3259   001B2E  C001  F001         	movff	___awmod@dividend,?___awmod
  3260   001B32  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
  3261   001B36  0012               	return		;funcret
  3262   001B38                     __end_of___awmod:
  3263                           	callstack 0
  3264                           
  3265 ;; *************** function _Timer0_init *****************
  3266 ;; Defined at:
  3267 ;;		line 8 in file "timers.c"
  3268 ;; Parameters:    Size  Location     Type
  3269 ;;		None
  3270 ;; Auto vars:     Size  Location     Type
  3271 ;;		None
  3272 ;; Return value:  Size  Location     Type
  3273 ;;                  1    wreg      void 
  3274 ;; Registers used:
  3275 ;;		wreg, status,2
  3276 ;; Tracked objects:
  3277 ;;		On entry : 0/0
  3278 ;;		On exit  : 0/0
  3279 ;;		Unchanged: 0/0
  3280 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3281 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3282 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3283 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3284 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3285 ;;Total ram usage:        0 bytes
  3286 ;; Hardware stack levels used: 1
  3287 ;; Hardware stack levels required when called: 1
  3288 ;; This function calls:
  3289 ;;		Nothing
  3290 ;; This function is called by:
  3291 ;;		_main
  3292 ;; This function uses a non-reentrant model
  3293 ;;
  3294                           
  3295                           	psect	text15
  3296   001FFA                     __ptext15:
  3297                           	callstack 0
  3298   001FFA                     _Timer0_init:
  3299                           	callstack 29
  3300   001FFA                     
  3301                           ;timers.c: 10:     T0CON1bits.T0CS=0b010;
  3302   001FFA  50D6               	movf	214,w,c	;volatile
  3303   001FFC  0B1F               	andlw	-225
  3304   001FFE  0940               	iorlw	64
  3305   002000  6ED6               	movwf	214,c	;volatile
  3306   002002                     
  3307                           ;timers.c: 11:     T0CON1bits.T0ASYNC=1;
  3308   002002  88D6               	bsf	214,4,c	;volatile
  3309                           
  3310                           ;timers.c: 13:     T0CON1bits.T0CKPS=0b1000;
  3311   002004  50D6               	movf	214,w,c	;volatile
  3312   002006  0BF0               	andlw	-16
  3313   002008  0908               	iorlw	8
  3314   00200A  6ED6               	movwf	214,c	;volatile
  3315   00200C                     
  3316                           ;timers.c: 15:     T0CON0bits.T016BIT=1;
  3317   00200C  88D5               	bsf	213,4,c	;volatile
  3318                           
  3319                           ;timers.c: 18:     TMR0H = 0b00001011;
  3320   00200E  0E0B               	movlw	11
  3321   002010  6ED4               	movwf	212,c	;volatile
  3322                           
  3323                           ;timers.c: 19:     TMR0L = 0b11011100;
  3324   002012  0EDC               	movlw	220
  3325   002014  6ED3               	movwf	211,c	;volatile
  3326   002016                     
  3327                           ;timers.c: 35:     T0CON0bits.T0EN=1;
  3328   002016  8ED5               	bsf	213,7,c	;volatile
  3329   002018  0012               	return		;funcret
  3330   00201A                     __end_of_Timer0_init:
  3331                           	callstack 0
  3332                           
  3333 ;; *************** function _LEDarray_init *****************
  3334 ;; Defined at:
  3335 ;;		line 8 in file "LEDarray.c"
  3336 ;; Parameters:    Size  Location     Type
  3337 ;;		None
  3338 ;; Auto vars:     Size  Location     Type
  3339 ;;		None
  3340 ;; Return value:  Size  Location     Type
  3341 ;;                  1    wreg      void 
  3342 ;; Registers used:
  3343 ;;		None
  3344 ;; Tracked objects:
  3345 ;;		On entry : 0/0
  3346 ;;		On exit  : 0/0
  3347 ;;		Unchanged: 0/0
  3348 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3349 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3350 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3351 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3352 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3353 ;;Total ram usage:        0 bytes
  3354 ;; Hardware stack levels used: 1
  3355 ;; Hardware stack levels required when called: 1
  3356 ;; This function calls:
  3357 ;;		Nothing
  3358 ;; This function is called by:
  3359 ;;		_main
  3360 ;; This function uses a non-reentrant model
  3361 ;;
  3362                           
  3363                           	psect	text16
  3364   001FB0                     __ptext16:
  3365                           	callstack 0
  3366   001FB0                     _LEDarray_init:
  3367                           	callstack 29
  3368   001FB0                     
  3369                           ;LEDarray.c: 16:     TRISGbits.TRISG0 = 0;
  3370   001FB0  9087               	bcf	135,0,c	;volatile
  3371                           
  3372                           ;LEDarray.c: 17:     LATGbits.LATG0 = 0;
  3373   001FB2  907F               	bcf	127,0,c	;volatile
  3374                           
  3375                           ;LEDarray.c: 19:     TRISGbits.TRISG1 = 0;
  3376   001FB4  9287               	bcf	135,1,c	;volatile
  3377                           
  3378                           ;LEDarray.c: 20:     LATGbits.LATG1 = 0;
  3379   001FB6  927F               	bcf	127,1,c	;volatile
  3380                           
  3381                           ;LEDarray.c: 22:     TRISAbits.TRISA2 = 0;
  3382   001FB8  9481               	bcf	129,2,c	;volatile
  3383                           
  3384                           ;LEDarray.c: 23:     LATAbits.LATA2 = 0;
  3385   001FBA  9479               	bcf	121,2,c	;volatile
  3386                           
  3387                           ;LEDarray.c: 25:     TRISFbits.TRISF6 = 0;
  3388   001FBC  9C86               	bcf	134,6,c	;volatile
  3389                           
  3390                           ;LEDarray.c: 26:     LATFbits.LATF6 = 0;
  3391   001FBE  9C7E               	bcf	126,6,c	;volatile
  3392                           
  3393                           ;LEDarray.c: 28:     TRISAbits.TRISA4 = 0;
  3394   001FC0  9881               	bcf	129,4,c	;volatile
  3395                           
  3396                           ;LEDarray.c: 29:     LATAbits.LATA4 = 0;
  3397   001FC2  9879               	bcf	121,4,c	;volatile
  3398                           
  3399                           ;LEDarray.c: 31:     TRISAbits.TRISA5 = 0;
  3400   001FC4  9A81               	bcf	129,5,c	;volatile
  3401                           
  3402                           ;LEDarray.c: 32:     LATAbits.LATA5 = 0;
  3403   001FC6  9A79               	bcf	121,5,c	;volatile
  3404                           
  3405                           ;LEDarray.c: 34:     TRISFbits.TRISF0 = 0;
  3406   001FC8  9086               	bcf	134,0,c	;volatile
  3407                           
  3408                           ;LEDarray.c: 35:     LATFbits.LATF0 = 0;
  3409   001FCA  907E               	bcf	126,0,c	;volatile
  3410                           
  3411                           ;LEDarray.c: 37:     TRISBbits.TRISB0 = 0;
  3412   001FCC  9082               	bcf	130,0,c	;volatile
  3413                           
  3414                           ;LEDarray.c: 38:     LATBbits.LATB0 = 0;
  3415   001FCE  907A               	bcf	122,0,c	;volatile
  3416                           
  3417                           ;LEDarray.c: 40:     TRISBbits.TRISB1 = 0;
  3418   001FD0  9282               	bcf	130,1,c	;volatile
  3419                           
  3420                           ;LEDarray.c: 41:     LATBbits.LATB1 = 0;
  3421   001FD2  927A               	bcf	122,1,c	;volatile
  3422   001FD4  0012               	return		;funcret
  3423   001FD6                     __end_of_LEDarray_init:
  3424                           	callstack 0
  3425                           
  3426 ;; *************** function _LEDarray_disp_bin *****************
  3427 ;; Defined at:
  3428 ;;		line 49 in file "LEDarray.c"
  3429 ;; Parameters:    Size  Location     Type
  3430 ;;  number          2    0[COMRAM] unsigned int 
  3431 ;; Auto vars:     Size  Location     Type
  3432 ;;		None
  3433 ;; Return value:  Size  Location     Type
  3434 ;;                  1    wreg      void 
  3435 ;; Registers used:
  3436 ;;		None
  3437 ;; Tracked objects:
  3438 ;;		On entry : 0/0
  3439 ;;		On exit  : 0/0
  3440 ;;		Unchanged: 0/0
  3441 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3442 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3443 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3444 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3445 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3446 ;;Total ram usage:        2 bytes
  3447 ;; Hardware stack levels used: 1
  3448 ;; Hardware stack levels required when called: 1
  3449 ;; This function calls:
  3450 ;;		Nothing
  3451 ;; This function is called by:
  3452 ;;		_main
  3453 ;; This function uses a non-reentrant model
  3454 ;;
  3455                           
  3456                           	psect	text17
  3457   0018FC                     __ptext17:
  3458                           	callstack 0
  3459   0018FC                     _LEDarray_disp_bin:
  3460                           	callstack 29
  3461   0018FC                     
  3462                           ;LEDarray.c: 49: void LEDarray_disp_bin(unsigned int number);LEDarray.c: 50: {;LEDarray.
      +                          c: 53:     if (number & 0b000000001){ LATGbits.LATG0 = 1 ; }
  3463   0018FC  A001               	btfss	LEDarray_disp_bin@number^0,0,c
  3464   0018FE  EF83  F00C         	goto	u2051
  3465   001902  EF85  F00C         	goto	u2050
  3466   001906                     u2051:
  3467   001906  EF88  F00C         	goto	l123
  3468   00190A                     u2050:
  3469   00190A  807F               	bsf	127,0,c	;volatile
  3470   00190C  EF89  F00C         	goto	l124
  3471   001910                     l123:
  3472   001910  907F               	bcf	127,0,c	;volatile
  3473   001912                     l124:
  3474                           
  3475                           ;LEDarray.c: 56:     if (number & 0b000000010){ LATGbits.LATG1 = 1 ; }
  3476   001912  A201               	btfss	LEDarray_disp_bin@number^0,1,c
  3477   001914  EF8E  F00C         	goto	u2061
  3478   001918  EF90  F00C         	goto	u2060
  3479   00191C                     u2061:
  3480   00191C  EF93  F00C         	goto	l125
  3481   001920                     u2060:
  3482   001920  827F               	bsf	127,1,c	;volatile
  3483   001922  EF94  F00C         	goto	l126
  3484   001926                     l125:
  3485   001926  927F               	bcf	127,1,c	;volatile
  3486   001928                     l126:
  3487                           
  3488                           ;LEDarray.c: 59:     if (number & 0b000000100){ LATAbits.LATA2 = 1 ; }
  3489   001928  A401               	btfss	LEDarray_disp_bin@number^0,2,c
  3490   00192A  EF99  F00C         	goto	u2071
  3491   00192E  EF9B  F00C         	goto	u2070
  3492   001932                     u2071:
  3493   001932  EF9E  F00C         	goto	l127
  3494   001936                     u2070:
  3495   001936  8479               	bsf	121,2,c	;volatile
  3496   001938  EF9F  F00C         	goto	l128
  3497   00193C                     l127:
  3498   00193C  9479               	bcf	121,2,c	;volatile
  3499   00193E                     l128:
  3500                           
  3501                           ;LEDarray.c: 62:     if (number & 0b000001000){ LATFbits.LATF6 = 1 ; }
  3502   00193E  A601               	btfss	LEDarray_disp_bin@number^0,3,c
  3503   001940  EFA4  F00C         	goto	u2081
  3504   001944  EFA6  F00C         	goto	u2080
  3505   001948                     u2081:
  3506   001948  EFA9  F00C         	goto	l129
  3507   00194C                     u2080:
  3508   00194C  8C7E               	bsf	126,6,c	;volatile
  3509   00194E  EFAA  F00C         	goto	l130
  3510   001952                     l129:
  3511   001952  9C7E               	bcf	126,6,c	;volatile
  3512   001954                     l130:
  3513                           
  3514                           ;LEDarray.c: 65:     if (number & 0b000010000){ LATAbits.LATA4 = 1 ; }
  3515   001954  A801               	btfss	LEDarray_disp_bin@number^0,4,c
  3516   001956  EFAF  F00C         	goto	u2091
  3517   00195A  EFB1  F00C         	goto	u2090
  3518   00195E                     u2091:
  3519   00195E  EFB4  F00C         	goto	l131
  3520   001962                     u2090:
  3521   001962  8879               	bsf	121,4,c	;volatile
  3522   001964  EFB5  F00C         	goto	l132
  3523   001968                     l131:
  3524   001968  9879               	bcf	121,4,c	;volatile
  3525   00196A                     l132:
  3526                           
  3527                           ;LEDarray.c: 68:     if (number & 0b000100000){ LATAbits.LATA5 = 1 ; }
  3528   00196A  AA01               	btfss	LEDarray_disp_bin@number^0,5,c
  3529   00196C  EFBA  F00C         	goto	u2101
  3530   001970  EFBC  F00C         	goto	u2100
  3531   001974                     u2101:
  3532   001974  EFBF  F00C         	goto	l133
  3533   001978                     u2100:
  3534   001978  8A79               	bsf	121,5,c	;volatile
  3535   00197A  EFC0  F00C         	goto	l134
  3536   00197E                     l133:
  3537   00197E  9A79               	bcf	121,5,c	;volatile
  3538   001980                     l134:
  3539                           
  3540                           ;LEDarray.c: 71:     if (number & 0b001000000){ LATFbits.LATF0 = 1 ; }
  3541   001980  AC01               	btfss	LEDarray_disp_bin@number^0,6,c
  3542   001982  EFC5  F00C         	goto	u2111
  3543   001986  EFC7  F00C         	goto	u2110
  3544   00198A                     u2111:
  3545   00198A  EFCA  F00C         	goto	l135
  3546   00198E                     u2110:
  3547   00198E  807E               	bsf	126,0,c	;volatile
  3548   001990  EFCB  F00C         	goto	l136
  3549   001994                     l135:
  3550   001994  907E               	bcf	126,0,c	;volatile
  3551   001996                     l136:
  3552                           
  3553                           ;LEDarray.c: 74:     if (number & 0b010000000){ LATBbits.LATB0 = 1 ; }
  3554   001996  AE01               	btfss	LEDarray_disp_bin@number^0,7,c
  3555   001998  EFD0  F00C         	goto	u2121
  3556   00199C  EFD2  F00C         	goto	u2120
  3557   0019A0                     u2121:
  3558   0019A0  EFD5  F00C         	goto	l137
  3559   0019A4                     u2120:
  3560   0019A4  807A               	bsf	122,0,c	;volatile
  3561   0019A6  EFD6  F00C         	goto	l138
  3562   0019AA                     l137:
  3563   0019AA  907A               	bcf	122,0,c	;volatile
  3564   0019AC                     l138:
  3565                           
  3566                           ;LEDarray.c: 77:     if (number & 0b100000000){ LATBbits.LATB1 = 1 ; }
  3567   0019AC  A002               	btfss	(LEDarray_disp_bin@number+1)^0,0,c
  3568   0019AE  EFDB  F00C         	goto	u2131
  3569   0019B2  EFDD  F00C         	goto	u2130
  3570   0019B6                     u2131:
  3571   0019B6  EFE0  F00C         	goto	l139
  3572   0019BA                     u2130:
  3573   0019BA  827A               	bsf	122,1,c	;volatile
  3574   0019BC  EFE1  F00C         	goto	l141
  3575   0019C0                     l139:
  3576   0019C0  927A               	bcf	122,1,c	;volatile
  3577   0019C2                     l141:
  3578   0019C2  0012               	return		;funcret
  3579   0019C4                     __end_of_LEDarray_disp_bin:
  3580                           	callstack 0
  3581                           
  3582 ;; *************** function _LCD_setline *****************
  3583 ;; Defined at:
  3584 ;;		line 120 in file "LCD.c"
  3585 ;; Parameters:    Size  Location     Type
  3586 ;;  line            1    wreg     unsigned char 
  3587 ;; Auto vars:     Size  Location     Type
  3588 ;;  line            1    3[COMRAM] unsigned char 
  3589 ;; Return value:  Size  Location     Type
  3590 ;;                  1    wreg      void 
  3591 ;; Registers used:
  3592 ;;		wreg, status,2, status,0, cstack
  3593 ;; Tracked objects:
  3594 ;;		On entry : 0/0
  3595 ;;		On exit  : 0/0
  3596 ;;		Unchanged: 0/0
  3597 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3598 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3599 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3600 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3601 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3602 ;;Total ram usage:        1 bytes
  3603 ;; Hardware stack levels used: 1
  3604 ;; Hardware stack levels required when called: 4
  3605 ;; This function calls:
  3606 ;;		_LCD_sendbyte
  3607 ;; This function is called by:
  3608 ;;		_main
  3609 ;; This function uses a non-reentrant model
  3610 ;;
  3611                           
  3612                           	psect	text18
  3613   001EBA                     __ptext18:
  3614                           	callstack 0
  3615   001EBA                     _LCD_setline:
  3616                           	callstack 26
  3617                           
  3618                           ;incstack = 0
  3619                           ;LCD_setline@line stored from wreg
  3620   001EBA  6E04               	movwf	LCD_setline@line^0,c
  3621   001EBC                     
  3622                           ;LCD.c: 120: void LCD_setline (char line);LCD.c: 121: {;LCD.c: 124:     if (line == 2){
  3623   001EBC  0E02               	movlw	2
  3624   001EBE  1804               	xorwf	LCD_setline@line^0,w,c
  3625   001EC0  A4D8               	btfss	status,2,c
  3626   001EC2  EF65  F00F         	goto	u2141
  3627   001EC6  EF67  F00F         	goto	u2140
  3628   001ECA                     u2141:
  3629   001ECA  EF6C  F00F         	goto	l2389
  3630   001ECE                     u2140:
  3631   001ECE                     
  3632                           ;LCD.c: 125:         LCD_sendbyte(0xC0,0);
  3633   001ECE  0E00               	movlw	0
  3634   001ED0  6E02               	movwf	LCD_sendbyte@type^0,c
  3635   001ED2  0EC0               	movlw	192
  3636   001ED4  ECEB  F00F         	call	_LCD_sendbyte
  3637   001ED8                     l2389:
  3638                           
  3639                           ;LCD.c: 128:     if (line==1){
  3640   001ED8  0404               	decf	LCD_setline@line^0,w,c
  3641   001EDA  A4D8               	btfss	status,2,c
  3642   001EDC  EF72  F00F         	goto	u2151
  3643   001EE0  EF74  F00F         	goto	u2150
  3644   001EE4                     u2151:
  3645   001EE4  EF79  F00F         	goto	l296
  3646   001EE8                     u2150:
  3647   001EE8                     
  3648                           ;LCD.c: 129:         LCD_sendbyte(0x80,0);
  3649   001EE8  0E00               	movlw	0
  3650   001EEA  6E02               	movwf	LCD_sendbyte@type^0,c
  3651   001EEC  0E80               	movlw	128
  3652   001EEE  ECEB  F00F         	call	_LCD_sendbyte
  3653   001EF2                     l296:
  3654   001EF2  0012               	return		;funcret
  3655   001EF4                     __end_of_LCD_setline:
  3656                           	callstack 0
  3657                           
  3658 ;; *************** function _LCD_sendstring *****************
  3659 ;; Defined at:
  3660 ;;		line 136 in file "LCD.c"
  3661 ;; Parameters:    Size  Location     Type
  3662 ;;  string          1    3[COMRAM] PTR unsigned char 
  3663 ;;		 -> main@buffer(18), 
  3664 ;; Auto vars:     Size  Location     Type
  3665 ;;		None
  3666 ;; Return value:  Size  Location     Type
  3667 ;;                  1    wreg      void 
  3668 ;; Registers used:
  3669 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3670 ;; Tracked objects:
  3671 ;;		On entry : 0/0
  3672 ;;		On exit  : 0/0
  3673 ;;		Unchanged: 0/0
  3674 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3675 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3676 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3677 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3678 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3679 ;;Total ram usage:        1 bytes
  3680 ;; Hardware stack levels used: 1
  3681 ;; Hardware stack levels required when called: 4
  3682 ;; This function calls:
  3683 ;;		_LCD_sendbyte
  3684 ;; This function is called by:
  3685 ;;		_main
  3686 ;;		_ADC2String
  3687 ;; This function uses a non-reentrant model
  3688 ;;
  3689                           
  3690                           	psect	text19
  3691   001F5C                     __ptext19:
  3692                           	callstack 0
  3693   001F5C                     _LCD_sendstring:
  3694                           	callstack 26
  3695   001F5C                     
  3696                           ;LCD.c: 136: void LCD_sendstring(char *string);LCD.c: 137: {;LCD.c: 139:     while(*stri
      +                          ng != 0){
  3697   001F5C  EFB9  F00F         	goto	l2411
  3698   001F60                     l2407:
  3699                           
  3700                           ;LCD.c: 140:   LCD_sendbyte(*string++,1);
  3701   001F60  0E01               	movlw	1
  3702   001F62  6E02               	movwf	LCD_sendbyte@type^0,c
  3703   001F64  5004               	movf	LCD_sendstring@string^0,w,c
  3704   001F66  6ED9               	movwf	fsr2l,c
  3705   001F68  6ADA               	clrf	fsr2h,c
  3706   001F6A  50DF               	movf	indf2,w,c
  3707   001F6C  ECEB  F00F         	call	_LCD_sendbyte
  3708   001F70  2A04               	incf	LCD_sendstring@string^0,f,c
  3709   001F72                     l2411:
  3710                           
  3711                           ;LCD.c: 139:     while(*string != 0){
  3712   001F72  5004               	movf	LCD_sendstring@string^0,w,c
  3713   001F74  6ED9               	movwf	fsr2l,c
  3714   001F76  6ADA               	clrf	fsr2h,c
  3715   001F78  50DF               	movf	indf2,w,c
  3716   001F7A  A4D8               	btfss	status,2,c
  3717   001F7C  EFC2  F00F         	goto	u2161
  3718   001F80  EFC4  F00F         	goto	u2160
  3719   001F84                     u2161:
  3720   001F84  EFB0  F00F         	goto	l2407
  3721   001F88                     u2160:
  3722   001F88  0012               	return		;funcret
  3723   001F8A                     __end_of_LCD_sendstring:
  3724                           	callstack 0
  3725                           
  3726 ;; *************** function _LCD_Init *****************
  3727 ;; Defined at:
  3728 ;;		line 57 in file "LCD.c"
  3729 ;; Parameters:    Size  Location     Type
  3730 ;;		None
  3731 ;; Auto vars:     Size  Location     Type
  3732 ;;		None
  3733 ;; Return value:  Size  Location     Type
  3734 ;;                  1    wreg      void 
  3735 ;; Registers used:
  3736 ;;		wreg, status,2, status,0, cstack
  3737 ;; Tracked objects:
  3738 ;;		On entry : 0/0
  3739 ;;		On exit  : 0/0
  3740 ;;		Unchanged: 0/0
  3741 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3742 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3743 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3744 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3745 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3746 ;;Total ram usage:        2 bytes
  3747 ;; Hardware stack levels used: 1
  3748 ;; Hardware stack levels required when called: 4
  3749 ;; This function calls:
  3750 ;;		_LCD_sendbyte
  3751 ;;		_LCD_sendnibble
  3752 ;; This function is called by:
  3753 ;;		_main
  3754 ;; This function uses a non-reentrant model
  3755 ;;
  3756                           
  3757                           	psect	text20
  3758   0017DC                     __ptext20:
  3759                           	callstack 0
  3760   0017DC                     _LCD_Init:
  3761                           	callstack 26
  3762   0017DC                     
  3763                           ;LCD.c: 69:     TRISBbits.TRISB3 = 0;
  3764   0017DC  9682               	bcf	130,3,c	;volatile
  3765                           
  3766                           ;LCD.c: 71:     LATBbits.LATB3 = 0;
  3767   0017DE  967A               	bcf	122,3,c	;volatile
  3768                           
  3769                           ;LCD.c: 73:     TRISBbits.TRISB2 = 0;
  3770   0017E0  9482               	bcf	130,2,c	;volatile
  3771                           
  3772                           ;LCD.c: 75:     LATBbits.LATB2 = 0;
  3773   0017E2  947A               	bcf	122,2,c	;volatile
  3774                           
  3775                           ;LCD.c: 77:     TRISEbits.TRISE3 = 0;
  3776   0017E4  9685               	bcf	133,3,c	;volatile
  3777                           
  3778                           ;LCD.c: 79:     LATEbits.LATE3 = 0;
  3779   0017E6  967D               	bcf	125,3,c	;volatile
  3780                           
  3781                           ;LCD.c: 81:     TRISEbits.TRISE1 = 0;
  3782   0017E8  9285               	bcf	133,1,c	;volatile
  3783                           
  3784                           ;LCD.c: 83:     LATEbits.LATE1 = 0;
  3785   0017EA  927D               	bcf	125,1,c	;volatile
  3786                           
  3787                           ;LCD.c: 85:     TRISCbits.TRISC2 = 0;
  3788   0017EC  9483               	bcf	131,2,c	;volatile
  3789                           
  3790                           ;LCD.c: 86:     LATCbits.LATC2 = 0;
  3791   0017EE  947B               	bcf	123,2,c	;volatile
  3792                           
  3793                           ;LCD.c: 88:     TRISCbits.TRISC6 = 0;
  3794   0017F0  9C83               	bcf	131,6,c	;volatile
  3795                           
  3796                           ;LCD.c: 89:     LATCbits.LATC6 = 0;
  3797   0017F2  9C7B               	bcf	123,6,c	;volatile
  3798   0017F4                     
  3799                           ;LCD.c: 91:     _delay((unsigned long)((150)*(64000000/4000.0)));
  3800   0017F4  0E0D               	movlw	13
  3801   0017F6  6E05               	movwf	(??_LCD_Init+1)^0,c
  3802   0017F8  0E2D               	movlw	45
  3803   0017FA  6E04               	movwf	??_LCD_Init^0,c
  3804   0017FC  0ED8               	movlw	216
  3805   0017FE                     u2787:
  3806   0017FE  2EE8               	decfsz	wreg,f,c
  3807   001800  D7FE               	bra	u2787
  3808   001802  2E04               	decfsz	??_LCD_Init^0,f,c
  3809   001804  D7FC               	bra	u2787
  3810   001806  2E05               	decfsz	(??_LCD_Init+1)^0,f,c
  3811   001808  D7FA               	bra	u2787
  3812   00180A                     
  3813                           ;LCD.c: 92:     LCD_sendnibble(0b0011);
  3814   00180A  0E03               	movlw	3
  3815   00180C  EC91  F00E         	call	_LCD_sendnibble
  3816   001810                     
  3817                           ;LCD.c: 93:     _delay((unsigned long)((5)*(64000000/4000.0)));
  3818   001810  0E68               	movlw	104
  3819   001812  6E04               	movwf	??_LCD_Init^0,c
  3820   001814  0EE4               	movlw	228
  3821   001816                     u2797:
  3822   001816  2EE8               	decfsz	wreg,f,c
  3823   001818  D7FE               	bra	u2797
  3824   00181A  2E04               	decfsz	??_LCD_Init^0,f,c
  3825   00181C  D7FC               	bra	u2797
  3826   00181E  D000               	nop2	
  3827                           
  3828                           ;LCD.c: 94:     LCD_sendnibble(0b0011);
  3829   001820  0E03               	movlw	3
  3830   001822  EC91  F00E         	call	_LCD_sendnibble
  3831   001826                     
  3832                           ;LCD.c: 95:     _delay((unsigned long)((150)*(64000000/4000000.0)));
  3833   001826  0E04               	movlw	4
  3834   001828  6E04               	movwf	??_LCD_Init^0,c
  3835   00182A  0E1C               	movlw	28
  3836   00182C                     u2807:
  3837   00182C  2EE8               	decfsz	wreg,f,c
  3838   00182E  D7FE               	bra	u2807
  3839   001830  2E04               	decfsz	??_LCD_Init^0,f,c
  3840   001832  D7FC               	bra	u2807
  3841   001834  D000               	nop2	
  3842   001836                     
  3843                           ;LCD.c: 96:     LCD_sendnibble(0b0011);
  3844   001836  0E03               	movlw	3
  3845   001838  EC91  F00E         	call	_LCD_sendnibble
  3846                           
  3847                           ;LCD.c: 97:     _delay((unsigned long)((150)*(64000000/4000000.0)));
  3848   00183C  0E04               	movlw	4
  3849   00183E  6E04               	movwf	??_LCD_Init^0,c
  3850   001840  0E1C               	movlw	28
  3851   001842                     u2817:
  3852   001842  2EE8               	decfsz	wreg,f,c
  3853   001844  D7FE               	bra	u2817
  3854   001846  2E04               	decfsz	??_LCD_Init^0,f,c
  3855   001848  D7FC               	bra	u2817
  3856   00184A  D000               	nop2	
  3857   00184C                     
  3858                           ;LCD.c: 98:     LCD_sendnibble(0b0010);
  3859   00184C  0E02               	movlw	2
  3860   00184E  EC91  F00E         	call	_LCD_sendnibble
  3861   001852                     
  3862                           ;LCD.c: 99:     _delay((unsigned long)((150)*(64000000/4000000.0)));
  3863   001852  0E04               	movlw	4
  3864   001854  6E04               	movwf	??_LCD_Init^0,c
  3865   001856  0E1C               	movlw	28
  3866   001858                     u2827:
  3867   001858  2EE8               	decfsz	wreg,f,c
  3868   00185A  D7FE               	bra	u2827
  3869   00185C  2E04               	decfsz	??_LCD_Init^0,f,c
  3870   00185E  D7FC               	bra	u2827
  3871   001860  D000               	nop2	
  3872   001862                     
  3873                           ;LCD.c: 100:     LCD_sendbyte(0b00101100,0);
  3874   001862  0E00               	movlw	0
  3875   001864  6E02               	movwf	LCD_sendbyte@type^0,c
  3876   001866  0E2C               	movlw	44
  3877   001868  ECEB  F00F         	call	_LCD_sendbyte
  3878   00186C                     
  3879                           ;LCD.c: 101:     _delay((unsigned long)((100)*(64000000/4000000.0)));
  3880   00186C  0EE4               	movlw	228
  3881   00186E                     u2837:
  3882   00186E  D000               	nop2	
  3883   001870  D000               	nop2	
  3884   001872  2EE8               	decfsz	wreg,f,c
  3885   001874  D7FC               	bra	u2837
  3886   001876  D000               	nop2	
  3887   001878  D000               	nop2	
  3888   00187A                     
  3889                           ;LCD.c: 102:     LCD_sendbyte(0b00001000,0);
  3890   00187A  0E00               	movlw	0
  3891   00187C  6E02               	movwf	LCD_sendbyte@type^0,c
  3892   00187E  0E08               	movlw	8
  3893   001880  ECEB  F00F         	call	_LCD_sendbyte
  3894   001884                     
  3895                           ;LCD.c: 103:     _delay((unsigned long)((100)*(64000000/4000.0)));
  3896   001884  0E09               	movlw	9
  3897   001886  6E05               	movwf	(??_LCD_Init+1)^0,c
  3898   001888  0E1E               	movlw	30
  3899   00188A  6E04               	movwf	??_LCD_Init^0,c
  3900   00188C  0EE4               	movlw	228
  3901   00188E                     u2847:
  3902   00188E  2EE8               	decfsz	wreg,f,c
  3903   001890  D7FE               	bra	u2847
  3904   001892  2E04               	decfsz	??_LCD_Init^0,f,c
  3905   001894  D7FC               	bra	u2847
  3906   001896  2E05               	decfsz	(??_LCD_Init+1)^0,f,c
  3907   001898  D7FA               	bra	u2847
  3908   00189A  D000               	nop2	
  3909   00189C                     
  3910                           ;LCD.c: 104:     LCD_sendbyte(0b00000001,0);
  3911   00189C  0E00               	movlw	0
  3912   00189E  6E02               	movwf	LCD_sendbyte@type^0,c
  3913   0018A0  0E01               	movlw	1
  3914   0018A2  ECEB  F00F         	call	_LCD_sendbyte
  3915   0018A6                     
  3916                           ;LCD.c: 105:     _delay((unsigned long)((5)*(64000000/4000.0)));
  3917   0018A6  0E68               	movlw	104
  3918   0018A8  6E04               	movwf	??_LCD_Init^0,c
  3919   0018AA  0EE4               	movlw	228
  3920   0018AC                     u2857:
  3921   0018AC  2EE8               	decfsz	wreg,f,c
  3922   0018AE  D7FE               	bra	u2857
  3923   0018B0  2E04               	decfsz	??_LCD_Init^0,f,c
  3924   0018B2  D7FC               	bra	u2857
  3925   0018B4  D000               	nop2	
  3926   0018B6                     
  3927                           ;LCD.c: 106:     LCD_sendbyte(0b00000110,0);
  3928   0018B6  0E00               	movlw	0
  3929   0018B8  6E02               	movwf	LCD_sendbyte@type^0,c
  3930   0018BA  0E06               	movlw	6
  3931   0018BC  ECEB  F00F         	call	_LCD_sendbyte
  3932   0018C0                     
  3933                           ;LCD.c: 107:     _delay((unsigned long)((100)*(64000000/4000.0)));
  3934   0018C0  0E09               	movlw	9
  3935   0018C2  6E05               	movwf	(??_LCD_Init+1)^0,c
  3936   0018C4  0E1E               	movlw	30
  3937   0018C6  6E04               	movwf	??_LCD_Init^0,c
  3938   0018C8  0EE4               	movlw	228
  3939   0018CA                     u2867:
  3940   0018CA  2EE8               	decfsz	wreg,f,c
  3941   0018CC  D7FE               	bra	u2867
  3942   0018CE  2E04               	decfsz	??_LCD_Init^0,f,c
  3943   0018D0  D7FC               	bra	u2867
  3944   0018D2  2E05               	decfsz	(??_LCD_Init+1)^0,f,c
  3945   0018D4  D7FA               	bra	u2867
  3946   0018D6  D000               	nop2	
  3947   0018D8                     
  3948                           ;LCD.c: 108:     LCD_sendbyte(0b00001100,0);
  3949   0018D8  0E00               	movlw	0
  3950   0018DA  6E02               	movwf	LCD_sendbyte@type^0,c
  3951   0018DC  0E0C               	movlw	12
  3952   0018DE  ECEB  F00F         	call	_LCD_sendbyte
  3953   0018E2                     
  3954                           ;LCD.c: 109:     _delay((unsigned long)((100)*(64000000/4000.0)));
  3955   0018E2  0E09               	movlw	9
  3956   0018E4  6E05               	movwf	(??_LCD_Init+1)^0,c
  3957   0018E6  0E1E               	movlw	30
  3958   0018E8  6E04               	movwf	??_LCD_Init^0,c
  3959   0018EA  0EE4               	movlw	228
  3960   0018EC                     u2877:
  3961   0018EC  2EE8               	decfsz	wreg,f,c
  3962   0018EE  D7FE               	bra	u2877
  3963   0018F0  2E04               	decfsz	??_LCD_Init^0,f,c
  3964   0018F2  D7FC               	bra	u2877
  3965   0018F4  2E05               	decfsz	(??_LCD_Init+1)^0,f,c
  3966   0018F6  D7FA               	bra	u2877
  3967   0018F8  D000               	nop2	
  3968   0018FA  0012               	return		;funcret
  3969   0018FC                     __end_of_LCD_Init:
  3970                           	callstack 0
  3971                           
  3972 ;; *************** function _LCD_sendbyte *****************
  3973 ;; Defined at:
  3974 ;;		line 40 in file "LCD.c"
  3975 ;; Parameters:    Size  Location     Type
  3976 ;;  Byte            1    wreg     unsigned char 
  3977 ;;  type            1    1[COMRAM] unsigned char 
  3978 ;; Auto vars:     Size  Location     Type
  3979 ;;  Byte            1    2[COMRAM] unsigned char 
  3980 ;; Return value:  Size  Location     Type
  3981 ;;                  1    wreg      void 
  3982 ;; Registers used:
  3983 ;;		wreg, status,2, status,0, cstack
  3984 ;; Tracked objects:
  3985 ;;		On entry : 0/0
  3986 ;;		On exit  : 0/0
  3987 ;;		Unchanged: 0/0
  3988 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3989 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3990 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3991 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3992 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3993 ;;Total ram usage:        2 bytes
  3994 ;; Hardware stack levels used: 1
  3995 ;; Hardware stack levels required when called: 3
  3996 ;; This function calls:
  3997 ;;		_LCD_sendnibble
  3998 ;; This function is called by:
  3999 ;;		_LCD_Init
  4000 ;;		_LCD_setline
  4001 ;;		_LCD_sendstring
  4002 ;;		_LCD_scroll
  4003 ;; This function uses a non-reentrant model
  4004 ;;
  4005                           
  4006                           	psect	text21
  4007   001FD6                     __ptext21:
  4008                           	callstack 0
  4009   001FD6                     _LCD_sendbyte:
  4010                           	callstack 26
  4011                           
  4012                           ;incstack = 0
  4013                           ;LCD_sendbyte@Byte stored from wreg
  4014   001FD6  6E03               	movwf	LCD_sendbyte@Byte^0,c
  4015   001FD8                     
  4016                           ;LCD.c: 40: void LCD_sendbyte(unsigned char Byte, char type);LCD.c: 41: {;LCD.c: 42:    
      +                           LATCbits.LATC6 = type;
  4017   001FD8  B002               	btfsc	LCD_sendbyte@type^0,0,c
  4018   001FDA  D002               	bra	u1775
  4019   001FDC  9C7B               	bcf	123,6,c	;volatile
  4020   001FDE  D001               	bra	u1776
  4021   001FE0                     u1775:
  4022   001FE0  8C7B               	bsf	123,6,c	;volatile
  4023   001FE2                     u1776:
  4024   001FE2                     
  4025                           ;LCD.c: 44:     LCD_sendnibble(Byte>>4);
  4026   001FE2  3803               	swapf	LCD_sendbyte@Byte^0,w,c
  4027   001FE4  0B0F               	andlw	15
  4028   001FE6  EC91  F00E         	call	_LCD_sendnibble
  4029   001FEA                     
  4030                           ;LCD.c: 45:     LCD_sendnibble(Byte);
  4031   001FEA  5003               	movf	LCD_sendbyte@Byte^0,w,c
  4032   001FEC  EC91  F00E         	call	_LCD_sendnibble
  4033   001FF0                     
  4034                           ;LCD.c: 51:     _delay((unsigned long)((50)*(64000000/4000000.0)));
  4035   001FF0  0EA0               	movlw	160
  4036   001FF2                     u2887:
  4037   001FF2  D000               	nop2	
  4038   001FF4  2EE8               	decfsz	wreg,f,c
  4039   001FF6  D7FD               	bra	u2887
  4040   001FF8  0012               	return		;funcret
  4041   001FFA                     __end_of_LCD_sendbyte:
  4042                           	callstack 0
  4043                           
  4044 ;; *************** function _LCD_sendnibble *****************
  4045 ;; Defined at:
  4046 ;;		line 22 in file "LCD.c"
  4047 ;; Parameters:    Size  Location     Type
  4048 ;;  number          1    wreg     unsigned char 
  4049 ;; Auto vars:     Size  Location     Type
  4050 ;;  number          1    0[COMRAM] unsigned char 
  4051 ;; Return value:  Size  Location     Type
  4052 ;;                  1    wreg      void 
  4053 ;; Registers used:
  4054 ;;		wreg, cstack
  4055 ;; Tracked objects:
  4056 ;;		On entry : 0/0
  4057 ;;		On exit  : 0/0
  4058 ;;		Unchanged: 0/0
  4059 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4060 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4061 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4062 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4063 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4064 ;;Total ram usage:        1 bytes
  4065 ;; Hardware stack levels used: 1
  4066 ;; Hardware stack levels required when called: 2
  4067 ;; This function calls:
  4068 ;;		_LCD_E_TOG
  4069 ;; This function is called by:
  4070 ;;		_LCD_sendbyte
  4071 ;;		_LCD_Init
  4072 ;; This function uses a non-reentrant model
  4073 ;;
  4074                           
  4075                           	psect	text22
  4076   001D22                     __ptext22:
  4077                           	callstack 0
  4078   001D22                     _LCD_sendnibble:
  4079                           	callstack 26
  4080                           
  4081                           ;incstack = 0
  4082                           ;LCD_sendnibble@number stored from wreg
  4083   001D22  6E01               	movwf	LCD_sendnibble@number^0,c
  4084   001D24                     
  4085                           ;LCD.c: 22: void LCD_sendnibble(unsigned char number);LCD.c: 23: {;LCD.c: 24:     if (nu
      +                          mber & 0b0001) {LATBbits.LATB3=1;} else {LATBbits.LATB3=0;}
  4086   001D24  A001               	btfss	LCD_sendnibble@number^0,0,c
  4087   001D26  EF97  F00E         	goto	u1681
  4088   001D2A  EF99  F00E         	goto	u1680
  4089   001D2E                     u1681:
  4090   001D2E  EF9C  F00E         	goto	l277
  4091   001D32                     u1680:
  4092   001D32  867A               	bsf	122,3,c	;volatile
  4093   001D34  EF9D  F00E         	goto	l2121
  4094   001D38                     l277:
  4095   001D38  967A               	bcf	122,3,c	;volatile
  4096   001D3A                     l2121:
  4097                           
  4098                           ;LCD.c: 25:     if (number & 0b0010) {LATBbits.LATB2=1;} else {LATBbits.LATB2=0;}
  4099   001D3A  A201               	btfss	LCD_sendnibble@number^0,1,c
  4100   001D3C  EFA2  F00E         	goto	u1691
  4101   001D40  EFA4  F00E         	goto	u1690
  4102   001D44                     u1691:
  4103   001D44  EFA7  F00E         	goto	l279
  4104   001D48                     u1690:
  4105   001D48  847A               	bsf	122,2,c	;volatile
  4106   001D4A  EFA8  F00E         	goto	l2125
  4107   001D4E                     l279:
  4108   001D4E  947A               	bcf	122,2,c	;volatile
  4109   001D50                     l2125:
  4110                           
  4111                           ;LCD.c: 26:     if (number & 0b0100) {LATEbits.LATE3=1;} else {LATEbits.LATE3=0;}
  4112   001D50  A401               	btfss	LCD_sendnibble@number^0,2,c
  4113   001D52  EFAD  F00E         	goto	u1701
  4114   001D56  EFAF  F00E         	goto	u1700
  4115   001D5A                     u1701:
  4116   001D5A  EFB2  F00E         	goto	l281
  4117   001D5E                     u1700:
  4118   001D5E  867D               	bsf	125,3,c	;volatile
  4119   001D60  EFB3  F00E         	goto	l2129
  4120   001D64                     l281:
  4121   001D64  967D               	bcf	125,3,c	;volatile
  4122   001D66                     l2129:
  4123                           
  4124                           ;LCD.c: 27:     if (number & 0b1000) {LATEbits.LATE1=1;} else {LATEbits.LATE1=0;}
  4125   001D66  A601               	btfss	LCD_sendnibble@number^0,3,c
  4126   001D68  EFB8  F00E         	goto	u1711
  4127   001D6C  EFBA  F00E         	goto	u1710
  4128   001D70                     u1711:
  4129   001D70  EFBD  F00E         	goto	l283
  4130   001D74                     u1710:
  4131   001D74  827D               	bsf	125,1,c	;volatile
  4132   001D76  EFBE  F00E         	goto	l2133
  4133   001D7A                     l283:
  4134   001D7A  927D               	bcf	125,1,c	;volatile
  4135   001D7C                     l2133:
  4136                           
  4137                           ;LCD.c: 31:     LCD_E_TOG();
  4138   001D7C  EC26  F010         	call	_LCD_E_TOG	;wreg free
  4139   001D80                     
  4140                           ;LCD.c: 32:     _delay((unsigned long)((5)*(64000000/4000000.0)));
  4141   001D80  0E1A               	movlw	26
  4142   001D82                     u2897:
  4143   001D82  2EE8               	decfsz	wreg,f,c
  4144   001D84  D7FE               	bra	u2897
  4145   001D86  D000               	nop2	
  4146   001D88  0012               	return		;funcret
  4147   001D8A                     __end_of_LCD_sendnibble:
  4148                           	callstack 0
  4149                           
  4150 ;; *************** function _LCD_E_TOG *****************
  4151 ;; Defined at:
  4152 ;;		line 10 in file "LCD.c"
  4153 ;; Parameters:    Size  Location     Type
  4154 ;;		None
  4155 ;; Auto vars:     Size  Location     Type
  4156 ;;		None
  4157 ;; Return value:  Size  Location     Type
  4158 ;;                  1    wreg      void 
  4159 ;; Registers used:
  4160 ;;		wreg
  4161 ;; Tracked objects:
  4162 ;;		On entry : 0/0
  4163 ;;		On exit  : 0/0
  4164 ;;		Unchanged: 0/0
  4165 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4166 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4167 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4168 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4169 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4170 ;;Total ram usage:        0 bytes
  4171 ;; Hardware stack levels used: 1
  4172 ;; Hardware stack levels required when called: 1
  4173 ;; This function calls:
  4174 ;;		Nothing
  4175 ;; This function is called by:
  4176 ;;		_LCD_sendnibble
  4177 ;; This function uses a non-reentrant model
  4178 ;;
  4179                           
  4180                           	psect	text23
  4181   00204C                     __ptext23:
  4182                           	callstack 0
  4183   00204C                     _LCD_E_TOG:
  4184                           	callstack 26
  4185   00204C                     
  4186                           ;LCD.c: 13:      LATCbits.LATC2 = 1;
  4187   00204C  847B               	bsf	123,2,c	;volatile
  4188   00204E                     
  4189                           ;LCD.c: 14:  _delay((unsigned long)((2)*(64000000/4000000.0)));
  4190   00204E  0E0A               	movlw	10
  4191   002050                     u2907:
  4192   002050  2EE8               	decfsz	wreg,f,c
  4193   002052  D7FE               	bra	u2907
  4194   002054  D000               	nop2	
  4195   002056                     
  4196                           ;LCD.c: 15:      LATCbits.LATC2 = 0;
  4197   002056  947B               	bcf	123,2,c	;volatile
  4198   002058  0012               	return		;funcret
  4199   00205A                     __end_of_LCD_E_TOG:
  4200                           	callstack 0
  4201                           
  4202 ;; *************** function _Interrupts_init *****************
  4203 ;; Defined at:
  4204 ;;		line 9 in file "interrupts.c"
  4205 ;; Parameters:    Size  Location     Type
  4206 ;;		None
  4207 ;; Auto vars:     Size  Location     Type
  4208 ;;		None
  4209 ;; Return value:  Size  Location     Type
  4210 ;;                  1    wreg      void 
  4211 ;; Registers used:
  4212 ;;		None
  4213 ;; Tracked objects:
  4214 ;;		On entry : 0/0
  4215 ;;		On exit  : 0/0
  4216 ;;		Unchanged: 0/0
  4217 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4218 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4219 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4220 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4221 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4222 ;;Total ram usage:        0 bytes
  4223 ;; Hardware stack levels used: 1
  4224 ;; Hardware stack levels required when called: 1
  4225 ;; This function calls:
  4226 ;;		Nothing
  4227 ;; This function is called by:
  4228 ;;		_main
  4229 ;; This function uses a non-reentrant model
  4230 ;;
  4231                           
  4232                           	psect	text24
  4233   00205A                     __ptext24:
  4234                           	callstack 0
  4235   00205A                     _Interrupts_init:
  4236                           	callstack 29
  4237   00205A                     
  4238                           ;interrupts.c: 15:   INTCONbits.PEIE = 1;
  4239   00205A  8CF2               	bsf	242,6,c	;volatile
  4240                           
  4241                           ;interrupts.c: 19:     PIE0bits.TMR0IE = 1;
  4242   00205C  010E               	movlb	14	; () banked
  4243   00205E  8B29               	bsf	41,5,b	;volatile
  4244                           
  4245                           ;interrupts.c: 20:     PIR0bits.TMR0IF = 0;
  4246   002060  9B33               	bcf	51,5,b	;volatile
  4247                           
  4248                           ;interrupts.c: 21:     IPR0bits.TMR0IP = 1;
  4249   002062  8B1F               	bsf	31,5,b	;volatile
  4250                           
  4251                           ;interrupts.c: 24:     INTCONbits.GIE=1;
  4252   002064  8EF2               	bsf	242,7,c	;volatile
  4253   002066                     
  4254                           ; BSR set to: 14
  4255   002066  0012               	return		;funcret
  4256   002068                     __end_of_Interrupts_init:
  4257                           	callstack 0
  4258                           
  4259 ;; *************** function _ADC_init *****************
  4260 ;; Defined at:
  4261 ;;		line 9 in file "ADC.c"
  4262 ;; Parameters:    Size  Location     Type
  4263 ;;		None
  4264 ;; Auto vars:     Size  Location     Type
  4265 ;;		None
  4266 ;; Return value:  Size  Location     Type
  4267 ;;                  1    wreg      void 
  4268 ;; Registers used:
  4269 ;;		wreg, status,2
  4270 ;; Tracked objects:
  4271 ;;		On entry : 0/0
  4272 ;;		On exit  : 0/0
  4273 ;;		Unchanged: 0/0
  4274 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4275 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4276 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4277 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4278 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4279 ;;Total ram usage:        0 bytes
  4280 ;; Hardware stack levels used: 1
  4281 ;; Hardware stack levels required when called: 1
  4282 ;; This function calls:
  4283 ;;		Nothing
  4284 ;; This function is called by:
  4285 ;;		_main
  4286 ;; This function uses a non-reentrant model
  4287 ;;
  4288                           
  4289                           	psect	text25
  4290   00201A                     __ptext25:
  4291                           	callstack 0
  4292   00201A                     _ADC_init:
  4293                           	callstack 29
  4294   00201A                     
  4295                           ;ADC.c: 11:     TRISAbits.TRISA3=1;
  4296   00201A  8681               	bsf	129,3,c	;volatile
  4297                           
  4298                           ;ADC.c: 12:     ANSELAbits.ANSELA3=1;
  4299   00201C  010E               	movlb	14	; () banked
  4300   00201E  8792               	bsf	146,3,b	;volatile
  4301                           
  4302                           ;ADC.c: 14:     ADREFbits.ADNREF = 0;
  4303   002020  010F               	movlb	15	; () banked
  4304   002022  9958               	bcf	88,4,b	;volatile
  4305   002024                     
  4306                           ; BSR set to: 15
  4307                           ;ADC.c: 15:     ADREFbits.ADPREF = 0b00;
  4308   002024  0EFC               	movlw	-4
  4309   002026  1758               	andwf	88,f,b	;volatile
  4310                           
  4311                           ;ADC.c: 16:     ADPCH=0b11;
  4312   002028  0E03               	movlw	3
  4313   00202A  6F5F               	movwf	95,b	;volatile
  4314   00202C                     
  4315                           ; BSR set to: 15
  4316                           ;ADC.c: 17:     ADCON0bits.ADFM = 0;
  4317   00202C  9460               	bcf	96,2,c	;volatile
  4318   00202E                     
  4319                           ; BSR set to: 15
  4320                           ;ADC.c: 18:     ADCON0bits.ADCS = 1;
  4321   00202E  8860               	bsf	96,4,c	;volatile
  4322   002030                     
  4323                           ; BSR set to: 15
  4324                           ;ADC.c: 19:     ADCON0bits.ADON = 1;
  4325   002030  8E60               	bsf	96,7,c	;volatile
  4326   002032                     
  4327                           ; BSR set to: 15
  4328   002032  0012               	return		;funcret
  4329   002034                     __end_of_ADC_init:
  4330                           	callstack 0
  4331                           
  4332 ;; *************** function _HighISR *****************
  4333 ;; Defined at:
  4334 ;;		line 31 in file "interrupts.c"
  4335 ;; Parameters:    Size  Location     Type
  4336 ;;		None
  4337 ;; Auto vars:     Size  Location     Type
  4338 ;;		None
  4339 ;; Return value:  Size  Location     Type
  4340 ;;                  1    wreg      void 
  4341 ;; Registers used:
  4342 ;;		wreg, status,2, status,0
  4343 ;; Tracked objects:
  4344 ;;		On entry : 0/0
  4345 ;;		On exit  : 0/0
  4346 ;;		Unchanged: 0/0
  4347 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4348 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4349 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4350 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4351 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4352 ;;Total ram usage:        0 bytes
  4353 ;; Hardware stack levels used: 1
  4354 ;; This function calls:
  4355 ;;		Nothing
  4356 ;; This function is called by:
  4357 ;;		Interrupt level 2
  4358 ;; This function uses a non-reentrant model
  4359 ;;
  4360                           
  4361                           	psect	intcode
  4362   000008                     __pintcode:
  4363                           	callstack 0
  4364   000008                     _HighISR:
  4365                           	callstack 22
  4366                           
  4367                           ; BSR set to: 15
  4368                           ;incstack = 0
  4369   000008  824E               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  4370   00000A                     
  4371                           ;interrupts.c: 35:     if(PIR0bits.TMR0IF){
  4372   00000A  010E               	movlb	14	; () banked
  4373   00000C  AB33               	btfss	51,5,b	;volatile
  4374   00000E  EF0B  F000         	goto	i2u219_41
  4375   000012  EF0D  F000         	goto	i2u219_40
  4376   000016                     i2u219_41:
  4377   000016  EF16  F000         	goto	i2l81
  4378   00001A                     i2u219_40:
  4379   00001A                     
  4380                           ; BSR set to: 14
  4381                           ;interrupts.c: 37:         TMR0H = 0b00001011;
  4382   00001A  0E0B               	movlw	11
  4383   00001C  6ED4               	movwf	212,c	;volatile
  4384                           
  4385                           ;interrupts.c: 38:         TMR0L = 0b11011100;
  4386   00001E  0EDC               	movlw	220
  4387   000020  6ED3               	movwf	211,c	;volatile
  4388   000022                     
  4389                           ; BSR set to: 14
  4390                           ;interrupts.c: 39:         GLOBALsecs++;
  4391   000022  0100               	movlb	0	; () banked
  4392   000024  4BE4               	infsnz	_GLOBALsecs& (0+255),f,b
  4393   000026  2BE5               	incf	(_GLOBALsecs+1)& (0+255),f,b
  4394   000028                     
  4395                           ; BSR set to: 0
  4396                           ;interrupts.c: 40:         PIR0bits.TMR0IF=0;
  4397   000028  010E               	movlb	14	; () banked
  4398   00002A  9B33               	bcf	51,5,b	;volatile
  4399   00002C                     i2l81:
  4400                           
  4401                           ; BSR set to: 14
  4402   00002C  924E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  4403   00002E  0011               	retfie		f
  4404   000030                     __end_of_HighISR:
  4405                           	callstack 0
  4406                           
  4407                           	psect	rparam
  4408   000000                     
  4409                           	psect	temp
  4410   00004E                     btemp:
  4411                           	callstack 0
  4412   00004E                     	ds	1
  4413   000000                     int$flags	set	btemp
  4414   000000                     wtemp8	set	btemp+1
  4415   000000                     ttemp5	set	btemp+1
  4416   000000                     ttemp6	set	btemp+4
  4417   000000                     ttemp7	set	btemp+8
  4418                           
  4419                           	psect	config
  4420                           
  4421                           ;Config register CONFIG1L @ 0x300000
  4422                           ;	External Oscillator mode Selection bits
  4423                           ;	FEXTOSC = HS, HS (crystal oscillator) above 8 MHz; PFM set to high power
  4424                           ;	Power-up default value for COSC bits
  4425                           ;	RSTOSC = EXTOSC_4PLL, EXTOSC with 4x PLL, with EXTOSC operating per FEXTOSC bits
  4426   300000                     	org	3145728
  4427   300000  AA                 	db	170
  4428                           
  4429                           ;Config register CONFIG1H @ 0x300001
  4430                           ;	unspecified, using default values
  4431                           ;	Clock Out Enable bit
  4432                           ;	CLKOUTEN = 0x1, unprogrammed default
  4433                           ;	Clock Switch Enable bit
  4434                           ;	CSWEN = 0x1, unprogrammed default
  4435                           ;	Fail-Safe Clock Monitor Enable bit
  4436                           ;	FCMEN = 0x1, unprogrammed default
  4437   300001                     	org	3145729
  4438   300001  FF                 	db	255
  4439                           
  4440                           ;Config register CONFIG3L @ 0x300004
  4441                           ;	WDT Period Select bits
  4442                           ;	WDTCPS = 0x1F, unprogrammed default
  4443                           ;	WDT operating mode
  4444                           ;	WDTE = OFF, WDT Disabled
  4445   300004                     	org	3145732
  4446   300004  9F                 	db	159
  4447                           
  4448                           ;Config register CONFIG3H @ 0x300005
  4449                           ;	unspecified, using default values
  4450                           ;	WDT Window Select bits
  4451                           ;	WDTCWS = 0x7, unprogrammed default
  4452                           ;	WDT input clock selector
  4453                           ;	WDTCCS = 0x7, unprogrammed default
  4454   300005                     	org	3145733
  4455   300005  FF                 	db	255
  4456                           tosu	equ	0xFFF
  4457                           tosh	equ	0xFFE
  4458                           tosl	equ	0xFFD
  4459                           stkptr	equ	0xFFC
  4460                           pclatu	equ	0xFFB
  4461                           pclath	equ	0xFFA
  4462                           pcl	equ	0xFF9
  4463                           tblptru	equ	0xFF8
  4464                           tblptrh	equ	0xFF7
  4465                           tblptrl	equ	0xFF6
  4466                           tablat	equ	0xFF5
  4467                           prodh	equ	0xFF4
  4468                           prodl	equ	0xFF3
  4469                           indf0	equ	0xFEF
  4470                           postinc0	equ	0xFEE
  4471                           postdec0	equ	0xFED
  4472                           preinc0	equ	0xFEC
  4473                           plusw0	equ	0xFEB
  4474                           fsr0h	equ	0xFEA
  4475                           fsr0l	equ	0xFE9
  4476                           wreg	equ	0xFE8
  4477                           indf1	equ	0xFE7
  4478                           postinc1	equ	0xFE6
  4479                           postdec1	equ	0xFE5
  4480                           preinc1	equ	0xFE4
  4481                           plusw1	equ	0xFE3
  4482                           fsr1h	equ	0xFE2
  4483                           fsr1l	equ	0xFE1
  4484                           bsr	equ	0xFE0
  4485                           indf2	equ	0xFDF
  4486                           postinc2	equ	0xFDE
  4487                           postdec2	equ	0xFDD
  4488                           preinc2	equ	0xFDC
  4489                           plusw2	equ	0xFDB
  4490                           fsr2h	equ	0xFDA
  4491                           fsr2l	equ	0xFD9
  4492                           status	equ	0xFD8

Data Sizes:
    Strings     67
    Constant    0
    Data        96
    BSS         39
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     72      77
    BANK0           160    108     134
    BANK1           256      0     104
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          234      0       0

Pointer List with Targets:

    dtoa@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    f$.$buffer	PTR unsigned char  size(2) Largest target is 0

    f$.$source	PTR const unsigned char  size(2) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    fputc@fp$.$buffer	PTR unsigned char  size(2) Largest target is 0

    fputc@fp$.$source	PTR const unsigned char  size(2) Largest target is 0

    fputs@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    fputs@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK1[32]), 

    LCD_sendstring@string	PTR unsigned char  size(1) Largest target is 18
		 -> main@buffer(BANK0[18]), 

    pad@buf	PTR unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK1[32]), 

    pad@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    read_prec_or_width@ap	PTR PTR void [1] size(1) Largest target is 1
		 -> sprintf@ap(COMRAM[1]), 

    read_prec_or_width@fmt	PTR PTR const unsigned char  size(1) Largest target is 1
		 -> vfprintf@cfmt(COMRAM[1]), 

    S1812$buffer	PTR unsigned char  size(2) Largest target is 0

    S1812$source	PTR const unsigned char  size(2) Largest target is 0

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    sprintf@fmt	PTR const unsigned char  size(1) Largest target is 26
		 -> STR_1(CODE[26]), STR_2(CODE[20]), STR_3(CODE[21]), 

    sprintf@s	PTR unsigned char  size(1) Largest target is 18
		 -> main@buffer(BANK0[18]), 

    UpdateClock@days	PTR int  size(1) Largest target is 16
		 -> main@clock(BANK0[16]), 

    UpdateClock@DoW	PTR int  size(1) Largest target is 16
		 -> main@clock(BANK0[16]), 

    UpdateClock@DSTstate	PTR int  size(1) Largest target is 16
		 -> main@clock(BANK0[16]), 

    UpdateClock@hours	PTR int  size(1) Largest target is 16
		 -> main@clock(BANK0[16]), 

    UpdateClock@minutes	PTR int  size(1) Largest target is 16
		 -> main@clock(BANK0[16]), 

    UpdateClock@months	PTR int  size(1) Largest target is 16
		 -> main@clock(BANK0[16]), 

    UpdateClock@seconds	PTR int  size(1) Largest target is 2
		 -> GLOBALsecs(BANK0[2]), 

    UpdateClock@years	PTR int  size(1) Largest target is 16
		 -> main@clock(BANK0[16]), 

    vfpfcnvrt@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(COMRAM[1]), 

    vfpfcnvrt@cp	PTR unsigned char  size(1) Largest target is 26
		 -> STR_1(CODE[26]), STR_2(CODE[20]), STR_3(CODE[21]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(1) Largest target is 1
		 -> vfprintf@cfmt(COMRAM[1]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    vfprintf@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(COMRAM[1]), 

    vfprintf@cfmt	PTR unsigned char  size(1) Largest target is 26
		 -> STR_1(CODE[26]), STR_2(CODE[20]), STR_3(CODE[21]), 

    vfprintf@fmt	PTR const unsigned char  size(1) Largest target is 26
		 -> STR_1(CODE[26]), STR_2(CODE[20]), STR_3(CODE[21]), 

    vfprintf@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 


Critical Paths under _main in COMRAM

    _main->_sprintf
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_dtoa
    _read_prec_or_width->___wmul
    _dtoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _abs->___awmod
    _UpdateClock->___awmod
    _LCD_setline->_LCD_sendbyte
    _LCD_sendstring->_LCD_sendbyte
    _LCD_Init->_LCD_sendbyte
    _LCD_sendbyte->_LCD_sendnibble

Critical Paths under _HighISR in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _HighISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _HighISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _HighISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _HighISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _HighISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _HighISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _HighISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _HighISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _HighISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _HighISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _HighISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _HighISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _HighISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _HighISR in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                               109   109      0   18409
                                             71 COMRAM     1     1      0
                                              0 BANK0    108   108      0
                           _ADC_init
                    _Interrupts_init
                           _LCD_Init
                     _LCD_sendstring
                        _LCD_setline
                  _LEDarray_disp_bin
                      _LEDarray_init
                        _Timer0_init
                        _UpdateClock
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             25    15     10   11242
                                             48 COMRAM    23    13     10
                           _vfprintf
 ---------------------------------------------------------------------------------
 (2) _vfprintf                                             4     1      3   10390
                                             44 COMRAM     4     1      3
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (3) _vfpfcnvrt                                           12     9      3    9902
                                             33 COMRAM    11     8      3
                               _dtoa
                              _fputc
                 _read_prec_or_width
 ---------------------------------------------------------------------------------
 (4) _read_prec_or_width                                   5     3      2    3835
                                              6 COMRAM     5     3      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4    3503
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) _dtoa                                                11     8      3    4514
                                             22 COMRAM    11     8      3
                            ___awdiv
                            ___awmod
                                _abs
                                _pad
 ---------------------------------------------------------------------------------
 (5) _pad                                                  8     3      5    2391
                                             14 COMRAM     8     3      5
                              _fputc
                              _fputs
 ---------------------------------------------------------------------------------
 (6) _fputs                                                6     3      3    1182
                                              8 COMRAM     6     3      3
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _fputc                                                8     5      3     682
                                              0 COMRAM     8     5      3
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (5) _abs                                                  4     2      2     142
                                              6 COMRAM     4     2      2
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (5) ___awdiv                                              8     4      4     452
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (1) _UpdateClock                                         40    30     10    2762
                                              6 COMRAM    40    30     10
                            ___awmod
 ---------------------------------------------------------------------------------
 (5) ___awmod                                              6     2      4     752
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _Timer0_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LEDarray_init                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LEDarray_disp_bin                                    2     0      2     274
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _LCD_setline                                          1     1      0     882
                                              3 COMRAM     1     1      0
                       _LCD_sendbyte
 ---------------------------------------------------------------------------------
 (1) _LCD_sendstring                                       1     0      1    1111
                                              3 COMRAM     1     0      1
                       _LCD_sendbyte
 ---------------------------------------------------------------------------------
 (1) _LCD_Init                                             2     2      0     926
                                              3 COMRAM     2     2      0
                       _LCD_sendbyte
                     _LCD_sendnibble
 ---------------------------------------------------------------------------------
 (2) _LCD_sendbyte                                         2     1      1     838
                                              1 COMRAM     2     1      1
                     _LCD_sendnibble
 ---------------------------------------------------------------------------------
 (3) _LCD_sendnibble                                       1     1      0      88
                                              0 COMRAM     1     1      0
                          _LCD_E_TOG
 ---------------------------------------------------------------------------------
 (4) _LCD_E_TOG                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Interrupts_init                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ADC_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _HighISR                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_init
   _Interrupts_init
   _LCD_Init
     _LCD_sendbyte
       _LCD_sendnibble
         _LCD_E_TOG
     _LCD_sendnibble
   _LCD_sendstring
     _LCD_sendbyte
   _LCD_setline
     _LCD_sendbyte
   _LEDarray_disp_bin
   _LEDarray_init
   _Timer0_init
   _UpdateClock
     ___awmod
   _sprintf
     _vfprintf
       _vfpfcnvrt
         _dtoa
           ___awdiv
           ___awmod
           _abs
             ___awmod (ARG)
           _pad
             _fputc
               _putch
             _fputs
               _fputc
         _fputc
         _read_prec_or_width
           ___wmul

 _HighISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             DE9      0       0      46        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      68       7       40.6%
BITBANK13           EA      0       0      30        0.0%
BANK13              EA      0       0      31        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     6C      86       5       83.8%
BITBIGSFRllhhhh     84      0       0      38        0.0%
BITBIGSFRllhhll     5E      0       0      41        0.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     48      4D       1       81.9%
BITBIGSFRhhl        4A      0       0      34        0.0%
BITBIGSFRllhhlh     33      0       0      40        0.0%
BITBIGSFRllll       30      0       0      44        0.0%
BITBIGSFRhhhl       1B      0       0      33        0.0%
BITBIGSFRllhhhh     14      0       0      35        0.0%
BITBIGSFRhhhh        D      0       0      32        0.0%
BITBIGSFRlllh        9      0       0      43        0.0%
BITBIGSFRllhl        9      0       0      42        0.0%
BITBIGSFRllhhhl      8      0       0      39        0.0%
BITBIGSFRllhhhh      6      0       0      37        0.0%
BITBIGSFRllhhhh      3      0       0      36        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     13B      45        0.0%
DATA                 0      0     13B       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.45 build 20230818022343 
Symbol Table                                                                                   Fri Feb 09 02:50:37 2024

                        l55 2018                          l75 2066                ___awdiv@sign 0006  
       ___wmul@multiplicand 0003           ??_Interrupts_init 0001                         l120 1FD4  
                       l130 1954                         l131 1968                         l123 1910  
                       l132 196A                         l124 1912                         l141 19C2  
                       l133 197E                         l125 1926                         l302 1F88  
                       l134 1980                         l126 1928                         l135 1994  
                       l127 193C                         l136 1996                         l128 193E  
                       l137 19AA                         l129 1952                         l138 19AC  
                       l139 19C0                         l228 2032                         l325 1FAE  
                       l255 1384                         l281 1D64                         l274 2058  
                       l283 1D7A                         l291 18FA                         l285 1D88  
                       l277 1D38                         l279 1D4E                         l288 1FF8  
                       l296 1EF2                         l556 1A86                         l569 1B36  
                       _abs 1F28                         _pad 1C90                ___awmod@sign 0006  
                       wreg 0FE8                        l1003 1F26                        l1100 1EB8  
                      l1103 2068                        l1023 1CC4                        l1031 1566  
                      l2001 1AB4                        l1026 1D02                        l2011 1AEC  
                      l2003 1ABC                        ?_abs 0007                        l1028 1D20  
                      l1044 167C                        l1052 1BE4                        l2021 1B26  
                      l2013 1B02                        l2005 1ACE                        l2023 1B2E  
                      l2015 1B0A                        l2007 1AD6                        l2111 1B8A  
                      l2103 1B38                        l1080 1F5A                        l1048 1BDC  
                      l2121 1D3A                        l2017 1B10                        l2009 1ADE  
                      l2113 1BAA                        l2105 1B40                        l1073 1E78  
                      l2051 2056                        l2131 1D74                        l2123 1D48  
                      l2211 1FB0                        l2019 1B16                        l2043 1F28  
                      l2107 1B66                        l2115 1BB2                        l1067 1506  
                      l1092 1C8E                        l2221 205A                        l2133 1D7C  
                      l2125 1D50                        l2117 1D24                        l2213 1FFA  
                      l2301 0FF4                        l2045 1F36                        l1077 1F42  
                      l2109 1B6E                        l2047 204C                        l2135 1D80  
                      l2127 1D5E                        l2119 1D32                        l2231 1826  
                      l2223 17DC                        l2215 2002                        l2311 1074  
                      l2303 1002                        l2049 204E                        l2129 1D66  
                      l2241 186C                        l2233 1836                        l2225 17F4  
                      l2217 200C                        l2313 1098                        l2305 101A  
                      l2321 1100                        l2251 18B6                        l2243 187A  
                      l2235 184C                        l2227 180A                        l2411 1F72  
                      l2219 2016                        l2331 118C                        l2323 1118  
                      l2315 10BC                        l2307 1034                        l2261 2024  
                      l2253 18C0                        l2245 1884                        l2237 1852  
                      l2229 1810                        l2405 1F5C                        l2341 1220  
                      l2333 11B4                        l2325 1132                        l2317 10CE  
                      l2309 105A                        l2263 202C                        l2255 18D8  
                      l2247 189C                        l2239 1862                        l2407 1F60  
                      l2351 12B4                        l2343 123A                        l2335 11C6  
                      l2327 1158                        l2319 10F2                        l2271 0E58  
                      l2265 202E                        l2193 1FD8                        l2257 18E2  
                      l2249 18A6                        l2409 1F70                        l2361 1352  
                      l2353 12BC                        l2345 1242                        l2337 11EE  
                      l2329 1172                        l2281 0ED4                        l2273 0E6A  
                      l2267 2030                        l2259 201A                        l2195 1FE2  
                      l2371 1936                        l2363 1360                        l2355 12FA  
                      l2347 126E                        l2339 11F8                        l2291 0F56  
                      l2283 0EDE                        l2275 0E7E                        l2197 1FEA  
                      l2381 19A4                        l2373 194C                        l2365 18FC  
                      l2357 1308                        l2349 1288                        l2293 0F7C  
                      l2285 0F02                        l2277 0EA4                        l2269 0E46  
                      l2701 1602                        l2199 1FF0                        l2391 1EE8  
                      l2383 19BA                        l2375 1962                        l2367 190A  
                      l2359 132C                        l2295 0F86                        l2287 0F28  
                      l2279 0EAE                        l2711 1650                        l2703 1612  
                      l2385 1EBC                        l2377 1978                        l2369 1920  
                      l2297 0FAA                        l2289 0F32                        l1921 1BF6  
                      l2713 1660                        l2705 162C                        l2721 13B4  
                      l2801 168A                        l2387 1ECE                        l2379 198E  
                      l2299 0FCE                        l1923 1C06                        l2643 1E7A  
                      l2651 1C90                        l2707 163A                        l2731 13DA  
                      l2723 13C0                        l2811 1698                        l2803 168E  
                      l2389 1ED8                        l1925 1C10                        l2645 1E86  
                      l2661 1CE0                        l2653 1C9E                        l2709 164A  
                      l1941 1F8A                        l2741 143C                        l2725 13C4  
                      l2717 1386                        l2821 16BC                        l2813 169A  
                      l2805 1692                        l1951 19D6                        l1927 1C2C  
                      l1919 1BE6                        l2647 1E94                        l2663 1CE4  
                      l2655 1CAE                        l2671 1520                        l1943 1FA6  
                      l2751 149E                        l2743 144A                        l2735 13E2  
                      l2727 13CC                        l2719 13AC                        l2831 16E4  
                      l2823 16C4                        l2815 16A4                        l2807 1694  
                      l1961 19FC                        l1953 19DE                        l1929 1C5E  
                      l2649 1E98                        l2665 1D10                        l2657 1CBC  
                      l2681 155A                        l2673 1528                        l2753 14B6  
                      l2745 1454                        l2729 13CE                        l2737 1418  
                      l2841 16FE                        l2833 16F6                        l2825 16CC  
                      l2817 16AC                        l2809 1696                        l1971 1A34  
                      l1963 1A04                        l1955 19E2                        l1947 19C4  
                      l2659 1CD0                        l2691 15B0                        l2683 1562  
                      l2675 1538                        l2667 1508                        l2755 14C0  
                      l2747 145E                        l2739 1428                        l2763 14E0  
                      l2851 1758                        l2843 1712                        l2827 16D4  
                      l2819 16B4                        l1981 1A60                        l1973 1A3A  
                      l1965 1A16                        l1957 19F0                        l1949 19C8  
                      l2693 15B4                        l2685 156E                        l2677 153E  
                      l2669 150C                        l2749 147E                        l2773 1E38  
                      l2853 1784                        l2845 171A                        l2829 16DC  
                      ?_pad 000F                        l1991 1A88                        l1975 1A50  
                      l1967 1A1E                        l1983 1A66                        l1959 19F8  
                      l2695 15BA                        l2687 1578                        l2679 154E  
                      l2759 14D4                        l2775 1E40                        l2791 1F1C  
                      l2783 1EF4                        l2855 178C                        l2847 1746  
                      l1993 1A8C                        l1985 1A76                        l1977 1A58  
                      l1969 1A26                        l2689 157E                        l2697 15D6  
                      l2777 1E50                        l2785 1EFC                        l2857 1792  
                      l2849 1752                        l1995 1A9A                        l1987 1A7E  
                      l1979 1A5A                        l2699 15F0                        l2891 140A  
                      l2779 1E70                        l2787 1F04                        l2859 17CC  
                      l2795 167E                        l1997 1AA2                        l2789 1F0C  
                      l2797 1682                        l1999 1AA6                        l2799 1686  
              main@TestMode 00BA                        STR_1 0E01                        STR_2 0E30  
                      STR_3 0E1B                        u2000 126E                        u2001 126A  
                      u2010 1288                        u2011 1284                        u2100 1978  
                      u2020 12B4                        u2101 1974                        u2021 12B0  
                      u2110 198E                        u2030 12FA                        u2111 198A  
                      u2031 12F6                        u2120 19A4                        u2040 1352  
                      u1400 19F0                        u2121 19A0                        u2041 134E  
                      u1401 19EC                        u2130 19BA                        u2050 190A  
                      u1410 1A16                        u2131 19B6                        u2051 1906  
                      u1411 1A12                        u2140 1ECE                        u2060 1920  
                      u1500 1B26                        u1420 1A34                        u1340 1BF6  
                      u2141 1ECA                        u2061 191C                        u1501 1B22  
                      u1421 1A30                        u1341 1BF2                        u2150 1EE8  
                      u2070 1936                        u1430 1A50                        u1350 1C06  
                      u2151 1EE4                        u2071 1932                        u1431 1A4C  
                      u1351 1C02                        u2160 1F88                        u2080 194C  
                      u1440 1A76                        u1360 1C2C                        u2161 1F84  
                      u2081 1948                        u1441 1A72                        u1361 1C28  
                      u2090 1962                        u1450 1A9A                        u1370 1C5E  
                      u2091 195E                        u1451 1A96                        u1371 1C5A  
                      u1700 1D5E                        u1460 1AB4                        u1701 1D5A  
                      u1461 1AB0                        u1710 1D74                        u1470 1ACE  
                      u1390 19D6                        u1550 1F36                        u1711 1D70  
                      u1471 1ACA                        u1391 19D2                        u1551 1F32  
                      u1480 1AEC                        u1800 0E6A                        u2600 151C  
                      u1481 1AE8                        u1801 0E66                        u2601 1516  
                      u1490 1B02                        u1810 0EA4                        u2610 151E  
                      u1491 1AFE                        u1811 0EA0                        u1900 1098  
                      u1820 0ED4                        u2620 1538                        u1660 1B66  
                      u2700 13AC                        u1901 1094                        u1821 0ED0  
                      u2621 1534                        u1661 1B62                        u2701 13A8  
                      u1910 10CE                        u1830 0F28                        u2550 1EB8  
                      u2630 154E                        u1670 1BDC                        u2710 1428  
                      u1911 10CA                        u1831 0F24                        u2551 1EB4  
                      u2631 154A                        u1671 1BD8                        u2711 1424  
                      u1680 1D32                        u1920 1118                        u1840 0F7C  
                      u2560 1C9E                        u2640 15F0                        u2720 144A  
                      u1681 1D2E                        u1921 1114                        u1841 0F78  
                      u2561 1C9A                        u2641 15EC                        u2721 1446  
                      u1690 1D48                        u1930 1132                        u1850 0FF4  
                      u2570 1CBC                        u2650 1602                        u2730 147E  
                      u1691 1D44                        u1931 112E                        u1851 0FF0  
                      u2571 1CB8                        u2651 15FE                        u2731 147A  
                      u1940 1158                        u1860 101A                        u2580 1D02  
                      u2660 1612                        u2740 149E                        u1941 1154  
                      u1861 1016                        u2581 1CFE                        u2661 160E  
                      u2741 149A                        u1950 1172                        u1870 1034  
                      u2590 1D10                        u2670 162C                        u2750 1E70  
                      u1775 1FE0                        u2807 182C                        u1951 116E  
                      u1871 1030                        u1791 0E50                        u2591 1D0C  
                      u2671 1628                        u2751 1E6C                        u1776 1FE2  
                      u1960 118C                        u1880 105A                        u2680 163A  
                      u2817 1842                        u1961 1188                        u1881 1056  
                      u2681 1636                        u2761 16EE                        u1970 11C6  
                      u1890 1074                        u2690 164A                        u2770 1712  
                      u2907 2050                        u2827 1858                        u1971 11C2  
                      u1891 1070                        u2691 1646                        u2771 170E  
                      u1980 1220                        u2837 186E                        u1981 121C  
                      u1990 123A                        u2847 188E                        u1991 1236  
                      u2857 18AC                        u2867 18CA                        u2787 17FE  
                      u2877 18EC                        u2797 1816                        u2887 1FF2  
                      u2897 1D82                        i2l81 002C                        abs@a 0007  
                      _dbuf 0148                        _main 167E                        _dtoa 1508  
                      _prec 004B                        pad@i 0015                        pad@p 0012  
                      fsr1h 0FE2                        fsr2h 0FDA                        indf1 0FE7  
                      indf2 0FDF                        fsr1l 0FE1                        fsr2l 0FD9  
                      btemp 004E                ?_LCD_setline 0001                        prodh 0FF4  
                      prodl 0FF3                        start 0030            __end_of_ADC_init 2034  
           __end_of_HighISR 0030                ___param_bank 0000                       ??_abs 0009  
                     ??_pad 0014            __end_of_LCD_Init 18FC                       ?_main 0001  
                     ?_dtoa 0017                       _ADPCH 0F5F             __end_of___awdiv 1A88  
           __end_of___awmod 1B38             ___awdiv@divisor 0003             ___awdiv@counter 0005  
              vfpfcnvrt@fmt 0023                       _TMR0H 0FD4                       _TMR0L 0FD3  
                     _flags 004D         read_prec_or_width@c 0009         read_prec_or_width@n 000A  
                     _fputc 1BE6                       _fputs 1E7A                       pad@fp 000F  
                     _width 0049                       _putch 2068                       dtoa@d 0018  
                     dtoa@i 0020                       dtoa@p 001C                       dtoa@s 001F  
                     dtoa@w 001D               ?_LCD_sendbyte 0002                       tablat 0FF5  
                     plusw1 0FE3                       plusw2 0FDB                       ttemp5 004F  
                     ttemp6 0052                       ttemp7 0056                       status 0FD8  
                     wtemp8 004F             __end_of_sprintf 1F28             __initialization 1D8A  
              __end_of_main 17DC                __end_of_dtoa 167E           __end_of_LCD_E_TOG 205A  
                    ??_main 0048                      ??_dtoa 001A               __activetblptr 0003  
__end_of_read_prec_or_width 1BE6                      ?_fputc 0001                      ?_fputs 0009  
                    _ADRESH 0F64              ??_LCD_sendbyte 0003            ___awdiv@dividend 0001  
                    ?_putch 0001            UpdateClock@hours 0009                      i2l2481 001A  
                    i2l2483 0022                      i2l2485 0028                      i2l2479 000A  
          UpdateClock@years 000D               vfpfcnvrt@done 002B                   ??_HighISR 0001  
         _LEDarray_disp_bin 18FC          ?_LEDarray_disp_bin 0001               ??_Timer0_init 0001  
              vfprintf@cfmt 0030                      ___wmul 1F8A                   ??___awdiv 0005  
                 ??___awmod 0005        read_prec_or_width@ap 0008         ??_LEDarray_disp_bin 0003  
                    clear_0 1DD0            ___awdiv@quotient 0007             ___awmod@divisor 0003  
                    isa$std 0001             ___awmod@counter 0005                      pad@buf 0010  
                    dtoa@fp 0017                      fputc@c 0001                      fputs@c 000C  
                    fputs@i 000D                      fputs@s 0009                __mediumconst 0000  
                    tblptrh 0FF7                      tblptrl 0FF6                      tblptru 0FF8  
                 ?_ADC_init 0001                      putch@c 0001            __end_of_vfprintf 1E7A  
                 ??_sprintf 003B   __end_of_LEDarray_disp_bin 19C4                  __accesstop 0060  
             ??_UpdateClock 0011     __end_of__initialization 1DE6                   ?_LCD_Init 0001  
             ___rparam_used 0001               _LEDarray_init 1FB0             _Interrupts_init 205A  
            __pcstackCOMRAM 0001                __pidataBANK0 2034                __pidataBANK1 1DF0  
             __end_of_fputc 1C90               __end_of_fputs 1EBA               __end_of_putch 206A  
       __end_of_Timer0_init 201A                  ??_ADC_init 0001                     ??_fputc 0004  
                   ??_fputs 000C                     ??_putch 0001           UpdateClock@F14152 00CC  
                __pbssBANK0 00E4                  __pbssBANK1 0148         UpdateClock@DSTstate 000E  
                ??_LCD_Init 0004              _LCD_sendnibble 1D22              ?_LEDarray_init 0001  
            _LCD_sendstring 1F5C         __end_of_UpdateClock 1386                     ?___wmul 0001  
      __end_of_LCD_sendbyte 1FFA           UpdateClock@months 000C      __end_of_LCD_sendnibble 1D8A  
       UpdateClock@TestMode 000F     __end_of_Interrupts_init 2068                     _HighISR 0008  
    __end_of_LCD_sendstring 1F8A                   _ADREFbits 0F58                     __Hparam 0000  
                   __Lparam 0000                 _Timer0_init 1FFA                     ___awdiv 19C4  
                   ___awmod 1A88                   ?_vfprintf 002D                __psmallconst 0E00  
                   __pcinit 1D8A                     __ramtop 0E00                     __ptext0 167E  
                   __ptext1 1EF4                     __ptext2 1E38                     __ptext3 1386  
                   __ptext4 1B38                     __ptext5 1F8A                     __ptext6 1508  
                   __ptext7 1C90                     __ptext8 1E7A                     __ptext9 1BE6  
     read_prec_or_width@fmt 0007            ___awmod@dividend 0001                   _LCD_E_TOG 204C  
           LCD_setline@line 0004                     _sprintf 1EF4        end_of_initialization 1DE6  
           ?_LCD_sendnibble 0001                     fputc@fp 0003             ??_LEDarray_init 0001  
                   fputs@fp 000B                 _UpdateClock 0E46             ?_LCD_sendstring 0004  
        _read_prec_or_width 1B38           __end_of_vfpfcnvrt 1508                     postdec1 0FE5  
                   postdec2 0FDD         ?_read_prec_or_width 0007                     postinc0 0FEE  
                   postinc1 0FE6                     postinc2 0FDE            vfpfcnvrt@convarg 0027  
                main@F14518 0100                  ??_vfprintf 0030           main@SolarPerMonth 0072  
                ?_LCD_E_TOG 0001                   _TRISAbits 0F81                   _TRISBbits 0F82  
                 _TRISCbits 0F83                   _TRISDbits 0F84                   _TRISEbits 0F85  
                 _TRISFbits 0F86                   _TRISGbits 0F87                   _TRISHbits 0F88  
      ??_read_prec_or_width 0009                 _CM1CON0bits 0ED0                 _CM1CON1bits 0ED1  
          ?_Interrupts_init 0001                  main@buffer 0060                 vfpfcnvrt@ap 0024  
               vfpfcnvrt@cp 002C                 vfpfcnvrt@fp 0022              __end_of___wmul 1FB0  
      LCD_sendnibble@number 0001         start_initialization 1D8A                 __end_of_abs 1F5C  
               __end_of_pad 1D22                _LCD_sendbyte 1FD6             UpdateClock@days 000A  
             ??_LCD_setline 0004                 vfprintf@fmt 002E        LCD_sendstring@string 0004  
                  ??___wmul 0005                 __pdataBANK0 00CC                 __pdataBANK1 0100  
               __pbssCOMRAM 0049                 ??_LCD_E_TOG 0001               __pcstackBANK0 0060  
                  ?_HighISR 0001                   _dtoa$1891 001A                ?_Timer0_init 0001  
                 __pintcode 0008                    ?___awdiv 0001                    ?___awmod 0001  
       __end_of_LCD_setline 1EF4                 __smallconst 0E00            ??_LCD_sendnibble 0001  
                  _ADC_init 201A            ??_LCD_sendstring 0005                    ?_sprintf 0031  
          LCD_sendbyte@Byte 0003                    _LCD_Init 17DC            LCD_sendbyte@type 0002  
              ?_UpdateClock 0007              ___wmul@product 0005                    _LATAbits 0F79  
        UpdateClock@minutes 0008          UpdateClock@seconds 0007                    _LATBbits 0F7A  
                  _LATCbits 0F7B                    _LATDbits 0F7C                    _LATEbits 0F7D  
                  _LATFbits 0F7E                    _LATGbits 0F7F                    _LATHbits 0F80  
                  _IPR0bits 0E1F                    _PIE0bits 0E29                    i2u219_40 001A  
                  i2u219_41 0016                    _PIR0bits 0E33                   _vfpfcnvrt 1386  
                _ADCON0bits 0F60           ___wmul@multiplier 0001                   main@clock 00BC  
    UpdateClock@DaysInMonth 0017                  _CM1NCHbits 0ED2                  _CM1PCHbits 0ED3  
                 copy_data0 1D9E                   copy_data1 1DBE       __end_of_LEDarray_init 1FD6  
            UpdateClock@DoW 000B                 _LCD_setline 1EBA                    __Hrparam 0000  
                vfprintf@ap 002F                    __Lrparam 0000                  vfprintf@fp 002D  
                ?_vfpfcnvrt 0022                  _ANSELAbits 0E92                  sprintf@fmt 0032  
                _T0CON0bits 0FD5                  _T0CON1bits 0FD6                    __ptext10 2068  
                  __ptext11 1F28                    __ptext20 17DC                    __ptext12 19C4  
                  __ptext21 1FD6                    __ptext13 0E46                    __ptext22 1D22  
                  __ptext14 1A88                    __ptext23 204C                    __ptext15 1FFA  
                  __ptext24 205A                    __ptext16 1FB0                    __ptext25 201A  
                  __ptext17 18FC                    __ptext18 1EBA                    __ptext19 1F5C  
   LEDarray_disp_bin@number 0001                  _GLOBALsecs 00E4                    isa$xinst 0000  
                  int$flags 004E                    _vfprintf 1E38                  _INTCONbits 0FF2  
                  intlevel2 0000                   sprintf@ap 003B                _DAC1CON0bits 0EC6  
              _DAC1CON1bits 0EC7                 ??_vfpfcnvrt 0025                    sprintf@f 003C  
                  sprintf@s 0031  
