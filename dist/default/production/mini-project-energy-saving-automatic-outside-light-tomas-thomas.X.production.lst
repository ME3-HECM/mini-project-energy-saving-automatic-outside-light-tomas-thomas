

Microchip MPLAB XC8 Assembler V2.45 build 20230818022343 
<<<<<<< Updated upstream
                                                                                               Fri Feb 09 02:31:35 2024
=======
                                                                                               Fri Feb 09 04:48:40 2024
>>>>>>> Stashed changes

Microchip MPLAB XC8 C Compiler v2.45 (Free license) build 20230818022343 Og1 
     1                           	processor	18F67K40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
<<<<<<< Updated upstream
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1,group=3
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=2
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=3
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=3
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=3
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=3
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=2
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=2
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1
    34                           	psect	text21,global,reloc=2,class=CODE,delta=1
    35                           	psect	text22,global,reloc=2,class=CODE,delta=1
    36                           	psect	text23,global,reloc=2,class=CODE,delta=1
    37                           	psect	text24,global,reloc=2,class=CODE,delta=1
    38                           	psect	text25,global,reloc=2,class=CODE,delta=1
    39                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    40                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    41                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    42                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    43                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    44   000000                     
    45                           ; Generated 21/07/2023 GMT
    46                           ; 
    47                           ; Copyright © 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    48                           ; All rights reserved.
    49                           ; 
    50                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
=======
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1,group=3
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=2
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=3
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=3
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=3
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=3
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=2
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=2
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=2
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=2
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=2
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=2
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1,group=2
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    49                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    50                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    51                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    52                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    53   000000                     
    54                           ; Generated 21/07/2023 GMT
    55                           ; 
    56                           ; Copyright © 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    57                           ; All rights reserved.
    58                           ; 
    59                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
>>>>>>> Stashed changes
      +                          ip").
    60                           ; 
    61                           ; Redistribution and use in source and binary forms, with or without modification, are
    62                           ; permitted provided that the following conditions are met:
    63                           ; 
    64                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    65                           ;        conditions and the following disclaimer.
    66                           ; 
    67                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    68                           ;        of conditions and the following disclaimer in the documentation and/or other
    69                           ;        materials provided with the distribution. Publication is not required when
    70                           ;        this file is used in an embedded application.
    71                           ; 
    72                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    73                           ;        software without specific prior written permission.
    74                           ; 
<<<<<<< Updated upstream
    75                           ; 
    76                           ; Code-generator required, PIC18F67K40 Definitions
    77                           ; 
    78                           ; SFR Addresses
    79   000000                     
    80                           	psect	idataBANK0
    81   001F94                     __pidataBANK0:
    82                           	callstack 0
    83                           
    84                           ;initializer for UpdateClock@F14152
    85   001F94  001F               	dw	31
    86   001F96  001C               	dw	28
    87   001F98  001F               	dw	31
    88   001F9A  001E               	dw	30
    89   001F9C  001F               	dw	31
    90   001F9E  001E               	dw	30
    91   001FA0  001F               	dw	31
    92   001FA2  001F               	dw	31
    93   001FA4  001E               	dw	30
    94   001FA6  001F               	dw	31
    95   001FA8  001E               	dw	30
    96   001FAA  001F               	dw	31
    97   000000                     _TRISCbits	set	3971
    98   000000                     _TRISEbits	set	3973
    99   000000                     _LATEbits	set	3965
   100   000000                     _LATCbits	set	3963
   101   000000                     _LATBbits	set	3962
   102   000000                     _TRISBbits	set	3970
   103   000000                     _LATFbits	set	3966
   104   000000                     _TRISAbits	set	3969
   105   000000                     _LATGbits	set	3967
   106   000000                     _TRISGbits	set	3975
   107   000000                     _CM1CON1bits	set	3793
   108   000000                     _TRISFbits	set	3974
   109   000000                     _LATHbits	set	3968
   110   000000                     _TRISHbits	set	3976
   111   000000                     _IPR0bits	set	3615
   112   000000                     _PIE0bits	set	3625
   113   000000                     _LATDbits	set	3964
   114   000000                     _TRISDbits	set	3972
   115   000000                     _TMR0L	set	4051
   116   000000                     _TMR0H	set	4052
   117   000000                     _T0CON0bits	set	4053
   118   000000                     _T0CON1bits	set	4054
   119   000000                     _INTCONbits	set	4082
   120   000000                     _PIR0bits	set	3635
   121   000000                     _ANSELAbits	set	3730
   122   000000                     _DAC1CON0bits	set	3782
   123   000000                     _CM1CON0bits	set	3792
   124   000000                     _CM1NCHbits	set	3794
   125   000000                     _DAC1CON1bits	set	3783
   126   000000                     _ADREFbits	set	3928
   127   000000                     _LATAbits	set	3961
   128   000000                     _CM1PCHbits	set	3795
   129   000000                     _ADPCH	set	3935
   130   000000                     _ADRESH	set	3940
   131   000000                     _ADCON0bits	set	3936
   132                           
   133                           	psect	smallconst
   134   000E00                     __psmallconst:
   135                           	callstack 0
   136   000E00  00                 	db	0
   137   000E01                     STR_1:
   138                           
   139                           ; BSR set to: 14
   140   000E01  54                 	db	84	;'T'
   141   000E02  69                 	db	105	;'i'
   142   000E03  6D                 	db	109	;'m'
   143   000E04  65                 	db	101	;'e'
   144   000E05  3A                 	db	58	;':'
   145   000E06  25                 	db	37
   146   000E07  30                 	db	48	;'0'
   147   000E08  32                 	db	50	;'2'
   148   000E09  64                 	db	100	;'d'
   149   000E0A  3A                 	db	58	;':'
   150   000E0B  25                 	db	37
   151   000E0C  30                 	db	48	;'0'
   152   000E0D  32                 	db	50	;'2'
   153   000E0E  64                 	db	100	;'d'
   154   000E0F  3A                 	db	58	;':'
   155   000E10  25                 	db	37
   156   000E11  30                 	db	48	;'0'
   157   000E12  32                 	db	50	;'2'
   158   000E13  64                 	db	100	;'d'
   159   000E14  20                 	db	32
   160   000E15  44                 	db	68	;'D'
   161   000E16  25                 	db	37
   162   000E17  30                 	db	48	;'0'
   163   000E18  31                 	db	49	;'1'
   164   000E19  64                 	db	100	;'d'
   165   000E1A  00                 	db	0
   166   000E1B                     
   167                           ; BSR set to: 14
   168   000E1B  54                 	db	84	;'T'
   169   000E1C  69                 	db	105	;'i'
   170   000E1D  6D                 	db	109	;'m'
   171   000E1E  65                 	db	101	;'e'
   172   000E1F  3A                 	db	58	;':'
   173   000E20  20                 	db	32
   174   000E21  25                 	db	37
   175   000E22  30                 	db	48	;'0'
   176   000E23  32                 	db	50	;'2'
   177   000E24  64                 	db	100	;'d'
   178   000E25  3A                 	db	58	;':'
   179   000E26  25                 	db	37
   180   000E27  30                 	db	48	;'0'
   181   000E28  32                 	db	50	;'2'
   182   000E29  64                 	db	100	;'d'
   183   000E2A  3A                 	db	58	;':'
   184   000E2B  25                 	db	37
   185   000E2C  30                 	db	48	;'0'
   186   000E2D  34                 	db	52	;'4'
   187   000E2E  64                 	db	100	;'d'
   188   000E2F  00                 	db	0
   189   000E30                     STR_2:
   190                           
   191                           ; BSR set to: 14
   192   000E30  44                 	db	68	;'D'
   193   000E31  61                 	db	97	;'a'
   194   000E32  74                 	db	116	;'t'
   195   000E33  65                 	db	101	;'e'
   196   000E34  3A                 	db	58	;':'
   197   000E35  25                 	db	37
   198   000E36  30                 	db	48	;'0'
   199   000E37  32                 	db	50	;'2'
   200   000E38  64                 	db	100	;'d'
   201   000E39  2F                 	db	47
   202   000E3A  25                 	db	37
   203   000E3B  30                 	db	48	;'0'
   204   000E3C  32                 	db	50	;'2'
   205   000E3D  64                 	db	100	;'d'
   206   000E3E  2F                 	db	47
   207   000E3F  25                 	db	37
   208   000E40  30                 	db	48	;'0'
   209   000E41  34                 	db	52	;'4'
   210   000E42  64                 	db	100	;'d'
   211   000E43  00                 	db	0
   212   000E44  00                 	db	0	; dummy byte at the end
   213   000000                     
   214                           ; #config settings
   215                           
   216                           	psect	cinit
   217   001D9E                     __pcinit:
   218                           	callstack 0
   219   001D9E                     start_initialization:
   220                           	callstack 0
   221   001D9E                     __initialization:
   222                           	callstack 0
   223                           
   224                           ; Initialize objects allocated to BANK0 (24 bytes)
   225                           ; load TBLPTR registers with __pidataBANK0
   226   001D9E  0E94               	movlw	low __pidataBANK0
   227   001DA0  6EF6               	movwf	tblptrl,c
   228   001DA2  0E1F               	movlw	high __pidataBANK0
   229   001DA4  6EF7               	movwf	tblptrh,c
   230   001DA6  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   231   001DA8  6EF8               	movwf	tblptru,c
   232   001DAA  EE00  F0A6         	lfsr	0,__pdataBANK0
   233   001DAE  EE10 F018          	lfsr	1,24
   234   001DB2                     copy_data0:
   235   001DB2  0009               	tblrd		*+
   236   001DB4  CFF5 FFEE          	movff	tablat,postinc0
   237   001DB8  50E5               	movf	postdec1,w,c
   238   001DBA  50E1               	movf	fsr1l,w,c
   239   001DBC  E1FA               	bnz	copy_data0
   240                           
   241                           ; Clear objects allocated to BANK0 (34 bytes)
   242   001DBE  EE00  F084         	lfsr	0,__pbssBANK0
   243   001DC2  0E22               	movlw	34
   244   001DC4                     clear_0:
   245   001DC4  6AEE               	clrf	postinc0,c
   246   001DC6  06E8               	decf	wreg,f,c
   247   001DC8  E1FD               	bnz	clear_0
   248                           
   249                           ; Clear objects allocated to COMRAM (5 bytes)
   250   001DCA  6A4A               	clrf	(__pbssCOMRAM+4)& (0+255),c
   251   001DCC  6A49               	clrf	(__pbssCOMRAM+3)& (0+255),c
   252   001DCE  6A48               	clrf	(__pbssCOMRAM+2)& (0+255),c
   253   001DD0  6A47               	clrf	(__pbssCOMRAM+1)& (0+255),c
   254   001DD2  6A46               	clrf	__pbssCOMRAM& (0+255),c
   255   001DD4                     end_of_initialization:
   256                           	callstack 0
   257   001DD4                     __end_of__initialization:
   258                           	callstack 0
   259   001DD4  904B               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   260   001DD6  924B               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   261   001DD8  0100               	movlb	0
   262   001DDA  EF38  F00B         	goto	_main	;jump to C main() function
   263                           
   264                           	psect	bssCOMRAM
   265   000046                     __pbssCOMRAM:
   266                           	callstack 0
   267   000046                     _width:
   268                           	callstack 0
   269   000046                     	ds	2
   270   000048                     _prec:
   271                           	callstack 0
   272   000048                     	ds	2
   273   00004A                     _flags:
   274                           	callstack 0
   275   00004A                     	ds	1
   276                           
   277                           	psect	bssBANK0
   278   000084                     __pbssBANK0:
   279                           	callstack 0
   280   000084                     _dbuf:
   281                           	callstack 0
   282   000084                     	ds	32
   283   0000A4                     _GLOBALsecs:
   284                           	callstack 0
   285   0000A4                     	ds	2
   286                           
   287                           	psect	dataBANK0
   288   0000A6                     __pdataBANK0:
   289                           	callstack 0
   290   0000A6                     UpdateClock@F14152:
   291                           	callstack 0
   292   0000A6                     	ds	24
   293                           
   294                           	psect	cstackBANK0
   295   000060                     __pcstackBANK0:
   296                           	callstack 0
   297   000060                     main@buffer:
   298                           	callstack 0
   299                           
   300                           ; 18 bytes @ 0x0
   301   000060                     	ds	18
   302   000072                     main@TestMode:
   303                           	callstack 0
   304                           
   305                           ; 2 bytes @ 0x12
   306   000072                     	ds	2
   307   000074                     main@clock:
   308                           	callstack 0
   309                           
   310                           ; 16 bytes @ 0x14
   311   000074                     	ds	16
   312                           
   313                           	psect	cstackCOMRAM
   314   000001                     __pcstackCOMRAM:
   315                           	callstack 0
   316   000001                     ?___wmul:
   317                           	callstack 0
   318   000001                     ?___awdiv:
   319                           	callstack 0
   320   000001                     ?___awmod:
   321                           	callstack 0
   322   000001                     LCD_sendnibble@number:
   323                           	callstack 0
   324   000001                     LEDarray_disp_bin@number:
   325                           	callstack 0
   326   000001                     ___wmul@multiplier:
   327                           	callstack 0
   328   000001                     ___awdiv@dividend:
   329                           	callstack 0
   330   000001                     ___awmod@dividend:
   331                           	callstack 0
   332   000001                     fputc@c:
   333                           	callstack 0
   334                           
   335                           ; 2 bytes @ 0x0
   336   000001                     	ds	1
   337   000002                     LCD_sendbyte@type:
   338                           	callstack 0
   339                           
   340                           ; 1 bytes @ 0x1
   341   000002                     	ds	1
   342   000003                     LCD_sendbyte@Byte:
   343                           	callstack 0
   344   000003                     fputc@fp:
   345                           	callstack 0
   346   000003                     ___wmul@multiplicand:
   347                           	callstack 0
   348   000003                     ___awdiv@divisor:
   349                           	callstack 0
   350   000003                     ___awmod@divisor:
   351                           	callstack 0
   352                           
   353                           ; 2 bytes @ 0x2
   354   000003                     	ds	1
   355   000004                     ??_LCD_Init:
   356   000004                     ??_fputc:
   357   000004                     LCD_setline@line:
   358                           	callstack 0
   359   000004                     LCD_sendstring@string:
   360                           	callstack 0
   361                           
   362                           ; 1 bytes @ 0x3
   363   000004                     	ds	1
   364   000005                     ___awdiv@counter:
   365                           	callstack 0
   366   000005                     ___awmod@counter:
   367                           	callstack 0
   368   000005                     ___wmul@product:
   369                           	callstack 0
   370                           
   371                           ; 2 bytes @ 0x4
   372   000005                     	ds	1
   373   000006                     ___awdiv@sign:
   374                           	callstack 0
   375   000006                     ___awmod@sign:
   376                           	callstack 0
   377                           
   378                           ; 1 bytes @ 0x5
   379   000006                     	ds	1
   380   000007                     ?_abs:
   381                           	callstack 0
   382   000007                     ?_read_prec_or_width:
   383                           	callstack 0
   384   000007                     UpdateClock@seconds:
   385                           	callstack 0
   386   000007                     read_prec_or_width@fmt:
   387                           	callstack 0
   388   000007                     ___awdiv@quotient:
   389                           	callstack 0
   390   000007                     abs@a:
   391                           	callstack 0
   392                           
   393                           ; 2 bytes @ 0x6
   394   000007                     	ds	1
   395   000008                     UpdateClock@minutes:
   396                           	callstack 0
   397   000008                     read_prec_or_width@ap:
   398                           	callstack 0
   399                           
   400                           ; 1 bytes @ 0x7
   401   000008                     	ds	1
   402   000009                     ??_abs:
   403   000009                     UpdateClock@hours:
   404                           	callstack 0
   405   000009                     read_prec_or_width@c:
   406                           	callstack 0
   407   000009                     fputs@s:
   408                           	callstack 0
   409                           
   410                           ; 1 bytes @ 0x8
   411   000009                     	ds	1
   412   00000A                     UpdateClock@days:
   413                           	callstack 0
   414   00000A                     fputs@fp:
   415                           	callstack 0
   416   00000A                     read_prec_or_width@n:
   417                           	callstack 0
   418                           
   419                           ; 2 bytes @ 0x9
   420   00000A                     	ds	1
   421   00000B                     UpdateClock@DoW:
   422                           	callstack 0
   423   00000B                     fputs@c:
   424                           	callstack 0
   425                           
   426                           ; 1 bytes @ 0xA
   427   00000B                     	ds	1
   428   00000C                     UpdateClock@months:
   429                           	callstack 0
   430   00000C                     fputs@i:
   431                           	callstack 0
   432                           
   433                           ; 2 bytes @ 0xB
   434   00000C                     	ds	1
   435   00000D                     UpdateClock@years:
   436                           	callstack 0
   437                           
   438                           ; 1 bytes @ 0xC
   439   00000D                     	ds	1
   440   00000E                     UpdateClock@DSTstate:
   441                           	callstack 0
   442   00000E                     pad@fp:
   443                           	callstack 0
   444                           
   445                           ; 1 bytes @ 0xD
   446   00000E                     	ds	1
   447   00000F                     pad@buf:
   448                           	callstack 0
   449   00000F                     UpdateClock@TestMode:
   450                           	callstack 0
   451                           
   452                           ; 2 bytes @ 0xE
   453   00000F                     	ds	1
   454   000010                     pad@p:
   455                           	callstack 0
   456                           
   457                           ; 2 bytes @ 0xF
   458   000010                     	ds	1
   459   000011                     ??_UpdateClock:
   460                           
   461                           ; 1 bytes @ 0x10
   462   000011                     	ds	1
   463   000012                     ??_pad:
   464                           
   465                           ; 1 bytes @ 0x11
   466   000012                     	ds	1
   467   000013                     pad@i:
   468                           	callstack 0
   469                           
   470                           ; 2 bytes @ 0x12
   471   000013                     	ds	2
   472   000015                     dtoa@fp:
   473                           	callstack 0
   474                           
   475                           ; 1 bytes @ 0x14
   476   000015                     	ds	1
   477   000016                     dtoa@d:
   478                           	callstack 0
   479                           
   480                           ; 2 bytes @ 0x15
   481   000016                     	ds	1
   482   000017                     UpdateClock@DaysInMonth:
   483                           	callstack 0
   484                           
   485                           ; 24 bytes @ 0x16
   486   000017                     	ds	1
   487   000018                     _dtoa$1868:
   488                           	callstack 0
   489                           
   490                           ; 2 bytes @ 0x17
   491   000018                     	ds	2
   492   00001A                     dtoa@p:
   493                           	callstack 0
   494                           
   495                           ; 1 bytes @ 0x19
   496   00001A                     	ds	1
   497   00001B                     dtoa@w:
   498                           	callstack 0
   499                           
   500                           ; 2 bytes @ 0x1A
   501   00001B                     	ds	2
   502   00001D                     dtoa@s:
   503                           	callstack 0
   504                           
   505                           ; 1 bytes @ 0x1C
   506   00001D                     	ds	1
   507   00001E                     dtoa@i:
   508                           	callstack 0
   509                           
   510                           ; 2 bytes @ 0x1D
   511   00001E                     	ds	2
   512   000020                     vfpfcnvrt@fp:
   513                           	callstack 0
   514                           
   515                           ; 1 bytes @ 0x1F
   516   000020                     	ds	1
   517   000021                     vfpfcnvrt@fmt:
   518                           	callstack 0
   519                           
   520                           ; 1 bytes @ 0x20
   521   000021                     	ds	1
   522   000022                     vfpfcnvrt@ap:
   523                           	callstack 0
   524                           
   525                           ; 1 bytes @ 0x21
   526   000022                     	ds	1
   527   000023                     ??_vfpfcnvrt:
   528                           
   529                           ; 1 bytes @ 0x22
   530   000023                     	ds	2
   531   000025                     vfpfcnvrt@convarg:
   532                           	callstack 0
   533                           
   534                           ; 4 bytes @ 0x24
   535   000025                     	ds	4
   536   000029                     vfpfcnvrt@done:
   537                           	callstack 0
   538                           
   539                           ; 1 bytes @ 0x28
   540   000029                     	ds	1
   541   00002A                     vfpfcnvrt@cp:
   542                           	callstack 0
   543                           
   544                           ; 1 bytes @ 0x29
   545   00002A                     	ds	1
   546   00002B                     ?_vfprintf:
   547                           	callstack 0
   548   00002B                     vfprintf@fp:
   549                           	callstack 0
   550                           
   551                           ; 1 bytes @ 0x2A
   552   00002B                     	ds	1
   553   00002C                     vfprintf@fmt:
   554                           	callstack 0
   555                           
   556                           ; 1 bytes @ 0x2B
   557   00002C                     	ds	1
   558   00002D                     vfprintf@ap:
   559                           	callstack 0
   560                           
   561                           ; 1 bytes @ 0x2C
   562   00002D                     	ds	1
   563   00002E                     vfprintf@cfmt:
   564                           	callstack 0
   565                           
   566                           ; 1 bytes @ 0x2D
   567   00002E                     	ds	1
   568   00002F                     ?_sprintf:
   569                           	callstack 0
   570   00002F                     sprintf@s:
   571                           	callstack 0
   572                           
   573                           ; 1 bytes @ 0x2E
   574   00002F                     	ds	1
   575   000030                     sprintf@fmt:
   576                           	callstack 0
   577                           
   578                           ; 1 bytes @ 0x2F
   579   000030                     	ds	9
   580   000039                     sprintf@ap:
   581                           	callstack 0
   582                           
   583                           ; 1 bytes @ 0x38
   584   000039                     	ds	1
   585   00003A                     sprintf@f:
   586                           	callstack 0
   587                           
   588                           ; 12 bytes @ 0x39
   589   00003A                     	ds	12
   590   000046                     
   591                           ; 1 bytes @ 0x45
   592 ;;
   593 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   594 ;;
   595 ;; *************** function _main *****************
   596 ;; Defined at:
   597 ;;		line 30 in file "main.c"
   598 ;; Parameters:    Size  Location     Type
   599 ;;		None
   600 ;; Auto vars:     Size  Location     Type
   601 ;;  buffer         18    0[BANK0 ] unsigned char [18]
   602 ;;  clock          16   20[BANK0 ] struct time_structure
   603 ;;  TestMode        2   18[BANK0 ] int 
   604 ;; Return value:  Size  Location     Type
   605 ;;                  1    wreg      void 
   606 ;; Registers used:
   607 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   608 ;; Tracked objects:
   609 ;;		On entry : 0/0
   610 ;;		On exit  : 0/0
   611 ;;		Unchanged: 0/0
   612 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   613 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   614 ;;      Locals:         0      36       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   615 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   616 ;;      Totals:         0      36       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   617 ;;Total ram usage:       36 bytes
   618 ;; Hardware stack levels required when called: 9
   619 ;; This function calls:
   620 ;;		_ADC_init
   621 ;;		_Interrupts_init
   622 ;;		_LCD_Init
   623 ;;		_LCD_sendstring
   624 ;;		_LCD_setline
   625 ;;		_LEDarray_disp_bin
   626 ;;		_LEDarray_init
   627 ;;		_Timer0_init
   628 ;;		_UpdateClock
   629 ;;		_sprintf
   630 ;; This function is called by:
   631 ;;		Startup code after reset
   632 ;; This function uses a non-reentrant model
   633 ;;
   634                           
   635                           	psect	text0
   636   001670                     __ptext0:
   637                           	callstack 0
   638   001670                     _main:
   639                           	callstack 22
   640   001670                     
   641                           ;main.c: 33:     LEDarray_init();
   642   001670  EC88  F00F         	call	_LEDarray_init	;wreg free
   643   001674                     
   644                           ;main.c: 34:     Timer0_init();
   645   001674  ECAD  F00F         	call	_Timer0_init	;wreg free
   646   001678                     
   647                           ;main.c: 35:     Interrupts_init();
   648   001678  ECDD  F00F         	call	_Interrupts_init	;wreg free
   649   00167C                     
   650                           ;main.c: 37:     LCD_Init();
   651   00167C  ECDB  F00B         	call	_LCD_Init	;wreg free
   652   001680                     
   653                           ;main.c: 38:     ADC_init();
   654   001680  ECBD  F00F         	call	_ADC_init	;wreg free
   655   001684                     
   656                           ;main.c: 40:     char buffer[18];;main.c: 44:     TRISDbits.TRISD7 = 0;
   657   001684  9E84               	bcf	132,7,c	;volatile
   658   001686                     
   659                           ;main.c: 45:     LATDbits.LATD7 = 0;
   660   001686  9E7C               	bcf	124,7,c	;volatile
   661   001688                     
   662                           ;main.c: 48:     TRISHbits.TRISH3 = 0;
   663   001688  9688               	bcf	136,3,c	;volatile
   664   00168A                     
   665                           ;main.c: 49:     LATHbits.LATH3 = 0;
   666   00168A  9680               	bcf	128,3,c	;volatile
   667   00168C                     
   668                           ;main.c: 64:     struct time_structure clock;;main.c: 66:         GLOBALsecs = 55;
   669   00168C  0E00               	movlw	0
   670   00168E  0100               	movlb	0	; () banked
   671   001690  6FA5               	movwf	(_GLOBALsecs+1)& (0+255),b
   672   001692  0E37               	movlw	55
   673   001694  6FA4               	movwf	_GLOBALsecs& (0+255),b
   674   001696                     
   675                           ; BSR set to: 0
   676                           ;main.c: 67:         clock.minutes = 59;
   677   001696  0E00               	movlw	0
   678   001698  6F77               	movwf	(main@clock+3)& (0+255),b
   679   00169A  0E3B               	movlw	59
   680   00169C  6F76               	movwf	(main@clock+2)& (0+255),b
   681   00169E                     
   682                           ; BSR set to: 0
   683                           ;main.c: 68:         clock.hours = 23;
   684   00169E  0E00               	movlw	0
   685   0016A0  6F79               	movwf	(main@clock+5)& (0+255),b
   686   0016A2  0E17               	movlw	23
   687   0016A4  6F78               	movwf	(main@clock+4)& (0+255),b
   688   0016A6                     
   689                           ; BSR set to: 0
   690                           ;main.c: 69:         clock.days = 31;
   691   0016A6  0E00               	movlw	0
   692   0016A8  6F7B               	movwf	(main@clock+7)& (0+255),b
   693   0016AA  0E1F               	movlw	31
   694   0016AC  6F7A               	movwf	(main@clock+6)& (0+255),b
   695   0016AE                     
   696                           ; BSR set to: 0
   697                           ;main.c: 70:         clock.DoW = 5;
   698   0016AE  0E00               	movlw	0
   699   0016B0  6F7D               	movwf	(main@clock+9)& (0+255),b
   700   0016B2  0E05               	movlw	5
   701   0016B4  6F7C               	movwf	(main@clock+8)& (0+255),b
   702   0016B6                     
   703                           ; BSR set to: 0
   704                           ;main.c: 71:         clock.months = 12;
   705   0016B6  0E00               	movlw	0
   706   0016B8  6F7F               	movwf	(main@clock+11)& (0+255),b
   707   0016BA  0E0C               	movlw	12
   708   0016BC  6F7E               	movwf	(main@clock+10)& (0+255),b
   709   0016BE                     
   710                           ; BSR set to: 0
   711                           ;main.c: 72:         clock.years = 2024;
   712   0016BE  0E07               	movlw	7
   713   0016C0  6F81               	movwf	(main@clock+13)& (0+255),b
   714   0016C2  0EE8               	movlw	232
   715   0016C4  6F80               	movwf	(main@clock+12)& (0+255),b
   716   0016C6                     
   717                           ; BSR set to: 0
   718                           ;main.c: 73:         clock.DSTstate = 0;
   719   0016C6  0E00               	movlw	0
   720   0016C8  6F83               	movwf	(main@clock+15)& (0+255),b
   721   0016CA  0E00               	movlw	0
   722   0016CC  6F82               	movwf	(main@clock+14)& (0+255),b
   723   0016CE                     
   724                           ; BSR set to: 0
   725                           ;main.c: 94:         int TestMode = 1;
   726   0016CE  0E00               	movlw	0
   727   0016D0  6F73               	movwf	(main@TestMode+1)& (0+255),b
   728   0016D2  0E01               	movlw	1
   729   0016D4  6F72               	movwf	main@TestMode& (0+255),b
   730   0016D6                     
   731                           ; BSR set to: 0
   732                           ;main.c: 96:         clock.seconds = GLOBALsecs;
   733   0016D6  C0A4  F074         	movff	_GLOBALsecs,main@clock
   734   0016DA  C0A5  F075         	movff	_GLOBALsecs+1,main@clock+1
   735   0016DE                     
   736                           ; BSR set to: 0
   737                           ;main.c: 98:             clock.seconds = 0;
   738   0016DE  0E00               	movlw	0
   739   0016E0  6F75               	movwf	(main@clock+1)& (0+255),b
   740   0016E2  0E00               	movlw	0
   741   0016E4  6F74               	movwf	main@clock& (0+255),b
   742   0016E6                     
   743                           ; BSR set to: 0
   744                           ;main.c: 99:             GLOBALsecs = clock.hours;
   745   0016E6  C078  F0A4         	movff	main@clock+4,_GLOBALsecs
   746   0016EA  C079  F0A5         	movff	main@clock+5,_GLOBALsecs+1
   747   0016EE                     l2413:
   748                           
   749                           ;main.c: 105:         if (TestMode == 0){clock.seconds = GLOBALsecs;}
   750   0016EE  0100               	movlb	0	; () banked
   751   0016F0  5172               	movf	main@TestMode& (0+255),w,b
   752   0016F2  1173               	iorwf	(main@TestMode+1)& (0+255),w,b
   753   0016F4  A4D8               	btfss	status,2,c
   754   0016F6  EF7F  F00B         	goto	u2141
   755   0016FA  EF81  F00B         	goto	u2140
   756   0016FE                     u2141:
   757   0016FE  EF85  F00B         	goto	l2417
   758   001702                     u2140:
   759   001702                     
   760                           ; BSR set to: 0
   761   001702  C0A4  F074         	movff	_GLOBALsecs,main@clock
   762   001706  C0A5  F075         	movff	_GLOBALsecs+1,main@clock+1
   763   00170A                     l2417:
   764                           
   765                           ; BSR set to: 0
   766                           ;main.c: 107:         UpdateClock(&GLOBALsecs, &clock.minutes, &clock.hours, &clock.days
      +                          , &clock.DoW, &clock.months, &clock.years, &clock.DSTstate, TestMode);
   767   00170A  0EA4               	movlw	low _GLOBALsecs
   768   00170C  6E07               	movwf	UpdateClock@seconds^0,c
   769   00170E  0E76               	movlw	low (main@clock+2)
   770   001710  6E08               	movwf	UpdateClock@minutes^0,c
   771   001712  0E78               	movlw	low (main@clock+4)
   772   001714  6E09               	movwf	UpdateClock@hours^0,c
   773   001716  0E7A               	movlw	low (main@clock+6)
   774   001718  6E0A               	movwf	UpdateClock@days^0,c
   775   00171A  0E7C               	movlw	low (main@clock+8)
   776   00171C  6E0B               	movwf	UpdateClock@DoW^0,c
   777   00171E  0E7E               	movlw	low (main@clock+10)
   778   001720  6E0C               	movwf	UpdateClock@months^0,c
   779   001722  0E80               	movlw	low (main@clock+12)
   780   001724  6E0D               	movwf	UpdateClock@years^0,c
   781   001726  0E82               	movlw	low (main@clock+14)
   782   001728  6E0E               	movwf	UpdateClock@DSTstate^0,c
   783   00172A  C072  F00F         	movff	main@TestMode,UpdateClock@TestMode
   784   00172E  C073  F010         	movff	main@TestMode+1,UpdateClock@TestMode+1
   785   001732  EC23  F007         	call	_UpdateClock	;wreg free
   786   001736                     
   787                           ;main.c: 115:         LEDarray_disp_bin(clock.hours);
   788   001736  C078  F001         	movff	main@clock+4,LEDarray_disp_bin@number
   789   00173A  C079  F002         	movff	main@clock+5,LEDarray_disp_bin@number+1
   790   00173E  EC6B  F00C         	call	_LEDarray_disp_bin	;wreg free
   791   001742                     
   792                           ;main.c: 119:         LCD_setline(1);
   793   001742  0E01               	movlw	1
   794   001744  EC0D  F00F         	call	_LCD_setline
   795   001748                     
   796                           ;main.c: 121:         sprintf(buffer, "Time:%02d:%02d:%02d D%01d",clock.hours, clock.min
      +                          utes, clock.seconds, clock.DoW);
   797   001748  0E60               	movlw	low main@buffer
   798   00174A  6E2F               	movwf	sprintf@s^0,c
   799   00174C  0E01               	movlw	low STR_1
   800   00174E  6E30               	movwf	sprintf@fmt^0,c
   801   001750  C078  F031         	movff	main@clock+4,?_sprintf+2
   802   001754  C079  F032         	movff	main@clock+5,?_sprintf+3
   803   001758  C076  F033         	movff	main@clock+2,?_sprintf+4
   804   00175C  C077  F034         	movff	main@clock+3,?_sprintf+5
   805   001760  C074  F035         	movff	main@clock,?_sprintf+6
   806   001764  C075  F036         	movff	main@clock+1,?_sprintf+7
   807   001768  C07C  F037         	movff	main@clock+8,?_sprintf+8
   808   00176C  C07D  F038         	movff	main@clock+9,?_sprintf+9
   809   001770  EC2A  F00F         	call	_sprintf	;wreg free
   810   001774                     
   811                           ;main.c: 122:         LCD_sendstring(buffer);
   812   001774  0E60               	movlw	low main@buffer
   813   001776  6E04               	movwf	LCD_sendstring@string^0,c
   814   001778  EC5E  F00F         	call	_LCD_sendstring	;wreg free
   815   00177C                     
   816                           ;main.c: 123:         LCD_setline(2);
   817   00177C  0E02               	movlw	2
   818   00177E  EC0D  F00F         	call	_LCD_setline
   819   001782                     
   820                           ;main.c: 125:         sprintf(buffer, "Date:%02d/%02d/%04d",clock.days, clock.months, cl
      +                          ock.years);
   821   001782  0E60               	movlw	low main@buffer
   822   001784  6E2F               	movwf	sprintf@s^0,c
   823   001786  0E30               	movlw	low STR_2
   824   001788  6E30               	movwf	sprintf@fmt^0,c
   825   00178A  C07A  F031         	movff	main@clock+6,?_sprintf+2
   826   00178E  C07B  F032         	movff	main@clock+7,?_sprintf+3
   827   001792  C07E  F033         	movff	main@clock+10,?_sprintf+4
   828   001796  C07F  F034         	movff	main@clock+11,?_sprintf+5
   829   00179A  C080  F035         	movff	main@clock+12,?_sprintf+6
   830   00179E  C081  F036         	movff	main@clock+13,?_sprintf+7
   831   0017A2  EC2A  F00F         	call	_sprintf	;wreg free
   832   0017A6                     
   833                           ;main.c: 126:         LCD_sendstring(buffer);
   834   0017A6  0E60               	movlw	low main@buffer
   835   0017A8  6E04               	movwf	LCD_sendstring@string^0,c
   836   0017AA  EC5E  F00F         	call	_LCD_sendstring	;wreg free
   837   0017AE  EF77  F00B         	goto	l2413
   838   0017B2  EF18  F000         	goto	start
   839   0017B6                     __end_of_main:
   840                           	callstack 0
   841                           
   842 ;; *************** function _sprintf *****************
   843 ;; Defined at:
   844 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\nf_sprintf.c"
   845 ;; Parameters:    Size  Location     Type
   846 ;;  s               1   46[COMRAM] PTR unsigned char 
   847 ;;		 -> main@buffer(18), 
   848 ;;  fmt             1   47[COMRAM] PTR const unsigned char 
   849 ;;		 -> STR_3(21), STR_2(20), STR_1(26), 
   850 ;; Auto vars:     Size  Location     Type
   851 ;;  f              12   57[COMRAM] struct _IO_FILE
   852 ;;  ret             2    0        int 
   853 ;;  ap              1   56[COMRAM] PTR void [1]
   854 ;;		 -> ?_sprintf(2), 
   855 ;; Return value:  Size  Location     Type
   856 ;;                  2   46[COMRAM] int 
   857 ;; Registers used:
   858 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   859 ;; Tracked objects:
   860 ;;		On entry : 0/0
   861 ;;		On exit  : 0/0
   862 ;;		Unchanged: 0/0
   863 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   864 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   865 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   866 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   867 ;;      Totals:        23       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   868 ;;Total ram usage:       23 bytes
   869 ;; Hardware stack levels used: 1
   870 ;; Hardware stack levels required when called: 8
   871 ;; This function calls:
   872 ;;		_vfprintf
   873 ;; This function is called by:
   874 ;;		_main
   875 ;;		_ADC2String
   876 ;; This function uses a non-reentrant model
   877 ;;
   878                           
   879                           	psect	text1
   880   001E54                     __ptext1:
   881                           	callstack 0
   882   001E54                     _sprintf:
   883                           	callstack 22
   884   001E54  0E31               	movlw	low (?_sprintf+2)
   885   001E56  6E39               	movwf	sprintf@ap^0,c
   886   001E58  C02F  F03A         	movff	sprintf@s,sprintf@f
   887   001E5C  0E00               	movlw	0
   888   001E5E  6E3E               	movwf	(sprintf@f+4)^0,c
   889   001E60  0E00               	movlw	0
   890   001E62  6E3D               	movwf	(sprintf@f+3)^0,c
   891   001E64  0E00               	movlw	0
   892   001E66  6E45               	movwf	(sprintf@f+11)^0,c
   893   001E68  0E00               	movlw	0
   894   001E6A  6E44               	movwf	(sprintf@f+10)^0,c
   895   001E6C  0E3A               	movlw	low sprintf@f
   896   001E6E  6E2B               	movwf	vfprintf@fp^0,c
   897   001E70  C030  F02C         	movff	sprintf@fmt,vfprintf@fmt
   898   001E74  0E39               	movlw	low sprintf@ap
   899   001E76  6E2D               	movwf	vfprintf@ap^0,c
   900   001E78  ECAE  F00E         	call	_vfprintf	;wreg free
   901   001E7C  502F               	movf	sprintf@s^0,w,c
   902   001E7E  243D               	addwf	(sprintf@f+3)^0,w,c
   903   001E80  6ED9               	movwf	fsr2l,c
   904   001E82  6ADA               	clrf	fsr2h,c
   905   001E84  6ADF               	clrf	indf2,c
   906   001E86  0012               	return		;funcret
   907   001E88                     __end_of_sprintf:
   908                           	callstack 0
   909                           
   910 ;; *************** function _vfprintf *****************
   911 ;; Defined at:
   912 ;;		line 1817 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
   913 ;; Parameters:    Size  Location     Type
   914 ;;  fp              1   42[COMRAM] PTR struct _IO_FILE
   915 ;;		 -> sprintf@f(12), 
   916 ;;  fmt             1   43[COMRAM] PTR const unsigned char 
   917 ;;		 -> STR_3(21), STR_2(20), STR_1(26), 
   918 ;;  ap              1   44[COMRAM] PTR PTR void 
   919 ;;		 -> sprintf@ap(1), 
   920 ;; Auto vars:     Size  Location     Type
   921 ;;  cfmt            1   45[COMRAM] PTR unsigned char 
   922 ;;		 -> STR_3(21), STR_2(20), STR_1(26), 
   923 ;; Return value:  Size  Location     Type
   924 ;;                  2   42[COMRAM] int 
   925 ;; Registers used:
   926 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   927 ;; Tracked objects:
   928 ;;		On entry : 0/0
   929 ;;		On exit  : 0/0
   930 ;;		Unchanged: 0/0
   931 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   932 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   933 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   934 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   935 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   936 ;;Total ram usage:        4 bytes
   937 ;; Hardware stack levels used: 1
   938 ;; Hardware stack levels required when called: 7
   939 ;; This function calls:
   940 ;;		_vfpfcnvrt
   941 ;; This function is called by:
   942 ;;		_sprintf
   943 ;; This function uses a non-reentrant model
   944 ;;
   945                           
   946                           	psect	text2
   947   001D5C                     __ptext2:
   948                           	callstack 0
   949   001D5C                     _vfprintf:
   950                           	callstack 22
   951   001D5C                     
   952                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1817: int vfprint
=======
    75                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    76                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    77                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    78                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    79                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    80                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    81                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    82                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    83                           ; 
    84                           ; 
    85                           ; Code-generator required, PIC18F67K40 Definitions
    86                           ; 
    87                           ; SFR Addresses
    88   000000                     
    89                           	psect	idataBANK0
    90   00351E                     __pidataBANK0:
    91                           	callstack 0
    92                           
    93                           ;initializer for UpdateClock@F14155
    94   00351E  001F               	dw	31
    95   003520  001C               	dw	28
    96   003522  001F               	dw	31
    97   003524  001E               	dw	30
    98   003526  001F               	dw	31
    99   003528  001E               	dw	30
   100   00352A  001F               	dw	31
   101   00352C  001F               	dw	31
   102   00352E  001E               	dw	30
   103   003530  001F               	dw	31
   104   003532  001E               	dw	30
   105   003534  001F               	dw	31
   106   000000                     _TRISCbits	set	3971
   107   000000                     _TRISEbits	set	3973
   108   000000                     _LATEbits	set	3965
   109   000000                     _LATCbits	set	3963
   110   000000                     _LATBbits	set	3962
   111   000000                     _TRISBbits	set	3970
   112   000000                     _LATFbits	set	3966
   113   000000                     _TRISAbits	set	3969
   114   000000                     _LATGbits	set	3967
   115   000000                     _TRISGbits	set	3975
   116   000000                     _CM1CON1bits	set	3793
   117   000000                     _TRISFbits	set	3974
   118   000000                     _LATHbits	set	3968
   119   000000                     _TRISHbits	set	3976
   120   000000                     _IPR0bits	set	3615
   121   000000                     _PIE0bits	set	3625
   122   000000                     _LATDbits	set	3964
   123   000000                     _TRISDbits	set	3972
   124   000000                     _TMR0L	set	4051
   125   000000                     _TMR0H	set	4052
   126   000000                     _T0CON0bits	set	4053
   127   000000                     _T0CON1bits	set	4054
   128   000000                     _INTCONbits	set	4082
   129   000000                     _PIR0bits	set	3635
   130   000000                     _ANSELAbits	set	3730
   131   000000                     _DAC1CON0bits	set	3782
   132   000000                     _CM1CON0bits	set	3792
   133   000000                     _CM1NCHbits	set	3794
   134   000000                     _DAC1CON1bits	set	3783
   135   000000                     _ADREFbits	set	3928
   136   000000                     _LATAbits	set	3961
   137   000000                     _CM1PCHbits	set	3795
   138   000000                     _ADPCH	set	3935
   139   000000                     _ADRESH	set	3940
   140   000000                     _ADCON0bits	set	3936
   141                           
   142                           	psect	smallconst
   143   000E00                     __psmallconst:
   144                           	callstack 0
   145   000E00  00                 	db	0
   146   000E01                     STR_1:
   147                           
   148                           ; BSR set to: 14
   149   000E01  54                 	db	84	;'T'
   150   000E02  69                 	db	105	;'i'
   151   000E03  6D                 	db	109	;'m'
   152   000E04  65                 	db	101	;'e'
   153   000E05  3A                 	db	58	;':'
   154   000E06  25                 	db	37
   155   000E07  30                 	db	48	;'0'
   156   000E08  32                 	db	50	;'2'
   157   000E09  64                 	db	100	;'d'
   158   000E0A  3A                 	db	58	;':'
   159   000E0B  25                 	db	37
   160   000E0C  30                 	db	48	;'0'
   161   000E0D  32                 	db	50	;'2'
   162   000E0E  64                 	db	100	;'d'
   163   000E0F  3A                 	db	58	;':'
   164   000E10  25                 	db	37
   165   000E11  30                 	db	48	;'0'
   166   000E12  32                 	db	50	;'2'
   167   000E13  64                 	db	100	;'d'
   168   000E14  20                 	db	32
   169   000E15  44                 	db	68	;'D'
   170   000E16  25                 	db	37
   171   000E17  30                 	db	48	;'0'
   172   000E18  31                 	db	49	;'1'
   173   000E19  64                 	db	100	;'d'
   174   000E1A  00                 	db	0
   175   000E1B                     
   176                           ; BSR set to: 14
   177   000E1B  54                 	db	84	;'T'
   178   000E1C  69                 	db	105	;'i'
   179   000E1D  6D                 	db	109	;'m'
   180   000E1E  65                 	db	101	;'e'
   181   000E1F  3A                 	db	58	;':'
   182   000E20  20                 	db	32
   183   000E21  25                 	db	37
   184   000E22  30                 	db	48	;'0'
   185   000E23  32                 	db	50	;'2'
   186   000E24  64                 	db	100	;'d'
   187   000E25  3A                 	db	58	;':'
   188   000E26  25                 	db	37
   189   000E27  30                 	db	48	;'0'
   190   000E28  32                 	db	50	;'2'
   191   000E29  64                 	db	100	;'d'
   192   000E2A  3A                 	db	58	;':'
   193   000E2B  25                 	db	37
   194   000E2C  30                 	db	48	;'0'
   195   000E2D  34                 	db	52	;'4'
   196   000E2E  64                 	db	100	;'d'
   197   000E2F  00                 	db	0
   198   000E30                     STR_2:
   199                           
   200                           ; BSR set to: 14
   201   000E30  44                 	db	68	;'D'
   202   000E31  61                 	db	97	;'a'
   203   000E32  74                 	db	116	;'t'
   204   000E33  65                 	db	101	;'e'
   205   000E34  3A                 	db	58	;':'
   206   000E35  25                 	db	37
   207   000E36  30                 	db	48	;'0'
   208   000E37  32                 	db	50	;'2'
   209   000E38  64                 	db	100	;'d'
   210   000E39  2F                 	db	47
   211   000E3A  25                 	db	37
   212   000E3B  30                 	db	48	;'0'
   213   000E3C  32                 	db	50	;'2'
   214   000E3D  64                 	db	100	;'d'
   215   000E3E  2F                 	db	47
   216   000E3F  25                 	db	37
   217   000E40  30                 	db	48	;'0'
   218   000E41  34                 	db	52	;'4'
   219   000E42  64                 	db	100	;'d'
   220   000E43  00                 	db	0
   221   000E44  00                 	db	0	; dummy byte at the end
   222   000000                     
   223                           ; #config settings
   224                           
   225                           	psect	cinit
   226   00329E                     __pcinit:
   227                           	callstack 0
   228   00329E                     start_initialization:
   229                           	callstack 0
   230   00329E                     __initialization:
   231                           	callstack 0
   232                           
   233                           ; Initialize objects allocated to BANK0 (24 bytes)
   234                           ; load TBLPTR registers with __pidataBANK0
   235   00329E  0E1E               	movlw	low __pidataBANK0
   236   0032A0  6EF6               	movwf	tblptrl,c
   237   0032A2  0E35               	movlw	high __pidataBANK0
   238   0032A4  6EF7               	movwf	tblptrh,c
   239   0032A6  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   240   0032A8  6EF8               	movwf	tblptru,c
   241   0032AA  EE00  F080         	lfsr	0,__pdataBANK0
   242   0032AE  EE10 F018          	lfsr	1,24
   243   0032B2                     copy_data0:
   244   0032B2  0009               	tblrd		*+
   245   0032B4  CFF5 FFEE          	movff	tablat,postinc0
   246   0032B8  50E5               	movf	postdec1,w,c
   247   0032BA  50E1               	movf	fsr1l,w,c
   248   0032BC  E1FA               	bnz	copy_data0
   249                           
   250                           ; Clear objects allocated to BANK1 (4 bytes)
   251   0032BE  0101               	movlb	1
   252   0032C0  6BE4               	clrf	(__pbssBANK1+3)& (0+255),b
   253   0032C2  6BE3               	clrf	(__pbssBANK1+2)& (0+255),b
   254   0032C4  6BE2               	clrf	(__pbssBANK1+1)& (0+255),b
   255   0032C6  6BE1               	clrf	__pbssBANK1& (0+255),b
   256                           
   257                           ; Clear objects allocated to BANK0 (32 bytes)
   258   0032C8  EE00  F060         	lfsr	0,__pbssBANK0
   259   0032CC  0E20               	movlw	32
   260   0032CE                     clear_0:
   261   0032CE  6AEE               	clrf	postinc0,c
   262   0032D0  06E8               	decf	wreg,f,c
   263   0032D2  E1FD               	bnz	clear_0
   264                           
   265                           ; Clear objects allocated to COMRAM (5 bytes)
   266   0032D4  6A5D               	clrf	(__pbssCOMRAM+4)& (0+255),c
   267   0032D6  6A5C               	clrf	(__pbssCOMRAM+3)& (0+255),c
   268   0032D8  6A5B               	clrf	(__pbssCOMRAM+2)& (0+255),c
   269   0032DA  6A5A               	clrf	(__pbssCOMRAM+1)& (0+255),c
   270   0032DC  6A59               	clrf	__pbssCOMRAM& (0+255),c
   271   0032DE                     end_of_initialization:
   272                           	callstack 0
   273   0032DE                     __end_of__initialization:
   274                           	callstack 0
   275   0032DE  905E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   276   0032E0  925E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   277   0032E2  0100               	movlb	0
   278   0032E4  EF23  F007         	goto	_main	;jump to C main() function
   279                           
   280                           	psect	bssCOMRAM
   281   000059                     __pbssCOMRAM:
   282                           	callstack 0
   283   000059                     _width:
   284                           	callstack 0
   285   000059                     	ds	2
   286   00005B                     _prec:
   287                           	callstack 0
   288   00005B                     	ds	2
   289   00005D                     _flags:
   290                           	callstack 0
   291   00005D                     	ds	1
   292                           
   293                           	psect	bssBANK0
   294   000060                     __pbssBANK0:
   295                           	callstack 0
   296   000060                     _dbuf:
   297                           	callstack 0
   298   000060                     	ds	32
   299                           
   300                           	psect	dataBANK0
   301   000080                     __pdataBANK0:
   302                           	callstack 0
   303   000080                     UpdateClock@F14155:
   304                           	callstack 0
   305   000080                     	ds	24
   306                           
   307                           	psect	bssBANK1
   308   0001E1                     __pbssBANK1:
   309                           	callstack 0
   310   0001E1                     _GLOBALsecs:
   311                           	callstack 0
   312   0001E1                     	ds	2
   313   0001E3                     _ticker:
   314                           	callstack 0
   315   0001E3                     	ds	2
   316                           
   317                           	psect	cstackBANK1
   318   000100                     __pcstackBANK1:
   319                           	callstack 0
   320   000100                     main@buffer:
   321                           	callstack 0
   322                           
   323                           ; 18 bytes @ 0x0
   324   000100                     	ds	18
   325   000112                     main@minutes_temp:
   326                           	callstack 0
   327                           
   328                           ; 2 bytes @ 0x12
   329   000112                     	ds	2
   330   000114                     main@knownSolarMidnight:
   331                           	callstack 0
   332                           
   333                           ; 2 bytes @ 0x14
   334   000114                     	ds	2
   335   000116                     main@minute_diff:
   336                           	callstack 0
   337                           
   338                           ; 2 bytes @ 0x16
   339   000116                     	ds	2
   340   000118                     main@previousClockDays:
   341                           	callstack 0
   342                           
   343                           ; 2 bytes @ 0x18
   344   000118                     	ds	2
   345   00011A                     _main$298:
   346                           	callstack 0
   347                           
   348                           ; 1 bytes @ 0x1A
   349   00011A                     	ds	1
   350   00011B                     main@daycount:
   351                           	callstack 0
   352                           
   353                           ; 2 bytes @ 0x1B
   354   00011B                     	ds	2
   355   00011D                     main@TestMode:
   356                           	callstack 0
   357                           
   358                           ; 2 bytes @ 0x1D
   359   00011D                     	ds	2
   360   00011F                     main@light_threshold:
   361                           	callstack 0
   362                           
   363                           ; 2 bytes @ 0x1F
   364   00011F                     	ds	2
   365   000121                     main@avgSolarMidnight:
   366                           	callstack 0
   367                           
   368                           ; 2 bytes @ 0x21
   369   000121                     	ds	2
   370   000123                     main@operation:
   371                           	callstack 0
   372                           
   373                           ; 2 bytes @ 0x23
   374   000123                     	ds	2
   375   000125                     main@hours_temp:
   376                           	callstack 0
   377                           
   378                           ; 2 bytes @ 0x25
   379   000125                     	ds	2
   380   000127                     main@i:
   381                           	callstack 0
   382                           
   383                           ; 2 bytes @ 0x27
   384   000127                     	ds	2
   385   000129                     main@SolarMidnight:
   386                           	callstack 0
   387                           
   388                           ; 32 bytes @ 0x29
   389   000129                     	ds	32
   390   000149                     main@Dusk:
   391                           	callstack 0
   392                           
   393                           ; 32 bytes @ 0x49
   394   000149                     	ds	32
   395   000169                     main@Dawn:
   396                           	callstack 0
   397                           
   398                           ; 32 bytes @ 0x69
   399   000169                     	ds	32
   400   000189                     main@SolarPerMonth:
   401                           	callstack 0
   402                           
   403                           ; 72 bytes @ 0x89
   404   000189                     	ds	72
   405   0001D1                     main@clock:
   406                           	callstack 0
   407                           
   408                           ; 16 bytes @ 0xD1
   409   0001D1                     	ds	16
   410                           
   411                           	psect	cstackCOMRAM
   412   000001                     __pcstackCOMRAM:
   413                           	callstack 0
   414   000001                     ?_ADC_getval:
   415                           	callstack 0
   416   000001                     ?___wmul:
   417                           	callstack 0
   418   000001                     ?___awdiv:
   419                           	callstack 0
   420   000001                     ?___awmod:
   421                           	callstack 0
   422   000001                     ?___lwdiv:
   423                           	callstack 0
   424   000001                     ?___xxtofl:
   425                           	callstack 0
   426   000001                     LCD_sendnibble@number:
   427                           	callstack 0
   428   000001                     LEDarray_disp_bin@number:
   429                           	callstack 0
   430   000001                     ArrayAppend@arrayTime:
   431                           	callstack 0
   432   000001                     ___wmul@multiplier:
   433                           	callstack 0
   434   000001                     ___awdiv@dividend:
   435                           	callstack 0
   436   000001                     ___awmod@dividend:
   437                           	callstack 0
   438   000001                     ___lwdiv@dividend:
   439                           	callstack 0
   440   000001                     fputc@c:
   441                           	callstack 0
   442   000001                     ___xxtofl@val:
   443                           	callstack 0
   444                           
   445                           ; 4 bytes @ 0x0
   446   000001                     	ds	1
   447   000002                     LCD_sendbyte@type:
   448                           	callstack 0
   449                           
   450                           ; 1 bytes @ 0x1
   451   000002                     	ds	1
   452   000003                     LCD_sendbyte@Byte:
   453                           	callstack 0
   454   000003                     fputc@fp:
   455                           	callstack 0
   456   000003                     ADC_getval@tmpval:
   457                           	callstack 0
   458   000003                     ArrayAppend@size:
   459                           	callstack 0
   460   000003                     ___wmul@multiplicand:
   461                           	callstack 0
   462   000003                     ___awdiv@divisor:
   463                           	callstack 0
   464   000003                     ___awmod@divisor:
   465                           	callstack 0
   466   000003                     ___lwdiv@divisor:
   467                           	callstack 0
   468                           
   469                           ; 2 bytes @ 0x2
   470   000003                     	ds	1
   471   000004                     ??_LCD_Init:
   472   000004                     ??_fputc:
   473   000004                     LCD_setline@line:
   474                           	callstack 0
   475   000004                     LCD_sendstring@string:
   476                           	callstack 0
   477                           
   478                           ; 2 bytes @ 0x3
   479   000004                     	ds	1
   480   000005                     ??___xxtofl:
   481   000005                     ___awdiv@counter:
   482                           	callstack 0
   483   000005                     ___awmod@counter:
   484                           	callstack 0
   485   000005                     ArrayAppend@Time:
   486                           	callstack 0
   487   000005                     ___wmul@product:
   488                           	callstack 0
   489   000005                     ___lwdiv@quotient:
   490                           	callstack 0
   491                           
   492                           ; 2 bytes @ 0x4
   493   000005                     	ds	1
   494   000006                     ___awdiv@sign:
   495                           	callstack 0
   496   000006                     ___awmod@sign:
   497                           	callstack 0
   498                           
   499                           ; 1 bytes @ 0x5
   500   000006                     	ds	1
   501   000007                     ??_ArrayAppend:
   502   000007                     ?_abs:
   503                           	callstack 0
   504   000007                     ?_read_prec_or_width:
   505                           	callstack 0
   506   000007                     ___lwdiv@counter:
   507                           	callstack 0
   508   000007                     read_prec_or_width@fmt:
   509                           	callstack 0
   510   000007                     UpdateClock@ticker:
   511                           	callstack 0
   512   000007                     ___awdiv@quotient:
   513                           	callstack 0
   514   000007                     abs@a:
   515                           	callstack 0
   516                           
   517                           ; 2 bytes @ 0x6
   518   000007                     	ds	1
   519   000008                     ?_ArrayAverage:
   520                           	callstack 0
   521   000008                     read_prec_or_width@ap:
   522                           	callstack 0
   523   000008                     ArrayAverage@arrayTime:
   524                           	callstack 0
   525                           
   526                           ; 2 bytes @ 0x7
   527   000008                     	ds	1
   528   000009                     ??_abs:
   529   000009                     ___xxtofl@sign:
   530                           	callstack 0
   531   000009                     read_prec_or_width@c:
   532                           	callstack 0
   533   000009                     fputs@s:
   534                           	callstack 0
   535   000009                     UpdateClock@seconds:
   536                           	callstack 0
   537                           
   538                           ; 2 bytes @ 0x8
   539   000009                     	ds	1
   540   00000A                     ___xxtofl@exp:
   541                           	callstack 0
   542   00000A                     fputs@fp:
   543                           	callstack 0
   544   00000A                     ArrayAppend@i:
   545                           	callstack 0
   546   00000A                     ArrayAverage@size:
   547                           	callstack 0
   548   00000A                     read_prec_or_width@n:
   549                           	callstack 0
   550                           
   551                           ; 2 bytes @ 0x9
   552   00000A                     	ds	1
   553   00000B                     fputs@c:
   554                           	callstack 0
   555   00000B                     UpdateClock@minutes:
   556                           	callstack 0
   557   00000B                     ___xxtofl@arg:
   558                           	callstack 0
   559                           
   560                           ; 4 bytes @ 0xA
   561   00000B                     	ds	1
   562   00000C                     ??_ArrayAverage:
   563   00000C                     fputs@i:
   564                           	callstack 0
   565                           
   566                           ; 2 bytes @ 0xB
   567   00000C                     	ds	1
   568   00000D                     UpdateClock@hours:
   569                           	callstack 0
   570                           
   571                           ; 2 bytes @ 0xC
   572   00000D                     	ds	1
   573   00000E                     pad@fp:
   574                           	callstack 0
   575                           
   576                           ; 1 bytes @ 0xD
   577   00000E                     	ds	1
   578   00000F                     ?___flmul:
   579                           	callstack 0
   580   00000F                     pad@buf:
   581                           	callstack 0
   582   00000F                     UpdateClock@days:
   583                           	callstack 0
   584   00000F                     ArrayAverage@average:
   585                           	callstack 0
   586   00000F                     ___flmul@b:
   587                           	callstack 0
   588                           
   589                           ; 4 bytes @ 0xE
   590   00000F                     	ds	1
   591   000010                     pad@p:
   592                           	callstack 0
   593                           
   594                           ; 2 bytes @ 0xF
   595   000010                     	ds	1
   596   000011                     UpdateClock@DoW:
   597                           	callstack 0
   598   000011                     ArrayAverage@sum:
   599                           	callstack 0
   600                           
   601                           ; 2 bytes @ 0x10
   602   000011                     	ds	1
   603   000012                     ??_pad:
   604                           
   605                           ; 1 bytes @ 0x11
   606   000012                     	ds	1
   607   000013                     UpdateClock@months:
   608                           	callstack 0
   609   000013                     ArrayAverage@i:
   610                           	callstack 0
   611   000013                     pad@i:
   612                           	callstack 0
   613   000013                     ___flmul@a:
   614                           	callstack 0
   615                           
   616                           ; 4 bytes @ 0x12
   617   000013                     	ds	2
   618   000015                     dtoa@fp:
   619                           	callstack 0
   620   000015                     UpdateClock@years:
   621                           	callstack 0
   622                           
   623                           ; 2 bytes @ 0x14
   624   000015                     	ds	1
   625   000016                     dtoa@d:
   626                           	callstack 0
   627                           
   628                           ; 2 bytes @ 0x15
   629   000016                     	ds	1
   630   000017                     ??___flmul:
   631   000017                     UpdateClock@DSTstate:
   632                           	callstack 0
   633                           
   634                           ; 2 bytes @ 0x16
   635   000017                     	ds	1
   636   000018                     _dtoa$1936:
   637                           	callstack 0
   638                           
   639                           ; 2 bytes @ 0x17
   640   000018                     	ds	1
   641   000019                     UpdateClock@TestMode:
   642                           	callstack 0
   643                           
   644                           ; 2 bytes @ 0x18
   645   000019                     	ds	1
   646   00001A                     dtoa@p:
   647                           	callstack 0
   648                           
   649                           ; 1 bytes @ 0x19
   650   00001A                     	ds	1
   651   00001B                     ??_UpdateClock:
   652   00001B                     ___flmul@sign:
   653                           	callstack 0
   654   00001B                     dtoa@w:
   655                           	callstack 0
   656                           
   657                           ; 2 bytes @ 0x1A
   658   00001B                     	ds	1
   659   00001C                     ___flmul@grs:
   660                           	callstack 0
   661                           
   662                           ; 4 bytes @ 0x1B
   663   00001C                     	ds	1
   664   00001D                     dtoa@s:
   665                           	callstack 0
   666                           
   667                           ; 1 bytes @ 0x1C
   668   00001D                     	ds	1
   669   00001E                     dtoa@i:
   670                           	callstack 0
   671                           
   672                           ; 2 bytes @ 0x1D
   673   00001E                     	ds	2
   674   000020                     ___flmul@aexp:
   675                           	callstack 0
   676   000020                     vfpfcnvrt@fp:
   677                           	callstack 0
   678                           
   679                           ; 1 bytes @ 0x1F
   680   000020                     	ds	1
   681   000021                     ___flmul@bexp:
   682                           	callstack 0
   683   000021                     vfpfcnvrt@fmt:
   684                           	callstack 0
   685   000021                     UpdateClock@DaysInMonth:
   686                           	callstack 0
   687                           
   688                           ; 24 bytes @ 0x20
   689   000021                     	ds	1
   690   000022                     vfpfcnvrt@ap:
   691                           	callstack 0
   692   000022                     ___flmul@prod:
   693                           	callstack 0
   694                           
   695                           ; 4 bytes @ 0x21
   696   000022                     	ds	1
   697   000023                     ??_vfpfcnvrt:
   698                           
   699                           ; 1 bytes @ 0x22
   700   000023                     	ds	2
   701   000025                     vfpfcnvrt@convarg:
   702                           	callstack 0
   703                           
   704                           ; 4 bytes @ 0x24
   705   000025                     	ds	1
   706   000026                     ___flmul@temp:
   707                           	callstack 0
   708                           
   709                           ; 2 bytes @ 0x25
   710   000026                     	ds	2
   711   000028                     ?___fladd:
   712                           	callstack 0
   713   000028                     ___fladd@b:
   714                           	callstack 0
   715                           
   716                           ; 4 bytes @ 0x27
   717   000028                     	ds	1
   718   000029                     vfpfcnvrt@done:
   719                           	callstack 0
   720                           
   721                           ; 1 bytes @ 0x28
   722   000029                     	ds	1
   723   00002A                     vfpfcnvrt@cp:
   724                           	callstack 0
   725                           
   726                           ; 1 bytes @ 0x29
   727   00002A                     	ds	1
   728   00002B                     ?_vfprintf:
   729                           	callstack 0
   730   00002B                     vfprintf@fp:
   731                           	callstack 0
   732                           
   733                           ; 1 bytes @ 0x2A
   734   00002B                     	ds	1
   735   00002C                     vfprintf@fmt:
   736                           	callstack 0
   737   00002C                     ___fladd@a:
   738                           	callstack 0
   739                           
   740                           ; 4 bytes @ 0x2B
   741   00002C                     	ds	1
   742   00002D                     vfprintf@ap:
   743                           	callstack 0
   744                           
   745                           ; 1 bytes @ 0x2C
   746   00002D                     	ds	1
   747   00002E                     vfprintf@cfmt:
   748                           	callstack 0
   749                           
   750                           ; 1 bytes @ 0x2D
   751   00002E                     	ds	1
   752   00002F                     ?_sprintf:
   753                           	callstack 0
   754   00002F                     sprintf@s:
   755                           	callstack 0
   756                           
   757                           ; 2 bytes @ 0x2E
   758   00002F                     	ds	1
   759   000030                     ??___fladd:
   760                           
   761                           ; 1 bytes @ 0x2F
   762   000030                     	ds	1
   763   000031                     sprintf@fmt:
   764                           	callstack 0
   765                           
   766                           ; 1 bytes @ 0x30
   767   000031                     	ds	3
   768   000034                     ___fladd@signs:
   769                           	callstack 0
   770                           
   771                           ; 1 bytes @ 0x33
   772   000034                     	ds	1
   773   000035                     ___fladd@aexp:
   774                           	callstack 0
   775                           
   776                           ; 1 bytes @ 0x34
   777   000035                     	ds	1
   778   000036                     ___fladd@bexp:
   779                           	callstack 0
   780                           
   781                           ; 1 bytes @ 0x35
   782   000036                     	ds	1
   783   000037                     ___fladd@grs:
   784                           	callstack 0
   785                           
   786                           ; 1 bytes @ 0x36
   787   000037                     	ds	1
   788   000038                     ?___fltol:
   789                           	callstack 0
   790   000038                     ___fltol@f1:
   791                           	callstack 0
   792                           
   793                           ; 4 bytes @ 0x37
   794   000038                     	ds	2
   795   00003A                     sprintf@ap:
   796                           	callstack 0
   797                           
   798                           ; 1 bytes @ 0x39
   799   00003A                     	ds	1
   800   00003B                     sprintf@f:
   801                           	callstack 0
   802                           
   803                           ; 12 bytes @ 0x3A
   804   00003B                     	ds	1
   805   00003C                     ??___fltol:
   806                           
   807                           ; 1 bytes @ 0x3B
   808   00003C                     	ds	4
   809   000040                     ___fltol@sign1:
   810                           	callstack 0
   811                           
   812                           ; 1 bytes @ 0x3F
   813   000040                     	ds	1
   814   000041                     ___fltol@exp1:
   815                           	callstack 0
   816                           
   817                           ; 1 bytes @ 0x40
   818   000041                     	ds	6
   819   000047                     ??_main:
   820                           
   821                           ; 1 bytes @ 0x46
   822   000047                     	ds	18
   823                           
   824 ;;
   825 ;;Main: autosize = 0, tempsize = 18, incstack = 0, save=0
   826 ;;
   827 ;; *************** function _main *****************
   828 ;; Defined at:
   829 ;;		line 19 in file "main.c"
   830 ;; Parameters:    Size  Location     Type
   831 ;;		None
   832 ;; Auto vars:     Size  Location     Type
   833 ;;  i               2   39[BANK1 ] int 
   834 ;;  SolarMidnigh   32   41[BANK1 ] struct array_structure
   835 ;;  hours_temp      2   37[BANK1 ] int 
   836 ;;  operation       2   35[BANK1 ] int 
   837 ;;  minute_diff     2   22[BANK1 ] int 
   838 ;;  knownSolarMi    2   20[BANK1 ] int 
   839 ;;  minutes_temp    2   18[BANK1 ] int 
   840 ;;  SolarPerMont   72  137[BANK1 ] struct month_structure
   841 ;;  Dawn           32  105[BANK1 ] struct array_structure
   842 ;;  Dusk           32   73[BANK1 ] struct array_structure
   843 ;;  buffer         18    0[BANK1 ] unsigned char [18]
   844 ;;  clock          16  209[BANK1 ] struct time_structure
   845 ;;  avgSolarMidn    2   33[BANK1 ] int 
   846 ;;  light_thresh    2   31[BANK1 ] unsigned int 
   847 ;;  TestMode        2   29[BANK1 ] int 
   848 ;;  daycount        2   27[BANK1 ] unsigned int 
   849 ;;  previousCloc    2   24[BANK1 ] unsigned int 
   850 ;; Return value:  Size  Location     Type
   851 ;;                  1    wreg      void 
   852 ;; Registers used:
   853 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   854 ;; Tracked objects:
   855 ;;		On entry : 0/0
   856 ;;		On exit  : 0/0
   857 ;;		Unchanged: 0/0
   858 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   859 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   860 ;;      Locals:         0       0     225       0       0       0       0       0       0       0       0       0       
      +0       0       0
   861 ;;      Temps:         18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   862 ;;      Totals:        18       0     225       0       0       0       0       0       0       0       0       0       
      +0       0       0
   863 ;;Total ram usage:      243 bytes
   864 ;; Hardware stack levels required when called: 9
   865 ;; This function calls:
   866 ;;		_ADC_getval
   867 ;;		_ADC_init
   868 ;;		_ArrayAppend
   869 ;;		_ArrayAverage
   870 ;;		_Interrupts_init
   871 ;;		_LCD_Init
   872 ;;		_LCD_sendstring
   873 ;;		_LCD_setline
   874 ;;		_LEDarray_disp_bin
   875 ;;		_LEDarray_init
   876 ;;		_Timer0_init
   877 ;;		_UpdateClock
   878 ;;		___fladd
   879 ;;		___flmul
   880 ;;		___fltol
   881 ;;		___wmul
   882 ;;		___xxtofl
   883 ;;		_sprintf
   884 ;; This function is called by:
   885 ;;		Startup code after reset
   886 ;; This function uses a non-reentrant model
   887 ;;
   888                           
   889                           	psect	text0
   890   000E46                     __ptext0:
   891                           	callstack 0
   892   000E46                     _main:
   893                           	callstack 22
   894   000E46                     
   895                           ;main.c: 22:     LEDarray_init();
   896   000E46  EC4D  F01A         	call	_LEDarray_init	;wreg free
   897   000E4A                     
   898                           ;main.c: 23:     Timer0_init();
   899   000E4A  EC72  F01A         	call	_Timer0_init	;wreg free
   900   000E4E                     
   901                           ;main.c: 24:     Interrupts_init();
   902   000E4E  ECA2  F01A         	call	_Interrupts_init	;wreg free
   903   000E52                     
   904                           ;main.c: 25:     LCD_Init();
   905   000E52  EC34  F015         	call	_LCD_Init	;wreg free
   906   000E56                     
   907                           ;main.c: 26:     ADC_init();
   908   000E56  EC82  F01A         	call	_ADC_init	;wreg free
   909   000E5A                     
   910                           ;main.c: 28:     char buffer[18];;main.c: 32:     TRISDbits.TRISD7 = 0;
   911   000E5A  9E84               	bcf	132,7,c	;volatile
   912   000E5C                     
   913                           ;main.c: 33:     LATDbits.LATD7 = 0;
   914   000E5C  9E7C               	bcf	124,7,c	;volatile
   915   000E5E                     
   916                           ;main.c: 36:     TRISHbits.TRISH3 = 0;
   917   000E5E  9688               	bcf	136,3,c	;volatile
   918   000E60                     
   919                           ;main.c: 37:     LATHbits.LATH3 = 0;
   920   000E60  9680               	bcf	128,3,c	;volatile
   921   000E62                     
   922                           ;main.c: 46:     int TestMode = 1;
   923   000E62  0E00               	movlw	0
   924   000E64  0101               	movlb	1	; () banked
   925   000E66  6F1E               	movwf	(main@TestMode+1)& (0+255),b
   926   000E68  0E01               	movlw	1
   927   000E6A  6F1D               	movwf	main@TestMode& (0+255),b
   928   000E6C                     
   929                           ; BSR set to: 1
   930                           ;main.c: 50:     struct time_structure clock;;main.c: 52:         ticker = 0;
   931   000E6C  0E00               	movlw	0
   932   000E6E  6FE4               	movwf	(_ticker+1)& (0+255),b
   933   000E70  0E00               	movlw	0
   934   000E72  6FE3               	movwf	_ticker& (0+255),b
   935   000E74                     
   936                           ; BSR set to: 1
   937                           ;main.c: 53:         clock.seconds = 55;
   938   000E74  0E00               	movlw	0
   939   000E76  6FD2               	movwf	(main@clock+1)& (0+255),b
   940   000E78  0E37               	movlw	55
   941   000E7A  6FD1               	movwf	main@clock& (0+255),b
   942   000E7C                     
   943                           ; BSR set to: 1
   944                           ;main.c: 54:         clock.minutes = 59;
   945   000E7C  0E00               	movlw	0
   946   000E7E  6FD4               	movwf	(main@clock+3)& (0+255),b
   947   000E80  0E3B               	movlw	59
   948   000E82  6FD3               	movwf	(main@clock+2)& (0+255),b
   949   000E84                     
   950                           ; BSR set to: 1
   951                           ;main.c: 55:         clock.hours = 20;
   952   000E84  0E00               	movlw	0
   953   000E86  6FD6               	movwf	(main@clock+5)& (0+255),b
   954   000E88  0E14               	movlw	20
   955   000E8A  6FD5               	movwf	(main@clock+4)& (0+255),b
   956   000E8C                     
   957                           ; BSR set to: 1
   958                           ;main.c: 56:         clock.days = 28;
   959   000E8C  0E00               	movlw	0
   960   000E8E  6FD8               	movwf	(main@clock+7)& (0+255),b
   961   000E90  0E1C               	movlw	28
   962   000E92  6FD7               	movwf	(main@clock+6)& (0+255),b
   963   000E94                     
   964                           ; BSR set to: 1
   965                           ;main.c: 57:         clock.DoW = 1;
   966   000E94  0E00               	movlw	0
   967   000E96  6FDA               	movwf	(main@clock+9)& (0+255),b
   968   000E98  0E01               	movlw	1
   969   000E9A  6FD9               	movwf	(main@clock+8)& (0+255),b
   970   000E9C                     
   971                           ; BSR set to: 1
   972                           ;main.c: 58:         clock.months = 2;
   973   000E9C  0E00               	movlw	0
   974   000E9E  6FDC               	movwf	(main@clock+11)& (0+255),b
   975   000EA0  0E02               	movlw	2
   976   000EA2  6FDB               	movwf	(main@clock+10)& (0+255),b
   977   000EA4                     
   978                           ; BSR set to: 1
   979                           ;main.c: 59:         clock.years = 2024;
   980   000EA4  0E07               	movlw	7
   981   000EA6  6FDE               	movwf	(main@clock+13)& (0+255),b
   982   000EA8  0EE8               	movlw	232
   983   000EAA  6FDD               	movwf	(main@clock+12)& (0+255),b
   984   000EAC                     
   985                           ; BSR set to: 1
   986                           ;main.c: 60:         clock.DSTstate = 0;
   987   000EAC  0E00               	movlw	0
   988   000EAE  6FE0               	movwf	(main@clock+15)& (0+255),b
   989   000EB0  0E00               	movlw	0
   990   000EB2  6FDF               	movwf	(main@clock+14)& (0+255),b
   991   000EB4                     
   992                           ; BSR set to: 1
   993                           ;main.c: 92:     struct month_structure SolarPerMonth;;main.c: 93:     SolarPerMonth.day
      +                          s[0] = 31;
   994   000EB4  0E00               	movlw	0
   995   000EB6  6FBA               	movwf	(main@SolarPerMonth+49)& (0+255),b
   996   000EB8  0E1F               	movlw	31
   997   000EBA  6FB9               	movwf	(main@SolarPerMonth+48)& (0+255),b
   998   000EBC                     
   999                           ; BSR set to: 1
  1000                           ;main.c: 94:     SolarPerMonth.days[1] = 28;
  1001   000EBC  0E00               	movlw	0
  1002   000EBE  6FBC               	movwf	(main@SolarPerMonth+51)& (0+255),b
  1003   000EC0  0E1C               	movlw	28
  1004   000EC2  6FBB               	movwf	(main@SolarPerMonth+50)& (0+255),b
  1005   000EC4                     
  1006                           ; BSR set to: 1
  1007                           ;main.c: 95:     SolarPerMonth.days[2] = 31;
  1008   000EC4  0E00               	movlw	0
  1009   000EC6  6FBE               	movwf	(main@SolarPerMonth+53)& (0+255),b
  1010   000EC8  0E1F               	movlw	31
  1011   000ECA  6FBD               	movwf	(main@SolarPerMonth+52)& (0+255),b
  1012   000ECC                     
  1013                           ; BSR set to: 1
  1014                           ;main.c: 96:     SolarPerMonth.days[3] = 30;
  1015   000ECC  0E00               	movlw	0
  1016   000ECE  6FC0               	movwf	(main@SolarPerMonth+55)& (0+255),b
  1017   000ED0  0E1E               	movlw	30
  1018   000ED2  6FBF               	movwf	(main@SolarPerMonth+54)& (0+255),b
  1019   000ED4                     
  1020                           ; BSR set to: 1
  1021                           ;main.c: 97:     SolarPerMonth.days[4] = 31;
  1022   000ED4  0E00               	movlw	0
  1023   000ED6  6FC2               	movwf	(main@SolarPerMonth+57)& (0+255),b
  1024   000ED8  0E1F               	movlw	31
  1025   000EDA  6FC1               	movwf	(main@SolarPerMonth+56)& (0+255),b
  1026   000EDC                     
  1027                           ; BSR set to: 1
  1028                           ;main.c: 98:     SolarPerMonth.days[5] = 30;
  1029   000EDC  0E00               	movlw	0
  1030   000EDE  6FC4               	movwf	(main@SolarPerMonth+59)& (0+255),b
  1031   000EE0  0E1E               	movlw	30
  1032   000EE2  6FC3               	movwf	(main@SolarPerMonth+58)& (0+255),b
  1033   000EE4                     
  1034                           ; BSR set to: 1
  1035                           ;main.c: 99:     SolarPerMonth.days[6] = 31;
  1036   000EE4  0E00               	movlw	0
  1037   000EE6  6FC6               	movwf	(main@SolarPerMonth+61)& (0+255),b
  1038   000EE8  0E1F               	movlw	31
  1039   000EEA  6FC5               	movwf	(main@SolarPerMonth+60)& (0+255),b
  1040   000EEC                     
  1041                           ; BSR set to: 1
  1042                           ;main.c: 100:     SolarPerMonth.days[7] = 31;
  1043   000EEC  0E00               	movlw	0
  1044   000EEE  6FC8               	movwf	(main@SolarPerMonth+63)& (0+255),b
  1045   000EF0  0E1F               	movlw	31
  1046   000EF2  6FC7               	movwf	(main@SolarPerMonth+62)& (0+255),b
  1047   000EF4                     
  1048                           ; BSR set to: 1
  1049                           ;main.c: 101:     SolarPerMonth.days[8] = 30;
  1050   000EF4  0E00               	movlw	0
  1051   000EF6  6FCA               	movwf	(main@SolarPerMonth+65)& (0+255),b
  1052   000EF8  0E1E               	movlw	30
  1053   000EFA  6FC9               	movwf	(main@SolarPerMonth+64)& (0+255),b
  1054   000EFC                     
  1055                           ; BSR set to: 1
  1056                           ;main.c: 102:     SolarPerMonth.days[9] = 31;
  1057   000EFC  0E00               	movlw	0
  1058   000EFE  6FCC               	movwf	(main@SolarPerMonth+67)& (0+255),b
  1059   000F00  0E1F               	movlw	31
  1060   000F02  6FCB               	movwf	(main@SolarPerMonth+66)& (0+255),b
  1061   000F04                     
  1062                           ; BSR set to: 1
  1063                           ;main.c: 103:     SolarPerMonth.days[10] = 30;
  1064   000F04  0E00               	movlw	0
  1065   000F06  6FCE               	movwf	(main@SolarPerMonth+69)& (0+255),b
  1066   000F08  0E1E               	movlw	30
  1067   000F0A  6FCD               	movwf	(main@SolarPerMonth+68)& (0+255),b
  1068   000F0C                     
  1069                           ; BSR set to: 1
  1070                           ;main.c: 104:     SolarPerMonth.days[11] = 31;
  1071   000F0C  0E00               	movlw	0
  1072   000F0E  6FD0               	movwf	(main@SolarPerMonth+71)& (0+255),b
  1073   000F10  0E1F               	movlw	31
  1074   000F12  6FCF               	movwf	(main@SolarPerMonth+70)& (0+255),b
  1075   000F14                     
  1076                           ; BSR set to: 1
  1077                           ;main.c: 106:     SolarPerMonth.solarMidHours[0] = 0;
  1078   000F14  0E00               	movlw	0
  1079   000F16  6FA2               	movwf	(main@SolarPerMonth+25)& (0+255),b
  1080   000F18  0E00               	movlw	0
  1081   000F1A  6FA1               	movwf	(main@SolarPerMonth+24)& (0+255),b
  1082   000F1C                     
  1083                           ; BSR set to: 1
  1084                           ;main.c: 107:     SolarPerMonth.solarMidHours[1] = 0;
  1085   000F1C  0E00               	movlw	0
  1086   000F1E  6FA4               	movwf	(main@SolarPerMonth+27)& (0+255),b
  1087   000F20  0E00               	movlw	0
  1088   000F22  6FA3               	movwf	(main@SolarPerMonth+26)& (0+255),b
  1089   000F24                     
  1090                           ; BSR set to: 1
  1091                           ;main.c: 108:     SolarPerMonth.solarMidHours[2] = 0;
  1092   000F24  0E00               	movlw	0
  1093   000F26  6FA6               	movwf	(main@SolarPerMonth+29)& (0+255),b
  1094   000F28  0E00               	movlw	0
  1095   000F2A  6FA5               	movwf	(main@SolarPerMonth+28)& (0+255),b
  1096   000F2C                     
  1097                           ; BSR set to: 1
  1098                           ;main.c: 109:     SolarPerMonth.solarMidHours[3] = 0;
  1099   000F2C  0E00               	movlw	0
  1100   000F2E  6FA8               	movwf	(main@SolarPerMonth+31)& (0+255),b
  1101   000F30  0E00               	movlw	0
  1102   000F32  6FA7               	movwf	(main@SolarPerMonth+30)& (0+255),b
  1103   000F34                     
  1104                           ; BSR set to: 1
  1105                           ;main.c: 110:     SolarPerMonth.solarMidHours[4] = 23;
  1106   000F34  0E00               	movlw	0
  1107   000F36  6FAA               	movwf	(main@SolarPerMonth+33)& (0+255),b
  1108   000F38  0E17               	movlw	23
  1109   000F3A  6FA9               	movwf	(main@SolarPerMonth+32)& (0+255),b
  1110   000F3C                     
  1111                           ; BSR set to: 1
  1112                           ;main.c: 111:     SolarPerMonth.solarMidHours[5] = 0;
  1113   000F3C  0E00               	movlw	0
  1114   000F3E  6FAC               	movwf	(main@SolarPerMonth+35)& (0+255),b
  1115   000F40  0E00               	movlw	0
  1116   000F42  6FAB               	movwf	(main@SolarPerMonth+34)& (0+255),b
  1117   000F44                     
  1118                           ; BSR set to: 1
  1119                           ;main.c: 112:     SolarPerMonth.solarMidHours[6] = 0;
  1120   000F44  0E00               	movlw	0
  1121   000F46  6FAE               	movwf	(main@SolarPerMonth+37)& (0+255),b
  1122   000F48  0E00               	movlw	0
  1123   000F4A  6FAD               	movwf	(main@SolarPerMonth+36)& (0+255),b
  1124   000F4C                     
  1125                           ; BSR set to: 1
  1126                           ;main.c: 113:     SolarPerMonth.solarMidHours[7] = 0;
  1127   000F4C  0E00               	movlw	0
  1128   000F4E  6FB0               	movwf	(main@SolarPerMonth+39)& (0+255),b
  1129   000F50  0E00               	movlw	0
  1130   000F52  6FAF               	movwf	(main@SolarPerMonth+38)& (0+255),b
  1131   000F54                     
  1132                           ; BSR set to: 1
  1133                           ;main.c: 114:     SolarPerMonth.solarMidHours[8] = 23;
  1134   000F54  0E00               	movlw	0
  1135   000F56  6FB2               	movwf	(main@SolarPerMonth+41)& (0+255),b
  1136   000F58  0E17               	movlw	23
  1137   000F5A  6FB1               	movwf	(main@SolarPerMonth+40)& (0+255),b
  1138   000F5C                     
  1139                           ; BSR set to: 1
  1140                           ;main.c: 115:     SolarPerMonth.solarMidHours[9] = 23;
  1141   000F5C  0E00               	movlw	0
  1142   000F5E  6FB4               	movwf	(main@SolarPerMonth+43)& (0+255),b
  1143   000F60  0E17               	movlw	23
  1144   000F62  6FB3               	movwf	(main@SolarPerMonth+42)& (0+255),b
  1145   000F64                     
  1146                           ; BSR set to: 1
  1147                           ;main.c: 116:     SolarPerMonth.solarMidHours[10] = 23;
  1148   000F64  0E00               	movlw	0
  1149   000F66  6FB6               	movwf	(main@SolarPerMonth+45)& (0+255),b
  1150   000F68  0E17               	movlw	23
  1151   000F6A  6FB5               	movwf	(main@SolarPerMonth+44)& (0+255),b
  1152   000F6C                     
  1153                           ; BSR set to: 1
  1154                           ;main.c: 117:     SolarPerMonth.solarMidHours[11] = 23;
  1155   000F6C  0E00               	movlw	0
  1156   000F6E  6FB8               	movwf	(main@SolarPerMonth+47)& (0+255),b
  1157   000F70  0E17               	movlw	23
  1158   000F72  6FB7               	movwf	(main@SolarPerMonth+46)& (0+255),b
  1159   000F74                     
  1160                           ; BSR set to: 1
  1161                           ;main.c: 119:     SolarPerMonth.solarMidMinutes[0] = 9;
  1162   000F74  0E00               	movlw	0
  1163   000F76  6F8A               	movwf	(main@SolarPerMonth+1)& (0+255),b
  1164   000F78  0E09               	movlw	9
  1165   000F7A  6F89               	movwf	main@SolarPerMonth& (0+255),b
  1166   000F7C                     
  1167                           ; BSR set to: 1
  1168                           ;main.c: 120:     SolarPerMonth.solarMidMinutes[1] = 13;
  1169   000F7C  0E00               	movlw	0
  1170   000F7E  6F8C               	movwf	(main@SolarPerMonth+3)& (0+255),b
  1171   000F80  0E0D               	movlw	13
  1172   000F82  6F8B               	movwf	(main@SolarPerMonth+2)& (0+255),b
  1173   000F84                     
  1174                           ; BSR set to: 1
  1175                           ;main.c: 121:     SolarPerMonth.solarMidMinutes[2] = 8;
  1176   000F84  0E00               	movlw	0
  1177   000F86  6F8E               	movwf	(main@SolarPerMonth+5)& (0+255),b
  1178   000F88  0E08               	movlw	8
  1179   000F8A  6F8D               	movwf	(main@SolarPerMonth+4)& (0+255),b
  1180   000F8C                     
  1181                           ; BSR set to: 1
  1182                           ;main.c: 122:     SolarPerMonth.solarMidMinutes[3] = 1;
  1183   000F8C  0E00               	movlw	0
  1184   000F8E  6F90               	movwf	(main@SolarPerMonth+7)& (0+255),b
  1185   000F90  0E01               	movlw	1
  1186   000F92  6F8F               	movwf	(main@SolarPerMonth+6)& (0+255),b
  1187   000F94                     
  1188                           ; BSR set to: 1
  1189                           ;main.c: 123:     SolarPerMonth.solarMidMinutes[4] = 57;
  1190   000F94  0E00               	movlw	0
  1191   000F96  6F92               	movwf	(main@SolarPerMonth+9)& (0+255),b
  1192   000F98  0E39               	movlw	57
  1193   000F9A  6F91               	movwf	(main@SolarPerMonth+8)& (0+255),b
  1194   000F9C                     
  1195                           ; BSR set to: 1
  1196                           ;main.c: 124:     SolarPerMonth.solarMidMinutes[5] = 1;
  1197   000F9C  0E00               	movlw	0
  1198   000F9E  6F94               	movwf	(main@SolarPerMonth+11)& (0+255),b
  1199   000FA0  0E01               	movlw	1
  1200   000FA2  6F93               	movwf	(main@SolarPerMonth+10)& (0+255),b
  1201   000FA4                     
  1202                           ; BSR set to: 1
  1203                           ;main.c: 125:     SolarPerMonth.solarMidMinutes[6] = 5;
  1204   000FA4  0E00               	movlw	0
  1205   000FA6  6F96               	movwf	(main@SolarPerMonth+13)& (0+255),b
  1206   000FA8  0E05               	movlw	5
  1207   000FAA  6F95               	movwf	(main@SolarPerMonth+12)& (0+255),b
  1208   000FAC                     
  1209                           ; BSR set to: 1
  1210                           ;main.c: 126:     SolarPerMonth.solarMidMinutes[7] = 3;
  1211   000FAC  0E00               	movlw	0
  1212   000FAE  6F98               	movwf	(main@SolarPerMonth+15)& (0+255),b
  1213   000FB0  0E03               	movlw	3
  1214   000FB2  6F97               	movwf	(main@SolarPerMonth+14)& (0+255),b
  1215   000FB4                     
  1216                           ; BSR set to: 1
  1217                           ;main.c: 127:     SolarPerMonth.solarMidMinutes[8] = 55;
  1218   000FB4  0E00               	movlw	0
  1219   000FB6  6F9A               	movwf	(main@SolarPerMonth+17)& (0+255),b
  1220   000FB8  0E37               	movlw	55
  1221   000FBA  6F99               	movwf	(main@SolarPerMonth+16)& (0+255),b
  1222   000FBC                     
  1223                           ; BSR set to: 1
  1224                           ;main.c: 128:     SolarPerMonth.solarMidMinutes[9] = 47;
  1225   000FBC  0E00               	movlw	0
  1226   000FBE  6F9C               	movwf	(main@SolarPerMonth+19)& (0+255),b
  1227   000FC0  0E2F               	movlw	47
  1228   000FC2  6F9B               	movwf	(main@SolarPerMonth+18)& (0+255),b
  1229   000FC4                     
  1230                           ; BSR set to: 1
  1231                           ;main.c: 129:     SolarPerMonth.solarMidMinutes[10] = 46;
  1232   000FC4  0E00               	movlw	0
  1233   000FC6  6F9E               	movwf	(main@SolarPerMonth+21)& (0+255),b
  1234   000FC8  0E2E               	movlw	46
  1235   000FCA  6F9D               	movwf	(main@SolarPerMonth+20)& (0+255),b
  1236   000FCC                     
  1237                           ; BSR set to: 1
  1238                           ;main.c: 130:     SolarPerMonth.solarMidMinutes[11] = 56;
  1239   000FCC  0E00               	movlw	0
  1240   000FCE  6FA0               	movwf	(main@SolarPerMonth+23)& (0+255),b
  1241   000FD0  0E38               	movlw	56
  1242   000FD2  6F9F               	movwf	(main@SolarPerMonth+22)& (0+255),b
  1243   000FD4                     
  1244                           ; BSR set to: 1
  1245                           ;main.c: 146:     struct array_structure Dawn;;main.c: 147:         Dawn.size = 7;
  1246   000FD4  0E00               	movlw	0
  1247   000FD6  6F6A               	movwf	(main@Dawn+1)& (0+255),b
  1248   000FD8  0E07               	movlw	7
  1249   000FDA  6F69               	movwf	main@Dawn& (0+255),b
  1250   000FDC                     
  1251                           ; BSR set to: 1
  1252                           ;main.c: 148:         Dawn.count = 0;
  1253   000FDC  0E00               	movlw	0
  1254   000FDE  6F6C               	movwf	(main@Dawn+3)& (0+255),b
  1255   000FE0  0E00               	movlw	0
  1256   000FE2  6F6B               	movwf	(main@Dawn+2)& (0+255),b
  1257   000FE4                     
  1258                           ; BSR set to: 1
  1259                           ;main.c: 150:         Dawn.hours[0] = 0;
  1260   000FE4  0E00               	movlw	0
  1261   000FE6  6F6E               	movwf	(main@Dawn+5)& (0+255),b
  1262   000FE8  0E00               	movlw	0
  1263   000FEA  6F6D               	movwf	(main@Dawn+4)& (0+255),b
  1264   000FEC                     
  1265                           ; BSR set to: 1
  1266                           ;main.c: 151:         Dawn.hours[1] = 0;
  1267   000FEC  0E00               	movlw	0
  1268   000FEE  6F70               	movwf	(main@Dawn+7)& (0+255),b
  1269   000FF0  0E00               	movlw	0
  1270   000FF2  6F6F               	movwf	(main@Dawn+6)& (0+255),b
  1271   000FF4                     
  1272                           ; BSR set to: 1
  1273                           ;main.c: 152:         Dawn.hours[2] = 0;
  1274   000FF4  0E00               	movlw	0
  1275   000FF6  6F72               	movwf	(main@Dawn+9)& (0+255),b
  1276   000FF8  0E00               	movlw	0
  1277   000FFA  6F71               	movwf	(main@Dawn+8)& (0+255),b
  1278   000FFC                     
  1279                           ; BSR set to: 1
  1280                           ;main.c: 153:         Dawn.hours[3] = 0;
  1281   000FFC  0E00               	movlw	0
  1282   000FFE  6F74               	movwf	(main@Dawn+11)& (0+255),b
  1283   001000  0E00               	movlw	0
  1284   001002  6F73               	movwf	(main@Dawn+10)& (0+255),b
  1285   001004                     
  1286                           ; BSR set to: 1
  1287                           ;main.c: 154:         Dawn.hours[4] = 0;
  1288   001004  0E00               	movlw	0
  1289   001006  6F76               	movwf	(main@Dawn+13)& (0+255),b
  1290   001008  0E00               	movlw	0
  1291   00100A  6F75               	movwf	(main@Dawn+12)& (0+255),b
  1292   00100C                     
  1293                           ; BSR set to: 1
  1294                           ;main.c: 155:         Dawn.hours[5] = 0;
  1295   00100C  0E00               	movlw	0
  1296   00100E  6F78               	movwf	(main@Dawn+15)& (0+255),b
  1297   001010  0E00               	movlw	0
  1298   001012  6F77               	movwf	(main@Dawn+14)& (0+255),b
  1299   001014                     
  1300                           ; BSR set to: 1
  1301                           ;main.c: 156:         Dawn.hours[6] = 0;
  1302   001014  0E00               	movlw	0
  1303   001016  6F7A               	movwf	(main@Dawn+17)& (0+255),b
  1304   001018  0E00               	movlw	0
  1305   00101A  6F79               	movwf	(main@Dawn+16)& (0+255),b
  1306   00101C                     
  1307                           ; BSR set to: 1
  1308                           ;main.c: 158:         Dawn.minutes[0] = 0;
  1309   00101C  0E00               	movlw	0
  1310   00101E  6F7C               	movwf	(main@Dawn+19)& (0+255),b
  1311   001020  0E00               	movlw	0
  1312   001022  6F7B               	movwf	(main@Dawn+18)& (0+255),b
  1313   001024                     
  1314                           ; BSR set to: 1
  1315                           ;main.c: 159:         Dawn.minutes[1] = 0;
  1316   001024  0E00               	movlw	0
  1317   001026  6F7E               	movwf	(main@Dawn+21)& (0+255),b
  1318   001028  0E00               	movlw	0
  1319   00102A  6F7D               	movwf	(main@Dawn+20)& (0+255),b
  1320   00102C                     
  1321                           ; BSR set to: 1
  1322                           ;main.c: 160:         Dawn.minutes[2] = 0;
  1323   00102C  0E00               	movlw	0
  1324   00102E  6F80               	movwf	(main@Dawn+23)& (0+255),b
  1325   001030  0E00               	movlw	0
  1326   001032  6F7F               	movwf	(main@Dawn+22)& (0+255),b
  1327   001034                     
  1328                           ; BSR set to: 1
  1329                           ;main.c: 161:         Dawn.minutes[3] = 0;
  1330   001034  0E00               	movlw	0
  1331   001036  6F82               	movwf	(main@Dawn+25)& (0+255),b
  1332   001038  0E00               	movlw	0
  1333   00103A  6F81               	movwf	(main@Dawn+24)& (0+255),b
  1334   00103C                     
  1335                           ; BSR set to: 1
  1336                           ;main.c: 162:         Dawn.minutes[4] = 0;
  1337   00103C  0E00               	movlw	0
  1338   00103E  6F84               	movwf	(main@Dawn+27)& (0+255),b
  1339   001040  0E00               	movlw	0
  1340   001042  6F83               	movwf	(main@Dawn+26)& (0+255),b
  1341   001044                     
  1342                           ; BSR set to: 1
  1343                           ;main.c: 163:         Dawn.minutes[5] = 0;
  1344   001044  0E00               	movlw	0
  1345   001046  6F86               	movwf	(main@Dawn+29)& (0+255),b
  1346   001048  0E00               	movlw	0
  1347   00104A  6F85               	movwf	(main@Dawn+28)& (0+255),b
  1348   00104C                     
  1349                           ; BSR set to: 1
  1350                           ;main.c: 164:         Dawn.minutes[6] = 0;
  1351   00104C  0E00               	movlw	0
  1352   00104E  6F88               	movwf	(main@Dawn+31)& (0+255),b
  1353   001050  0E00               	movlw	0
  1354   001052  6F87               	movwf	(main@Dawn+30)& (0+255),b
  1355   001054                     
  1356                           ; BSR set to: 1
  1357                           ;main.c: 166:     struct array_structure Dusk;;main.c: 167:         Dusk.size = 7;
  1358   001054  0E00               	movlw	0
  1359   001056  6F4A               	movwf	(main@Dusk+1)& (0+255),b
  1360   001058  0E07               	movlw	7
  1361   00105A  6F49               	movwf	main@Dusk& (0+255),b
  1362   00105C                     
  1363                           ; BSR set to: 1
  1364                           ;main.c: 168:         Dusk.count = 0;
  1365   00105C  0E00               	movlw	0
  1366   00105E  6F4C               	movwf	(main@Dusk+3)& (0+255),b
  1367   001060  0E00               	movlw	0
  1368   001062  6F4B               	movwf	(main@Dusk+2)& (0+255),b
  1369   001064                     
  1370                           ; BSR set to: 1
  1371                           ;main.c: 170:         Dusk.hours[0] = 0;
  1372   001064  0E00               	movlw	0
  1373   001066  6F4E               	movwf	(main@Dusk+5)& (0+255),b
  1374   001068  0E00               	movlw	0
  1375   00106A  6F4D               	movwf	(main@Dusk+4)& (0+255),b
  1376   00106C                     
  1377                           ; BSR set to: 1
  1378                           ;main.c: 171:         Dusk.hours[1] = 0;
  1379   00106C  0E00               	movlw	0
  1380   00106E  6F50               	movwf	(main@Dusk+7)& (0+255),b
  1381   001070  0E00               	movlw	0
  1382   001072  6F4F               	movwf	(main@Dusk+6)& (0+255),b
  1383   001074                     
  1384                           ; BSR set to: 1
  1385                           ;main.c: 172:         Dusk.hours[2] = 0;
  1386   001074  0E00               	movlw	0
  1387   001076  6F52               	movwf	(main@Dusk+9)& (0+255),b
  1388   001078  0E00               	movlw	0
  1389   00107A  6F51               	movwf	(main@Dusk+8)& (0+255),b
  1390   00107C                     
  1391                           ; BSR set to: 1
  1392                           ;main.c: 173:         Dusk.hours[3] = 0;
  1393   00107C  0E00               	movlw	0
  1394   00107E  6F54               	movwf	(main@Dusk+11)& (0+255),b
  1395   001080  0E00               	movlw	0
  1396   001082  6F53               	movwf	(main@Dusk+10)& (0+255),b
  1397   001084                     
  1398                           ; BSR set to: 1
  1399                           ;main.c: 174:         Dusk.hours[4] = 0;
  1400   001084  0E00               	movlw	0
  1401   001086  6F56               	movwf	(main@Dusk+13)& (0+255),b
  1402   001088  0E00               	movlw	0
  1403   00108A  6F55               	movwf	(main@Dusk+12)& (0+255),b
  1404   00108C                     
  1405                           ; BSR set to: 1
  1406                           ;main.c: 175:         Dusk.hours[5] = 0;
  1407   00108C  0E00               	movlw	0
  1408   00108E  6F58               	movwf	(main@Dusk+15)& (0+255),b
  1409   001090  0E00               	movlw	0
  1410   001092  6F57               	movwf	(main@Dusk+14)& (0+255),b
  1411   001094                     
  1412                           ; BSR set to: 1
  1413                           ;main.c: 176:         Dusk.hours[6] = 0;
  1414   001094  0E00               	movlw	0
  1415   001096  6F5A               	movwf	(main@Dusk+17)& (0+255),b
  1416   001098  0E00               	movlw	0
  1417   00109A  6F59               	movwf	(main@Dusk+16)& (0+255),b
  1418   00109C                     
  1419                           ; BSR set to: 1
  1420                           ;main.c: 178:         Dusk.minutes[0] = 0;
  1421   00109C  0E00               	movlw	0
  1422   00109E  6F5C               	movwf	(main@Dusk+19)& (0+255),b
  1423   0010A0  0E00               	movlw	0
  1424   0010A2  6F5B               	movwf	(main@Dusk+18)& (0+255),b
  1425   0010A4                     
  1426                           ; BSR set to: 1
  1427                           ;main.c: 179:         Dusk.minutes[1] = 0;
  1428   0010A4  0E00               	movlw	0
  1429   0010A6  6F5E               	movwf	(main@Dusk+21)& (0+255),b
  1430   0010A8  0E00               	movlw	0
  1431   0010AA  6F5D               	movwf	(main@Dusk+20)& (0+255),b
  1432   0010AC                     
  1433                           ; BSR set to: 1
  1434                           ;main.c: 180:         Dusk.minutes[2] = 0;
  1435   0010AC  0E00               	movlw	0
  1436   0010AE  6F60               	movwf	(main@Dusk+23)& (0+255),b
  1437   0010B0  0E00               	movlw	0
  1438   0010B2  6F5F               	movwf	(main@Dusk+22)& (0+255),b
  1439   0010B4                     
  1440                           ; BSR set to: 1
  1441                           ;main.c: 181:         Dusk.minutes[3] = 0;
  1442   0010B4  0E00               	movlw	0
  1443   0010B6  6F62               	movwf	(main@Dusk+25)& (0+255),b
  1444   0010B8  0E00               	movlw	0
  1445   0010BA  6F61               	movwf	(main@Dusk+24)& (0+255),b
  1446   0010BC                     
  1447                           ; BSR set to: 1
  1448                           ;main.c: 182:         Dusk.minutes[4] = 0;
  1449   0010BC  0E00               	movlw	0
  1450   0010BE  6F64               	movwf	(main@Dusk+27)& (0+255),b
  1451   0010C0  0E00               	movlw	0
  1452   0010C2  6F63               	movwf	(main@Dusk+26)& (0+255),b
  1453   0010C4                     
  1454                           ; BSR set to: 1
  1455                           ;main.c: 183:         Dusk.minutes[5] = 0;
  1456   0010C4  0E00               	movlw	0
  1457   0010C6  6F66               	movwf	(main@Dusk+29)& (0+255),b
  1458   0010C8  0E00               	movlw	0
  1459   0010CA  6F65               	movwf	(main@Dusk+28)& (0+255),b
  1460   0010CC                     
  1461                           ; BSR set to: 1
  1462                           ;main.c: 184:         Dusk.minutes[6] = 0;
  1463   0010CC  0E00               	movlw	0
  1464   0010CE  6F68               	movwf	(main@Dusk+31)& (0+255),b
  1465   0010D0  0E00               	movlw	0
  1466   0010D2  6F67               	movwf	(main@Dusk+30)& (0+255),b
  1467   0010D4                     
  1468                           ; BSR set to: 1
  1469                           ;main.c: 199:     unsigned int light_threshold = 70;
  1470   0010D4  0E00               	movlw	0
  1471   0010D6  6F20               	movwf	(main@light_threshold+1)& (0+255),b
  1472   0010D8  0E46               	movlw	70
  1473   0010DA  6F1F               	movwf	main@light_threshold& (0+255),b
  1474   0010DC                     
  1475                           ; BSR set to: 1
  1476                           ;main.c: 202:     unsigned int daycount = 0;
  1477   0010DC  0E00               	movlw	0
  1478   0010DE  6F1C               	movwf	(main@daycount+1)& (0+255),b
  1479   0010E0  0E00               	movlw	0
  1480   0010E2  6F1B               	movwf	main@daycount& (0+255),b
  1481   0010E4                     
  1482                           ; BSR set to: 1
  1483                           ;main.c: 205:     unsigned int previousClockDays = clock.days;
  1484   0010E4  C1D7  F118         	movff	main@clock+6,main@previousClockDays
  1485   0010E8  C1D8  F119         	movff	main@clock+7,main@previousClockDays+1
  1486   0010EC                     
  1487                           ; BSR set to: 1
  1488                           ;main.c: 215:             clock.seconds = 0;
  1489   0010EC  0E00               	movlw	0
  1490   0010EE  6FD2               	movwf	(main@clock+1)& (0+255),b
  1491   0010F0  0E00               	movlw	0
  1492   0010F2  6FD1               	movwf	main@clock& (0+255),b
  1493   0010F4                     
  1494                           ; BSR set to: 1
  1495                           ;main.c: 216:             GLOBALsecs = clock.hours;
  1496   0010F4  C1D5  F1E1         	movff	main@clock+4,_GLOBALsecs
  1497   0010F8  C1D6  F1E2         	movff	main@clock+5,_GLOBALsecs+1
  1498   0010FC                     
  1499                           ; BSR set to: 1
  1500                           ;main.c: 218:     int avgSolarMidnight = 0;
  1501   0010FC  0E00               	movlw	0
  1502   0010FE  6F22               	movwf	(main@avgSolarMidnight+1)& (0+255),b
  1503   001100  0E00               	movlw	0
  1504   001102  6F21               	movwf	main@avgSolarMidnight& (0+255),b
  1505   001104                     l4366:
  1506                           
  1507                           ;main.c: 224:         UpdateClock(&ticker, &clock.seconds, &clock.minutes, &clock.hours,
      +                           &clock.days, &clock.DoW, &clock.months, &clock.years, &clock.DSTstate, TestMode);
  1508   001104  0EE3               	movlw	low _ticker
  1509   001106  6E07               	movwf	UpdateClock@ticker^0,c
  1510   001108  0E01               	movlw	high _ticker
  1511   00110A  6E08               	movwf	(UpdateClock@ticker+1)^0,c
  1512   00110C  0ED1               	movlw	low main@clock
  1513   00110E  6E09               	movwf	UpdateClock@seconds^0,c
  1514   001110  0E01               	movlw	high main@clock
  1515   001112  6E0A               	movwf	(UpdateClock@seconds+1)^0,c
  1516   001114  0ED3               	movlw	low (main@clock+2)
  1517   001116  6E0B               	movwf	UpdateClock@minutes^0,c
  1518   001118  0E01               	movlw	high (main@clock+2)
  1519   00111A  6E0C               	movwf	(UpdateClock@minutes+1)^0,c
  1520   00111C  0ED5               	movlw	low (main@clock+4)
  1521   00111E  6E0D               	movwf	UpdateClock@hours^0,c
  1522   001120  0E01               	movlw	high (main@clock+4)
  1523   001122  6E0E               	movwf	(UpdateClock@hours+1)^0,c
  1524   001124  0ED7               	movlw	low (main@clock+6)
  1525   001126  6E0F               	movwf	UpdateClock@days^0,c
  1526   001128  0E01               	movlw	high (main@clock+6)
  1527   00112A  6E10               	movwf	(UpdateClock@days+1)^0,c
  1528   00112C  0ED9               	movlw	low (main@clock+8)
  1529   00112E  6E11               	movwf	UpdateClock@DoW^0,c
  1530   001130  0E01               	movlw	high (main@clock+8)
  1531   001132  6E12               	movwf	(UpdateClock@DoW+1)^0,c
  1532   001134  0EDB               	movlw	low (main@clock+10)
  1533   001136  6E13               	movwf	UpdateClock@months^0,c
  1534   001138  0E01               	movlw	high (main@clock+10)
  1535   00113A  6E14               	movwf	(UpdateClock@months+1)^0,c
  1536   00113C  0EDD               	movlw	low (main@clock+12)
  1537   00113E  6E15               	movwf	UpdateClock@years^0,c
  1538   001140  0E01               	movlw	high (main@clock+12)
  1539   001142  6E16               	movwf	(UpdateClock@years+1)^0,c
  1540   001144  0EDF               	movlw	low (main@clock+14)
  1541   001146  6E17               	movwf	UpdateClock@DSTstate^0,c
  1542   001148  0E01               	movlw	high (main@clock+14)
  1543   00114A  6E18               	movwf	(UpdateClock@DSTstate+1)^0,c
  1544   00114C  C11D  F019         	movff	main@TestMode,UpdateClock@TestMode
  1545   001150  C11E  F01A         	movff	main@TestMode+1,UpdateClock@TestMode+1
  1546   001154  EC6C  F00B         	call	_UpdateClock	;wreg free
  1547   001158                     
  1548                           ;main.c: 227:         LEDarray_disp_bin(clock.hours);
  1549   001158  C1D5  F001         	movff	main@clock+4,LEDarray_disp_bin@number
  1550   00115C  C1D6  F002         	movff	main@clock+5,LEDarray_disp_bin@number+1
  1551   001160  EC47  F016         	call	_LEDarray_disp_bin	;wreg free
  1552   001164                     
  1553                           ;main.c: 232:         if (ADC_getval() < light_threshold){
  1554   001164  EC22  F01A         	call	_ADC_getval	;wreg free
  1555   001168  0101               	movlb	1	; () banked
  1556   00116A  511F               	movf	main@light_threshold& (0+255),w,b
  1557   00116C  5C01               	subwf	?_ADC_getval^0,w,c
  1558   00116E  5120               	movf	(main@light_threshold+1)& (0+255),w,b
  1559   001170  5802               	subwfb	(?_ADC_getval+1)^0,w,c
  1560   001172  B0D8               	btfsc	status,0,c
  1561   001174  EFBE  F008         	goto	u4731
  1562   001178  EFC0  F008         	goto	u4730
  1563   00117C                     u4731:
  1564   00117C  EF2E  F009         	goto	l4390
  1565   001180                     u4730:
  1566   001180                     
  1567                           ; BSR set to: 1
  1568                           ;main.c: 233:             if ((clock.hours >= 1 && clock.hours < 5) || (clock.hours >= 8
      +                           && clock.hours < 15)) {
  1569   001180  51D5               	movf	(main@clock+4)& (0+255),w,b
  1570   001182  11D6               	iorwf	(main@clock+5)& (0+255),w,b
  1571   001184  B4D8               	btfsc	status,2,c
  1572   001186  EFC7  F008         	goto	u4741
  1573   00118A  EFC9  F008         	goto	u4740
  1574   00118E                     u4741:
  1575   00118E  EFD4  F008         	goto	l4376
  1576   001192                     u4740:
  1577   001192                     
  1578                           ; BSR set to: 1
  1579   001192  51D6               	movf	(main@clock+5)& (0+255),w,b
  1580   001194  E109               	bnz	u4750
  1581   001196  0E05               	movlw	5
  1582   001198  5DD5               	subwf	(main@clock+4)& (0+255),w,b
  1583   00119A  A0D8               	btfss	status,0,c
  1584   00119C  EFD2  F008         	goto	u4751
  1585   0011A0  EFD4  F008         	goto	u4750
  1586   0011A4                     u4751:
  1587   0011A4  EFEA  F008         	goto	l48
  1588   0011A8                     u4750:
  1589   0011A8                     l4376:
  1590                           
  1591                           ; BSR set to: 1
  1592   0011A8  51D6               	movf	(main@clock+5)& (0+255),w,b
  1593   0011AA  E109               	bnz	u4760
  1594   0011AC  0E08               	movlw	8
  1595   0011AE  5DD5               	subwf	(main@clock+4)& (0+255),w,b
  1596   0011B0  A0D8               	btfss	status,0,c
  1597   0011B2  EFDD  F008         	goto	u4761
  1598   0011B6  EFDF  F008         	goto	u4760
  1599   0011BA                     u4761:
  1600   0011BA  EFED  F008         	goto	l46
  1601   0011BE                     u4760:
  1602   0011BE                     
  1603                           ; BSR set to: 1
  1604   0011BE  51D6               	movf	(main@clock+5)& (0+255),w,b
  1605   0011C0  E107               	bnz	u4771
  1606   0011C2  0E0F               	movlw	15
  1607   0011C4  5DD5               	subwf	(main@clock+4)& (0+255),w,b
  1608   0011C6  B0D8               	btfsc	status,0,c
  1609   0011C8  EFE8  F008         	goto	u4771
  1610   0011CC  EFEA  F008         	goto	u4770
  1611   0011D0                     u4771:
  1612   0011D0  EFED  F008         	goto	l46
  1613   0011D4                     u4770:
  1614   0011D4                     l48:
  1615                           
  1616                           ; BSR set to: 1
  1617                           ;main.c: 234:                 LATHbits.LATH3 = 0;
  1618   0011D4  9680               	bcf	128,3,c	;volatile
  1619                           
  1620                           ;main.c: 235:             }
  1621   0011D6  EF2E  F009         	goto	l4390
  1622   0011DA                     l46:
  1623                           
  1624                           ; BSR set to: 1
  1625                           ;main.c: 238:                 LATHbits.LATH3 = 1;
  1626   0011DA  8680               	bsf	128,3,c	;volatile
  1627   0011DC                     
  1628                           ; BSR set to: 1
  1629                           ;main.c: 239:                 if ((Dusk.count == 0)&&(clock.hours >=15 && clock.hours < 
      +                          8)) {
  1630   0011DC  514B               	movf	(main@Dusk+2)& (0+255),w,b
  1631   0011DE  114C               	iorwf	(main@Dusk+3)& (0+255),w,b
  1632   0011E0  A4D8               	btfss	status,2,c
  1633   0011E2  EFF5  F008         	goto	u4781
  1634   0011E6  EFF7  F008         	goto	u4780
  1635   0011EA                     u4781:
  1636   0011EA  EF2E  F009         	goto	l4390
  1637   0011EE                     u4780:
  1638   0011EE                     
  1639                           ; BSR set to: 1
  1640   0011EE  51D6               	movf	(main@clock+5)& (0+255),w,b
  1641   0011F0  E109               	bnz	u4790
  1642   0011F2  0E0F               	movlw	15
  1643   0011F4  5DD5               	subwf	(main@clock+4)& (0+255),w,b
  1644   0011F6  A0D8               	btfss	status,0,c
  1645   0011F8  EF00  F009         	goto	u4791
  1646   0011FC  EF02  F009         	goto	u4790
  1647   001200                     u4791:
  1648   001200  EF2E  F009         	goto	l4390
  1649   001204                     u4790:
  1650   001204                     
  1651                           ; BSR set to: 1
  1652   001204  51D6               	movf	(main@clock+5)& (0+255),w,b
  1653   001206  E107               	bnz	u4801
  1654   001208  0E08               	movlw	8
  1655   00120A  5DD5               	subwf	(main@clock+4)& (0+255),w,b
  1656   00120C  B0D8               	btfsc	status,0,c
  1657   00120E  EF0B  F009         	goto	u4801
  1658   001212  EF0D  F009         	goto	u4800
  1659   001216                     u4801:
  1660   001216  EF2E  F009         	goto	l4390
  1661   00121A                     u4800:
  1662   00121A                     
  1663                           ; BSR set to: 1
  1664                           ;main.c: 240:                     ArrayAppend(Dusk.hours, Dusk.size, clock.hours);
  1665   00121A  0E4D               	movlw	low (main@Dusk+4)
  1666   00121C  6E01               	movwf	ArrayAppend@arrayTime^0,c
  1667   00121E  0E01               	movlw	high (main@Dusk+4)
  1668   001220  6E02               	movwf	(ArrayAppend@arrayTime+1)^0,c
  1669   001222  C149  F003         	movff	main@Dusk,ArrayAppend@size
  1670   001226  C14A  F004         	movff	main@Dusk+1,ArrayAppend@size+1
  1671   00122A  C1D5  F005         	movff	main@clock+4,ArrayAppend@Time
  1672   00122E  C1D6  F006         	movff	main@clock+5,ArrayAppend@Time+1
  1673   001232  ECA5  F018         	call	_ArrayAppend	;wreg free
  1674                           
  1675                           ;main.c: 241:                     ArrayAppend(Dusk.minutes, Dusk.size, clock.minutes);
  1676   001236  0E5B               	movlw	low (main@Dusk+18)
  1677   001238  6E01               	movwf	ArrayAppend@arrayTime^0,c
  1678   00123A  0E01               	movlw	high (main@Dusk+18)
  1679   00123C  6E02               	movwf	(ArrayAppend@arrayTime+1)^0,c
  1680   00123E  C149  F003         	movff	main@Dusk,ArrayAppend@size
  1681   001242  C14A  F004         	movff	main@Dusk+1,ArrayAppend@size+1
  1682   001246  C1D3  F005         	movff	main@clock+2,ArrayAppend@Time
  1683   00124A  C1D4  F006         	movff	main@clock+3,ArrayAppend@Time+1
  1684   00124E  ECA5  F018         	call	_ArrayAppend	;wreg free
  1685   001252                     
  1686                           ;main.c: 242:                     Dusk.count = 1;
  1687   001252  0E00               	movlw	0
  1688   001254  0101               	movlb	1	; () banked
  1689   001256  6F4C               	movwf	(main@Dusk+3)& (0+255),b
  1690   001258  0E01               	movlw	1
  1691   00125A  6F4B               	movwf	(main@Dusk+2)& (0+255),b
  1692   00125C                     l4390:
  1693                           
  1694                           ; BSR set to: 1
  1695                           ;main.c: 248:         if (ADC_getval() > light_threshold){
  1696   00125C  EC22  F01A         	call	_ADC_getval	;wreg free
  1697   001260  5001               	movf	?_ADC_getval^0,w,c
  1698   001262  0101               	movlb	1	; () banked
  1699   001264  5D1F               	subwf	main@light_threshold& (0+255),w,b
  1700   001266  5002               	movf	(?_ADC_getval+1)^0,w,c
  1701   001268  5920               	subwfb	(main@light_threshold+1)& (0+255),w,b
  1702   00126A  B0D8               	btfsc	status,0,c
  1703   00126C  EF3A  F009         	goto	u4811
  1704   001270  EF3C  F009         	goto	u4810
  1705   001274                     u4811:
  1706   001274  EF7D  F009         	goto	l4404
  1707   001278                     u4810:
  1708   001278                     
  1709                           ; BSR set to: 1
  1710                           ;main.c: 249:             LATHbits.LATH3 = 0;
  1711   001278  9680               	bcf	128,3,c	;volatile
  1712   00127A                     
  1713                           ; BSR set to: 1
  1714                           ;main.c: 250:             if ((Dawn.count == 0)&&(clock.hours >=4 && clock.hours < 8)) {
  1715   00127A  516B               	movf	(main@Dawn+2)& (0+255),w,b
  1716   00127C  116C               	iorwf	(main@Dawn+3)& (0+255),w,b
  1717   00127E  A4D8               	btfss	status,2,c
  1718   001280  EF44  F009         	goto	u4821
  1719   001284  EF46  F009         	goto	u4820
  1720   001288                     u4821:
  1721   001288  EF7D  F009         	goto	l4404
  1722   00128C                     u4820:
  1723   00128C                     
  1724                           ; BSR set to: 1
  1725   00128C  51D6               	movf	(main@clock+5)& (0+255),w,b
  1726   00128E  E109               	bnz	u4830
  1727   001290  0E04               	movlw	4
  1728   001292  5DD5               	subwf	(main@clock+4)& (0+255),w,b
  1729   001294  A0D8               	btfss	status,0,c
  1730   001296  EF4F  F009         	goto	u4831
  1731   00129A  EF51  F009         	goto	u4830
  1732   00129E                     u4831:
  1733   00129E  EF7D  F009         	goto	l4404
  1734   0012A2                     u4830:
  1735   0012A2                     
  1736                           ; BSR set to: 1
  1737   0012A2  51D6               	movf	(main@clock+5)& (0+255),w,b
  1738   0012A4  E107               	bnz	u4841
  1739   0012A6  0E08               	movlw	8
  1740   0012A8  5DD5               	subwf	(main@clock+4)& (0+255),w,b
  1741   0012AA  B0D8               	btfsc	status,0,c
  1742   0012AC  EF5A  F009         	goto	u4841
  1743   0012B0  EF5C  F009         	goto	u4840
  1744   0012B4                     u4841:
  1745   0012B4  EF7D  F009         	goto	l4404
  1746   0012B8                     u4840:
  1747   0012B8                     
  1748                           ; BSR set to: 1
  1749                           ;main.c: 251:                 ArrayAppend(Dawn.hours, Dawn.size, clock.hours);
  1750   0012B8  0E6D               	movlw	low (main@Dawn+4)
  1751   0012BA  6E01               	movwf	ArrayAppend@arrayTime^0,c
  1752   0012BC  0E01               	movlw	high (main@Dawn+4)
  1753   0012BE  6E02               	movwf	(ArrayAppend@arrayTime+1)^0,c
  1754   0012C0  C169  F003         	movff	main@Dawn,ArrayAppend@size
  1755   0012C4  C16A  F004         	movff	main@Dawn+1,ArrayAppend@size+1
  1756   0012C8  C1D5  F005         	movff	main@clock+4,ArrayAppend@Time
  1757   0012CC  C1D6  F006         	movff	main@clock+5,ArrayAppend@Time+1
  1758   0012D0  ECA5  F018         	call	_ArrayAppend	;wreg free
  1759                           
  1760                           ;main.c: 252:                 ArrayAppend(Dawn.minutes, Dawn.size, clock.minutes);
  1761   0012D4  0E7B               	movlw	low (main@Dawn+18)
  1762   0012D6  6E01               	movwf	ArrayAppend@arrayTime^0,c
  1763   0012D8  0E01               	movlw	high (main@Dawn+18)
  1764   0012DA  6E02               	movwf	(ArrayAppend@arrayTime+1)^0,c
  1765   0012DC  C169  F003         	movff	main@Dawn,ArrayAppend@size
  1766   0012E0  C16A  F004         	movff	main@Dawn+1,ArrayAppend@size+1
  1767   0012E4  C1D3  F005         	movff	main@clock+2,ArrayAppend@Time
  1768   0012E8  C1D4  F006         	movff	main@clock+3,ArrayAppend@Time+1
  1769   0012EC  ECA5  F018         	call	_ArrayAppend	;wreg free
  1770   0012F0                     
  1771                           ;main.c: 253:                 Dawn.count = 1;
  1772   0012F0  0E00               	movlw	0
  1773   0012F2  0101               	movlb	1	; () banked
  1774   0012F4  6F6C               	movwf	(main@Dawn+3)& (0+255),b
  1775   0012F6  0E01               	movlw	1
  1776   0012F8  6F6B               	movwf	(main@Dawn+2)& (0+255),b
  1777   0012FA                     l4404:
  1778                           
  1779                           ; BSR set to: 1
  1780                           ;main.c: 257:         if (clock.days > previousClockDays) {
  1781   0012FA  51D7               	movf	(main@clock+6)& (0+255),w,b
  1782   0012FC  5D18               	subwf	main@previousClockDays& (0+255),w,b
  1783   0012FE  51D8               	movf	(main@clock+7)& (0+255),w,b
  1784   001300  5919               	subwfb	(main@previousClockDays+1)& (0+255),w,b
  1785   001302  B0D8               	btfsc	status,0,c
  1786   001304  EF86  F009         	goto	u4851
  1787   001308  EF88  F009         	goto	u4850
  1788   00130C                     u4851:
  1789   00130C  EF2A  F00B         	goto	l4466
  1790   001310                     u4850:
  1791   001310                     
  1792                           ; BSR set to: 1
  1793                           ;main.c: 258:             Dawn.count = 0;
  1794   001310  0E00               	movlw	0
  1795   001312  6F6C               	movwf	(main@Dawn+3)& (0+255),b
  1796   001314  0E00               	movlw	0
  1797   001316  6F6B               	movwf	(main@Dawn+2)& (0+255),b
  1798                           
  1799                           ;main.c: 259:             Dusk.count = 0;
  1800   001318  0E00               	movlw	0
  1801   00131A  6F4C               	movwf	(main@Dusk+3)& (0+255),b
  1802   00131C  0E00               	movlw	0
  1803   00131E  6F4B               	movwf	(main@Dusk+2)& (0+255),b
  1804   001320                     
  1805                           ; BSR set to: 1
  1806                           ;main.c: 260:             daycount++;
  1807   001320  4B1B               	infsnz	main@daycount& (0+255),f,b
  1808   001322  2B1C               	incf	(main@daycount+1)& (0+255),f,b
  1809   001324                     
  1810                           ; BSR set to: 1
  1811                           ;main.c: 262:             previousClockDays = clock.days;
  1812   001324  C1D7  F118         	movff	main@clock+6,main@previousClockDays
  1813   001328  C1D8  F119         	movff	main@clock+7,main@previousClockDays+1
  1814   00132C                     
  1815                           ; BSR set to: 1
  1816                           ;main.c: 264:             if (daycount == 7) {
  1817   00132C  0E07               	movlw	7
  1818   00132E  191B               	xorwf	main@daycount& (0+255),w,b
  1819   001330  111C               	iorwf	(main@daycount+1)& (0+255),w,b
  1820   001332  A4D8               	btfss	status,2,c
  1821   001334  EF9E  F009         	goto	u4861
  1822   001338  EFA0  F009         	goto	u4860
  1823   00133C                     u4861:
  1824   00133C  EF2A  F00B         	goto	l4466
  1825   001340                     u4860:
  1826   001340                     
  1827                           ; BSR set to: 1
  1828                           ;main.c: 270:                 int operation = 0;
  1829   001340  0E00               	movlw	0
  1830   001342  6F24               	movwf	(main@operation+1)& (0+255),b
  1831   001344  0E00               	movlw	0
  1832   001346  6F23               	movwf	main@operation& (0+255),b
  1833   001348                     
  1834                           ; BSR set to: 1
  1835                           ;main.c: 272:                 int hours_temp = SolarPerMonth.solarMidHours[(clock.months
      +                           - 1)];
  1836   001348  EE21  F0DB         	lfsr	2,main@clock+10
  1837   00134C  CFDE F047          	movff	postinc2,??_main
  1838   001350  CFDD F048          	movff	postdec2,??_main+1
  1839   001354  90D8               	bcf	status,0,c
  1840   001356  3647               	rlcf	??_main^0,f,c
  1841   001358  3648               	rlcf	(??_main+1)^0,f,c
  1842   00135A  0E16               	movlw	22
  1843   00135C  2647               	addwf	??_main^0,f,c
  1844   00135E  0E00               	movlw	0
  1845   001360  2248               	addwfc	(??_main+1)^0,f,c
  1846   001362  0E89               	movlw	low main@SolarPerMonth
  1847   001364  2447               	addwf	??_main^0,w,c
  1848   001366  6ED9               	movwf	fsr2l,c
  1849   001368  0E01               	movlw	high main@SolarPerMonth
  1850   00136A  2048               	addwfc	(??_main+1)^0,w,c
  1851   00136C  6EDA               	movwf	fsr2h,c
  1852   00136E  CFDE F125          	movff	postinc2,main@hours_temp
  1853   001372  CFDD F126          	movff	postdec2,main@hours_temp+1
  1854   001376                     
  1855                           ; BSR set to: 1
  1856                           ;main.c: 273:                 int minutes_temp = SolarPerMonth.solarMidMinutes[(clock.mo
      +                          nths - 1)];
  1857   001376  EE21  F0DB         	lfsr	2,main@clock+10
  1858   00137A  CFDE F047          	movff	postinc2,??_main
  1859   00137E  CFDD F048          	movff	postdec2,??_main+1
  1860   001382  90D8               	bcf	status,0,c
  1861   001384  3647               	rlcf	??_main^0,f,c
  1862   001386  3648               	rlcf	(??_main+1)^0,f,c
  1863   001388  0EFE               	movlw	254
  1864   00138A  2447               	addwf	??_main^0,w,c
  1865   00138C  6E49               	movwf	(??_main+2)^0,c
  1866   00138E  0EFF               	movlw	255
  1867   001390  2048               	addwfc	(??_main+1)^0,w,c
  1868   001392  6E4A               	movwf	(??_main+3)^0,c
  1869   001394  0E89               	movlw	low main@SolarPerMonth
  1870   001396  2449               	addwf	(??_main+2)^0,w,c
  1871   001398  6ED9               	movwf	fsr2l,c
  1872   00139A  0E01               	movlw	high main@SolarPerMonth
  1873   00139C  204A               	addwfc	(??_main+3)^0,w,c
  1874   00139E  6EDA               	movwf	fsr2h,c
  1875   0013A0  CFDE F112          	movff	postinc2,main@minutes_temp
  1876   0013A4  CFDD F113          	movff	postdec2,main@minutes_temp+1
  1877                           
  1878                           ;main.c: 275:                 if (clock.DSTstate = 1) {hours_temp = hours_temp + 1;}
  1879   0013A8  0E00               	movlw	0
  1880   0013AA  6FE0               	movwf	(main@clock+15)& (0+255),b
  1881   0013AC  0E01               	movlw	1
  1882   0013AE  6FDF               	movwf	(main@clock+14)& (0+255),b
  1883   0013B0                     
  1884                           ; BSR set to: 1
  1885   0013B0  0E01               	movlw	1
  1886   0013B2  2525               	addwf	main@hours_temp& (0+255),w,b
  1887   0013B4  6F25               	movwf	main@hours_temp& (0+255),b
  1888   0013B6  0E00               	movlw	0
  1889   0013B8  2126               	addwfc	(main@hours_temp+1)& (0+255),w,b
  1890   0013BA  6F26               	movwf	(main@hours_temp+1)& (0+255),b
  1891   0013BC                     
  1892                           ; BSR set to: 1
  1893                           ;main.c: 276:                 if (hours_temp = 0 || hours_temp == 1) {hours_temp = hours
      +                          _temp + 24;}
  1894   0013BC  0E01               	movlw	1
  1895   0013BE  6F1A               	movwf	_main$298& (0+255),b
  1896   0013C0  0525               	decf	main@hours_temp& (0+255),w,b
  1897   0013C2  1126               	iorwf	(main@hours_temp+1)& (0+255),w,b
  1898   0013C4  B4D8               	btfsc	status,2,c
  1899   0013C6  EFE7  F009         	goto	u4871
  1900   0013CA  EFE9  F009         	goto	u4870
  1901   0013CE                     u4871:
  1902   0013CE  EFEB  F009         	goto	l4426
  1903   0013D2                     u4870:
  1904   0013D2                     
  1905                           ; BSR set to: 1
  1906   0013D2  0E00               	movlw	0
  1907   0013D4  6F1A               	movwf	_main$298& (0+255),b
  1908   0013D6                     l4426:
  1909                           
  1910                           ; BSR set to: 1
  1911   0013D6  C11A  F125         	movff	_main$298,main@hours_temp
  1912   0013DA  6B26               	clrf	(main@hours_temp+1)& (0+255),b
  1913   0013DC  5125               	movf	main@hours_temp& (0+255),w,b
  1914   0013DE  1126               	iorwf	(main@hours_temp+1)& (0+255),w,b
  1915   0013E0  B4D8               	btfsc	status,2,c
  1916   0013E2  EFF5  F009         	goto	u4881
  1917   0013E6  EFF7  F009         	goto	u4880
  1918   0013EA                     u4881:
  1919   0013EA  EFFD  F009         	goto	l4430
  1920   0013EE                     u4880:
  1921   0013EE                     
  1922                           ; BSR set to: 1
  1923   0013EE  0E18               	movlw	24
  1924   0013F0  2525               	addwf	main@hours_temp& (0+255),w,b
  1925   0013F2  6F25               	movwf	main@hours_temp& (0+255),b
  1926   0013F4  0E00               	movlw	0
  1927   0013F6  2126               	addwfc	(main@hours_temp+1)& (0+255),w,b
  1928   0013F8  6F26               	movwf	(main@hours_temp+1)& (0+255),b
  1929   0013FA                     l4430:
  1930                           
  1931                           ; BSR set to: 1
  1932                           ;main.c: 279:                 int knownSolarMidnight = hours_temp*60 + minutes_temp;
  1933   0013FA  C125  F001         	movff	main@hours_temp,___wmul@multiplier
  1934   0013FE  C126  F002         	movff	main@hours_temp+1,___wmul@multiplier+1
  1935   001402  0E00               	movlw	0
  1936   001404  6E04               	movwf	(___wmul@multiplicand+1)^0,c
  1937   001406  0E3C               	movlw	60
  1938   001408  6E03               	movwf	___wmul@multiplicand^0,c
  1939   00140A  EC3A  F01A         	call	___wmul	;wreg free
  1940   00140E  0101               	movlb	1	; () banked
  1941   001410  5112               	movf	main@minutes_temp& (0+255),w,b
  1942   001412  2401               	addwf	?___wmul^0,w,c
  1943   001414  6F14               	movwf	main@knownSolarMidnight& (0+255),b
  1944   001416  5113               	movf	(main@minutes_temp+1)& (0+255),w,b
  1945   001418  2002               	addwfc	(?___wmul+1)^0,w,c
  1946   00141A  6F15               	movwf	(main@knownSolarMidnight+1)& (0+255),b
  1947   00141C                     
  1948                           ; BSR set to: 1
  1949                           ;main.c: 281:                 struct array_structure SolarMidnight;;main.c: 282:        
      +                                       SolarMidnight.minutes[0] = 0;
  1950   00141C  0E00               	movlw	0
  1951   00141E  6F3C               	movwf	(main@SolarMidnight+19)& (0+255),b
  1952   001420  0E00               	movlw	0
  1953   001422  6F3B               	movwf	(main@SolarMidnight+18)& (0+255),b
  1954   001424                     
  1955                           ; BSR set to: 1
  1956                           ;main.c: 283:                     SolarMidnight.minutes[1] = 0;
  1957   001424  0E00               	movlw	0
  1958   001426  6F3E               	movwf	(main@SolarMidnight+21)& (0+255),b
  1959   001428  0E00               	movlw	0
  1960   00142A  6F3D               	movwf	(main@SolarMidnight+20)& (0+255),b
  1961   00142C                     
  1962                           ; BSR set to: 1
  1963                           ;main.c: 284:                     SolarMidnight.minutes[2] = 0;
  1964   00142C  0E00               	movlw	0
  1965   00142E  6F40               	movwf	(main@SolarMidnight+23)& (0+255),b
  1966   001430  0E00               	movlw	0
  1967   001432  6F3F               	movwf	(main@SolarMidnight+22)& (0+255),b
  1968   001434                     
  1969                           ; BSR set to: 1
  1970                           ;main.c: 285:                     SolarMidnight.minutes[3] = 0;
  1971   001434  0E00               	movlw	0
  1972   001436  6F42               	movwf	(main@SolarMidnight+25)& (0+255),b
  1973   001438  0E00               	movlw	0
  1974   00143A  6F41               	movwf	(main@SolarMidnight+24)& (0+255),b
  1975   00143C                     
  1976                           ; BSR set to: 1
  1977                           ;main.c: 286:                     SolarMidnight.minutes[4] = 0;
  1978   00143C  0E00               	movlw	0
  1979   00143E  6F44               	movwf	(main@SolarMidnight+27)& (0+255),b
  1980   001440  0E00               	movlw	0
  1981   001442  6F43               	movwf	(main@SolarMidnight+26)& (0+255),b
  1982   001444                     
  1983                           ; BSR set to: 1
  1984                           ;main.c: 287:                     SolarMidnight.minutes[5] = 0;
  1985   001444  0E00               	movlw	0
  1986   001446  6F46               	movwf	(main@SolarMidnight+29)& (0+255),b
  1987   001448  0E00               	movlw	0
  1988   00144A  6F45               	movwf	(main@SolarMidnight+28)& (0+255),b
  1989   00144C                     
  1990                           ; BSR set to: 1
  1991                           ;main.c: 288:                     SolarMidnight.minutes[6] = 0;
  1992   00144C  0E00               	movlw	0
  1993   00144E  6F48               	movwf	(main@SolarMidnight+31)& (0+255),b
  1994   001450  0E00               	movlw	0
  1995   001452  6F47               	movwf	(main@SolarMidnight+30)& (0+255),b
  1996   001454                     
  1997                           ; BSR set to: 1
  1998                           ;main.c: 291:                 for (int i = 0; i <= Dawn.size-1; i++) {
  1999   001454  0E00               	movlw	0
  2000   001456  6F28               	movwf	(main@i+1)& (0+255),b
  2001   001458  0E00               	movlw	0
  2002   00145A  6F27               	movwf	main@i& (0+255),b
  2003   00145C  EFF6  F00A         	goto	l4456
  2004   001460                     l4448:
  2005                           
  2006                           ; BSR set to: 1
  2007                           ;main.c: 292:                     operation = (Dawn.hours[i] * 60 + Dawn.minutes[i]) + (
      +                          Dusk.hours[i]*60 + Dusk.minutes[i]);
  2008   001460  C127  F047         	movff	main@i,??_main
  2009   001464  C128  F048         	movff	main@i+1,??_main+1
  2010   001468  90D8               	bcf	status,0,c
  2011   00146A  3647               	rlcf	??_main^0,f,c
  2012   00146C  3648               	rlcf	(??_main+1)^0,f,c
  2013   00146E  0E12               	movlw	18
  2014   001470  2647               	addwf	??_main^0,f,c
  2015   001472  0E00               	movlw	0
  2016   001474  2248               	addwfc	(??_main+1)^0,f,c
  2017   001476  0E69               	movlw	low main@Dawn
  2018   001478  2447               	addwf	??_main^0,w,c
  2019   00147A  6ED9               	movwf	fsr2l,c
  2020   00147C  0E01               	movlw	high main@Dawn
  2021   00147E  2048               	addwfc	(??_main+1)^0,w,c
  2022   001480  6EDA               	movwf	fsr2h,c
  2023   001482  CFDE F049          	movff	postinc2,??_main+2
  2024   001486  CFDD F04A          	movff	postdec2,??_main+3
  2025   00148A  C127  F04B         	movff	main@i,??_main+4
  2026   00148E  C128  F04C         	movff	main@i+1,??_main+5
  2027   001492  90D8               	bcf	status,0,c
  2028   001494  364B               	rlcf	(??_main+4)^0,f,c
  2029   001496  364C               	rlcf	(??_main+5)^0,f,c
  2030   001498  0E12               	movlw	18
  2031   00149A  264B               	addwf	(??_main+4)^0,f,c
  2032   00149C  0E00               	movlw	0
  2033   00149E  224C               	addwfc	(??_main+5)^0,f,c
  2034   0014A0  0E49               	movlw	low main@Dusk
  2035   0014A2  244B               	addwf	(??_main+4)^0,w,c
  2036   0014A4  6ED9               	movwf	fsr2l,c
  2037   0014A6  0E01               	movlw	high main@Dusk
  2038   0014A8  204C               	addwfc	(??_main+5)^0,w,c
  2039   0014AA  6EDA               	movwf	fsr2h,c
  2040   0014AC  CFDE F04D          	movff	postinc2,??_main+6
  2041   0014B0  CFDD F04E          	movff	postdec2,??_main+7
  2042   0014B4  C127  F04F         	movff	main@i,??_main+8
  2043   0014B8  C128  F050         	movff	main@i+1,??_main+9
  2044   0014BC  90D8               	bcf	status,0,c
  2045   0014BE  364F               	rlcf	(??_main+8)^0,f,c
  2046   0014C0  3650               	rlcf	(??_main+9)^0,f,c
  2047   0014C2  0E04               	movlw	4
  2048   0014C4  264F               	addwf	(??_main+8)^0,f,c
  2049   0014C6  0E00               	movlw	0
  2050   0014C8  2250               	addwfc	(??_main+9)^0,f,c
  2051   0014CA  0E49               	movlw	low main@Dusk
  2052   0014CC  244F               	addwf	(??_main+8)^0,w,c
  2053   0014CE  6ED9               	movwf	fsr2l,c
  2054   0014D0  0E01               	movlw	high main@Dusk
  2055   0014D2  2050               	addwfc	(??_main+9)^0,w,c
  2056   0014D4  6EDA               	movwf	fsr2h,c
  2057   0014D6  CFDE F001          	movff	postinc2,___wmul@multiplier
  2058   0014DA  CFDD F002          	movff	postdec2,___wmul@multiplier+1
  2059   0014DE  0E00               	movlw	0
  2060   0014E0  6E04               	movwf	(___wmul@multiplicand+1)^0,c
  2061   0014E2  0E3C               	movlw	60
  2062   0014E4  6E03               	movwf	___wmul@multiplicand^0,c
  2063   0014E6  EC3A  F01A         	call	___wmul	;wreg free
  2064   0014EA  C001  F051         	movff	?___wmul,??_main+10
  2065   0014EE  C002  F052         	movff	?___wmul+1,??_main+11
  2066   0014F2  C127  F053         	movff	main@i,??_main+12
  2067   0014F6  C128  F054         	movff	main@i+1,??_main+13
  2068   0014FA  90D8               	bcf	status,0,c
  2069   0014FC  3653               	rlcf	(??_main+12)^0,f,c
  2070   0014FE  3654               	rlcf	(??_main+13)^0,f,c
  2071   001500  0E04               	movlw	4
  2072   001502  2653               	addwf	(??_main+12)^0,f,c
  2073   001504  0E00               	movlw	0
  2074   001506  2254               	addwfc	(??_main+13)^0,f,c
  2075   001508  0E69               	movlw	low main@Dawn
  2076   00150A  2453               	addwf	(??_main+12)^0,w,c
  2077   00150C  6ED9               	movwf	fsr2l,c
  2078   00150E  0E01               	movlw	high main@Dawn
  2079   001510  2054               	addwfc	(??_main+13)^0,w,c
  2080   001512  6EDA               	movwf	fsr2h,c
  2081   001514  CFDE F001          	movff	postinc2,___wmul@multiplier
  2082   001518  CFDD F002          	movff	postdec2,___wmul@multiplier+1
  2083   00151C  0E00               	movlw	0
  2084   00151E  6E04               	movwf	(___wmul@multiplicand+1)^0,c
  2085   001520  0E3C               	movlw	60
  2086   001522  6E03               	movwf	___wmul@multiplicand^0,c
  2087   001524  EC3A  F01A         	call	___wmul	;wreg free
  2088   001528  5001               	movf	?___wmul^0,w,c
  2089   00152A  2451               	addwf	(??_main+10)^0,w,c
  2090   00152C  6E55               	movwf	(??_main+14)^0,c
  2091   00152E  5002               	movf	(?___wmul+1)^0,w,c
  2092   001530  2052               	addwfc	(??_main+11)^0,w,c
  2093   001532  6E56               	movwf	(??_main+15)^0,c
  2094   001534  504D               	movf	(??_main+6)^0,w,c
  2095   001536  2455               	addwf	(??_main+14)^0,w,c
  2096   001538  6E57               	movwf	(??_main+16)^0,c
  2097   00153A  504E               	movf	(??_main+7)^0,w,c
  2098   00153C  2056               	addwfc	(??_main+15)^0,w,c
  2099   00153E  6E58               	movwf	(??_main+17)^0,c
  2100   001540  5049               	movf	(??_main+2)^0,w,c
  2101   001542  2457               	addwf	(??_main+16)^0,w,c
  2102   001544  0101               	movlb	1	; () banked
  2103   001546  6F23               	movwf	main@operation& (0+255),b
  2104   001548  504A               	movf	(??_main+3)^0,w,c
  2105   00154A  2058               	addwfc	(??_main+17)^0,w,c
  2106   00154C  6F24               	movwf	(main@operation+1)& (0+255),b
  2107   00154E                     
  2108                           ; BSR set to: 1
  2109                           ;main.c: 293:                     operation = operation * 0.5 + 12*60;
  2110   00154E  0E00               	movlw	0
  2111   001550  6E2C               	movwf	___fladd@a^0,c
  2112   001552  0E00               	movlw	0
  2113   001554  6E2D               	movwf	(___fladd@a+1)^0,c
  2114   001556  0E34               	movlw	52
  2115   001558  6E2E               	movwf	(___fladd@a+2)^0,c
  2116   00155A  0E44               	movlw	68
  2117   00155C  6E2F               	movwf	(___fladd@a+3)^0,c
  2118   00155E  0E00               	movlw	0
  2119   001560  6E13               	movwf	___flmul@a^0,c
  2120   001562  0E00               	movlw	0
  2121   001564  6E14               	movwf	(___flmul@a+1)^0,c
  2122   001566  0E00               	movlw	0
  2123   001568  6E15               	movwf	(___flmul@a+2)^0,c
  2124   00156A  0E3F               	movlw	63
  2125   00156C  6E16               	movwf	(___flmul@a+3)^0,c
  2126   00156E  C123  F001         	movff	main@operation,___xxtofl@val
  2127   001572  C124  F002         	movff	main@operation+1,___xxtofl@val+1
  2128   001576  0E00               	movlw	0
  2129   001578  BE02               	btfsc	(___xxtofl@val+1)^0,7,c
  2130   00157A  0EFF               	movlw	-1
  2131   00157C  6E03               	movwf	(___xxtofl@val+2)^0,c
  2132   00157E  6E04               	movwf	(___xxtofl@val+3)^0,c
  2133   001580  0E01               	movlw	1
  2134   001582  ECE5  F012         	call	___xxtofl
  2135   001586  C001  F00F         	movff	?___xxtofl,___flmul@b
  2136   00158A  C002  F010         	movff	?___xxtofl+1,___flmul@b+1
  2137   00158E  C003  F011         	movff	?___xxtofl+2,___flmul@b+2
  2138   001592  C004  F012         	movff	?___xxtofl+3,___flmul@b+3
  2139   001596  ECD0  F010         	call	___flmul	;wreg free
  2140   00159A  C00F  F028         	movff	?___flmul,___fladd@b
  2141   00159E  C010  F029         	movff	?___flmul+1,___fladd@b+1
  2142   0015A2  C011  F02A         	movff	?___flmul+2,___fladd@b+2
  2143   0015A6  C012  F02B         	movff	?___flmul+3,___fladd@b+3
  2144   0015AA  EC70  F00E         	call	___fladd	;wreg free
  2145   0015AE  C028  F038         	movff	?___fladd,___fltol@f1
  2146   0015B2  C029  F039         	movff	?___fladd+1,___fltol@f1+1
  2147   0015B6  C02A  F03A         	movff	?___fladd+2,___fltol@f1+2
  2148   0015BA  C02B  F03B         	movff	?___fladd+3,___fltol@f1+3
  2149   0015BE  ECC4  F015         	call	___fltol	;wreg free
  2150   0015C2  C038  F123         	movff	?___fltol,main@operation
  2151   0015C6  C039  F124         	movff	?___fltol+1,main@operation+1
  2152   0015CA                     
  2153                           ;main.c: 294:                     ArrayAppend(SolarMidnight.minutes, 7, operation);
  2154   0015CA  0E3B               	movlw	low (main@SolarMidnight+18)
  2155   0015CC  6E01               	movwf	ArrayAppend@arrayTime^0,c
  2156   0015CE  0E01               	movlw	high (main@SolarMidnight+18)
  2157   0015D0  6E02               	movwf	(ArrayAppend@arrayTime+1)^0,c
  2158   0015D2  0E00               	movlw	0
  2159   0015D4  6E04               	movwf	(ArrayAppend@size+1)^0,c
  2160   0015D6  0E07               	movlw	7
  2161   0015D8  6E03               	movwf	ArrayAppend@size^0,c
  2162   0015DA  C123  F005         	movff	main@operation,ArrayAppend@Time
  2163   0015DE  C124  F006         	movff	main@operation+1,ArrayAppend@Time+1
  2164   0015E2  ECA5  F018         	call	_ArrayAppend	;wreg free
  2165   0015E6                     
  2166                           ;main.c: 295:                 }
  2167   0015E6  0101               	movlb	1	; () banked
  2168   0015E8  4B27               	infsnz	main@i& (0+255),f,b
  2169   0015EA  2B28               	incf	(main@i+1)& (0+255),f,b
  2170   0015EC                     l4456:
  2171                           
  2172                           ; BSR set to: 1
  2173   0015EC  0EFF               	movlw	255
  2174   0015EE  2569               	addwf	main@Dawn& (0+255),w,b
  2175   0015F0  6E47               	movwf	??_main^0,c
  2176   0015F2  0EFF               	movlw	255
  2177   0015F4  216A               	addwfc	(main@Dawn+1)& (0+255),w,b
  2178   0015F6  6E48               	movwf	(??_main+1)^0,c
  2179   0015F8  5127               	movf	main@i& (0+255),w,b
  2180   0015FA  5C47               	subwf	??_main^0,w,c
  2181   0015FC  5048               	movf	(??_main+1)^0,w,c
  2182   0015FE  0A80               	xorlw	128
  2183   001600  6E49               	movwf	(??_main+2)^0,c
  2184   001602  5128               	movf	(main@i+1)& (0+255),w,b
  2185   001604  0A80               	xorlw	128
  2186   001606  5849               	subwfb	(??_main+2)^0,w,c
  2187   001608  B0D8               	btfsc	status,0,c
  2188   00160A  EF09  F00B         	goto	u4891
  2189   00160E  EF0B  F00B         	goto	u4890
  2190   001612                     u4891:
  2191   001612  EF30  F00A         	goto	l4448
  2192   001616                     u4890:
  2193   001616                     
  2194                           ; BSR set to: 1
  2195                           ;main.c: 296:                 avgSolarMidnight = ArrayAverage(SolarMidnight.minutes, 7);
  2196   001616  0E3B               	movlw	low (main@SolarMidnight+18)
  2197   001618  6E08               	movwf	ArrayAverage@arrayTime^0,c
  2198   00161A  0E01               	movlw	high (main@SolarMidnight+18)
  2199   00161C  6E09               	movwf	(ArrayAverage@arrayTime+1)^0,c
  2200   00161E  0E00               	movlw	0
  2201   001620  6E0B               	movwf	(ArrayAverage@size+1)^0,c
  2202   001622  0E07               	movlw	7
  2203   001624  6E0A               	movwf	ArrayAverage@size^0,c
  2204   001626  EC19  F018         	call	_ArrayAverage	;wreg free
  2205   00162A  C008  F121         	movff	?_ArrayAverage,main@avgSolarMidnight
  2206   00162E  C009  F122         	movff	?_ArrayAverage+1,main@avgSolarMidnight+1
  2207   001632                     
  2208                           ;main.c: 297:                 int minute_diff = knownSolarMidnight - avgSolarMidnight;
  2209   001632  0101               	movlb	1	; () banked
  2210   001634  5121               	movf	main@avgSolarMidnight& (0+255),w,b
  2211   001636  5D14               	subwf	main@knownSolarMidnight& (0+255),w,b
  2212   001638  6F16               	movwf	main@minute_diff& (0+255),b
  2213   00163A  5122               	movf	(main@avgSolarMidnight+1)& (0+255),w,b
  2214   00163C  5915               	subwfb	(main@knownSolarMidnight+1)& (0+255),w,b
  2215   00163E  6F17               	movwf	(main@minute_diff+1)& (0+255),b
  2216   001640                     
  2217                           ; BSR set to: 1
  2218                           ;main.c: 300:                 clock.minutes = clock.minutes + minute_diff;
  2219   001640  5116               	movf	main@minute_diff& (0+255),w,b
  2220   001642  25D3               	addwf	(main@clock+2)& (0+255),w,b
  2221   001644  6FD3               	movwf	(main@clock+2)& (0+255),b
  2222   001646  5117               	movf	(main@minute_diff+1)& (0+255),w,b
  2223   001648  21D4               	addwfc	(main@clock+3)& (0+255),w,b
  2224   00164A  6FD4               	movwf	(main@clock+3)& (0+255),b
  2225   00164C                     
  2226                           ; BSR set to: 1
  2227                           ;main.c: 304:                 daycount = 0;
  2228   00164C  0E00               	movlw	0
  2229   00164E  6F1C               	movwf	(main@daycount+1)& (0+255),b
  2230   001650  0E00               	movlw	0
  2231   001652  6F1B               	movwf	main@daycount& (0+255),b
  2232   001654                     l4466:
  2233                           
  2234                           ; BSR set to: 1
  2235                           ;main.c: 308:         LCD_setline(1);
  2236   001654  0E01               	movlw	1
  2237   001656  ECD1  F019         	call	_LCD_setline
  2238   00165A                     
  2239                           ;main.c: 309:         sprintf(buffer, "Time:%02d:%02d:%02d D%01d",clock.hours, clock.min
      +                          utes, clock.seconds, clock.DoW);
  2240   00165A  0E00               	movlw	low main@buffer
  2241   00165C  6E2F               	movwf	sprintf@s^0,c
  2242   00165E  0E01               	movlw	high main@buffer
  2243   001660  6E30               	movwf	(sprintf@s+1)^0,c
  2244   001662  0E01               	movlw	low STR_1
  2245   001664  6E31               	movwf	sprintf@fmt^0,c
  2246   001666  C1D5  F032         	movff	main@clock+4,?_sprintf+3
  2247   00166A  C1D6  F033         	movff	main@clock+5,?_sprintf+4
  2248   00166E  C1D3  F034         	movff	main@clock+2,?_sprintf+5
  2249   001672  C1D4  F035         	movff	main@clock+3,?_sprintf+6
  2250   001676  C1D1  F036         	movff	main@clock,?_sprintf+7
  2251   00167A  C1D2  F037         	movff	main@clock+1,?_sprintf+8
  2252   00167E  C1D9  F038         	movff	main@clock+8,?_sprintf+9
  2253   001682  C1DA  F039         	movff	main@clock+9,?_sprintf+10
  2254   001686  EC95  F019         	call	_sprintf	;wreg free
  2255   00168A                     
  2256                           ;main.c: 310:         LCD_sendstring(buffer);
  2257   00168A  0E00               	movlw	low main@buffer
  2258   00168C  6E04               	movwf	LCD_sendstring@string^0,c
  2259   00168E  0E01               	movlw	high main@buffer
  2260   001690  6E05               	movwf	(LCD_sendstring@string+1)^0,c
  2261   001692  EC08  F01A         	call	_LCD_sendstring	;wreg free
  2262   001696                     
  2263                           ;main.c: 311:         LCD_setline(2);
  2264   001696  0E02               	movlw	2
  2265   001698  ECD1  F019         	call	_LCD_setline
  2266   00169C                     
  2267                           ;main.c: 312:         sprintf(buffer, "Date:%02d/%02d/%04d",clock.days, clock.months, av
      +                          gSolarMidnight);
  2268   00169C  0E00               	movlw	low main@buffer
  2269   00169E  6E2F               	movwf	sprintf@s^0,c
  2270   0016A0  0E01               	movlw	high main@buffer
  2271   0016A2  6E30               	movwf	(sprintf@s+1)^0,c
  2272   0016A4  0E30               	movlw	low STR_2
  2273   0016A6  6E31               	movwf	sprintf@fmt^0,c
  2274   0016A8  C1D7  F032         	movff	main@clock+6,?_sprintf+3
  2275   0016AC  C1D8  F033         	movff	main@clock+7,?_sprintf+4
  2276   0016B0  C1DB  F034         	movff	main@clock+10,?_sprintf+5
  2277   0016B4  C1DC  F035         	movff	main@clock+11,?_sprintf+6
  2278   0016B8  C121  F036         	movff	main@avgSolarMidnight,?_sprintf+7
  2279   0016BC  C122  F037         	movff	main@avgSolarMidnight+1,?_sprintf+8
  2280   0016C0  EC95  F019         	call	_sprintf	;wreg free
  2281   0016C4                     
  2282                           ;main.c: 313:         LCD_sendstring(buffer);
  2283   0016C4  0E00               	movlw	low main@buffer
  2284   0016C6  6E04               	movwf	LCD_sendstring@string^0,c
  2285   0016C8  0E01               	movlw	high main@buffer
  2286   0016CA  6E05               	movwf	(LCD_sendstring@string+1)^0,c
  2287   0016CC  EC08  F01A         	call	_LCD_sendstring	;wreg free
  2288   0016D0  EF82  F008         	goto	l4366
  2289   0016D4  EF18  F000         	goto	start
  2290   0016D8                     __end_of_main:
  2291                           	callstack 0
  2292                           
  2293 ;; *************** function _sprintf *****************
  2294 ;; Defined at:
  2295 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\nf_sprintf.c"
  2296 ;; Parameters:    Size  Location     Type
  2297 ;;  s               2   46[COMRAM] PTR unsigned char 
  2298 ;;		 -> main@buffer(18), 
  2299 ;;  fmt             1   48[COMRAM] PTR const unsigned char 
  2300 ;;		 -> STR_3(21), STR_2(20), STR_1(26), 
  2301 ;; Auto vars:     Size  Location     Type
  2302 ;;  f              12   58[COMRAM] struct _IO_FILE
  2303 ;;  ret             2    0        int 
  2304 ;;  ap              1   57[COMRAM] PTR void [1]
  2305 ;;		 -> ?_sprintf(2), 
  2306 ;; Return value:  Size  Location     Type
  2307 ;;                  2   46[COMRAM] int 
  2308 ;; Registers used:
  2309 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2310 ;; Tracked objects:
  2311 ;;		On entry : 0/0
  2312 ;;		On exit  : 0/0
  2313 ;;		Unchanged: 0/0
  2314 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2315 ;;      Params:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2316 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2317 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2318 ;;      Totals:        24       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2319 ;;Total ram usage:       24 bytes
  2320 ;; Hardware stack levels used: 1
  2321 ;; Hardware stack levels required when called: 8
  2322 ;; This function calls:
  2323 ;;		_vfprintf
  2324 ;; This function is called by:
  2325 ;;		_main
  2326 ;;		_ADC2String
  2327 ;; This function uses a non-reentrant model
  2328 ;;
  2329                           
  2330                           	psect	text1
  2331   00332A                     __ptext1:
  2332                           	callstack 0
  2333   00332A                     _sprintf:
  2334                           	callstack 22
  2335   00332A  0E32               	movlw	low (?_sprintf+3)
  2336   00332C  6E3A               	movwf	sprintf@ap^0,c
  2337   00332E  C02F  F03B         	movff	sprintf@s,sprintf@f
  2338   003332  C030  F03C         	movff	sprintf@s+1,sprintf@f+1
  2339   003336  0E00               	movlw	0
  2340   003338  6E3F               	movwf	(sprintf@f+4)^0,c
  2341   00333A  0E00               	movlw	0
  2342   00333C  6E3E               	movwf	(sprintf@f+3)^0,c
  2343   00333E  0E00               	movlw	0
  2344   003340  6E46               	movwf	(sprintf@f+11)^0,c
  2345   003342  0E00               	movlw	0
  2346   003344  6E45               	movwf	(sprintf@f+10)^0,c
  2347   003346  0E3B               	movlw	low sprintf@f
  2348   003348  6E2B               	movwf	vfprintf@fp^0,c
  2349   00334A  C031  F02C         	movff	sprintf@fmt,vfprintf@fmt
  2350   00334E  0E3A               	movlw	low sprintf@ap
  2351   003350  6E2D               	movwf	vfprintf@ap^0,c
  2352   003352  EC74  F019         	call	_vfprintf	;wreg free
  2353   003356  503E               	movf	(sprintf@f+3)^0,w,c
  2354   003358  242F               	addwf	sprintf@s^0,w,c
  2355   00335A  6ED9               	movwf	fsr2l,c
  2356   00335C  503F               	movf	(sprintf@f+4)^0,w,c
  2357   00335E  2030               	addwfc	(sprintf@s+1)^0,w,c
  2358   003360  6EDA               	movwf	fsr2h,c
  2359   003362  6ADF               	clrf	indf2,c
  2360   003364  0012               	return		;funcret
  2361   003366                     __end_of_sprintf:
  2362                           	callstack 0
  2363                           
  2364 ;; *************** function _vfprintf *****************
  2365 ;; Defined at:
  2366 ;;		line 1817 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
  2367 ;; Parameters:    Size  Location     Type
  2368 ;;  fp              1   42[COMRAM] PTR struct _IO_FILE
  2369 ;;		 -> sprintf@f(12), 
  2370 ;;  fmt             1   43[COMRAM] PTR const unsigned char 
  2371 ;;		 -> STR_3(21), STR_2(20), STR_1(26), 
  2372 ;;  ap              1   44[COMRAM] PTR PTR void 
  2373 ;;		 -> sprintf@ap(1), 
  2374 ;; Auto vars:     Size  Location     Type
  2375 ;;  cfmt            1   45[COMRAM] PTR unsigned char 
  2376 ;;		 -> STR_3(21), STR_2(20), STR_1(26), 
  2377 ;; Return value:  Size  Location     Type
  2378 ;;                  2   42[COMRAM] int 
  2379 ;; Registers used:
  2380 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2381 ;; Tracked objects:
  2382 ;;		On entry : 0/0
  2383 ;;		On exit  : 0/0
  2384 ;;		Unchanged: 0/0
  2385 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2386 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2387 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2388 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2389 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2390 ;;Total ram usage:        4 bytes
  2391 ;; Hardware stack levels used: 1
  2392 ;; Hardware stack levels required when called: 7
  2393 ;; This function calls:
  2394 ;;		_vfpfcnvrt
  2395 ;; This function is called by:
  2396 ;;		_sprintf
  2397 ;; This function uses a non-reentrant model
  2398 ;;
  2399                           
  2400                           	psect	text2
  2401   0032E8                     __ptext2:
  2402                           	callstack 0
  2403   0032E8                     _vfprintf:
  2404                           	callstack 22
  2405   0032E8                     
  2406                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1817: int vfprint
>>>>>>> Stashed changes
      +                          f(FILE *fp, const char *fmt, va_list ap);C:\Program Files\Microchip\xc8\v2.45\pic\source
      +                          s\c99\common\doprnt.c: 1818: {;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\comm
      +                          on\doprnt.c: 1820:     char *cfmt;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\
      +                          common\doprnt.c: 1822:     cfmt = (char *)fmt;
<<<<<<< Updated upstream
   953   001D5C  C02C  F02E         	movff	vfprintf@fmt,vfprintf@cfmt
   954                           
   955                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1826:     while (
      +                          *cfmt) {
   956   001D60  EFBA  F00E         	goto	l2161
   957   001D64                     l2159:
   958                           
   959                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1830:    vfpfcnvr
      +                          t(fp, &cfmt, ap);
   960   001D64  C02B  F020         	movff	vfprintf@fp,vfpfcnvrt@fp
   961   001D68  0E2E               	movlw	low vfprintf@cfmt
   962   001D6A  6E21               	movwf	vfpfcnvrt@fmt^0,c
   963   001D6C  C02D  F022         	movff	vfprintf@ap,vfpfcnvrt@ap
   964   001D70  ECC3  F009         	call	_vfpfcnvrt	;wreg free
   965   001D74                     l2161:
   966                           
   967                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1826:     while (
      +                          *cfmt) {
   968   001D74  C02E  FFF6         	movff	vfprintf@cfmt,tblptrl
   969   001D78                     	if	1	;There is more than 1 active tblptr byte
   970   001D78  0E0E               	movlw	high __smallconst
   971   001D7A  6EF7               	movwf	tblptrh,c
   972   001D7C                     	endif
   973   001D7C                     	if	0	;tblptru may be non-zero
   974   001D7C                     	endif
   975   001D7C                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
   976   001D7C  0E00               	movlw	low (__smallconst shr (0+16))
   977   001D7E  6EF8               	movwf	tblptru,c
   978   001D80                     	endif
   979   001D80  0008               	tblrd		*
   980   001D82  50F5               	movf	tablat,w,c
   981   001D84  0900               	iorlw	0
   982   001D86  A4D8               	btfss	status,2,c
   983   001D88  EFC8  F00E         	goto	u1751
   984   001D8C  EFCA  F00E         	goto	u1750
   985   001D90                     u1751:
   986   001D90  EFB2  F00E         	goto	l2159
   987   001D94                     u1750:
   988   001D94                     
   989                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1835:  return 0;
   990   001D94  0E00               	movlw	0
   991   001D96  6E2C               	movwf	(?_vfprintf+1)^0,c
   992   001D98  0E00               	movlw	0
   993   001D9A  6E2B               	movwf	?_vfprintf^0,c
   994   001D9C  0012               	return		;funcret
   995   001D9E                     __end_of_vfprintf:
   996                           	callstack 0
   997                           
   998 ;; *************** function _vfpfcnvrt *****************
   999 ;; Defined at:
  1000 ;;		line 1177 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
  1001 ;; Parameters:    Size  Location     Type
  1002 ;;  fp              1   31[COMRAM] PTR struct _IO_FILE
  1003 ;;		 -> sprintf@f(12), 
  1004 ;;  fmt             1   32[COMRAM] PTR PTR unsigned char 
  1005 ;;		 -> vfprintf@cfmt(1), 
  1006 ;;  ap              1   33[COMRAM] PTR PTR void 
  1007 ;;		 -> sprintf@ap(1), 
  1008 ;; Auto vars:     Size  Location     Type
  1009 ;;  convarg         4   36[COMRAM] struct .
  1010 ;;  cp              1   41[COMRAM] PTR unsigned char 
  1011 ;;		 -> STR_3(21), STR_2(20), STR_1(26), 
  1012 ;;  done            1   40[COMRAM] _Bool 
  1013 ;;  c               1    0        unsigned char 
  1014 ;; Return value:  Size  Location     Type
  1015 ;;                  1    wreg      void 
  1016 ;; Registers used:
  1017 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1018 ;; Tracked objects:
  1019 ;;		On entry : 0/0
  1020 ;;		On exit  : 0/0
  1021 ;;		Unchanged: 0/0
  1022 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1023 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1024 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1025 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1026 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1027 ;;Total ram usage:       11 bytes
  1028 ;; Hardware stack levels used: 1
  1029 ;; Hardware stack levels required when called: 6
  1030 ;; This function calls:
  1031 ;;		_dtoa
  1032 ;;		_fputc
  1033 ;;		_read_prec_or_width
  1034 ;; This function is called by:
  1035 ;;		_vfprintf
  1036 ;; This function uses a non-reentrant model
  1037 ;;
  1038                           
  1039                           	psect	text3
  1040   001386                     __ptext3:
  1041                           	callstack 0
  1042   001386                     _vfpfcnvrt:
  1043                           	callstack 22
  1044   001386                     
  1045                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1177: vfpfcnvrt(F
=======
  2407   0032E8  C02C  F02E         	movff	vfprintf@fmt,vfprintf@cfmt
  2408                           
  2409                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1826:     while (
      +                          *cfmt) {
  2410   0032EC  EF80  F019         	goto	l2944
  2411   0032F0                     l2942:
  2412                           
  2413                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1830:    vfpfcnvr
      +                          t(fp, &cfmt, ap);
  2414   0032F0  C02B  F020         	movff	vfprintf@fp,vfpfcnvrt@fp
  2415   0032F4  0E2E               	movlw	low vfprintf@cfmt
  2416   0032F6  6E21               	movwf	vfpfcnvrt@fmt^0,c
  2417   0032F8  C02D  F022         	movff	vfprintf@ap,vfpfcnvrt@ap
  2418   0032FC  ECBF  F013         	call	_vfpfcnvrt	;wreg free
  2419   003300                     l2944:
  2420                           
  2421                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1826:     while (
      +                          *cfmt) {
  2422   003300  C02E  FFF6         	movff	vfprintf@cfmt,tblptrl
  2423   003304                     	if	1	;There is more than 1 active tblptr byte
  2424   003304  0E0E               	movlw	high __smallconst
  2425   003306  6EF7               	movwf	tblptrh,c
  2426   003308                     	endif
  2427   003308                     	if	0	;tblptru may be non-zero
  2428   003308                     	endif
  2429   003308                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  2430   003308  0E00               	movlw	low (__smallconst shr (0+16))
  2431   00330A  6EF8               	movwf	tblptru,c
  2432   00330C                     	endif
  2433   00330C  0008               	tblrd		*
  2434   00330E  50F5               	movf	tablat,w,c
  2435   003310  0900               	iorlw	0
  2436   003312  A4D8               	btfss	status,2,c
  2437   003314  EF8E  F019         	goto	u2751
  2438   003318  EF90  F019         	goto	u2750
  2439   00331C                     u2751:
  2440   00331C  EF78  F019         	goto	l2942
  2441   003320                     u2750:
  2442   003320                     
  2443                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1835:  return 0;
  2444   003320  0E00               	movlw	0
  2445   003322  6E2C               	movwf	(?_vfprintf+1)^0,c
  2446   003324  0E00               	movlw	0
  2447   003326  6E2B               	movwf	?_vfprintf^0,c
  2448   003328  0012               	return		;funcret
  2449   00332A                     __end_of_vfprintf:
  2450                           	callstack 0
  2451                           
  2452 ;; *************** function _vfpfcnvrt *****************
  2453 ;; Defined at:
  2454 ;;		line 1177 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
  2455 ;; Parameters:    Size  Location     Type
  2456 ;;  fp              1   31[COMRAM] PTR struct _IO_FILE
  2457 ;;		 -> sprintf@f(12), 
  2458 ;;  fmt             1   32[COMRAM] PTR PTR unsigned char 
  2459 ;;		 -> vfprintf@cfmt(1), 
  2460 ;;  ap              1   33[COMRAM] PTR PTR void 
  2461 ;;		 -> sprintf@ap(1), 
  2462 ;; Auto vars:     Size  Location     Type
  2463 ;;  convarg         4   36[COMRAM] struct .
  2464 ;;  cp              1   41[COMRAM] PTR unsigned char 
  2465 ;;		 -> STR_3(21), STR_2(20), STR_1(26), 
  2466 ;;  done            1   40[COMRAM] _Bool 
  2467 ;;  c               1    0        unsigned char 
  2468 ;; Return value:  Size  Location     Type
  2469 ;;                  1    wreg      void 
  2470 ;; Registers used:
  2471 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2472 ;; Tracked objects:
  2473 ;;		On entry : 0/0
  2474 ;;		On exit  : 0/0
  2475 ;;		Unchanged: 0/0
  2476 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2477 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2478 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2479 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2480 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2481 ;;Total ram usage:       11 bytes
  2482 ;; Hardware stack levels used: 1
  2483 ;; Hardware stack levels required when called: 6
  2484 ;; This function calls:
  2485 ;;		_dtoa
  2486 ;;		_fputc
  2487 ;;		_read_prec_or_width
  2488 ;; This function is called by:
  2489 ;;		_vfprintf
  2490 ;; This function uses a non-reentrant model
  2491 ;;
  2492                           
  2493                           	psect	text3
  2494   00277E                     __ptext3:
  2495                           	callstack 0
  2496   00277E                     _vfpfcnvrt:
  2497                           	callstack 22
  2498   00277E                     
  2499                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1177: vfpfcnvrt(F
>>>>>>> Stashed changes
      +                          ILE *fp, char *fmt[], va_list ap);C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\c
      +                          ommon\doprnt.c: 1178: {;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\dopr
      +                          nt.c: 1179:     char c, *cp;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common
      +                          \doprnt.c: 1180:     _Bool done;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\co
      +                          mmon\doprnt.c: 1188:  } convarg;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\co
      +                          mmon\doprnt.c: 1201:     if ((*fmt)[0] == '%') {
<<<<<<< Updated upstream
  1046   001386  5021               	movf	vfpfcnvrt@fmt^0,w,c
  1047   001388  6ED9               	movwf	fsr2l,c
  1048   00138A  6ADA               	clrf	fsr2h,c
  1049   00138C  CFDF FFF6          	movff	indf2,tblptrl
  1050   001390                     	if	1	;There is more than 1 active tblptr byte
  1051   001390  0E0E               	movlw	high __smallconst
  1052   001392  6EF7               	movwf	tblptrh,c
  1053   001394                     	endif
  1054   001394                     	if	0	;tblptru may be non-zero
  1055   001394                     	endif
  1056   001394                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1057   001394  0E00               	movlw	low (__smallconst shr (0+16))
  1058   001396  6EF8               	movwf	tblptru,c
  1059   001398                     	endif
  1060   001398  0008               	tblrd		*
  1061   00139A  50F5               	movf	tablat,w,c
  1062   00139C  0A25               	xorlw	37
  1063   00139E  A4D8               	btfss	status,2,c
  1064   0013A0  EFD4  F009         	goto	u1691
  1065   0013A4  EFD6  F009         	goto	u1690
  1066   0013A8                     u1691:
  1067   0013A8  EF70  F00A         	goto	l2139
  1068   0013AC                     u1690:
  1069   0013AC                     
  1070                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1202:         ++*
      +                          fmt;
  1071   0013AC  5021               	movf	vfpfcnvrt@fmt^0,w,c
  1072   0013AE  6ED9               	movwf	fsr2l,c
  1073   0013B0  6ADA               	clrf	fsr2h,c
  1074   0013B2  2ADF               	incf	indf2,f,c
  1075   0013B4                     
  1076                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1204:         fla
      +                          gs = width = 0;
  1077   0013B4  0E00               	movlw	0
  1078   0013B6  6E47               	movwf	(_width+1)^0,c
  1079   0013B8  0E00               	movlw	0
  1080   0013BA  6E46               	movwf	_width^0,c
  1081   0013BC  C046  F04A         	movff	_width,_flags
  1082   0013C0                     
  1083                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1205:         pre
      +                          c = -1;
  1084   0013C0  6848               	setf	_prec^0,c
  1085   0013C2  6849               	setf	(_prec+1)^0,c
  1086   0013C4                     
  1087                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1209:         don
      +                          e = 0;
  1088   0013C4  0E00               	movlw	0
  1089   0013C6  6E29               	movwf	vfpfcnvrt@done^0,c
  1090                           
  1091                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1210:         whi
      +                          le (!done) {
  1092   0013C8  EF0C  F00A         	goto	l2113
  1093   0013CC                     l2103:
  1094                           
  1095                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1220:            
      +                                   flags |= (1 << 1);
  1096   0013CC  824A               	bsf	_flags^0,1,c
  1097   0013CE                     
  1098                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1221:            
      +                                   ++*fmt;
  1099   0013CE  5021               	movf	vfpfcnvrt@fmt^0,w,c
  1100   0013D0  6ED9               	movwf	fsr2l,c
  1101   0013D2  6ADA               	clrf	fsr2h,c
  1102   0013D4  2ADF               	incf	indf2,f,c
  1103                           
  1104                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1222:            
      +                                   break;
  1105   0013D6  EF0C  F00A         	goto	l2113
  1106   0013DA                     l2107:
  1107                           
  1108                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1243:            
      +                                   done = 1;
  1109   0013DA  0E01               	movlw	1
  1110   0013DC  6E29               	movwf	vfpfcnvrt@done^0,c
  1111                           
  1112                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1244:            
      +                                   break;
  1113   0013DE  EF0C  F00A         	goto	l2113
  1114   0013E2                     l2111:
  1115   0013E2  5021               	movf	vfpfcnvrt@fmt^0,w,c
  1116   0013E4  6ED9               	movwf	fsr2l,c
  1117   0013E6  6ADA               	clrf	fsr2h,c
  1118   0013E8  CFDF FFF6          	movff	indf2,tblptrl
  1119   0013EC                     	if	1	;There is more than 1 active tblptr byte
  1120   0013EC  0E0E               	movlw	high __smallconst
  1121   0013EE  6EF7               	movwf	tblptrh,c
  1122   0013F0                     	endif
  1123   0013F0                     	if	0	;tblptru may be non-zero
  1124   0013F0                     	endif
  1125   0013F0                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1126   0013F0  0E00               	movlw	low (__smallconst shr (0+16))
  1127   0013F2  6EF8               	movwf	tblptru,c
  1128   0013F4                     	endif
  1129   0013F4  0008               	tblrd		*
  1130   0013F6  50F5               	movf	tablat,w,c
  1131   0013F8  6E23               	movwf	??_vfpfcnvrt^0,c
  1132   0013FA  6A24               	clrf	(??_vfpfcnvrt+1)^0,c
  1133                           
  1134                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1135                           ; Switch size 1, requested type "simple"
  1136                           ; Number of cases is 1, Range of values is 0 to 0
  1137                           ; switch strategies available:
  1138                           ; Name         Instructions Cycles
  1139                           ; simple_byte            4     3 (average)
  1140                           ;	Chosen strategy is simple_byte
  1141   0013FC  5024               	movf	(??_vfpfcnvrt+1)^0,w,c
  1142   0013FE  0A00               	xorlw	0	; case 0
  1143   001400  B4D8               	btfsc	status,2,c
  1144   001402  EF05  F00A         	goto	l2597
  1145   001406  EFED  F009         	goto	l2107
  1146   00140A                     l2597:
  1147                           
  1148                           ; Switch size 1, requested type "simple"
  1149                           ; Number of cases is 1, Range of values is 48 to 48
  1150                           ; switch strategies available:
  1151                           ; Name         Instructions Cycles
  1152                           ; simple_byte            4     3 (average)
  1153                           ;	Chosen strategy is simple_byte
  1154   00140A  5023               	movf	??_vfpfcnvrt^0,w,c
  1155   00140C  0A30               	xorlw	48	; case 48
  1156   00140E  B4D8               	btfsc	status,2,c
  1157   001410  EFE6  F009         	goto	l2103
  1158   001414  EFED  F009         	goto	l2107
  1159   001418                     l2113:
  1160                           
  1161                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1210:         whi
      +                          le (!done) {
  1162   001418  5029               	movf	vfpfcnvrt@done^0,w,c
  1163   00141A  B4D8               	btfsc	status,2,c
  1164   00141C  EF12  F00A         	goto	u1701
  1165   001420  EF14  F00A         	goto	u1700
  1166   001424                     u1701:
  1167   001424  EFF1  F009         	goto	l2111
  1168   001428                     u1700:
  1169   001428                     
  1170                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1256:   width = r
      +                          ead_prec_or_width(fmt, ap);
  1171   001428  C021  F007         	movff	vfpfcnvrt@fmt,read_prec_or_width@fmt
  1172   00142C  C022  F008         	movff	vfpfcnvrt@ap,read_prec_or_width@ap
  1173   001430  EC89  F00D         	call	_read_prec_or_width	;wreg free
  1174   001434  C007  F046         	movff	?_read_prec_or_width,_width
  1175   001438  C008  F047         	movff	?_read_prec_or_width+1,_width+1
  1176   00143C                     
  1177                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1257:   if (width
      +                           < 0) {
  1178   00143C  BE47               	btfsc	(_width+1)^0,7,c
  1179   00143E  EF25  F00A         	goto	u1710
  1180   001442  EF23  F00A         	goto	u1711
  1181   001446                     u1711:
  1182   001446  EF2A  F00A         	goto	l2121
  1183   00144A                     u1710:
  1184   00144A                     
  1185                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1258:    flags |=
      +                           (1 << 0);
  1186   00144A  804A               	bsf	_flags^0,0,c
  1187                           
  1188                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1259:    width = 
      +                          -width;
  1189   00144C  6C46               	negf	_width^0,c
  1190   00144E  1E47               	comf	(_width+1)^0,f,c
  1191   001450  B0D8               	btfsc	status,0,c
  1192   001452  2A47               	incf	(_width+1)^0,f,c
  1193   001454                     l2121:
  1194                           
  1195                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1291:   cp = *fmt
      +                          ;
  1196   001454  5021               	movf	vfpfcnvrt@fmt^0,w,c
  1197   001456  6ED9               	movwf	fsr2l,c
  1198   001458  6ADA               	clrf	fsr2h,c
  1199   00145A  50DF               	movf	indf2,w,c
  1200   00145C  6E2A               	movwf	vfpfcnvrt@cp^0,c
  1201   00145E                     
  1202                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1361:   if (*cp =
      +                          = 'd' || *cp == 'i') {
  1203   00145E  C02A  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  1204   001462                     	if	1	;There is more than 1 active tblptr byte
  1205   001462  0E0E               	movlw	high __smallconst
  1206   001464  6EF7               	movwf	tblptrh,c
  1207   001466                     	endif
  1208   001466                     	if	0	;tblptru may be non-zero
  1209   001466                     	endif
  1210   001466                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1211   001466  0E00               	movlw	low (__smallconst shr (0+16))
  1212   001468  6EF8               	movwf	tblptru,c
  1213   00146A                     	endif
  1214   00146A  0008               	tblrd		*
  1215   00146C  50F5               	movf	tablat,w,c
  1216   00146E  0A64               	xorlw	100
  1217   001470  B4D8               	btfsc	status,2,c
  1218   001472  EF3D  F00A         	goto	u1721
  1219   001476  EF3F  F00A         	goto	u1720
  1220   00147A                     u1721:
  1221   00147A  EF4F  F00A         	goto	l2127
  1222   00147E                     u1720:
  1223   00147E  C02A  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  1224   001482                     	if	1	;There is more than 1 active tblptr byte
  1225   001482  0E0E               	movlw	high __smallconst
  1226   001484  6EF7               	movwf	tblptrh,c
  1227   001486                     	endif
  1228   001486                     	if	0	;tblptru may be non-zero
  1229   001486                     	endif
  1230   001486                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1231   001486  0E00               	movlw	low (__smallconst shr (0+16))
  1232   001488  6EF8               	movwf	tblptru,c
  1233   00148A                     	endif
  1234   00148A  0008               	tblrd		*
  1235   00148C  50F5               	movf	tablat,w,c
  1236   00148E  0A69               	xorlw	105
  1237   001490  A4D8               	btfss	status,2,c
  1238   001492  EF4D  F00A         	goto	u1731
  1239   001496  EF4F  F00A         	goto	u1730
  1240   00149A                     u1731:
  1241   00149A  EF6A  F00A         	goto	l2135
  1242   00149E                     u1730:
  1243   00149E                     l2127:
  1244                           
  1245                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1404:    convarg.
      +                          sint = (vfpf_sint_t)(int)(*(int *)__va_arg(*(int **)ap, (int)0));
  1246   00149E  5022               	movf	vfpfcnvrt@ap^0,w,c
  1247   0014A0  6ED9               	movwf	fsr2l,c
  1248   0014A2  6ADA               	clrf	fsr2h,c
  1249   0014A4  0E02               	movlw	2
  1250   0014A6  26DF               	addwf	indf2,f,c
  1251   0014A8  5CDF               	subwf	indf2,w,c
  1252   0014AA  6ED9               	movwf	fsr2l,c
  1253   0014AC  6ADA               	clrf	fsr2h,c
  1254   0014AE  CFDE F025          	movff	postinc2,vfpfcnvrt@convarg
  1255   0014B2  CFDE F026          	movff	postinc2,vfpfcnvrt@convarg+1
  1256   0014B6                     
  1257                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1406:    *fmt = c
      +                          p+1;
  1258   0014B6  5021               	movf	vfpfcnvrt@fmt^0,w,c
  1259   0014B8  6ED9               	movwf	fsr2l,c
  1260   0014BA  6ADA               	clrf	fsr2h,c
  1261   0014BC  282A               	incf	vfpfcnvrt@cp^0,w,c
  1262   0014BE  6EDF               	movwf	indf2,c
  1263   0014C0                     
  1264                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1432:    return (
      +                          void) dtoa(fp, convarg.sint);;	Return value of _vfpfcnvrt is never used
  1265   0014C0  C020  F015         	movff	vfpfcnvrt@fp,dtoa@fp
  1266   0014C4  C025  F016         	movff	vfpfcnvrt@convarg,dtoa@d
  1267   0014C8  C026  F017         	movff	vfpfcnvrt@convarg+1,dtoa@d+1
  1268   0014CC  EC84  F00A         	call	_dtoa	;wreg free
  1269   0014D0  EF83  F00A         	goto	l1051
  1270   0014D4                     l2135:
  1271                           
  1272                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1806:         ++*
      +                          fmt;
  1273   0014D4  5021               	movf	vfpfcnvrt@fmt^0,w,c
  1274   0014D6  6ED9               	movwf	fsr2l,c
  1275   0014D8  6ADA               	clrf	fsr2h,c
  1276   0014DA  2ADF               	incf	indf2,f,c
  1277   0014DC  EF83  F00A         	goto	l1051
  1278   0014E0                     l2139:
  1279                           
  1280                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1811:     fputc((
      +                          int)(*fmt)[0], fp);
  1281   0014E0  5021               	movf	vfpfcnvrt@fmt^0,w,c
  1282   0014E2  6ED9               	movwf	fsr2l,c
  1283   0014E4  6ADA               	clrf	fsr2h,c
  1284   0014E6  CFDF FFF6          	movff	indf2,tblptrl
  1285   0014EA                     	if	1	;There is more than 1 active tblptr byte
  1286   0014EA  0E0E               	movlw	high __smallconst
  1287   0014EC  6EF7               	movwf	tblptrh,c
  1288   0014EE                     	endif
  1289   0014EE                     	if	0	;tblptru may be non-zero
  1290   0014EE                     	endif
  1291   0014EE                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1292   0014EE  0E00               	movlw	low (__smallconst shr (0+16))
  1293   0014F0  6EF8               	movwf	tblptru,c
  1294   0014F2                     	endif
  1295   0014F2  0008               	tblrd		*
  1296   0014F4  50F5               	movf	tablat,w,c
  1297   0014F6  6E01               	movwf	fputc@c^0,c
  1298   0014F8  6A02               	clrf	(fputc@c+1)^0,c
  1299   0014FA  C020  F003         	movff	vfpfcnvrt@fp,fputc@fp
  1300   0014FE  ECE0  F00D         	call	_fputc	;wreg free
  1301   001502  EF6A  F00A         	goto	l2135
  1302   001506                     l1051:
  1303   001506  0012               	return		;funcret
  1304   001508                     __end_of_vfpfcnvrt:
  1305                           	callstack 0
  1306                           
  1307 ;; *************** function _read_prec_or_width *****************
  1308 ;; Defined at:
  1309 ;;		line 1158 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
  1310 ;; Parameters:    Size  Location     Type
  1311 ;;  fmt             1    6[COMRAM] PTR PTR const unsigned c
  1312 ;;		 -> vfprintf@cfmt(1), 
  1313 ;;  ap              1    7[COMRAM] PTR PTR void [1]
  1314 ;;		 -> sprintf@ap(1), 
  1315 ;; Auto vars:     Size  Location     Type
  1316 ;;  c               1    8[COMRAM] unsigned char 
  1317 ;;  n               2    9[COMRAM] int 
  1318 ;; Return value:  Size  Location     Type
  1319 ;;                  2    6[COMRAM] int 
  1320 ;; Registers used:
  1321 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1322 ;; Tracked objects:
  1323 ;;		On entry : 0/0
  1324 ;;		On exit  : 0/0
  1325 ;;		Unchanged: 0/0
  1326 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1327 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1328 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1329 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1330 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1331 ;;Total ram usage:        5 bytes
  1332 ;; Hardware stack levels used: 1
  1333 ;; Hardware stack levels required when called: 2
  1334 ;; This function calls:
  1335 ;;		___wmul
  1336 ;; This function is called by:
  1337 ;;		_vfpfcnvrt
  1338 ;; This function uses a non-reentrant model
  1339 ;;
  1340                           
  1341                           	psect	text4
  1342   001B12                     __ptext4:
  1343                           	callstack 0
  1344   001B12                     _read_prec_or_width:
  1345                           	callstack 25
  1346   001B12                     
  1347                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1159:     int n =
      +                           0;
  1348   001B12  0E00               	movlw	0
  1349   001B14  6E0B               	movwf	(read_prec_or_width@n+1)^0,c
  1350   001B16  0E00               	movlw	0
  1351   001B18  6E0A               	movwf	read_prec_or_width@n^0,c
  1352   001B1A                     
  1353                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1160:     if ((*f
      +                          mt)[0] == '*') {
  1354   001B1A  5007               	movf	read_prec_or_width@fmt^0,w,c
  1355   001B1C  6ED9               	movwf	fsr2l,c
  1356   001B1E  6ADA               	clrf	fsr2h,c
  1357   001B20  CFDF FFF6          	movff	indf2,tblptrl
  1358   001B24                     	if	1	;There is more than 1 active tblptr byte
  1359   001B24  0E0E               	movlw	high __smallconst
  1360   001B26  6EF7               	movwf	tblptrh,c
  1361   001B28                     	endif
  1362   001B28                     	if	0	;tblptru may be non-zero
  1363   001B28                     	endif
  1364   001B28                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1365   001B28  0E00               	movlw	low (__smallconst shr (0+16))
  1366   001B2A  6EF8               	movwf	tblptru,c
  1367   001B2C                     	endif
  1368   001B2C  0008               	tblrd		*
  1369   001B2E  50F5               	movf	tablat,w,c
  1370   001B30  0A2A               	xorlw	42
  1371   001B32  A4D8               	btfss	status,2,c
  1372   001B34  EF9E  F00D         	goto	u1631
  1373   001B38  EFA0  F00D         	goto	u1630
  1374   001B3C                     u1631:
  1375   001B3C  EFC6  F00D         	goto	l2071
  1376   001B40                     u1630:
  1377   001B40                     
  1378                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1161:         ++*
      +                          fmt;
  1379   001B40  5007               	movf	read_prec_or_width@fmt^0,w,c
  1380   001B42  6ED9               	movwf	fsr2l,c
  1381   001B44  6ADA               	clrf	fsr2h,c
  1382   001B46  2ADF               	incf	indf2,f,c
  1383   001B48                     
  1384                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1162:         n =
      +                           (*(int *)__va_arg(*(int **)*ap, (int)0));
  1385   001B48  5008               	movf	read_prec_or_width@ap^0,w,c
  1386   001B4A  6ED9               	movwf	fsr2l,c
  1387   001B4C  6ADA               	clrf	fsr2h,c
  1388   001B4E  0E02               	movlw	2
  1389   001B50  26DF               	addwf	indf2,f,c
  1390   001B52  5CDF               	subwf	indf2,w,c
  1391   001B54  6ED9               	movwf	fsr2l,c
  1392   001B56  6ADA               	clrf	fsr2h,c
  1393   001B58  CFDE F00A          	movff	postinc2,read_prec_or_width@n
  1394   001B5C  CFDE F00B          	movff	postinc2,read_prec_or_width@n+1
  1395                           
  1396                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1163:     } else 
      +                          {
  1397   001B60  EFDB  F00D         	goto	l1032
  1398   001B64                     l2067:
  1399                           
  1400                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1166:            
      +                           n = n * 10 + c;
  1401   001B64  C00A  F001         	movff	read_prec_or_width@n,___wmul@multiplier
  1402   001B68  C00B  F002         	movff	read_prec_or_width@n+1,___wmul@multiplier+1
  1403   001B6C  0E00               	movlw	0
  1404   001B6E  6E04               	movwf	(___wmul@multiplicand+1)^0,c
  1405   001B70  0E0A               	movlw	10
  1406   001B72  6E03               	movwf	___wmul@multiplicand^0,c
  1407   001B74  EC75  F00F         	call	___wmul	;wreg free
  1408   001B78  5009               	movf	read_prec_or_width@c^0,w,c
  1409   001B7A  2401               	addwf	?___wmul^0,w,c
  1410   001B7C  6E0A               	movwf	read_prec_or_width@n^0,c
  1411   001B7E  0E00               	movlw	0
  1412   001B80  2002               	addwfc	(?___wmul+1)^0,w,c
  1413   001B82  6E0B               	movwf	(read_prec_or_width@n+1)^0,c
  1414   001B84                     
  1415                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1167:            
      +                           ++*fmt;
  1416   001B84  5007               	movf	read_prec_or_width@fmt^0,w,c
  1417   001B86  6ED9               	movwf	fsr2l,c
  1418   001B88  6ADA               	clrf	fsr2h,c
  1419   001B8A  2ADF               	incf	indf2,f,c
  1420   001B8C                     l2071:
  1421                           
  1422                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1165:         whi
      +                          le ((c = ((unsigned)(*fmt)[0]) - '0') < 10) {
  1423   001B8C  5007               	movf	read_prec_or_width@fmt^0,w,c
  1424   001B8E  6ED9               	movwf	fsr2l,c
  1425   001B90  6ADA               	clrf	fsr2h,c
  1426   001B92  CFDF FFF6          	movff	indf2,tblptrl
  1427   001B96                     	if	1	;There is more than 1 active tblptr byte
  1428   001B96  0E0E               	movlw	high __smallconst
  1429   001B98  6EF7               	movwf	tblptrh,c
  1430   001B9A                     	endif
  1431   001B9A                     	if	0	;tblptru may be non-zero
  1432   001B9A                     	endif
  1433   001B9A                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1434   001B9A  0E00               	movlw	low (__smallconst shr (0+16))
  1435   001B9C  6EF8               	movwf	tblptru,c
  1436   001B9E                     	endif
  1437   001B9E  0008               	tblrd		*
  1438   001BA0  50F5               	movf	tablat,w,c
  1439   001BA2  0FD0               	addlw	208
  1440   001BA4  6E09               	movwf	read_prec_or_width@c^0,c
  1441   001BA6  0E09               	movlw	9
  1442   001BA8  6409               	cpfsgt	read_prec_or_width@c^0,c
  1443   001BAA  EFD9  F00D         	goto	u1641
  1444   001BAE  EFDB  F00D         	goto	u1640
  1445   001BB2                     u1641:
  1446   001BB2  EFB2  F00D         	goto	l2067
  1447   001BB6                     u1640:
  1448   001BB6                     l1032:
  1449                           
  1450                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1170:     return 
      +                          n;
  1451   001BB6  C00A  F007         	movff	read_prec_or_width@n,?_read_prec_or_width
  1452   001BBA  C00B  F008         	movff	read_prec_or_width@n+1,?_read_prec_or_width+1
  1453   001BBE  0012               	return		;funcret
  1454   001BC0                     __end_of_read_prec_or_width:
  1455                           	callstack 0
  1456                           
  1457 ;; *************** function ___wmul *****************
  1458 ;; Defined at:
  1459 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\Umul16.c"
  1460 ;; Parameters:    Size  Location     Type
  1461 ;;  multiplier      2    0[COMRAM] unsigned int 
  1462 ;;  multiplicand    2    2[COMRAM] unsigned int 
  1463 ;; Auto vars:     Size  Location     Type
  1464 ;;  product         2    4[COMRAM] unsigned int 
  1465 ;; Return value:  Size  Location     Type
  1466 ;;                  2    0[COMRAM] unsigned int 
  1467 ;; Registers used:
  1468 ;;		wreg, status,2, status,0, prodl, prodh
  1469 ;; Tracked objects:
  1470 ;;		On entry : 0/0
  1471 ;;		On exit  : 0/0
  1472 ;;		Unchanged: 0/0
  1473 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1474 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1475 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1476 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1477 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1478 ;;Total ram usage:        6 bytes
  1479 ;; Hardware stack levels used: 1
  1480 ;; Hardware stack levels required when called: 1
  1481 ;; This function calls:
  1482 ;;		Nothing
  1483 ;; This function is called by:
  1484 ;;		_read_prec_or_width
  1485 ;;		_LEDarray_disp_light
  1486 ;;		_LEDarray_disp_PPM
  1487 ;;		_ADC2String
  1488 ;; This function uses a non-reentrant model
  1489 ;;
  1490                           
  1491                           	psect	text5
  1492   001EEA                     __ptext5:
  1493                           	callstack 0
  1494   001EEA                     ___wmul:
  1495                           	callstack 25
  1496   001EEA  5001               	movf	___wmul@multiplier^0,w,c
  1497   001EEC  0203               	mulwf	___wmul@multiplicand^0,c
  1498   001EEE  CFF3 F005          	movff	prodl,___wmul@product
  1499   001EF2  CFF4 F006          	movff	prodh,___wmul@product+1
  1500   001EF6  5001               	movf	___wmul@multiplier^0,w,c
  1501   001EF8  0204               	mulwf	(___wmul@multiplicand+1)^0,c
  1502   001EFA  50F3               	movf	243,w,c
  1503   001EFC  2606               	addwf	(___wmul@product+1)^0,f,c
  1504   001EFE  5002               	movf	(___wmul@multiplier+1)^0,w,c
  1505   001F00  0203               	mulwf	___wmul@multiplicand^0,c
  1506   001F02  50F3               	movf	243,w,c
  1507   001F04  2606               	addwf	(___wmul@product+1)^0,f,c
  1508   001F06  C005  F001         	movff	___wmul@product,?___wmul
  1509   001F0A  C006  F002         	movff	___wmul@product+1,?___wmul+1
  1510   001F0E  0012               	return		;funcret
  1511   001F10                     __end_of___wmul:
  1512                           	callstack 0
  1513                           
  1514 ;; *************** function _dtoa *****************
  1515 ;; Defined at:
  1516 ;;		line 513 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
  1517 ;; Parameters:    Size  Location     Type
  1518 ;;  fp              1   20[COMRAM] PTR struct _IO_FILE
  1519 ;;		 -> sprintf@f(12), 
  1520 ;;  d               2   21[COMRAM] int 
  1521 ;; Auto vars:     Size  Location     Type
  1522 ;;  i               2   29[COMRAM] int 
  1523 ;;  w               2   26[COMRAM] int 
  1524 ;;  s               1   28[COMRAM] unsigned char 
  1525 ;;  p               1   25[COMRAM] _Bool 
  1526 ;; Return value:  Size  Location     Type
  1527 ;;                  1    wreg      void 
  1528 ;; Registers used:
  1529 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1530 ;; Tracked objects:
  1531 ;;		On entry : 0/0
  1532 ;;		On exit  : 0/0
  1533 ;;		Unchanged: 0/0
  1534 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1535 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1536 ;;      Locals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1537 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1538 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1539 ;;Total ram usage:       11 bytes
  1540 ;; Hardware stack levels used: 1
  1541 ;; Hardware stack levels required when called: 5
  1542 ;; This function calls:
  1543 ;;		___awdiv
  1544 ;;		___awmod
  1545 ;;		_abs
  1546 ;;		_pad
  1547 ;; This function is called by:
  1548 ;;		_vfpfcnvrt
  1549 ;; This function uses a non-reentrant model
  1550 ;;
  1551                           
  1552                           	psect	text6
  1553   001508                     __ptext6:
  1554                           	callstack 0
  1555   001508                     _dtoa:
  1556                           	callstack 22
  1557   001508                     
  1558                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 513: static void 
=======
  2500   00277E  5021               	movf	vfpfcnvrt@fmt^0,w,c
  2501   002780  6ED9               	movwf	fsr2l,c
  2502   002782  6ADA               	clrf	fsr2h,c
  2503   002784  CFDF FFF6          	movff	indf2,tblptrl
  2504   002788                     	if	1	;There is more than 1 active tblptr byte
  2505   002788  0E0E               	movlw	high __smallconst
  2506   00278A  6EF7               	movwf	tblptrh,c
  2507   00278C                     	endif
  2508   00278C                     	if	0	;tblptru may be non-zero
  2509   00278C                     	endif
  2510   00278C                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  2511   00278C  0E00               	movlw	low (__smallconst shr (0+16))
  2512   00278E  6EF8               	movwf	tblptru,c
  2513   002790                     	endif
  2514   002790  0008               	tblrd		*
  2515   002792  50F5               	movf	tablat,w,c
  2516   002794  0A25               	xorlw	37
  2517   002796  A4D8               	btfss	status,2,c
  2518   002798  EFD0  F013         	goto	u2661
  2519   00279C  EFD2  F013         	goto	u2660
  2520   0027A0                     u2661:
  2521   0027A0  EF6C  F014         	goto	l2900
  2522   0027A4                     u2660:
  2523   0027A4                     
  2524                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1202:         ++*
      +                          fmt;
  2525   0027A4  5021               	movf	vfpfcnvrt@fmt^0,w,c
  2526   0027A6  6ED9               	movwf	fsr2l,c
  2527   0027A8  6ADA               	clrf	fsr2h,c
  2528   0027AA  2ADF               	incf	indf2,f,c
  2529   0027AC                     
  2530                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1204:         fla
      +                          gs = width = 0;
  2531   0027AC  0E00               	movlw	0
  2532   0027AE  6E5A               	movwf	(_width+1)^0,c
  2533   0027B0  0E00               	movlw	0
  2534   0027B2  6E59               	movwf	_width^0,c
  2535   0027B4  C059  F05D         	movff	_width,_flags
  2536   0027B8                     
  2537                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1205:         pre
      +                          c = -1;
  2538   0027B8  685B               	setf	_prec^0,c
  2539   0027BA  685C               	setf	(_prec+1)^0,c
  2540   0027BC                     
  2541                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1209:         don
      +                          e = 0;
  2542   0027BC  0E00               	movlw	0
  2543   0027BE  6E29               	movwf	vfpfcnvrt@done^0,c
  2544                           
  2545                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1210:         whi
      +                          le (!done) {
  2546   0027C0  EF08  F014         	goto	l2874
  2547   0027C4                     l2864:
  2548                           
  2549                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1220:            
      +                                   flags |= (1 << 1);
  2550   0027C4  825D               	bsf	_flags^0,1,c
  2551   0027C6                     
  2552                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1221:            
      +                                   ++*fmt;
  2553   0027C6  5021               	movf	vfpfcnvrt@fmt^0,w,c
  2554   0027C8  6ED9               	movwf	fsr2l,c
  2555   0027CA  6ADA               	clrf	fsr2h,c
  2556   0027CC  2ADF               	incf	indf2,f,c
  2557                           
  2558                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1222:            
      +                                   break;
  2559   0027CE  EF08  F014         	goto	l2874
  2560   0027D2                     l2868:
  2561                           
  2562                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1243:            
      +                                   done = 1;
  2563   0027D2  0E01               	movlw	1
  2564   0027D4  6E29               	movwf	vfpfcnvrt@done^0,c
  2565                           
  2566                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1244:            
      +                                   break;
  2567   0027D6  EF08  F014         	goto	l2874
  2568   0027DA                     l2872:
  2569   0027DA  5021               	movf	vfpfcnvrt@fmt^0,w,c
  2570   0027DC  6ED9               	movwf	fsr2l,c
  2571   0027DE  6ADA               	clrf	fsr2h,c
  2572   0027E0  CFDF FFF6          	movff	indf2,tblptrl
  2573   0027E4                     	if	1	;There is more than 1 active tblptr byte
  2574   0027E4  0E0E               	movlw	high __smallconst
  2575   0027E6  6EF7               	movwf	tblptrh,c
  2576   0027E8                     	endif
  2577   0027E8                     	if	0	;tblptru may be non-zero
  2578   0027E8                     	endif
  2579   0027E8                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  2580   0027E8  0E00               	movlw	low (__smallconst shr (0+16))
  2581   0027EA  6EF8               	movwf	tblptru,c
  2582   0027EC                     	endif
  2583   0027EC  0008               	tblrd		*
  2584   0027EE  50F5               	movf	tablat,w,c
  2585   0027F0  6E23               	movwf	??_vfpfcnvrt^0,c
  2586   0027F2  6A24               	clrf	(??_vfpfcnvrt+1)^0,c
  2587                           
  2588                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2589                           ; Switch size 1, requested type "simple"
  2590                           ; Number of cases is 1, Range of values is 0 to 0
  2591                           ; switch strategies available:
  2592                           ; Name         Instructions Cycles
  2593                           ; simple_byte            4     3 (average)
  2594                           ;	Chosen strategy is simple_byte
  2595   0027F4  5024               	movf	(??_vfpfcnvrt+1)^0,w,c
  2596   0027F6  0A00               	xorlw	0	; case 0
  2597   0027F8  B4D8               	btfsc	status,2,c
  2598   0027FA  EF01  F014         	goto	l4498
  2599   0027FE  EFE9  F013         	goto	l2868
  2600   002802                     l4498:
  2601                           
  2602                           ; Switch size 1, requested type "simple"
  2603                           ; Number of cases is 1, Range of values is 48 to 48
  2604                           ; switch strategies available:
  2605                           ; Name         Instructions Cycles
  2606                           ; simple_byte            4     3 (average)
  2607                           ;	Chosen strategy is simple_byte
  2608   002802  5023               	movf	??_vfpfcnvrt^0,w,c
  2609   002804  0A30               	xorlw	48	; case 48
  2610   002806  B4D8               	btfsc	status,2,c
  2611   002808  EFE2  F013         	goto	l2864
  2612   00280C  EFE9  F013         	goto	l2868
  2613   002810                     l2874:
  2614                           
  2615                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1210:         whi
      +                          le (!done) {
  2616   002810  5029               	movf	vfpfcnvrt@done^0,w,c
  2617   002812  B4D8               	btfsc	status,2,c
  2618   002814  EF0E  F014         	goto	u2671
  2619   002818  EF10  F014         	goto	u2670
  2620   00281C                     u2671:
  2621   00281C  EFED  F013         	goto	l2872
  2622   002820                     u2670:
  2623   002820                     
  2624                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1256:   width = r
      +                          ead_prec_or_width(fmt, ap);
  2625   002820  C021  F007         	movff	vfpfcnvrt@fmt,read_prec_or_width@fmt
  2626   002824  C022  F008         	movff	vfpfcnvrt@ap,read_prec_or_width@ap
  2627   002828  ECC2  F017         	call	_read_prec_or_width	;wreg free
  2628   00282C  C007  F059         	movff	?_read_prec_or_width,_width
  2629   002830  C008  F05A         	movff	?_read_prec_or_width+1,_width+1
  2630   002834                     
  2631                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1257:   if (width
      +                           < 0) {
  2632   002834  BE5A               	btfsc	(_width+1)^0,7,c
  2633   002836  EF21  F014         	goto	u2680
  2634   00283A  EF1F  F014         	goto	u2681
  2635   00283E                     u2681:
  2636   00283E  EF26  F014         	goto	l2882
  2637   002842                     u2680:
  2638   002842                     
  2639                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1258:    flags |=
      +                           (1 << 0);
  2640   002842  805D               	bsf	_flags^0,0,c
  2641                           
  2642                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1259:    width = 
      +                          -width;
  2643   002844  6C59               	negf	_width^0,c
  2644   002846  1E5A               	comf	(_width+1)^0,f,c
  2645   002848  B0D8               	btfsc	status,0,c
  2646   00284A  2A5A               	incf	(_width+1)^0,f,c
  2647   00284C                     l2882:
  2648                           
  2649                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1291:   cp = *fmt
      +                          ;
  2650   00284C  5021               	movf	vfpfcnvrt@fmt^0,w,c
  2651   00284E  6ED9               	movwf	fsr2l,c
  2652   002850  6ADA               	clrf	fsr2h,c
  2653   002852  50DF               	movf	indf2,w,c
  2654   002854  6E2A               	movwf	vfpfcnvrt@cp^0,c
  2655   002856                     
  2656                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1361:   if (*cp =
      +                          = 'd' || *cp == 'i') {
  2657   002856  C02A  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  2658   00285A                     	if	1	;There is more than 1 active tblptr byte
  2659   00285A  0E0E               	movlw	high __smallconst
  2660   00285C  6EF7               	movwf	tblptrh,c
  2661   00285E                     	endif
  2662   00285E                     	if	0	;tblptru may be non-zero
  2663   00285E                     	endif
  2664   00285E                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  2665   00285E  0E00               	movlw	low (__smallconst shr (0+16))
  2666   002860  6EF8               	movwf	tblptru,c
  2667   002862                     	endif
  2668   002862  0008               	tblrd		*
  2669   002864  50F5               	movf	tablat,w,c
  2670   002866  0A64               	xorlw	100
  2671   002868  B4D8               	btfsc	status,2,c
  2672   00286A  EF39  F014         	goto	u2691
  2673   00286E  EF3B  F014         	goto	u2690
  2674   002872                     u2691:
  2675   002872  EF4B  F014         	goto	l2888
  2676   002876                     u2690:
  2677   002876  C02A  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  2678   00287A                     	if	1	;There is more than 1 active tblptr byte
  2679   00287A  0E0E               	movlw	high __smallconst
  2680   00287C  6EF7               	movwf	tblptrh,c
  2681   00287E                     	endif
  2682   00287E                     	if	0	;tblptru may be non-zero
  2683   00287E                     	endif
  2684   00287E                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  2685   00287E  0E00               	movlw	low (__smallconst shr (0+16))
  2686   002880  6EF8               	movwf	tblptru,c
  2687   002882                     	endif
  2688   002882  0008               	tblrd		*
  2689   002884  50F5               	movf	tablat,w,c
  2690   002886  0A69               	xorlw	105
  2691   002888  A4D8               	btfss	status,2,c
  2692   00288A  EF49  F014         	goto	u2701
  2693   00288E  EF4B  F014         	goto	u2700
  2694   002892                     u2701:
  2695   002892  EF66  F014         	goto	l2896
  2696   002896                     u2700:
  2697   002896                     l2888:
  2698                           
  2699                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1404:    convarg.
      +                          sint = (vfpf_sint_t)(int)(*(int *)__va_arg(*(int **)ap, (int)0));
  2700   002896  5022               	movf	vfpfcnvrt@ap^0,w,c
  2701   002898  6ED9               	movwf	fsr2l,c
  2702   00289A  6ADA               	clrf	fsr2h,c
  2703   00289C  0E02               	movlw	2
  2704   00289E  26DF               	addwf	indf2,f,c
  2705   0028A0  5CDF               	subwf	indf2,w,c
  2706   0028A2  6ED9               	movwf	fsr2l,c
  2707   0028A4  6ADA               	clrf	fsr2h,c
  2708   0028A6  CFDE F025          	movff	postinc2,vfpfcnvrt@convarg
  2709   0028AA  CFDE F026          	movff	postinc2,vfpfcnvrt@convarg+1
  2710   0028AE                     
  2711                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1406:    *fmt = c
      +                          p+1;
  2712   0028AE  5021               	movf	vfpfcnvrt@fmt^0,w,c
  2713   0028B0  6ED9               	movwf	fsr2l,c
  2714   0028B2  6ADA               	clrf	fsr2h,c
  2715   0028B4  282A               	incf	vfpfcnvrt@cp^0,w,c
  2716   0028B6  6EDF               	movwf	indf2,c
  2717   0028B8                     
  2718                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1432:    return (
      +                          void) dtoa(fp, convarg.sint);;	Return value of _vfpfcnvrt is never used
  2719   0028B8  C020  F015         	movff	vfpfcnvrt@fp,dtoa@fp
  2720   0028BC  C025  F016         	movff	vfpfcnvrt@convarg,dtoa@d
  2721   0028C0  C026  F017         	movff	vfpfcnvrt@convarg+1,dtoa@d+1
  2722   0028C4  EC80  F014         	call	_dtoa	;wreg free
  2723   0028C8  EF7F  F014         	goto	l1098
  2724   0028CC                     l2896:
  2725                           
  2726                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1806:         ++*
      +                          fmt;
  2727   0028CC  5021               	movf	vfpfcnvrt@fmt^0,w,c
  2728   0028CE  6ED9               	movwf	fsr2l,c
  2729   0028D0  6ADA               	clrf	fsr2h,c
  2730   0028D2  2ADF               	incf	indf2,f,c
  2731   0028D4  EF7F  F014         	goto	l1098
  2732   0028D8                     l2900:
  2733                           
  2734                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1811:     fputc((
      +                          int)(*fmt)[0], fp);
  2735   0028D8  5021               	movf	vfpfcnvrt@fmt^0,w,c
  2736   0028DA  6ED9               	movwf	fsr2l,c
  2737   0028DC  6ADA               	clrf	fsr2h,c
  2738   0028DE  CFDF FFF6          	movff	indf2,tblptrl
  2739   0028E2                     	if	1	;There is more than 1 active tblptr byte
  2740   0028E2  0E0E               	movlw	high __smallconst
  2741   0028E4  6EF7               	movwf	tblptrh,c
  2742   0028E6                     	endif
  2743   0028E6                     	if	0	;tblptru may be non-zero
  2744   0028E6                     	endif
  2745   0028E6                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  2746   0028E6  0E00               	movlw	low (__smallconst shr (0+16))
  2747   0028E8  6EF8               	movwf	tblptru,c
  2748   0028EA                     	endif
  2749   0028EA  0008               	tblrd		*
  2750   0028EC  50F5               	movf	tablat,w,c
  2751   0028EE  6E01               	movwf	fputc@c^0,c
  2752   0028F0  6A02               	clrf	(fputc@c+1)^0,c
  2753   0028F2  C020  F003         	movff	vfpfcnvrt@fp,fputc@fp
  2754   0028F6  EC0D  F017         	call	_fputc	;wreg free
  2755   0028FA  EF66  F014         	goto	l2896
  2756   0028FE                     l1098:
  2757   0028FE  0012               	return		;funcret
  2758   002900                     __end_of_vfpfcnvrt:
  2759                           	callstack 0
  2760                           
  2761 ;; *************** function _read_prec_or_width *****************
  2762 ;; Defined at:
  2763 ;;		line 1158 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
  2764 ;; Parameters:    Size  Location     Type
  2765 ;;  fmt             1    6[COMRAM] PTR PTR const unsigned c
  2766 ;;		 -> vfprintf@cfmt(1), 
  2767 ;;  ap              1    7[COMRAM] PTR PTR void [1]
  2768 ;;		 -> sprintf@ap(1), 
  2769 ;; Auto vars:     Size  Location     Type
  2770 ;;  c               1    8[COMRAM] unsigned char 
  2771 ;;  n               2    9[COMRAM] int 
  2772 ;; Return value:  Size  Location     Type
  2773 ;;                  2    6[COMRAM] int 
  2774 ;; Registers used:
  2775 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2776 ;; Tracked objects:
  2777 ;;		On entry : 0/0
  2778 ;;		On exit  : 0/0
  2779 ;;		Unchanged: 0/0
  2780 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2781 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2782 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2783 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2784 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2785 ;;Total ram usage:        5 bytes
  2786 ;; Hardware stack levels used: 1
  2787 ;; Hardware stack levels required when called: 2
  2788 ;; This function calls:
  2789 ;;		___wmul
  2790 ;; This function is called by:
  2791 ;;		_vfpfcnvrt
  2792 ;; This function uses a non-reentrant model
  2793 ;;
  2794                           
  2795                           	psect	text4
  2796   002F84                     __ptext4:
  2797                           	callstack 0
  2798   002F84                     _read_prec_or_width:
  2799                           	callstack 25
  2800   002F84                     
  2801                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1159:     int n =
      +                           0;
  2802   002F84  0E00               	movlw	0
  2803   002F86  6E0B               	movwf	(read_prec_or_width@n+1)^0,c
  2804   002F88  0E00               	movlw	0
  2805   002F8A  6E0A               	movwf	read_prec_or_width@n^0,c
  2806   002F8C                     
  2807                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1160:     if ((*f
      +                          mt)[0] == '*') {
  2808   002F8C  5007               	movf	read_prec_or_width@fmt^0,w,c
  2809   002F8E  6ED9               	movwf	fsr2l,c
  2810   002F90  6ADA               	clrf	fsr2h,c
  2811   002F92  CFDF FFF6          	movff	indf2,tblptrl
  2812   002F96                     	if	1	;There is more than 1 active tblptr byte
  2813   002F96  0E0E               	movlw	high __smallconst
  2814   002F98  6EF7               	movwf	tblptrh,c
  2815   002F9A                     	endif
  2816   002F9A                     	if	0	;tblptru may be non-zero
  2817   002F9A                     	endif
  2818   002F9A                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  2819   002F9A  0E00               	movlw	low (__smallconst shr (0+16))
  2820   002F9C  6EF8               	movwf	tblptru,c
  2821   002F9E                     	endif
  2822   002F9E  0008               	tblrd		*
  2823   002FA0  50F5               	movf	tablat,w,c
  2824   002FA2  0A2A               	xorlw	42
  2825   002FA4  A4D8               	btfss	status,2,c
  2826   002FA6  EFD7  F017         	goto	u2601
  2827   002FAA  EFD9  F017         	goto	u2600
  2828   002FAE                     u2601:
  2829   002FAE  EFFF  F017         	goto	l2832
  2830   002FB2                     u2600:
  2831   002FB2                     
  2832                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1161:         ++*
      +                          fmt;
  2833   002FB2  5007               	movf	read_prec_or_width@fmt^0,w,c
  2834   002FB4  6ED9               	movwf	fsr2l,c
  2835   002FB6  6ADA               	clrf	fsr2h,c
  2836   002FB8  2ADF               	incf	indf2,f,c
  2837   002FBA                     
  2838                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1162:         n =
      +                           (*(int *)__va_arg(*(int **)*ap, (int)0));
  2839   002FBA  5008               	movf	read_prec_or_width@ap^0,w,c
  2840   002FBC  6ED9               	movwf	fsr2l,c
  2841   002FBE  6ADA               	clrf	fsr2h,c
  2842   002FC0  0E02               	movlw	2
  2843   002FC2  26DF               	addwf	indf2,f,c
  2844   002FC4  5CDF               	subwf	indf2,w,c
  2845   002FC6  6ED9               	movwf	fsr2l,c
  2846   002FC8  6ADA               	clrf	fsr2h,c
  2847   002FCA  CFDE F00A          	movff	postinc2,read_prec_or_width@n
  2848   002FCE  CFDE F00B          	movff	postinc2,read_prec_or_width@n+1
  2849                           
  2850                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1163:     } else 
      +                          {
  2851   002FD2  EF14  F018         	goto	l1079
  2852   002FD6                     l2828:
  2853                           
  2854                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1166:            
      +                           n = n * 10 + c;
  2855   002FD6  C00A  F001         	movff	read_prec_or_width@n,___wmul@multiplier
  2856   002FDA  C00B  F002         	movff	read_prec_or_width@n+1,___wmul@multiplier+1
  2857   002FDE  0E00               	movlw	0
  2858   002FE0  6E04               	movwf	(___wmul@multiplicand+1)^0,c
  2859   002FE2  0E0A               	movlw	10
  2860   002FE4  6E03               	movwf	___wmul@multiplicand^0,c
  2861   002FE6  EC3A  F01A         	call	___wmul	;wreg free
  2862   002FEA  5009               	movf	read_prec_or_width@c^0,w,c
  2863   002FEC  2401               	addwf	?___wmul^0,w,c
  2864   002FEE  6E0A               	movwf	read_prec_or_width@n^0,c
  2865   002FF0  0E00               	movlw	0
  2866   002FF2  2002               	addwfc	(?___wmul+1)^0,w,c
  2867   002FF4  6E0B               	movwf	(read_prec_or_width@n+1)^0,c
  2868   002FF6                     
  2869                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1167:            
      +                           ++*fmt;
  2870   002FF6  5007               	movf	read_prec_or_width@fmt^0,w,c
  2871   002FF8  6ED9               	movwf	fsr2l,c
  2872   002FFA  6ADA               	clrf	fsr2h,c
  2873   002FFC  2ADF               	incf	indf2,f,c
  2874   002FFE                     l2832:
  2875                           
  2876                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1165:         whi
      +                          le ((c = ((unsigned)(*fmt)[0]) - '0') < 10) {
  2877   002FFE  5007               	movf	read_prec_or_width@fmt^0,w,c
  2878   003000  6ED9               	movwf	fsr2l,c
  2879   003002  6ADA               	clrf	fsr2h,c
  2880   003004  CFDF FFF6          	movff	indf2,tblptrl
  2881   003008                     	if	1	;There is more than 1 active tblptr byte
  2882   003008  0E0E               	movlw	high __smallconst
  2883   00300A  6EF7               	movwf	tblptrh,c
  2884   00300C                     	endif
  2885   00300C                     	if	0	;tblptru may be non-zero
  2886   00300C                     	endif
  2887   00300C                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  2888   00300C  0E00               	movlw	low (__smallconst shr (0+16))
  2889   00300E  6EF8               	movwf	tblptru,c
  2890   003010                     	endif
  2891   003010  0008               	tblrd		*
  2892   003012  50F5               	movf	tablat,w,c
  2893   003014  0FD0               	addlw	208
  2894   003016  6E09               	movwf	read_prec_or_width@c^0,c
  2895   003018  0E09               	movlw	9
  2896   00301A  6409               	cpfsgt	read_prec_or_width@c^0,c
  2897   00301C  EF12  F018         	goto	u2611
  2898   003020  EF14  F018         	goto	u2610
  2899   003024                     u2611:
  2900   003024  EFEB  F017         	goto	l2828
  2901   003028                     u2610:
  2902   003028                     l1079:
  2903                           
  2904                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1170:     return 
      +                          n;
  2905   003028  C00A  F007         	movff	read_prec_or_width@n,?_read_prec_or_width
  2906   00302C  C00B  F008         	movff	read_prec_or_width@n+1,?_read_prec_or_width+1
  2907   003030  0012               	return		;funcret
  2908   003032                     __end_of_read_prec_or_width:
  2909                           	callstack 0
  2910                           
  2911 ;; *************** function ___wmul *****************
  2912 ;; Defined at:
  2913 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\Umul16.c"
  2914 ;; Parameters:    Size  Location     Type
  2915 ;;  multiplier      2    0[COMRAM] unsigned int 
  2916 ;;  multiplicand    2    2[COMRAM] unsigned int 
  2917 ;; Auto vars:     Size  Location     Type
  2918 ;;  product         2    4[COMRAM] unsigned int 
  2919 ;; Return value:  Size  Location     Type
  2920 ;;                  2    0[COMRAM] unsigned int 
  2921 ;; Registers used:
  2922 ;;		wreg, status,2, status,0, prodl, prodh
  2923 ;; Tracked objects:
  2924 ;;		On entry : 0/0
  2925 ;;		On exit  : 0/0
  2926 ;;		Unchanged: 0/0
  2927 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2928 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2929 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2930 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2931 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2932 ;;Total ram usage:        6 bytes
  2933 ;; Hardware stack levels used: 1
  2934 ;; Hardware stack levels required when called: 1
  2935 ;; This function calls:
  2936 ;;		Nothing
  2937 ;; This function is called by:
  2938 ;;		_main
  2939 ;;		_read_prec_or_width
  2940 ;;		_LEDarray_disp_light
  2941 ;;		_LEDarray_disp_PPM
  2942 ;;		_ADC2String
  2943 ;; This function uses a non-reentrant model
  2944 ;;
  2945                           
  2946                           	psect	text5
  2947   003474                     __ptext5:
  2948                           	callstack 0
  2949   003474                     ___wmul:
  2950                           	callstack 25
  2951   003474  5001               	movf	___wmul@multiplier^0,w,c
  2952   003476  0203               	mulwf	___wmul@multiplicand^0,c
  2953   003478  CFF3 F005          	movff	prodl,___wmul@product
  2954   00347C  CFF4 F006          	movff	prodh,___wmul@product+1
  2955   003480  5001               	movf	___wmul@multiplier^0,w,c
  2956   003482  0204               	mulwf	(___wmul@multiplicand+1)^0,c
  2957   003484  50F3               	movf	243,w,c
  2958   003486  2606               	addwf	(___wmul@product+1)^0,f,c
  2959   003488  5002               	movf	(___wmul@multiplier+1)^0,w,c
  2960   00348A  0203               	mulwf	___wmul@multiplicand^0,c
  2961   00348C  50F3               	movf	243,w,c
  2962   00348E  2606               	addwf	(___wmul@product+1)^0,f,c
  2963   003490  C005  F001         	movff	___wmul@product,?___wmul
  2964   003494  C006  F002         	movff	___wmul@product+1,?___wmul+1
  2965   003498  0012               	return		;funcret
  2966   00349A                     __end_of___wmul:
  2967                           	callstack 0
  2968                           
  2969 ;; *************** function _dtoa *****************
  2970 ;; Defined at:
  2971 ;;		line 513 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
  2972 ;; Parameters:    Size  Location     Type
  2973 ;;  fp              1   20[COMRAM] PTR struct _IO_FILE
  2974 ;;		 -> sprintf@f(12), 
  2975 ;;  d               2   21[COMRAM] int 
  2976 ;; Auto vars:     Size  Location     Type
  2977 ;;  i               2   29[COMRAM] int 
  2978 ;;  w               2   26[COMRAM] int 
  2979 ;;  s               1   28[COMRAM] unsigned char 
  2980 ;;  p               1   25[COMRAM] _Bool 
  2981 ;; Return value:  Size  Location     Type
  2982 ;;                  1    wreg      void 
  2983 ;; Registers used:
  2984 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2985 ;; Tracked objects:
  2986 ;;		On entry : 0/0
  2987 ;;		On exit  : 0/0
  2988 ;;		Unchanged: 0/0
  2989 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2990 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2991 ;;      Locals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2992 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2993 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2994 ;;Total ram usage:       11 bytes
  2995 ;; Hardware stack levels used: 1
  2996 ;; Hardware stack levels required when called: 5
  2997 ;; This function calls:
  2998 ;;		___awdiv
  2999 ;;		___awmod
  3000 ;;		_abs
  3001 ;;		_pad
  3002 ;; This function is called by:
  3003 ;;		_vfpfcnvrt
  3004 ;; This function uses a non-reentrant model
  3005 ;;
  3006                           
  3007                           	psect	text6
  3008   002900                     __ptext6:
  3009                           	callstack 0
  3010   002900                     _dtoa:
  3011                           	callstack 22
  3012   002900                     
  3013                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 513: static void 
>>>>>>> Stashed changes
      +                          dtoa(FILE *fp, vfpf_sint_t d);C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\commo
      +                          n\doprnt.c: 514: {;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c:
      +                           515:  char s;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 516
      +                          :     int i, w;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 52
      +                          0:  _Bool p = 1;
<<<<<<< Updated upstream
  1559   001508  0E01               	movlw	1
  1560   00150A  6E1A               	movwf	dtoa@p^0,c
  1561   00150C                     
  1562                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 524:     s = d < 
      +                          0 ? 1 : 0;
  1563   00150C  BE17               	btfsc	(dtoa@d+1)^0,7,c
  1564   00150E  EF8B  F00A         	goto	u1531
  1565   001512  EF8E  F00A         	goto	u1530
  1566   001516                     u1531:
  1567   001516  0E01               	movlw	1
  1568   001518  EF8F  F00A         	goto	u1540
  1569   00151C                     u1530:
  1570   00151C  0E00               	movlw	0
  1571   00151E                     u1540:
  1572   00151E  6E1D               	movwf	dtoa@s^0,c
  1573   001520                     
  1574                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 535:     w = widt
      +                          h;
  1575   001520  C046  F01B         	movff	_width,dtoa@w
  1576   001524  C047  F01C         	movff	_width+1,dtoa@w+1
  1577   001528                     
  1578                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 536:     if (s
  1579   001528  501D               	movf	dtoa@s^0,w,c
  1580   00152A  B4D8               	btfsc	status,2,c
  1581   00152C  EF9A  F00A         	goto	u1551
  1582   001530  EF9C  F00A         	goto	u1550
  1583   001534                     u1551:
  1584   001534  EFB3  F00A         	goto	l1015
  1585   001538                     u1550:
  1586   001538                     
  1587                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 540:     ) {;C:\P
      +                          rogram Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 541:         --w;
  1588   001538  061B               	decf	dtoa@w^0,f,c
  1589   00153A  A0D8               	btfss	status,0,c
  1590   00153C  061C               	decf	(dtoa@w+1)^0,f,c
  1591   00153E                     
  1592                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 542:   s = s ? '-
      +                          ' : '+';
  1593   00153E  501D               	movf	dtoa@s^0,w,c
  1594   001540  A4D8               	btfss	status,2,c
  1595   001542  EFA5  F00A         	goto	u1561
  1596   001546  EFA7  F00A         	goto	u1560
  1597   00154A                     u1561:
  1598   00154A  EFAD  F00A         	goto	l2023
  1599   00154E                     u1560:
  1600   00154E  0E00               	movlw	0
  1601   001550  6E19               	movwf	(_dtoa$1868+1)^0,c
  1602   001552  0E2B               	movlw	43
  1603   001554  6E18               	movwf	_dtoa$1868^0,c
  1604   001556  EFB1  F00A         	goto	l2025
  1605   00155A                     l2023:
  1606   00155A  0E00               	movlw	0
  1607   00155C  6E19               	movwf	(_dtoa$1868+1)^0,c
  1608   00155E  0E2D               	movlw	45
  1609   001560  6E18               	movwf	_dtoa$1868^0,c
  1610   001562                     l2025:
  1611   001562  C018  F01D         	movff	_dtoa$1868,dtoa@s
  1612   001566                     l1015:
  1613                           
  1614                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 552:     i = size
      +                          of(dbuf) - 1;
  1615   001566  0E00               	movlw	0
  1616   001568  6E1F               	movwf	(dtoa@i+1)^0,c
  1617   00156A  0E1F               	movlw	31
  1618   00156C  6E1E               	movwf	dtoa@i^0,c
  1619   00156E                     
  1620                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 553:     dbuf[i] 
      +                          = '\0';
  1621   00156E  0E00               	movlw	0
  1622   001570  0100               	movlb	0	; () banked
  1623   001572  6FA3               	movwf	(_dbuf+31)& (0+255),b
  1624                           
  1625                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 554:     while (!
      +                          (i < 1) && (d != 0
  1626   001574  EFE9  F00A         	goto	l2039
  1627   001578                     l2029:
  1628                           
  1629                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 563:     )) {;C:\
      +                          Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 564:         --i;
  1630   001578  061E               	decf	dtoa@i^0,f,c
  1631   00157A  A0D8               	btfss	status,0,c
  1632   00157C  061F               	decf	(dtoa@i+1)^0,f,c
  1633   00157E                     
  1634                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 565:         dbuf
      +                          [i] = (char)((int)'0' + abs(d % 10));
  1635   00157E  501E               	movf	dtoa@i^0,w,c
  1636   001580  0F84               	addlw	low _dbuf
  1637   001582  6ED9               	movwf	fsr2l,c
  1638   001584  6ADA               	clrf	fsr2h,c
  1639   001586  C016  F001         	movff	dtoa@d,___awmod@dividend
  1640   00158A  C017  F002         	movff	dtoa@d+1,___awmod@dividend+1
  1641   00158E  0E00               	movlw	0
  1642   001590  6E04               	movwf	(___awmod@divisor+1)^0,c
  1643   001592  0E0A               	movlw	10
  1644   001594  6E03               	movwf	___awmod@divisor^0,c
  1645   001596  EC31  F00D         	call	___awmod	;wreg free
  1646   00159A  C001  F007         	movff	?___awmod,abs@a
  1647   00159E  C002  F008         	movff	?___awmod+1,abs@a+1
  1648   0015A2  EC44  F00F         	call	_abs	;wreg free
  1649   0015A6  5007               	movf	?_abs^0,w,c
  1650   0015A8  0F30               	addlw	48
  1651   0015AA  6EDF               	movwf	indf2,c
  1652   0015AC                     
  1653                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 569:   p = 0;
  1654   0015AC  0E00               	movlw	0
  1655   0015AE  6E1A               	movwf	dtoa@p^0,c
  1656   0015B0                     
  1657                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 571:         --w;
  1658   0015B0  061B               	decf	dtoa@w^0,f,c
  1659   0015B2  A0D8               	btfss	status,0,c
  1660   0015B4  061C               	decf	(dtoa@w+1)^0,f,c
  1661   0015B6                     
  1662                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 572:         d = 
      +                          d / 10;
  1663   0015B6  C016  F001         	movff	dtoa@d,___awdiv@dividend
  1664   0015BA  C017  F002         	movff	dtoa@d+1,___awdiv@dividend+1
  1665   0015BE  0E00               	movlw	0
  1666   0015C0  6E04               	movwf	(___awdiv@divisor+1)^0,c
  1667   0015C2  0E0A               	movlw	10
  1668   0015C4  6E03               	movwf	___awdiv@divisor^0,c
  1669   0015C6  ECCF  F00C         	call	___awdiv	;wreg free
  1670   0015CA  C001  F016         	movff	?___awdiv,dtoa@d
  1671   0015CE  C002  F017         	movff	?___awdiv+1,dtoa@d+1
  1672   0015D2                     l2039:
  1673                           
  1674                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 554:     while (!
      +                          (i < 1) && (d != 0
  1675   0015D2  BE1F               	btfsc	(dtoa@i+1)^0,7,c
  1676   0015D4  EFF4  F00A         	goto	u1571
  1677   0015D8  501F               	movf	(dtoa@i+1)^0,w,c
  1678   0015DA  E108               	bnz	u1570
  1679   0015DC  041E               	decf	dtoa@i^0,w,c
  1680   0015DE  A0D8               	btfss	status,0,c
  1681   0015E0  EFF4  F00A         	goto	u1571
  1682   0015E4  EFF6  F00A         	goto	u1570
  1683   0015E8                     u1571:
  1684   0015E8  EF1B  F00B         	goto	l2049
  1685   0015EC                     u1570:
  1686   0015EC  5016               	movf	dtoa@d^0,w,c
  1687   0015EE  1017               	iorwf	(dtoa@d+1)^0,w,c
  1688   0015F0  A4D8               	btfss	status,2,c
  1689   0015F2  EFFD  F00A         	goto	u1581
  1690   0015F6  EFFF  F00A         	goto	u1580
  1691   0015FA                     u1581:
  1692   0015FA  EFBC  F00A         	goto	l2029
  1693   0015FE                     u1580:
  1694   0015FE  501A               	movf	dtoa@p^0,w,c
  1695   001600  A4D8               	btfss	status,2,c
  1696   001602  EF05  F00B         	goto	u1591
  1697   001606  EF07  F00B         	goto	u1590
  1698   00160A                     u1591:
  1699   00160A  EFBC  F00A         	goto	l2029
  1700   00160E                     u1590:
  1701   00160E  BE1C               	btfsc	(dtoa@w+1)^0,7,c
  1702   001610  EF12  F00B         	goto	u1601
  1703   001614  501C               	movf	(dtoa@w+1)^0,w,c
  1704   001616  E108               	bnz	u1600
  1705   001618  041B               	decf	dtoa@w^0,w,c
  1706   00161A  A0D8               	btfss	status,0,c
  1707   00161C  EF12  F00B         	goto	u1601
  1708   001620  EF14  F00B         	goto	u1600
  1709   001624                     u1601:
  1710   001624  EF1B  F00B         	goto	l2049
  1711   001628                     u1600:
  1712   001628  B24A               	btfsc	_flags^0,1,c
  1713   00162A  EF19  F00B         	goto	u1611
  1714   00162E  EF1B  F00B         	goto	u1610
  1715   001632                     u1611:
  1716   001632  EFBC  F00A         	goto	l2029
  1717   001636                     u1610:
  1718   001636                     l2049:
  1719                           
  1720                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 576:     if (s !=
      +                           0) {
  1721   001636  501D               	movf	dtoa@s^0,w,c
  1722   001638  B4D8               	btfsc	status,2,c
  1723   00163A  EF21  F00B         	goto	u1621
  1724   00163E  EF23  F00B         	goto	u1620
  1725   001642                     u1621:
  1726   001642  EF2C  F00B         	goto	l2055
  1727   001646                     u1620:
  1728   001646                     
  1729                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 577:         --i;
  1730   001646  061E               	decf	dtoa@i^0,f,c
  1731   001648  A0D8               	btfss	status,0,c
  1732   00164A  061F               	decf	(dtoa@i+1)^0,f,c
  1733   00164C                     
  1734                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 578:         dbuf
      +                          [i] = s;
  1735   00164C  501E               	movf	dtoa@i^0,w,c
  1736   00164E  0F84               	addlw	low _dbuf
  1737   001650  6ED9               	movwf	fsr2l,c
  1738   001652  6ADA               	clrf	fsr2h,c
  1739   001654  C01D  FFDF         	movff	dtoa@s,indf2
  1740   001658                     l2055:
  1741                           
  1742                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 582:     return (
      +                          void) pad(fp, &dbuf[i], w);
  1743   001658  C015  F00E         	movff	dtoa@fp,pad@fp
  1744   00165C  501E               	movf	dtoa@i^0,w,c
  1745   00165E  0F84               	addlw	low _dbuf
  1746   001660  6E0F               	movwf	pad@buf^0,c
  1747   001662  C01B  F010         	movff	dtoa@w,pad@p
  1748   001666  C01C  F011         	movff	dtoa@w+1,pad@p+1
  1749   00166A  EC35  F00E         	call	_pad	;wreg free
  1750   00166E  0012               	return		;funcret
  1751   001670                     __end_of_dtoa:
  1752                           	callstack 0
  1753                           
  1754 ;; *************** function _pad *****************
  1755 ;; Defined at:
  1756 ;;		line 193 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
  1757 ;; Parameters:    Size  Location     Type
  1758 ;;  fp              1   13[COMRAM] PTR struct _IO_FILE
  1759 ;;		 -> sprintf@f(12), 
  1760 ;;  buf             1   14[COMRAM] PTR unsigned char 
  1761 ;;		 -> dbuf(32), 
  1762 ;;  p               2   15[COMRAM] int 
  1763 ;; Auto vars:     Size  Location     Type
  1764 ;;  i               2   18[COMRAM] int 
  1765 ;; Return value:  Size  Location     Type
  1766 ;;                  1    wreg      void 
  1767 ;; Registers used:
  1768 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1769 ;; Tracked objects:
  1770 ;;		On entry : 0/0
  1771 ;;		On exit  : 0/0
  1772 ;;		Unchanged: 0/0
  1773 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1774 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1775 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1776 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1777 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1778 ;;Total ram usage:        7 bytes
  1779 ;; Hardware stack levels used: 1
  1780 ;; Hardware stack levels required when called: 4
  1781 ;; This function calls:
  1782 ;;		_fputc
  1783 ;;		_fputs
  1784 ;; This function is called by:
  1785 ;;		_dtoa
  1786 ;; This function uses a non-reentrant model
  1787 ;;
  1788                           
  1789                           	psect	text7
  1790   001C6A                     __ptext7:
  1791                           	callstack 0
  1792   001C6A                     _pad:
  1793                           	callstack 22
  1794   001C6A                     
  1795                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 193: static void 
=======
  3014   002900  0E01               	movlw	1
  3015   002902  6E1A               	movwf	dtoa@p^0,c
  3016   002904                     
  3017                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 524:     s = d < 
      +                          0 ? 1 : 0;
  3018   002904  BE17               	btfsc	(dtoa@d+1)^0,7,c
  3019   002906  EF87  F014         	goto	u2501
  3020   00290A  EF8A  F014         	goto	u2500
  3021   00290E                     u2501:
  3022   00290E  0E01               	movlw	1
  3023   002910  EF8B  F014         	goto	u2510
  3024   002914                     u2500:
  3025   002914  0E00               	movlw	0
  3026   002916                     u2510:
  3027   002916  6E1D               	movwf	dtoa@s^0,c
  3028   002918                     
  3029                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 535:     w = widt
      +                          h;
  3030   002918  C059  F01B         	movff	_width,dtoa@w
  3031   00291C  C05A  F01C         	movff	_width+1,dtoa@w+1
  3032   002920                     
  3033                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 536:     if (s
  3034   002920  501D               	movf	dtoa@s^0,w,c
  3035   002922  B4D8               	btfsc	status,2,c
  3036   002924  EF96  F014         	goto	u2521
  3037   002928  EF98  F014         	goto	u2520
  3038   00292C                     u2521:
  3039   00292C  EFAF  F014         	goto	l1062
  3040   002930                     u2520:
  3041   002930                     
  3042                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 540:     ) {;C:\P
      +                          rogram Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 541:         --w;
  3043   002930  061B               	decf	dtoa@w^0,f,c
  3044   002932  A0D8               	btfss	status,0,c
  3045   002934  061C               	decf	(dtoa@w+1)^0,f,c
  3046   002936                     
  3047                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 542:   s = s ? '-
      +                          ' : '+';
  3048   002936  501D               	movf	dtoa@s^0,w,c
  3049   002938  A4D8               	btfss	status,2,c
  3050   00293A  EFA1  F014         	goto	u2531
  3051   00293E  EFA3  F014         	goto	u2530
  3052   002942                     u2531:
  3053   002942  EFA9  F014         	goto	l2784
  3054   002946                     u2530:
  3055   002946  0E00               	movlw	0
  3056   002948  6E19               	movwf	(_dtoa$1936+1)^0,c
  3057   00294A  0E2B               	movlw	43
  3058   00294C  6E18               	movwf	_dtoa$1936^0,c
  3059   00294E  EFAD  F014         	goto	l2786
  3060   002952                     l2784:
  3061   002952  0E00               	movlw	0
  3062   002954  6E19               	movwf	(_dtoa$1936+1)^0,c
  3063   002956  0E2D               	movlw	45
  3064   002958  6E18               	movwf	_dtoa$1936^0,c
  3065   00295A                     l2786:
  3066   00295A  C018  F01D         	movff	_dtoa$1936,dtoa@s
  3067   00295E                     l1062:
  3068                           
  3069                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 552:     i = size
      +                          of(dbuf) - 1;
  3070   00295E  0E00               	movlw	0
  3071   002960  6E1F               	movwf	(dtoa@i+1)^0,c
  3072   002962  0E1F               	movlw	31
  3073   002964  6E1E               	movwf	dtoa@i^0,c
  3074   002966                     
  3075                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 553:     dbuf[i] 
      +                          = '\0';
  3076   002966  0E00               	movlw	0
  3077   002968  0100               	movlb	0	; () banked
  3078   00296A  6F7F               	movwf	(_dbuf+31)& (0+255),b
  3079                           
  3080                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 554:     while (!
      +                          (i < 1) && (d != 0
  3081   00296C  EFE5  F014         	goto	l2800
  3082   002970                     l2790:
  3083                           
  3084                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 563:     )) {;C:\
      +                          Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 564:         --i;
  3085   002970  061E               	decf	dtoa@i^0,f,c
  3086   002972  A0D8               	btfss	status,0,c
  3087   002974  061F               	decf	(dtoa@i+1)^0,f,c
  3088   002976                     
  3089                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 565:         dbuf
      +                          [i] = (char)((int)'0' + abs(d % 10));
  3090   002976  501E               	movf	dtoa@i^0,w,c
  3091   002978  0F60               	addlw	low _dbuf
  3092   00297A  6ED9               	movwf	fsr2l,c
  3093   00297C  6ADA               	clrf	fsr2h,c
  3094   00297E  C016  F001         	movff	dtoa@d,___awmod@dividend
  3095   002982  C017  F002         	movff	dtoa@d+1,___awmod@dividend+1
  3096   002986  0E00               	movlw	0
  3097   002988  6E04               	movwf	(___awmod@divisor+1)^0,c
  3098   00298A  0E0A               	movlw	10
  3099   00298C  6E03               	movwf	___awmod@divisor^0,c
  3100   00298E  EC6A  F017         	call	___awmod	;wreg free
  3101   002992  C001  F007         	movff	?___awmod,abs@a
  3102   002996  C002  F008         	movff	?___awmod+1,abs@a+1
  3103   00299A  ECEE  F019         	call	_abs	;wreg free
  3104   00299E  5007               	movf	?_abs^0,w,c
  3105   0029A0  0F30               	addlw	48
  3106   0029A2  6EDF               	movwf	indf2,c
  3107   0029A4                     
  3108                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 569:   p = 0;
  3109   0029A4  0E00               	movlw	0
  3110   0029A6  6E1A               	movwf	dtoa@p^0,c
  3111   0029A8                     
  3112                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 571:         --w;
  3113   0029A8  061B               	decf	dtoa@w^0,f,c
  3114   0029AA  A0D8               	btfss	status,0,c
  3115   0029AC  061C               	decf	(dtoa@w+1)^0,f,c
  3116   0029AE                     
  3117                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 572:         d = 
      +                          d / 10;
  3118   0029AE  C016  F001         	movff	dtoa@d,___awdiv@dividend
  3119   0029B2  C017  F002         	movff	dtoa@d+1,___awdiv@dividend+1
  3120   0029B6  0E00               	movlw	0
  3121   0029B8  6E04               	movwf	(___awdiv@divisor+1)^0,c
  3122   0029BA  0E0A               	movlw	10
  3123   0029BC  6E03               	movwf	___awdiv@divisor^0,c
  3124   0029BE  ECAB  F016         	call	___awdiv	;wreg free
  3125   0029C2  C001  F016         	movff	?___awdiv,dtoa@d
  3126   0029C6  C002  F017         	movff	?___awdiv+1,dtoa@d+1
  3127   0029CA                     l2800:
  3128                           
  3129                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 554:     while (!
      +                          (i < 1) && (d != 0
  3130   0029CA  BE1F               	btfsc	(dtoa@i+1)^0,7,c
  3131   0029CC  EFF0  F014         	goto	u2541
  3132   0029D0  501F               	movf	(dtoa@i+1)^0,w,c
  3133   0029D2  E108               	bnz	u2540
  3134   0029D4  041E               	decf	dtoa@i^0,w,c
  3135   0029D6  A0D8               	btfss	status,0,c
  3136   0029D8  EFF0  F014         	goto	u2541
  3137   0029DC  EFF2  F014         	goto	u2540
  3138   0029E0                     u2541:
  3139   0029E0  EF17  F015         	goto	l2810
  3140   0029E4                     u2540:
  3141   0029E4  5016               	movf	dtoa@d^0,w,c
  3142   0029E6  1017               	iorwf	(dtoa@d+1)^0,w,c
  3143   0029E8  A4D8               	btfss	status,2,c
  3144   0029EA  EFF9  F014         	goto	u2551
  3145   0029EE  EFFB  F014         	goto	u2550
  3146   0029F2                     u2551:
  3147   0029F2  EFB8  F014         	goto	l2790
  3148   0029F6                     u2550:
  3149   0029F6  501A               	movf	dtoa@p^0,w,c
  3150   0029F8  A4D8               	btfss	status,2,c
  3151   0029FA  EF01  F015         	goto	u2561
  3152   0029FE  EF03  F015         	goto	u2560
  3153   002A02                     u2561:
  3154   002A02  EFB8  F014         	goto	l2790
  3155   002A06                     u2560:
  3156   002A06  BE1C               	btfsc	(dtoa@w+1)^0,7,c
  3157   002A08  EF0E  F015         	goto	u2571
  3158   002A0C  501C               	movf	(dtoa@w+1)^0,w,c
  3159   002A0E  E108               	bnz	u2570
  3160   002A10  041B               	decf	dtoa@w^0,w,c
  3161   002A12  A0D8               	btfss	status,0,c
  3162   002A14  EF0E  F015         	goto	u2571
  3163   002A18  EF10  F015         	goto	u2570
  3164   002A1C                     u2571:
  3165   002A1C  EF17  F015         	goto	l2810
  3166   002A20                     u2570:
  3167   002A20  B25D               	btfsc	_flags^0,1,c
  3168   002A22  EF15  F015         	goto	u2581
  3169   002A26  EF17  F015         	goto	u2580
  3170   002A2A                     u2581:
  3171   002A2A  EFB8  F014         	goto	l2790
  3172   002A2E                     u2580:
  3173   002A2E                     l2810:
  3174                           
  3175                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 576:     if (s !=
      +                           0) {
  3176   002A2E  501D               	movf	dtoa@s^0,w,c
  3177   002A30  B4D8               	btfsc	status,2,c
  3178   002A32  EF1D  F015         	goto	u2591
  3179   002A36  EF1F  F015         	goto	u2590
  3180   002A3A                     u2591:
  3181   002A3A  EF28  F015         	goto	l2816
  3182   002A3E                     u2590:
  3183   002A3E                     
  3184                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 577:         --i;
  3185   002A3E  061E               	decf	dtoa@i^0,f,c
  3186   002A40  A0D8               	btfss	status,0,c
  3187   002A42  061F               	decf	(dtoa@i+1)^0,f,c
  3188   002A44                     
  3189                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 578:         dbuf
      +                          [i] = s;
  3190   002A44  501E               	movf	dtoa@i^0,w,c
  3191   002A46  0F60               	addlw	low _dbuf
  3192   002A48  6ED9               	movwf	fsr2l,c
  3193   002A4A  6ADA               	clrf	fsr2h,c
  3194   002A4C  C01D  FFDF         	movff	dtoa@s,indf2
  3195   002A50                     l2816:
  3196                           
  3197                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 582:     return (
      +                          void) pad(fp, &dbuf[i], w);
  3198   002A50  C015  F00E         	movff	dtoa@fp,pad@fp
  3199   002A54  501E               	movf	dtoa@i^0,w,c
  3200   002A56  0F60               	addlw	low _dbuf
  3201   002A58  6E0F               	movwf	pad@buf^0,c
  3202   002A5A  C01B  F010         	movff	dtoa@w,pad@p
  3203   002A5E  C01C  F011         	movff	dtoa@w+1,pad@p+1
  3204   002A62  EC60  F018         	call	_pad	;wreg free
  3205   002A66  0012               	return		;funcret
  3206   002A68                     __end_of_dtoa:
  3207                           	callstack 0
  3208                           
  3209 ;; *************** function _pad *****************
  3210 ;; Defined at:
  3211 ;;		line 193 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
  3212 ;; Parameters:    Size  Location     Type
  3213 ;;  fp              1   13[COMRAM] PTR struct _IO_FILE
  3214 ;;		 -> sprintf@f(12), 
  3215 ;;  buf             1   14[COMRAM] PTR unsigned char 
  3216 ;;		 -> dbuf(32), 
  3217 ;;  p               2   15[COMRAM] int 
  3218 ;; Auto vars:     Size  Location     Type
  3219 ;;  i               2   18[COMRAM] int 
  3220 ;; Return value:  Size  Location     Type
  3221 ;;                  1    wreg      void 
  3222 ;; Registers used:
  3223 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  3224 ;; Tracked objects:
  3225 ;;		On entry : 0/0
  3226 ;;		On exit  : 0/0
  3227 ;;		Unchanged: 0/0
  3228 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3229 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3230 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3231 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3232 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3233 ;;Total ram usage:        7 bytes
  3234 ;; Hardware stack levels used: 1
  3235 ;; Hardware stack levels required when called: 4
  3236 ;; This function calls:
  3237 ;;		_fputc
  3238 ;;		_fputs
  3239 ;; This function is called by:
  3240 ;;		_dtoa
  3241 ;; This function uses a non-reentrant model
  3242 ;;
  3243                           
  3244                           	psect	text7
  3245   0030C0                     __ptext7:
  3246                           	callstack 0
  3247   0030C0                     _pad:
  3248                           	callstack 22
  3249   0030C0                     
  3250                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 193: static void 
>>>>>>> Stashed changes
      +                          pad(FILE *fp, char *buf, int p);C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\com
      +                          mon\doprnt.c: 194: {;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.
      +                          c: 195:     int i;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c:
      +                           199:     if (flags & (1 << 0)) {
<<<<<<< Updated upstream
  1796   001C6A  A04A               	btfss	_flags^0,0,c
  1797   001C6C  EF3A  F00E         	goto	u1481
  1798   001C70  EF3C  F00E         	goto	u1480
  1799   001C74                     u1481:
  1800   001C74  EF42  F00E         	goto	l1987
  1801   001C78                     u1480:
  1802   001C78                     
  1803                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 200:         fput
      +                          s((const char *)buf, fp);
  1804   001C78  C00F  F009         	movff	pad@buf,fputs@s
  1805   001C7C  C00E  F00A         	movff	pad@fp,fputs@fp
  1806   001C80  ECEF  F00E         	call	_fputs	;wreg free
  1807   001C84                     l1987:
  1808                           
  1809                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 205:  if (p < 0) 
      +                          {
  1810   001C84  BE11               	btfsc	(pad@p+1)^0,7,c
  1811   001C86  EF49  F00E         	goto	u1490
  1812   001C8A  EF47  F00E         	goto	u1491
  1813   001C8E                     u1491:
  1814   001C8E  EF4D  F00E         	goto	l1007
  1815   001C92                     u1490:
  1816   001C92                     
  1817                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 206:   p = 0;
  1818   001C92  0E00               	movlw	0
  1819   001C94  6E11               	movwf	(pad@p+1)^0,c
  1820   001C96  0E00               	movlw	0
  1821   001C98  6E10               	movwf	pad@p^0,c
  1822   001C9A                     l1007:
  1823                           
  1824                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 208:     i = 0;
  1825   001C9A  0E00               	movlw	0
  1826   001C9C  6E14               	movwf	(pad@i+1)^0,c
  1827   001C9E  0E00               	movlw	0
  1828   001CA0  6E13               	movwf	pad@i^0,c
  1829                           
  1830                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 209:     while (i
      +                           < p) {
  1831   001CA2  EF5D  F00E         	goto	l1995
  1832   001CA6                     l1991:
  1833                           
  1834                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 210:         fput
      +                          c(' ', fp);
  1835   001CA6  0E00               	movlw	0
  1836   001CA8  6E02               	movwf	(fputc@c+1)^0,c
  1837   001CAA  0E20               	movlw	32
  1838   001CAC  6E01               	movwf	fputc@c^0,c
  1839   001CAE  C00E  F003         	movff	pad@fp,fputc@fp
  1840   001CB2  ECE0  F00D         	call	_fputc	;wreg free
  1841   001CB6                     
  1842                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 211:         ++i;
  1843   001CB6  4A13               	infsnz	pad@i^0,f,c
  1844   001CB8  2A14               	incf	(pad@i+1)^0,f,c
  1845   001CBA                     l1995:
  1846                           
  1847                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 209:     while (i
      +                           < p) {
  1848   001CBA  5010               	movf	pad@p^0,w,c
  1849   001CBC  5C13               	subwf	pad@i^0,w,c
  1850   001CBE  5014               	movf	(pad@i+1)^0,w,c
  1851   001CC0  0A80               	xorlw	128
  1852   001CC2  6E12               	movwf	??_pad^0,c
  1853   001CC4  5011               	movf	(pad@p+1)^0,w,c
  1854   001CC6  0A80               	xorlw	128
  1855   001CC8  5812               	subwfb	??_pad^0,w,c
  1856   001CCA  A0D8               	btfss	status,0,c
  1857   001CCC  EF6A  F00E         	goto	u1501
  1858   001CD0  EF6C  F00E         	goto	u1500
  1859   001CD4                     u1501:
  1860   001CD4  EF53  F00E         	goto	l1991
  1861   001CD8                     u1500:
  1862   001CD8                     
  1863                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 216:     if (!(fl
      +                          ags & (1 << 0))) {
  1864   001CD8  B04A               	btfsc	_flags^0,0,c
  1865   001CDA  EF71  F00E         	goto	u1511
  1866   001CDE  EF73  F00E         	goto	u1510
  1867   001CE2                     u1511:
  1868   001CE2  EF79  F00E         	goto	l1012
  1869   001CE6                     u1510:
  1870   001CE6                     
  1871                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 218:         fput
      +                          s((const char *)buf, fp);
  1872   001CE6  C00F  F009         	movff	pad@buf,fputs@s
  1873   001CEA  C00E  F00A         	movff	pad@fp,fputs@fp
  1874   001CEE  ECEF  F00E         	call	_fputs	;wreg free
  1875   001CF2                     l1012:
  1876   001CF2  0012               	return		;funcret
  1877   001CF4                     __end_of_pad:
  1878                           	callstack 0
  1879                           
  1880 ;; *************** function _fputs *****************
  1881 ;; Defined at:
  1882 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\nf_fputs.c"
  1883 ;; Parameters:    Size  Location     Type
  1884 ;;  s               1    8[COMRAM] PTR const unsigned char 
  1885 ;;		 -> dbuf(32), 
  1886 ;;  fp              1    9[COMRAM] PTR struct _IO_FILE
  1887 ;;		 -> sprintf@f(12), 
  1888 ;; Auto vars:     Size  Location     Type
  1889 ;;  i               2   11[COMRAM] int 
  1890 ;;  c               1   10[COMRAM] unsigned char 
  1891 ;; Return value:  Size  Location     Type
  1892 ;;                  2    8[COMRAM] int 
  1893 ;; Registers used:
  1894 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1895 ;; Tracked objects:
  1896 ;;		On entry : 0/0
  1897 ;;		On exit  : 0/0
  1898 ;;		Unchanged: 0/0
  1899 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1900 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1901 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1902 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1903 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1904 ;;Total ram usage:        5 bytes
  1905 ;; Hardware stack levels used: 1
  1906 ;; Hardware stack levels required when called: 3
  1907 ;; This function calls:
  1908 ;;		_fputc
  1909 ;; This function is called by:
  1910 ;;		_pad
  1911 ;; This function uses a non-reentrant model
  1912 ;;
  1913                           
  1914                           	psect	text8
  1915   001DDE                     __ptext8:
  1916                           	callstack 0
  1917   001DDE                     _fputs:
  1918                           	callstack 22
  1919   001DDE  0E00               	movlw	0
  1920   001DE0  6E0D               	movwf	(fputs@i+1)^0,c
  1921   001DE2  0E00               	movlw	0
  1922   001DE4  6E0C               	movwf	fputs@i^0,c
  1923   001DE6  EFFE  F00E         	goto	l1895
  1924   001DEA                     l1891:
  1925   001DEA  C00B  F001         	movff	fputs@c,fputc@c
  1926   001DEE  6A02               	clrf	(fputc@c+1)^0,c
  1927   001DF0  C00A  F003         	movff	fputs@fp,fputc@fp
  1928   001DF4  ECE0  F00D         	call	_fputc	;wreg free
  1929   001DF8  4A0C               	infsnz	fputs@i^0,f,c
  1930   001DFA  2A0D               	incf	(fputs@i+1)^0,f,c
  1931   001DFC                     l1895:
  1932   001DFC  5009               	movf	fputs@s^0,w,c
  1933   001DFE  240C               	addwf	fputs@i^0,w,c
  1934   001E00  6ED9               	movwf	fsr2l,c
  1935   001E02  6ADA               	clrf	fsr2h,c
  1936   001E04  50DF               	movf	indf2,w,c
  1937   001E06  6E0B               	movwf	fputs@c^0,c
  1938   001E08  500B               	movf	fputs@c^0,w,c
  1939   001E0A  A4D8               	btfss	status,2,c
  1940   001E0C  EF0A  F00F         	goto	u1351
  1941   001E10  EF0C  F00F         	goto	u1350
  1942   001E14                     u1351:
  1943   001E14  EFF5  F00E         	goto	l1891
  1944   001E18                     u1350:
  1945   001E18  0012               	return		;funcret
  1946   001E1A                     __end_of_fputs:
  1947                           	callstack 0
  1948                           
  1949 ;; *************** function _fputc *****************
  1950 ;; Defined at:
  1951 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\nf_fputc.c"
  1952 ;; Parameters:    Size  Location     Type
  1953 ;;  c               2    0[COMRAM] int 
  1954 ;;  fp              1    2[COMRAM] PTR struct _IO_FILE
  1955 ;;		 -> sprintf@f(12), 
  1956 ;; Auto vars:     Size  Location     Type
  1957 ;;		None
  1958 ;; Return value:  Size  Location     Type
  1959 ;;                  2    0[COMRAM] int 
  1960 ;; Registers used:
  1961 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1962 ;; Tracked objects:
  1963 ;;		On entry : 0/0
  1964 ;;		On exit  : 0/0
  1965 ;;		Unchanged: 0/0
  1966 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1967 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1968 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1969 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1970 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1971 ;;Total ram usage:        8 bytes
  1972 ;; Hardware stack levels used: 1
  1973 ;; Hardware stack levels required when called: 2
  1974 ;; This function calls:
  1975 ;;		_putch
  1976 ;; This function is called by:
  1977 ;;		_pad
  1978 ;;		_vfpfcnvrt
  1979 ;;		_fputs
  1980 ;; This function uses a non-reentrant model
  1981 ;;
  1982                           
  1983                           	psect	text9
  1984   001BC0                     __ptext9:
  1985                           	callstack 0
  1986   001BC0                     _fputc:
  1987                           	callstack 25
  1988   001BC0  5003               	movf	fputc@fp^0,w,c
  1989   001BC2  B4D8               	btfsc	status,2,c
  1990   001BC4  EFE6  F00D         	goto	u1311
  1991   001BC8  EFE8  F00D         	goto	u1310
  1992   001BCC                     u1311:
  1993   001BCC  EFF0  F00D         	goto	l1879
  1994   001BD0                     u1310:
  1995   001BD0  5003               	movf	fputc@fp^0,w,c
  1996   001BD2  A4D8               	btfss	status,2,c
  1997   001BD4  EFEE  F00D         	goto	u1321
  1998   001BD8  EFF0  F00D         	goto	u1320
  1999   001BDC                     u1321:
  2000   001BDC  EFF5  F00D         	goto	l1881
  2001   001BE0                     u1320:
  2002   001BE0                     l1879:
  2003   001BE0  5001               	movf	fputc@c^0,w,c
  2004   001BE2  ECE4  F00F         	call	_putch
  2005   001BE6  EF34  F00E         	goto	l1076
  2006   001BEA                     l1881:
  2007   001BEA  5003               	movf	fputc@fp^0,w,c
  2008   001BEC  6ED9               	movwf	fsr2l,c
  2009   001BEE  6ADA               	clrf	fsr2h,c
  2010   001BF0  0E0A               	movlw	10
  2011   001BF2  26D9               	addwf	fsr2l,f,c
  2012   001BF4  50DE               	movf	postinc2,w,c
  2013   001BF6  10DE               	iorwf	postinc2,w,c
  2014   001BF8  B4D8               	btfsc	status,2,c
  2015   001BFA  EF01  F00E         	goto	u1331
  2016   001BFE  EF03  F00E         	goto	u1330
  2017   001C02                     u1331:
  2018   001C02  EF1C  F00E         	goto	l1885
  2019   001C06                     u1330:
  2020   001C06  5003               	movf	fputc@fp^0,w,c
  2021   001C08  6ED9               	movwf	fsr2l,c
  2022   001C0A  6ADA               	clrf	fsr2h,c
  2023   001C0C  0E0A               	movlw	10
  2024   001C0E  26D9               	addwf	fsr2l,f,c
  2025   001C10  5003               	movf	fputc@fp^0,w,c
  2026   001C12  6EE1               	movwf	fsr1l,c
  2027   001C14  6AE2               	clrf	fsr1h,c
  2028   001C16  0E03               	movlw	3
  2029   001C18  26E1               	addwf	fsr1l,f,c
  2030   001C1A  50DE               	movf	postinc2,w,c
  2031   001C1C  5CE6               	subwf	postinc1,w,c
  2032   001C1E  50E6               	movf	postinc1,w,c
  2033   001C20  0A80               	xorlw	128
  2034   001C22  6E08               	movwf	(??_fputc+4)^0,c
  2035   001C24  50DE               	movf	postinc2,w,c
  2036   001C26  0A80               	xorlw	128
  2037   001C28  5808               	subwfb	(??_fputc+4)^0,w,c
  2038   001C2A  B0D8               	btfsc	status,0,c
  2039   001C2C  EF1A  F00E         	goto	u1341
  2040   001C30  EF1C  F00E         	goto	u1340
  2041   001C34                     u1341:
  2042   001C34  EF34  F00E         	goto	l1076
  2043   001C38                     u1340:
  2044   001C38                     l1885:
  2045   001C38  5003               	movf	fputc@fp^0,w,c
  2046   001C3A  6ED9               	movwf	fsr2l,c
  2047   001C3C  6ADA               	clrf	fsr2h,c
  2048   001C3E  0E03               	movlw	3
  2049   001C40  26D9               	addwf	fsr2l,f,c
  2050   001C42  50DF               	movf	indf2,w,c
  2051   001C44  6E04               	movwf	??_fputc^0,c
  2052   001C46  5003               	movf	fputc@fp^0,w,c
  2053   001C48  6ED9               	movwf	fsr2l,c
  2054   001C4A  6ADA               	clrf	fsr2h,c
  2055   001C4C  50DF               	movf	indf2,w,c
  2056   001C4E  2404               	addwf	??_fputc^0,w,c
  2057   001C50  6ED9               	movwf	fsr2l,c
  2058   001C52  6ADA               	clrf	fsr2h,c
  2059   001C54  C001  FFDF         	movff	fputc@c,indf2
  2060   001C58  5003               	movf	fputc@fp^0,w,c
  2061   001C5A  6ED9               	movwf	fsr2l,c
  2062   001C5C  6ADA               	clrf	fsr2h,c
  2063   001C5E  0E03               	movlw	3
  2064   001C60  26D9               	addwf	fsr2l,f,c
  2065   001C62  2ADE               	incf	postinc2,f,c
  2066   001C64  0E00               	movlw	0
  2067   001C66  22DD               	addwfc	postdec2,f,c
  2068   001C68                     l1076:
  2069   001C68  0012               	return		;funcret
  2070   001C6A                     __end_of_fputc:
  2071                           	callstack 0
  2072                           
  2073 ;; *************** function _putch *****************
  2074 ;; Defined at:
  2075 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\putch.c"
  2076 ;; Parameters:    Size  Location     Type
  2077 ;;  c               1    wreg     unsigned char 
  2078 ;; Auto vars:     Size  Location     Type
  2079 ;;  c               1    0[COMRAM] unsigned char 
  2080 ;; Return value:  Size  Location     Type
  2081 ;;                  1    wreg      void 
  2082 ;; Registers used:
  2083 ;;		wreg
  2084 ;; Tracked objects:
  2085 ;;		On entry : 0/0
  2086 ;;		On exit  : 0/0
  2087 ;;		Unchanged: 0/0
  2088 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2089 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2090 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2091 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2092 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2093 ;;Total ram usage:        0 bytes
  2094 ;; Hardware stack levels used: 1
  2095 ;; Hardware stack levels required when called: 1
  2096 ;; This function calls:
  2097 ;;		Nothing
  2098 ;; This function is called by:
  2099 ;;		_fputc
  2100 ;; This function uses a non-reentrant model
  2101 ;;
  2102                           
  2103                           	psect	text10
  2104   001FC8                     __ptext10:
  2105                           	callstack 0
  2106   001FC8                     _putch:
  2107                           	callstack 25
  2108   001FC8  0012               	return		;funcret
  2109   001FCA                     __end_of_putch:
  2110                           	callstack 0
  2111                           
  2112 ;; *************** function _abs *****************
  2113 ;; Defined at:
  2114 ;;		line 1 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\abs.c"
  2115 ;; Parameters:    Size  Location     Type
  2116 ;;  a               2    6[COMRAM] int 
  2117 ;; Auto vars:     Size  Location     Type
  2118 ;;		None
  2119 ;; Return value:  Size  Location     Type
  2120 ;;                  2    6[COMRAM] int 
  2121 ;; Registers used:
  2122 ;;		wreg, status,2, status,0
  2123 ;; Tracked objects:
  2124 ;;		On entry : 0/0
  2125 ;;		On exit  : 0/0
  2126 ;;		Unchanged: 0/0
  2127 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2128 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2129 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2130 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2131 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2132 ;;Total ram usage:        4 bytes
  2133 ;; Hardware stack levels used: 1
  2134 ;; Hardware stack levels required when called: 1
  2135 ;; This function calls:
  2136 ;;		Nothing
  2137 ;; This function is called by:
  2138 ;;		_dtoa
  2139 ;; This function uses a non-reentrant model
  2140 ;;
  2141                           
  2142                           	psect	text11
  2143   001E88                     __ptext11:
  2144                           	callstack 0
  2145   001E88                     _abs:
  2146                           	callstack 25
  2147   001E88  BE08               	btfsc	(abs@a+1)^0,7,c
  2148   001E8A  EF49  F00F         	goto	u1521
  2149   001E8E  EF4B  F00F         	goto	u1520
  2150   001E92                     u1521:
  2151   001E92  EF51  F00F         	goto	l1061
  2152   001E96                     u1520:
  2153   001E96  C007  F007         	movff	abs@a,?_abs
  2154   001E9A  C008  F008         	movff	abs@a+1,?_abs+1
  2155   001E9E  EF5D  F00F         	goto	l1064
  2156   001EA2                     l1061:
  2157   001EA2  C007  F009         	movff	abs@a,??_abs
  2158   001EA6  C008  F00A         	movff	abs@a+1,??_abs+1
  2159   001EAA  1E09               	comf	??_abs^0,f,c
  2160   001EAC  1E0A               	comf	(??_abs+1)^0,f,c
  2161   001EAE  4A09               	infsnz	??_abs^0,f,c
  2162   001EB0  2A0A               	incf	(??_abs+1)^0,f,c
  2163   001EB2  C009  F007         	movff	??_abs,?_abs
  2164   001EB6  C00A  F008         	movff	??_abs+1,?_abs+1
  2165   001EBA                     l1064:
  2166   001EBA  0012               	return		;funcret
  2167   001EBC                     __end_of_abs:
  2168                           	callstack 0
  2169                           
  2170 ;; *************** function ___awdiv *****************
  2171 ;; Defined at:
  2172 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\awdiv.c"
  2173 ;; Parameters:    Size  Location     Type
  2174 ;;  dividend        2    0[COMRAM] int 
  2175 ;;  divisor         2    2[COMRAM] int 
  2176 ;; Auto vars:     Size  Location     Type
  2177 ;;  quotient        2    6[COMRAM] int 
  2178 ;;  sign            1    5[COMRAM] unsigned char 
  2179 ;;  counter         1    4[COMRAM] unsigned char 
  2180 ;; Return value:  Size  Location     Type
  2181 ;;                  2    0[COMRAM] int 
  2182 ;; Registers used:
  2183 ;;		wreg, status,2, status,0
  2184 ;; Tracked objects:
  2185 ;;		On entry : 0/0
  2186 ;;		On exit  : 0/0
  2187 ;;		Unchanged: 0/0
  2188 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2189 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2190 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2191 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2192 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2193 ;;Total ram usage:        8 bytes
  2194 ;; Hardware stack levels used: 1
  2195 ;; Hardware stack levels required when called: 1
  2196 ;; This function calls:
  2197 ;;		Nothing
  2198 ;; This function is called by:
  2199 ;;		_dtoa
  2200 ;; This function uses a non-reentrant model
  2201 ;;
  2202                           
  2203                           	psect	text12
  2204   00199E                     __ptext12:
  2205                           	callstack 0
  2206   00199E                     ___awdiv:
  2207                           	callstack 25
  2208   00199E  0E00               	movlw	0
  2209   0019A0  6E06               	movwf	___awdiv@sign^0,c
  2210   0019A2  BE04               	btfsc	(___awdiv@divisor+1)^0,7,c
  2211   0019A4  EFD8  F00C         	goto	u1360
  2212   0019A8  EFD6  F00C         	goto	u1361
  2213   0019AC                     u1361:
  2214   0019AC  EFDE  F00C         	goto	l1911
  2215   0019B0                     u1360:
  2216   0019B0  6C03               	negf	___awdiv@divisor^0,c
  2217   0019B2  1E04               	comf	(___awdiv@divisor+1)^0,f,c
  2218   0019B4  B0D8               	btfsc	status,0,c
  2219   0019B6  2A04               	incf	(___awdiv@divisor+1)^0,f,c
  2220   0019B8  0E01               	movlw	1
  2221   0019BA  6E06               	movwf	___awdiv@sign^0,c
  2222   0019BC                     l1911:
  2223   0019BC  BE02               	btfsc	(___awdiv@dividend+1)^0,7,c
  2224   0019BE  EFE5  F00C         	goto	u1370
  2225   0019C2  EFE3  F00C         	goto	u1371
  2226   0019C6                     u1371:
  2227   0019C6  EFEB  F00C         	goto	l1917
  2228   0019CA                     u1370:
  2229   0019CA  6C01               	negf	___awdiv@dividend^0,c
  2230   0019CC  1E02               	comf	(___awdiv@dividend+1)^0,f,c
  2231   0019CE  B0D8               	btfsc	status,0,c
  2232   0019D0  2A02               	incf	(___awdiv@dividend+1)^0,f,c
  2233   0019D2  0E01               	movlw	1
  2234   0019D4  1A06               	xorwf	___awdiv@sign^0,f,c
  2235   0019D6                     l1917:
  2236   0019D6  0E00               	movlw	0
  2237   0019D8  6E08               	movwf	(___awdiv@quotient+1)^0,c
  2238   0019DA  0E00               	movlw	0
  2239   0019DC  6E07               	movwf	___awdiv@quotient^0,c
  2240   0019DE  5003               	movf	___awdiv@divisor^0,w,c
  2241   0019E0  1004               	iorwf	(___awdiv@divisor+1)^0,w,c
  2242   0019E2  B4D8               	btfsc	status,2,c
  2243   0019E4  EFF6  F00C         	goto	u1381
  2244   0019E8  EFF8  F00C         	goto	u1380
  2245   0019EC                     u1381:
  2246   0019EC  EF20  F00D         	goto	l1939
  2247   0019F0                     u1380:
  2248   0019F0  0E01               	movlw	1
  2249   0019F2  6E05               	movwf	___awdiv@counter^0,c
  2250   0019F4  EF00  F00D         	goto	l1925
  2251   0019F8                     l1923:
  2252   0019F8  90D8               	bcf	status,0,c
  2253   0019FA  3603               	rlcf	___awdiv@divisor^0,f,c
  2254   0019FC  3604               	rlcf	(___awdiv@divisor+1)^0,f,c
  2255   0019FE  2A05               	incf	___awdiv@counter^0,f,c
  2256   001A00                     l1925:
  2257   001A00  AE04               	btfss	(___awdiv@divisor+1)^0,7,c
  2258   001A02  EF05  F00D         	goto	u1391
  2259   001A06  EF07  F00D         	goto	u1390
  2260   001A0A                     u1391:
  2261   001A0A  EFFC  F00C         	goto	l1923
  2262   001A0E                     u1390:
  2263   001A0E                     l1927:
  2264   001A0E  90D8               	bcf	status,0,c
  2265   001A10  3607               	rlcf	___awdiv@quotient^0,f,c
  2266   001A12  3608               	rlcf	(___awdiv@quotient+1)^0,f,c
  2267   001A14  5003               	movf	___awdiv@divisor^0,w,c
  2268   001A16  5C01               	subwf	___awdiv@dividend^0,w,c
  2269   001A18  5004               	movf	(___awdiv@divisor+1)^0,w,c
  2270   001A1A  5802               	subwfb	(___awdiv@dividend+1)^0,w,c
  2271   001A1C  A0D8               	btfss	status,0,c
  2272   001A1E  EF13  F00D         	goto	u1401
  2273   001A22  EF15  F00D         	goto	u1400
  2274   001A26                     u1401:
  2275   001A26  EF1A  F00D         	goto	l1935
  2276   001A2A                     u1400:
  2277   001A2A  5003               	movf	___awdiv@divisor^0,w,c
  2278   001A2C  5E01               	subwf	___awdiv@dividend^0,f,c
  2279   001A2E  5004               	movf	(___awdiv@divisor+1)^0,w,c
  2280   001A30  5A02               	subwfb	(___awdiv@dividend+1)^0,f,c
  2281   001A32  8007               	bsf	___awdiv@quotient^0,0,c
  2282   001A34                     l1935:
  2283   001A34  90D8               	bcf	status,0,c
  2284   001A36  3204               	rrcf	(___awdiv@divisor+1)^0,f,c
  2285   001A38  3203               	rrcf	___awdiv@divisor^0,f,c
  2286   001A3A  2E05               	decfsz	___awdiv@counter^0,f,c
  2287   001A3C  EF07  F00D         	goto	l1927
  2288   001A40                     l1939:
  2289   001A40  5006               	movf	___awdiv@sign^0,w,c
  2290   001A42  B4D8               	btfsc	status,2,c
  2291   001A44  EF26  F00D         	goto	u1411
  2292   001A48  EF28  F00D         	goto	u1410
  2293   001A4C                     u1411:
  2294   001A4C  EF2C  F00D         	goto	l1943
  2295   001A50                     u1410:
  2296   001A50  6C07               	negf	___awdiv@quotient^0,c
  2297   001A52  1E08               	comf	(___awdiv@quotient+1)^0,f,c
  2298   001A54  B0D8               	btfsc	status,0,c
  2299   001A56  2A08               	incf	(___awdiv@quotient+1)^0,f,c
  2300   001A58                     l1943:
  2301   001A58  C007  F001         	movff	___awdiv@quotient,?___awdiv
  2302   001A5C  C008  F002         	movff	___awdiv@quotient+1,?___awdiv+1
  2303   001A60  0012               	return		;funcret
  2304   001A62                     __end_of___awdiv:
  2305                           	callstack 0
  2306                           
  2307 ;; *************** function _UpdateClock *****************
  2308 ;; Defined at:
  2309 ;;		line 7 in file "clock.c"
  2310 ;; Parameters:    Size  Location     Type
  2311 ;;  seconds         1    6[COMRAM] PTR int 
  2312 ;;		 -> GLOBALsecs(2), 
  2313 ;;  minutes         1    7[COMRAM] PTR int 
  2314 ;;		 -> main@clock(16), 
  2315 ;;  hours           1    8[COMRAM] PTR int 
  2316 ;;		 -> main@clock(16), 
  2317 ;;  days            1    9[COMRAM] PTR int 
  2318 ;;		 -> main@clock(16), 
  2319 ;;  DoW             1   10[COMRAM] PTR int 
  2320 ;;		 -> main@clock(16), 
  2321 ;;  months          1   11[COMRAM] PTR int 
  2322 ;;		 -> main@clock(16), 
  2323 ;;  years           1   12[COMRAM] PTR int 
  2324 ;;		 -> main@clock(16), 
  2325 ;;  DSTstate        1   13[COMRAM] PTR int 
  2326 ;;		 -> main@clock(16), 
  2327 ;;  TestMode        2   14[COMRAM] int 
  2328 ;; Auto vars:     Size  Location     Type
  2329 ;;  DaysInMonth    24   22[COMRAM] int [12]
  2330 ;; Return value:  Size  Location     Type
  2331 ;;                  1    wreg      void 
  2332 ;; Registers used:
  2333 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2334 ;; Tracked objects:
  2335 ;;		On entry : 0/0
  2336 ;;		On exit  : 0/0
  2337 ;;		Unchanged: 0/0
  2338 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2339 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2340 ;;      Locals:        24       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2341 ;;      Temps:          6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2342 ;;      Totals:        40       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2343 ;;Total ram usage:       40 bytes
  2344 ;; Hardware stack levels used: 1
  2345 ;; Hardware stack levels required when called: 2
  2346 ;; This function calls:
  2347 ;;		___awmod
  2348 ;; This function is called by:
  2349 ;;		_main
  2350 ;; This function uses a non-reentrant model
  2351 ;;
  2352                           
  2353                           	psect	text13
  2354   000E46                     __ptext13:
  2355                           	callstack 0
  2356   000E46                     _UpdateClock:
  2357                           	callstack 28
  2358   000E46                     
  2359                           ;clock.c: 9:     int DaysInMonth[] = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
  2360   000E46  EE20  F0A6         	lfsr	2,UpdateClock@F14152
  2361   000E4A  EE10  F017         	lfsr	1,UpdateClock@DaysInMonth
  2362   000E4E  0E17               	movlw	23
  2363   000E50                     u1761:
  2364   000E50  CFDB FFE3          	movff	plusw2,plusw1
  2365   000E54  06E8               	decf	wreg,f,c
  2366   000E56  E2FC               	bc	u1761
  2367   000E58                     
  2368                           ;clock.c: 11:     if (TestMode == 1){
  2369   000E58  040F               	decf	UpdateClock@TestMode^0,w,c
  2370   000E5A  1010               	iorwf	(UpdateClock@TestMode+1)^0,w,c
  2371   000E5C  A4D8               	btfss	status,2,c
  2372   000E5E  EF33  F007         	goto	u1771
  2373   000E62  EF35  F007         	goto	u1770
  2374   000E66                     u1771:
  2375   000E66  EF57  F007         	goto	l2235
  2376   000E6A                     u1770:
  2377   000E6A                     
  2378                           ;clock.c: 12:        *hours = *seconds;
  2379   000E6A  5007               	movf	UpdateClock@seconds^0,w,c
  2380   000E6C  6ED9               	movwf	fsr2l,c
  2381   000E6E  6ADA               	clrf	fsr2h,c
  2382   000E70  5009               	movf	UpdateClock@hours^0,w,c
  2383   000E72  6EE1               	movwf	fsr1l,c
  2384   000E74  6AE2               	clrf	fsr1h,c
  2385   000E76  CFDE FFE6          	movff	postinc2,postinc1
  2386   000E7A  CFDD FFE5          	movff	postdec2,postdec1
  2387   000E7E                     
  2388                           ;clock.c: 13:         if (*seconds >= 24 ){
  2389   000E7E  5007               	movf	UpdateClock@seconds^0,w,c
  2390   000E80  6ED9               	movwf	fsr2l,c
  2391   000E82  6ADA               	clrf	fsr2h,c
  2392   000E84  0E01               	movlw	1
  2393   000E86  BEDB               	btfsc	plusw2,7,c
  2394   000E88  EF50  F007         	goto	u1781
  2395   000E8C  0E01               	movlw	1
  2396   000E8E  50DB               	movf	plusw2,w,c
  2397   000E90  E109               	bnz	u1780
  2398   000E92  0E18               	movlw	24
  2399   000E94  5CDE               	subwf	postinc2,w,c
  2400   000E96  A0D8               	btfss	status,0,c
  2401   000E98  EF50  F007         	goto	u1781
  2402   000E9C  EF52  F007         	goto	u1780
  2403   000EA0                     u1781:
  2404   000EA0  EF57  F007         	goto	l2235
  2405   000EA4                     u1780:
  2406   000EA4                     
  2407                           ;clock.c: 14:             *seconds = 0;
  2408   000EA4  5007               	movf	UpdateClock@seconds^0,w,c
  2409   000EA6  6ED9               	movwf	fsr2l,c
  2410   000EA8  6ADA               	clrf	fsr2h,c
  2411   000EAA  6ADE               	clrf	postinc2,c
  2412   000EAC  6ADD               	clrf	postdec2,c
  2413   000EAE                     l2235:
  2414                           
  2415                           ;clock.c: 18:     if (*seconds >= 60 ){
  2416   000EAE  5007               	movf	UpdateClock@seconds^0,w,c
  2417   000EB0  6ED9               	movwf	fsr2l,c
  2418   000EB2  6ADA               	clrf	fsr2h,c
  2419   000EB4  0E01               	movlw	1
  2420   000EB6  BEDB               	btfsc	plusw2,7,c
  2421   000EB8  EF68  F007         	goto	u1791
  2422   000EBC  0E01               	movlw	1
  2423   000EBE  50DB               	movf	plusw2,w,c
  2424   000EC0  E109               	bnz	u1790
  2425   000EC2  0E3C               	movlw	60
  2426   000EC4  5CDE               	subwf	postinc2,w,c
  2427   000EC6  A0D8               	btfss	status,0,c
  2428   000EC8  EF68  F007         	goto	u1791
  2429   000ECC  EF6A  F007         	goto	u1790
  2430   000ED0                     u1791:
  2431   000ED0  EF81  F007         	goto	l2241
  2432   000ED4                     u1790:
  2433   000ED4                     
  2434                           ;clock.c: 19:         *seconds = 0;
  2435   000ED4  5007               	movf	UpdateClock@seconds^0,w,c
  2436   000ED6  6ED9               	movwf	fsr2l,c
  2437   000ED8  6ADA               	clrf	fsr2h,c
  2438   000EDA  6ADE               	clrf	postinc2,c
  2439   000EDC  6ADD               	clrf	postdec2,c
  2440   000EDE                     
  2441                           ;clock.c: 20:         *minutes = *minutes + 1;
  2442   000EDE  5008               	movf	UpdateClock@minutes^0,w,c
  2443   000EE0  6ED9               	movwf	fsr2l,c
  2444   000EE2  6ADA               	clrf	fsr2h,c
  2445   000EE4  CFDE F011          	movff	postinc2,??_UpdateClock
  2446   000EE8  CFDD F012          	movff	postdec2,??_UpdateClock+1
  2447   000EEC  0E01               	movlw	1
  2448   000EEE  2611               	addwf	??_UpdateClock^0,f,c
  2449   000EF0  0E00               	movlw	0
  2450   000EF2  2212               	addwfc	(??_UpdateClock+1)^0,f,c
  2451   000EF4  5008               	movf	UpdateClock@minutes^0,w,c
  2452   000EF6  6ED9               	movwf	fsr2l,c
  2453   000EF8  6ADA               	clrf	fsr2h,c
  2454   000EFA  C011  FFDE         	movff	??_UpdateClock,postinc2
  2455   000EFE  C012  FFDD         	movff	??_UpdateClock+1,postdec2
  2456   000F02                     l2241:
  2457                           
  2458                           ;clock.c: 23:     if (*minutes >= 60){
  2459   000F02  5008               	movf	UpdateClock@minutes^0,w,c
  2460   000F04  6ED9               	movwf	fsr2l,c
  2461   000F06  6ADA               	clrf	fsr2h,c
  2462   000F08  0E01               	movlw	1
  2463   000F0A  BEDB               	btfsc	plusw2,7,c
  2464   000F0C  EF92  F007         	goto	u1801
  2465   000F10  0E01               	movlw	1
  2466   000F12  50DB               	movf	plusw2,w,c
  2467   000F14  E109               	bnz	u1800
  2468   000F16  0E3C               	movlw	60
  2469   000F18  5CDE               	subwf	postinc2,w,c
  2470   000F1A  A0D8               	btfss	status,0,c
  2471   000F1C  EF92  F007         	goto	u1801
  2472   000F20  EF94  F007         	goto	u1800
  2473   000F24                     u1801:
  2474   000F24  EFAB  F007         	goto	l2247
  2475   000F28                     u1800:
  2476   000F28                     
  2477                           ;clock.c: 24:         *minutes = 0;
  2478   000F28  5008               	movf	UpdateClock@minutes^0,w,c
  2479   000F2A  6ED9               	movwf	fsr2l,c
  2480   000F2C  6ADA               	clrf	fsr2h,c
  2481   000F2E  6ADE               	clrf	postinc2,c
  2482   000F30  6ADD               	clrf	postdec2,c
  2483   000F32                     
  2484                           ;clock.c: 25:         *hours = *hours + 1;
  2485   000F32  5009               	movf	UpdateClock@hours^0,w,c
  2486   000F34  6ED9               	movwf	fsr2l,c
  2487   000F36  6ADA               	clrf	fsr2h,c
  2488   000F38  CFDE F011          	movff	postinc2,??_UpdateClock
  2489   000F3C  CFDD F012          	movff	postdec2,??_UpdateClock+1
  2490   000F40  0E01               	movlw	1
  2491   000F42  2611               	addwf	??_UpdateClock^0,f,c
  2492   000F44  0E00               	movlw	0
  2493   000F46  2212               	addwfc	(??_UpdateClock+1)^0,f,c
  2494   000F48  5009               	movf	UpdateClock@hours^0,w,c
  2495   000F4A  6ED9               	movwf	fsr2l,c
  2496   000F4C  6ADA               	clrf	fsr2h,c
  2497   000F4E  C011  FFDE         	movff	??_UpdateClock,postinc2
  2498   000F52  C012  FFDD         	movff	??_UpdateClock+1,postdec2
  2499   000F56                     l2247:
  2500                           
  2501                           ;clock.c: 28:     if (*hours >= 24){
  2502   000F56  5009               	movf	UpdateClock@hours^0,w,c
  2503   000F58  6ED9               	movwf	fsr2l,c
  2504   000F5A  6ADA               	clrf	fsr2h,c
  2505   000F5C  0E01               	movlw	1
  2506   000F5E  BEDB               	btfsc	plusw2,7,c
  2507   000F60  EFBC  F007         	goto	u1811
  2508   000F64  0E01               	movlw	1
  2509   000F66  50DB               	movf	plusw2,w,c
  2510   000F68  E109               	bnz	u1810
  2511   000F6A  0E18               	movlw	24
  2512   000F6C  5CDE               	subwf	postinc2,w,c
  2513   000F6E  A0D8               	btfss	status,0,c
  2514   000F70  EFBC  F007         	goto	u1811
  2515   000F74  EFBE  F007         	goto	u1810
  2516   000F78                     u1811:
  2517   000F78  EFE7  F007         	goto	l2255
  2518   000F7C                     u1810:
  2519   000F7C                     
  2520                           ;clock.c: 29:         *hours = 0;
  2521   000F7C  5009               	movf	UpdateClock@hours^0,w,c
  2522   000F7E  6ED9               	movwf	fsr2l,c
  2523   000F80  6ADA               	clrf	fsr2h,c
  2524   000F82  6ADE               	clrf	postinc2,c
  2525   000F84  6ADD               	clrf	postdec2,c
  2526   000F86                     
  2527                           ;clock.c: 30:         *days = *days + 1;
  2528   000F86  500A               	movf	UpdateClock@days^0,w,c
  2529   000F88  6ED9               	movwf	fsr2l,c
  2530   000F8A  6ADA               	clrf	fsr2h,c
  2531   000F8C  CFDE F011          	movff	postinc2,??_UpdateClock
  2532   000F90  CFDD F012          	movff	postdec2,??_UpdateClock+1
  2533   000F94  0E01               	movlw	1
  2534   000F96  2611               	addwf	??_UpdateClock^0,f,c
  2535   000F98  0E00               	movlw	0
  2536   000F9A  2212               	addwfc	(??_UpdateClock+1)^0,f,c
  2537   000F9C  500A               	movf	UpdateClock@days^0,w,c
  2538   000F9E  6ED9               	movwf	fsr2l,c
  2539   000FA0  6ADA               	clrf	fsr2h,c
  2540   000FA2  C011  FFDE         	movff	??_UpdateClock,postinc2
  2541   000FA6  C012  FFDD         	movff	??_UpdateClock+1,postdec2
  2542   000FAA                     
  2543                           ;clock.c: 31:         *DoW = *DoW + 1;
  2544   000FAA  500B               	movf	UpdateClock@DoW^0,w,c
  2545   000FAC  6ED9               	movwf	fsr2l,c
  2546   000FAE  6ADA               	clrf	fsr2h,c
  2547   000FB0  CFDE F011          	movff	postinc2,??_UpdateClock
  2548   000FB4  CFDD F012          	movff	postdec2,??_UpdateClock+1
  2549   000FB8  0E01               	movlw	1
  2550   000FBA  2611               	addwf	??_UpdateClock^0,f,c
  2551   000FBC  0E00               	movlw	0
  2552   000FBE  2212               	addwfc	(??_UpdateClock+1)^0,f,c
  2553   000FC0  500B               	movf	UpdateClock@DoW^0,w,c
  2554   000FC2  6ED9               	movwf	fsr2l,c
  2555   000FC4  6ADA               	clrf	fsr2h,c
  2556   000FC6  C011  FFDE         	movff	??_UpdateClock,postinc2
  2557   000FCA  C012  FFDD         	movff	??_UpdateClock+1,postdec2
  2558   000FCE                     l2255:
  2559                           
  2560                           ;clock.c: 34:     if (*DoW >= 8){
  2561   000FCE  500B               	movf	UpdateClock@DoW^0,w,c
  2562   000FD0  6ED9               	movwf	fsr2l,c
  2563   000FD2  6ADA               	clrf	fsr2h,c
  2564   000FD4  0E01               	movlw	1
  2565   000FD6  BEDB               	btfsc	plusw2,7,c
  2566   000FD8  EFF8  F007         	goto	u1821
  2567   000FDC  0E01               	movlw	1
  2568   000FDE  50DB               	movf	plusw2,w,c
  2569   000FE0  E109               	bnz	u1820
  2570   000FE2  0E08               	movlw	8
  2571   000FE4  5CDE               	subwf	postinc2,w,c
  2572   000FE6  A0D8               	btfss	status,0,c
  2573   000FE8  EFF8  F007         	goto	u1821
  2574   000FEC  EFFA  F007         	goto	u1820
  2575   000FF0                     u1821:
  2576   000FF0  EF01  F008         	goto	l2259
  2577   000FF4                     u1820:
  2578   000FF4                     
  2579                           ;clock.c: 35:         *DoW = 1;
  2580   000FF4  500B               	movf	UpdateClock@DoW^0,w,c
  2581   000FF6  6ED9               	movwf	fsr2l,c
  2582   000FF8  6ADA               	clrf	fsr2h,c
  2583   000FFA  0E01               	movlw	1
  2584   000FFC  6EDE               	movwf	postinc2,c
  2585   000FFE  0E00               	movlw	0
  2586   001000  6EDD               	movwf	postdec2,c
  2587   001002                     l2259:
  2588                           
  2589                           ;clock.c: 38:     if((*DSTstate == 0) && (*months == 3) && (*days >= 25) && (*DoW == 7) 
      +                          && ( *hours >= 1) ){
  2590   001002  500E               	movf	UpdateClock@DSTstate^0,w,c
  2591   001004  6ED9               	movwf	fsr2l,c
  2592   001006  6ADA               	clrf	fsr2h,c
  2593   001008  50DE               	movf	postinc2,w,c
  2594   00100A  10DE               	iorwf	postinc2,w,c
  2595   00100C  A4D8               	btfss	status,2,c
  2596   00100E  EF0B  F008         	goto	u1831
  2597   001012  EF0D  F008         	goto	u1830
  2598   001016                     u1831:
  2599   001016  EF80  F008         	goto	l2277
  2600   00101A                     u1830:
  2601   00101A  500C               	movf	UpdateClock@months^0,w,c
  2602   00101C  6ED9               	movwf	fsr2l,c
  2603   00101E  6ADA               	clrf	fsr2h,c
  2604   001020  0E03               	movlw	3
  2605   001022  18DE               	xorwf	postinc2,w,c
  2606   001024  10DE               	iorwf	postinc2,w,c
  2607   001026  A4D8               	btfss	status,2,c
  2608   001028  EF18  F008         	goto	u1841
  2609   00102C  EF1A  F008         	goto	u1840
  2610   001030                     u1841:
  2611   001030  EF80  F008         	goto	l2277
  2612   001034                     u1840:
  2613   001034  500A               	movf	UpdateClock@days^0,w,c
  2614   001036  6ED9               	movwf	fsr2l,c
  2615   001038  6ADA               	clrf	fsr2h,c
  2616   00103A  0E01               	movlw	1
  2617   00103C  BEDB               	btfsc	plusw2,7,c
  2618   00103E  EF2B  F008         	goto	u1851
  2619   001042  0E01               	movlw	1
  2620   001044  50DB               	movf	plusw2,w,c
  2621   001046  E109               	bnz	u1850
  2622   001048  0E19               	movlw	25
  2623   00104A  5CDE               	subwf	postinc2,w,c
  2624   00104C  A0D8               	btfss	status,0,c
  2625   00104E  EF2B  F008         	goto	u1851
  2626   001052  EF2D  F008         	goto	u1850
  2627   001056                     u1851:
  2628   001056  EF80  F008         	goto	l2277
  2629   00105A                     u1850:
  2630   00105A  500B               	movf	UpdateClock@DoW^0,w,c
  2631   00105C  6ED9               	movwf	fsr2l,c
  2632   00105E  6ADA               	clrf	fsr2h,c
  2633   001060  0E07               	movlw	7
  2634   001062  18DE               	xorwf	postinc2,w,c
  2635   001064  10DE               	iorwf	postinc2,w,c
  2636   001066  A4D8               	btfss	status,2,c
  2637   001068  EF38  F008         	goto	u1861
  2638   00106C  EF3A  F008         	goto	u1860
  2639   001070                     u1861:
  2640   001070  EF80  F008         	goto	l2277
  2641   001074                     u1860:
  2642   001074  5009               	movf	UpdateClock@hours^0,w,c
  2643   001076  6ED9               	movwf	fsr2l,c
  2644   001078  6ADA               	clrf	fsr2h,c
  2645   00107A  0E01               	movlw	1
  2646   00107C  BEDB               	btfsc	plusw2,7,c
  2647   00107E  EF4A  F008         	goto	u1871
  2648   001082  0E01               	movlw	1
  2649   001084  50DB               	movf	plusw2,w,c
  2650   001086  E108               	bnz	u1870
  2651   001088  04DE               	decf	postinc2,w,c
  2652   00108A  A0D8               	btfss	status,0,c
  2653   00108C  EF4A  F008         	goto	u1871
  2654   001090  EF4C  F008         	goto	u1870
  2655   001094                     u1871:
  2656   001094  EF80  F008         	goto	l2277
  2657   001098                     u1870:
  2658   001098                     
  2659                           ;clock.c: 40:         *hours = *hours + 1;
  2660   001098  5009               	movf	UpdateClock@hours^0,w,c
  2661   00109A  6ED9               	movwf	fsr2l,c
  2662   00109C  6ADA               	clrf	fsr2h,c
  2663   00109E  CFDE F011          	movff	postinc2,??_UpdateClock
  2664   0010A2  CFDD F012          	movff	postdec2,??_UpdateClock+1
  2665   0010A6  0E01               	movlw	1
  2666   0010A8  2611               	addwf	??_UpdateClock^0,f,c
  2667   0010AA  0E00               	movlw	0
  2668   0010AC  2212               	addwfc	(??_UpdateClock+1)^0,f,c
  2669   0010AE  5009               	movf	UpdateClock@hours^0,w,c
  2670   0010B0  6ED9               	movwf	fsr2l,c
  2671   0010B2  6ADA               	clrf	fsr2h,c
  2672   0010B4  C011  FFDE         	movff	??_UpdateClock,postinc2
  2673   0010B8  C012  FFDD         	movff	??_UpdateClock+1,postdec2
  2674   0010BC                     
  2675                           ;clock.c: 41:         if (TestMode == 1){
  2676   0010BC  040F               	decf	UpdateClock@TestMode^0,w,c
  2677   0010BE  1010               	iorwf	(UpdateClock@TestMode+1)^0,w,c
  2678   0010C0  A4D8               	btfss	status,2,c
  2679   0010C2  EF65  F008         	goto	u1881
  2680   0010C6  EF67  F008         	goto	u1880
  2681   0010CA                     u1881:
  2682   0010CA  EF79  F008         	goto	l2275
  2683   0010CE                     u1880:
  2684   0010CE                     
  2685                           ;clock.c: 42:             *seconds = *seconds + 1;
  2686   0010CE  5007               	movf	UpdateClock@seconds^0,w,c
  2687   0010D0  6ED9               	movwf	fsr2l,c
  2688   0010D2  6ADA               	clrf	fsr2h,c
  2689   0010D4  CFDE F011          	movff	postinc2,??_UpdateClock
  2690   0010D8  CFDD F012          	movff	postdec2,??_UpdateClock+1
  2691   0010DC  0E01               	movlw	1
  2692   0010DE  2611               	addwf	??_UpdateClock^0,f,c
  2693   0010E0  0E00               	movlw	0
  2694   0010E2  2212               	addwfc	(??_UpdateClock+1)^0,f,c
  2695   0010E4  5007               	movf	UpdateClock@seconds^0,w,c
  2696   0010E6  6ED9               	movwf	fsr2l,c
  2697   0010E8  6ADA               	clrf	fsr2h,c
  2698   0010EA  C011  FFDE         	movff	??_UpdateClock,postinc2
  2699   0010EE  C012  FFDD         	movff	??_UpdateClock+1,postdec2
  2700   0010F2                     l2275:
  2701                           
  2702                           ;clock.c: 44:         *DSTstate = 1;
  2703   0010F2  500E               	movf	UpdateClock@DSTstate^0,w,c
  2704   0010F4  6ED9               	movwf	fsr2l,c
  2705   0010F6  6ADA               	clrf	fsr2h,c
  2706   0010F8  0E01               	movlw	1
  2707   0010FA  6EDE               	movwf	postinc2,c
  2708   0010FC  0E00               	movlw	0
  2709   0010FE  6EDD               	movwf	postdec2,c
  2710   001100                     l2277:
  2711                           
  2712                           ;clock.c: 48:     if((*DSTstate==1) && (*months == 10) && (*days >= 25) && (*DoW == 7) &
      +                          & (*hours == 2) ){
  2713   001100  500E               	movf	UpdateClock@DSTstate^0,w,c
  2714   001102  6ED9               	movwf	fsr2l,c
  2715   001104  6ADA               	clrf	fsr2h,c
  2716   001106  04DE               	decf	postinc2,w,c
  2717   001108  10DE               	iorwf	postinc2,w,c
  2718   00110A  A4D8               	btfss	status,2,c
  2719   00110C  EF8A  F008         	goto	u1891
  2720   001110  EF8C  F008         	goto	u1890
  2721   001114                     u1891:
  2722   001114  EFFC  F008         	goto	l2295
  2723   001118                     u1890:
  2724   001118  500C               	movf	UpdateClock@months^0,w,c
  2725   00111A  6ED9               	movwf	fsr2l,c
  2726   00111C  6ADA               	clrf	fsr2h,c
  2727   00111E  0E0A               	movlw	10
  2728   001120  18DE               	xorwf	postinc2,w,c
  2729   001122  10DE               	iorwf	postinc2,w,c
  2730   001124  A4D8               	btfss	status,2,c
  2731   001126  EF97  F008         	goto	u1901
  2732   00112A  EF99  F008         	goto	u1900
  2733   00112E                     u1901:
  2734   00112E  EFFC  F008         	goto	l2295
  2735   001132                     u1900:
  2736   001132  500A               	movf	UpdateClock@days^0,w,c
  2737   001134  6ED9               	movwf	fsr2l,c
  2738   001136  6ADA               	clrf	fsr2h,c
  2739   001138  0E01               	movlw	1
  2740   00113A  BEDB               	btfsc	plusw2,7,c
  2741   00113C  EFAA  F008         	goto	u1911
  2742   001140  0E01               	movlw	1
  2743   001142  50DB               	movf	plusw2,w,c
  2744   001144  E109               	bnz	u1910
  2745   001146  0E19               	movlw	25
  2746   001148  5CDE               	subwf	postinc2,w,c
  2747   00114A  A0D8               	btfss	status,0,c
  2748   00114C  EFAA  F008         	goto	u1911
  2749   001150  EFAC  F008         	goto	u1910
  2750   001154                     u1911:
  2751   001154  EFFC  F008         	goto	l2295
  2752   001158                     u1910:
  2753   001158  500B               	movf	UpdateClock@DoW^0,w,c
  2754   00115A  6ED9               	movwf	fsr2l,c
  2755   00115C  6ADA               	clrf	fsr2h,c
  2756   00115E  0E07               	movlw	7
  2757   001160  18DE               	xorwf	postinc2,w,c
  2758   001162  10DE               	iorwf	postinc2,w,c
  2759   001164  A4D8               	btfss	status,2,c
  2760   001166  EFB7  F008         	goto	u1921
  2761   00116A  EFB9  F008         	goto	u1920
  2762   00116E                     u1921:
  2763   00116E  EFFC  F008         	goto	l2295
  2764   001172                     u1920:
  2765   001172  5009               	movf	UpdateClock@hours^0,w,c
  2766   001174  6ED9               	movwf	fsr2l,c
  2767   001176  6ADA               	clrf	fsr2h,c
  2768   001178  0E02               	movlw	2
  2769   00117A  18DE               	xorwf	postinc2,w,c
  2770   00117C  10DE               	iorwf	postinc2,w,c
  2771   00117E  A4D8               	btfss	status,2,c
  2772   001180  EFC4  F008         	goto	u1931
  2773   001184  EFC6  F008         	goto	u1930
  2774   001188                     u1931:
  2775   001188  EFFC  F008         	goto	l2295
  2776   00118C                     u1930:
  2777   00118C                     
  2778                           ;clock.c: 49:         *hours = *hours - 1;
  2779   00118C  5009               	movf	UpdateClock@hours^0,w,c
  2780   00118E  6ED9               	movwf	fsr2l,c
  2781   001190  6ADA               	clrf	fsr2h,c
  2782   001192  CFDE F011          	movff	postinc2,??_UpdateClock
  2783   001196  CFDD F012          	movff	postdec2,??_UpdateClock+1
  2784   00119A  0EFF               	movlw	255
  2785   00119C  2411               	addwf	??_UpdateClock^0,w,c
  2786   00119E  6E13               	movwf	(??_UpdateClock+2)^0,c
  2787   0011A0  0EFF               	movlw	255
  2788   0011A2  2012               	addwfc	(??_UpdateClock+1)^0,w,c
  2789   0011A4  6E14               	movwf	(??_UpdateClock+3)^0,c
  2790   0011A6  5009               	movf	UpdateClock@hours^0,w,c
  2791   0011A8  6ED9               	movwf	fsr2l,c
  2792   0011AA  6ADA               	clrf	fsr2h,c
  2793   0011AC  C013  FFDE         	movff	??_UpdateClock+2,postinc2
  2794   0011B0  C014  FFDD         	movff	??_UpdateClock+3,postdec2
  2795   0011B4                     
  2796                           ;clock.c: 50:         if (TestMode == 1){
  2797   0011B4  040F               	decf	UpdateClock@TestMode^0,w,c
  2798   0011B6  1010               	iorwf	(UpdateClock@TestMode+1)^0,w,c
  2799   0011B8  A4D8               	btfss	status,2,c
  2800   0011BA  EFE1  F008         	goto	u1941
  2801   0011BE  EFE3  F008         	goto	u1940
  2802   0011C2                     u1941:
  2803   0011C2  EFF7  F008         	goto	l2293
  2804   0011C6                     u1940:
  2805   0011C6                     
  2806                           ;clock.c: 51:             *seconds = *seconds - 1;
  2807   0011C6  5007               	movf	UpdateClock@seconds^0,w,c
  2808   0011C8  6ED9               	movwf	fsr2l,c
  2809   0011CA  6ADA               	clrf	fsr2h,c
  2810   0011CC  CFDE F011          	movff	postinc2,??_UpdateClock
  2811   0011D0  CFDD F012          	movff	postdec2,??_UpdateClock+1
  2812   0011D4  0EFF               	movlw	255
  2813   0011D6  2411               	addwf	??_UpdateClock^0,w,c
  2814   0011D8  6E13               	movwf	(??_UpdateClock+2)^0,c
  2815   0011DA  0EFF               	movlw	255
  2816   0011DC  2012               	addwfc	(??_UpdateClock+1)^0,w,c
  2817   0011DE  6E14               	movwf	(??_UpdateClock+3)^0,c
  2818   0011E0  5007               	movf	UpdateClock@seconds^0,w,c
  2819   0011E2  6ED9               	movwf	fsr2l,c
  2820   0011E4  6ADA               	clrf	fsr2h,c
  2821   0011E6  C013  FFDE         	movff	??_UpdateClock+2,postinc2
  2822   0011EA  C014  FFDD         	movff	??_UpdateClock+3,postdec2
  2823   0011EE                     l2293:
  2824                           
  2825                           ;clock.c: 53:         *DSTstate = 0;
  2826   0011EE  500E               	movf	UpdateClock@DSTstate^0,w,c
  2827   0011F0  6ED9               	movwf	fsr2l,c
  2828   0011F2  6ADA               	clrf	fsr2h,c
  2829   0011F4  6ADE               	clrf	postinc2,c
  2830   0011F6  6ADD               	clrf	postdec2,c
  2831   0011F8                     l2295:
  2832                           
  2833                           ;clock.c: 57:     if ((*years)%4 == 0 && *months == 2){
  2834   0011F8  500D               	movf	UpdateClock@years^0,w,c
  2835   0011FA  6ED9               	movwf	fsr2l,c
  2836   0011FC  6ADA               	clrf	fsr2h,c
  2837   0011FE  CFDE F011          	movff	postinc2,??_UpdateClock
  2838   001202  CFDD F012          	movff	postdec2,??_UpdateClock+1
  2839   001206  0E03               	movlw	3
  2840   001208  1611               	andwf	??_UpdateClock^0,f,c
  2841   00120A  0E00               	movlw	0
  2842   00120C  1612               	andwf	(??_UpdateClock+1)^0,f,c
  2843   00120E  5011               	movf	??_UpdateClock^0,w,c
  2844   001210  1012               	iorwf	(??_UpdateClock+1)^0,w,c
  2845   001212  A4D8               	btfss	status,2,c
  2846   001214  EF0E  F009         	goto	u1951
  2847   001218  EF10  F009         	goto	u1950
  2848   00121C                     u1951:
  2849   00121C  EF21  F009         	goto	l2301
  2850   001220                     u1950:
  2851   001220  500C               	movf	UpdateClock@months^0,w,c
  2852   001222  6ED9               	movwf	fsr2l,c
  2853   001224  6ADA               	clrf	fsr2h,c
  2854   001226  0E02               	movlw	2
  2855   001228  18DE               	xorwf	postinc2,w,c
  2856   00122A  10DE               	iorwf	postinc2,w,c
  2857   00122C  A4D8               	btfss	status,2,c
  2858   00122E  EF1B  F009         	goto	u1961
  2859   001232  EF1D  F009         	goto	u1960
  2860   001236                     u1961:
  2861   001236  EF21  F009         	goto	l2301
  2862   00123A                     u1960:
  2863   00123A                     
  2864                           ;clock.c: 58:        DaysInMonth[1] = 29;
  2865   00123A  0E00               	movlw	0
  2866   00123C  6E1A               	movwf	(UpdateClock@DaysInMonth+3)^0,c
  2867   00123E  0E1D               	movlw	29
  2868   001240  6E19               	movwf	(UpdateClock@DaysInMonth+2)^0,c
  2869   001242                     l2301:
  2870                           
  2871                           ;clock.c: 62:     if (*years%100 == 0 && *months == 2 && *years%400 != 0){
  2872   001242  500D               	movf	UpdateClock@years^0,w,c
  2873   001244  6ED9               	movwf	fsr2l,c
  2874   001246  6ADA               	clrf	fsr2h,c
  2875   001248  CFDE F001          	movff	postinc2,___awmod@dividend
  2876   00124C  CFDD F002          	movff	postdec2,___awmod@dividend+1
  2877   001250  0E00               	movlw	0
  2878   001252  6E04               	movwf	(___awmod@divisor+1)^0,c
  2879   001254  0E64               	movlw	100
  2880   001256  6E03               	movwf	___awmod@divisor^0,c
  2881   001258  EC31  F00D         	call	___awmod	;wreg free
  2882   00125C  5001               	movf	?___awmod^0,w,c
  2883   00125E  1002               	iorwf	(?___awmod+1)^0,w,c
  2884   001260  A4D8               	btfss	status,2,c
  2885   001262  EF35  F009         	goto	u1971
  2886   001266  EF37  F009         	goto	u1970
  2887   00126A                     u1971:
  2888   00126A  EF5E  F009         	goto	l2309
  2889   00126E                     u1970:
  2890   00126E  500C               	movf	UpdateClock@months^0,w,c
  2891   001270  6ED9               	movwf	fsr2l,c
  2892   001272  6ADA               	clrf	fsr2h,c
  2893   001274  0E02               	movlw	2
  2894   001276  18DE               	xorwf	postinc2,w,c
  2895   001278  10DE               	iorwf	postinc2,w,c
  2896   00127A  A4D8               	btfss	status,2,c
  2897   00127C  EF42  F009         	goto	u1981
  2898   001280  EF44  F009         	goto	u1980
  2899   001284                     u1981:
  2900   001284  EF5E  F009         	goto	l2309
  2901   001288                     u1980:
  2902   001288  500D               	movf	UpdateClock@years^0,w,c
  2903   00128A  6ED9               	movwf	fsr2l,c
  2904   00128C  6ADA               	clrf	fsr2h,c
  2905   00128E  CFDE F001          	movff	postinc2,___awmod@dividend
  2906   001292  CFDD F002          	movff	postdec2,___awmod@dividend+1
  2907   001296  0E01               	movlw	1
  2908   001298  6E04               	movwf	(___awmod@divisor+1)^0,c
  2909   00129A  0E90               	movlw	144
  2910   00129C  6E03               	movwf	___awmod@divisor^0,c
  2911   00129E  EC31  F00D         	call	___awmod	;wreg free
  2912   0012A2  5001               	movf	?___awmod^0,w,c
  2913   0012A4  1002               	iorwf	(?___awmod+1)^0,w,c
  2914   0012A6  B4D8               	btfsc	status,2,c
  2915   0012A8  EF58  F009         	goto	u1991
  2916   0012AC  EF5A  F009         	goto	u1990
  2917   0012B0                     u1991:
  2918   0012B0  EF5E  F009         	goto	l2309
  2919   0012B4                     u1990:
  2920   0012B4                     
  2921                           ;clock.c: 63:             DaysInMonth[1] = 28;
  2922   0012B4  0E00               	movlw	0
  2923   0012B6  6E1A               	movwf	(UpdateClock@DaysInMonth+3)^0,c
  2924   0012B8  0E1C               	movlw	28
  2925   0012BA  6E19               	movwf	(UpdateClock@DaysInMonth+2)^0,c
  2926   0012BC                     l2309:
  2927                           
  2928                           ;clock.c: 67:     if (*days > (DaysInMonth[*months-1] ) ) {
  2929   0012BC  500A               	movf	UpdateClock@days^0,w,c
  2930   0012BE  6ED9               	movwf	fsr2l,c
  2931   0012C0  6ADA               	clrf	fsr2h,c
  2932   0012C2  500C               	movf	UpdateClock@months^0,w,c
  2933   0012C4  6EE1               	movwf	fsr1l,c
  2934   0012C6  6AE2               	clrf	fsr1h,c
  2935   0012C8  50E7               	movf	indf1,w,c
  2936   0012CA  0D02               	mullw	2
  2937   0012CC  CFF3 F013          	movff	prodl,??_UpdateClock+2
  2938   0012D0  0EFE               	movlw	254
  2939   0012D2  2613               	addwf	(??_UpdateClock+2)^0,f,c
  2940   0012D4  5013               	movf	(??_UpdateClock+2)^0,w,c
  2941   0012D6  0F17               	addlw	low UpdateClock@DaysInMonth
  2942   0012D8  6EE1               	movwf	fsr1l,c
  2943   0012DA  6AE2               	clrf	fsr1h,c
  2944   0012DC  50DE               	movf	postinc2,w,c
  2945   0012DE  5CE6               	subwf	postinc1,w,c
  2946   0012E0  50E6               	movf	postinc1,w,c
  2947   0012E2  0A80               	xorlw	128
  2948   0012E4  6E16               	movwf	(??_UpdateClock+5)^0,c
  2949   0012E6  50DE               	movf	postinc2,w,c
  2950   0012E8  0A80               	xorlw	128
  2951   0012EA  5816               	subwfb	(??_UpdateClock+5)^0,w,c
  2952   0012EC  B0D8               	btfsc	status,0,c
  2953   0012EE  EF7B  F009         	goto	u2001
  2954   0012F2  EF7D  F009         	goto	u2000
  2955   0012F6                     u2001:
  2956   0012F6  EFC2  F009         	goto	l253
  2957   0012FA                     u2000:
  2958   0012FA                     
  2959                           ;clock.c: 68:         *days = 1;
  2960   0012FA  500A               	movf	UpdateClock@days^0,w,c
  2961   0012FC  6ED9               	movwf	fsr2l,c
  2962   0012FE  6ADA               	clrf	fsr2h,c
  2963   001300  0E01               	movlw	1
  2964   001302  6EDE               	movwf	postinc2,c
  2965   001304  0E00               	movlw	0
  2966   001306  6EDD               	movwf	postdec2,c
  2967   001308                     
  2968                           ;clock.c: 69:         *months = *months + 1 ;
  2969   001308  500C               	movf	UpdateClock@months^0,w,c
  2970   00130A  6ED9               	movwf	fsr2l,c
  2971   00130C  6ADA               	clrf	fsr2h,c
  2972   00130E  CFDE F011          	movff	postinc2,??_UpdateClock
  2973   001312  CFDD F012          	movff	postdec2,??_UpdateClock+1
  2974   001316  0E01               	movlw	1
  2975   001318  2611               	addwf	??_UpdateClock^0,f,c
  2976   00131A  0E00               	movlw	0
  2977   00131C  2212               	addwfc	(??_UpdateClock+1)^0,f,c
  2978   00131E  500C               	movf	UpdateClock@months^0,w,c
  2979   001320  6ED9               	movwf	fsr2l,c
  2980   001322  6ADA               	clrf	fsr2h,c
  2981   001324  C011  FFDE         	movff	??_UpdateClock,postinc2
  2982   001328  C012  FFDD         	movff	??_UpdateClock+1,postdec2
  2983   00132C                     
  2984                           ;clock.c: 71:         if (*months >= 12+1) {
  2985   00132C  500C               	movf	UpdateClock@months^0,w,c
  2986   00132E  6ED9               	movwf	fsr2l,c
  2987   001330  6ADA               	clrf	fsr2h,c
  2988   001332  0E01               	movlw	1
  2989   001334  BEDB               	btfsc	plusw2,7,c
  2990   001336  EFA7  F009         	goto	u2011
  2991   00133A  0E01               	movlw	1
  2992   00133C  50DB               	movf	plusw2,w,c
  2993   00133E  E109               	bnz	u2010
  2994   001340  0E0D               	movlw	13
  2995   001342  5CDE               	subwf	postinc2,w,c
  2996   001344  A0D8               	btfss	status,0,c
  2997   001346  EFA7  F009         	goto	u2011
  2998   00134A  EFA9  F009         	goto	u2010
  2999   00134E                     u2011:
  3000   00134E  EFC2  F009         	goto	l253
  3001   001352                     u2010:
  3002   001352                     
  3003                           ;clock.c: 72:             *months = 1;
  3004   001352  500C               	movf	UpdateClock@months^0,w,c
  3005   001354  6ED9               	movwf	fsr2l,c
  3006   001356  6ADA               	clrf	fsr2h,c
  3007   001358  0E01               	movlw	1
  3008   00135A  6EDE               	movwf	postinc2,c
  3009   00135C  0E00               	movlw	0
  3010   00135E  6EDD               	movwf	postdec2,c
  3011   001360                     
  3012                           ;clock.c: 73:             *years = *years + 1;
  3013   001360  500D               	movf	UpdateClock@years^0,w,c
  3014   001362  6ED9               	movwf	fsr2l,c
  3015   001364  6ADA               	clrf	fsr2h,c
  3016   001366  CFDE F011          	movff	postinc2,??_UpdateClock
  3017   00136A  CFDD F012          	movff	postdec2,??_UpdateClock+1
  3018   00136E  0E01               	movlw	1
  3019   001370  2611               	addwf	??_UpdateClock^0,f,c
  3020   001372  0E00               	movlw	0
  3021   001374  2212               	addwfc	(??_UpdateClock+1)^0,f,c
  3022   001376  500D               	movf	UpdateClock@years^0,w,c
  3023   001378  6ED9               	movwf	fsr2l,c
  3024   00137A  6ADA               	clrf	fsr2h,c
  3025   00137C  C011  FFDE         	movff	??_UpdateClock,postinc2
  3026   001380  C012  FFDD         	movff	??_UpdateClock+1,postdec2
  3027   001384                     l253:
  3028   001384  0012               	return		;funcret
  3029   001386                     __end_of_UpdateClock:
  3030                           	callstack 0
  3031                           
  3032 ;; *************** function ___awmod *****************
  3033 ;; Defined at:
  3034 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\awmod.c"
  3035 ;; Parameters:    Size  Location     Type
  3036 ;;  dividend        2    0[COMRAM] int 
  3037 ;;  divisor         2    2[COMRAM] int 
  3038 ;; Auto vars:     Size  Location     Type
  3039 ;;  sign            1    5[COMRAM] unsigned char 
  3040 ;;  counter         1    4[COMRAM] unsigned char 
  3041 ;; Return value:  Size  Location     Type
  3042 ;;                  2    0[COMRAM] int 
  3043 ;; Registers used:
  3044 ;;		wreg, status,2, status,0
  3045 ;; Tracked objects:
  3046 ;;		On entry : 0/0
  3047 ;;		On exit  : 0/0
  3048 ;;		Unchanged: 0/0
  3049 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3050 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3051 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3052 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3053 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3054 ;;Total ram usage:        6 bytes
  3055 ;; Hardware stack levels used: 1
  3056 ;; Hardware stack levels required when called: 1
  3057 ;; This function calls:
  3058 ;;		Nothing
  3059 ;; This function is called by:
  3060 ;;		_UpdateClock
  3061 ;;		_dtoa
  3062 ;; This function uses a non-reentrant model
  3063 ;;
  3064                           
  3065                           	psect	text14
  3066   001A62                     __ptext14:
  3067                           	callstack 0
  3068   001A62                     ___awmod:
  3069                           	callstack 25
  3070   001A62  0E00               	movlw	0
  3071   001A64  6E06               	movwf	___awmod@sign^0,c
  3072   001A66  BE02               	btfsc	(___awmod@dividend+1)^0,7,c
  3073   001A68  EF3A  F00D         	goto	u1420
  3074   001A6C  EF38  F00D         	goto	u1421
  3075   001A70                     u1421:
  3076   001A70  EF40  F00D         	goto	l1955
  3077   001A74                     u1420:
  3078   001A74  6C01               	negf	___awmod@dividend^0,c
  3079   001A76  1E02               	comf	(___awmod@dividend+1)^0,f,c
  3080   001A78  B0D8               	btfsc	status,0,c
  3081   001A7A  2A02               	incf	(___awmod@dividend+1)^0,f,c
  3082   001A7C  0E01               	movlw	1
  3083   001A7E  6E06               	movwf	___awmod@sign^0,c
  3084   001A80                     l1955:
  3085   001A80  BE04               	btfsc	(___awmod@divisor+1)^0,7,c
  3086   001A82  EF47  F00D         	goto	u1430
  3087   001A86  EF45  F00D         	goto	u1431
  3088   001A8A                     u1431:
  3089   001A8A  EF4B  F00D         	goto	l1959
  3090   001A8E                     u1430:
  3091   001A8E  6C03               	negf	___awmod@divisor^0,c
  3092   001A90  1E04               	comf	(___awmod@divisor+1)^0,f,c
  3093   001A92  B0D8               	btfsc	status,0,c
  3094   001A94  2A04               	incf	(___awmod@divisor+1)^0,f,c
  3095   001A96                     l1959:
  3096   001A96  5003               	movf	___awmod@divisor^0,w,c
  3097   001A98  1004               	iorwf	(___awmod@divisor+1)^0,w,c
  3098   001A9A  B4D8               	btfsc	status,2,c
  3099   001A9C  EF52  F00D         	goto	u1441
  3100   001AA0  EF54  F00D         	goto	u1440
  3101   001AA4                     u1441:
  3102   001AA4  EF78  F00D         	goto	l1975
  3103   001AA8                     u1440:
  3104   001AA8  0E01               	movlw	1
  3105   001AAA  6E05               	movwf	___awmod@counter^0,c
  3106   001AAC  EF5C  F00D         	goto	l1965
  3107   001AB0                     l1963:
  3108   001AB0  90D8               	bcf	status,0,c
  3109   001AB2  3603               	rlcf	___awmod@divisor^0,f,c
  3110   001AB4  3604               	rlcf	(___awmod@divisor+1)^0,f,c
  3111   001AB6  2A05               	incf	___awmod@counter^0,f,c
  3112   001AB8                     l1965:
  3113   001AB8  AE04               	btfss	(___awmod@divisor+1)^0,7,c
  3114   001ABA  EF61  F00D         	goto	u1451
  3115   001ABE  EF63  F00D         	goto	u1450
  3116   001AC2                     u1451:
  3117   001AC2  EF58  F00D         	goto	l1963
  3118   001AC6                     u1450:
  3119   001AC6                     l1967:
  3120   001AC6  5003               	movf	___awmod@divisor^0,w,c
  3121   001AC8  5C01               	subwf	___awmod@dividend^0,w,c
  3122   001ACA  5004               	movf	(___awmod@divisor+1)^0,w,c
  3123   001ACC  5802               	subwfb	(___awmod@dividend+1)^0,w,c
  3124   001ACE  A0D8               	btfss	status,0,c
  3125   001AD0  EF6C  F00D         	goto	u1461
  3126   001AD4  EF6E  F00D         	goto	u1460
  3127   001AD8                     u1461:
  3128   001AD8  EF72  F00D         	goto	l1971
  3129   001ADC                     u1460:
  3130   001ADC  5003               	movf	___awmod@divisor^0,w,c
  3131   001ADE  5E01               	subwf	___awmod@dividend^0,f,c
  3132   001AE0  5004               	movf	(___awmod@divisor+1)^0,w,c
  3133   001AE2  5A02               	subwfb	(___awmod@dividend+1)^0,f,c
  3134   001AE4                     l1971:
  3135   001AE4  90D8               	bcf	status,0,c
  3136   001AE6  3204               	rrcf	(___awmod@divisor+1)^0,f,c
  3137   001AE8  3203               	rrcf	___awmod@divisor^0,f,c
  3138   001AEA  2E05               	decfsz	___awmod@counter^0,f,c
  3139   001AEC  EF63  F00D         	goto	l1967
  3140   001AF0                     l1975:
  3141   001AF0  5006               	movf	___awmod@sign^0,w,c
  3142   001AF2  B4D8               	btfsc	status,2,c
  3143   001AF4  EF7E  F00D         	goto	u1471
  3144   001AF8  EF80  F00D         	goto	u1470
  3145   001AFC                     u1471:
  3146   001AFC  EF84  F00D         	goto	l1979
  3147   001B00                     u1470:
  3148   001B00  6C01               	negf	___awmod@dividend^0,c
  3149   001B02  1E02               	comf	(___awmod@dividend+1)^0,f,c
  3150   001B04  B0D8               	btfsc	status,0,c
  3151   001B06  2A02               	incf	(___awmod@dividend+1)^0,f,c
  3152   001B08                     l1979:
  3153   001B08  C001  F001         	movff	___awmod@dividend,?___awmod
  3154   001B0C  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
  3155   001B10  0012               	return		;funcret
  3156   001B12                     __end_of___awmod:
  3157                           	callstack 0
  3158                           
  3159 ;; *************** function _Timer0_init *****************
  3160 ;; Defined at:
  3161 ;;		line 8 in file "timers.c"
  3162 ;; Parameters:    Size  Location     Type
  3163 ;;		None
  3164 ;; Auto vars:     Size  Location     Type
  3165 ;;		None
  3166 ;; Return value:  Size  Location     Type
  3167 ;;                  1    wreg      void 
  3168 ;; Registers used:
  3169 ;;		wreg, status,2
  3170 ;; Tracked objects:
  3171 ;;		On entry : 0/0
  3172 ;;		On exit  : 0/0
  3173 ;;		Unchanged: 0/0
  3174 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3175 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3176 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3177 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3178 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3179 ;;Total ram usage:        0 bytes
  3180 ;; Hardware stack levels used: 1
  3181 ;; Hardware stack levels required when called: 1
  3182 ;; This function calls:
  3183 ;;		Nothing
  3184 ;; This function is called by:
  3185 ;;		_main
  3186 ;; This function uses a non-reentrant model
  3187 ;;
  3188                           
  3189                           	psect	text15
  3190   001F5A                     __ptext15:
  3191                           	callstack 0
  3192   001F5A                     _Timer0_init:
  3193                           	callstack 29
  3194   001F5A                     
  3195                           ;timers.c: 10:     T0CON1bits.T0CS=0b010;
  3196   001F5A  50D6               	movf	214,w,c	;volatile
  3197   001F5C  0B1F               	andlw	-225
  3198   001F5E  0940               	iorlw	64
  3199   001F60  6ED6               	movwf	214,c	;volatile
  3200   001F62                     
  3201                           ;timers.c: 11:     T0CON1bits.T0ASYNC=1;
  3202   001F62  88D6               	bsf	214,4,c	;volatile
  3203                           
  3204                           ;timers.c: 13:     T0CON1bits.T0CKPS=0b1000;
  3205   001F64  50D6               	movf	214,w,c	;volatile
  3206   001F66  0BF0               	andlw	-16
  3207   001F68  0908               	iorlw	8
  3208   001F6A  6ED6               	movwf	214,c	;volatile
  3209   001F6C                     
  3210                           ;timers.c: 15:     T0CON0bits.T016BIT=1;
  3211   001F6C  88D5               	bsf	213,4,c	;volatile
  3212                           
  3213                           ;timers.c: 18:     TMR0H = 0b00001011;
  3214   001F6E  0E0B               	movlw	11
  3215   001F70  6ED4               	movwf	212,c	;volatile
  3216                           
  3217                           ;timers.c: 19:     TMR0L = 0b11011100;
  3218   001F72  0EDC               	movlw	220
  3219   001F74  6ED3               	movwf	211,c	;volatile
  3220   001F76                     
  3221                           ;timers.c: 35:     T0CON0bits.T0EN=1;
  3222   001F76  8ED5               	bsf	213,7,c	;volatile
  3223   001F78  0012               	return		;funcret
  3224   001F7A                     __end_of_Timer0_init:
  3225                           	callstack 0
  3226                           
  3227 ;; *************** function _LEDarray_init *****************
  3228 ;; Defined at:
  3229 ;;		line 8 in file "LEDarray.c"
  3230 ;; Parameters:    Size  Location     Type
  3231 ;;		None
  3232 ;; Auto vars:     Size  Location     Type
  3233 ;;		None
  3234 ;; Return value:  Size  Location     Type
  3235 ;;                  1    wreg      void 
  3236 ;; Registers used:
  3237 ;;		None
  3238 ;; Tracked objects:
  3239 ;;		On entry : 0/0
  3240 ;;		On exit  : 0/0
  3241 ;;		Unchanged: 0/0
  3242 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3243 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3244 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3245 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3246 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3247 ;;Total ram usage:        0 bytes
  3248 ;; Hardware stack levels used: 1
  3249 ;; Hardware stack levels required when called: 1
  3250 ;; This function calls:
  3251 ;;		Nothing
  3252 ;; This function is called by:
  3253 ;;		_main
  3254 ;; This function uses a non-reentrant model
  3255 ;;
  3256                           
  3257                           	psect	text16
  3258   001F10                     __ptext16:
  3259                           	callstack 0
  3260   001F10                     _LEDarray_init:
  3261                           	callstack 29
  3262   001F10                     
  3263                           ;LEDarray.c: 16:     TRISGbits.TRISG0 = 0;
  3264   001F10  9087               	bcf	135,0,c	;volatile
  3265                           
  3266                           ;LEDarray.c: 17:     LATGbits.LATG0 = 0;
  3267   001F12  907F               	bcf	127,0,c	;volatile
  3268                           
  3269                           ;LEDarray.c: 19:     TRISGbits.TRISG1 = 0;
  3270   001F14  9287               	bcf	135,1,c	;volatile
  3271                           
  3272                           ;LEDarray.c: 20:     LATGbits.LATG1 = 0;
  3273   001F16  927F               	bcf	127,1,c	;volatile
  3274                           
  3275                           ;LEDarray.c: 22:     TRISAbits.TRISA2 = 0;
  3276   001F18  9481               	bcf	129,2,c	;volatile
  3277                           
  3278                           ;LEDarray.c: 23:     LATAbits.LATA2 = 0;
  3279   001F1A  9479               	bcf	121,2,c	;volatile
  3280                           
  3281                           ;LEDarray.c: 25:     TRISFbits.TRISF6 = 0;
  3282   001F1C  9C86               	bcf	134,6,c	;volatile
  3283                           
  3284                           ;LEDarray.c: 26:     LATFbits.LATF6 = 0;
  3285   001F1E  9C7E               	bcf	126,6,c	;volatile
  3286                           
  3287                           ;LEDarray.c: 28:     TRISAbits.TRISA4 = 0;
  3288   001F20  9881               	bcf	129,4,c	;volatile
  3289                           
  3290                           ;LEDarray.c: 29:     LATAbits.LATA4 = 0;
  3291   001F22  9879               	bcf	121,4,c	;volatile
  3292                           
  3293                           ;LEDarray.c: 31:     TRISAbits.TRISA5 = 0;
  3294   001F24  9A81               	bcf	129,5,c	;volatile
  3295                           
  3296                           ;LEDarray.c: 32:     LATAbits.LATA5 = 0;
  3297   001F26  9A79               	bcf	121,5,c	;volatile
  3298                           
  3299                           ;LEDarray.c: 34:     TRISFbits.TRISF0 = 0;
  3300   001F28  9086               	bcf	134,0,c	;volatile
  3301                           
  3302                           ;LEDarray.c: 35:     LATFbits.LATF0 = 0;
  3303   001F2A  907E               	bcf	126,0,c	;volatile
  3304                           
  3305                           ;LEDarray.c: 37:     TRISBbits.TRISB0 = 0;
  3306   001F2C  9082               	bcf	130,0,c	;volatile
  3307                           
  3308                           ;LEDarray.c: 38:     LATBbits.LATB0 = 0;
  3309   001F2E  907A               	bcf	122,0,c	;volatile
  3310                           
  3311                           ;LEDarray.c: 40:     TRISBbits.TRISB1 = 0;
  3312   001F30  9282               	bcf	130,1,c	;volatile
  3313                           
  3314                           ;LEDarray.c: 41:     LATBbits.LATB1 = 0;
  3315   001F32  927A               	bcf	122,1,c	;volatile
  3316   001F34  0012               	return		;funcret
  3317   001F36                     __end_of_LEDarray_init:
  3318                           	callstack 0
  3319                           
  3320 ;; *************** function _LEDarray_disp_bin *****************
  3321 ;; Defined at:
  3322 ;;		line 49 in file "LEDarray.c"
  3323 ;; Parameters:    Size  Location     Type
  3324 ;;  number          2    0[COMRAM] unsigned int 
  3325 ;; Auto vars:     Size  Location     Type
  3326 ;;		None
  3327 ;; Return value:  Size  Location     Type
  3328 ;;                  1    wreg      void 
  3329 ;; Registers used:
  3330 ;;		None
  3331 ;; Tracked objects:
  3332 ;;		On entry : 0/0
  3333 ;;		On exit  : 0/0
  3334 ;;		Unchanged: 0/0
  3335 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3336 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3337 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3338 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3339 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3340 ;;Total ram usage:        2 bytes
  3341 ;; Hardware stack levels used: 1
  3342 ;; Hardware stack levels required when called: 1
  3343 ;; This function calls:
  3344 ;;		Nothing
  3345 ;; This function is called by:
  3346 ;;		_main
  3347 ;; This function uses a non-reentrant model
  3348 ;;
  3349                           
  3350                           	psect	text17
  3351   0018D6                     __ptext17:
  3352                           	callstack 0
  3353   0018D6                     _LEDarray_disp_bin:
  3354                           	callstack 29
  3355   0018D6                     
  3356                           ;LEDarray.c: 49: void LEDarray_disp_bin(unsigned int number);LEDarray.c: 50: {;LEDarray.
      +                          c: 53:     if (number & 0b000000001){ LATGbits.LATG0 = 1 ; }
  3357   0018D6  A001               	btfss	LEDarray_disp_bin@number^0,0,c
  3358   0018D8  EF70  F00C         	goto	u2021
  3359   0018DC  EF72  F00C         	goto	u2020
  3360   0018E0                     u2021:
  3361   0018E0  EF75  F00C         	goto	l121
  3362   0018E4                     u2020:
  3363   0018E4  807F               	bsf	127,0,c	;volatile
  3364   0018E6  EF76  F00C         	goto	l122
  3365   0018EA                     l121:
  3366   0018EA  907F               	bcf	127,0,c	;volatile
  3367   0018EC                     l122:
  3368                           
  3369                           ;LEDarray.c: 56:     if (number & 0b000000010){ LATGbits.LATG1 = 1 ; }
  3370   0018EC  A201               	btfss	LEDarray_disp_bin@number^0,1,c
  3371   0018EE  EF7B  F00C         	goto	u2031
  3372   0018F2  EF7D  F00C         	goto	u2030
  3373   0018F6                     u2031:
  3374   0018F6  EF80  F00C         	goto	l123
  3375   0018FA                     u2030:
  3376   0018FA  827F               	bsf	127,1,c	;volatile
  3377   0018FC  EF81  F00C         	goto	l124
  3378   001900                     l123:
  3379   001900  927F               	bcf	127,1,c	;volatile
  3380   001902                     l124:
  3381                           
  3382                           ;LEDarray.c: 59:     if (number & 0b000000100){ LATAbits.LATA2 = 1 ; }
  3383   001902  A401               	btfss	LEDarray_disp_bin@number^0,2,c
  3384   001904  EF86  F00C         	goto	u2041
  3385   001908  EF88  F00C         	goto	u2040
  3386   00190C                     u2041:
  3387   00190C  EF8B  F00C         	goto	l125
  3388   001910                     u2040:
  3389   001910  8479               	bsf	121,2,c	;volatile
  3390   001912  EF8C  F00C         	goto	l126
  3391   001916                     l125:
  3392   001916  9479               	bcf	121,2,c	;volatile
  3393   001918                     l126:
  3394                           
  3395                           ;LEDarray.c: 62:     if (number & 0b000001000){ LATFbits.LATF6 = 1 ; }
  3396   001918  A601               	btfss	LEDarray_disp_bin@number^0,3,c
  3397   00191A  EF91  F00C         	goto	u2051
  3398   00191E  EF93  F00C         	goto	u2050
  3399   001922                     u2051:
  3400   001922  EF96  F00C         	goto	l127
  3401   001926                     u2050:
  3402   001926  8C7E               	bsf	126,6,c	;volatile
  3403   001928  EF97  F00C         	goto	l128
  3404   00192C                     l127:
  3405   00192C  9C7E               	bcf	126,6,c	;volatile
  3406   00192E                     l128:
  3407                           
  3408                           ;LEDarray.c: 65:     if (number & 0b000010000){ LATAbits.LATA4 = 1 ; }
  3409   00192E  A801               	btfss	LEDarray_disp_bin@number^0,4,c
  3410   001930  EF9C  F00C         	goto	u2061
  3411   001934  EF9E  F00C         	goto	u2060
  3412   001938                     u2061:
  3413   001938  EFA1  F00C         	goto	l129
  3414   00193C                     u2060:
  3415   00193C  8879               	bsf	121,4,c	;volatile
  3416   00193E  EFA2  F00C         	goto	l130
  3417   001942                     l129:
  3418   001942  9879               	bcf	121,4,c	;volatile
  3419   001944                     l130:
  3420                           
  3421                           ;LEDarray.c: 68:     if (number & 0b000100000){ LATAbits.LATA5 = 1 ; }
  3422   001944  AA01               	btfss	LEDarray_disp_bin@number^0,5,c
  3423   001946  EFA7  F00C         	goto	u2071
  3424   00194A  EFA9  F00C         	goto	u2070
  3425   00194E                     u2071:
  3426   00194E  EFAC  F00C         	goto	l131
  3427   001952                     u2070:
  3428   001952  8A79               	bsf	121,5,c	;volatile
  3429   001954  EFAD  F00C         	goto	l132
  3430   001958                     l131:
  3431   001958  9A79               	bcf	121,5,c	;volatile
  3432   00195A                     l132:
  3433                           
  3434                           ;LEDarray.c: 71:     if (number & 0b001000000){ LATFbits.LATF0 = 1 ; }
  3435   00195A  AC01               	btfss	LEDarray_disp_bin@number^0,6,c
  3436   00195C  EFB2  F00C         	goto	u2081
  3437   001960  EFB4  F00C         	goto	u2080
  3438   001964                     u2081:
  3439   001964  EFB7  F00C         	goto	l133
  3440   001968                     u2080:
  3441   001968  807E               	bsf	126,0,c	;volatile
  3442   00196A  EFB8  F00C         	goto	l134
  3443   00196E                     l133:
  3444   00196E  907E               	bcf	126,0,c	;volatile
  3445   001970                     l134:
  3446                           
  3447                           ;LEDarray.c: 74:     if (number & 0b010000000){ LATBbits.LATB0 = 1 ; }
  3448   001970  AE01               	btfss	LEDarray_disp_bin@number^0,7,c
  3449   001972  EFBD  F00C         	goto	u2091
  3450   001976  EFBF  F00C         	goto	u2090
  3451   00197A                     u2091:
  3452   00197A  EFC2  F00C         	goto	l135
  3453   00197E                     u2090:
  3454   00197E  807A               	bsf	122,0,c	;volatile
  3455   001980  EFC3  F00C         	goto	l136
  3456   001984                     l135:
  3457   001984  907A               	bcf	122,0,c	;volatile
  3458   001986                     l136:
  3459                           
  3460                           ;LEDarray.c: 77:     if (number & 0b100000000){ LATBbits.LATB1 = 1 ; }
  3461   001986  A002               	btfss	(LEDarray_disp_bin@number+1)^0,0,c
  3462   001988  EFC8  F00C         	goto	u2101
  3463   00198C  EFCA  F00C         	goto	u2100
  3464   001990                     u2101:
  3465   001990  EFCD  F00C         	goto	l137
  3466   001994                     u2100:
  3467   001994  827A               	bsf	122,1,c	;volatile
  3468   001996  EFCE  F00C         	goto	l139
  3469   00199A                     l137:
  3470   00199A  927A               	bcf	122,1,c	;volatile
  3471   00199C                     l139:
  3472   00199C  0012               	return		;funcret
  3473   00199E                     __end_of_LEDarray_disp_bin:
  3474                           	callstack 0
  3475                           
  3476 ;; *************** function _LCD_setline *****************
  3477 ;; Defined at:
  3478 ;;		line 120 in file "LCD.c"
  3479 ;; Parameters:    Size  Location     Type
  3480 ;;  line            1    wreg     unsigned char 
  3481 ;; Auto vars:     Size  Location     Type
  3482 ;;  line            1    3[COMRAM] unsigned char 
  3483 ;; Return value:  Size  Location     Type
  3484 ;;                  1    wreg      void 
  3485 ;; Registers used:
  3486 ;;		wreg, status,2, status,0, cstack
  3487 ;; Tracked objects:
  3488 ;;		On entry : 0/0
  3489 ;;		On exit  : 0/0
  3490 ;;		Unchanged: 0/0
  3491 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3492 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3493 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3494 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3495 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3496 ;;Total ram usage:        1 bytes
  3497 ;; Hardware stack levels used: 1
  3498 ;; Hardware stack levels required when called: 4
  3499 ;; This function calls:
  3500 ;;		_LCD_sendbyte
  3501 ;; This function is called by:
  3502 ;;		_main
  3503 ;; This function uses a non-reentrant model
  3504 ;;
  3505                           
  3506                           	psect	text18
  3507   001E1A                     __ptext18:
  3508                           	callstack 0
  3509   001E1A                     _LCD_setline:
  3510                           	callstack 26
  3511                           
  3512                           ;incstack = 0
  3513                           ;LCD_setline@line stored from wreg
  3514   001E1A  6E04               	movwf	LCD_setline@line^0,c
  3515   001E1C                     
  3516                           ;LCD.c: 120: void LCD_setline (char line);LCD.c: 121: {;LCD.c: 124:     if (line == 2){
  3517   001E1C  0E02               	movlw	2
  3518   001E1E  1804               	xorwf	LCD_setline@line^0,w,c
  3519   001E20  A4D8               	btfss	status,2,c
  3520   001E22  EF15  F00F         	goto	u2111
  3521   001E26  EF17  F00F         	goto	u2110
  3522   001E2A                     u2111:
  3523   001E2A  EF1C  F00F         	goto	l2345
  3524   001E2E                     u2110:
  3525   001E2E                     
  3526                           ;LCD.c: 125:         LCD_sendbyte(0xC0,0);
  3527   001E2E  0E00               	movlw	0
  3528   001E30  6E02               	movwf	LCD_sendbyte@type^0,c
  3529   001E32  0EC0               	movlw	192
  3530   001E34  EC9B  F00F         	call	_LCD_sendbyte
  3531   001E38                     l2345:
  3532                           
  3533                           ;LCD.c: 128:     if (line==1){
  3534   001E38  0404               	decf	LCD_setline@line^0,w,c
  3535   001E3A  A4D8               	btfss	status,2,c
  3536   001E3C  EF22  F00F         	goto	u2121
  3537   001E40  EF24  F00F         	goto	u2120
  3538   001E44                     u2121:
  3539   001E44  EF29  F00F         	goto	l294
  3540   001E48                     u2120:
  3541   001E48                     
  3542                           ;LCD.c: 129:         LCD_sendbyte(0x80,0);
  3543   001E48  0E00               	movlw	0
  3544   001E4A  6E02               	movwf	LCD_sendbyte@type^0,c
  3545   001E4C  0E80               	movlw	128
  3546   001E4E  EC9B  F00F         	call	_LCD_sendbyte
  3547   001E52                     l294:
  3548   001E52  0012               	return		;funcret
  3549   001E54                     __end_of_LCD_setline:
  3550                           	callstack 0
  3551                           
  3552 ;; *************** function _LCD_sendstring *****************
  3553 ;; Defined at:
  3554 ;;		line 136 in file "LCD.c"
  3555 ;; Parameters:    Size  Location     Type
  3556 ;;  string          1    3[COMRAM] PTR unsigned char 
  3557 ;;		 -> main@buffer(18), 
  3558 ;; Auto vars:     Size  Location     Type
  3559 ;;		None
  3560 ;; Return value:  Size  Location     Type
  3561 ;;                  1    wreg      void 
  3562 ;; Registers used:
  3563 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3564 ;; Tracked objects:
  3565 ;;		On entry : 0/0
  3566 ;;		On exit  : 0/0
  3567 ;;		Unchanged: 0/0
  3568 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3569 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3570 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3571 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3572 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3573 ;;Total ram usage:        1 bytes
  3574 ;; Hardware stack levels used: 1
  3575 ;; Hardware stack levels required when called: 4
  3576 ;; This function calls:
  3577 ;;		_LCD_sendbyte
  3578 ;; This function is called by:
  3579 ;;		_main
  3580 ;;		_ADC2String
  3581 ;; This function uses a non-reentrant model
  3582 ;;
  3583                           
  3584                           	psect	text19
  3585   001EBC                     __ptext19:
  3586                           	callstack 0
  3587   001EBC                     _LCD_sendstring:
  3588                           	callstack 26
  3589   001EBC                     
  3590                           ;LCD.c: 136: void LCD_sendstring(char *string);LCD.c: 137: {;LCD.c: 139:     while(*stri
      +                          ng != 0){
  3591   001EBC  EF69  F00F         	goto	l2367
  3592   001EC0                     l2363:
  3593                           
  3594                           ;LCD.c: 140:   LCD_sendbyte(*string++,1);
  3595   001EC0  0E01               	movlw	1
  3596   001EC2  6E02               	movwf	LCD_sendbyte@type^0,c
  3597   001EC4  5004               	movf	LCD_sendstring@string^0,w,c
  3598   001EC6  6ED9               	movwf	fsr2l,c
  3599   001EC8  6ADA               	clrf	fsr2h,c
  3600   001ECA  50DF               	movf	indf2,w,c
  3601   001ECC  EC9B  F00F         	call	_LCD_sendbyte
  3602   001ED0  2A04               	incf	LCD_sendstring@string^0,f,c
  3603   001ED2                     l2367:
  3604                           
  3605                           ;LCD.c: 139:     while(*string != 0){
  3606   001ED2  5004               	movf	LCD_sendstring@string^0,w,c
  3607   001ED4  6ED9               	movwf	fsr2l,c
  3608   001ED6  6ADA               	clrf	fsr2h,c
  3609   001ED8  50DF               	movf	indf2,w,c
  3610   001EDA  A4D8               	btfss	status,2,c
  3611   001EDC  EF72  F00F         	goto	u2131
  3612   001EE0  EF74  F00F         	goto	u2130
  3613   001EE4                     u2131:
  3614   001EE4  EF60  F00F         	goto	l2363
  3615   001EE8                     u2130:
  3616   001EE8  0012               	return		;funcret
  3617   001EEA                     __end_of_LCD_sendstring:
  3618                           	callstack 0
  3619                           
  3620 ;; *************** function _LCD_Init *****************
  3621 ;; Defined at:
  3622 ;;		line 57 in file "LCD.c"
  3623 ;; Parameters:    Size  Location     Type
  3624 ;;		None
  3625 ;; Auto vars:     Size  Location     Type
  3626 ;;		None
  3627 ;; Return value:  Size  Location     Type
  3628 ;;                  1    wreg      void 
  3629 ;; Registers used:
  3630 ;;		wreg, status,2, status,0, cstack
  3631 ;; Tracked objects:
  3632 ;;		On entry : 0/0
  3633 ;;		On exit  : 0/0
  3634 ;;		Unchanged: 0/0
  3635 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3636 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3637 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3638 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3639 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3640 ;;Total ram usage:        2 bytes
  3641 ;; Hardware stack levels used: 1
  3642 ;; Hardware stack levels required when called: 4
  3643 ;; This function calls:
  3644 ;;		_LCD_sendbyte
  3645 ;;		_LCD_sendnibble
  3646 ;; This function is called by:
  3647 ;;		_main
  3648 ;; This function uses a non-reentrant model
  3649 ;;
  3650                           
  3651                           	psect	text20
  3652   0017B6                     __ptext20:
  3653                           	callstack 0
  3654   0017B6                     _LCD_Init:
  3655                           	callstack 26
  3656   0017B6                     
  3657                           ;LCD.c: 69:     TRISBbits.TRISB3 = 0;
  3658   0017B6  9682               	bcf	130,3,c	;volatile
  3659                           
  3660                           ;LCD.c: 71:     LATBbits.LATB3 = 0;
  3661   0017B8  967A               	bcf	122,3,c	;volatile
  3662                           
  3663                           ;LCD.c: 73:     TRISBbits.TRISB2 = 0;
  3664   0017BA  9482               	bcf	130,2,c	;volatile
  3665                           
  3666                           ;LCD.c: 75:     LATBbits.LATB2 = 0;
  3667   0017BC  947A               	bcf	122,2,c	;volatile
  3668                           
  3669                           ;LCD.c: 77:     TRISEbits.TRISE3 = 0;
  3670   0017BE  9685               	bcf	133,3,c	;volatile
  3671                           
  3672                           ;LCD.c: 79:     LATEbits.LATE3 = 0;
  3673   0017C0  967D               	bcf	125,3,c	;volatile
  3674                           
  3675                           ;LCD.c: 81:     TRISEbits.TRISE1 = 0;
  3676   0017C2  9285               	bcf	133,1,c	;volatile
  3677                           
  3678                           ;LCD.c: 83:     LATEbits.LATE1 = 0;
  3679   0017C4  927D               	bcf	125,1,c	;volatile
  3680                           
  3681                           ;LCD.c: 85:     TRISCbits.TRISC2 = 0;
  3682   0017C6  9483               	bcf	131,2,c	;volatile
  3683                           
  3684                           ;LCD.c: 86:     LATCbits.LATC2 = 0;
  3685   0017C8  947B               	bcf	123,2,c	;volatile
  3686                           
  3687                           ;LCD.c: 88:     TRISCbits.TRISC6 = 0;
  3688   0017CA  9C83               	bcf	131,6,c	;volatile
  3689                           
  3690                           ;LCD.c: 89:     LATCbits.LATC6 = 0;
  3691   0017CC  9C7B               	bcf	123,6,c	;volatile
  3692   0017CE                     
  3693                           ;LCD.c: 91:     _delay((unsigned long)((150)*(64000000/4000.0)));
  3694   0017CE  0E0D               	movlw	13
  3695   0017D0  6E05               	movwf	(??_LCD_Init+1)^0,c
  3696   0017D2  0E2D               	movlw	45
  3697   0017D4  6E04               	movwf	??_LCD_Init^0,c
  3698   0017D6  0ED8               	movlw	216
  3699   0017D8                     u2517:
  3700   0017D8  2EE8               	decfsz	wreg,f,c
  3701   0017DA  D7FE               	bra	u2517
  3702   0017DC  2E04               	decfsz	??_LCD_Init^0,f,c
  3703   0017DE  D7FC               	bra	u2517
  3704   0017E0  2E05               	decfsz	(??_LCD_Init+1)^0,f,c
  3705   0017E2  D7FA               	bra	u2517
  3706   0017E4                     
  3707                           ;LCD.c: 92:     LCD_sendnibble(0b0011);
  3708   0017E4  0E03               	movlw	3
  3709   0017E6  EC7A  F00E         	call	_LCD_sendnibble
  3710   0017EA                     
  3711                           ;LCD.c: 93:     _delay((unsigned long)((5)*(64000000/4000.0)));
  3712   0017EA  0E68               	movlw	104
  3713   0017EC  6E04               	movwf	??_LCD_Init^0,c
  3714   0017EE  0EE4               	movlw	228
  3715   0017F0                     u2527:
  3716   0017F0  2EE8               	decfsz	wreg,f,c
  3717   0017F2  D7FE               	bra	u2527
  3718   0017F4  2E04               	decfsz	??_LCD_Init^0,f,c
  3719   0017F6  D7FC               	bra	u2527
  3720   0017F8  D000               	nop2	
  3721                           
  3722                           ;LCD.c: 94:     LCD_sendnibble(0b0011);
  3723   0017FA  0E03               	movlw	3
  3724   0017FC  EC7A  F00E         	call	_LCD_sendnibble
  3725   001800                     
  3726                           ;LCD.c: 95:     _delay((unsigned long)((150)*(64000000/4000000.0)));
  3727   001800  0E04               	movlw	4
  3728   001802  6E04               	movwf	??_LCD_Init^0,c
  3729   001804  0E1C               	movlw	28
  3730   001806                     u2537:
  3731   001806  2EE8               	decfsz	wreg,f,c
  3732   001808  D7FE               	bra	u2537
  3733   00180A  2E04               	decfsz	??_LCD_Init^0,f,c
  3734   00180C  D7FC               	bra	u2537
  3735   00180E  D000               	nop2	
  3736   001810                     
  3737                           ;LCD.c: 96:     LCD_sendnibble(0b0011);
  3738   001810  0E03               	movlw	3
  3739   001812  EC7A  F00E         	call	_LCD_sendnibble
  3740                           
  3741                           ;LCD.c: 97:     _delay((unsigned long)((150)*(64000000/4000000.0)));
  3742   001816  0E04               	movlw	4
  3743   001818  6E04               	movwf	??_LCD_Init^0,c
  3744   00181A  0E1C               	movlw	28
  3745   00181C                     u2547:
  3746   00181C  2EE8               	decfsz	wreg,f,c
  3747   00181E  D7FE               	bra	u2547
  3748   001820  2E04               	decfsz	??_LCD_Init^0,f,c
  3749   001822  D7FC               	bra	u2547
  3750   001824  D000               	nop2	
  3751   001826                     
  3752                           ;LCD.c: 98:     LCD_sendnibble(0b0010);
  3753   001826  0E02               	movlw	2
  3754   001828  EC7A  F00E         	call	_LCD_sendnibble
  3755   00182C                     
  3756                           ;LCD.c: 99:     _delay((unsigned long)((150)*(64000000/4000000.0)));
  3757   00182C  0E04               	movlw	4
  3758   00182E  6E04               	movwf	??_LCD_Init^0,c
  3759   001830  0E1C               	movlw	28
  3760   001832                     u2557:
  3761   001832  2EE8               	decfsz	wreg,f,c
  3762   001834  D7FE               	bra	u2557
  3763   001836  2E04               	decfsz	??_LCD_Init^0,f,c
  3764   001838  D7FC               	bra	u2557
  3765   00183A  D000               	nop2	
  3766   00183C                     
  3767                           ;LCD.c: 100:     LCD_sendbyte(0b00101100,0);
  3768   00183C  0E00               	movlw	0
  3769   00183E  6E02               	movwf	LCD_sendbyte@type^0,c
  3770   001840  0E2C               	movlw	44
  3771   001842  EC9B  F00F         	call	_LCD_sendbyte
  3772   001846                     
  3773                           ;LCD.c: 101:     _delay((unsigned long)((100)*(64000000/4000000.0)));
  3774   001846  0EE4               	movlw	228
  3775   001848                     u2567:
  3776   001848  D000               	nop2	
  3777   00184A  D000               	nop2	
  3778   00184C  2EE8               	decfsz	wreg,f,c
  3779   00184E  D7FC               	bra	u2567
  3780   001850  D000               	nop2	
  3781   001852  D000               	nop2	
  3782   001854                     
  3783                           ;LCD.c: 102:     LCD_sendbyte(0b00001000,0);
  3784   001854  0E00               	movlw	0
  3785   001856  6E02               	movwf	LCD_sendbyte@type^0,c
  3786   001858  0E08               	movlw	8
  3787   00185A  EC9B  F00F         	call	_LCD_sendbyte
  3788   00185E                     
  3789                           ;LCD.c: 103:     _delay((unsigned long)((100)*(64000000/4000.0)));
  3790   00185E  0E09               	movlw	9
  3791   001860  6E05               	movwf	(??_LCD_Init+1)^0,c
  3792   001862  0E1E               	movlw	30
  3793   001864  6E04               	movwf	??_LCD_Init^0,c
  3794   001866  0EE4               	movlw	228
  3795   001868                     u2577:
  3796   001868  2EE8               	decfsz	wreg,f,c
  3797   00186A  D7FE               	bra	u2577
  3798   00186C  2E04               	decfsz	??_LCD_Init^0,f,c
  3799   00186E  D7FC               	bra	u2577
  3800   001870  2E05               	decfsz	(??_LCD_Init+1)^0,f,c
  3801   001872  D7FA               	bra	u2577
  3802   001874  D000               	nop2	
  3803   001876                     
  3804                           ;LCD.c: 104:     LCD_sendbyte(0b00000001,0);
  3805   001876  0E00               	movlw	0
  3806   001878  6E02               	movwf	LCD_sendbyte@type^0,c
  3807   00187A  0E01               	movlw	1
  3808   00187C  EC9B  F00F         	call	_LCD_sendbyte
  3809   001880                     
  3810                           ;LCD.c: 105:     _delay((unsigned long)((5)*(64000000/4000.0)));
  3811   001880  0E68               	movlw	104
  3812   001882  6E04               	movwf	??_LCD_Init^0,c
  3813   001884  0EE4               	movlw	228
  3814   001886                     u2587:
  3815   001886  2EE8               	decfsz	wreg,f,c
  3816   001888  D7FE               	bra	u2587
  3817   00188A  2E04               	decfsz	??_LCD_Init^0,f,c
  3818   00188C  D7FC               	bra	u2587
  3819   00188E  D000               	nop2	
  3820   001890                     
  3821                           ;LCD.c: 106:     LCD_sendbyte(0b00000110,0);
  3822   001890  0E00               	movlw	0
  3823   001892  6E02               	movwf	LCD_sendbyte@type^0,c
  3824   001894  0E06               	movlw	6
  3825   001896  EC9B  F00F         	call	_LCD_sendbyte
  3826   00189A                     
  3827                           ;LCD.c: 107:     _delay((unsigned long)((100)*(64000000/4000.0)));
  3828   00189A  0E09               	movlw	9
  3829   00189C  6E05               	movwf	(??_LCD_Init+1)^0,c
  3830   00189E  0E1E               	movlw	30
  3831   0018A0  6E04               	movwf	??_LCD_Init^0,c
  3832   0018A2  0EE4               	movlw	228
  3833   0018A4                     u2597:
  3834   0018A4  2EE8               	decfsz	wreg,f,c
  3835   0018A6  D7FE               	bra	u2597
  3836   0018A8  2E04               	decfsz	??_LCD_Init^0,f,c
  3837   0018AA  D7FC               	bra	u2597
  3838   0018AC  2E05               	decfsz	(??_LCD_Init+1)^0,f,c
  3839   0018AE  D7FA               	bra	u2597
  3840   0018B0  D000               	nop2	
  3841   0018B2                     
  3842                           ;LCD.c: 108:     LCD_sendbyte(0b00001100,0);
  3843   0018B2  0E00               	movlw	0
  3844   0018B4  6E02               	movwf	LCD_sendbyte@type^0,c
  3845   0018B6  0E0C               	movlw	12
  3846   0018B8  EC9B  F00F         	call	_LCD_sendbyte
  3847   0018BC                     
  3848                           ;LCD.c: 109:     _delay((unsigned long)((100)*(64000000/4000.0)));
  3849   0018BC  0E09               	movlw	9
  3850   0018BE  6E05               	movwf	(??_LCD_Init+1)^0,c
  3851   0018C0  0E1E               	movlw	30
  3852   0018C2  6E04               	movwf	??_LCD_Init^0,c
  3853   0018C4  0EE4               	movlw	228
  3854   0018C6                     u2607:
  3855   0018C6  2EE8               	decfsz	wreg,f,c
  3856   0018C8  D7FE               	bra	u2607
  3857   0018CA  2E04               	decfsz	??_LCD_Init^0,f,c
  3858   0018CC  D7FC               	bra	u2607
  3859   0018CE  2E05               	decfsz	(??_LCD_Init+1)^0,f,c
  3860   0018D0  D7FA               	bra	u2607
  3861   0018D2  D000               	nop2	
  3862   0018D4  0012               	return		;funcret
  3863   0018D6                     __end_of_LCD_Init:
  3864                           	callstack 0
  3865                           
  3866 ;; *************** function _LCD_sendbyte *****************
  3867 ;; Defined at:
  3868 ;;		line 40 in file "LCD.c"
  3869 ;; Parameters:    Size  Location     Type
  3870 ;;  Byte            1    wreg     unsigned char 
  3871 ;;  type            1    1[COMRAM] unsigned char 
  3872 ;; Auto vars:     Size  Location     Type
  3873 ;;  Byte            1    2[COMRAM] unsigned char 
  3874 ;; Return value:  Size  Location     Type
  3875 ;;                  1    wreg      void 
  3876 ;; Registers used:
  3877 ;;		wreg, status,2, status,0, cstack
  3878 ;; Tracked objects:
  3879 ;;		On entry : 0/0
  3880 ;;		On exit  : 0/0
  3881 ;;		Unchanged: 0/0
  3882 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3883 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3884 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3885 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3886 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3887 ;;Total ram usage:        2 bytes
  3888 ;; Hardware stack levels used: 1
  3889 ;; Hardware stack levels required when called: 3
  3890 ;; This function calls:
  3891 ;;		_LCD_sendnibble
  3892 ;; This function is called by:
  3893 ;;		_LCD_Init
  3894 ;;		_LCD_setline
  3895 ;;		_LCD_sendstring
  3896 ;;		_LCD_scroll
  3897 ;; This function uses a non-reentrant model
  3898 ;;
  3899                           
  3900                           	psect	text21
  3901   001F36                     __ptext21:
  3902                           	callstack 0
  3903   001F36                     _LCD_sendbyte:
  3904                           	callstack 26
  3905                           
  3906                           ;incstack = 0
  3907                           ;LCD_sendbyte@Byte stored from wreg
  3908   001F36  6E03               	movwf	LCD_sendbyte@Byte^0,c
  3909   001F38                     
  3910                           ;LCD.c: 40: void LCD_sendbyte(unsigned char Byte, char type);LCD.c: 41: {;LCD.c: 42:    
      +                           LATCbits.LATC6 = type;
  3911   001F38  B002               	btfsc	LCD_sendbyte@type^0,0,c
  3912   001F3A  D002               	bra	u1745
  3913   001F3C  9C7B               	bcf	123,6,c	;volatile
  3914   001F3E  D001               	bra	u1746
  3915   001F40                     u1745:
  3916   001F40  8C7B               	bsf	123,6,c	;volatile
  3917   001F42                     u1746:
  3918   001F42                     
  3919                           ;LCD.c: 44:     LCD_sendnibble(Byte>>4);
  3920   001F42  3803               	swapf	LCD_sendbyte@Byte^0,w,c
  3921   001F44  0B0F               	andlw	15
  3922   001F46  EC7A  F00E         	call	_LCD_sendnibble
  3923   001F4A                     
  3924                           ;LCD.c: 45:     LCD_sendnibble(Byte);
  3925   001F4A  5003               	movf	LCD_sendbyte@Byte^0,w,c
  3926   001F4C  EC7A  F00E         	call	_LCD_sendnibble
  3927   001F50                     
  3928                           ;LCD.c: 51:     _delay((unsigned long)((50)*(64000000/4000000.0)));
  3929   001F50  0EA0               	movlw	160
  3930   001F52                     u2617:
  3931   001F52  D000               	nop2	
  3932   001F54  2EE8               	decfsz	wreg,f,c
  3933   001F56  D7FD               	bra	u2617
  3934   001F58  0012               	return		;funcret
  3935   001F5A                     __end_of_LCD_sendbyte:
  3936                           	callstack 0
  3937                           
  3938 ;; *************** function _LCD_sendnibble *****************
  3939 ;; Defined at:
  3940 ;;		line 22 in file "LCD.c"
  3941 ;; Parameters:    Size  Location     Type
  3942 ;;  number          1    wreg     unsigned char 
  3943 ;; Auto vars:     Size  Location     Type
  3944 ;;  number          1    0[COMRAM] unsigned char 
  3945 ;; Return value:  Size  Location     Type
  3946 ;;                  1    wreg      void 
  3947 ;; Registers used:
  3948 ;;		wreg, cstack
  3949 ;; Tracked objects:
  3950 ;;		On entry : 0/0
  3951 ;;		On exit  : 0/0
  3952 ;;		Unchanged: 0/0
  3953 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3954 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3955 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3956 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3957 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3958 ;;Total ram usage:        1 bytes
  3959 ;; Hardware stack levels used: 1
  3960 ;; Hardware stack levels required when called: 2
  3961 ;; This function calls:
  3962 ;;		_LCD_E_TOG
  3963 ;; This function is called by:
  3964 ;;		_LCD_sendbyte
  3965 ;;		_LCD_Init
  3966 ;; This function uses a non-reentrant model
  3967 ;;
  3968                           
  3969                           	psect	text22
  3970   001CF4                     __ptext22:
  3971                           	callstack 0
  3972   001CF4                     _LCD_sendnibble:
  3973                           	callstack 26
  3974                           
  3975                           ;incstack = 0
  3976                           ;LCD_sendnibble@number stored from wreg
  3977   001CF4  6E01               	movwf	LCD_sendnibble@number^0,c
  3978   001CF6                     
  3979                           ;LCD.c: 22: void LCD_sendnibble(unsigned char number);LCD.c: 23: {;LCD.c: 24:     if (nu
      +                          mber & 0b0001) {LATBbits.LATB3=1;} else {LATBbits.LATB3=0;}
  3980   001CF6  A001               	btfss	LCD_sendnibble@number^0,0,c
  3981   001CF8  EF80  F00E         	goto	u1651
  3982   001CFC  EF82  F00E         	goto	u1650
  3983   001D00                     u1651:
  3984   001D00  EF85  F00E         	goto	l275
  3985   001D04                     u1650:
  3986   001D04  867A               	bsf	122,3,c	;volatile
  3987   001D06  EF86  F00E         	goto	l2077
  3988   001D0A                     l275:
  3989   001D0A  967A               	bcf	122,3,c	;volatile
  3990   001D0C                     l2077:
  3991                           
  3992                           ;LCD.c: 25:     if (number & 0b0010) {LATBbits.LATB2=1;} else {LATBbits.LATB2=0;}
  3993   001D0C  A201               	btfss	LCD_sendnibble@number^0,1,c
  3994   001D0E  EF8B  F00E         	goto	u1661
  3995   001D12  EF8D  F00E         	goto	u1660
  3996   001D16                     u1661:
  3997   001D16  EF90  F00E         	goto	l277
  3998   001D1A                     u1660:
  3999   001D1A  847A               	bsf	122,2,c	;volatile
  4000   001D1C  EF91  F00E         	goto	l2081
  4001   001D20                     l277:
  4002   001D20  947A               	bcf	122,2,c	;volatile
  4003   001D22                     l2081:
  4004                           
  4005                           ;LCD.c: 26:     if (number & 0b0100) {LATEbits.LATE3=1;} else {LATEbits.LATE3=0;}
  4006   001D22  A401               	btfss	LCD_sendnibble@number^0,2,c
  4007   001D24  EF96  F00E         	goto	u1671
  4008   001D28  EF98  F00E         	goto	u1670
  4009   001D2C                     u1671:
  4010   001D2C  EF9B  F00E         	goto	l279
  4011   001D30                     u1670:
  4012   001D30  867D               	bsf	125,3,c	;volatile
  4013   001D32  EF9C  F00E         	goto	l2085
  4014   001D36                     l279:
  4015   001D36  967D               	bcf	125,3,c	;volatile
  4016   001D38                     l2085:
  4017                           
  4018                           ;LCD.c: 27:     if (number & 0b1000) {LATEbits.LATE1=1;} else {LATEbits.LATE1=0;}
  4019   001D38  A601               	btfss	LCD_sendnibble@number^0,3,c
  4020   001D3A  EFA1  F00E         	goto	u1681
  4021   001D3E  EFA3  F00E         	goto	u1680
  4022   001D42                     u1681:
  4023   001D42  EFA6  F00E         	goto	l281
  4024   001D46                     u1680:
  4025   001D46  827D               	bsf	125,1,c	;volatile
  4026   001D48  EFA7  F00E         	goto	l2089
  4027   001D4C                     l281:
  4028   001D4C  927D               	bcf	125,1,c	;volatile
  4029   001D4E                     l2089:
  4030                           
  4031                           ;LCD.c: 31:     LCD_E_TOG();
  4032   001D4E  ECD6  F00F         	call	_LCD_E_TOG	;wreg free
  4033   001D52                     
  4034                           ;LCD.c: 32:     _delay((unsigned long)((5)*(64000000/4000000.0)));
  4035   001D52  0E1A               	movlw	26
  4036   001D54                     u2627:
  4037   001D54  2EE8               	decfsz	wreg,f,c
  4038   001D56  D7FE               	bra	u2627
  4039   001D58  D000               	nop2	
  4040   001D5A  0012               	return		;funcret
  4041   001D5C                     __end_of_LCD_sendnibble:
  4042                           	callstack 0
  4043                           
  4044 ;; *************** function _LCD_E_TOG *****************
  4045 ;; Defined at:
  4046 ;;		line 10 in file "LCD.c"
  4047 ;; Parameters:    Size  Location     Type
  4048 ;;		None
  4049 ;; Auto vars:     Size  Location     Type
  4050 ;;		None
  4051 ;; Return value:  Size  Location     Type
  4052 ;;                  1    wreg      void 
  4053 ;; Registers used:
  4054 ;;		wreg
  4055 ;; Tracked objects:
  4056 ;;		On entry : 0/0
  4057 ;;		On exit  : 0/0
  4058 ;;		Unchanged: 0/0
  4059 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4060 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4061 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4062 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4063 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4064 ;;Total ram usage:        0 bytes
  4065 ;; Hardware stack levels used: 1
  4066 ;; Hardware stack levels required when called: 1
  4067 ;; This function calls:
  4068 ;;		Nothing
  4069 ;; This function is called by:
  4070 ;;		_LCD_sendnibble
  4071 ;; This function uses a non-reentrant model
  4072 ;;
  4073                           
  4074                           	psect	text23
  4075   001FAC                     __ptext23:
  4076                           	callstack 0
  4077   001FAC                     _LCD_E_TOG:
  4078                           	callstack 26
  4079   001FAC                     
  4080                           ;LCD.c: 13:      LATCbits.LATC2 = 1;
  4081   001FAC  847B               	bsf	123,2,c	;volatile
  4082   001FAE                     
  4083                           ;LCD.c: 14:  _delay((unsigned long)((2)*(64000000/4000000.0)));
  4084   001FAE  0E0A               	movlw	10
  4085   001FB0                     u2637:
  4086   001FB0  2EE8               	decfsz	wreg,f,c
  4087   001FB2  D7FE               	bra	u2637
  4088   001FB4  D000               	nop2	
  4089   001FB6                     
  4090                           ;LCD.c: 15:      LATCbits.LATC2 = 0;
  4091   001FB6  947B               	bcf	123,2,c	;volatile
  4092   001FB8  0012               	return		;funcret
  4093   001FBA                     __end_of_LCD_E_TOG:
  4094                           	callstack 0
  4095                           
  4096 ;; *************** function _Interrupts_init *****************
  4097 ;; Defined at:
  4098 ;;		line 9 in file "interrupts.c"
  4099 ;; Parameters:    Size  Location     Type
  4100 ;;		None
  4101 ;; Auto vars:     Size  Location     Type
  4102 ;;		None
  4103 ;; Return value:  Size  Location     Type
  4104 ;;                  1    wreg      void 
  4105 ;; Registers used:
  4106 ;;		None
  4107 ;; Tracked objects:
  4108 ;;		On entry : 0/0
  4109 ;;		On exit  : 0/0
  4110 ;;		Unchanged: 0/0
  4111 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4112 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4113 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4114 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4115 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4116 ;;Total ram usage:        0 bytes
  4117 ;; Hardware stack levels used: 1
  4118 ;; Hardware stack levels required when called: 1
  4119 ;; This function calls:
  4120 ;;		Nothing
  4121 ;; This function is called by:
  4122 ;;		_main
  4123 ;; This function uses a non-reentrant model
  4124 ;;
  4125                           
  4126                           	psect	text24
  4127   001FBA                     __ptext24:
  4128                           	callstack 0
  4129   001FBA                     _Interrupts_init:
  4130                           	callstack 29
  4131   001FBA                     
  4132                           ;interrupts.c: 15:   INTCONbits.PEIE = 1;
  4133   001FBA  8CF2               	bsf	242,6,c	;volatile
  4134                           
  4135                           ;interrupts.c: 19:     PIE0bits.TMR0IE = 1;
  4136   001FBC  010E               	movlb	14	; () banked
  4137   001FBE  8B29               	bsf	41,5,b	;volatile
  4138                           
  4139                           ;interrupts.c: 20:     PIR0bits.TMR0IF = 0;
  4140   001FC0  9B33               	bcf	51,5,b	;volatile
  4141                           
  4142                           ;interrupts.c: 21:     IPR0bits.TMR0IP = 1;
  4143   001FC2  8B1F               	bsf	31,5,b	;volatile
  4144                           
  4145                           ;interrupts.c: 24:     INTCONbits.GIE=1;
  4146   001FC4  8EF2               	bsf	242,7,c	;volatile
  4147   001FC6                     
  4148                           ; BSR set to: 14
  4149   001FC6  0012               	return		;funcret
  4150   001FC8                     __end_of_Interrupts_init:
  4151                           	callstack 0
  4152                           
  4153 ;; *************** function _ADC_init *****************
  4154 ;; Defined at:
  4155 ;;		line 9 in file "ADC.c"
  4156 ;; Parameters:    Size  Location     Type
  4157 ;;		None
  4158 ;; Auto vars:     Size  Location     Type
  4159 ;;		None
  4160 ;; Return value:  Size  Location     Type
  4161 ;;                  1    wreg      void 
  4162 ;; Registers used:
  4163 ;;		wreg, status,2
  4164 ;; Tracked objects:
  4165 ;;		On entry : 0/0
  4166 ;;		On exit  : 0/0
  4167 ;;		Unchanged: 0/0
  4168 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4169 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4170 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4171 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4172 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4173 ;;Total ram usage:        0 bytes
  4174 ;; Hardware stack levels used: 1
  4175 ;; Hardware stack levels required when called: 1
  4176 ;; This function calls:
  4177 ;;		Nothing
  4178 ;; This function is called by:
  4179 ;;		_main
  4180 ;; This function uses a non-reentrant model
  4181 ;;
  4182                           
  4183                           	psect	text25
  4184   001F7A                     __ptext25:
  4185                           	callstack 0
  4186   001F7A                     _ADC_init:
  4187                           	callstack 29
  4188   001F7A                     
  4189                           ;ADC.c: 11:     TRISAbits.TRISA3=1;
  4190   001F7A  8681               	bsf	129,3,c	;volatile
  4191                           
  4192                           ;ADC.c: 12:     ANSELAbits.ANSELA3=1;
  4193   001F7C  010E               	movlb	14	; () banked
  4194   001F7E  8792               	bsf	146,3,b	;volatile
  4195                           
  4196                           ;ADC.c: 14:     ADREFbits.ADNREF = 0;
  4197   001F80  010F               	movlb	15	; () banked
  4198   001F82  9958               	bcf	88,4,b	;volatile
  4199   001F84                     
  4200                           ; BSR set to: 15
  4201                           ;ADC.c: 15:     ADREFbits.ADPREF = 0b00;
  4202   001F84  0EFC               	movlw	-4
  4203   001F86  1758               	andwf	88,f,b	;volatile
  4204                           
  4205                           ;ADC.c: 16:     ADPCH=0b11;
  4206   001F88  0E03               	movlw	3
  4207   001F8A  6F5F               	movwf	95,b	;volatile
  4208   001F8C                     
  4209                           ; BSR set to: 15
  4210                           ;ADC.c: 17:     ADCON0bits.ADFM = 0;
  4211   001F8C  9460               	bcf	96,2,c	;volatile
  4212   001F8E                     
  4213                           ; BSR set to: 15
  4214                           ;ADC.c: 18:     ADCON0bits.ADCS = 1;
  4215   001F8E  8860               	bsf	96,4,c	;volatile
  4216   001F90                     
  4217                           ; BSR set to: 15
  4218                           ;ADC.c: 19:     ADCON0bits.ADON = 1;
  4219   001F90  8E60               	bsf	96,7,c	;volatile
  4220   001F92                     
  4221                           ; BSR set to: 15
  4222   001F92  0012               	return		;funcret
  4223   001F94                     __end_of_ADC_init:
  4224                           	callstack 0
  4225                           
  4226 ;; *************** function _HighISR *****************
  4227 ;; Defined at:
  4228 ;;		line 31 in file "interrupts.c"
  4229 ;; Parameters:    Size  Location     Type
  4230 ;;		None
  4231 ;; Auto vars:     Size  Location     Type
  4232 ;;		None
  4233 ;; Return value:  Size  Location     Type
  4234 ;;                  1    wreg      void 
  4235 ;; Registers used:
  4236 ;;		wreg, status,2, status,0
  4237 ;; Tracked objects:
  4238 ;;		On entry : 0/0
  4239 ;;		On exit  : 0/0
  4240 ;;		Unchanged: 0/0
  4241 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4242 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4243 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4244 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4245 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4246 ;;Total ram usage:        0 bytes
  4247 ;; Hardware stack levels used: 1
  4248 ;; This function calls:
  4249 ;;		Nothing
  4250 ;; This function is called by:
  4251 ;;		Interrupt level 2
  4252 ;; This function uses a non-reentrant model
  4253 ;;
  4254                           
  4255                           	psect	intcode
  4256   000008                     __pintcode:
  4257                           	callstack 0
  4258   000008                     _HighISR:
  4259                           	callstack 22
  4260                           
  4261                           ; BSR set to: 15
  4262                           ;incstack = 0
  4263   000008  824B               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  4264   00000A                     
  4265                           ;interrupts.c: 35:     if(PIR0bits.TMR0IF){
  4266   00000A  010E               	movlb	14	; () banked
  4267   00000C  AB33               	btfss	51,5,b	;volatile
  4268   00000E  EF0B  F000         	goto	i2u215_41
  4269   000012  EF0D  F000         	goto	i2u215_40
  4270   000016                     i2u215_41:
  4271   000016  EF16  F000         	goto	i2l79
  4272   00001A                     i2u215_40:
  4273   00001A                     
  4274                           ; BSR set to: 14
  4275                           ;interrupts.c: 37:         TMR0H = 0b00001011;
  4276   00001A  0E0B               	movlw	11
  4277   00001C  6ED4               	movwf	212,c	;volatile
  4278                           
  4279                           ;interrupts.c: 38:         TMR0L = 0b11011100;
  4280   00001E  0EDC               	movlw	220
  4281   000020  6ED3               	movwf	211,c	;volatile
  4282   000022                     
  4283                           ; BSR set to: 14
  4284                           ;interrupts.c: 39:         GLOBALsecs++;
  4285   000022  0100               	movlb	0	; () banked
  4286   000024  4BA4               	infsnz	_GLOBALsecs& (0+255),f,b
  4287   000026  2BA5               	incf	(_GLOBALsecs+1)& (0+255),f,b
  4288   000028                     
  4289                           ; BSR set to: 0
  4290                           ;interrupts.c: 40:         PIR0bits.TMR0IF=0;
  4291   000028  010E               	movlb	14	; () banked
  4292   00002A  9B33               	bcf	51,5,b	;volatile
  4293   00002C                     i2l79:
  4294                           
  4295                           ; BSR set to: 14
  4296   00002C  924B               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  4297   00002E  0011               	retfie		f
  4298   000030                     __end_of_HighISR:
  4299                           	callstack 0
  4300                           
  4301                           	psect	rparam
  4302   000000                     
  4303                           	psect	temp
  4304   00004B                     btemp:
  4305                           	callstack 0
  4306   00004B                     	ds	1
  4307   000000                     int$flags	set	btemp
  4308   000000                     wtemp8	set	btemp+1
  4309   000000                     ttemp5	set	btemp+1
  4310   000000                     ttemp6	set	btemp+4
  4311   000000                     ttemp7	set	btemp+8
  4312                           
  4313                           	psect	config
  4314                           
  4315                           ;Config register CONFIG1L @ 0x300000
  4316                           ;	External Oscillator mode Selection bits
  4317                           ;	FEXTOSC = HS, HS (crystal oscillator) above 8 MHz; PFM set to high power
  4318                           ;	Power-up default value for COSC bits
  4319                           ;	RSTOSC = EXTOSC_4PLL, EXTOSC with 4x PLL, with EXTOSC operating per FEXTOSC bits
  4320   300000                     	org	3145728
  4321   300000  AA                 	db	170
  4322                           
  4323                           ;Config register CONFIG1H @ 0x300001
  4324                           ;	unspecified, using default values
  4325                           ;	Clock Out Enable bit
  4326                           ;	CLKOUTEN = 0x1, unprogrammed default
  4327                           ;	Clock Switch Enable bit
  4328                           ;	CSWEN = 0x1, unprogrammed default
  4329                           ;	Fail-Safe Clock Monitor Enable bit
  4330                           ;	FCMEN = 0x1, unprogrammed default
  4331   300001                     	org	3145729
  4332   300001  FF                 	db	255
  4333                           
  4334                           ;Config register CONFIG3L @ 0x300004
  4335                           ;	WDT Period Select bits
  4336                           ;	WDTCPS = 0x1F, unprogrammed default
  4337                           ;	WDT operating mode
  4338                           ;	WDTE = OFF, WDT Disabled
  4339   300004                     	org	3145732
  4340   300004  9F                 	db	159
  4341                           
  4342                           ;Config register CONFIG3H @ 0x300005
  4343                           ;	unspecified, using default values
  4344                           ;	WDT Window Select bits
  4345                           ;	WDTCWS = 0x7, unprogrammed default
  4346                           ;	WDT input clock selector
  4347                           ;	WDTCCS = 0x7, unprogrammed default
  4348   300005                     	org	3145733
  4349   300005  FF                 	db	255
  4350                           tosu	equ	0xFFF
  4351                           tosh	equ	0xFFE
  4352                           tosl	equ	0xFFD
  4353                           stkptr	equ	0xFFC
  4354                           pclatu	equ	0xFFB
  4355                           pclath	equ	0xFFA
  4356                           pcl	equ	0xFF9
  4357                           tblptru	equ	0xFF8
  4358                           tblptrh	equ	0xFF7
  4359                           tblptrl	equ	0xFF6
  4360                           tablat	equ	0xFF5
  4361                           prodh	equ	0xFF4
  4362                           prodl	equ	0xFF3
  4363                           indf0	equ	0xFEF
  4364                           postinc0	equ	0xFEE
  4365                           postdec0	equ	0xFED
  4366                           preinc0	equ	0xFEC
  4367                           plusw0	equ	0xFEB
  4368                           fsr0h	equ	0xFEA
  4369                           fsr0l	equ	0xFE9
  4370                           wreg	equ	0xFE8
  4371                           indf1	equ	0xFE7
  4372                           postinc1	equ	0xFE6
  4373                           postdec1	equ	0xFE5
  4374                           preinc1	equ	0xFE4
  4375                           plusw1	equ	0xFE3
  4376                           fsr1h	equ	0xFE2
  4377                           fsr1l	equ	0xFE1
  4378                           bsr	equ	0xFE0
  4379                           indf2	equ	0xFDF
  4380                           postinc2	equ	0xFDE
  4381                           postdec2	equ	0xFDD
  4382                           preinc2	equ	0xFDC
  4383                           plusw2	equ	0xFDB
  4384                           fsr2h	equ	0xFDA
  4385                           fsr2l	equ	0xFD9
  4386                           status	equ	0xFD8
=======
  3251   0030C0  A05D               	btfss	_flags^0,0,c
  3252   0030C2  EF65  F018         	goto	u2451
  3253   0030C6  EF67  F018         	goto	u2450
  3254   0030CA                     u2451:
  3255   0030CA  EF6D  F018         	goto	l2748
  3256   0030CE                     u2450:
  3257   0030CE                     
  3258                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 200:         fput
      +                          s((const char *)buf, fp);
  3259   0030CE  C00F  F009         	movff	pad@buf,fputs@s
  3260   0030D2  C00E  F00A         	movff	pad@fp,fputs@fp
  3261   0030D6  ECB3  F019         	call	_fputs	;wreg free
  3262   0030DA                     l2748:
  3263                           
  3264                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 205:  if (p < 0) 
      +                          {
  3265   0030DA  BE11               	btfsc	(pad@p+1)^0,7,c
  3266   0030DC  EF74  F018         	goto	u2460
  3267   0030E0  EF72  F018         	goto	u2461
  3268   0030E4                     u2461:
  3269   0030E4  EF78  F018         	goto	l1054
  3270   0030E8                     u2460:
  3271   0030E8                     
  3272                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 206:   p = 0;
  3273   0030E8  0E00               	movlw	0
  3274   0030EA  6E11               	movwf	(pad@p+1)^0,c
  3275   0030EC  0E00               	movlw	0
  3276   0030EE  6E10               	movwf	pad@p^0,c
  3277   0030F0                     l1054:
  3278                           
  3279                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 208:     i = 0;
  3280   0030F0  0E00               	movlw	0
  3281   0030F2  6E14               	movwf	(pad@i+1)^0,c
  3282   0030F4  0E00               	movlw	0
  3283   0030F6  6E13               	movwf	pad@i^0,c
  3284                           
  3285                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 209:     while (i
      +                           < p) {
  3286   0030F8  EF88  F018         	goto	l2756
  3287   0030FC                     l2752:
  3288                           
  3289                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 210:         fput
      +                          c(' ', fp);
  3290   0030FC  0E00               	movlw	0
  3291   0030FE  6E02               	movwf	(fputc@c+1)^0,c
  3292   003100  0E20               	movlw	32
  3293   003102  6E01               	movwf	fputc@c^0,c
  3294   003104  C00E  F003         	movff	pad@fp,fputc@fp
  3295   003108  EC0D  F017         	call	_fputc	;wreg free
  3296   00310C                     
  3297                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 211:         ++i;
  3298   00310C  4A13               	infsnz	pad@i^0,f,c
  3299   00310E  2A14               	incf	(pad@i+1)^0,f,c
  3300   003110                     l2756:
  3301                           
  3302                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 209:     while (i
      +                           < p) {
  3303   003110  5010               	movf	pad@p^0,w,c
  3304   003112  5C13               	subwf	pad@i^0,w,c
  3305   003114  5014               	movf	(pad@i+1)^0,w,c
  3306   003116  0A80               	xorlw	128
  3307   003118  6E12               	movwf	??_pad^0,c
  3308   00311A  5011               	movf	(pad@p+1)^0,w,c
  3309   00311C  0A80               	xorlw	128
  3310   00311E  5812               	subwfb	??_pad^0,w,c
  3311   003120  A0D8               	btfss	status,0,c
  3312   003122  EF95  F018         	goto	u2471
  3313   003126  EF97  F018         	goto	u2470
  3314   00312A                     u2471:
  3315   00312A  EF7E  F018         	goto	l2752
  3316   00312E                     u2470:
  3317   00312E                     
  3318                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 216:     if (!(fl
      +                          ags & (1 << 0))) {
  3319   00312E  B05D               	btfsc	_flags^0,0,c
  3320   003130  EF9C  F018         	goto	u2481
  3321   003134  EF9E  F018         	goto	u2480
  3322   003138                     u2481:
  3323   003138  EFA4  F018         	goto	l1059
  3324   00313C                     u2480:
  3325   00313C                     
  3326                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 218:         fput
      +                          s((const char *)buf, fp);
  3327   00313C  C00F  F009         	movff	pad@buf,fputs@s
  3328   003140  C00E  F00A         	movff	pad@fp,fputs@fp
  3329   003144  ECB3  F019         	call	_fputs	;wreg free
  3330   003148                     l1059:
  3331   003148  0012               	return		;funcret
  3332   00314A                     __end_of_pad:
  3333                           	callstack 0
  3334                           
  3335 ;; *************** function _fputs *****************
  3336 ;; Defined at:
  3337 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\nf_fputs.c"
  3338 ;; Parameters:    Size  Location     Type
  3339 ;;  s               1    8[COMRAM] PTR const unsigned char 
  3340 ;;		 -> dbuf(32), 
  3341 ;;  fp              1    9[COMRAM] PTR struct _IO_FILE
  3342 ;;		 -> sprintf@f(12), 
  3343 ;; Auto vars:     Size  Location     Type
  3344 ;;  i               2   11[COMRAM] int 
  3345 ;;  c               1   10[COMRAM] unsigned char 
  3346 ;; Return value:  Size  Location     Type
  3347 ;;                  2    8[COMRAM] int 
  3348 ;; Registers used:
  3349 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  3350 ;; Tracked objects:
  3351 ;;		On entry : 0/0
  3352 ;;		On exit  : 0/0
  3353 ;;		Unchanged: 0/0
  3354 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3355 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3356 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3357 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3358 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3359 ;;Total ram usage:        5 bytes
  3360 ;; Hardware stack levels used: 1
  3361 ;; Hardware stack levels required when called: 3
  3362 ;; This function calls:
  3363 ;;		_fputc
  3364 ;; This function is called by:
  3365 ;;		_pad
  3366 ;; This function uses a non-reentrant model
  3367 ;;
  3368                           
  3369                           	psect	text8
  3370   003366                     __ptext8:
  3371                           	callstack 0
  3372   003366                     _fputs:
  3373                           	callstack 22
  3374   003366  0E00               	movlw	0
  3375   003368  6E0D               	movwf	(fputs@i+1)^0,c
  3376   00336A  0E00               	movlw	0
  3377   00336C  6E0C               	movwf	fputs@i^0,c
  3378   00336E  EFC2  F019         	goto	l2656
  3379   003372                     l2652:
  3380   003372  C00B  F001         	movff	fputs@c,fputc@c
  3381   003376  6A02               	clrf	(fputc@c+1)^0,c
  3382   003378  C00A  F003         	movff	fputs@fp,fputc@fp
  3383   00337C  EC0D  F017         	call	_fputc	;wreg free
  3384   003380  4A0C               	infsnz	fputs@i^0,f,c
  3385   003382  2A0D               	incf	(fputs@i+1)^0,f,c
  3386   003384                     l2656:
  3387   003384  5009               	movf	fputs@s^0,w,c
  3388   003386  240C               	addwf	fputs@i^0,w,c
  3389   003388  6ED9               	movwf	fsr2l,c
  3390   00338A  6ADA               	clrf	fsr2h,c
  3391   00338C  50DF               	movf	indf2,w,c
  3392   00338E  6E0B               	movwf	fputs@c^0,c
  3393   003390  500B               	movf	fputs@c^0,w,c
  3394   003392  A4D8               	btfss	status,2,c
  3395   003394  EFCE  F019         	goto	u2321
  3396   003398  EFD0  F019         	goto	u2320
  3397   00339C                     u2321:
  3398   00339C  EFB9  F019         	goto	l2652
  3399   0033A0                     u2320:
  3400   0033A0  0012               	return		;funcret
  3401   0033A2                     __end_of_fputs:
  3402                           	callstack 0
  3403                           
  3404 ;; *************** function _fputc *****************
  3405 ;; Defined at:
  3406 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\nf_fputc.c"
  3407 ;; Parameters:    Size  Location     Type
  3408 ;;  c               2    0[COMRAM] int 
  3409 ;;  fp              1    2[COMRAM] PTR struct _IO_FILE
  3410 ;;		 -> sprintf@f(12), 
  3411 ;; Auto vars:     Size  Location     Type
  3412 ;;		None
  3413 ;; Return value:  Size  Location     Type
  3414 ;;                  2    0[COMRAM] int 
  3415 ;; Registers used:
  3416 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  3417 ;; Tracked objects:
  3418 ;;		On entry : 0/0
  3419 ;;		On exit  : 0/0
  3420 ;;		Unchanged: 0/0
  3421 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3422 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3423 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3424 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3425 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3426 ;;Total ram usage:        8 bytes
  3427 ;; Hardware stack levels used: 1
  3428 ;; Hardware stack levels required when called: 2
  3429 ;; This function calls:
  3430 ;;		_putch
  3431 ;; This function is called by:
  3432 ;;		_pad
  3433 ;;		_vfpfcnvrt
  3434 ;;		_fputs
  3435 ;; This function uses a non-reentrant model
  3436 ;;
  3437                           
  3438                           	psect	text9
  3439   002E1A                     __ptext9:
  3440                           	callstack 0
  3441   002E1A                     _fputc:
  3442                           	callstack 25
  3443   002E1A  5003               	movf	fputc@fp^0,w,c
  3444   002E1C  B4D8               	btfsc	status,2,c
  3445   002E1E  EF13  F017         	goto	u2281
  3446   002E22  EF15  F017         	goto	u2280
  3447   002E26                     u2281:
  3448   002E26  EF1D  F017         	goto	l2640
  3449   002E2A                     u2280:
  3450   002E2A  5003               	movf	fputc@fp^0,w,c
  3451   002E2C  A4D8               	btfss	status,2,c
  3452   002E2E  EF1B  F017         	goto	u2291
  3453   002E32  EF1D  F017         	goto	u2290
  3454   002E36                     u2291:
  3455   002E36  EF22  F017         	goto	l2642
  3456   002E3A                     u2290:
  3457   002E3A                     l2640:
  3458   002E3A  5001               	movf	fputc@c^0,w,c
  3459   002E3C  ECA9  F01A         	call	_putch
  3460   002E40  EF69  F017         	goto	l1123
  3461   002E44                     l2642:
  3462   002E44  5003               	movf	fputc@fp^0,w,c
  3463   002E46  6ED9               	movwf	fsr2l,c
  3464   002E48  6ADA               	clrf	fsr2h,c
  3465   002E4A  0E0A               	movlw	10
  3466   002E4C  26D9               	addwf	fsr2l,f,c
  3467   002E4E  50DE               	movf	postinc2,w,c
  3468   002E50  10DE               	iorwf	postinc2,w,c
  3469   002E52  B4D8               	btfsc	status,2,c
  3470   002E54  EF2E  F017         	goto	u2301
  3471   002E58  EF30  F017         	goto	u2300
  3472   002E5C                     u2301:
  3473   002E5C  EF49  F017         	goto	l2646
  3474   002E60                     u2300:
  3475   002E60  5003               	movf	fputc@fp^0,w,c
  3476   002E62  6ED9               	movwf	fsr2l,c
  3477   002E64  6ADA               	clrf	fsr2h,c
  3478   002E66  0E0A               	movlw	10
  3479   002E68  26D9               	addwf	fsr2l,f,c
  3480   002E6A  5003               	movf	fputc@fp^0,w,c
  3481   002E6C  6EE1               	movwf	fsr1l,c
  3482   002E6E  6AE2               	clrf	fsr1h,c
  3483   002E70  0E03               	movlw	3
  3484   002E72  26E1               	addwf	fsr1l,f,c
  3485   002E74  50DE               	movf	postinc2,w,c
  3486   002E76  5CE6               	subwf	postinc1,w,c
  3487   002E78  50E6               	movf	postinc1,w,c
  3488   002E7A  0A80               	xorlw	128
  3489   002E7C  6E08               	movwf	(??_fputc+4)^0,c
  3490   002E7E  50DE               	movf	postinc2,w,c
  3491   002E80  0A80               	xorlw	128
  3492   002E82  5808               	subwfb	(??_fputc+4)^0,w,c
  3493   002E84  B0D8               	btfsc	status,0,c
  3494   002E86  EF47  F017         	goto	u2311
  3495   002E8A  EF49  F017         	goto	u2310
  3496   002E8E                     u2311:
  3497   002E8E  EF69  F017         	goto	l1123
  3498   002E92                     u2310:
  3499   002E92                     l2646:
  3500   002E92  5003               	movf	fputc@fp^0,w,c
  3501   002E94  6ED9               	movwf	fsr2l,c
  3502   002E96  6ADA               	clrf	fsr2h,c
  3503   002E98  0E03               	movlw	3
  3504   002E9A  26D9               	addwf	fsr2l,f,c
  3505   002E9C  CFDE F004          	movff	postinc2,??_fputc
  3506   002EA0  CFDD F005          	movff	postdec2,??_fputc+1
  3507   002EA4  5003               	movf	fputc@fp^0,w,c
  3508   002EA6  6ED9               	movwf	fsr2l,c
  3509   002EA8  6ADA               	clrf	fsr2h,c
  3510   002EAA  CFDE F006          	movff	postinc2,??_fputc+2
  3511   002EAE  CFDD F007          	movff	postdec2,??_fputc+3
  3512   002EB2  5004               	movf	??_fputc^0,w,c
  3513   002EB4  2406               	addwf	(??_fputc+2)^0,w,c
  3514   002EB6  6ED9               	movwf	fsr2l,c
  3515   002EB8  5005               	movf	(??_fputc+1)^0,w,c
  3516   002EBA  2007               	addwfc	(??_fputc+3)^0,w,c
  3517   002EBC  6EDA               	movwf	fsr2h,c
  3518   002EBE  C001  FFDF         	movff	fputc@c,indf2
  3519   002EC2  5003               	movf	fputc@fp^0,w,c
  3520   002EC4  6ED9               	movwf	fsr2l,c
  3521   002EC6  6ADA               	clrf	fsr2h,c
  3522   002EC8  0E03               	movlw	3
  3523   002ECA  26D9               	addwf	fsr2l,f,c
  3524   002ECC  2ADE               	incf	postinc2,f,c
  3525   002ECE  0E00               	movlw	0
  3526   002ED0  22DD               	addwfc	postdec2,f,c
  3527   002ED2                     l1123:
  3528   002ED2  0012               	return		;funcret
  3529   002ED4                     __end_of_fputc:
  3530                           	callstack 0
  3531                           
  3532 ;; *************** function _putch *****************
  3533 ;; Defined at:
  3534 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\putch.c"
  3535 ;; Parameters:    Size  Location     Type
  3536 ;;  c               1    wreg     unsigned char 
  3537 ;; Auto vars:     Size  Location     Type
  3538 ;;  c               1    0[COMRAM] unsigned char 
  3539 ;; Return value:  Size  Location     Type
  3540 ;;                  1    wreg      void 
  3541 ;; Registers used:
  3542 ;;		wreg
  3543 ;; Tracked objects:
  3544 ;;		On entry : 0/0
  3545 ;;		On exit  : 0/0
  3546 ;;		Unchanged: 0/0
  3547 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3548 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3549 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3550 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3551 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3552 ;;Total ram usage:        0 bytes
  3553 ;; Hardware stack levels used: 1
  3554 ;; Hardware stack levels required when called: 1
  3555 ;; This function calls:
  3556 ;;		Nothing
  3557 ;; This function is called by:
  3558 ;;		_fputc
  3559 ;; This function uses a non-reentrant model
  3560 ;;
  3561                           
  3562                           	psect	text10
  3563   003552                     __ptext10:
  3564                           	callstack 0
  3565   003552                     _putch:
  3566                           	callstack 25
  3567   003552  0012               	return		;funcret
  3568   003554                     __end_of_putch:
  3569                           	callstack 0
  3570                           
  3571 ;; *************** function _abs *****************
  3572 ;; Defined at:
  3573 ;;		line 1 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\abs.c"
  3574 ;; Parameters:    Size  Location     Type
  3575 ;;  a               2    6[COMRAM] int 
  3576 ;; Auto vars:     Size  Location     Type
  3577 ;;		None
  3578 ;; Return value:  Size  Location     Type
  3579 ;;                  2    6[COMRAM] int 
  3580 ;; Registers used:
  3581 ;;		wreg, status,2, status,0
  3582 ;; Tracked objects:
  3583 ;;		On entry : 0/0
  3584 ;;		On exit  : 0/0
  3585 ;;		Unchanged: 0/0
  3586 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3587 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3588 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3589 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3590 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3591 ;;Total ram usage:        4 bytes
  3592 ;; Hardware stack levels used: 1
  3593 ;; Hardware stack levels required when called: 1
  3594 ;; This function calls:
  3595 ;;		Nothing
  3596 ;; This function is called by:
  3597 ;;		_dtoa
  3598 ;; This function uses a non-reentrant model
  3599 ;;
  3600                           
  3601                           	psect	text11
  3602   0033DC                     __ptext11:
  3603                           	callstack 0
  3604   0033DC                     _abs:
  3605                           	callstack 25
  3606   0033DC  BE08               	btfsc	(abs@a+1)^0,7,c
  3607   0033DE  EFF3  F019         	goto	u2491
  3608   0033E2  EFF5  F019         	goto	u2490
  3609   0033E6                     u2491:
  3610   0033E6  EFFB  F019         	goto	l1108
  3611   0033EA                     u2490:
  3612   0033EA  C007  F007         	movff	abs@a,?_abs
  3613   0033EE  C008  F008         	movff	abs@a+1,?_abs+1
  3614   0033F2  EF07  F01A         	goto	l1111
  3615   0033F6                     l1108:
  3616   0033F6  C007  F009         	movff	abs@a,??_abs
  3617   0033FA  C008  F00A         	movff	abs@a+1,??_abs+1
  3618   0033FE  1E09               	comf	??_abs^0,f,c
  3619   003400  1E0A               	comf	(??_abs+1)^0,f,c
  3620   003402  4A09               	infsnz	??_abs^0,f,c
  3621   003404  2A0A               	incf	(??_abs+1)^0,f,c
  3622   003406  C009  F007         	movff	??_abs,?_abs
  3623   00340A  C00A  F008         	movff	??_abs+1,?_abs+1
  3624   00340E                     l1111:
  3625   00340E  0012               	return		;funcret
  3626   003410                     __end_of_abs:
  3627                           	callstack 0
  3628                           
  3629 ;; *************** function ___awdiv *****************
  3630 ;; Defined at:
  3631 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\awdiv.c"
  3632 ;; Parameters:    Size  Location     Type
  3633 ;;  dividend        2    0[COMRAM] int 
  3634 ;;  divisor         2    2[COMRAM] int 
  3635 ;; Auto vars:     Size  Location     Type
  3636 ;;  quotient        2    6[COMRAM] int 
  3637 ;;  sign            1    5[COMRAM] unsigned char 
  3638 ;;  counter         1    4[COMRAM] unsigned char 
  3639 ;; Return value:  Size  Location     Type
  3640 ;;                  2    0[COMRAM] int 
  3641 ;; Registers used:
  3642 ;;		wreg, status,2, status,0
  3643 ;; Tracked objects:
  3644 ;;		On entry : 0/0
  3645 ;;		On exit  : 0/0
  3646 ;;		Unchanged: 0/0
  3647 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3648 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3649 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3650 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3651 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3652 ;;Total ram usage:        8 bytes
  3653 ;; Hardware stack levels used: 1
  3654 ;; Hardware stack levels required when called: 1
  3655 ;; This function calls:
  3656 ;;		Nothing
  3657 ;; This function is called by:
  3658 ;;		_dtoa
  3659 ;; This function uses a non-reentrant model
  3660 ;;
  3661                           
  3662                           	psect	text12
  3663   002D56                     __ptext12:
  3664                           	callstack 0
  3665   002D56                     ___awdiv:
  3666                           	callstack 25
  3667   002D56  0E00               	movlw	0
  3668   002D58  6E06               	movwf	___awdiv@sign^0,c
  3669   002D5A  BE04               	btfsc	(___awdiv@divisor+1)^0,7,c
  3670   002D5C  EFB4  F016         	goto	u2330
  3671   002D60  EFB2  F016         	goto	u2331
  3672   002D64                     u2331:
  3673   002D64  EFBA  F016         	goto	l2672
  3674   002D68                     u2330:
  3675   002D68  6C03               	negf	___awdiv@divisor^0,c
  3676   002D6A  1E04               	comf	(___awdiv@divisor+1)^0,f,c
  3677   002D6C  B0D8               	btfsc	status,0,c
  3678   002D6E  2A04               	incf	(___awdiv@divisor+1)^0,f,c
  3679   002D70  0E01               	movlw	1
  3680   002D72  6E06               	movwf	___awdiv@sign^0,c
  3681   002D74                     l2672:
  3682   002D74  BE02               	btfsc	(___awdiv@dividend+1)^0,7,c
  3683   002D76  EFC1  F016         	goto	u2340
  3684   002D7A  EFBF  F016         	goto	u2341
  3685   002D7E                     u2341:
  3686   002D7E  EFC7  F016         	goto	l2678
  3687   002D82                     u2340:
  3688   002D82  6C01               	negf	___awdiv@dividend^0,c
  3689   002D84  1E02               	comf	(___awdiv@dividend+1)^0,f,c
  3690   002D86  B0D8               	btfsc	status,0,c
  3691   002D88  2A02               	incf	(___awdiv@dividend+1)^0,f,c
  3692   002D8A  0E01               	movlw	1
  3693   002D8C  1A06               	xorwf	___awdiv@sign^0,f,c
  3694   002D8E                     l2678:
  3695   002D8E  0E00               	movlw	0
  3696   002D90  6E08               	movwf	(___awdiv@quotient+1)^0,c
  3697   002D92  0E00               	movlw	0
  3698   002D94  6E07               	movwf	___awdiv@quotient^0,c
  3699   002D96  5003               	movf	___awdiv@divisor^0,w,c
  3700   002D98  1004               	iorwf	(___awdiv@divisor+1)^0,w,c
  3701   002D9A  B4D8               	btfsc	status,2,c
  3702   002D9C  EFD2  F016         	goto	u2351
  3703   002DA0  EFD4  F016         	goto	u2350
  3704   002DA4                     u2351:
  3705   002DA4  EFFC  F016         	goto	l2700
  3706   002DA8                     u2350:
  3707   002DA8  0E01               	movlw	1
  3708   002DAA  6E05               	movwf	___awdiv@counter^0,c
  3709   002DAC  EFDC  F016         	goto	l2686
  3710   002DB0                     l2684:
  3711   002DB0  90D8               	bcf	status,0,c
  3712   002DB2  3603               	rlcf	___awdiv@divisor^0,f,c
  3713   002DB4  3604               	rlcf	(___awdiv@divisor+1)^0,f,c
  3714   002DB6  2A05               	incf	___awdiv@counter^0,f,c
  3715   002DB8                     l2686:
  3716   002DB8  AE04               	btfss	(___awdiv@divisor+1)^0,7,c
  3717   002DBA  EFE1  F016         	goto	u2361
  3718   002DBE  EFE3  F016         	goto	u2360
  3719   002DC2                     u2361:
  3720   002DC2  EFD8  F016         	goto	l2684
  3721   002DC6                     u2360:
  3722   002DC6                     l2688:
  3723   002DC6  90D8               	bcf	status,0,c
  3724   002DC8  3607               	rlcf	___awdiv@quotient^0,f,c
  3725   002DCA  3608               	rlcf	(___awdiv@quotient+1)^0,f,c
  3726   002DCC  5003               	movf	___awdiv@divisor^0,w,c
  3727   002DCE  5C01               	subwf	___awdiv@dividend^0,w,c
  3728   002DD0  5004               	movf	(___awdiv@divisor+1)^0,w,c
  3729   002DD2  5802               	subwfb	(___awdiv@dividend+1)^0,w,c
  3730   002DD4  A0D8               	btfss	status,0,c
  3731   002DD6  EFEF  F016         	goto	u2371
  3732   002DDA  EFF1  F016         	goto	u2370
  3733   002DDE                     u2371:
  3734   002DDE  EFF6  F016         	goto	l2696
  3735   002DE2                     u2370:
  3736   002DE2  5003               	movf	___awdiv@divisor^0,w,c
  3737   002DE4  5E01               	subwf	___awdiv@dividend^0,f,c
  3738   002DE6  5004               	movf	(___awdiv@divisor+1)^0,w,c
  3739   002DE8  5A02               	subwfb	(___awdiv@dividend+1)^0,f,c
  3740   002DEA  8007               	bsf	___awdiv@quotient^0,0,c
  3741   002DEC                     l2696:
  3742   002DEC  90D8               	bcf	status,0,c
  3743   002DEE  3204               	rrcf	(___awdiv@divisor+1)^0,f,c
  3744   002DF0  3203               	rrcf	___awdiv@divisor^0,f,c
  3745   002DF2  2E05               	decfsz	___awdiv@counter^0,f,c
  3746   002DF4  EFE3  F016         	goto	l2688
  3747   002DF8                     l2700:
  3748   002DF8  5006               	movf	___awdiv@sign^0,w,c
  3749   002DFA  B4D8               	btfsc	status,2,c
  3750   002DFC  EF02  F017         	goto	u2381
  3751   002E00  EF04  F017         	goto	u2380
  3752   002E04                     u2381:
  3753   002E04  EF08  F017         	goto	l2704
  3754   002E08                     u2380:
  3755   002E08  6C07               	negf	___awdiv@quotient^0,c
  3756   002E0A  1E08               	comf	(___awdiv@quotient+1)^0,f,c
  3757   002E0C  B0D8               	btfsc	status,0,c
  3758   002E0E  2A08               	incf	(___awdiv@quotient+1)^0,f,c
  3759   002E10                     l2704:
  3760   002E10  C007  F001         	movff	___awdiv@quotient,?___awdiv
  3761   002E14  C008  F002         	movff	___awdiv@quotient+1,?___awdiv+1
  3762   002E18  0012               	return		;funcret
  3763   002E1A                     __end_of___awdiv:
  3764                           	callstack 0
  3765                           
  3766 ;; *************** function ___xxtofl *****************
  3767 ;; Defined at:
  3768 ;;		line 10 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\xxtofl.c"
  3769 ;; Parameters:    Size  Location     Type
  3770 ;;  sign            1    wreg     unsigned char 
  3771 ;;  val             4    0[COMRAM] long 
  3772 ;; Auto vars:     Size  Location     Type
  3773 ;;  sign            1    8[COMRAM] unsigned char 
  3774 ;;  arg             4   10[COMRAM] unsigned long 
  3775 ;;  exp             1    9[COMRAM] unsigned char 
  3776 ;; Return value:  Size  Location     Type
  3777 ;;                  4    0[COMRAM] unsigned char 
  3778 ;; Registers used:
  3779 ;;		wreg, status,2, status,0
  3780 ;; Tracked objects:
  3781 ;;		On entry : 0/0
  3782 ;;		On exit  : 0/0
  3783 ;;		Unchanged: 0/0
  3784 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3785 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3786 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3787 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3788 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3789 ;;Total ram usage:       14 bytes
  3790 ;; Hardware stack levels used: 1
  3791 ;; Hardware stack levels required when called: 1
  3792 ;; This function calls:
  3793 ;;		Nothing
  3794 ;; This function is called by:
  3795 ;;		_main
  3796 ;; This function uses a non-reentrant model
  3797 ;;
  3798                           
  3799                           	psect	text13
  3800   0025CA                     __ptext13:
  3801                           	callstack 0
  3802   0025CA                     ___xxtofl:
  3803                           	callstack 29
  3804                           
  3805                           ;incstack = 0
  3806                           ;___xxtofl@sign stored from wreg
  3807   0025CA  6E09               	movwf	___xxtofl@sign^0,c
  3808   0025CC  5009               	movf	___xxtofl@sign^0,w,c
  3809   0025CE  B4D8               	btfsc	status,2,c
  3810   0025D0  EFEC  F012         	goto	u3831
  3811   0025D4  EFEE  F012         	goto	u3830
  3812   0025D8                     u3831:
  3813   0025D8  EF10  F013         	goto	l1011
  3814   0025DC                     u3830:
  3815   0025DC  BE04               	btfsc	(___xxtofl@val+3)^0,7,c
  3816   0025DE  EFF5  F012         	goto	u3840
  3817   0025E2  EFF3  F012         	goto	u3841
  3818   0025E6                     u3841:
  3819   0025E6  EF10  F013         	goto	l1011
  3820   0025EA                     u3840:
  3821   0025EA  C001  F005         	movff	___xxtofl@val,??___xxtofl
  3822   0025EE  C002  F006         	movff	___xxtofl@val+1,??___xxtofl+1
  3823   0025F2  C003  F007         	movff	___xxtofl@val+2,??___xxtofl+2
  3824   0025F6  C004  F008         	movff	___xxtofl@val+3,??___xxtofl+3
  3825   0025FA  1E05               	comf	??___xxtofl^0,f,c
  3826   0025FC  1E06               	comf	(??___xxtofl+1)^0,f,c
  3827   0025FE  1E07               	comf	(??___xxtofl+2)^0,f,c
  3828   002600  1E08               	comf	(??___xxtofl+3)^0,f,c
  3829   002602  2A05               	incf	??___xxtofl^0,f,c
  3830   002604  0E00               	movlw	0
  3831   002606  2206               	addwfc	(??___xxtofl+1)^0,f,c
  3832   002608  2207               	addwfc	(??___xxtofl+2)^0,f,c
  3833   00260A  2208               	addwfc	(??___xxtofl+3)^0,f,c
  3834   00260C  C005  F00B         	movff	??___xxtofl,___xxtofl@arg
  3835   002610  C006  F00C         	movff	??___xxtofl+1,___xxtofl@arg+1
  3836   002614  C007  F00D         	movff	??___xxtofl+2,___xxtofl@arg+2
  3837   002618  C008  F00E         	movff	??___xxtofl+3,___xxtofl@arg+3
  3838   00261C  EF18  F013         	goto	l3576
  3839   002620                     l1011:
  3840   002620  C001  F00B         	movff	___xxtofl@val,___xxtofl@arg
  3841   002624  C002  F00C         	movff	___xxtofl@val+1,___xxtofl@arg+1
  3842   002628  C003  F00D         	movff	___xxtofl@val+2,___xxtofl@arg+2
  3843   00262C  C004  F00E         	movff	___xxtofl@val+3,___xxtofl@arg+3
  3844   002630                     l3576:
  3845   002630  5001               	movf	___xxtofl@val^0,w,c
  3846   002632  1002               	iorwf	(___xxtofl@val+1)^0,w,c
  3847   002634  1003               	iorwf	(___xxtofl@val+2)^0,w,c
  3848   002636  1004               	iorwf	(___xxtofl@val+3)^0,w,c
  3849   002638  A4D8               	btfss	status,2,c
  3850   00263A  EF21  F013         	goto	u3851
  3851   00263E  EF23  F013         	goto	u3850
  3852   002642                     u3851:
  3853   002642  EF2D  F013         	goto	l3582
  3854   002646                     u3850:
  3855   002646  0E00               	movlw	0
  3856   002648  6E01               	movwf	?___xxtofl^0,c
  3857   00264A  0E00               	movlw	0
  3858   00264C  6E02               	movwf	(?___xxtofl+1)^0,c
  3859   00264E  0E00               	movlw	0
  3860   002650  6E03               	movwf	(?___xxtofl+2)^0,c
  3861   002652  0E00               	movlw	0
  3862   002654  6E04               	movwf	(?___xxtofl+3)^0,c
  3863   002656  EFBE  F013         	goto	l1014
  3864   00265A                     l3582:
  3865   00265A  0E96               	movlw	150
  3866   00265C  6E0A               	movwf	___xxtofl@exp^0,c
  3867   00265E  EF37  F013         	goto	l3586
  3868   002662                     l3584:
  3869   002662  2A0A               	incf	___xxtofl@exp^0,f,c
  3870   002664  90D8               	bcf	status,0,c
  3871   002666  320E               	rrcf	(___xxtofl@arg+3)^0,f,c
  3872   002668  320D               	rrcf	(___xxtofl@arg+2)^0,f,c
  3873   00266A  320C               	rrcf	(___xxtofl@arg+1)^0,f,c
  3874   00266C  320B               	rrcf	___xxtofl@arg^0,f,c
  3875   00266E                     l3586:
  3876   00266E  0E00               	movlw	0
  3877   002670  140B               	andwf	___xxtofl@arg^0,w,c
  3878   002672  6E05               	movwf	??___xxtofl^0,c
  3879   002674  0E00               	movlw	0
  3880   002676  140C               	andwf	(___xxtofl@arg+1)^0,w,c
  3881   002678  6E06               	movwf	(??___xxtofl+1)^0,c
  3882   00267A  0E00               	movlw	0
  3883   00267C  140D               	andwf	(___xxtofl@arg+2)^0,w,c
  3884   00267E  6E07               	movwf	(??___xxtofl+2)^0,c
  3885   002680  0EFE               	movlw	254
  3886   002682  140E               	andwf	(___xxtofl@arg+3)^0,w,c
  3887   002684  6E08               	movwf	(??___xxtofl+3)^0,c
  3888   002686  5005               	movf	??___xxtofl^0,w,c
  3889   002688  1006               	iorwf	(??___xxtofl+1)^0,w,c
  3890   00268A  1007               	iorwf	(??___xxtofl+2)^0,w,c
  3891   00268C  1008               	iorwf	(??___xxtofl+3)^0,w,c
  3892   00268E  A4D8               	btfss	status,2,c
  3893   002690  EF4C  F013         	goto	u3861
  3894   002694  EF4E  F013         	goto	u3860
  3895   002698                     u3861:
  3896   002698  EF31  F013         	goto	l3584
  3897   00269C                     u3860:
  3898   00269C  EF5C  F013         	goto	l1018
  3899   0026A0                     l3588:
  3900   0026A0  2A0A               	incf	___xxtofl@exp^0,f,c
  3901   0026A2  0E01               	movlw	1
  3902   0026A4  260B               	addwf	___xxtofl@arg^0,f,c
  3903   0026A6  0E00               	movlw	0
  3904   0026A8  220C               	addwfc	(___xxtofl@arg+1)^0,f,c
  3905   0026AA  220D               	addwfc	(___xxtofl@arg+2)^0,f,c
  3906   0026AC  220E               	addwfc	(___xxtofl@arg+3)^0,f,c
  3907   0026AE  90D8               	bcf	status,0,c
  3908   0026B0  320E               	rrcf	(___xxtofl@arg+3)^0,f,c
  3909   0026B2  320D               	rrcf	(___xxtofl@arg+2)^0,f,c
  3910   0026B4  320C               	rrcf	(___xxtofl@arg+1)^0,f,c
  3911   0026B6  320B               	rrcf	___xxtofl@arg^0,f,c
  3912   0026B8                     l1018:
  3913   0026B8  0E00               	movlw	0
  3914   0026BA  140B               	andwf	___xxtofl@arg^0,w,c
  3915   0026BC  6E05               	movwf	??___xxtofl^0,c
  3916   0026BE  0E00               	movlw	0
  3917   0026C0  140C               	andwf	(___xxtofl@arg+1)^0,w,c
  3918   0026C2  6E06               	movwf	(??___xxtofl+1)^0,c
  3919   0026C4  0E00               	movlw	0
  3920   0026C6  140D               	andwf	(___xxtofl@arg+2)^0,w,c
  3921   0026C8  6E07               	movwf	(??___xxtofl+2)^0,c
  3922   0026CA  0EFF               	movlw	255
  3923   0026CC  140E               	andwf	(___xxtofl@arg+3)^0,w,c
  3924   0026CE  6E08               	movwf	(??___xxtofl+3)^0,c
  3925   0026D0  5005               	movf	??___xxtofl^0,w,c
  3926   0026D2  1006               	iorwf	(??___xxtofl+1)^0,w,c
  3927   0026D4  1007               	iorwf	(??___xxtofl+2)^0,w,c
  3928   0026D6  1008               	iorwf	(??___xxtofl+3)^0,w,c
  3929   0026D8  A4D8               	btfss	status,2,c
  3930   0026DA  EF71  F013         	goto	u3871
  3931   0026DE  EF73  F013         	goto	u3870
  3932   0026E2                     u3871:
  3933   0026E2  EF50  F013         	goto	l3588
  3934   0026E6                     u3870:
  3935   0026E6  EF7B  F013         	goto	l3596
  3936   0026EA                     l3594:
  3937   0026EA  060A               	decf	___xxtofl@exp^0,f,c
  3938   0026EC  90D8               	bcf	status,0,c
  3939   0026EE  360B               	rlcf	___xxtofl@arg^0,f,c
  3940   0026F0  360C               	rlcf	(___xxtofl@arg+1)^0,f,c
  3941   0026F2  360D               	rlcf	(___xxtofl@arg+2)^0,f,c
  3942   0026F4  360E               	rlcf	(___xxtofl@arg+3)^0,f,c
  3943   0026F6                     l3596:
  3944   0026F6  BE0D               	btfsc	(___xxtofl@arg+2)^0,7,c
  3945   0026F8  EF80  F013         	goto	u3881
  3946   0026FC  EF82  F013         	goto	u3880
  3947   002700                     u3881:
  3948   002700  EF8A  F013         	goto	l1025
  3949   002704                     u3880:
  3950   002704  0E02               	movlw	2
  3951   002706  600A               	cpfslt	___xxtofl@exp^0,c
  3952   002708  EF88  F013         	goto	u3891
  3953   00270C  EF8A  F013         	goto	u3890
  3954   002710                     u3891:
  3955   002710  EF75  F013         	goto	l3594
  3956   002714                     u3890:
  3957   002714                     l1025:
  3958   002714  B00A               	btfsc	___xxtofl@exp^0,0,c
  3959   002716  EF8F  F013         	goto	u3901
  3960   00271A  EF91  F013         	goto	u3900
  3961   00271E                     u3901:
  3962   00271E  EF92  F013         	goto	l3602
  3963   002722                     u3900:
  3964   002722  9E0D               	bcf	(___xxtofl@arg+2)^0,7,c
  3965   002724                     l3602:
  3966   002724  90D8               	bcf	status,0,c
  3967   002726  320A               	rrcf	___xxtofl@exp^0,f,c
  3968   002728  C00A  F005         	movff	___xxtofl@exp,??___xxtofl
  3969   00272C  6A06               	clrf	(??___xxtofl+1)^0,c
  3970   00272E  6A07               	clrf	(??___xxtofl+2)^0,c
  3971   002730  6A08               	clrf	(??___xxtofl+3)^0,c
  3972   002732  C005  F008         	movff	??___xxtofl,??___xxtofl+3
  3973   002736  6A07               	clrf	(??___xxtofl+2)^0,c
  3974   002738  6A06               	clrf	(??___xxtofl+1)^0,c
  3975   00273A  6A05               	clrf	??___xxtofl^0,c
  3976   00273C  5005               	movf	??___xxtofl^0,w,c
  3977   00273E  120B               	iorwf	___xxtofl@arg^0,f,c
  3978   002740  5006               	movf	(??___xxtofl+1)^0,w,c
  3979   002742  120C               	iorwf	(___xxtofl@arg+1)^0,f,c
  3980   002744  5007               	movf	(??___xxtofl+2)^0,w,c
  3981   002746  120D               	iorwf	(___xxtofl@arg+2)^0,f,c
  3982   002748  5008               	movf	(??___xxtofl+3)^0,w,c
  3983   00274A  120E               	iorwf	(___xxtofl@arg+3)^0,f,c
  3984   00274C  5009               	movf	___xxtofl@sign^0,w,c
  3985   00274E  B4D8               	btfsc	status,2,c
  3986   002750  EFAC  F013         	goto	u3911
  3987   002754  EFAE  F013         	goto	u3910
  3988   002758                     u3911:
  3989   002758  EFB6  F013         	goto	l3612
  3990   00275C                     u3910:
  3991   00275C  BE04               	btfsc	(___xxtofl@val+3)^0,7,c
  3992   00275E  EFB5  F013         	goto	u3920
  3993   002762  EFB3  F013         	goto	u3921
  3994   002766                     u3921:
  3995   002766  EFB6  F013         	goto	l3612
  3996   00276A                     u3920:
  3997   00276A  8E0E               	bsf	(___xxtofl@arg+3)^0,7,c
  3998   00276C                     l3612:
  3999   00276C  C00B  F001         	movff	___xxtofl@arg,?___xxtofl
  4000   002770  C00C  F002         	movff	___xxtofl@arg+1,?___xxtofl+1
  4001   002774  C00D  F003         	movff	___xxtofl@arg+2,?___xxtofl+2
  4002   002778  C00E  F004         	movff	___xxtofl@arg+3,?___xxtofl+3
  4003   00277C                     l1014:
  4004   00277C  0012               	return		;funcret
  4005   00277E                     __end_of___xxtofl:
  4006                           	callstack 0
  4007                           
  4008 ;; *************** function ___fltol *****************
  4009 ;; Defined at:
  4010 ;;		line 43 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\fltol.c"
  4011 ;; Parameters:    Size  Location     Type
  4012 ;;  f1              4   55[COMRAM] unsigned char 
  4013 ;; Auto vars:     Size  Location     Type
  4014 ;;  exp1            1   64[COMRAM] unsigned char 
  4015 ;;  sign1           1   63[COMRAM] unsigned char 
  4016 ;; Return value:  Size  Location     Type
  4017 ;;                  4   55[COMRAM] long 
  4018 ;; Registers used:
  4019 ;;		wreg, status,2, status,0
  4020 ;; Tracked objects:
  4021 ;;		On entry : 0/0
  4022 ;;		On exit  : 0/0
  4023 ;;		Unchanged: 0/0
  4024 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4025 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4026 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4027 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4028 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4029 ;;Total ram usage:       10 bytes
  4030 ;; Hardware stack levels used: 1
  4031 ;; Hardware stack levels required when called: 1
  4032 ;; This function calls:
  4033 ;;		Nothing
  4034 ;; This function is called by:
  4035 ;;		_main
  4036 ;; This function uses a non-reentrant model
  4037 ;;
  4038                           
  4039                           	psect	text14
  4040   002B88                     __ptext14:
  4041                           	callstack 0
  4042   002B88                     ___fltol:
  4043                           	callstack 29
  4044   002B88  343A               	rlcf	(___fltol@f1+2)^0,w,c
  4045   002B8A  343B               	rlcf	(___fltol@f1+3)^0,w,c
  4046   002B8C  6E41               	movwf	___fltol@exp1^0,c
  4047   002B8E  5041               	movf	___fltol@exp1^0,w,c
  4048   002B90  A4D8               	btfss	status,2,c
  4049   002B92  EFCD  F015         	goto	u3761
  4050   002B96  EFCF  F015         	goto	u3760
  4051   002B9A                     u3761:
  4052   002B9A  EFD9  F015         	goto	l3532
  4053   002B9E                     u3760:
  4054   002B9E                     l3528:
  4055   002B9E  0E00               	movlw	0
  4056   002BA0  6E38               	movwf	?___fltol^0,c
  4057   002BA2  0E00               	movlw	0
  4058   002BA4  6E39               	movwf	(?___fltol+1)^0,c
  4059   002BA6  0E00               	movlw	0
  4060   002BA8  6E3A               	movwf	(?___fltol+2)^0,c
  4061   002BAA  0E00               	movlw	0
  4062   002BAC  6E3B               	movwf	(?___fltol+3)^0,c
  4063   002BAE  EF46  F016         	goto	l653
  4064   002BB2                     l3532:
  4065   002BB2  C038  F03C         	movff	___fltol@f1,??___fltol
  4066   002BB6  C039  F03D         	movff	___fltol@f1+1,??___fltol+1
  4067   002BBA  C03A  F03E         	movff	___fltol@f1+2,??___fltol+2
  4068   002BBE  C03B  F03F         	movff	___fltol@f1+3,??___fltol+3
  4069   002BC2  0E20               	movlw	32
  4070   002BC4  EFE9  F015         	goto	u3770
  4071   002BC8                     u3775:
  4072   002BC8  90D8               	bcf	status,0,c
  4073   002BCA  323F               	rrcf	(??___fltol+3)^0,f,c
  4074   002BCC  323E               	rrcf	(??___fltol+2)^0,f,c
  4075   002BCE  323D               	rrcf	(??___fltol+1)^0,f,c
  4076   002BD0  323C               	rrcf	??___fltol^0,f,c
  4077   002BD2                     u3770:
  4078   002BD2  2EE8               	decfsz	wreg,f,c
  4079   002BD4  EFE4  F015         	goto	u3775
  4080   002BD8  503C               	movf	??___fltol^0,w,c
  4081   002BDA  6E40               	movwf	___fltol@sign1^0,c
  4082   002BDC  8E3A               	bsf	(___fltol@f1+2)^0,7,c
  4083   002BDE  0EFF               	movlw	255
  4084   002BE0  1638               	andwf	___fltol@f1^0,f,c
  4085   002BE2  0EFF               	movlw	255
  4086   002BE4  1639               	andwf	(___fltol@f1+1)^0,f,c
  4087   002BE6  0EFF               	movlw	255
  4088   002BE8  163A               	andwf	(___fltol@f1+2)^0,f,c
  4089   002BEA  0E00               	movlw	0
  4090   002BEC  163B               	andwf	(___fltol@f1+3)^0,f,c
  4091   002BEE  0E96               	movlw	150
  4092   002BF0  5E41               	subwf	___fltol@exp1^0,f,c
  4093   002BF2  BE41               	btfsc	___fltol@exp1^0,7,c
  4094   002BF4  EF00  F016         	goto	u3780
  4095   002BF8  EFFE  F015         	goto	u3781
  4096   002BFC                     u3781:
  4097   002BFC  EF16  F016         	goto	l3552
  4098   002C00                     u3780:
  4099   002C00  5041               	movf	___fltol@exp1^0,w,c
  4100   002C02  0A80               	xorlw	128
  4101   002C04  0F97               	addlw	151
  4102   002C06  B0D8               	btfsc	status,0,c
  4103   002C08  EF08  F016         	goto	u3791
  4104   002C0C  EF0A  F016         	goto	u3790
  4105   002C10                     u3791:
  4106   002C10  EF0C  F016         	goto	l3548
  4107   002C14                     u3790:
  4108   002C14  EFCF  F015         	goto	l3528
  4109   002C18                     l3548:
  4110   002C18  90D8               	bcf	status,0,c
  4111   002C1A  323B               	rrcf	(___fltol@f1+3)^0,f,c
  4112   002C1C  323A               	rrcf	(___fltol@f1+2)^0,f,c
  4113   002C1E  3239               	rrcf	(___fltol@f1+1)^0,f,c
  4114   002C20  3238               	rrcf	___fltol@f1^0,f,c
  4115   002C22  3E41               	incfsz	___fltol@exp1^0,f,c
  4116   002C24  EF0C  F016         	goto	l3548
  4117   002C28  EF2E  F016         	goto	l3562
  4118   002C2C                     l3552:
  4119   002C2C  0E1F               	movlw	31
  4120   002C2E  6441               	cpfsgt	___fltol@exp1^0,c
  4121   002C30  EF1C  F016         	goto	u3801
  4122   002C34  EF1E  F016         	goto	u3800
  4123   002C38                     u3801:
  4124   002C38  EF26  F016         	goto	l3560
  4125   002C3C                     u3800:
  4126   002C3C  EFCF  F015         	goto	l3528
  4127   002C40                     l3558:
  4128   002C40  90D8               	bcf	status,0,c
  4129   002C42  3638               	rlcf	___fltol@f1^0,f,c
  4130   002C44  3639               	rlcf	(___fltol@f1+1)^0,f,c
  4131   002C46  363A               	rlcf	(___fltol@f1+2)^0,f,c
  4132   002C48  363B               	rlcf	(___fltol@f1+3)^0,f,c
  4133   002C4A  0641               	decf	___fltol@exp1^0,f,c
  4134   002C4C                     l3560:
  4135   002C4C  5041               	movf	___fltol@exp1^0,w,c
  4136   002C4E  A4D8               	btfss	status,2,c
  4137   002C50  EF2C  F016         	goto	u3811
  4138   002C54  EF2E  F016         	goto	u3810
  4139   002C58                     u3811:
  4140   002C58  EF20  F016         	goto	l3558
  4141   002C5C                     u3810:
  4142   002C5C                     l3562:
  4143   002C5C  5040               	movf	___fltol@sign1^0,w,c
  4144   002C5E  B4D8               	btfsc	status,2,c
  4145   002C60  EF34  F016         	goto	u3821
  4146   002C64  EF36  F016         	goto	u3820
  4147   002C68                     u3821:
  4148   002C68  EF3E  F016         	goto	l3566
  4149   002C6C                     u3820:
  4150   002C6C  1E3B               	comf	(___fltol@f1+3)^0,f,c
  4151   002C6E  1E3A               	comf	(___fltol@f1+2)^0,f,c
  4152   002C70  1E39               	comf	(___fltol@f1+1)^0,f,c
  4153   002C72  6C38               	negf	___fltol@f1^0,c
  4154   002C74  0E00               	movlw	0
  4155   002C76  2239               	addwfc	(___fltol@f1+1)^0,f,c
  4156   002C78  223A               	addwfc	(___fltol@f1+2)^0,f,c
  4157   002C7A  223B               	addwfc	(___fltol@f1+3)^0,f,c
  4158   002C7C                     l3566:
  4159   002C7C  C038  F038         	movff	___fltol@f1,?___fltol
  4160   002C80  C039  F039         	movff	___fltol@f1+1,?___fltol+1
  4161   002C84  C03A  F03A         	movff	___fltol@f1+2,?___fltol+2
  4162   002C88  C03B  F03B         	movff	___fltol@f1+3,?___fltol+3
  4163   002C8C                     l653:
  4164   002C8C  0012               	return		;funcret
  4165   002C8E                     __end_of___fltol:
  4166                           	callstack 0
  4167                           
  4168 ;; *************** function ___flmul *****************
  4169 ;; Defined at:
  4170 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\sprcmul.c"
  4171 ;; Parameters:    Size  Location     Type
  4172 ;;  b               4   14[COMRAM] long 
  4173 ;;  a               4   18[COMRAM] long 
  4174 ;; Auto vars:     Size  Location     Type
  4175 ;;  prod            4   33[COMRAM] struct .
  4176 ;;  grs             4   27[COMRAM] unsigned long 
  4177 ;;  temp            2   37[COMRAM] struct .
  4178 ;;  bexp            1   32[COMRAM] unsigned char 
  4179 ;;  aexp            1   31[COMRAM] unsigned char 
  4180 ;;  sign            1   26[COMRAM] unsigned char 
  4181 ;; Return value:  Size  Location     Type
  4182 ;;                  4   14[COMRAM] unsigned char 
  4183 ;; Registers used:
  4184 ;;		wreg, status,2, status,0, prodl, prodh
  4185 ;; Tracked objects:
  4186 ;;		On entry : 0/0
  4187 ;;		On exit  : 0/0
  4188 ;;		Unchanged: 0/0
  4189 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4190 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4191 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4192 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4193 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4194 ;;Total ram usage:       25 bytes
  4195 ;; Hardware stack levels used: 1
  4196 ;; Hardware stack levels required when called: 1
  4197 ;; This function calls:
  4198 ;;		Nothing
  4199 ;; This function is called by:
  4200 ;;		_main
  4201 ;; This function uses a non-reentrant model
  4202 ;;
  4203                           
  4204                           	psect	text15
  4205   0021A0                     __ptext15:
  4206                           	callstack 0
  4207   0021A0                     ___flmul:
  4208                           	callstack 29
  4209   0021A0  5012               	movf	(___flmul@b+3)^0,w,c
  4210   0021A2  0B80               	andlw	128
  4211   0021A4  6E1B               	movwf	___flmul@sign^0,c
  4212   0021A6  5012               	movf	(___flmul@b+3)^0,w,c
  4213   0021A8  2412               	addwf	(___flmul@b+3)^0,w,c
  4214   0021AA  6E21               	movwf	___flmul@bexp^0,c
  4215   0021AC  AE11               	btfss	(___flmul@b+2)^0,7,c
  4216   0021AE  EFDB  F010         	goto	u3571
  4217   0021B2  EFDD  F010         	goto	u3570
  4218   0021B6                     u3571:
  4219   0021B6  EFDE  F010         	goto	l3402
  4220   0021BA                     u3570:
  4221   0021BA  8021               	bsf	___flmul@bexp^0,0,c
  4222   0021BC                     l3402:
  4223   0021BC  5021               	movf	___flmul@bexp^0,w,c
  4224   0021BE  B4D8               	btfsc	status,2,c
  4225   0021C0  EFE4  F010         	goto	u3581
  4226   0021C4  EFE6  F010         	goto	u3580
  4227   0021C8                     u3581:
  4228   0021C8  EFF9  F010         	goto	l3410
  4229   0021CC                     u3580:
  4230   0021CC  2821               	incf	___flmul@bexp^0,w,c
  4231   0021CE  A4D8               	btfss	status,2,c
  4232   0021D0  EFEC  F010         	goto	u3591
  4233   0021D4  EFEE  F010         	goto	u3590
  4234   0021D8                     u3591:
  4235   0021D8  EFF6  F010         	goto	l3408
  4236   0021DC                     u3590:
  4237   0021DC  0E00               	movlw	0
  4238   0021DE  6E0F               	movwf	___flmul@b^0,c
  4239   0021E0  0E00               	movlw	0
  4240   0021E2  6E10               	movwf	(___flmul@b+1)^0,c
  4241   0021E4  0E00               	movlw	0
  4242   0021E6  6E11               	movwf	(___flmul@b+2)^0,c
  4243   0021E8  0E00               	movlw	0
  4244   0021EA  6E12               	movwf	(___flmul@b+3)^0,c
  4245   0021EC                     l3408:
  4246   0021EC  8E11               	bsf	(___flmul@b+2)^0,7,c
  4247   0021EE  EF01  F011         	goto	l3412
  4248   0021F2                     l3410:
  4249   0021F2  0E00               	movlw	0
  4250   0021F4  6E0F               	movwf	___flmul@b^0,c
  4251   0021F6  0E00               	movlw	0
  4252   0021F8  6E10               	movwf	(___flmul@b+1)^0,c
  4253   0021FA  0E00               	movlw	0
  4254   0021FC  6E11               	movwf	(___flmul@b+2)^0,c
  4255   0021FE  0E00               	movlw	0
  4256   002200  6E12               	movwf	(___flmul@b+3)^0,c
  4257   002202                     l3412:
  4258   002202  5016               	movf	(___flmul@a+3)^0,w,c
  4259   002204  0B80               	andlw	128
  4260   002206  1A1B               	xorwf	___flmul@sign^0,f,c
  4261   002208  5016               	movf	(___flmul@a+3)^0,w,c
  4262   00220A  2416               	addwf	(___flmul@a+3)^0,w,c
  4263   00220C  6E20               	movwf	___flmul@aexp^0,c
  4264   00220E  AE15               	btfss	(___flmul@a+2)^0,7,c
  4265   002210  EF0C  F011         	goto	u3601
  4266   002214  EF0E  F011         	goto	u3600
  4267   002218                     u3601:
  4268   002218  EF0F  F011         	goto	l3420
  4269   00221C                     u3600:
  4270   00221C  8020               	bsf	___flmul@aexp^0,0,c
  4271   00221E                     l3420:
  4272   00221E  5020               	movf	___flmul@aexp^0,w,c
  4273   002220  B4D8               	btfsc	status,2,c
  4274   002222  EF15  F011         	goto	u3611
  4275   002226  EF17  F011         	goto	u3610
  4276   00222A                     u3611:
  4277   00222A  EF2A  F011         	goto	l3428
  4278   00222E                     u3610:
  4279   00222E  2820               	incf	___flmul@aexp^0,w,c
  4280   002230  A4D8               	btfss	status,2,c
  4281   002232  EF1D  F011         	goto	u3621
  4282   002236  EF1F  F011         	goto	u3620
  4283   00223A                     u3621:
  4284   00223A  EF27  F011         	goto	l3426
  4285   00223E                     u3620:
  4286   00223E  0E00               	movlw	0
  4287   002240  6E13               	movwf	___flmul@a^0,c
  4288   002242  0E00               	movlw	0
  4289   002244  6E14               	movwf	(___flmul@a+1)^0,c
  4290   002246  0E00               	movlw	0
  4291   002248  6E15               	movwf	(___flmul@a+2)^0,c
  4292   00224A  0E00               	movlw	0
  4293   00224C  6E16               	movwf	(___flmul@a+3)^0,c
  4294   00224E                     l3426:
  4295   00224E  8E15               	bsf	(___flmul@a+2)^0,7,c
  4296   002250  EF32  F011         	goto	l970
  4297   002254                     l3428:
  4298   002254  0E00               	movlw	0
  4299   002256  6E13               	movwf	___flmul@a^0,c
  4300   002258  0E00               	movlw	0
  4301   00225A  6E14               	movwf	(___flmul@a+1)^0,c
  4302   00225C  0E00               	movlw	0
  4303   00225E  6E15               	movwf	(___flmul@a+2)^0,c
  4304   002260  0E00               	movlw	0
  4305   002262  6E16               	movwf	(___flmul@a+3)^0,c
  4306   002264                     l970:
  4307   002264  5020               	movf	___flmul@aexp^0,w,c
  4308   002266  B4D8               	btfsc	status,2,c
  4309   002268  EF38  F011         	goto	u3631
  4310   00226C  EF3A  F011         	goto	u3630
  4311   002270                     u3631:
  4312   002270  EF42  F011         	goto	l3432
  4313   002274                     u3630:
  4314   002274  5021               	movf	___flmul@bexp^0,w,c
  4315   002276  A4D8               	btfss	status,2,c
  4316   002278  EF40  F011         	goto	u3641
  4317   00227C  EF42  F011         	goto	u3640
  4318   002280                     u3641:
  4319   002280  EF4C  F011         	goto	l3436
  4320   002284                     u3640:
  4321   002284                     l3432:
  4322   002284  0E00               	movlw	0
  4323   002286  6E0F               	movwf	?___flmul^0,c
  4324   002288  0E00               	movlw	0
  4325   00228A  6E10               	movwf	(?___flmul+1)^0,c
  4326   00228C  0E00               	movlw	0
  4327   00228E  6E11               	movwf	(?___flmul+2)^0,c
  4328   002290  0E00               	movlw	0
  4329   002292  6E12               	movwf	(?___flmul+3)^0,c
  4330   002294  EFE4  F012         	goto	l974
  4331   002298                     l3436:
  4332   002298  5015               	movf	(___flmul@a+2)^0,w,c
  4333   00229A  020F               	mulwf	___flmul@b^0,c
  4334   00229C  CFF3 F026          	movff	prodl,___flmul@temp
  4335   0022A0  CFF4 F027          	movff	prodh,___flmul@temp+1
  4336   0022A4  5026               	movf	___flmul@temp^0,w,c
  4337   0022A6  6E1C               	movwf	___flmul@grs^0,c
  4338   0022A8  6A1D               	clrf	(___flmul@grs+1)^0,c
  4339   0022AA  6A1E               	clrf	(___flmul@grs+2)^0,c
  4340   0022AC  6A1F               	clrf	(___flmul@grs+3)^0,c
  4341   0022AE  5027               	movf	(___flmul@temp+1)^0,w,c
  4342   0022B0  6E22               	movwf	___flmul@prod^0,c
  4343   0022B2  6A23               	clrf	(___flmul@prod+1)^0,c
  4344   0022B4  6A24               	clrf	(___flmul@prod+2)^0,c
  4345   0022B6  6A25               	clrf	(___flmul@prod+3)^0,c
  4346   0022B8  5014               	movf	(___flmul@a+1)^0,w,c
  4347   0022BA  0210               	mulwf	(___flmul@b+1)^0,c
  4348   0022BC  CFF3 F026          	movff	prodl,___flmul@temp
  4349   0022C0  CFF4 F027          	movff	prodh,___flmul@temp+1
  4350   0022C4  5026               	movf	___flmul@temp^0,w,c
  4351   0022C6  261C               	addwf	___flmul@grs^0,f,c
  4352   0022C8  0E00               	movlw	0
  4353   0022CA  221D               	addwfc	(___flmul@grs+1)^0,f,c
  4354   0022CC  221E               	addwfc	(___flmul@grs+2)^0,f,c
  4355   0022CE  221F               	addwfc	(___flmul@grs+3)^0,f,c
  4356   0022D0  5027               	movf	(___flmul@temp+1)^0,w,c
  4357   0022D2  2622               	addwf	___flmul@prod^0,f,c
  4358   0022D4  0E00               	movlw	0
  4359   0022D6  2223               	addwfc	(___flmul@prod+1)^0,f,c
  4360   0022D8  2224               	addwfc	(___flmul@prod+2)^0,f,c
  4361   0022DA  2225               	addwfc	(___flmul@prod+3)^0,f,c
  4362   0022DC  5013               	movf	___flmul@a^0,w,c
  4363   0022DE  0211               	mulwf	(___flmul@b+2)^0,c
  4364   0022E0  CFF3 F026          	movff	prodl,___flmul@temp
  4365   0022E4  CFF4 F027          	movff	prodh,___flmul@temp+1
  4366   0022E8  5026               	movf	___flmul@temp^0,w,c
  4367   0022EA  261C               	addwf	___flmul@grs^0,f,c
  4368   0022EC  0E00               	movlw	0
  4369   0022EE  221D               	addwfc	(___flmul@grs+1)^0,f,c
  4370   0022F0  221E               	addwfc	(___flmul@grs+2)^0,f,c
  4371   0022F2  221F               	addwfc	(___flmul@grs+3)^0,f,c
  4372   0022F4  5027               	movf	(___flmul@temp+1)^0,w,c
  4373   0022F6  2622               	addwf	___flmul@prod^0,f,c
  4374   0022F8  0E00               	movlw	0
  4375   0022FA  2223               	addwfc	(___flmul@prod+1)^0,f,c
  4376   0022FC  2224               	addwfc	(___flmul@prod+2)^0,f,c
  4377   0022FE  2225               	addwfc	(___flmul@prod+3)^0,f,c
  4378   002300  C01E  F01F         	movff	___flmul@grs+2,___flmul@grs+3
  4379   002304  C01D  F01E         	movff	___flmul@grs+1,___flmul@grs+2
  4380   002308  C01C  F01D         	movff	___flmul@grs,___flmul@grs+1
  4381   00230C  6A1C               	clrf	___flmul@grs^0,c
  4382   00230E  5013               	movf	___flmul@a^0,w,c
  4383   002310  0210               	mulwf	(___flmul@b+1)^0,c
  4384   002312  CFF3 F026          	movff	prodl,___flmul@temp
  4385   002316  CFF4 F027          	movff	prodh,___flmul@temp+1
  4386   00231A  5026               	movf	___flmul@temp^0,w,c
  4387   00231C  261C               	addwf	___flmul@grs^0,f,c
  4388   00231E  5027               	movf	(___flmul@temp+1)^0,w,c
  4389   002320  221D               	addwfc	(___flmul@grs+1)^0,f,c
  4390   002322  0E00               	movlw	0
  4391   002324  221E               	addwfc	(___flmul@grs+2)^0,f,c
  4392   002326  0E00               	movlw	0
  4393   002328  221F               	addwfc	(___flmul@grs+3)^0,f,c
  4394   00232A  5014               	movf	(___flmul@a+1)^0,w,c
  4395   00232C  020F               	mulwf	___flmul@b^0,c
  4396   00232E  CFF3 F026          	movff	prodl,___flmul@temp
  4397   002332  CFF4 F027          	movff	prodh,___flmul@temp+1
  4398   002336  5026               	movf	___flmul@temp^0,w,c
  4399   002338  261C               	addwf	___flmul@grs^0,f,c
  4400   00233A  5027               	movf	(___flmul@temp+1)^0,w,c
  4401   00233C  221D               	addwfc	(___flmul@grs+1)^0,f,c
  4402   00233E  0E00               	movlw	0
  4403   002340  221E               	addwfc	(___flmul@grs+2)^0,f,c
  4404   002342  0E00               	movlw	0
  4405   002344  221F               	addwfc	(___flmul@grs+3)^0,f,c
  4406   002346  C01E  F01F         	movff	___flmul@grs+2,___flmul@grs+3
  4407   00234A  C01D  F01E         	movff	___flmul@grs+1,___flmul@grs+2
  4408   00234E  C01C  F01D         	movff	___flmul@grs,___flmul@grs+1
  4409   002352  6A1C               	clrf	___flmul@grs^0,c
  4410   002354  5013               	movf	___flmul@a^0,w,c
  4411   002356  020F               	mulwf	___flmul@b^0,c
  4412   002358  CFF3 F026          	movff	prodl,___flmul@temp
  4413   00235C  CFF4 F027          	movff	prodh,___flmul@temp+1
  4414   002360  5026               	movf	___flmul@temp^0,w,c
  4415   002362  261C               	addwf	___flmul@grs^0,f,c
  4416   002364  5027               	movf	(___flmul@temp+1)^0,w,c
  4417   002366  221D               	addwfc	(___flmul@grs+1)^0,f,c
  4418   002368  0E00               	movlw	0
  4419   00236A  221E               	addwfc	(___flmul@grs+2)^0,f,c
  4420   00236C  0E00               	movlw	0
  4421   00236E  221F               	addwfc	(___flmul@grs+3)^0,f,c
  4422   002370  5015               	movf	(___flmul@a+2)^0,w,c
  4423   002372  0210               	mulwf	(___flmul@b+1)^0,c
  4424   002374  CFF3 F026          	movff	prodl,___flmul@temp
  4425   002378  CFF4 F027          	movff	prodh,___flmul@temp+1
  4426   00237C  5026               	movf	___flmul@temp^0,w,c
  4427   00237E  2622               	addwf	___flmul@prod^0,f,c
  4428   002380  5027               	movf	(___flmul@temp+1)^0,w,c
  4429   002382  2223               	addwfc	(___flmul@prod+1)^0,f,c
  4430   002384  0E00               	movlw	0
  4431   002386  2224               	addwfc	(___flmul@prod+2)^0,f,c
  4432   002388  0E00               	movlw	0
  4433   00238A  2225               	addwfc	(___flmul@prod+3)^0,f,c
  4434   00238C  5014               	movf	(___flmul@a+1)^0,w,c
  4435   00238E  0211               	mulwf	(___flmul@b+2)^0,c
  4436   002390  CFF3 F026          	movff	prodl,___flmul@temp
  4437   002394  CFF4 F027          	movff	prodh,___flmul@temp+1
  4438   002398  5026               	movf	___flmul@temp^0,w,c
  4439   00239A  2622               	addwf	___flmul@prod^0,f,c
  4440   00239C  5027               	movf	(___flmul@temp+1)^0,w,c
  4441   00239E  2223               	addwfc	(___flmul@prod+1)^0,f,c
  4442   0023A0  0E00               	movlw	0
  4443   0023A2  2224               	addwfc	(___flmul@prod+2)^0,f,c
  4444   0023A4  0E00               	movlw	0
  4445   0023A6  2225               	addwfc	(___flmul@prod+3)^0,f,c
  4446   0023A8  5015               	movf	(___flmul@a+2)^0,w,c
  4447   0023AA  0211               	mulwf	(___flmul@b+2)^0,c
  4448   0023AC  CFF3 F026          	movff	prodl,___flmul@temp
  4449   0023B0  CFF4 F027          	movff	prodh,___flmul@temp+1
  4450   0023B4  5026               	movf	___flmul@temp^0,w,c
  4451   0023B6  6E17               	movwf	??___flmul^0,c
  4452   0023B8  5027               	movf	(___flmul@temp+1)^0,w,c
  4453   0023BA  6E18               	movwf	(??___flmul+1)^0,c
  4454   0023BC  6A19               	clrf	(??___flmul+2)^0,c
  4455   0023BE  6A1A               	clrf	(??___flmul+3)^0,c
  4456   0023C0  C019  F01A         	movff	??___flmul+2,??___flmul+3
  4457   0023C4  C018  F019         	movff	??___flmul+1,??___flmul+2
  4458   0023C8  C017  F018         	movff	??___flmul,??___flmul+1
  4459   0023CC  6A17               	clrf	??___flmul^0,c
  4460   0023CE  5017               	movf	??___flmul^0,w,c
  4461   0023D0  2622               	addwf	___flmul@prod^0,f,c
  4462   0023D2  5018               	movf	(??___flmul+1)^0,w,c
  4463   0023D4  2223               	addwfc	(___flmul@prod+1)^0,f,c
  4464   0023D6  5019               	movf	(??___flmul+2)^0,w,c
  4465   0023D8  2224               	addwfc	(___flmul@prod+2)^0,f,c
  4466   0023DA  501A               	movf	(??___flmul+3)^0,w,c
  4467   0023DC  2225               	addwfc	(___flmul@prod+3)^0,f,c
  4468   0023DE  C01C  F017         	movff	___flmul@grs,??___flmul
  4469   0023E2  C01D  F018         	movff	___flmul@grs+1,??___flmul+1
  4470   0023E6  C01E  F019         	movff	___flmul@grs+2,??___flmul+2
  4471   0023EA  C01F  F01A         	movff	___flmul@grs+3,??___flmul+3
  4472   0023EE  0E19               	movlw	25
  4473   0023F0  EFFF  F011         	goto	u3650
  4474   0023F4                     u3655:
  4475   0023F4  90D8               	bcf	status,0,c
  4476   0023F6  321A               	rrcf	(??___flmul+3)^0,f,c
  4477   0023F8  3219               	rrcf	(??___flmul+2)^0,f,c
  4478   0023FA  3218               	rrcf	(??___flmul+1)^0,f,c
  4479   0023FC  3217               	rrcf	??___flmul^0,f,c
  4480   0023FE                     u3650:
  4481   0023FE  2EE8               	decfsz	wreg,f,c
  4482   002400  EFFA  F011         	goto	u3655
  4483   002404  5017               	movf	??___flmul^0,w,c
  4484   002406  2622               	addwf	___flmul@prod^0,f,c
  4485   002408  5018               	movf	(??___flmul+1)^0,w,c
  4486   00240A  2223               	addwfc	(___flmul@prod+1)^0,f,c
  4487   00240C  5019               	movf	(??___flmul+2)^0,w,c
  4488   00240E  2224               	addwfc	(___flmul@prod+2)^0,f,c
  4489   002410  501A               	movf	(??___flmul+3)^0,w,c
  4490   002412  2225               	addwfc	(___flmul@prod+3)^0,f,c
  4491   002414  C01E  F01F         	movff	___flmul@grs+2,___flmul@grs+3
  4492   002418  C01D  F01E         	movff	___flmul@grs+1,___flmul@grs+2
  4493   00241C  C01C  F01D         	movff	___flmul@grs,___flmul@grs+1
  4494   002420  6A1C               	clrf	___flmul@grs^0,c
  4495   002422  5020               	movf	___flmul@aexp^0,w,c
  4496   002424  C021  F017         	movff	___flmul@bexp,??___flmul
  4497   002428  6A18               	clrf	(??___flmul+1)^0,c
  4498   00242A  2617               	addwf	??___flmul^0,f,c
  4499   00242C  0E00               	movlw	0
  4500   00242E  2218               	addwfc	(??___flmul+1)^0,f,c
  4501   002430  0E82               	movlw	130
  4502   002432  2417               	addwf	??___flmul^0,w,c
  4503   002434  6E26               	movwf	___flmul@temp^0,c
  4504   002436  0EFF               	movlw	255
  4505   002438  2018               	addwfc	(??___flmul+1)^0,w,c
  4506   00243A  6E27               	movwf	(___flmul@temp+1)^0,c
  4507   00243C  EF35  F012         	goto	l3484
  4508   002440                     l3478:
  4509   002440  90D8               	bcf	status,0,c
  4510   002442  3622               	rlcf	___flmul@prod^0,f,c
  4511   002444  3623               	rlcf	(___flmul@prod+1)^0,f,c
  4512   002446  3624               	rlcf	(___flmul@prod+2)^0,f,c
  4513   002448  3625               	rlcf	(___flmul@prod+3)^0,f,c
  4514   00244A  AE1F               	btfss	(___flmul@grs+3)^0,7,c
  4515   00244C  EF2A  F012         	goto	u3661
  4516   002450  EF2C  F012         	goto	u3660
  4517   002454                     u3661:
  4518   002454  EF2D  F012         	goto	l977
  4519   002458                     u3660:
  4520   002458  8022               	bsf	___flmul@prod^0,0,c
  4521   00245A                     l977:
  4522   00245A  90D8               	bcf	status,0,c
  4523   00245C  361C               	rlcf	___flmul@grs^0,f,c
  4524   00245E  361D               	rlcf	(___flmul@grs+1)^0,f,c
  4525   002460  361E               	rlcf	(___flmul@grs+2)^0,f,c
  4526   002462  361F               	rlcf	(___flmul@grs+3)^0,f,c
  4527   002464  0626               	decf	___flmul@temp^0,f,c
  4528   002466  A0D8               	btfss	status,0,c
  4529   002468  0627               	decf	(___flmul@temp+1)^0,f,c
  4530   00246A                     l3484:
  4531   00246A  AE24               	btfss	(___flmul@prod+2)^0,7,c
  4532   00246C  EF3A  F012         	goto	u3671
  4533   002470  EF3C  F012         	goto	u3670
  4534   002474                     u3671:
  4535   002474  EF20  F012         	goto	l3478
  4536   002478                     u3670:
  4537   002478  0E00               	movlw	0
  4538   00247A  6E20               	movwf	___flmul@aexp^0,c
  4539   00247C  AE1F               	btfss	(___flmul@grs+3)^0,7,c
  4540   00247E  EF43  F012         	goto	u3681
  4541   002482  EF45  F012         	goto	u3680
  4542   002486                     u3681:
  4543   002486  EF69  F012         	goto	l979
  4544   00248A                     u3680:
  4545   00248A  0EFF               	movlw	255
  4546   00248C  141C               	andwf	___flmul@grs^0,w,c
  4547   00248E  6E17               	movwf	??___flmul^0,c
  4548   002490  0EFF               	movlw	255
  4549   002492  141D               	andwf	(___flmul@grs+1)^0,w,c
  4550   002494  6E18               	movwf	(??___flmul+1)^0,c
  4551   002496  0EFF               	movlw	255
  4552   002498  141E               	andwf	(___flmul@grs+2)^0,w,c
  4553   00249A  6E19               	movwf	(??___flmul+2)^0,c
  4554   00249C  0E7F               	movlw	127
  4555   00249E  141F               	andwf	(___flmul@grs+3)^0,w,c
  4556   0024A0  6E1A               	movwf	(??___flmul+3)^0,c
  4557   0024A2  5017               	movf	??___flmul^0,w,c
  4558   0024A4  1018               	iorwf	(??___flmul+1)^0,w,c
  4559   0024A6  1019               	iorwf	(??___flmul+2)^0,w,c
  4560   0024A8  101A               	iorwf	(??___flmul+3)^0,w,c
  4561   0024AA  B4D8               	btfsc	status,2,c
  4562   0024AC  EF5A  F012         	goto	u3691
  4563   0024B0  EF5C  F012         	goto	u3690
  4564   0024B4                     u3691:
  4565   0024B4  EF60  F012         	goto	l980
  4566   0024B8                     u3690:
  4567   0024B8                     l3492:
  4568   0024B8  0E01               	movlw	1
  4569   0024BA  6E20               	movwf	___flmul@aexp^0,c
  4570   0024BC  EF69  F012         	goto	l979
  4571   0024C0                     l980:
  4572   0024C0  A022               	btfss	___flmul@prod^0,0,c
  4573   0024C2  EF65  F012         	goto	u3701
  4574   0024C6  EF67  F012         	goto	u3700
  4575   0024CA                     u3701:
  4576   0024CA  EF69  F012         	goto	l979
  4577   0024CE                     u3700:
  4578   0024CE  EF5C  F012         	goto	l3492
  4579   0024D2                     l979:
  4580   0024D2  5020               	movf	___flmul@aexp^0,w,c
  4581   0024D4  B4D8               	btfsc	status,2,c
  4582   0024D6  EF6F  F012         	goto	u3711
  4583   0024DA  EF71  F012         	goto	u3710
  4584   0024DE                     u3711:
  4585   0024DE  EF95  F012         	goto	l3504
  4586   0024E2                     u3710:
  4587   0024E2  0E01               	movlw	1
  4588   0024E4  2622               	addwf	___flmul@prod^0,f,c
  4589   0024E6  0E00               	movlw	0
  4590   0024E8  2223               	addwfc	(___flmul@prod+1)^0,f,c
  4591   0024EA  2224               	addwfc	(___flmul@prod+2)^0,f,c
  4592   0024EC  2225               	addwfc	(___flmul@prod+3)^0,f,c
  4593   0024EE  A025               	btfss	(___flmul@prod+3)^0,0,c
  4594   0024F0  EF7C  F012         	goto	u3721
  4595   0024F4  EF7E  F012         	goto	u3720
  4596   0024F8                     u3721:
  4597   0024F8  EF95  F012         	goto	l3504
  4598   0024FC                     u3720:
  4599   0024FC  C022  F017         	movff	___flmul@prod,??___flmul
  4600   002500  C023  F018         	movff	___flmul@prod+1,??___flmul+1
  4601   002504  C024  F019         	movff	___flmul@prod+2,??___flmul+2
  4602   002508  C025  F01A         	movff	___flmul@prod+3,??___flmul+3
  4603   00250C  341A               	rlcf	(??___flmul+3)^0,w,c
  4604   00250E  321A               	rrcf	(??___flmul+3)^0,f,c
  4605   002510  3219               	rrcf	(??___flmul+2)^0,f,c
  4606   002512  3218               	rrcf	(??___flmul+1)^0,f,c
  4607   002514  3217               	rrcf	??___flmul^0,f,c
  4608   002516  C017  F022         	movff	??___flmul,___flmul@prod
  4609   00251A  C018  F023         	movff	??___flmul+1,___flmul@prod+1
  4610   00251E  C019  F024         	movff	??___flmul+2,___flmul@prod+2
  4611   002522  C01A  F025         	movff	??___flmul+3,___flmul@prod+3
  4612   002526  4A26               	infsnz	___flmul@temp^0,f,c
  4613   002528  2A27               	incf	(___flmul@temp+1)^0,f,c
  4614   00252A                     l3504:
  4615   00252A  BE27               	btfsc	(___flmul@temp+1)^0,7,c
  4616   00252C  EFA0  F012         	goto	u3731
  4617   002530  5027               	movf	(___flmul@temp+1)^0,w,c
  4618   002532  E108               	bnz	u3730
  4619   002534  2826               	incf	___flmul@temp^0,w,c
  4620   002536  A0D8               	btfss	status,0,c
  4621   002538  EFA0  F012         	goto	u3731
  4622   00253C  EFA2  F012         	goto	u3730
  4623   002540                     u3731:
  4624   002540  EFAC  F012         	goto	l3508
  4625   002544                     u3730:
  4626   002544  0E00               	movlw	0
  4627   002546  6E22               	movwf	___flmul@prod^0,c
  4628   002548  0E00               	movlw	0
  4629   00254A  6E23               	movwf	(___flmul@prod+1)^0,c
  4630   00254C  0E80               	movlw	128
  4631   00254E  6E24               	movwf	(___flmul@prod+2)^0,c
  4632   002550  0E7F               	movlw	127
  4633   002552  6E25               	movwf	(___flmul@prod+3)^0,c
  4634   002554  EFDA  F012         	goto	l3520
  4635   002558                     l3508:
  4636   002558  BE27               	btfsc	(___flmul@temp+1)^0,7,c
  4637   00255A  EFB9  F012         	goto	u3740
  4638   00255E  5027               	movf	(___flmul@temp+1)^0,w,c
  4639   002560  E106               	bnz	u3741
  4640   002562  0426               	decf	___flmul@temp^0,w,c
  4641   002564  B0D8               	btfsc	status,0,c
  4642   002566  EFB7  F012         	goto	u3741
  4643   00256A  EFB9  F012         	goto	u3740
  4644   00256E                     u3741:
  4645   00256E  EFC5  F012         	goto	l987
  4646   002572                     u3740:
  4647   002572  0E00               	movlw	0
  4648   002574  6E22               	movwf	___flmul@prod^0,c
  4649   002576  0E00               	movlw	0
  4650   002578  6E23               	movwf	(___flmul@prod+1)^0,c
  4651   00257A  0E00               	movlw	0
  4652   00257C  6E24               	movwf	(___flmul@prod+2)^0,c
  4653   00257E  0E00               	movlw	0
  4654   002580  6E25               	movwf	(___flmul@prod+3)^0,c
  4655   002582  0E00               	movlw	0
  4656   002584  6E1B               	movwf	___flmul@sign^0,c
  4657   002586  EFDA  F012         	goto	l3520
  4658   00258A                     l987:
  4659   00258A  C026  F021         	movff	___flmul@temp,___flmul@bexp
  4660   00258E  0EFF               	movlw	255
  4661   002590  1622               	andwf	___flmul@prod^0,f,c
  4662   002592  0EFF               	movlw	255
  4663   002594  1623               	andwf	(___flmul@prod+1)^0,f,c
  4664   002596  0E7F               	movlw	127
  4665   002598  1624               	andwf	(___flmul@prod+2)^0,f,c
  4666   00259A  0E00               	movlw	0
  4667   00259C  1625               	andwf	(___flmul@prod+3)^0,f,c
  4668   00259E  A021               	btfss	___flmul@bexp^0,0,c
  4669   0025A0  EFD4  F012         	goto	u3751
  4670   0025A4  EFD6  F012         	goto	u3750
  4671   0025A8                     u3751:
  4672   0025A8  EFD7  F012         	goto	l3518
  4673   0025AC                     u3750:
  4674   0025AC  8E24               	bsf	(___flmul@prod+2)^0,7,c
  4675   0025AE                     l3518:
  4676   0025AE  90D8               	bcf	status,0,c
  4677   0025B0  3021               	rrcf	___flmul@bexp^0,w,c
  4678   0025B2  6E25               	movwf	(___flmul@prod+3)^0,c
  4679   0025B4                     l3520:
  4680   0025B4  501B               	movf	___flmul@sign^0,w,c
  4681   0025B6  1225               	iorwf	(___flmul@prod+3)^0,f,c
  4682   0025B8  C022  F00F         	movff	___flmul@prod,?___flmul
  4683   0025BC  C023  F010         	movff	___flmul@prod+1,?___flmul+1
  4684   0025C0  C024  F011         	movff	___flmul@prod+2,?___flmul+2
  4685   0025C4  C025  F012         	movff	___flmul@prod+3,?___flmul+3
  4686   0025C8                     l974:
  4687   0025C8  0012               	return		;funcret
  4688   0025CA                     __end_of___flmul:
  4689                           	callstack 0
  4690                           
  4691 ;; *************** function ___fladd *****************
  4692 ;; Defined at:
  4693 ;;		line 10 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\sprcadd.c"
  4694 ;; Parameters:    Size  Location     Type
  4695 ;;  b               4   39[COMRAM] unsigned char 
  4696 ;;  a               4   43[COMRAM] unsigned char 
  4697 ;; Auto vars:     Size  Location     Type
  4698 ;;  grs             1   54[COMRAM] unsigned char 
  4699 ;;  bexp            1   53[COMRAM] unsigned char 
  4700 ;;  aexp            1   52[COMRAM] unsigned char 
  4701 ;;  signs           1   51[COMRAM] unsigned char 
  4702 ;; Return value:  Size  Location     Type
  4703 ;;                  4   39[COMRAM] unsigned char 
  4704 ;; Registers used:
  4705 ;;		wreg, status,2, status,0
  4706 ;; Tracked objects:
  4707 ;;		On entry : 0/0
  4708 ;;		On exit  : 0/0
  4709 ;;		Unchanged: 0/0
  4710 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4711 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4712 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4713 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4714 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4715 ;;Total ram usage:       16 bytes
  4716 ;; Hardware stack levels used: 1
  4717 ;; Hardware stack levels required when called: 1
  4718 ;; This function calls:
  4719 ;;		Nothing
  4720 ;; This function is called by:
  4721 ;;		_main
  4722 ;; This function uses a non-reentrant model
  4723 ;;
  4724                           
  4725                           	psect	text16
  4726   001CE0                     __ptext16:
  4727                           	callstack 0
  4728   001CE0                     ___fladd:
  4729                           	callstack 29
  4730   001CE0  502B               	movf	(___fladd@b+3)^0,w,c
  4731   001CE2  0B80               	andlw	128
  4732   001CE4  6E34               	movwf	___fladd@signs^0,c
  4733   001CE6  502B               	movf	(___fladd@b+3)^0,w,c
  4734   001CE8  242B               	addwf	(___fladd@b+3)^0,w,c
  4735   001CEA  6E36               	movwf	___fladd@bexp^0,c
  4736   001CEC  AE2A               	btfss	(___fladd@b+2)^0,7,c
  4737   001CEE  EF7B  F00E         	goto	u3181
  4738   001CF2  EF7D  F00E         	goto	u3180
  4739   001CF6                     u3181:
  4740   001CF6  EF7E  F00E         	goto	l3200
  4741   001CFA                     u3180:
  4742   001CFA  8036               	bsf	___fladd@bexp^0,0,c
  4743   001CFC                     l3200:
  4744   001CFC  5036               	movf	___fladd@bexp^0,w,c
  4745   001CFE  B4D8               	btfsc	status,2,c
  4746   001D00  EF84  F00E         	goto	u3191
  4747   001D04  EF86  F00E         	goto	u3190
  4748   001D08                     u3191:
  4749   001D08  EF9B  F00E         	goto	l3210
  4750   001D0C                     u3190:
  4751   001D0C  2836               	incf	___fladd@bexp^0,w,c
  4752   001D0E  A4D8               	btfss	status,2,c
  4753   001D10  EF8C  F00E         	goto	u3201
  4754   001D14  EF8E  F00E         	goto	u3200
  4755   001D18                     u3201:
  4756   001D18  EF96  F00E         	goto	l3206
  4757   001D1C                     u3200:
  4758   001D1C  0E00               	movlw	0
  4759   001D1E  6E28               	movwf	___fladd@b^0,c
  4760   001D20  0E00               	movlw	0
  4761   001D22  6E29               	movwf	(___fladd@b+1)^0,c
  4762   001D24  0E00               	movlw	0
  4763   001D26  6E2A               	movwf	(___fladd@b+2)^0,c
  4764   001D28  0E00               	movlw	0
  4765   001D2A  6E2B               	movwf	(___fladd@b+3)^0,c
  4766   001D2C                     l3206:
  4767   001D2C  8E2A               	bsf	(___fladd@b+2)^0,7,c
  4768   001D2E  0E00               	movlw	0
  4769   001D30  6E2B               	movwf	(___fladd@b+3)^0,c
  4770   001D32  EFA3  F00E         	goto	l3212
  4771   001D36                     l3210:
  4772   001D36  0E00               	movlw	0
  4773   001D38  6E28               	movwf	___fladd@b^0,c
  4774   001D3A  0E00               	movlw	0
  4775   001D3C  6E29               	movwf	(___fladd@b+1)^0,c
  4776   001D3E  0E00               	movlw	0
  4777   001D40  6E2A               	movwf	(___fladd@b+2)^0,c
  4778   001D42  0E00               	movlw	0
  4779   001D44  6E2B               	movwf	(___fladd@b+3)^0,c
  4780   001D46                     l3212:
  4781   001D46  502F               	movf	(___fladd@a+3)^0,w,c
  4782   001D48  0B80               	andlw	128
  4783   001D4A  6E35               	movwf	___fladd@aexp^0,c
  4784   001D4C  5034               	movf	___fladd@signs^0,w,c
  4785   001D4E  1835               	xorwf	___fladd@aexp^0,w,c
  4786   001D50  B4D8               	btfsc	status,2,c
  4787   001D52  EFAD  F00E         	goto	u3211
  4788   001D56  EFAF  F00E         	goto	u3210
  4789   001D5A                     u3211:
  4790   001D5A  EFB0  F00E         	goto	l3218
  4791   001D5E                     u3210:
  4792   001D5E  8C34               	bsf	___fladd@signs^0,6,c
  4793   001D60                     l3218:
  4794   001D60  502F               	movf	(___fladd@a+3)^0,w,c
  4795   001D62  242F               	addwf	(___fladd@a+3)^0,w,c
  4796   001D64  6E35               	movwf	___fladd@aexp^0,c
  4797   001D66  AE2E               	btfss	(___fladd@a+2)^0,7,c
  4798   001D68  EFB8  F00E         	goto	u3221
  4799   001D6C  EFBA  F00E         	goto	u3220
  4800   001D70                     u3221:
  4801   001D70  EFBB  F00E         	goto	l3224
  4802   001D74                     u3220:
  4803   001D74  8035               	bsf	___fladd@aexp^0,0,c
  4804   001D76                     l3224:
  4805   001D76  5035               	movf	___fladd@aexp^0,w,c
  4806   001D78  B4D8               	btfsc	status,2,c
  4807   001D7A  EFC1  F00E         	goto	u3231
  4808   001D7E  EFC3  F00E         	goto	u3230
  4809   001D82                     u3231:
  4810   001D82  EFD8  F00E         	goto	l3234
  4811   001D86                     u3230:
  4812   001D86  2835               	incf	___fladd@aexp^0,w,c
  4813   001D88  A4D8               	btfss	status,2,c
  4814   001D8A  EFC9  F00E         	goto	u3241
  4815   001D8E  EFCB  F00E         	goto	u3240
  4816   001D92                     u3241:
  4817   001D92  EFD3  F00E         	goto	l3230
  4818   001D96                     u3240:
  4819   001D96  0E00               	movlw	0
  4820   001D98  6E2C               	movwf	___fladd@a^0,c
  4821   001D9A  0E00               	movlw	0
  4822   001D9C  6E2D               	movwf	(___fladd@a+1)^0,c
  4823   001D9E  0E00               	movlw	0
  4824   001DA0  6E2E               	movwf	(___fladd@a+2)^0,c
  4825   001DA2  0E00               	movlw	0
  4826   001DA4  6E2F               	movwf	(___fladd@a+3)^0,c
  4827   001DA6                     l3230:
  4828   001DA6  8E2E               	bsf	(___fladd@a+2)^0,7,c
  4829   001DA8  0E00               	movlw	0
  4830   001DAA  6E2F               	movwf	(___fladd@a+3)^0,c
  4831   001DAC  EFE0  F00E         	goto	l3236
  4832   001DB0                     l3234:
  4833   001DB0  0E00               	movlw	0
  4834   001DB2  6E2C               	movwf	___fladd@a^0,c
  4835   001DB4  0E00               	movlw	0
  4836   001DB6  6E2D               	movwf	(___fladd@a+1)^0,c
  4837   001DB8  0E00               	movlw	0
  4838   001DBA  6E2E               	movwf	(___fladd@a+2)^0,c
  4839   001DBC  0E00               	movlw	0
  4840   001DBE  6E2F               	movwf	(___fladd@a+3)^0,c
  4841   001DC0                     l3236:
  4842   001DC0  5036               	movf	___fladd@bexp^0,w,c
  4843   001DC2  5C35               	subwf	___fladd@aexp^0,w,c
  4844   001DC4  B0D8               	btfsc	status,0,c
  4845   001DC6  EFE7  F00E         	goto	u3251
  4846   001DCA  EFE9  F00E         	goto	u3250
  4847   001DCE                     u3251:
  4848   001DCE  EF10  F00F         	goto	l3272
  4849   001DD2                     u3250:
  4850   001DD2  AC34               	btfss	___fladd@signs^0,6,c
  4851   001DD4  EFEE  F00E         	goto	u3261
  4852   001DD8  EFF0  F00E         	goto	u3260
  4853   001DDC                     u3261:
  4854   001DDC  EFF2  F00E         	goto	l3242
  4855   001DE0                     u3260:
  4856   001DE0  0E80               	movlw	128
  4857   001DE2  1A34               	xorwf	___fladd@signs^0,f,c
  4858   001DE4                     l3242:
  4859   001DE4  C036  F037         	movff	___fladd@bexp,___fladd@grs
  4860   001DE8  C035  F036         	movff	___fladd@aexp,___fladd@bexp
  4861   001DEC  C037  F035         	movff	___fladd@grs,___fladd@aexp
  4862   001DF0  C028  F037         	movff	___fladd@b,___fladd@grs
  4863   001DF4  C02C  F028         	movff	___fladd@a,___fladd@b
  4864   001DF8  C037  F02C         	movff	___fladd@grs,___fladd@a
  4865   001DFC  C029  F037         	movff	___fladd@b+1,___fladd@grs
  4866   001E00  C02D  F029         	movff	___fladd@a+1,___fladd@b+1
  4867   001E04  C037  F02D         	movff	___fladd@grs,___fladd@a+1
  4868   001E08  C02A  F037         	movff	___fladd@b+2,___fladd@grs
  4869   001E0C  C02E  F02A         	movff	___fladd@a+2,___fladd@b+2
  4870   001E10  C037  F02E         	movff	___fladd@grs,___fladd@a+2
  4871   001E14  C02B  F037         	movff	___fladd@b+3,___fladd@grs
  4872   001E18  C02F  F02B         	movff	___fladd@a+3,___fladd@b+3
  4873   001E1C  C037  F02F         	movff	___fladd@grs,___fladd@a+3
  4874   001E20                     l3272:
  4875   001E20  0E00               	movlw	0
  4876   001E22  6E37               	movwf	___fladd@grs^0,c
  4877   001E24  5036               	movf	___fladd@bexp^0,w,c
  4878   001E26  C035  F030         	movff	___fladd@aexp,??___fladd
  4879   001E2A  6A31               	clrf	(??___fladd+1)^0,c
  4880   001E2C  5E30               	subwf	??___fladd^0,f,c
  4881   001E2E  0E00               	movlw	0
  4882   001E30  5A31               	subwfb	(??___fladd+1)^0,f,c
  4883   001E32  BE31               	btfsc	(??___fladd+1)^0,7,c
  4884   001E34  EF25  F00F         	goto	u3271
  4885   001E38  5031               	movf	(??___fladd+1)^0,w,c
  4886   001E3A  E109               	bnz	u3270
  4887   001E3C  0E1A               	movlw	26
  4888   001E3E  5C30               	subwf	??___fladd^0,w,c
  4889   001E40  A0D8               	btfss	status,0,c
  4890   001E42  EF25  F00F         	goto	u3271
  4891   001E46  EF27  F00F         	goto	u3270
  4892   001E4A                     u3271:
  4893   001E4A  EF5E  F00F         	goto	l885
  4894   001E4E                     u3270:
  4895   001E4E  5028               	movf	___fladd@b^0,w,c
  4896   001E50  1029               	iorwf	(___fladd@b+1)^0,w,c
  4897   001E52  102A               	iorwf	(___fladd@b+2)^0,w,c
  4898   001E54  102B               	iorwf	(___fladd@b+3)^0,w,c
  4899   001E56  A4D8               	btfss	status,2,c
  4900   001E58  EF30  F00F         	goto	u3281
  4901   001E5C  EF33  F00F         	goto	u3280
  4902   001E60                     u3281:
  4903   001E60  0E01               	movlw	1
  4904   001E62  EF34  F00F         	goto	u3290
  4905   001E66                     u3280:
  4906   001E66  0E00               	movlw	0
  4907   001E68                     u3290:
  4908   001E68  6E37               	movwf	___fladd@grs^0,c
  4909   001E6A  0E00               	movlw	0
  4910   001E6C  6E28               	movwf	___fladd@b^0,c
  4911   001E6E  0E00               	movlw	0
  4912   001E70  6E29               	movwf	(___fladd@b+1)^0,c
  4913   001E72  0E00               	movlw	0
  4914   001E74  6E2A               	movwf	(___fladd@b+2)^0,c
  4915   001E76  0E00               	movlw	0
  4916   001E78  6E2B               	movwf	(___fladd@b+3)^0,c
  4917   001E7A  C035  F036         	movff	___fladd@aexp,___fladd@bexp
  4918   001E7E  EF67  F00F         	goto	l884
  4919   001E82                     l886:
  4920   001E82  A037               	btfss	___fladd@grs^0,0,c
  4921   001E84  EF46  F00F         	goto	u3301
  4922   001E88  EF48  F00F         	goto	u3300
  4923   001E8C                     u3301:
  4924   001E8C  EF4E  F00F         	goto	l3284
  4925   001E90                     u3300:
  4926   001E90  90D8               	bcf	status,0,c
  4927   001E92  3037               	rrcf	___fladd@grs^0,w,c
  4928   001E94  0901               	iorlw	1
  4929   001E96  6E37               	movwf	___fladd@grs^0,c
  4930   001E98  EF50  F00F         	goto	l3286
  4931   001E9C                     l3284:
  4932   001E9C  90D8               	bcf	status,0,c
  4933   001E9E  3237               	rrcf	___fladd@grs^0,f,c
  4934   001EA0                     l3286:
  4935   001EA0  A028               	btfss	___fladd@b^0,0,c
  4936   001EA2  EF55  F00F         	goto	u3311
  4937   001EA6  EF57  F00F         	goto	u3310
  4938   001EAA                     u3311:
  4939   001EAA  EF58  F00F         	goto	l3290
  4940   001EAE                     u3310:
  4941   001EAE  8E37               	bsf	___fladd@grs^0,7,c
  4942   001EB0                     l3290:
  4943   001EB0  342B               	rlcf	(___fladd@b+3)^0,w,c
  4944   001EB2  322B               	rrcf	(___fladd@b+3)^0,f,c
  4945   001EB4  322A               	rrcf	(___fladd@b+2)^0,f,c
  4946   001EB6  3229               	rrcf	(___fladd@b+1)^0,f,c
  4947   001EB8  3228               	rrcf	___fladd@b^0,f,c
  4948   001EBA  2A36               	incf	___fladd@bexp^0,f,c
  4949   001EBC                     l885:
  4950   001EBC  5035               	movf	___fladd@aexp^0,w,c
  4951   001EBE  5C36               	subwf	___fladd@bexp^0,w,c
  4952   001EC0  A0D8               	btfss	status,0,c
  4953   001EC2  EF65  F00F         	goto	u3321
  4954   001EC6  EF67  F00F         	goto	u3320
  4955   001ECA                     u3321:
  4956   001ECA  EF41  F00F         	goto	l886
  4957   001ECE                     u3320:
  4958   001ECE                     l884:
  4959   001ECE  BC34               	btfsc	___fladd@signs^0,6,c
  4960   001ED0  EF6C  F00F         	goto	u3331
  4961   001ED4  EF6E  F00F         	goto	u3330
  4962   001ED8                     u3331:
  4963   001ED8  EFAE  F00F         	goto	l3318
  4964   001EDC                     u3330:
  4965   001EDC  5036               	movf	___fladd@bexp^0,w,c
  4966   001EDE  A4D8               	btfss	status,2,c
  4967   001EE0  EF74  F00F         	goto	u3341
  4968   001EE4  EF76  F00F         	goto	u3340
  4969   001EE8                     u3341:
  4970   001EE8  EF80  F00F         	goto	l3300
  4971   001EEC                     u3340:
  4972   001EEC  0E00               	movlw	0
  4973   001EEE  6E28               	movwf	?___fladd^0,c
  4974   001EF0  0E00               	movlw	0
  4975   001EF2  6E29               	movwf	(?___fladd+1)^0,c
  4976   001EF4  0E00               	movlw	0
  4977   001EF6  6E2A               	movwf	(?___fladd+2)^0,c
  4978   001EF8  0E00               	movlw	0
  4979   001EFA  6E2B               	movwf	(?___fladd+3)^0,c
  4980   001EFC  EFCF  F010         	goto	l893
  4981   001F00                     l3300:
  4982   001F00  502C               	movf	___fladd@a^0,w,c
  4983   001F02  2628               	addwf	___fladd@b^0,f,c
  4984   001F04  502D               	movf	(___fladd@a+1)^0,w,c
  4985   001F06  2229               	addwfc	(___fladd@b+1)^0,f,c
  4986   001F08  502E               	movf	(___fladd@a+2)^0,w,c
  4987   001F0A  222A               	addwfc	(___fladd@b+2)^0,f,c
  4988   001F0C  502F               	movf	(___fladd@a+3)^0,w,c
  4989   001F0E  222B               	addwfc	(___fladd@b+3)^0,f,c
  4990   001F10  A02B               	btfss	(___fladd@b+3)^0,0,c
  4991   001F12  EF8D  F00F         	goto	u3351
  4992   001F16  EF8F  F00F         	goto	u3350
  4993   001F1A                     u3351:
  4994   001F1A  EF3B  F010         	goto	l3354
  4995   001F1E                     u3350:
  4996   001F1E  A037               	btfss	___fladd@grs^0,0,c
  4997   001F20  EF94  F00F         	goto	u3361
  4998   001F24  EF96  F00F         	goto	u3360
  4999   001F28                     u3361:
  5000   001F28  EF9C  F00F         	goto	l3308
  5001   001F2C                     u3360:
  5002   001F2C  90D8               	bcf	status,0,c
  5003   001F2E  3037               	rrcf	___fladd@grs^0,w,c
  5004   001F30  0901               	iorlw	1
  5005   001F32  6E37               	movwf	___fladd@grs^0,c
  5006   001F34  EF9E  F00F         	goto	l3310
  5007   001F38                     l3308:
  5008   001F38  90D8               	bcf	status,0,c
  5009   001F3A  3237               	rrcf	___fladd@grs^0,f,c
  5010   001F3C                     l3310:
  5011   001F3C  A028               	btfss	___fladd@b^0,0,c
  5012   001F3E  EFA3  F00F         	goto	u3371
  5013   001F42  EFA5  F00F         	goto	u3370
  5014   001F46                     u3371:
  5015   001F46  EFA6  F00F         	goto	l3314
  5016   001F4A                     u3370:
  5017   001F4A  8E37               	bsf	___fladd@grs^0,7,c
  5018   001F4C                     l3314:
  5019   001F4C  342B               	rlcf	(___fladd@b+3)^0,w,c
  5020   001F4E  322B               	rrcf	(___fladd@b+3)^0,f,c
  5021   001F50  322A               	rrcf	(___fladd@b+2)^0,f,c
  5022   001F52  3229               	rrcf	(___fladd@b+1)^0,f,c
  5023   001F54  3228               	rrcf	___fladd@b^0,f,c
  5024   001F56  2A36               	incf	___fladd@bexp^0,f,c
  5025   001F58  EF3B  F010         	goto	l3354
  5026   001F5C                     l3318:
  5027   001F5C  502C               	movf	___fladd@a^0,w,c
  5028   001F5E  5C28               	subwf	___fladd@b^0,w,c
  5029   001F60  502D               	movf	(___fladd@a+1)^0,w,c
  5030   001F62  5829               	subwfb	(___fladd@b+1)^0,w,c
  5031   001F64  502E               	movf	(___fladd@a+2)^0,w,c
  5032   001F66  582A               	subwfb	(___fladd@b+2)^0,w,c
  5033   001F68  502B               	movf	(___fladd@b+3)^0,w,c
  5034   001F6A  0A80               	xorlw	128
  5035   001F6C  6E30               	movwf	??___fladd^0,c
  5036   001F6E  502F               	movf	(___fladd@a+3)^0,w,c
  5037   001F70  0A80               	xorlw	128
  5038   001F72  5830               	subwfb	??___fladd^0,w,c
  5039   001F74  B0D8               	btfsc	status,0,c
  5040   001F76  EFBF  F00F         	goto	u3381
  5041   001F7A  EFC1  F00F         	goto	u3380
  5042   001F7E                     u3381:
  5043   001F7E  EFEC  F00F         	goto	l3328
  5044   001F82                     u3380:
  5045   001F82  5028               	movf	___fladd@b^0,w,c
  5046   001F84  5C2C               	subwf	___fladd@a^0,w,c
  5047   001F86  6E30               	movwf	??___fladd^0,c
  5048   001F88  5029               	movf	(___fladd@b+1)^0,w,c
  5049   001F8A  582D               	subwfb	(___fladd@a+1)^0,w,c
  5050   001F8C  6E31               	movwf	(??___fladd+1)^0,c
  5051   001F8E  502A               	movf	(___fladd@b+2)^0,w,c
  5052   001F90  582E               	subwfb	(___fladd@a+2)^0,w,c
  5053   001F92  6E32               	movwf	(??___fladd+2)^0,c
  5054   001F94  502B               	movf	(___fladd@b+3)^0,w,c
  5055   001F96  582F               	subwfb	(___fladd@a+3)^0,w,c
  5056   001F98  6E33               	movwf	(??___fladd+3)^0,c
  5057   001F9A  0EFF               	movlw	255
  5058   001F9C  2430               	addwf	??___fladd^0,w,c
  5059   001F9E  6E28               	movwf	___fladd@b^0,c
  5060   001FA0  0EFF               	movlw	255
  5061   001FA2  2031               	addwfc	(??___fladd+1)^0,w,c
  5062   001FA4  6E29               	movwf	(___fladd@b+1)^0,c
  5063   001FA6  0EFF               	movlw	255
  5064   001FA8  2032               	addwfc	(??___fladd+2)^0,w,c
  5065   001FAA  6E2A               	movwf	(___fladd@b+2)^0,c
  5066   001FAC  0EFF               	movlw	255
  5067   001FAE  2033               	addwfc	(??___fladd+3)^0,w,c
  5068   001FB0  6E2B               	movwf	(___fladd@b+3)^0,c
  5069   001FB2  0E80               	movlw	128
  5070   001FB4  1A34               	xorwf	___fladd@signs^0,f,c
  5071   001FB6  6C37               	negf	___fladd@grs^0,c
  5072   001FB8  5037               	movf	___fladd@grs^0,w,c
  5073   001FBA  A4D8               	btfss	status,2,c
  5074   001FBC  EFE2  F00F         	goto	u3391
  5075   001FC0  EFE4  F00F         	goto	u3390
  5076   001FC4                     u3391:
  5077   001FC4  EFF4  F00F         	goto	l901
  5078   001FC8                     u3390:
  5079   001FC8  0E01               	movlw	1
  5080   001FCA  2628               	addwf	___fladd@b^0,f,c
  5081   001FCC  0E00               	movlw	0
  5082   001FCE  2229               	addwfc	(___fladd@b+1)^0,f,c
  5083   001FD0  222A               	addwfc	(___fladd@b+2)^0,f,c
  5084   001FD2  222B               	addwfc	(___fladd@b+3)^0,f,c
  5085   001FD4  EFF4  F00F         	goto	l901
  5086   001FD8                     l3328:
  5087   001FD8  502C               	movf	___fladd@a^0,w,c
  5088   001FDA  5E28               	subwf	___fladd@b^0,f,c
  5089   001FDC  502D               	movf	(___fladd@a+1)^0,w,c
  5090   001FDE  5A29               	subwfb	(___fladd@b+1)^0,f,c
  5091   001FE0  502E               	movf	(___fladd@a+2)^0,w,c
  5092   001FE2  5A2A               	subwfb	(___fladd@b+2)^0,f,c
  5093   001FE4  502F               	movf	(___fladd@a+3)^0,w,c
  5094   001FE6  5A2B               	subwfb	(___fladd@b+3)^0,f,c
  5095   001FE8                     l901:
  5096   001FE8  5028               	movf	___fladd@b^0,w,c
  5097   001FEA  1029               	iorwf	(___fladd@b+1)^0,w,c
  5098   001FEC  102A               	iorwf	(___fladd@b+2)^0,w,c
  5099   001FEE  102B               	iorwf	(___fladd@b+3)^0,w,c
  5100   001FF0  A4D8               	btfss	status,2,c
  5101   001FF2  EFFD  F00F         	goto	u3401
  5102   001FF6  EFFF  F00F         	goto	u3400
  5103   001FFA                     u3401:
  5104   001FFA  EF34  F010         	goto	l3352
  5105   001FFE                     u3400:
  5106   001FFE  5037               	movf	___fladd@grs^0,w,c
  5107   002000  A4D8               	btfss	status,2,c
  5108   002002  EF05  F010         	goto	u3411
  5109   002006  EF07  F010         	goto	u3410
  5110   00200A                     u3411:
  5111   00200A  EF34  F010         	goto	l3352
  5112   00200E                     u3410:
  5113   00200E  0E00               	movlw	0
  5114   002010  6E28               	movwf	?___fladd^0,c
  5115   002012  0E00               	movlw	0
  5116   002014  6E29               	movwf	(?___fladd+1)^0,c
  5117   002016  0E00               	movlw	0
  5118   002018  6E2A               	movwf	(?___fladd+2)^0,c
  5119   00201A  0E00               	movlw	0
  5120   00201C  6E2B               	movwf	(?___fladd+3)^0,c
  5121   00201E  EFCF  F010         	goto	l893
  5122   002022                     l3336:
  5123   002022  90D8               	bcf	status,0,c
  5124   002024  3628               	rlcf	___fladd@b^0,f,c
  5125   002026  3629               	rlcf	(___fladd@b+1)^0,f,c
  5126   002028  362A               	rlcf	(___fladd@b+2)^0,f,c
  5127   00202A  362B               	rlcf	(___fladd@b+3)^0,f,c
  5128   00202C  AE37               	btfss	___fladd@grs^0,7,c
  5129   00202E  EF1B  F010         	goto	u3421
  5130   002032  EF1D  F010         	goto	u3420
  5131   002036                     u3421:
  5132   002036  EF1E  F010         	goto	l3342
  5133   00203A                     u3420:
  5134   00203A  8028               	bsf	___fladd@b^0,0,c
  5135   00203C                     l3342:
  5136   00203C  A037               	btfss	___fladd@grs^0,0,c
  5137   00203E  EF23  F010         	goto	u3431
  5138   002042  EF25  F010         	goto	u3430
  5139   002046                     u3431:
  5140   002046  EF29  F010         	goto	l3346
  5141   00204A                     u3430:
  5142   00204A  80D8               	bsf	status,0,c
  5143   00204C  3637               	rlcf	___fladd@grs^0,f,c
  5144   00204E  EF2B  F010         	goto	l3348
  5145   002052                     l3346:
  5146   002052  90D8               	bcf	status,0,c
  5147   002054  3637               	rlcf	___fladd@grs^0,f,c
  5148   002056                     l3348:
  5149   002056  5036               	movf	___fladd@bexp^0,w,c
  5150   002058  B4D8               	btfsc	status,2,c
  5151   00205A  EF31  F010         	goto	u3441
  5152   00205E  EF33  F010         	goto	u3440
  5153   002062                     u3441:
  5154   002062  EF34  F010         	goto	l3352
  5155   002066                     u3440:
  5156   002066  0636               	decf	___fladd@bexp^0,f,c
  5157   002068                     l3352:
  5158   002068  AE2A               	btfss	(___fladd@b+2)^0,7,c
  5159   00206A  EF39  F010         	goto	u3451
  5160   00206E  EF3B  F010         	goto	u3450
  5161   002072                     u3451:
  5162   002072  EF11  F010         	goto	l3336
  5163   002076                     u3450:
  5164   002076                     l3354:
  5165   002076  0E00               	movlw	0
  5166   002078  6E35               	movwf	___fladd@aexp^0,c
  5167   00207A  AE37               	btfss	___fladd@grs^0,7,c
  5168   00207C  EF42  F010         	goto	u3461
  5169   002080  EF44  F010         	goto	u3460
  5170   002084                     u3461:
  5171   002084  EF5C  F010         	goto	l910
  5172   002088                     u3460:
  5173   002088  C037  F030         	movff	___fladd@grs,??___fladd
  5174   00208C  0E7F               	movlw	127
  5175   00208E  1630               	andwf	??___fladd^0,f,c
  5176   002090  B4D8               	btfsc	status,2,c
  5177   002092  EF4D  F010         	goto	u3471
  5178   002096  EF4F  F010         	goto	u3470
  5179   00209A                     u3471:
  5180   00209A  EF53  F010         	goto	l911
  5181   00209E                     u3470:
  5182   00209E                     l3360:
  5183   00209E  0E01               	movlw	1
  5184   0020A0  6E35               	movwf	___fladd@aexp^0,c
  5185   0020A2  EF5C  F010         	goto	l910
  5186   0020A6                     l911:
  5187   0020A6  A028               	btfss	___fladd@b^0,0,c
  5188   0020A8  EF58  F010         	goto	u3481
  5189   0020AC  EF5A  F010         	goto	u3480
  5190   0020B0                     u3481:
  5191   0020B0  EF5C  F010         	goto	l910
  5192   0020B4                     u3480:
  5193   0020B4  EF4F  F010         	goto	l3360
  5194   0020B8                     l910:
  5195   0020B8  5035               	movf	___fladd@aexp^0,w,c
  5196   0020BA  B4D8               	btfsc	status,2,c
  5197   0020BC  EF62  F010         	goto	u3491
  5198   0020C0  EF64  F010         	goto	u3490
  5199   0020C4                     u3491:
  5200   0020C4  EF8F  F010         	goto	l3372
  5201   0020C8                     u3490:
  5202   0020C8  0E01               	movlw	1
  5203   0020CA  2628               	addwf	___fladd@b^0,f,c
  5204   0020CC  0E00               	movlw	0
  5205   0020CE  2229               	addwfc	(___fladd@b+1)^0,f,c
  5206   0020D0  222A               	addwfc	(___fladd@b+2)^0,f,c
  5207   0020D2  222B               	addwfc	(___fladd@b+3)^0,f,c
  5208   0020D4  A02B               	btfss	(___fladd@b+3)^0,0,c
  5209   0020D6  EF6F  F010         	goto	u3501
  5210   0020DA  EF71  F010         	goto	u3500
  5211   0020DE                     u3501:
  5212   0020DE  EF8F  F010         	goto	l3372
  5213   0020E2                     u3500:
  5214   0020E2  C028  F030         	movff	___fladd@b,??___fladd
  5215   0020E6  C029  F031         	movff	___fladd@b+1,??___fladd+1
  5216   0020EA  C02A  F032         	movff	___fladd@b+2,??___fladd+2
  5217   0020EE  C02B  F033         	movff	___fladd@b+3,??___fladd+3
  5218   0020F2  3433               	rlcf	(??___fladd+3)^0,w,c
  5219   0020F4  3233               	rrcf	(??___fladd+3)^0,f,c
  5220   0020F6  3232               	rrcf	(??___fladd+2)^0,f,c
  5221   0020F8  3231               	rrcf	(??___fladd+1)^0,f,c
  5222   0020FA  3230               	rrcf	??___fladd^0,f,c
  5223   0020FC  C030  F028         	movff	??___fladd,___fladd@b
  5224   002100  C031  F029         	movff	??___fladd+1,___fladd@b+1
  5225   002104  C032  F02A         	movff	??___fladd+2,___fladd@b+2
  5226   002108  C033  F02B         	movff	??___fladd+3,___fladd@b+3
  5227   00210C  2836               	incf	___fladd@bexp^0,w,c
  5228   00210E  B4D8               	btfsc	status,2,c
  5229   002110  EF8C  F010         	goto	u3511
  5230   002114  EF8E  F010         	goto	u3510
  5231   002118                     u3511:
  5232   002118  EF8F  F010         	goto	l3372
  5233   00211C                     u3510:
  5234   00211C  2A36               	incf	___fladd@bexp^0,f,c
  5235   00211E                     l3372:
  5236   00211E  2836               	incf	___fladd@bexp^0,w,c
  5237   002120  B4D8               	btfsc	status,2,c
  5238   002122  EF95  F010         	goto	u3521
  5239   002126  EF97  F010         	goto	u3520
  5240   00212A                     u3521:
  5241   00212A  EF9F  F010         	goto	l3376
  5242   00212E                     u3520:
  5243   00212E  5036               	movf	___fladd@bexp^0,w,c
  5244   002130  A4D8               	btfss	status,2,c
  5245   002132  EF9D  F010         	goto	u3531
  5246   002136  EF9F  F010         	goto	u3530
  5247   00213A                     u3531:
  5248   00213A  EFB1  F010         	goto	l3380
  5249   00213E                     u3530:
  5250   00213E                     l3376:
  5251   00213E  0E00               	movlw	0
  5252   002140  6E28               	movwf	___fladd@b^0,c
  5253   002142  0E00               	movlw	0
  5254   002144  6E29               	movwf	(___fladd@b+1)^0,c
  5255   002146  0E00               	movlw	0
  5256   002148  6E2A               	movwf	(___fladd@b+2)^0,c
  5257   00214A  0E00               	movlw	0
  5258   00214C  6E2B               	movwf	(___fladd@b+3)^0,c
  5259   00214E  5036               	movf	___fladd@bexp^0,w,c
  5260   002150  A4D8               	btfss	status,2,c
  5261   002152  EFAD  F010         	goto	u3541
  5262   002156  EFAF  F010         	goto	u3540
  5263   00215A                     u3541:
  5264   00215A  EFB1  F010         	goto	l3380
  5265   00215E                     u3540:
  5266   00215E  0E00               	movlw	0
  5267   002160  6E34               	movwf	___fladd@signs^0,c
  5268   002162                     l3380:
  5269   002162  A036               	btfss	___fladd@bexp^0,0,c
  5270   002164  EFB6  F010         	goto	u3551
  5271   002168  EFB8  F010         	goto	u3550
  5272   00216C                     u3551:
  5273   00216C  EFBB  F010         	goto	l3384
  5274   002170                     u3550:
  5275   002170  8E2A               	bsf	(___fladd@b+2)^0,7,c
  5276   002172  EFBC  F010         	goto	l3386
  5277   002176                     l3384:
  5278   002176  9E2A               	bcf	(___fladd@b+2)^0,7,c
  5279   002178                     l3386:
  5280   002178  90D8               	bcf	status,0,c
  5281   00217A  3036               	rrcf	___fladd@bexp^0,w,c
  5282   00217C  6E2B               	movwf	(___fladd@b+3)^0,c
  5283   00217E  AE34               	btfss	___fladd@signs^0,7,c
  5284   002180  EFC4  F010         	goto	u3561
  5285   002184  EFC6  F010         	goto	u3560
  5286   002188                     u3561:
  5287   002188  EFC7  F010         	goto	l3392
  5288   00218C                     u3560:
  5289   00218C  8E2B               	bsf	(___fladd@b+3)^0,7,c
  5290   00218E                     l3392:
  5291   00218E  C028  F028         	movff	___fladd@b,?___fladd
  5292   002192  C029  F029         	movff	___fladd@b+1,?___fladd+1
  5293   002196  C02A  F02A         	movff	___fladd@b+2,?___fladd+2
  5294   00219A  C02B  F02B         	movff	___fladd@b+3,?___fladd+3
  5295   00219E                     l893:
  5296   00219E  0012               	return		;funcret
  5297   0021A0                     __end_of___fladd:
  5298                           	callstack 0
  5299                           
  5300 ;; *************** function _UpdateClock *****************
  5301 ;; Defined at:
  5302 ;;		line 6 in file "clock.c"
  5303 ;; Parameters:    Size  Location     Type
  5304 ;;  ticker          2    6[COMRAM] PTR int 
  5305 ;;		 -> ticker(2), 
  5306 ;;  seconds         2    8[COMRAM] PTR int 
  5307 ;;		 -> main@clock(16), 
  5308 ;;  minutes         2   10[COMRAM] PTR int 
  5309 ;;		 -> main@clock(16), 
  5310 ;;  hours           2   12[COMRAM] PTR int 
  5311 ;;		 -> main@clock(16), 
  5312 ;;  days            2   14[COMRAM] PTR int 
  5313 ;;		 -> main@clock(16), 
  5314 ;;  DoW             2   16[COMRAM] PTR int 
  5315 ;;		 -> main@clock(16), 
  5316 ;;  months          2   18[COMRAM] PTR int 
  5317 ;;		 -> main@clock(16), 
  5318 ;;  years           2   20[COMRAM] PTR int 
  5319 ;;		 -> main@clock(16), 
  5320 ;;  DSTstate        2   22[COMRAM] PTR int 
  5321 ;;		 -> main@clock(16), 
  5322 ;;  TestMode        2   24[COMRAM] int 
  5323 ;; Auto vars:     Size  Location     Type
  5324 ;;  DaysInMonth    24   32[COMRAM] int [12]
  5325 ;; Return value:  Size  Location     Type
  5326 ;;                  1    wreg      void 
  5327 ;; Registers used:
  5328 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5329 ;; Tracked objects:
  5330 ;;		On entry : 0/0
  5331 ;;		On exit  : 0/0
  5332 ;;		Unchanged: 0/0
  5333 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5334 ;;      Params:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5335 ;;      Locals:        24       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5336 ;;      Temps:          6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5337 ;;      Totals:        50       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5338 ;;Total ram usage:       50 bytes
  5339 ;; Hardware stack levels used: 1
  5340 ;; Hardware stack levels required when called: 2
  5341 ;; This function calls:
  5342 ;;		___awmod
  5343 ;; This function is called by:
  5344 ;;		_main
  5345 ;; This function uses a non-reentrant model
  5346 ;;
  5347                           
  5348                           	psect	text17
  5349   0016D8                     __ptext17:
  5350                           	callstack 0
  5351   0016D8                     _UpdateClock:
  5352                           	callstack 28
  5353   0016D8                     
  5354                           ;clock.c: 8:     int DaysInMonth[] = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
  5355   0016D8  EE20  F080         	lfsr	2,UpdateClock@F14155
  5356   0016DC  EE10  F021         	lfsr	1,UpdateClock@DaysInMonth
  5357   0016E0  0E17               	movlw	23
  5358   0016E2                     u4461:
  5359   0016E2  CFDB FFE3          	movff	plusw2,plusw1
  5360   0016E6  06E8               	decf	wreg,f,c
  5361   0016E8  E2FC               	bc	u4461
  5362   0016EA                     
  5363                           ;clock.c: 10:     if (TestMode == 1){
  5364   0016EA  0419               	decf	UpdateClock@TestMode^0,w,c
  5365   0016EC  101A               	iorwf	(UpdateClock@TestMode+1)^0,w,c
  5366   0016EE  A4D8               	btfss	status,2,c
  5367   0016F0  EF7C  F00B         	goto	u4471
  5368   0016F4  EF7E  F00B         	goto	u4470
  5369   0016F8                     u4471:
  5370   0016F8  EFA4  F00B         	goto	l4088
  5371   0016FC                     u4470:
  5372   0016FC                     
  5373                           ;clock.c: 11:         *minutes = *ticker;
  5374   0016FC  C007  FFD9         	movff	UpdateClock@ticker,fsr2l
  5375   001700  C008  FFDA         	movff	UpdateClock@ticker+1,fsr2h
  5376   001704  C00B  FFE1         	movff	UpdateClock@minutes,fsr1l
  5377   001708  C00C  FFE2         	movff	UpdateClock@minutes+1,fsr1h
  5378   00170C  CFDE FFE6          	movff	postinc2,postinc1
  5379   001710  CFDD FFE5          	movff	postdec2,postdec1
  5380   001714                     
  5381                           ;clock.c: 12:         if(*ticker >= 60){
  5382   001714  C007  FFD9         	movff	UpdateClock@ticker,fsr2l
  5383   001718  C008  FFDA         	movff	UpdateClock@ticker+1,fsr2h
  5384   00171C  0E01               	movlw	1
  5385   00171E  BEDB               	btfsc	plusw2,7,c
  5386   001720  EF9C  F00B         	goto	u4481
  5387   001724  0E01               	movlw	1
  5388   001726  50DB               	movf	plusw2,w,c
  5389   001728  E109               	bnz	u4480
  5390   00172A  0E3C               	movlw	60
  5391   00172C  5CDE               	subwf	postinc2,w,c
  5392   00172E  A0D8               	btfss	status,0,c
  5393   001730  EF9C  F00B         	goto	u4481
  5394   001734  EF9E  F00B         	goto	u4480
  5395   001738                     u4481:
  5396   001738  EFA4  F00B         	goto	l4088
  5397   00173C                     u4480:
  5398   00173C                     
  5399                           ;clock.c: 13:             *ticker = 0;
  5400   00173C  C007  FFD9         	movff	UpdateClock@ticker,fsr2l
  5401   001740  C008  FFDA         	movff	UpdateClock@ticker+1,fsr2h
  5402   001744  6ADE               	clrf	postinc2,c
  5403   001746  6ADD               	clrf	postdec2,c
  5404   001748                     l4088:
  5405                           
  5406                           ;clock.c: 17:     if (*ticker >= 60){
  5407   001748  C007  FFD9         	movff	UpdateClock@ticker,fsr2l
  5408   00174C  C008  FFDA         	movff	UpdateClock@ticker+1,fsr2h
  5409   001750  0E01               	movlw	1
  5410   001752  BEDB               	btfsc	plusw2,7,c
  5411   001754  EFB6  F00B         	goto	u4491
  5412   001758  0E01               	movlw	1
  5413   00175A  50DB               	movf	plusw2,w,c
  5414   00175C  E109               	bnz	u4490
  5415   00175E  0E3C               	movlw	60
  5416   001760  5CDE               	subwf	postinc2,w,c
  5417   001762  A0D8               	btfss	status,0,c
  5418   001764  EFB6  F00B         	goto	u4491
  5419   001768  EFB8  F00B         	goto	u4490
  5420   00176C                     u4491:
  5421   00176C  EFD2  F00B         	goto	l4094
  5422   001770                     u4490:
  5423   001770                     
  5424                           ;clock.c: 18:         *ticker = 0;
  5425   001770  C007  FFD9         	movff	UpdateClock@ticker,fsr2l
  5426   001774  C008  FFDA         	movff	UpdateClock@ticker+1,fsr2h
  5427   001778  6ADE               	clrf	postinc2,c
  5428   00177A  6ADD               	clrf	postdec2,c
  5429   00177C                     
  5430                           ;clock.c: 19:         *seconds = *seconds + 1;
  5431   00177C  C009  FFD9         	movff	UpdateClock@seconds,fsr2l
  5432   001780  C00A  FFDA         	movff	UpdateClock@seconds+1,fsr2h
  5433   001784  CFDE F01B          	movff	postinc2,??_UpdateClock
  5434   001788  CFDD F01C          	movff	postdec2,??_UpdateClock+1
  5435   00178C  0E01               	movlw	1
  5436   00178E  261B               	addwf	??_UpdateClock^0,f,c
  5437   001790  0E00               	movlw	0
  5438   001792  221C               	addwfc	(??_UpdateClock+1)^0,f,c
  5439   001794  C009  FFD9         	movff	UpdateClock@seconds,fsr2l
  5440   001798  C00A  FFDA         	movff	UpdateClock@seconds+1,fsr2h
  5441   00179C  C01B  FFDE         	movff	??_UpdateClock,postinc2
  5442   0017A0  C01C  FFDD         	movff	??_UpdateClock+1,postdec2
  5443   0017A4                     l4094:
  5444                           
  5445                           ;clock.c: 22:     if (*seconds >= 60 ){
  5446   0017A4  C009  FFD9         	movff	UpdateClock@seconds,fsr2l
  5447   0017A8  C00A  FFDA         	movff	UpdateClock@seconds+1,fsr2h
  5448   0017AC  0E01               	movlw	1
  5449   0017AE  BEDB               	btfsc	plusw2,7,c
  5450   0017B0  EFE4  F00B         	goto	u4501
  5451   0017B4  0E01               	movlw	1
  5452   0017B6  50DB               	movf	plusw2,w,c
  5453   0017B8  E109               	bnz	u4500
  5454   0017BA  0E3C               	movlw	60
  5455   0017BC  5CDE               	subwf	postinc2,w,c
  5456   0017BE  A0D8               	btfss	status,0,c
  5457   0017C0  EFE4  F00B         	goto	u4501
  5458   0017C4  EFE6  F00B         	goto	u4500
  5459   0017C8                     u4501:
  5460   0017C8  EF00  F00C         	goto	l4100
  5461   0017CC                     u4500:
  5462   0017CC                     
  5463                           ;clock.c: 23:         *seconds = 0;
  5464   0017CC  C009  FFD9         	movff	UpdateClock@seconds,fsr2l
  5465   0017D0  C00A  FFDA         	movff	UpdateClock@seconds+1,fsr2h
  5466   0017D4  6ADE               	clrf	postinc2,c
  5467   0017D6  6ADD               	clrf	postdec2,c
  5468   0017D8                     
  5469                           ;clock.c: 24:         *minutes = *minutes + 1;
  5470   0017D8  C00B  FFD9         	movff	UpdateClock@minutes,fsr2l
  5471   0017DC  C00C  FFDA         	movff	UpdateClock@minutes+1,fsr2h
  5472   0017E0  CFDE F01B          	movff	postinc2,??_UpdateClock
  5473   0017E4  CFDD F01C          	movff	postdec2,??_UpdateClock+1
  5474   0017E8  0E01               	movlw	1
  5475   0017EA  261B               	addwf	??_UpdateClock^0,f,c
  5476   0017EC  0E00               	movlw	0
  5477   0017EE  221C               	addwfc	(??_UpdateClock+1)^0,f,c
  5478   0017F0  C00B  FFD9         	movff	UpdateClock@minutes,fsr2l
  5479   0017F4  C00C  FFDA         	movff	UpdateClock@minutes+1,fsr2h
  5480   0017F8  C01B  FFDE         	movff	??_UpdateClock,postinc2
  5481   0017FC  C01C  FFDD         	movff	??_UpdateClock+1,postdec2
  5482   001800                     l4100:
  5483                           
  5484                           ;clock.c: 27:     if (*minutes >= 60){
  5485   001800  C00B  FFD9         	movff	UpdateClock@minutes,fsr2l
  5486   001804  C00C  FFDA         	movff	UpdateClock@minutes+1,fsr2h
  5487   001808  0E01               	movlw	1
  5488   00180A  BEDB               	btfsc	plusw2,7,c
  5489   00180C  EF12  F00C         	goto	u4511
  5490   001810  0E01               	movlw	1
  5491   001812  50DB               	movf	plusw2,w,c
  5492   001814  E109               	bnz	u4510
  5493   001816  0E3C               	movlw	60
  5494   001818  5CDE               	subwf	postinc2,w,c
  5495   00181A  A0D8               	btfss	status,0,c
  5496   00181C  EF12  F00C         	goto	u4511
  5497   001820  EF14  F00C         	goto	u4510
  5498   001824                     u4511:
  5499   001824  EF2E  F00C         	goto	l4106
  5500   001828                     u4510:
  5501   001828                     
  5502                           ;clock.c: 28:         *minutes = 0;
  5503   001828  C00B  FFD9         	movff	UpdateClock@minutes,fsr2l
  5504   00182C  C00C  FFDA         	movff	UpdateClock@minutes+1,fsr2h
  5505   001830  6ADE               	clrf	postinc2,c
  5506   001832  6ADD               	clrf	postdec2,c
  5507   001834                     
  5508                           ;clock.c: 29:         *hours = *hours + 1;
  5509   001834  C00D  FFD9         	movff	UpdateClock@hours,fsr2l
  5510   001838  C00E  FFDA         	movff	UpdateClock@hours+1,fsr2h
  5511   00183C  CFDE F01B          	movff	postinc2,??_UpdateClock
  5512   001840  CFDD F01C          	movff	postdec2,??_UpdateClock+1
  5513   001844  0E01               	movlw	1
  5514   001846  261B               	addwf	??_UpdateClock^0,f,c
  5515   001848  0E00               	movlw	0
  5516   00184A  221C               	addwfc	(??_UpdateClock+1)^0,f,c
  5517   00184C  C00D  FFD9         	movff	UpdateClock@hours,fsr2l
  5518   001850  C00E  FFDA         	movff	UpdateClock@hours+1,fsr2h
  5519   001854  C01B  FFDE         	movff	??_UpdateClock,postinc2
  5520   001858  C01C  FFDD         	movff	??_UpdateClock+1,postdec2
  5521   00185C                     l4106:
  5522                           
  5523                           ;clock.c: 32:     if (*hours >= 24){
  5524   00185C  C00D  FFD9         	movff	UpdateClock@hours,fsr2l
  5525   001860  C00E  FFDA         	movff	UpdateClock@hours+1,fsr2h
  5526   001864  0E01               	movlw	1
  5527   001866  BEDB               	btfsc	plusw2,7,c
  5528   001868  EF40  F00C         	goto	u4521
  5529   00186C  0E01               	movlw	1
  5530   00186E  50DB               	movf	plusw2,w,c
  5531   001870  E109               	bnz	u4520
  5532   001872  0E18               	movlw	24
  5533   001874  5CDE               	subwf	postinc2,w,c
  5534   001876  A0D8               	btfss	status,0,c
  5535   001878  EF40  F00C         	goto	u4521
  5536   00187C  EF42  F00C         	goto	u4520
  5537   001880                     u4521:
  5538   001880  EF70  F00C         	goto	l4114
  5539   001884                     u4520:
  5540   001884                     
  5541                           ;clock.c: 33:         *hours = 0;
  5542   001884  C00D  FFD9         	movff	UpdateClock@hours,fsr2l
  5543   001888  C00E  FFDA         	movff	UpdateClock@hours+1,fsr2h
  5544   00188C  6ADE               	clrf	postinc2,c
  5545   00188E  6ADD               	clrf	postdec2,c
  5546   001890                     
  5547                           ;clock.c: 34:         *days = *days + 1;
  5548   001890  C00F  FFD9         	movff	UpdateClock@days,fsr2l
  5549   001894  C010  FFDA         	movff	UpdateClock@days+1,fsr2h
  5550   001898  CFDE F01B          	movff	postinc2,??_UpdateClock
  5551   00189C  CFDD F01C          	movff	postdec2,??_UpdateClock+1
  5552   0018A0  0E01               	movlw	1
  5553   0018A2  261B               	addwf	??_UpdateClock^0,f,c
  5554   0018A4  0E00               	movlw	0
  5555   0018A6  221C               	addwfc	(??_UpdateClock+1)^0,f,c
  5556   0018A8  C00F  FFD9         	movff	UpdateClock@days,fsr2l
  5557   0018AC  C010  FFDA         	movff	UpdateClock@days+1,fsr2h
  5558   0018B0  C01B  FFDE         	movff	??_UpdateClock,postinc2
  5559   0018B4  C01C  FFDD         	movff	??_UpdateClock+1,postdec2
  5560   0018B8                     
  5561                           ;clock.c: 35:         *DoW = *DoW + 1;
  5562   0018B8  C011  FFD9         	movff	UpdateClock@DoW,fsr2l
  5563   0018BC  C012  FFDA         	movff	UpdateClock@DoW+1,fsr2h
  5564   0018C0  CFDE F01B          	movff	postinc2,??_UpdateClock
  5565   0018C4  CFDD F01C          	movff	postdec2,??_UpdateClock+1
  5566   0018C8  0E01               	movlw	1
  5567   0018CA  261B               	addwf	??_UpdateClock^0,f,c
  5568   0018CC  0E00               	movlw	0
  5569   0018CE  221C               	addwfc	(??_UpdateClock+1)^0,f,c
  5570   0018D0  C011  FFD9         	movff	UpdateClock@DoW,fsr2l
  5571   0018D4  C012  FFDA         	movff	UpdateClock@DoW+1,fsr2h
  5572   0018D8  C01B  FFDE         	movff	??_UpdateClock,postinc2
  5573   0018DC  C01C  FFDD         	movff	??_UpdateClock+1,postdec2
  5574   0018E0                     l4114:
  5575                           
  5576                           ;clock.c: 38:     if (*DoW >= 8){
  5577   0018E0  C011  FFD9         	movff	UpdateClock@DoW,fsr2l
  5578   0018E4  C012  FFDA         	movff	UpdateClock@DoW+1,fsr2h
  5579   0018E8  0E01               	movlw	1
  5580   0018EA  BEDB               	btfsc	plusw2,7,c
  5581   0018EC  EF82  F00C         	goto	u4531
  5582   0018F0  0E01               	movlw	1
  5583   0018F2  50DB               	movf	plusw2,w,c
  5584   0018F4  E109               	bnz	u4530
  5585   0018F6  0E08               	movlw	8
  5586   0018F8  5CDE               	subwf	postinc2,w,c
  5587   0018FA  A0D8               	btfss	status,0,c
  5588   0018FC  EF82  F00C         	goto	u4531
  5589   001900  EF84  F00C         	goto	u4530
  5590   001904                     u4531:
  5591   001904  EF8C  F00C         	goto	l4118
  5592   001908                     u4530:
  5593   001908                     
  5594                           ;clock.c: 39:         *DoW = 1;
  5595   001908  C011  FFD9         	movff	UpdateClock@DoW,fsr2l
  5596   00190C  C012  FFDA         	movff	UpdateClock@DoW+1,fsr2h
  5597   001910  0E01               	movlw	1
  5598   001912  6EDE               	movwf	postinc2,c
  5599   001914  0E00               	movlw	0
  5600   001916  6EDD               	movwf	postdec2,c
  5601   001918                     l4118:
  5602                           
  5603                           ;clock.c: 42:     if((*DSTstate == 0) && (*months == 3) && (*days >= 25) && (*DoW == 7) 
      +                          && ( *hours >= 1) ){
  5604   001918  C017  FFD9         	movff	UpdateClock@DSTstate,fsr2l
  5605   00191C  C018  FFDA         	movff	UpdateClock@DSTstate+1,fsr2h
  5606   001920  50DE               	movf	postinc2,w,c
  5607   001922  10DE               	iorwf	postinc2,w,c
  5608   001924  A4D8               	btfss	status,2,c
  5609   001926  EF97  F00C         	goto	u4541
  5610   00192A  EF99  F00C         	goto	u4540
  5611   00192E                     u4541:
  5612   00192E  EF15  F00D         	goto	l4136
  5613   001932                     u4540:
  5614   001932  C013  FFD9         	movff	UpdateClock@months,fsr2l
  5615   001936  C014  FFDA         	movff	UpdateClock@months+1,fsr2h
  5616   00193A  0E03               	movlw	3
  5617   00193C  18DE               	xorwf	postinc2,w,c
  5618   00193E  10DE               	iorwf	postinc2,w,c
  5619   001940  A4D8               	btfss	status,2,c
  5620   001942  EFA5  F00C         	goto	u4551
  5621   001946  EFA7  F00C         	goto	u4550
  5622   00194A                     u4551:
  5623   00194A  EF15  F00D         	goto	l4136
  5624   00194E                     u4550:
  5625   00194E  C00F  FFD9         	movff	UpdateClock@days,fsr2l
  5626   001952  C010  FFDA         	movff	UpdateClock@days+1,fsr2h
  5627   001956  0E01               	movlw	1
  5628   001958  BEDB               	btfsc	plusw2,7,c
  5629   00195A  EFB9  F00C         	goto	u4561
  5630   00195E  0E01               	movlw	1
  5631   001960  50DB               	movf	plusw2,w,c
  5632   001962  E109               	bnz	u4560
  5633   001964  0E19               	movlw	25
  5634   001966  5CDE               	subwf	postinc2,w,c
  5635   001968  A0D8               	btfss	status,0,c
  5636   00196A  EFB9  F00C         	goto	u4561
  5637   00196E  EFBB  F00C         	goto	u4560
  5638   001972                     u4561:
  5639   001972  EF15  F00D         	goto	l4136
  5640   001976                     u4560:
  5641   001976  C011  FFD9         	movff	UpdateClock@DoW,fsr2l
  5642   00197A  C012  FFDA         	movff	UpdateClock@DoW+1,fsr2h
  5643   00197E  0E07               	movlw	7
  5644   001980  18DE               	xorwf	postinc2,w,c
  5645   001982  10DE               	iorwf	postinc2,w,c
  5646   001984  A4D8               	btfss	status,2,c
  5647   001986  EFC7  F00C         	goto	u4571
  5648   00198A  EFC9  F00C         	goto	u4570
  5649   00198E                     u4571:
  5650   00198E  EF15  F00D         	goto	l4136
  5651   001992                     u4570:
  5652   001992  C00D  FFD9         	movff	UpdateClock@hours,fsr2l
  5653   001996  C00E  FFDA         	movff	UpdateClock@hours+1,fsr2h
  5654   00199A  0E01               	movlw	1
  5655   00199C  BEDB               	btfsc	plusw2,7,c
  5656   00199E  EFDA  F00C         	goto	u4581
  5657   0019A2  0E01               	movlw	1
  5658   0019A4  50DB               	movf	plusw2,w,c
  5659   0019A6  E108               	bnz	u4580
  5660   0019A8  04DE               	decf	postinc2,w,c
  5661   0019AA  A0D8               	btfss	status,0,c
  5662   0019AC  EFDA  F00C         	goto	u4581
  5663   0019B0  EFDC  F00C         	goto	u4580
  5664   0019B4                     u4581:
  5665   0019B4  EF15  F00D         	goto	l4136
  5666   0019B8                     u4580:
  5667   0019B8                     
  5668                           ;clock.c: 44:         *hours = *hours + 1;
  5669   0019B8  C00D  FFD9         	movff	UpdateClock@hours,fsr2l
  5670   0019BC  C00E  FFDA         	movff	UpdateClock@hours+1,fsr2h
  5671   0019C0  CFDE F01B          	movff	postinc2,??_UpdateClock
  5672   0019C4  CFDD F01C          	movff	postdec2,??_UpdateClock+1
  5673   0019C8  0E01               	movlw	1
  5674   0019CA  261B               	addwf	??_UpdateClock^0,f,c
  5675   0019CC  0E00               	movlw	0
  5676   0019CE  221C               	addwfc	(??_UpdateClock+1)^0,f,c
  5677   0019D0  C00D  FFD9         	movff	UpdateClock@hours,fsr2l
  5678   0019D4  C00E  FFDA         	movff	UpdateClock@hours+1,fsr2h
  5679   0019D8  C01B  FFDE         	movff	??_UpdateClock,postinc2
  5680   0019DC  C01C  FFDD         	movff	??_UpdateClock+1,postdec2
  5681   0019E0                     
  5682                           ;clock.c: 45:         if (TestMode == 1){
  5683   0019E0  0419               	decf	UpdateClock@TestMode^0,w,c
  5684   0019E2  101A               	iorwf	(UpdateClock@TestMode+1)^0,w,c
  5685   0019E4  A4D8               	btfss	status,2,c
  5686   0019E6  EFF7  F00C         	goto	u4591
  5687   0019EA  EFF9  F00C         	goto	u4590
  5688   0019EE                     u4591:
  5689   0019EE  EF0D  F00D         	goto	l4134
  5690   0019F2                     u4590:
  5691   0019F2                     
  5692                           ;clock.c: 46:             *seconds = *seconds + 1;
  5693   0019F2  C009  FFD9         	movff	UpdateClock@seconds,fsr2l
  5694   0019F6  C00A  FFDA         	movff	UpdateClock@seconds+1,fsr2h
  5695   0019FA  CFDE F01B          	movff	postinc2,??_UpdateClock
  5696   0019FE  CFDD F01C          	movff	postdec2,??_UpdateClock+1
  5697   001A02  0E01               	movlw	1
  5698   001A04  261B               	addwf	??_UpdateClock^0,f,c
  5699   001A06  0E00               	movlw	0
  5700   001A08  221C               	addwfc	(??_UpdateClock+1)^0,f,c
  5701   001A0A  C009  FFD9         	movff	UpdateClock@seconds,fsr2l
  5702   001A0E  C00A  FFDA         	movff	UpdateClock@seconds+1,fsr2h
  5703   001A12  C01B  FFDE         	movff	??_UpdateClock,postinc2
  5704   001A16  C01C  FFDD         	movff	??_UpdateClock+1,postdec2
  5705   001A1A                     l4134:
  5706                           
  5707                           ;clock.c: 48:         *DSTstate = 1;
  5708   001A1A  C017  FFD9         	movff	UpdateClock@DSTstate,fsr2l
  5709   001A1E  C018  FFDA         	movff	UpdateClock@DSTstate+1,fsr2h
  5710   001A22  0E01               	movlw	1
  5711   001A24  6EDE               	movwf	postinc2,c
  5712   001A26  0E00               	movlw	0
  5713   001A28  6EDD               	movwf	postdec2,c
  5714   001A2A                     l4136:
  5715                           
  5716                           ;clock.c: 52:     if((*DSTstate==1) && (*months == 10) && (*days >= 25) && (*DoW == 7) &
      +                          & (*hours == 2) ){
  5717   001A2A  C017  FFD9         	movff	UpdateClock@DSTstate,fsr2l
  5718   001A2E  C018  FFDA         	movff	UpdateClock@DSTstate+1,fsr2h
  5719   001A32  04DE               	decf	postinc2,w,c
  5720   001A34  10DE               	iorwf	postinc2,w,c
  5721   001A36  A4D8               	btfss	status,2,c
  5722   001A38  EF20  F00D         	goto	u4601
  5723   001A3C  EF22  F00D         	goto	u4600
  5724   001A40                     u4601:
  5725   001A40  EF9B  F00D         	goto	l4154
  5726   001A44                     u4600:
  5727   001A44  C013  FFD9         	movff	UpdateClock@months,fsr2l
  5728   001A48  C014  FFDA         	movff	UpdateClock@months+1,fsr2h
  5729   001A4C  0E0A               	movlw	10
  5730   001A4E  18DE               	xorwf	postinc2,w,c
  5731   001A50  10DE               	iorwf	postinc2,w,c
  5732   001A52  A4D8               	btfss	status,2,c
  5733   001A54  EF2E  F00D         	goto	u4611
  5734   001A58  EF30  F00D         	goto	u4610
  5735   001A5C                     u4611:
  5736   001A5C  EF9B  F00D         	goto	l4154
  5737   001A60                     u4610:
  5738   001A60  C00F  FFD9         	movff	UpdateClock@days,fsr2l
  5739   001A64  C010  FFDA         	movff	UpdateClock@days+1,fsr2h
  5740   001A68  0E01               	movlw	1
  5741   001A6A  BEDB               	btfsc	plusw2,7,c
  5742   001A6C  EF42  F00D         	goto	u4621
  5743   001A70  0E01               	movlw	1
  5744   001A72  50DB               	movf	plusw2,w,c
  5745   001A74  E109               	bnz	u4620
  5746   001A76  0E19               	movlw	25
  5747   001A78  5CDE               	subwf	postinc2,w,c
  5748   001A7A  A0D8               	btfss	status,0,c
  5749   001A7C  EF42  F00D         	goto	u4621
  5750   001A80  EF44  F00D         	goto	u4620
  5751   001A84                     u4621:
  5752   001A84  EF9B  F00D         	goto	l4154
  5753   001A88                     u4620:
  5754   001A88  C011  FFD9         	movff	UpdateClock@DoW,fsr2l
  5755   001A8C  C012  FFDA         	movff	UpdateClock@DoW+1,fsr2h
  5756   001A90  0E07               	movlw	7
  5757   001A92  18DE               	xorwf	postinc2,w,c
  5758   001A94  10DE               	iorwf	postinc2,w,c
  5759   001A96  A4D8               	btfss	status,2,c
  5760   001A98  EF50  F00D         	goto	u4631
  5761   001A9C  EF52  F00D         	goto	u4630
  5762   001AA0                     u4631:
  5763   001AA0  EF9B  F00D         	goto	l4154
  5764   001AA4                     u4630:
  5765   001AA4  C00D  FFD9         	movff	UpdateClock@hours,fsr2l
  5766   001AA8  C00E  FFDA         	movff	UpdateClock@hours+1,fsr2h
  5767   001AAC  0E02               	movlw	2
  5768   001AAE  18DE               	xorwf	postinc2,w,c
  5769   001AB0  10DE               	iorwf	postinc2,w,c
  5770   001AB2  A4D8               	btfss	status,2,c
  5771   001AB4  EF5E  F00D         	goto	u4641
  5772   001AB8  EF60  F00D         	goto	u4640
  5773   001ABC                     u4641:
  5774   001ABC  EF9B  F00D         	goto	l4154
  5775   001AC0                     u4640:
  5776   001AC0                     
  5777                           ;clock.c: 53:         *hours = *hours - 1;
  5778   001AC0  C00D  FFD9         	movff	UpdateClock@hours,fsr2l
  5779   001AC4  C00E  FFDA         	movff	UpdateClock@hours+1,fsr2h
  5780   001AC8  CFDE F01B          	movff	postinc2,??_UpdateClock
  5781   001ACC  CFDD F01C          	movff	postdec2,??_UpdateClock+1
  5782   001AD0  0EFF               	movlw	255
  5783   001AD2  241B               	addwf	??_UpdateClock^0,w,c
  5784   001AD4  6E1D               	movwf	(??_UpdateClock+2)^0,c
  5785   001AD6  0EFF               	movlw	255
  5786   001AD8  201C               	addwfc	(??_UpdateClock+1)^0,w,c
  5787   001ADA  6E1E               	movwf	(??_UpdateClock+3)^0,c
  5788   001ADC  C00D  FFD9         	movff	UpdateClock@hours,fsr2l
  5789   001AE0  C00E  FFDA         	movff	UpdateClock@hours+1,fsr2h
  5790   001AE4  C01D  FFDE         	movff	??_UpdateClock+2,postinc2
  5791   001AE8  C01E  FFDD         	movff	??_UpdateClock+3,postdec2
  5792   001AEC                     
  5793                           ;clock.c: 54:         if (TestMode == 1){
  5794   001AEC  0419               	decf	UpdateClock@TestMode^0,w,c
  5795   001AEE  101A               	iorwf	(UpdateClock@TestMode+1)^0,w,c
  5796   001AF0  A4D8               	btfss	status,2,c
  5797   001AF2  EF7D  F00D         	goto	u4651
  5798   001AF6  EF7F  F00D         	goto	u4650
  5799   001AFA                     u4651:
  5800   001AFA  EF95  F00D         	goto	l4152
  5801   001AFE                     u4650:
  5802   001AFE                     
  5803                           ;clock.c: 55:             *seconds = *seconds - 1;
  5804   001AFE  C009  FFD9         	movff	UpdateClock@seconds,fsr2l
  5805   001B02  C00A  FFDA         	movff	UpdateClock@seconds+1,fsr2h
  5806   001B06  CFDE F01B          	movff	postinc2,??_UpdateClock
  5807   001B0A  CFDD F01C          	movff	postdec2,??_UpdateClock+1
  5808   001B0E  0EFF               	movlw	255
  5809   001B10  241B               	addwf	??_UpdateClock^0,w,c
  5810   001B12  6E1D               	movwf	(??_UpdateClock+2)^0,c
  5811   001B14  0EFF               	movlw	255
  5812   001B16  201C               	addwfc	(??_UpdateClock+1)^0,w,c
  5813   001B18  6E1E               	movwf	(??_UpdateClock+3)^0,c
  5814   001B1A  C009  FFD9         	movff	UpdateClock@seconds,fsr2l
  5815   001B1E  C00A  FFDA         	movff	UpdateClock@seconds+1,fsr2h
  5816   001B22  C01D  FFDE         	movff	??_UpdateClock+2,postinc2
  5817   001B26  C01E  FFDD         	movff	??_UpdateClock+3,postdec2
  5818   001B2A                     l4152:
  5819                           
  5820                           ;clock.c: 57:         *DSTstate = 0;
  5821   001B2A  C017  FFD9         	movff	UpdateClock@DSTstate,fsr2l
  5822   001B2E  C018  FFDA         	movff	UpdateClock@DSTstate+1,fsr2h
  5823   001B32  6ADE               	clrf	postinc2,c
  5824   001B34  6ADD               	clrf	postdec2,c
  5825   001B36                     l4154:
  5826                           
  5827                           ;clock.c: 61:     if ((*years)%4 == 0 && *months == 2){
  5828   001B36  C015  FFD9         	movff	UpdateClock@years,fsr2l
  5829   001B3A  C016  FFDA         	movff	UpdateClock@years+1,fsr2h
  5830   001B3E  CFDE F01B          	movff	postinc2,??_UpdateClock
  5831   001B42  CFDD F01C          	movff	postdec2,??_UpdateClock+1
  5832   001B46  0E03               	movlw	3
  5833   001B48  161B               	andwf	??_UpdateClock^0,f,c
  5834   001B4A  0E00               	movlw	0
  5835   001B4C  161C               	andwf	(??_UpdateClock+1)^0,f,c
  5836   001B4E  501B               	movf	??_UpdateClock^0,w,c
  5837   001B50  101C               	iorwf	(??_UpdateClock+1)^0,w,c
  5838   001B52  A4D8               	btfss	status,2,c
  5839   001B54  EFAE  F00D         	goto	u4661
  5840   001B58  EFB0  F00D         	goto	u4660
  5841   001B5C                     u4661:
  5842   001B5C  EFC2  F00D         	goto	l4160
  5843   001B60                     u4660:
  5844   001B60  C013  FFD9         	movff	UpdateClock@months,fsr2l
  5845   001B64  C014  FFDA         	movff	UpdateClock@months+1,fsr2h
  5846   001B68  0E02               	movlw	2
  5847   001B6A  18DE               	xorwf	postinc2,w,c
  5848   001B6C  10DE               	iorwf	postinc2,w,c
  5849   001B6E  A4D8               	btfss	status,2,c
  5850   001B70  EFBC  F00D         	goto	u4671
  5851   001B74  EFBE  F00D         	goto	u4670
  5852   001B78                     u4671:
  5853   001B78  EFC2  F00D         	goto	l4160
  5854   001B7C                     u4670:
  5855   001B7C                     
  5856                           ;clock.c: 62:        DaysInMonth[1] = 29;
  5857   001B7C  0E00               	movlw	0
  5858   001B7E  6E24               	movwf	(UpdateClock@DaysInMonth+3)^0,c
  5859   001B80  0E1D               	movlw	29
  5860   001B82  6E23               	movwf	(UpdateClock@DaysInMonth+2)^0,c
  5861   001B84                     l4160:
  5862                           
  5863                           ;clock.c: 66:     if (*years%100 == 0 && *months == 2 && *years%400 != 0){
  5864   001B84  C015  FFD9         	movff	UpdateClock@years,fsr2l
  5865   001B88  C016  FFDA         	movff	UpdateClock@years+1,fsr2h
  5866   001B8C  CFDE F001          	movff	postinc2,___awmod@dividend
  5867   001B90  CFDD F002          	movff	postdec2,___awmod@dividend+1
  5868   001B94  0E00               	movlw	0
  5869   001B96  6E04               	movwf	(___awmod@divisor+1)^0,c
  5870   001B98  0E64               	movlw	100
  5871   001B9A  6E03               	movwf	___awmod@divisor^0,c
  5872   001B9C  EC6A  F017         	call	___awmod	;wreg free
  5873   001BA0  5001               	movf	?___awmod^0,w,c
  5874   001BA2  1002               	iorwf	(?___awmod+1)^0,w,c
  5875   001BA4  A4D8               	btfss	status,2,c
  5876   001BA6  EFD7  F00D         	goto	u4681
  5877   001BAA  EFD9  F00D         	goto	u4680
  5878   001BAE                     u4681:
  5879   001BAE  EF02  F00E         	goto	l4168
  5880   001BB2                     u4680:
  5881   001BB2  C013  FFD9         	movff	UpdateClock@months,fsr2l
  5882   001BB6  C014  FFDA         	movff	UpdateClock@months+1,fsr2h
  5883   001BBA  0E02               	movlw	2
  5884   001BBC  18DE               	xorwf	postinc2,w,c
  5885   001BBE  10DE               	iorwf	postinc2,w,c
  5886   001BC0  A4D8               	btfss	status,2,c
  5887   001BC2  EFE5  F00D         	goto	u4691
  5888   001BC6  EFE7  F00D         	goto	u4690
  5889   001BCA                     u4691:
  5890   001BCA  EF02  F00E         	goto	l4168
  5891   001BCE                     u4690:
  5892   001BCE  C015  FFD9         	movff	UpdateClock@years,fsr2l
  5893   001BD2  C016  FFDA         	movff	UpdateClock@years+1,fsr2h
  5894   001BD6  CFDE F001          	movff	postinc2,___awmod@dividend
  5895   001BDA  CFDD F002          	movff	postdec2,___awmod@dividend+1
  5896   001BDE  0E01               	movlw	1
  5897   001BE0  6E04               	movwf	(___awmod@divisor+1)^0,c
  5898   001BE2  0E90               	movlw	144
  5899   001BE4  6E03               	movwf	___awmod@divisor^0,c
  5900   001BE6  EC6A  F017         	call	___awmod	;wreg free
  5901   001BEA  5001               	movf	?___awmod^0,w,c
  5902   001BEC  1002               	iorwf	(?___awmod+1)^0,w,c
  5903   001BEE  B4D8               	btfsc	status,2,c
  5904   001BF0  EFFC  F00D         	goto	u4701
  5905   001BF4  EFFE  F00D         	goto	u4700
  5906   001BF8                     u4701:
  5907   001BF8  EF02  F00E         	goto	l4168
  5908   001BFC                     u4700:
  5909   001BFC                     
  5910                           ;clock.c: 67:             DaysInMonth[1] = 28;
  5911   001BFC  0E00               	movlw	0
  5912   001BFE  6E24               	movwf	(UpdateClock@DaysInMonth+3)^0,c
  5913   001C00  0E1C               	movlw	28
  5914   001C02  6E23               	movwf	(UpdateClock@DaysInMonth+2)^0,c
  5915   001C04                     l4168:
  5916                           
  5917                           ;clock.c: 71:     if (*days > (DaysInMonth[*months-1] ) ) {
  5918   001C04  C00F  FFD9         	movff	UpdateClock@days,fsr2l
  5919   001C08  C010  FFDA         	movff	UpdateClock@days+1,fsr2h
  5920   001C0C  C013  FFE1         	movff	UpdateClock@months,fsr1l
  5921   001C10  C014  FFE2         	movff	UpdateClock@months+1,fsr1h
  5922   001C14  50E7               	movf	indf1,w,c
  5923   001C16  0D02               	mullw	2
  5924   001C18  CFF3 F01D          	movff	prodl,??_UpdateClock+2
  5925   001C1C  0EFE               	movlw	254
  5926   001C1E  261D               	addwf	(??_UpdateClock+2)^0,f,c
  5927   001C20  501D               	movf	(??_UpdateClock+2)^0,w,c
  5928   001C22  0F21               	addlw	low UpdateClock@DaysInMonth
  5929   001C24  6EE1               	movwf	fsr1l,c
  5930   001C26  6AE2               	clrf	fsr1h,c
  5931   001C28  50DE               	movf	postinc2,w,c
  5932   001C2A  5CE6               	subwf	postinc1,w,c
  5933   001C2C  50E6               	movf	postinc1,w,c
  5934   001C2E  0A80               	xorlw	128
  5935   001C30  6E20               	movwf	(??_UpdateClock+5)^0,c
  5936   001C32  50DE               	movf	postinc2,w,c
  5937   001C34  0A80               	xorlw	128
  5938   001C36  5820               	subwfb	(??_UpdateClock+5)^0,w,c
  5939   001C38  B0D8               	btfsc	status,0,c
  5940   001C3A  EF21  F00E         	goto	u4711
  5941   001C3E  EF23  F00E         	goto	u4710
  5942   001C42                     u4711:
  5943   001C42  EF6F  F00E         	goto	l286
  5944   001C46                     u4710:
  5945   001C46                     
  5946                           ;clock.c: 72:         *days = 1;
  5947   001C46  C00F  FFD9         	movff	UpdateClock@days,fsr2l
  5948   001C4A  C010  FFDA         	movff	UpdateClock@days+1,fsr2h
  5949   001C4E  0E01               	movlw	1
  5950   001C50  6EDE               	movwf	postinc2,c
  5951   001C52  0E00               	movlw	0
  5952   001C54  6EDD               	movwf	postdec2,c
  5953   001C56                     
  5954                           ;clock.c: 73:         *months = *months + 1 ;
  5955   001C56  C013  FFD9         	movff	UpdateClock@months,fsr2l
  5956   001C5A  C014  FFDA         	movff	UpdateClock@months+1,fsr2h
  5957   001C5E  CFDE F01B          	movff	postinc2,??_UpdateClock
  5958   001C62  CFDD F01C          	movff	postdec2,??_UpdateClock+1
  5959   001C66  0E01               	movlw	1
  5960   001C68  261B               	addwf	??_UpdateClock^0,f,c
  5961   001C6A  0E00               	movlw	0
  5962   001C6C  221C               	addwfc	(??_UpdateClock+1)^0,f,c
  5963   001C6E  C013  FFD9         	movff	UpdateClock@months,fsr2l
  5964   001C72  C014  FFDA         	movff	UpdateClock@months+1,fsr2h
  5965   001C76  C01B  FFDE         	movff	??_UpdateClock,postinc2
  5966   001C7A  C01C  FFDD         	movff	??_UpdateClock+1,postdec2
  5967   001C7E                     
  5968                           ;clock.c: 75:         if (*months >= 12+1) {
  5969   001C7E  C013  FFD9         	movff	UpdateClock@months,fsr2l
  5970   001C82  C014  FFDA         	movff	UpdateClock@months+1,fsr2h
  5971   001C86  0E01               	movlw	1
  5972   001C88  BEDB               	btfsc	plusw2,7,c
  5973   001C8A  EF51  F00E         	goto	u4721
  5974   001C8E  0E01               	movlw	1
  5975   001C90  50DB               	movf	plusw2,w,c
  5976   001C92  E109               	bnz	u4720
  5977   001C94  0E0D               	movlw	13
  5978   001C96  5CDE               	subwf	postinc2,w,c
  5979   001C98  A0D8               	btfss	status,0,c
  5980   001C9A  EF51  F00E         	goto	u4721
  5981   001C9E  EF53  F00E         	goto	u4720
  5982   001CA2                     u4721:
  5983   001CA2  EF6F  F00E         	goto	l286
  5984   001CA6                     u4720:
  5985   001CA6                     
  5986                           ;clock.c: 76:             *months = 1;
  5987   001CA6  C013  FFD9         	movff	UpdateClock@months,fsr2l
  5988   001CAA  C014  FFDA         	movff	UpdateClock@months+1,fsr2h
  5989   001CAE  0E01               	movlw	1
  5990   001CB0  6EDE               	movwf	postinc2,c
  5991   001CB2  0E00               	movlw	0
  5992   001CB4  6EDD               	movwf	postdec2,c
  5993   001CB6                     
  5994                           ;clock.c: 77:             *years = *years + 1;
  5995   001CB6  C015  FFD9         	movff	UpdateClock@years,fsr2l
  5996   001CBA  C016  FFDA         	movff	UpdateClock@years+1,fsr2h
  5997   001CBE  CFDE F01B          	movff	postinc2,??_UpdateClock
  5998   001CC2  CFDD F01C          	movff	postdec2,??_UpdateClock+1
  5999   001CC6  0E01               	movlw	1
  6000   001CC8  261B               	addwf	??_UpdateClock^0,f,c
  6001   001CCA  0E00               	movlw	0
  6002   001CCC  221C               	addwfc	(??_UpdateClock+1)^0,f,c
  6003   001CCE  C015  FFD9         	movff	UpdateClock@years,fsr2l
  6004   001CD2  C016  FFDA         	movff	UpdateClock@years+1,fsr2h
  6005   001CD6  C01B  FFDE         	movff	??_UpdateClock,postinc2
  6006   001CDA  C01C  FFDD         	movff	??_UpdateClock+1,postdec2
  6007   001CDE                     l286:
  6008   001CDE  0012               	return		;funcret
  6009   001CE0                     __end_of_UpdateClock:
  6010                           	callstack 0
  6011                           
  6012 ;; *************** function ___awmod *****************
  6013 ;; Defined at:
  6014 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\awmod.c"
  6015 ;; Parameters:    Size  Location     Type
  6016 ;;  dividend        2    0[COMRAM] int 
  6017 ;;  divisor         2    2[COMRAM] int 
  6018 ;; Auto vars:     Size  Location     Type
  6019 ;;  sign            1    5[COMRAM] unsigned char 
  6020 ;;  counter         1    4[COMRAM] unsigned char 
  6021 ;; Return value:  Size  Location     Type
  6022 ;;                  2    0[COMRAM] int 
  6023 ;; Registers used:
  6024 ;;		wreg, status,2, status,0
  6025 ;; Tracked objects:
  6026 ;;		On entry : 0/0
  6027 ;;		On exit  : 0/0
  6028 ;;		Unchanged: 0/0
  6029 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6030 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6031 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6032 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6033 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6034 ;;Total ram usage:        6 bytes
  6035 ;; Hardware stack levels used: 1
  6036 ;; Hardware stack levels required when called: 1
  6037 ;; This function calls:
  6038 ;;		Nothing
  6039 ;; This function is called by:
  6040 ;;		_UpdateClock
  6041 ;;		_dtoa
  6042 ;; This function uses a non-reentrant model
  6043 ;;
  6044                           
  6045                           	psect	text18
  6046   002ED4                     __ptext18:
  6047                           	callstack 0
  6048   002ED4                     ___awmod:
  6049                           	callstack 25
  6050   002ED4  0E00               	movlw	0
  6051   002ED6  6E06               	movwf	___awmod@sign^0,c
  6052   002ED8  BE02               	btfsc	(___awmod@dividend+1)^0,7,c
  6053   002EDA  EF73  F017         	goto	u2390
  6054   002EDE  EF71  F017         	goto	u2391
  6055   002EE2                     u2391:
  6056   002EE2  EF79  F017         	goto	l2716
  6057   002EE6                     u2390:
  6058   002EE6  6C01               	negf	___awmod@dividend^0,c
  6059   002EE8  1E02               	comf	(___awmod@dividend+1)^0,f,c
  6060   002EEA  B0D8               	btfsc	status,0,c
  6061   002EEC  2A02               	incf	(___awmod@dividend+1)^0,f,c
  6062   002EEE  0E01               	movlw	1
  6063   002EF0  6E06               	movwf	___awmod@sign^0,c
  6064   002EF2                     l2716:
  6065   002EF2  BE04               	btfsc	(___awmod@divisor+1)^0,7,c
  6066   002EF4  EF80  F017         	goto	u2400
  6067   002EF8  EF7E  F017         	goto	u2401
  6068   002EFC                     u2401:
  6069   002EFC  EF84  F017         	goto	l2720
  6070   002F00                     u2400:
  6071   002F00  6C03               	negf	___awmod@divisor^0,c
  6072   002F02  1E04               	comf	(___awmod@divisor+1)^0,f,c
  6073   002F04  B0D8               	btfsc	status,0,c
  6074   002F06  2A04               	incf	(___awmod@divisor+1)^0,f,c
  6075   002F08                     l2720:
  6076   002F08  5003               	movf	___awmod@divisor^0,w,c
  6077   002F0A  1004               	iorwf	(___awmod@divisor+1)^0,w,c
  6078   002F0C  B4D8               	btfsc	status,2,c
  6079   002F0E  EF8B  F017         	goto	u2411
  6080   002F12  EF8D  F017         	goto	u2410
  6081   002F16                     u2411:
  6082   002F16  EFB1  F017         	goto	l2736
  6083   002F1A                     u2410:
  6084   002F1A  0E01               	movlw	1
  6085   002F1C  6E05               	movwf	___awmod@counter^0,c
  6086   002F1E  EF95  F017         	goto	l2726
  6087   002F22                     l2724:
  6088   002F22  90D8               	bcf	status,0,c
  6089   002F24  3603               	rlcf	___awmod@divisor^0,f,c
  6090   002F26  3604               	rlcf	(___awmod@divisor+1)^0,f,c
  6091   002F28  2A05               	incf	___awmod@counter^0,f,c
  6092   002F2A                     l2726:
  6093   002F2A  AE04               	btfss	(___awmod@divisor+1)^0,7,c
  6094   002F2C  EF9A  F017         	goto	u2421
  6095   002F30  EF9C  F017         	goto	u2420
  6096   002F34                     u2421:
  6097   002F34  EF91  F017         	goto	l2724
  6098   002F38                     u2420:
  6099   002F38                     l2728:
  6100   002F38  5003               	movf	___awmod@divisor^0,w,c
  6101   002F3A  5C01               	subwf	___awmod@dividend^0,w,c
  6102   002F3C  5004               	movf	(___awmod@divisor+1)^0,w,c
  6103   002F3E  5802               	subwfb	(___awmod@dividend+1)^0,w,c
  6104   002F40  A0D8               	btfss	status,0,c
  6105   002F42  EFA5  F017         	goto	u2431
  6106   002F46  EFA7  F017         	goto	u2430
  6107   002F4A                     u2431:
  6108   002F4A  EFAB  F017         	goto	l2732
  6109   002F4E                     u2430:
  6110   002F4E  5003               	movf	___awmod@divisor^0,w,c
  6111   002F50  5E01               	subwf	___awmod@dividend^0,f,c
  6112   002F52  5004               	movf	(___awmod@divisor+1)^0,w,c
  6113   002F54  5A02               	subwfb	(___awmod@dividend+1)^0,f,c
  6114   002F56                     l2732:
  6115   002F56  90D8               	bcf	status,0,c
  6116   002F58  3204               	rrcf	(___awmod@divisor+1)^0,f,c
  6117   002F5A  3203               	rrcf	___awmod@divisor^0,f,c
  6118   002F5C  2E05               	decfsz	___awmod@counter^0,f,c
  6119   002F5E  EF9C  F017         	goto	l2728
  6120   002F62                     l2736:
  6121   002F62  5006               	movf	___awmod@sign^0,w,c
  6122   002F64  B4D8               	btfsc	status,2,c
  6123   002F66  EFB7  F017         	goto	u2441
  6124   002F6A  EFB9  F017         	goto	u2440
  6125   002F6E                     u2441:
  6126   002F6E  EFBD  F017         	goto	l2740
  6127   002F72                     u2440:
  6128   002F72  6C01               	negf	___awmod@dividend^0,c
  6129   002F74  1E02               	comf	(___awmod@dividend+1)^0,f,c
  6130   002F76  B0D8               	btfsc	status,0,c
  6131   002F78  2A02               	incf	(___awmod@dividend+1)^0,f,c
  6132   002F7A                     l2740:
  6133   002F7A  C001  F001         	movff	___awmod@dividend,?___awmod
  6134   002F7E  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
  6135   002F82  0012               	return		;funcret
  6136   002F84                     __end_of___awmod:
  6137                           	callstack 0
  6138                           
  6139 ;; *************** function _Timer0_init *****************
  6140 ;; Defined at:
  6141 ;;		line 8 in file "timers.c"
  6142 ;; Parameters:    Size  Location     Type
  6143 ;;		None
  6144 ;; Auto vars:     Size  Location     Type
  6145 ;;		None
  6146 ;; Return value:  Size  Location     Type
  6147 ;;                  1    wreg      void 
  6148 ;; Registers used:
  6149 ;;		wreg, status,2
  6150 ;; Tracked objects:
  6151 ;;		On entry : 0/0
  6152 ;;		On exit  : 0/0
  6153 ;;		Unchanged: 0/0
  6154 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6155 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6156 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6157 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6158 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6159 ;;Total ram usage:        0 bytes
  6160 ;; Hardware stack levels used: 1
  6161 ;; Hardware stack levels required when called: 1
  6162 ;; This function calls:
  6163 ;;		Nothing
  6164 ;; This function is called by:
  6165 ;;		_main
  6166 ;; This function uses a non-reentrant model
  6167 ;;
  6168                           
  6169                           	psect	text19
  6170   0034E4                     __ptext19:
  6171                           	callstack 0
  6172   0034E4                     _Timer0_init:
  6173                           	callstack 29
  6174   0034E4                     
  6175                           ;timers.c: 10:     T0CON1bits.T0CS=0b010;
  6176   0034E4  50D6               	movf	214,w,c	;volatile
  6177   0034E6  0B1F               	andlw	-225
  6178   0034E8  0940               	iorlw	64
  6179   0034EA  6ED6               	movwf	214,c	;volatile
  6180   0034EC                     
  6181                           ;timers.c: 11:     T0CON1bits.T0ASYNC=1;
  6182   0034EC  88D6               	bsf	214,4,c	;volatile
  6183                           
  6184                           ;timers.c: 13:     T0CON1bits.T0CKPS=0b0011;
  6185   0034EE  50D6               	movf	214,w,c	;volatile
  6186   0034F0  0BF0               	andlw	-16
  6187   0034F2  0903               	iorlw	3
  6188   0034F4  6ED6               	movwf	214,c	;volatile
  6189   0034F6                     
  6190                           ;timers.c: 15:     T0CON0bits.T016BIT=1;
  6191   0034F6  88D5               	bsf	213,4,c	;volatile
  6192                           
  6193                           ;timers.c: 18:     TMR0H = 0b01111101;
  6194   0034F8  0E7D               	movlw	125
  6195   0034FA  6ED4               	movwf	212,c	;volatile
  6196                           
  6197                           ;timers.c: 19:     TMR0L = 0b11001011;
  6198   0034FC  0ECB               	movlw	203
  6199   0034FE  6ED3               	movwf	211,c	;volatile
  6200   003500                     
  6201                           ;timers.c: 32:     T0CON0bits.T0EN=1;
  6202   003500  8ED5               	bsf	213,7,c	;volatile
  6203   003502  0012               	return		;funcret
  6204   003504                     __end_of_Timer0_init:
  6205                           	callstack 0
  6206                           
  6207 ;; *************** function _LEDarray_init *****************
  6208 ;; Defined at:
  6209 ;;		line 8 in file "LEDarray.c"
  6210 ;; Parameters:    Size  Location     Type
  6211 ;;		None
  6212 ;; Auto vars:     Size  Location     Type
  6213 ;;		None
  6214 ;; Return value:  Size  Location     Type
  6215 ;;                  1    wreg      void 
  6216 ;; Registers used:
  6217 ;;		None
  6218 ;; Tracked objects:
  6219 ;;		On entry : 0/0
  6220 ;;		On exit  : 0/0
  6221 ;;		Unchanged: 0/0
  6222 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6223 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6224 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6225 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6226 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6227 ;;Total ram usage:        0 bytes
  6228 ;; Hardware stack levels used: 1
  6229 ;; Hardware stack levels required when called: 1
  6230 ;; This function calls:
  6231 ;;		Nothing
  6232 ;; This function is called by:
  6233 ;;		_main
  6234 ;; This function uses a non-reentrant model
  6235 ;;
  6236                           
  6237                           	psect	text20
  6238   00349A                     __ptext20:
  6239                           	callstack 0
  6240   00349A                     _LEDarray_init:
  6241                           	callstack 29
  6242   00349A                     
  6243                           ;LEDarray.c: 16:     TRISGbits.TRISG0 = 0;
  6244   00349A  9087               	bcf	135,0,c	;volatile
  6245                           
  6246                           ;LEDarray.c: 17:     LATGbits.LATG0 = 0;
  6247   00349C  907F               	bcf	127,0,c	;volatile
  6248                           
  6249                           ;LEDarray.c: 19:     TRISGbits.TRISG1 = 0;
  6250   00349E  9287               	bcf	135,1,c	;volatile
  6251                           
  6252                           ;LEDarray.c: 20:     LATGbits.LATG1 = 0;
  6253   0034A0  927F               	bcf	127,1,c	;volatile
  6254                           
  6255                           ;LEDarray.c: 22:     TRISAbits.TRISA2 = 0;
  6256   0034A2  9481               	bcf	129,2,c	;volatile
  6257                           
  6258                           ;LEDarray.c: 23:     LATAbits.LATA2 = 0;
  6259   0034A4  9479               	bcf	121,2,c	;volatile
  6260                           
  6261                           ;LEDarray.c: 25:     TRISFbits.TRISF6 = 0;
  6262   0034A6  9C86               	bcf	134,6,c	;volatile
  6263                           
  6264                           ;LEDarray.c: 26:     LATFbits.LATF6 = 0;
  6265   0034A8  9C7E               	bcf	126,6,c	;volatile
  6266                           
  6267                           ;LEDarray.c: 28:     TRISAbits.TRISA4 = 0;
  6268   0034AA  9881               	bcf	129,4,c	;volatile
  6269                           
  6270                           ;LEDarray.c: 29:     LATAbits.LATA4 = 0;
  6271   0034AC  9879               	bcf	121,4,c	;volatile
  6272                           
  6273                           ;LEDarray.c: 31:     TRISAbits.TRISA5 = 0;
  6274   0034AE  9A81               	bcf	129,5,c	;volatile
  6275                           
  6276                           ;LEDarray.c: 32:     LATAbits.LATA5 = 0;
  6277   0034B0  9A79               	bcf	121,5,c	;volatile
  6278                           
  6279                           ;LEDarray.c: 34:     TRISFbits.TRISF0 = 0;
  6280   0034B2  9086               	bcf	134,0,c	;volatile
  6281                           
  6282                           ;LEDarray.c: 35:     LATFbits.LATF0 = 0;
  6283   0034B4  907E               	bcf	126,0,c	;volatile
  6284                           
  6285                           ;LEDarray.c: 37:     TRISBbits.TRISB0 = 0;
  6286   0034B6  9082               	bcf	130,0,c	;volatile
  6287                           
  6288                           ;LEDarray.c: 38:     LATBbits.LATB0 = 0;
  6289   0034B8  907A               	bcf	122,0,c	;volatile
  6290                           
  6291                           ;LEDarray.c: 40:     TRISBbits.TRISB1 = 0;
  6292   0034BA  9282               	bcf	130,1,c	;volatile
  6293                           
  6294                           ;LEDarray.c: 41:     LATBbits.LATB1 = 0;
  6295   0034BC  927A               	bcf	122,1,c	;volatile
  6296   0034BE  0012               	return		;funcret
  6297   0034C0                     __end_of_LEDarray_init:
  6298                           	callstack 0
  6299                           
  6300 ;; *************** function _LEDarray_disp_bin *****************
  6301 ;; Defined at:
  6302 ;;		line 49 in file "LEDarray.c"
  6303 ;; Parameters:    Size  Location     Type
  6304 ;;  number          2    0[COMRAM] unsigned int 
  6305 ;; Auto vars:     Size  Location     Type
  6306 ;;		None
  6307 ;; Return value:  Size  Location     Type
  6308 ;;                  1    wreg      void 
  6309 ;; Registers used:
  6310 ;;		None
  6311 ;; Tracked objects:
  6312 ;;		On entry : 0/0
  6313 ;;		On exit  : 0/0
  6314 ;;		Unchanged: 0/0
  6315 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6316 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6317 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6318 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6319 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6320 ;;Total ram usage:        2 bytes
  6321 ;; Hardware stack levels used: 1
  6322 ;; Hardware stack levels required when called: 1
  6323 ;; This function calls:
  6324 ;;		Nothing
  6325 ;; This function is called by:
  6326 ;;		_main
  6327 ;; This function uses a non-reentrant model
  6328 ;;
  6329                           
  6330                           	psect	text21
  6331   002C8E                     __ptext21:
  6332                           	callstack 0
  6333   002C8E                     _LEDarray_disp_bin:
  6334                           	callstack 29
  6335   002C8E                     
  6336                           ;LEDarray.c: 49: void LEDarray_disp_bin(unsigned int number);LEDarray.c: 50: {;LEDarray.
      +                          c: 53:     if (number & 0b000000001){ LATGbits.LATG0 = 1 ; }
  6337   002C8E  A001               	btfss	LEDarray_disp_bin@number^0,0,c
  6338   002C90  EF4C  F016         	goto	u3031
  6339   002C94  EF4E  F016         	goto	u3030
  6340   002C98                     u3031:
  6341   002C98  EF51  F016         	goto	l151
  6342   002C9C                     u3030:
  6343   002C9C  807F               	bsf	127,0,c	;volatile
  6344   002C9E  EF52  F016         	goto	l152
  6345   002CA2                     l151:
  6346   002CA2  907F               	bcf	127,0,c	;volatile
  6347   002CA4                     l152:
  6348                           
  6349                           ;LEDarray.c: 56:     if (number & 0b000000010){ LATGbits.LATG1 = 1 ; }
  6350   002CA4  A201               	btfss	LEDarray_disp_bin@number^0,1,c
  6351   002CA6  EF57  F016         	goto	u3041
  6352   002CAA  EF59  F016         	goto	u3040
  6353   002CAE                     u3041:
  6354   002CAE  EF5C  F016         	goto	l153
  6355   002CB2                     u3040:
  6356   002CB2  827F               	bsf	127,1,c	;volatile
  6357   002CB4  EF5D  F016         	goto	l154
  6358   002CB8                     l153:
  6359   002CB8  927F               	bcf	127,1,c	;volatile
  6360   002CBA                     l154:
  6361                           
  6362                           ;LEDarray.c: 59:     if (number & 0b000000100){ LATAbits.LATA2 = 1 ; }
  6363   002CBA  A401               	btfss	LEDarray_disp_bin@number^0,2,c
  6364   002CBC  EF62  F016         	goto	u3051
  6365   002CC0  EF64  F016         	goto	u3050
  6366   002CC4                     u3051:
  6367   002CC4  EF67  F016         	goto	l155
  6368   002CC8                     u3050:
  6369   002CC8  8479               	bsf	121,2,c	;volatile
  6370   002CCA  EF68  F016         	goto	l156
  6371   002CCE                     l155:
  6372   002CCE  9479               	bcf	121,2,c	;volatile
  6373   002CD0                     l156:
  6374                           
  6375                           ;LEDarray.c: 62:     if (number & 0b000001000){ LATFbits.LATF6 = 1 ; }
  6376   002CD0  A601               	btfss	LEDarray_disp_bin@number^0,3,c
  6377   002CD2  EF6D  F016         	goto	u3061
  6378   002CD6  EF6F  F016         	goto	u3060
  6379   002CDA                     u3061:
  6380   002CDA  EF72  F016         	goto	l157
  6381   002CDE                     u3060:
  6382   002CDE  8C7E               	bsf	126,6,c	;volatile
  6383   002CE0  EF73  F016         	goto	l158
  6384   002CE4                     l157:
  6385   002CE4  9C7E               	bcf	126,6,c	;volatile
  6386   002CE6                     l158:
  6387                           
  6388                           ;LEDarray.c: 65:     if (number & 0b000010000){ LATAbits.LATA4 = 1 ; }
  6389   002CE6  A801               	btfss	LEDarray_disp_bin@number^0,4,c
  6390   002CE8  EF78  F016         	goto	u3071
  6391   002CEC  EF7A  F016         	goto	u3070
  6392   002CF0                     u3071:
  6393   002CF0  EF7D  F016         	goto	l159
  6394   002CF4                     u3070:
  6395   002CF4  8879               	bsf	121,4,c	;volatile
  6396   002CF6  EF7E  F016         	goto	l160
  6397   002CFA                     l159:
  6398   002CFA  9879               	bcf	121,4,c	;volatile
  6399   002CFC                     l160:
  6400                           
  6401                           ;LEDarray.c: 68:     if (number & 0b000100000){ LATAbits.LATA5 = 1 ; }
  6402   002CFC  AA01               	btfss	LEDarray_disp_bin@number^0,5,c
  6403   002CFE  EF83  F016         	goto	u3081
  6404   002D02  EF85  F016         	goto	u3080
  6405   002D06                     u3081:
  6406   002D06  EF88  F016         	goto	l161
  6407   002D0A                     u3080:
  6408   002D0A  8A79               	bsf	121,5,c	;volatile
  6409   002D0C  EF89  F016         	goto	l162
  6410   002D10                     l161:
  6411   002D10  9A79               	bcf	121,5,c	;volatile
  6412   002D12                     l162:
  6413                           
  6414                           ;LEDarray.c: 71:     if (number & 0b001000000){ LATFbits.LATF0 = 1 ; }
  6415   002D12  AC01               	btfss	LEDarray_disp_bin@number^0,6,c
  6416   002D14  EF8E  F016         	goto	u3091
  6417   002D18  EF90  F016         	goto	u3090
  6418   002D1C                     u3091:
  6419   002D1C  EF93  F016         	goto	l163
  6420   002D20                     u3090:
  6421   002D20  807E               	bsf	126,0,c	;volatile
  6422   002D22  EF94  F016         	goto	l164
  6423   002D26                     l163:
  6424   002D26  907E               	bcf	126,0,c	;volatile
  6425   002D28                     l164:
  6426                           
  6427                           ;LEDarray.c: 74:     if (number & 0b010000000){ LATBbits.LATB0 = 1 ; }
  6428   002D28  AE01               	btfss	LEDarray_disp_bin@number^0,7,c
  6429   002D2A  EF99  F016         	goto	u3101
  6430   002D2E  EF9B  F016         	goto	u3100
  6431   002D32                     u3101:
  6432   002D32  EF9E  F016         	goto	l165
  6433   002D36                     u3100:
  6434   002D36  807A               	bsf	122,0,c	;volatile
  6435   002D38  EF9F  F016         	goto	l166
  6436   002D3C                     l165:
  6437   002D3C  907A               	bcf	122,0,c	;volatile
  6438   002D3E                     l166:
  6439                           
  6440                           ;LEDarray.c: 77:     if (number & 0b100000000){ LATBbits.LATB1 = 1 ; }
  6441   002D3E  A002               	btfss	(LEDarray_disp_bin@number+1)^0,0,c
  6442   002D40  EFA4  F016         	goto	u3111
  6443   002D44  EFA6  F016         	goto	u3110
  6444   002D48                     u3111:
  6445   002D48  EFA9  F016         	goto	l167
  6446   002D4C                     u3110:
  6447   002D4C  827A               	bsf	122,1,c	;volatile
  6448   002D4E  EFAA  F016         	goto	l169
  6449   002D52                     l167:
  6450   002D52  927A               	bcf	122,1,c	;volatile
  6451   002D54                     l169:
  6452   002D54  0012               	return		;funcret
  6453   002D56                     __end_of_LEDarray_disp_bin:
  6454                           	callstack 0
  6455                           
  6456 ;; *************** function _LCD_setline *****************
  6457 ;; Defined at:
  6458 ;;		line 120 in file "LCD.c"
  6459 ;; Parameters:    Size  Location     Type
  6460 ;;  line            1    wreg     unsigned char 
  6461 ;; Auto vars:     Size  Location     Type
  6462 ;;  line            1    3[COMRAM] unsigned char 
  6463 ;; Return value:  Size  Location     Type
  6464 ;;                  1    wreg      void 
  6465 ;; Registers used:
  6466 ;;		wreg, status,2, status,0, cstack
  6467 ;; Tracked objects:
  6468 ;;		On entry : 0/0
  6469 ;;		On exit  : 0/0
  6470 ;;		Unchanged: 0/0
  6471 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6472 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6473 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6474 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6475 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6476 ;;Total ram usage:        1 bytes
  6477 ;; Hardware stack levels used: 1
  6478 ;; Hardware stack levels required when called: 4
  6479 ;; This function calls:
  6480 ;;		_LCD_sendbyte
  6481 ;; This function is called by:
  6482 ;;		_main
  6483 ;; This function uses a non-reentrant model
  6484 ;;
  6485                           
  6486                           	psect	text22
  6487   0033A2                     __ptext22:
  6488                           	callstack 0
  6489   0033A2                     _LCD_setline:
  6490                           	callstack 26
  6491                           
  6492                           ;incstack = 0
  6493                           ;LCD_setline@line stored from wreg
  6494   0033A2  6E04               	movwf	LCD_setline@line^0,c
  6495   0033A4                     
  6496                           ;LCD.c: 120: void LCD_setline (char line);LCD.c: 121: {;LCD.c: 124:     if (line == 2){
  6497   0033A4  0E02               	movlw	2
  6498   0033A6  1804               	xorwf	LCD_setline@line^0,w,c
  6499   0033A8  A4D8               	btfss	status,2,c
  6500   0033AA  EFD9  F019         	goto	u3151
  6501   0033AE  EFDB  F019         	goto	u3150
  6502   0033B2                     u3151:
  6503   0033B2  EFE0  F019         	goto	l3170
  6504   0033B6                     u3150:
  6505   0033B6                     
  6506                           ;LCD.c: 125:         LCD_sendbyte(0xC0,0);
  6507   0033B6  0E00               	movlw	0
  6508   0033B8  6E02               	movwf	LCD_sendbyte@type^0,c
  6509   0033BA  0EC0               	movlw	192
  6510   0033BC  EC60  F01A         	call	_LCD_sendbyte
  6511   0033C0                     l3170:
  6512                           
  6513                           ;LCD.c: 128:     if (line==1){
  6514   0033C0  0404               	decf	LCD_setline@line^0,w,c
  6515   0033C2  A4D8               	btfss	status,2,c
  6516   0033C4  EFE6  F019         	goto	u3161
  6517   0033C8  EFE8  F019         	goto	u3160
  6518   0033CC                     u3161:
  6519   0033CC  EFED  F019         	goto	l327
  6520   0033D0                     u3160:
  6521   0033D0                     
  6522                           ;LCD.c: 129:         LCD_sendbyte(0x80,0);
  6523   0033D0  0E00               	movlw	0
  6524   0033D2  6E02               	movwf	LCD_sendbyte@type^0,c
  6525   0033D4  0E80               	movlw	128
  6526   0033D6  EC60  F01A         	call	_LCD_sendbyte
  6527   0033DA                     l327:
  6528   0033DA  0012               	return		;funcret
  6529   0033DC                     __end_of_LCD_setline:
  6530                           	callstack 0
  6531                           
  6532 ;; *************** function _LCD_sendstring *****************
  6533 ;; Defined at:
  6534 ;;		line 136 in file "LCD.c"
  6535 ;; Parameters:    Size  Location     Type
  6536 ;;  string          2    3[COMRAM] PTR unsigned char 
  6537 ;;		 -> main@buffer(18), 
  6538 ;; Auto vars:     Size  Location     Type
  6539 ;;		None
  6540 ;; Return value:  Size  Location     Type
  6541 ;;                  1    wreg      void 
  6542 ;; Registers used:
  6543 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6544 ;; Tracked objects:
  6545 ;;		On entry : 0/0
  6546 ;;		On exit  : 0/0
  6547 ;;		Unchanged: 0/0
  6548 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6549 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6550 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6551 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6552 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6553 ;;Total ram usage:        2 bytes
  6554 ;; Hardware stack levels used: 1
  6555 ;; Hardware stack levels required when called: 4
  6556 ;; This function calls:
  6557 ;;		_LCD_sendbyte
  6558 ;; This function is called by:
  6559 ;;		_main
  6560 ;;		_ADC2String
  6561 ;; This function uses a non-reentrant model
  6562 ;;
  6563                           
  6564                           	psect	text23
  6565   003410                     __ptext23:
  6566                           	callstack 0
  6567   003410                     _LCD_sendstring:
  6568                           	callstack 26
  6569   003410                     
  6570                           ;LCD.c: 136: void LCD_sendstring(char *string);LCD.c: 137: {;LCD.c: 139:     while(*stri
      +                          ng != 0){
  6571   003410  EF15  F01A         	goto	l3192
  6572   003414                     l3188:
  6573                           
  6574                           ;LCD.c: 140:   LCD_sendbyte(*string++,1);
  6575   003414  0E01               	movlw	1
  6576   003416  6E02               	movwf	LCD_sendbyte@type^0,c
  6577   003418  C004  FFD9         	movff	LCD_sendstring@string,fsr2l
  6578   00341C  C005  FFDA         	movff	LCD_sendstring@string+1,fsr2h
  6579   003420  50DF               	movf	indf2,w,c
  6580   003422  EC60  F01A         	call	_LCD_sendbyte
  6581   003426  4A04               	infsnz	LCD_sendstring@string^0,f,c
  6582   003428  2A05               	incf	(LCD_sendstring@string+1)^0,f,c
  6583   00342A                     l3192:
  6584                           
  6585                           ;LCD.c: 139:     while(*string != 0){
  6586   00342A  C004  FFD9         	movff	LCD_sendstring@string,fsr2l
  6587   00342E  C005  FFDA         	movff	LCD_sendstring@string+1,fsr2h
  6588   003432  50DF               	movf	indf2,w,c
  6589   003434  A4D8               	btfss	status,2,c
  6590   003436  EF1F  F01A         	goto	u3171
  6591   00343A  EF21  F01A         	goto	u3170
  6592   00343E                     u3171:
  6593   00343E  EF0A  F01A         	goto	l3188
  6594   003442                     u3170:
  6595   003442  0012               	return		;funcret
  6596   003444                     __end_of_LCD_sendstring:
  6597                           	callstack 0
  6598                           
  6599 ;; *************** function _LCD_Init *****************
  6600 ;; Defined at:
  6601 ;;		line 57 in file "LCD.c"
  6602 ;; Parameters:    Size  Location     Type
  6603 ;;		None
  6604 ;; Auto vars:     Size  Location     Type
  6605 ;;		None
  6606 ;; Return value:  Size  Location     Type
  6607 ;;                  1    wreg      void 
  6608 ;; Registers used:
  6609 ;;		wreg, status,2, status,0, cstack
  6610 ;; Tracked objects:
  6611 ;;		On entry : 0/0
  6612 ;;		On exit  : 0/0
  6613 ;;		Unchanged: 0/0
  6614 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6615 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6616 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6617 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6618 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6619 ;;Total ram usage:        2 bytes
  6620 ;; Hardware stack levels used: 1
  6621 ;; Hardware stack levels required when called: 4
  6622 ;; This function calls:
  6623 ;;		_LCD_sendbyte
  6624 ;;		_LCD_sendnibble
  6625 ;; This function is called by:
  6626 ;;		_main
  6627 ;; This function uses a non-reentrant model
  6628 ;;
  6629                           
  6630                           	psect	text24
  6631   002A68                     __ptext24:
  6632                           	callstack 0
  6633   002A68                     _LCD_Init:
  6634                           	callstack 26
  6635   002A68                     
  6636                           ;LCD.c: 69:     TRISBbits.TRISB3 = 0;
  6637   002A68  9682               	bcf	130,3,c	;volatile
  6638                           
  6639                           ;LCD.c: 71:     LATBbits.LATB3 = 0;
  6640   002A6A  967A               	bcf	122,3,c	;volatile
  6641                           
  6642                           ;LCD.c: 73:     TRISBbits.TRISB2 = 0;
  6643   002A6C  9482               	bcf	130,2,c	;volatile
  6644                           
  6645                           ;LCD.c: 75:     LATBbits.LATB2 = 0;
  6646   002A6E  947A               	bcf	122,2,c	;volatile
  6647                           
  6648                           ;LCD.c: 77:     TRISEbits.TRISE3 = 0;
  6649   002A70  9685               	bcf	133,3,c	;volatile
  6650                           
  6651                           ;LCD.c: 79:     LATEbits.LATE3 = 0;
  6652   002A72  967D               	bcf	125,3,c	;volatile
  6653                           
  6654                           ;LCD.c: 81:     TRISEbits.TRISE1 = 0;
  6655   002A74  9285               	bcf	133,1,c	;volatile
  6656                           
  6657                           ;LCD.c: 83:     LATEbits.LATE1 = 0;
  6658   002A76  927D               	bcf	125,1,c	;volatile
  6659                           
  6660                           ;LCD.c: 85:     TRISCbits.TRISC2 = 0;
  6661   002A78  9483               	bcf	131,2,c	;volatile
  6662                           
  6663                           ;LCD.c: 86:     LATCbits.LATC2 = 0;
  6664   002A7A  947B               	bcf	123,2,c	;volatile
  6665                           
  6666                           ;LCD.c: 88:     TRISCbits.TRISC6 = 0;
  6667   002A7C  9C83               	bcf	131,6,c	;volatile
  6668                           
  6669                           ;LCD.c: 89:     LATCbits.LATC6 = 0;
  6670   002A7E  9C7B               	bcf	123,6,c	;volatile
  6671   002A80                     
  6672                           ;LCD.c: 91:     _delay((unsigned long)((150)*(64000000/4000.0)));
  6673   002A80  0E0D               	movlw	13
  6674   002A82  6E05               	movwf	(??_LCD_Init+1)^0,c
  6675   002A84  0E2D               	movlw	45
  6676   002A86  6E04               	movwf	??_LCD_Init^0,c
  6677   002A88  0ED8               	movlw	216
  6678   002A8A                     u4907:
  6679   002A8A  2EE8               	decfsz	wreg,f,c
  6680   002A8C  D7FE               	bra	u4907
  6681   002A8E  2E04               	decfsz	??_LCD_Init^0,f,c
  6682   002A90  D7FC               	bra	u4907
  6683   002A92  2E05               	decfsz	(??_LCD_Init+1)^0,f,c
  6684   002A94  D7FA               	bra	u4907
  6685   002A96                     
  6686                           ;LCD.c: 92:     LCD_sendnibble(0b0011);
  6687   002A96  0E03               	movlw	3
  6688   002A98  EC1B  F019         	call	_LCD_sendnibble
  6689   002A9C                     
  6690                           ;LCD.c: 93:     _delay((unsigned long)((5)*(64000000/4000.0)));
  6691   002A9C  0E68               	movlw	104
  6692   002A9E  6E04               	movwf	??_LCD_Init^0,c
  6693   002AA0  0EE4               	movlw	228
  6694   002AA2                     u4917:
  6695   002AA2  2EE8               	decfsz	wreg,f,c
  6696   002AA4  D7FE               	bra	u4917
  6697   002AA6  2E04               	decfsz	??_LCD_Init^0,f,c
  6698   002AA8  D7FC               	bra	u4917
  6699   002AAA  D000               	nop2	
  6700                           
  6701                           ;LCD.c: 94:     LCD_sendnibble(0b0011);
  6702   002AAC  0E03               	movlw	3
  6703   002AAE  EC1B  F019         	call	_LCD_sendnibble
  6704   002AB2                     
  6705                           ;LCD.c: 95:     _delay((unsigned long)((150)*(64000000/4000000.0)));
  6706   002AB2  0E04               	movlw	4
  6707   002AB4  6E04               	movwf	??_LCD_Init^0,c
  6708   002AB6  0E1C               	movlw	28
  6709   002AB8                     u4927:
  6710   002AB8  2EE8               	decfsz	wreg,f,c
  6711   002ABA  D7FE               	bra	u4927
  6712   002ABC  2E04               	decfsz	??_LCD_Init^0,f,c
  6713   002ABE  D7FC               	bra	u4927
  6714   002AC0  D000               	nop2	
  6715   002AC2                     
  6716                           ;LCD.c: 96:     LCD_sendnibble(0b0011);
  6717   002AC2  0E03               	movlw	3
  6718   002AC4  EC1B  F019         	call	_LCD_sendnibble
  6719                           
  6720                           ;LCD.c: 97:     _delay((unsigned long)((150)*(64000000/4000000.0)));
  6721   002AC8  0E04               	movlw	4
  6722   002ACA  6E04               	movwf	??_LCD_Init^0,c
  6723   002ACC  0E1C               	movlw	28
  6724   002ACE                     u4937:
  6725   002ACE  2EE8               	decfsz	wreg,f,c
  6726   002AD0  D7FE               	bra	u4937
  6727   002AD2  2E04               	decfsz	??_LCD_Init^0,f,c
  6728   002AD4  D7FC               	bra	u4937
  6729   002AD6  D000               	nop2	
  6730   002AD8                     
  6731                           ;LCD.c: 98:     LCD_sendnibble(0b0010);
  6732   002AD8  0E02               	movlw	2
  6733   002ADA  EC1B  F019         	call	_LCD_sendnibble
  6734   002ADE                     
  6735                           ;LCD.c: 99:     _delay((unsigned long)((150)*(64000000/4000000.0)));
  6736   002ADE  0E04               	movlw	4
  6737   002AE0  6E04               	movwf	??_LCD_Init^0,c
  6738   002AE2  0E1C               	movlw	28
  6739   002AE4                     u4947:
  6740   002AE4  2EE8               	decfsz	wreg,f,c
  6741   002AE6  D7FE               	bra	u4947
  6742   002AE8  2E04               	decfsz	??_LCD_Init^0,f,c
  6743   002AEA  D7FC               	bra	u4947
  6744   002AEC  D000               	nop2	
  6745   002AEE                     
  6746                           ;LCD.c: 100:     LCD_sendbyte(0b00101100,0);
  6747   002AEE  0E00               	movlw	0
  6748   002AF0  6E02               	movwf	LCD_sendbyte@type^0,c
  6749   002AF2  0E2C               	movlw	44
  6750   002AF4  EC60  F01A         	call	_LCD_sendbyte
  6751   002AF8                     
  6752                           ;LCD.c: 101:     _delay((unsigned long)((100)*(64000000/4000000.0)));
  6753   002AF8  0EE4               	movlw	228
  6754   002AFA                     u4957:
  6755   002AFA  D000               	nop2	
  6756   002AFC  D000               	nop2	
  6757   002AFE  2EE8               	decfsz	wreg,f,c
  6758   002B00  D7FC               	bra	u4957
  6759   002B02  D000               	nop2	
  6760   002B04  D000               	nop2	
  6761   002B06                     
  6762                           ;LCD.c: 102:     LCD_sendbyte(0b00001000,0);
  6763   002B06  0E00               	movlw	0
  6764   002B08  6E02               	movwf	LCD_sendbyte@type^0,c
  6765   002B0A  0E08               	movlw	8
  6766   002B0C  EC60  F01A         	call	_LCD_sendbyte
  6767   002B10                     
  6768                           ;LCD.c: 103:     _delay((unsigned long)((100)*(64000000/4000.0)));
  6769   002B10  0E09               	movlw	9
  6770   002B12  6E05               	movwf	(??_LCD_Init+1)^0,c
  6771   002B14  0E1E               	movlw	30
  6772   002B16  6E04               	movwf	??_LCD_Init^0,c
  6773   002B18  0EE4               	movlw	228
  6774   002B1A                     u4967:
  6775   002B1A  2EE8               	decfsz	wreg,f,c
  6776   002B1C  D7FE               	bra	u4967
  6777   002B1E  2E04               	decfsz	??_LCD_Init^0,f,c
  6778   002B20  D7FC               	bra	u4967
  6779   002B22  2E05               	decfsz	(??_LCD_Init+1)^0,f,c
  6780   002B24  D7FA               	bra	u4967
  6781   002B26  D000               	nop2	
  6782   002B28                     
  6783                           ;LCD.c: 104:     LCD_sendbyte(0b00000001,0);
  6784   002B28  0E00               	movlw	0
  6785   002B2A  6E02               	movwf	LCD_sendbyte@type^0,c
  6786   002B2C  0E01               	movlw	1
  6787   002B2E  EC60  F01A         	call	_LCD_sendbyte
  6788   002B32                     
  6789                           ;LCD.c: 105:     _delay((unsigned long)((5)*(64000000/4000.0)));
  6790   002B32  0E68               	movlw	104
  6791   002B34  6E04               	movwf	??_LCD_Init^0,c
  6792   002B36  0EE4               	movlw	228
  6793   002B38                     u4977:
  6794   002B38  2EE8               	decfsz	wreg,f,c
  6795   002B3A  D7FE               	bra	u4977
  6796   002B3C  2E04               	decfsz	??_LCD_Init^0,f,c
  6797   002B3E  D7FC               	bra	u4977
  6798   002B40  D000               	nop2	
  6799   002B42                     
  6800                           ;LCD.c: 106:     LCD_sendbyte(0b00000110,0);
  6801   002B42  0E00               	movlw	0
  6802   002B44  6E02               	movwf	LCD_sendbyte@type^0,c
  6803   002B46  0E06               	movlw	6
  6804   002B48  EC60  F01A         	call	_LCD_sendbyte
  6805   002B4C                     
  6806                           ;LCD.c: 107:     _delay((unsigned long)((100)*(64000000/4000.0)));
  6807   002B4C  0E09               	movlw	9
  6808   002B4E  6E05               	movwf	(??_LCD_Init+1)^0,c
  6809   002B50  0E1E               	movlw	30
  6810   002B52  6E04               	movwf	??_LCD_Init^0,c
  6811   002B54  0EE4               	movlw	228
  6812   002B56                     u4987:
  6813   002B56  2EE8               	decfsz	wreg,f,c
  6814   002B58  D7FE               	bra	u4987
  6815   002B5A  2E04               	decfsz	??_LCD_Init^0,f,c
  6816   002B5C  D7FC               	bra	u4987
  6817   002B5E  2E05               	decfsz	(??_LCD_Init+1)^0,f,c
  6818   002B60  D7FA               	bra	u4987
  6819   002B62  D000               	nop2	
  6820   002B64                     
  6821                           ;LCD.c: 108:     LCD_sendbyte(0b00001100,0);
  6822   002B64  0E00               	movlw	0
  6823   002B66  6E02               	movwf	LCD_sendbyte@type^0,c
  6824   002B68  0E0C               	movlw	12
  6825   002B6A  EC60  F01A         	call	_LCD_sendbyte
  6826   002B6E                     
  6827                           ;LCD.c: 109:     _delay((unsigned long)((100)*(64000000/4000.0)));
  6828   002B6E  0E09               	movlw	9
  6829   002B70  6E05               	movwf	(??_LCD_Init+1)^0,c
  6830   002B72  0E1E               	movlw	30
  6831   002B74  6E04               	movwf	??_LCD_Init^0,c
  6832   002B76  0EE4               	movlw	228
  6833   002B78                     u4997:
  6834   002B78  2EE8               	decfsz	wreg,f,c
  6835   002B7A  D7FE               	bra	u4997
  6836   002B7C  2E04               	decfsz	??_LCD_Init^0,f,c
  6837   002B7E  D7FC               	bra	u4997
  6838   002B80  2E05               	decfsz	(??_LCD_Init+1)^0,f,c
  6839   002B82  D7FA               	bra	u4997
  6840   002B84  D000               	nop2	
  6841   002B86  0012               	return		;funcret
  6842   002B88                     __end_of_LCD_Init:
  6843                           	callstack 0
  6844                           
  6845 ;; *************** function _LCD_sendbyte *****************
  6846 ;; Defined at:
  6847 ;;		line 40 in file "LCD.c"
  6848 ;; Parameters:    Size  Location     Type
  6849 ;;  Byte            1    wreg     unsigned char 
  6850 ;;  type            1    1[COMRAM] unsigned char 
  6851 ;; Auto vars:     Size  Location     Type
  6852 ;;  Byte            1    2[COMRAM] unsigned char 
  6853 ;; Return value:  Size  Location     Type
  6854 ;;                  1    wreg      void 
  6855 ;; Registers used:
  6856 ;;		wreg, status,2, status,0, cstack
  6857 ;; Tracked objects:
  6858 ;;		On entry : 0/0
  6859 ;;		On exit  : 0/0
  6860 ;;		Unchanged: 0/0
  6861 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6862 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6863 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6864 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6865 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6866 ;;Total ram usage:        2 bytes
  6867 ;; Hardware stack levels used: 1
  6868 ;; Hardware stack levels required when called: 3
  6869 ;; This function calls:
  6870 ;;		_LCD_sendnibble
  6871 ;; This function is called by:
  6872 ;;		_LCD_Init
  6873 ;;		_LCD_setline
  6874 ;;		_LCD_sendstring
  6875 ;;		_LCD_scroll
  6876 ;; This function uses a non-reentrant model
  6877 ;;
  6878                           
  6879                           	psect	text25
  6880   0034C0                     __ptext25:
  6881                           	callstack 0
  6882   0034C0                     _LCD_sendbyte:
  6883                           	callstack 26
  6884                           
  6885                           ;incstack = 0
  6886                           ;LCD_sendbyte@Byte stored from wreg
  6887   0034C0  6E03               	movwf	LCD_sendbyte@Byte^0,c
  6888   0034C2                     
  6889                           ;LCD.c: 40: void LCD_sendbyte(unsigned char Byte, char type);LCD.c: 41: {;LCD.c: 42:    
      +                           LATCbits.LATC6 = type;
  6890   0034C2  B002               	btfsc	LCD_sendbyte@type^0,0,c
  6891   0034C4  D002               	bra	u2715
  6892   0034C6  9C7B               	bcf	123,6,c	;volatile
  6893   0034C8  D001               	bra	u2716
  6894   0034CA                     u2715:
  6895   0034CA  8C7B               	bsf	123,6,c	;volatile
  6896   0034CC                     u2716:
  6897   0034CC                     
  6898                           ;LCD.c: 44:     LCD_sendnibble(Byte>>4);
  6899   0034CC  3803               	swapf	LCD_sendbyte@Byte^0,w,c
  6900   0034CE  0B0F               	andlw	15
  6901   0034D0  EC1B  F019         	call	_LCD_sendnibble
  6902   0034D4                     
  6903                           ;LCD.c: 45:     LCD_sendnibble(Byte);
  6904   0034D4  5003               	movf	LCD_sendbyte@Byte^0,w,c
  6905   0034D6  EC1B  F019         	call	_LCD_sendnibble
  6906   0034DA                     
  6907                           ;LCD.c: 51:     _delay((unsigned long)((50)*(64000000/4000000.0)));
  6908   0034DA  0EA0               	movlw	160
  6909   0034DC                     u5007:
  6910   0034DC  D000               	nop2	
  6911   0034DE  2EE8               	decfsz	wreg,f,c
  6912   0034E0  D7FD               	bra	u5007
  6913   0034E2  0012               	return		;funcret
  6914   0034E4                     __end_of_LCD_sendbyte:
  6915                           	callstack 0
  6916                           
  6917 ;; *************** function _LCD_sendnibble *****************
  6918 ;; Defined at:
  6919 ;;		line 22 in file "LCD.c"
  6920 ;; Parameters:    Size  Location     Type
  6921 ;;  number          1    wreg     unsigned char 
  6922 ;; Auto vars:     Size  Location     Type
  6923 ;;  number          1    0[COMRAM] unsigned char 
  6924 ;; Return value:  Size  Location     Type
  6925 ;;                  1    wreg      void 
  6926 ;; Registers used:
  6927 ;;		wreg, cstack
  6928 ;; Tracked objects:
  6929 ;;		On entry : 0/0
  6930 ;;		On exit  : 0/0
  6931 ;;		Unchanged: 0/0
  6932 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6933 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6934 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6935 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6936 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6937 ;;Total ram usage:        1 bytes
  6938 ;; Hardware stack levels used: 1
  6939 ;; Hardware stack levels required when called: 2
  6940 ;; This function calls:
  6941 ;;		_LCD_E_TOG
  6942 ;; This function is called by:
  6943 ;;		_LCD_sendbyte
  6944 ;;		_LCD_Init
  6945 ;; This function uses a non-reentrant model
  6946 ;;
  6947                           
  6948                           	psect	text26
  6949   003236                     __ptext26:
  6950                           	callstack 0
  6951   003236                     _LCD_sendnibble:
  6952                           	callstack 26
  6953                           
  6954                           ;incstack = 0
  6955                           ;LCD_sendnibble@number stored from wreg
  6956   003236  6E01               	movwf	LCD_sendnibble@number^0,c
  6957   003238                     
  6958                           ;LCD.c: 22: void LCD_sendnibble(unsigned char number);LCD.c: 23: {;LCD.c: 24:     if (nu
      +                          mber & 0b0001) {LATBbits.LATB3=1;} else {LATBbits.LATB3=0;}
  6959   003238  A001               	btfss	LCD_sendnibble@number^0,0,c
  6960   00323A  EF21  F019         	goto	u2621
  6961   00323E  EF23  F019         	goto	u2620
  6962   003242                     u2621:
  6963   003242  EF26  F019         	goto	l308
  6964   003246                     u2620:
  6965   003246  867A               	bsf	122,3,c	;volatile
  6966   003248  EF27  F019         	goto	l2838
  6967   00324C                     l308:
  6968   00324C  967A               	bcf	122,3,c	;volatile
  6969   00324E                     l2838:
  6970                           
  6971                           ;LCD.c: 25:     if (number & 0b0010) {LATBbits.LATB2=1;} else {LATBbits.LATB2=0;}
  6972   00324E  A201               	btfss	LCD_sendnibble@number^0,1,c
  6973   003250  EF2C  F019         	goto	u2631
  6974   003254  EF2E  F019         	goto	u2630
  6975   003258                     u2631:
  6976   003258  EF31  F019         	goto	l310
  6977   00325C                     u2630:
  6978   00325C  847A               	bsf	122,2,c	;volatile
  6979   00325E  EF32  F019         	goto	l2842
  6980   003262                     l310:
  6981   003262  947A               	bcf	122,2,c	;volatile
  6982   003264                     l2842:
  6983                           
  6984                           ;LCD.c: 26:     if (number & 0b0100) {LATEbits.LATE3=1;} else {LATEbits.LATE3=0;}
  6985   003264  A401               	btfss	LCD_sendnibble@number^0,2,c
  6986   003266  EF37  F019         	goto	u2641
  6987   00326A  EF39  F019         	goto	u2640
  6988   00326E                     u2641:
  6989   00326E  EF3C  F019         	goto	l312
  6990   003272                     u2640:
  6991   003272  867D               	bsf	125,3,c	;volatile
  6992   003274  EF3D  F019         	goto	l2846
  6993   003278                     l312:
  6994   003278  967D               	bcf	125,3,c	;volatile
  6995   00327A                     l2846:
  6996                           
  6997                           ;LCD.c: 27:     if (number & 0b1000) {LATEbits.LATE1=1;} else {LATEbits.LATE1=0;}
  6998   00327A  A601               	btfss	LCD_sendnibble@number^0,3,c
  6999   00327C  EF42  F019         	goto	u2651
  7000   003280  EF44  F019         	goto	u2650
  7001   003284                     u2651:
  7002   003284  EF47  F019         	goto	l314
  7003   003288                     u2650:
  7004   003288  827D               	bsf	125,1,c	;volatile
  7005   00328A  EF48  F019         	goto	l2850
  7006   00328E                     l314:
  7007   00328E  927D               	bcf	125,1,c	;volatile
  7008   003290                     l2850:
  7009                           
  7010                           ;LCD.c: 31:     LCD_E_TOG();
  7011   003290  EC9B  F01A         	call	_LCD_E_TOG	;wreg free
  7012   003294                     
  7013                           ;LCD.c: 32:     _delay((unsigned long)((5)*(64000000/4000000.0)));
  7014   003294  0E1A               	movlw	26
  7015   003296                     u5017:
  7016   003296  2EE8               	decfsz	wreg,f,c
  7017   003298  D7FE               	bra	u5017
  7018   00329A  D000               	nop2	
  7019   00329C  0012               	return		;funcret
  7020   00329E                     __end_of_LCD_sendnibble:
  7021                           	callstack 0
  7022                           
  7023 ;; *************** function _LCD_E_TOG *****************
  7024 ;; Defined at:
  7025 ;;		line 10 in file "LCD.c"
  7026 ;; Parameters:    Size  Location     Type
  7027 ;;		None
  7028 ;; Auto vars:     Size  Location     Type
  7029 ;;		None
  7030 ;; Return value:  Size  Location     Type
  7031 ;;                  1    wreg      void 
  7032 ;; Registers used:
  7033 ;;		wreg
  7034 ;; Tracked objects:
  7035 ;;		On entry : 0/0
  7036 ;;		On exit  : 0/0
  7037 ;;		Unchanged: 0/0
  7038 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7039 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7040 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7041 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7042 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7043 ;;Total ram usage:        0 bytes
  7044 ;; Hardware stack levels used: 1
  7045 ;; Hardware stack levels required when called: 1
  7046 ;; This function calls:
  7047 ;;		Nothing
  7048 ;; This function is called by:
  7049 ;;		_LCD_sendnibble
  7050 ;; This function uses a non-reentrant model
  7051 ;;
  7052                           
  7053                           	psect	text27
  7054   003536                     __ptext27:
  7055                           	callstack 0
  7056   003536                     _LCD_E_TOG:
  7057                           	callstack 26
  7058   003536                     
  7059                           ;LCD.c: 13:      LATCbits.LATC2 = 1;
  7060   003536  847B               	bsf	123,2,c	;volatile
  7061   003538                     
  7062                           ;LCD.c: 14:  _delay((unsigned long)((2)*(64000000/4000000.0)));
  7063   003538  0E0A               	movlw	10
  7064   00353A                     u5027:
  7065   00353A  2EE8               	decfsz	wreg,f,c
  7066   00353C  D7FE               	bra	u5027
  7067   00353E  D000               	nop2	
  7068   003540                     
  7069                           ;LCD.c: 15:      LATCbits.LATC2 = 0;
  7070   003540  947B               	bcf	123,2,c	;volatile
  7071   003542  0012               	return		;funcret
  7072   003544                     __end_of_LCD_E_TOG:
  7073                           	callstack 0
  7074                           
  7075 ;; *************** function _Interrupts_init *****************
  7076 ;; Defined at:
  7077 ;;		line 9 in file "interrupts.c"
  7078 ;; Parameters:    Size  Location     Type
  7079 ;;		None
  7080 ;; Auto vars:     Size  Location     Type
  7081 ;;		None
  7082 ;; Return value:  Size  Location     Type
  7083 ;;                  1    wreg      void 
  7084 ;; Registers used:
  7085 ;;		None
  7086 ;; Tracked objects:
  7087 ;;		On entry : 0/0
  7088 ;;		On exit  : 0/0
  7089 ;;		Unchanged: 0/0
  7090 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7091 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7092 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7093 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7094 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7095 ;;Total ram usage:        0 bytes
  7096 ;; Hardware stack levels used: 1
  7097 ;; Hardware stack levels required when called: 1
  7098 ;; This function calls:
  7099 ;;		Nothing
  7100 ;; This function is called by:
  7101 ;;		_main
  7102 ;; This function uses a non-reentrant model
  7103 ;;
  7104                           
  7105                           	psect	text28
  7106   003544                     __ptext28:
  7107                           	callstack 0
  7108   003544                     _Interrupts_init:
  7109                           	callstack 29
  7110   003544                     
  7111                           ;interrupts.c: 15:   INTCONbits.PEIE = 1;
  7112   003544  8CF2               	bsf	242,6,c	;volatile
  7113                           
  7114                           ;interrupts.c: 19:     PIE0bits.TMR0IE = 1;
  7115   003546  010E               	movlb	14	; () banked
  7116   003548  8B29               	bsf	41,5,b	;volatile
  7117                           
  7118                           ;interrupts.c: 20:     PIR0bits.TMR0IF = 0;
  7119   00354A  9B33               	bcf	51,5,b	;volatile
  7120                           
  7121                           ;interrupts.c: 21:     IPR0bits.TMR0IP = 1;
  7122   00354C  8B1F               	bsf	31,5,b	;volatile
  7123                           
  7124                           ;interrupts.c: 24:     INTCONbits.GIE=1;
  7125   00354E  8EF2               	bsf	242,7,c	;volatile
  7126   003550                     
  7127                           ; BSR set to: 14
  7128   003550  0012               	return		;funcret
  7129   003552                     __end_of_Interrupts_init:
  7130                           	callstack 0
  7131                           
  7132 ;; *************** function _ArrayAverage *****************
  7133 ;; Defined at:
  7134 ;;		line 24 in file "arrayfunction.c"
  7135 ;; Parameters:    Size  Location     Type
  7136 ;;  arrayTime       2    7[COMRAM] PTR int 
  7137 ;;		 -> main@SolarMidnight(32), 
  7138 ;;  size            2    9[COMRAM] int 
  7139 ;; Auto vars:     Size  Location     Type
  7140 ;;  i               2   18[COMRAM] int 
  7141 ;;  sum             2   16[COMRAM] unsigned int 
  7142 ;;  average         2   14[COMRAM] unsigned int 
  7143 ;; Return value:  Size  Location     Type
  7144 ;;                  2    7[COMRAM] int 
  7145 ;; Registers used:
  7146 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7147 ;; Tracked objects:
  7148 ;;		On entry : 0/0
  7149 ;;		On exit  : 0/0
  7150 ;;		Unchanged: 0/0
  7151 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7152 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7153 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7154 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7155 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7156 ;;Total ram usage:       13 bytes
  7157 ;; Hardware stack levels used: 1
  7158 ;; Hardware stack levels required when called: 2
  7159 ;; This function calls:
  7160 ;;		___lwdiv
  7161 ;; This function is called by:
  7162 ;;		_main
  7163 ;; This function uses a non-reentrant model
  7164 ;;
  7165                           
  7166                           	psect	text29
  7167   003032                     __ptext29:
  7168                           	callstack 0
  7169   003032                     _ArrayAverage:
  7170                           	callstack 28
  7171   003032                     
  7172                           ;arrayfunction.c: 25:     unsigned int sum = 0;
  7173   003032  0E00               	movlw	0
  7174   003034  6E12               	movwf	(ArrayAverage@sum+1)^0,c
  7175   003036  0E00               	movlw	0
  7176   003038  6E11               	movwf	ArrayAverage@sum^0,c
  7177                           
  7178                           ;arrayfunction.c: 26:     unsigned int average;;arrayfunction.c: 28:     for (int i = 0;
      +                           i <= size-1; i++) {
  7179   00303A  0E00               	movlw	0
  7180   00303C  6E14               	movwf	(ArrayAverage@i+1)^0,c
  7181   00303E  0E00               	movlw	0
  7182   003040  6E13               	movwf	ArrayAverage@i^0,c
  7183   003042  EF38  F018         	goto	l3158
  7184   003046                     l3154:
  7185                           
  7186                           ;arrayfunction.c: 29:         sum = sum + arrayTime[i];
  7187   003046  90D8               	bcf	status,0,c
  7188   003048  3413               	rlcf	ArrayAverage@i^0,w,c
  7189   00304A  6ED9               	movwf	fsr2l,c
  7190   00304C  3414               	rlcf	(ArrayAverage@i+1)^0,w,c
  7191   00304E  6EDA               	movwf	fsr2h,c
  7192   003050  5008               	movf	ArrayAverage@arrayTime^0,w,c
  7193   003052  26D9               	addwf	fsr2l,f,c
  7194   003054  5009               	movf	(ArrayAverage@arrayTime+1)^0,w,c
  7195   003056  22DA               	addwfc	fsr2h,f,c
  7196   003058  CFDE F00C          	movff	postinc2,??_ArrayAverage
  7197   00305C  CFDD F00D          	movff	postdec2,??_ArrayAverage+1
  7198   003060  5011               	movf	ArrayAverage@sum^0,w,c
  7199   003062  240C               	addwf	??_ArrayAverage^0,w,c
  7200   003064  6E11               	movwf	ArrayAverage@sum^0,c
  7201   003066  5012               	movf	(ArrayAverage@sum+1)^0,w,c
  7202   003068  200D               	addwfc	(??_ArrayAverage+1)^0,w,c
  7203   00306A  6E12               	movwf	(ArrayAverage@sum+1)^0,c
  7204   00306C                     
  7205                           ;arrayfunction.c: 30:     }
  7206   00306C  4A13               	infsnz	ArrayAverage@i^0,f,c
  7207   00306E  2A14               	incf	(ArrayAverage@i+1)^0,f,c
  7208   003070                     l3158:
  7209   003070  0EFF               	movlw	255
  7210   003072  240A               	addwf	ArrayAverage@size^0,w,c
  7211   003074  6E0C               	movwf	??_ArrayAverage^0,c
  7212   003076  0EFF               	movlw	255
  7213   003078  200B               	addwfc	(ArrayAverage@size+1)^0,w,c
  7214   00307A  6E0D               	movwf	(??_ArrayAverage+1)^0,c
  7215   00307C  5013               	movf	ArrayAverage@i^0,w,c
  7216   00307E  5C0C               	subwf	??_ArrayAverage^0,w,c
  7217   003080  500D               	movf	(??_ArrayAverage+1)^0,w,c
  7218   003082  0A80               	xorlw	128
  7219   003084  6E0E               	movwf	(??_ArrayAverage+2)^0,c
  7220   003086  5014               	movf	(ArrayAverage@i+1)^0,w,c
  7221   003088  0A80               	xorlw	128
  7222   00308A  580E               	subwfb	(??_ArrayAverage+2)^0,w,c
  7223   00308C  B0D8               	btfsc	status,0,c
  7224   00308E  EF4B  F018         	goto	u3141
  7225   003092  EF4D  F018         	goto	u3140
  7226   003096                     u3141:
  7227   003096  EF23  F018         	goto	l3154
  7228   00309A                     u3140:
  7229   00309A                     
  7230                           ;arrayfunction.c: 32:     average = sum/size;
  7231   00309A  C011  F001         	movff	ArrayAverage@sum,___lwdiv@dividend
  7232   00309E  C012  F002         	movff	ArrayAverage@sum+1,___lwdiv@dividend+1
  7233   0030A2  C00A  F003         	movff	ArrayAverage@size,___lwdiv@divisor
  7234   0030A6  C00B  F004         	movff	ArrayAverage@size+1,___lwdiv@divisor+1
  7235   0030AA  ECE1  F018         	call	___lwdiv	;wreg free
  7236   0030AE  C001  F00F         	movff	?___lwdiv,ArrayAverage@average
  7237   0030B2  C002  F010         	movff	?___lwdiv+1,ArrayAverage@average+1
  7238   0030B6                     
  7239                           ;arrayfunction.c: 34:     return average;
  7240   0030B6  C00F  F008         	movff	ArrayAverage@average,?_ArrayAverage
  7241   0030BA  C010  F009         	movff	ArrayAverage@average+1,?_ArrayAverage+1
  7242   0030BE  0012               	return		;funcret
  7243   0030C0                     __end_of_ArrayAverage:
  7244                           	callstack 0
  7245                           
  7246 ;; *************** function ___lwdiv *****************
  7247 ;; Defined at:
  7248 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\lwdiv.c"
  7249 ;; Parameters:    Size  Location     Type
  7250 ;;  dividend        2    0[COMRAM] unsigned int 
  7251 ;;  divisor         2    2[COMRAM] unsigned int 
  7252 ;; Auto vars:     Size  Location     Type
  7253 ;;  quotient        2    4[COMRAM] unsigned int 
  7254 ;;  counter         1    6[COMRAM] unsigned char 
  7255 ;; Return value:  Size  Location     Type
  7256 ;;                  2    0[COMRAM] unsigned int 
  7257 ;; Registers used:
  7258 ;;		wreg, status,2, status,0
  7259 ;; Tracked objects:
  7260 ;;		On entry : 0/0
  7261 ;;		On exit  : 0/0
  7262 ;;		Unchanged: 0/0
  7263 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7264 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7265 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7266 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7267 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7268 ;;Total ram usage:        7 bytes
  7269 ;; Hardware stack levels used: 1
  7270 ;; Hardware stack levels required when called: 1
  7271 ;; This function calls:
  7272 ;;		Nothing
  7273 ;; This function is called by:
  7274 ;;		_ArrayAverage
  7275 ;;		_ADC2String
  7276 ;; This function uses a non-reentrant model
  7277 ;;
  7278                           
  7279                           	psect	text30
  7280   0031C2                     __ptext30:
  7281                           	callstack 0
  7282   0031C2                     ___lwdiv:
  7283                           	callstack 28
  7284   0031C2  0E00               	movlw	0
  7285   0031C4  6E06               	movwf	(___lwdiv@quotient+1)^0,c
  7286   0031C6  0E00               	movlw	0
  7287   0031C8  6E05               	movwf	___lwdiv@quotient^0,c
  7288   0031CA  5003               	movf	___lwdiv@divisor^0,w,c
  7289   0031CC  1004               	iorwf	(___lwdiv@divisor+1)^0,w,c
  7290   0031CE  B4D8               	btfsc	status,2,c
  7291   0031D0  EFEC  F018         	goto	u2721
  7292   0031D4  EFEE  F018         	goto	u2720
  7293   0031D8                     u2721:
  7294   0031D8  EF16  F019         	goto	l847
  7295   0031DC                     u2720:
  7296   0031DC  0E01               	movlw	1
  7297   0031DE  6E07               	movwf	___lwdiv@counter^0,c
  7298   0031E0  EFF6  F018         	goto	l2926
  7299   0031E4                     l2924:
  7300   0031E4  90D8               	bcf	status,0,c
  7301   0031E6  3603               	rlcf	___lwdiv@divisor^0,f,c
  7302   0031E8  3604               	rlcf	(___lwdiv@divisor+1)^0,f,c
  7303   0031EA  2A07               	incf	___lwdiv@counter^0,f,c
  7304   0031EC                     l2926:
  7305   0031EC  AE04               	btfss	(___lwdiv@divisor+1)^0,7,c
  7306   0031EE  EFFB  F018         	goto	u2731
  7307   0031F2  EFFD  F018         	goto	u2730
  7308   0031F6                     u2731:
  7309   0031F6  EFF2  F018         	goto	l2924
  7310   0031FA                     u2730:
  7311   0031FA                     l2928:
  7312   0031FA  90D8               	bcf	status,0,c
  7313   0031FC  3605               	rlcf	___lwdiv@quotient^0,f,c
  7314   0031FE  3606               	rlcf	(___lwdiv@quotient+1)^0,f,c
  7315   003200  5003               	movf	___lwdiv@divisor^0,w,c
  7316   003202  5C01               	subwf	___lwdiv@dividend^0,w,c
  7317   003204  5004               	movf	(___lwdiv@divisor+1)^0,w,c
  7318   003206  5802               	subwfb	(___lwdiv@dividend+1)^0,w,c
  7319   003208  A0D8               	btfss	status,0,c
  7320   00320A  EF09  F019         	goto	u2741
  7321   00320E  EF0B  F019         	goto	u2740
  7322   003212                     u2741:
  7323   003212  EF10  F019         	goto	l2936
  7324   003216                     u2740:
  7325   003216  5003               	movf	___lwdiv@divisor^0,w,c
  7326   003218  5E01               	subwf	___lwdiv@dividend^0,f,c
  7327   00321A  5004               	movf	(___lwdiv@divisor+1)^0,w,c
  7328   00321C  5A02               	subwfb	(___lwdiv@dividend+1)^0,f,c
  7329   00321E  8005               	bsf	___lwdiv@quotient^0,0,c
  7330   003220                     l2936:
  7331   003220  90D8               	bcf	status,0,c
  7332   003222  3204               	rrcf	(___lwdiv@divisor+1)^0,f,c
  7333   003224  3203               	rrcf	___lwdiv@divisor^0,f,c
  7334   003226  2E07               	decfsz	___lwdiv@counter^0,f,c
  7335   003228  EFFD  F018         	goto	l2928
  7336   00322C                     l847:
  7337   00322C  C005  F001         	movff	___lwdiv@quotient,?___lwdiv
  7338   003230  C006  F002         	movff	___lwdiv@quotient+1,?___lwdiv+1
  7339   003234  0012               	return		;funcret
  7340   003236                     __end_of___lwdiv:
  7341                           	callstack 0
  7342                           
  7343 ;; *************** function _ArrayAppend *****************
  7344 ;; Defined at:
  7345 ;;		line 6 in file "arrayfunction.c"
  7346 ;; Parameters:    Size  Location     Type
  7347 ;;  arrayTime       2    0[COMRAM] PTR int 
  7348 ;;		 -> main@SolarMidnight(32), main@Dusk(32), main@Dawn(32), 
  7349 ;;  size            2    2[COMRAM] int 
  7350 ;;  Time            2    4[COMRAM] int 
  7351 ;; Auto vars:     Size  Location     Type
  7352 ;;  i               2    9[COMRAM] int 
  7353 ;; Return value:  Size  Location     Type
  7354 ;;                  2    0[COMRAM] int 
  7355 ;; Registers used:
  7356 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  7357 ;; Tracked objects:
  7358 ;;		On entry : 0/0
  7359 ;;		On exit  : 0/0
  7360 ;;		Unchanged: 0/0
  7361 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7362 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7363 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7364 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7365 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7366 ;;Total ram usage:       11 bytes
  7367 ;; Hardware stack levels used: 1
  7368 ;; Hardware stack levels required when called: 1
  7369 ;; This function calls:
  7370 ;;		Nothing
  7371 ;; This function is called by:
  7372 ;;		_main
  7373 ;; This function uses a non-reentrant model
  7374 ;;
  7375                           
  7376                           	psect	text31
  7377   00314A                     __ptext31:
  7378                           	callstack 0
  7379   00314A                     _ArrayAppend:
  7380                           	callstack 29
  7381   00314A                     
  7382                           ;arrayfunction.c: 8:         for (int i = 1; i <= size-1; i++) {
  7383   00314A  0E00               	movlw	0
  7384   00314C  6E0B               	movwf	(ArrayAppend@i+1)^0,c
  7385   00314E  0E01               	movlw	1
  7386   003150  6E0A               	movwf	ArrayAppend@i^0,c
  7387   003152  EFCB  F018         	goto	l3150
  7388   003156                     l3140:
  7389                           
  7390                           ;arrayfunction.c: 10:             if (i = 6) {
  7391   003156  0E00               	movlw	0
  7392   003158  6E0B               	movwf	(ArrayAppend@i+1)^0,c
  7393   00315A  0E06               	movlw	6
  7394   00315C  6E0A               	movwf	ArrayAppend@i^0,c
  7395   00315E                     
  7396                           ;arrayfunction.c: 11:                 arrayTime[i-1] = arrayTime[i];
  7397   00315E  EE20 F00C          	lfsr	2,12
  7398   003162  5001               	movf	ArrayAppend@arrayTime^0,w,c
  7399   003164  26D9               	addwf	fsr2l,f,c
  7400   003166  5002               	movf	(ArrayAppend@arrayTime+1)^0,w,c
  7401   003168  22DA               	addwfc	fsr2h,f,c
  7402   00316A  EE10 F00A          	lfsr	1,10
  7403   00316E  5001               	movf	ArrayAppend@arrayTime^0,w,c
  7404   003170  26E1               	addwf	fsr1l,f,c
  7405   003172  5002               	movf	(ArrayAppend@arrayTime+1)^0,w,c
  7406   003174  22E2               	addwfc	fsr1h,f,c
  7407   003176  CFDE FFE6          	movff	postinc2,postinc1
  7408   00317A  CFDD FFE5          	movff	postdec2,postdec1
  7409   00317E                     
  7410                           ;arrayfunction.c: 12:                 arrayTime[i] = Time;
  7411   00317E  EE20 F00C          	lfsr	2,12
  7412   003182  5001               	movf	ArrayAppend@arrayTime^0,w,c
  7413   003184  26D9               	addwf	fsr2l,f,c
  7414   003186  5002               	movf	(ArrayAppend@arrayTime+1)^0,w,c
  7415   003188  22DA               	addwfc	fsr2h,f,c
  7416   00318A  C005  FFDE         	movff	ArrayAppend@Time,postinc2
  7417   00318E  C006  FFDD         	movff	ArrayAppend@Time+1,postdec2
  7418   003192                     
  7419                           ;arrayfunction.c: 18:         }
  7420   003192  4A0A               	infsnz	ArrayAppend@i^0,f,c
  7421   003194  2A0B               	incf	(ArrayAppend@i+1)^0,f,c
  7422   003196                     l3150:
  7423   003196  0EFF               	movlw	255
  7424   003198  2403               	addwf	ArrayAppend@size^0,w,c
  7425   00319A  6E07               	movwf	??_ArrayAppend^0,c
  7426   00319C  0EFF               	movlw	255
  7427   00319E  2004               	addwfc	(ArrayAppend@size+1)^0,w,c
  7428   0031A0  6E08               	movwf	(??_ArrayAppend+1)^0,c
  7429   0031A2  500A               	movf	ArrayAppend@i^0,w,c
  7430   0031A4  5C07               	subwf	??_ArrayAppend^0,w,c
  7431   0031A6  5008               	movf	(??_ArrayAppend+1)^0,w,c
  7432   0031A8  0A80               	xorlw	128
  7433   0031AA  6E09               	movwf	(??_ArrayAppend+2)^0,c
  7434   0031AC  500B               	movf	(ArrayAppend@i+1)^0,w,c
  7435   0031AE  0A80               	xorlw	128
  7436   0031B0  5809               	subwfb	(??_ArrayAppend+2)^0,w,c
  7437   0031B2  B0D8               	btfsc	status,0,c
  7438   0031B4  EFDE  F018         	goto	u3131
  7439   0031B8  EFE0  F018         	goto	u3130
  7440   0031BC                     u3131:
  7441   0031BC  EFAB  F018         	goto	l3140
  7442   0031C0                     u3130:
  7443   0031C0  0012               	return		;funcret
  7444   0031C2                     __end_of_ArrayAppend:
  7445                           	callstack 0
  7446                           
  7447 ;; *************** function _ADC_init *****************
  7448 ;; Defined at:
  7449 ;;		line 9 in file "ADC.c"
  7450 ;; Parameters:    Size  Location     Type
  7451 ;;		None
  7452 ;; Auto vars:     Size  Location     Type
  7453 ;;		None
  7454 ;; Return value:  Size  Location     Type
  7455 ;;                  1    wreg      void 
  7456 ;; Registers used:
  7457 ;;		wreg, status,2
  7458 ;; Tracked objects:
  7459 ;;		On entry : 0/0
  7460 ;;		On exit  : 0/0
  7461 ;;		Unchanged: 0/0
  7462 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7463 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7464 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7465 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7466 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7467 ;;Total ram usage:        0 bytes
  7468 ;; Hardware stack levels used: 1
  7469 ;; Hardware stack levels required when called: 1
  7470 ;; This function calls:
  7471 ;;		Nothing
  7472 ;; This function is called by:
  7473 ;;		_main
  7474 ;; This function uses a non-reentrant model
  7475 ;;
  7476                           
  7477                           	psect	text32
  7478   003504                     __ptext32:
  7479                           	callstack 0
  7480   003504                     _ADC_init:
  7481                           	callstack 29
  7482   003504                     
  7483                           ;ADC.c: 11:     TRISAbits.TRISA3=1;
  7484   003504  8681               	bsf	129,3,c	;volatile
  7485                           
  7486                           ;ADC.c: 12:     ANSELAbits.ANSELA3=1;
  7487   003506  010E               	movlb	14	; () banked
  7488   003508  8792               	bsf	146,3,b	;volatile
  7489                           
  7490                           ;ADC.c: 14:     ADREFbits.ADNREF = 0;
  7491   00350A  010F               	movlb	15	; () banked
  7492   00350C  9958               	bcf	88,4,b	;volatile
  7493   00350E                     
  7494                           ; BSR set to: 15
  7495                           ;ADC.c: 15:     ADREFbits.ADPREF = 0b00;
  7496   00350E  0EFC               	movlw	-4
  7497   003510  1758               	andwf	88,f,b	;volatile
  7498                           
  7499                           ;ADC.c: 16:     ADPCH=0b11;
  7500   003512  0E03               	movlw	3
  7501   003514  6F5F               	movwf	95,b	;volatile
  7502   003516                     
  7503                           ; BSR set to: 15
  7504                           ;ADC.c: 17:     ADCON0bits.ADFM = 0;
  7505   003516  9460               	bcf	96,2,c	;volatile
  7506   003518                     
  7507                           ; BSR set to: 15
  7508                           ;ADC.c: 18:     ADCON0bits.ADCS = 1;
  7509   003518  8860               	bsf	96,4,c	;volatile
  7510   00351A                     
  7511                           ; BSR set to: 15
  7512                           ;ADC.c: 19:     ADCON0bits.ADON = 1;
  7513   00351A  8E60               	bsf	96,7,c	;volatile
  7514   00351C                     
  7515                           ; BSR set to: 15
  7516   00351C  0012               	return		;funcret
  7517   00351E                     __end_of_ADC_init:
  7518                           	callstack 0
  7519                           
  7520 ;; *************** function _ADC_getval *****************
  7521 ;; Defined at:
  7522 ;;		line 22 in file "ADC.c"
  7523 ;; Parameters:    Size  Location     Type
  7524 ;;		None
  7525 ;; Auto vars:     Size  Location     Type
  7526 ;;  tmpval          2    2[COMRAM] unsigned int 
  7527 ;; Return value:  Size  Location     Type
  7528 ;;                  2    0[COMRAM] unsigned int 
  7529 ;; Registers used:
  7530 ;;		wreg, status,2, status,0
  7531 ;; Tracked objects:
  7532 ;;		On entry : 0/0
  7533 ;;		On exit  : 0/0
  7534 ;;		Unchanged: 0/0
  7535 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7536 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7537 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7538 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7539 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7540 ;;Total ram usage:        4 bytes
  7541 ;; Hardware stack levels used: 1
  7542 ;; Hardware stack levels required when called: 1
  7543 ;; This function calls:
  7544 ;;		Nothing
  7545 ;; This function is called by:
  7546 ;;		_main
  7547 ;; This function uses a non-reentrant model
  7548 ;;
  7549                           
  7550                           	psect	text33
  7551   003444                     __ptext33:
  7552                           	callstack 0
  7553   003444                     _ADC_getval:
  7554                           	callstack 29
  7555   003444                     
  7556                           ;ADC.c: 24:     unsigned int tmpval;;ADC.c: 26:     ADCON0bits.GO = 1;
  7557   003444  8060               	bsf	96,0,c	;volatile
  7558   003446                     l259:
  7559   003446  B060               	btfsc	96,0,c	;volatile
  7560   003448  EF28  F01A         	goto	u3121
  7561   00344C  EF2A  F01A         	goto	u3120
  7562   003450                     u3121:
  7563   003450  EF23  F01A         	goto	l259
  7564   003454                     u3120:
  7565   003454                     
  7566                           ;ADC.c: 30:     tmpval = ADRESH;
  7567   003454  CF64 F003          	movff	3940,ADC_getval@tmpval	;volatile
  7568   003458  6A04               	clrf	(ADC_getval@tmpval+1)^0,c
  7569   00345A                     
  7570                           ;ADC.c: 34:     tmpval = 255 - tmpval;
  7571   00345A  5003               	movf	ADC_getval@tmpval^0,w,c
  7572   00345C  08FF               	sublw	255
  7573   00345E  6E03               	movwf	ADC_getval@tmpval^0,c
  7574   003460  5004               	movf	(ADC_getval@tmpval+1)^0,w,c
  7575   003462  A0D8               	btfss	status,0,c
  7576   003464  2AE8               	incf	wreg,f,c
  7577   003466  0800               	sublw	0
  7578   003468  6E04               	movwf	(ADC_getval@tmpval+1)^0,c
  7579   00346A                     
  7580                           ;ADC.c: 36:     return tmpval;
  7581   00346A  C003  F001         	movff	ADC_getval@tmpval,?_ADC_getval
  7582   00346E  C004  F002         	movff	ADC_getval@tmpval+1,?_ADC_getval+1
  7583   003472  0012               	return		;funcret
  7584   003474                     __end_of_ADC_getval:
  7585                           	callstack 0
  7586                           
  7587 ;; *************** function _HighISR *****************
  7588 ;; Defined at:
  7589 ;;		line 31 in file "interrupts.c"
  7590 ;; Parameters:    Size  Location     Type
  7591 ;;		None
  7592 ;; Auto vars:     Size  Location     Type
  7593 ;;		None
  7594 ;; Return value:  Size  Location     Type
  7595 ;;                  1    wreg      void 
  7596 ;; Registers used:
  7597 ;;		wreg, status,2, status,0
  7598 ;; Tracked objects:
  7599 ;;		On entry : 0/0
  7600 ;;		On exit  : 0/0
  7601 ;;		Unchanged: 0/0
  7602 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7603 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7604 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7605 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7606 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7607 ;;Total ram usage:        0 bytes
  7608 ;; Hardware stack levels used: 1
  7609 ;; This function calls:
  7610 ;;		Nothing
  7611 ;; This function is called by:
  7612 ;;		Interrupt level 2
  7613 ;; This function uses a non-reentrant model
  7614 ;;
  7615                           
  7616                           	psect	intcode
  7617   000008                     __pintcode:
  7618                           	callstack 0
  7619   000008                     _HighISR:
  7620                           	callstack 22
  7621                           
  7622                           ;incstack = 0
  7623   000008  825E               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  7624   00000A                     
  7625                           ;interrupts.c: 35:     if(PIR0bits.TMR0IF){
  7626   00000A  010E               	movlb	14	; () banked
  7627   00000C  AB33               	btfss	51,5,b	;volatile
  7628   00000E  EF0B  F000         	goto	i2u410_41
  7629   000012  EF0D  F000         	goto	i2u410_40
  7630   000016                     i2u410_41:
  7631   000016  EF16  F000         	goto	i2l109
  7632   00001A                     i2u410_40:
  7633   00001A                     
  7634                           ; BSR set to: 14
  7635                           ;interrupts.c: 37:         TMR0H = 0b01111101;
  7636   00001A  0E7D               	movlw	125
  7637   00001C  6ED4               	movwf	212,c	;volatile
  7638                           
  7639                           ;interrupts.c: 38:         TMR0L = 0b11001011;
  7640   00001E  0ECB               	movlw	203
  7641   000020  6ED3               	movwf	211,c	;volatile
  7642   000022                     
  7643                           ; BSR set to: 14
  7644                           ;interrupts.c: 40:         ticker++;
  7645   000022  0101               	movlb	1	; () banked
  7646   000024  4BE3               	infsnz	_ticker& (0+255),f,b
  7647   000026  2BE4               	incf	(_ticker+1)& (0+255),f,b
  7648   000028                     
  7649                           ; BSR set to: 1
  7650                           ;interrupts.c: 41:         PIR0bits.TMR0IF=0;
  7651   000028  010E               	movlb	14	; () banked
  7652   00002A  9B33               	bcf	51,5,b	;volatile
  7653   00002C                     i2l109:
  7654                           
  7655                           ; BSR set to: 14
  7656   00002C  925E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  7657   00002E  0011               	retfie		f
  7658   000030                     __end_of_HighISR:
  7659                           	callstack 0
  7660                           
  7661                           	psect	rparam
  7662   000000                     
  7663                           	psect	temp
  7664   00005E                     btemp:
  7665                           	callstack 0
  7666   00005E                     	ds	1
  7667   000000                     int$flags	set	btemp
  7668   000000                     wtemp8	set	btemp+1
  7669   000000                     ttemp5	set	btemp+1
  7670   000000                     ttemp6	set	btemp+4
  7671   000000                     ttemp7	set	btemp+8
  7672                           
  7673                           	psect	config
  7674                           
  7675                           ;Config register CONFIG1L @ 0x300000
  7676                           ;	External Oscillator mode Selection bits
  7677                           ;	FEXTOSC = HS, HS (crystal oscillator) above 8 MHz; PFM set to high power
  7678                           ;	Power-up default value for COSC bits
  7679                           ;	RSTOSC = EXTOSC_4PLL, EXTOSC with 4x PLL, with EXTOSC operating per FEXTOSC bits
  7680   300000                     	org	3145728
  7681   300000  AA                 	db	170
  7682                           
  7683                           ;Config register CONFIG1H @ 0x300001
  7684                           ;	unspecified, using default values
  7685                           ;	Clock Out Enable bit
  7686                           ;	CLKOUTEN = 0x1, unprogrammed default
  7687                           ;	Clock Switch Enable bit
  7688                           ;	CSWEN = 0x1, unprogrammed default
  7689                           ;	Fail-Safe Clock Monitor Enable bit
  7690                           ;	FCMEN = 0x1, unprogrammed default
  7691   300001                     	org	3145729
  7692   300001  FF                 	db	255
  7693                           
  7694                           ;Config register CONFIG3L @ 0x300004
  7695                           ;	WDT Period Select bits
  7696                           ;	WDTCPS = 0x1F, unprogrammed default
  7697                           ;	WDT operating mode
  7698                           ;	WDTE = OFF, WDT Disabled
  7699   300004                     	org	3145732
  7700   300004  9F                 	db	159
  7701                           
  7702                           ;Config register CONFIG3H @ 0x300005
  7703                           ;	unspecified, using default values
  7704                           ;	WDT Window Select bits
  7705                           ;	WDTCWS = 0x7, unprogrammed default
  7706                           ;	WDT input clock selector
  7707                           ;	WDTCCS = 0x7, unprogrammed default
  7708   300005                     	org	3145733
  7709   300005  FF                 	db	255
  7710                           tosu	equ	0xFFF
  7711                           tosh	equ	0xFFE
  7712                           tosl	equ	0xFFD
  7713                           stkptr	equ	0xFFC
  7714                           pclatu	equ	0xFFB
  7715                           pclath	equ	0xFFA
  7716                           pcl	equ	0xFF9
  7717                           tblptru	equ	0xFF8
  7718                           tblptrh	equ	0xFF7
  7719                           tblptrl	equ	0xFF6
  7720                           tablat	equ	0xFF5
  7721                           prodh	equ	0xFF4
  7722                           prodl	equ	0xFF3
  7723                           indf0	equ	0xFEF
  7724                           postinc0	equ	0xFEE
  7725                           postdec0	equ	0xFED
  7726                           preinc0	equ	0xFEC
  7727                           plusw0	equ	0xFEB
  7728                           fsr0h	equ	0xFEA
  7729                           fsr0l	equ	0xFE9
  7730                           wreg	equ	0xFE8
  7731                           indf1	equ	0xFE7
  7732                           postinc1	equ	0xFE6
  7733                           postdec1	equ	0xFE5
  7734                           preinc1	equ	0xFE4
  7735                           plusw1	equ	0xFE3
  7736                           fsr1h	equ	0xFE2
  7737                           fsr1l	equ	0xFE1
  7738                           bsr	equ	0xFE0
  7739                           indf2	equ	0xFDF
  7740                           postinc2	equ	0xFDE
  7741                           postdec2	equ	0xFDD
  7742                           preinc2	equ	0xFDC
  7743                           plusw2	equ	0xFDB
  7744                           fsr2h	equ	0xFDA
  7745                           fsr2l	equ	0xFD9
  7746                           status	equ	0xFD8
>>>>>>> Stashed changes

Data Sizes:
    Strings     67
    Constant    0
    Data        24
    BSS         39
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
<<<<<<< Updated upstream
    COMRAM           94     69      74
    BANK0           160     36      94
    BANK1           256      0       0
=======
    COMRAM           94     88      93
    BANK0           160      0      56
    BANK1           256    225     229
>>>>>>> Stashed changes
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          234      0       0

Pointer List with Targets:

    ArrayAppend@arrayTime	PTR int  size(2) Largest target is 32
		 -> main@Dawn(BANK1[32]), main@Dusk(BANK1[32]), main@SolarMidnight(BANK1[32]), 

    ArrayAverage@arrayTime	PTR int  size(2) Largest target is 32
		 -> main@SolarMidnight(BANK1[32]), 

    dtoa@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    f$.$buffer	PTR unsigned char  size(2) Largest target is 0

    f$.$source	PTR const unsigned char  size(2) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    fputc@fp$.$buffer	PTR unsigned char  size(2) Largest target is 0

    fputc@fp$.$source	PTR const unsigned char  size(2) Largest target is 0

    fputs@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    fputs@s	PTR const unsigned char  size(1) Largest target is 32
		 -> dbuf(BANK0[32]), 

    LCD_sendstring@string	PTR unsigned char  size(2) Largest target is 18
		 -> main@buffer(BANK1[18]), 

    pad@buf	PTR unsigned char  size(1) Largest target is 32
		 -> dbuf(BANK0[32]), 

    pad@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    read_prec_or_width@ap	PTR PTR void [1] size(1) Largest target is 1
		 -> sprintf@ap(COMRAM[1]), 

    read_prec_or_width@fmt	PTR PTR const unsigned char  size(1) Largest target is 1
		 -> vfprintf@cfmt(COMRAM[1]), 

<<<<<<< Updated upstream
    S1789$buffer	PTR unsigned char  size(2) Largest target is 0

    S1789$source	PTR const unsigned char  size(2) Largest target is 0
=======
    S1857$buffer	PTR unsigned char  size(2) Largest target is 0

    S1857$source	PTR const unsigned char  size(2) Largest target is 0
>>>>>>> Stashed changes

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    sprintf@fmt	PTR const unsigned char  size(1) Largest target is 26
		 -> STR_1(CODE[26]), STR_2(CODE[20]), STR_3(CODE[21]), 

    sprintf@s	PTR unsigned char  size(2) Largest target is 18
		 -> main@buffer(BANK1[18]), 

    UpdateClock@days	PTR int  size(2) Largest target is 16
		 -> main@clock(BANK1[16]), 

    UpdateClock@DoW	PTR int  size(2) Largest target is 16
		 -> main@clock(BANK1[16]), 

    UpdateClock@DSTstate	PTR int  size(2) Largest target is 16
		 -> main@clock(BANK1[16]), 

    UpdateClock@hours	PTR int  size(2) Largest target is 16
		 -> main@clock(BANK1[16]), 

    UpdateClock@minutes	PTR int  size(2) Largest target is 16
		 -> main@clock(BANK1[16]), 

    UpdateClock@months	PTR int  size(2) Largest target is 16
		 -> main@clock(BANK1[16]), 

<<<<<<< Updated upstream
    UpdateClock@seconds	PTR int  size(1) Largest target is 2
		 -> GLOBALsecs(BANK0[2]), 
=======
    UpdateClock@seconds	PTR int  size(2) Largest target is 16
		 -> main@clock(BANK1[16]), 

    UpdateClock@ticker	PTR int  size(2) Largest target is 2
		 -> ticker(BANK1[2]), 
>>>>>>> Stashed changes

    UpdateClock@years	PTR int  size(2) Largest target is 16
		 -> main@clock(BANK1[16]), 

    vfpfcnvrt@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(COMRAM[1]), 

    vfpfcnvrt@cp	PTR unsigned char  size(1) Largest target is 26
		 -> STR_1(CODE[26]), STR_2(CODE[20]), STR_3(CODE[21]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(1) Largest target is 1
		 -> vfprintf@cfmt(COMRAM[1]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    vfprintf@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(COMRAM[1]), 

    vfprintf@cfmt	PTR unsigned char  size(1) Largest target is 26
		 -> STR_1(CODE[26]), STR_2(CODE[20]), STR_3(CODE[21]), 

    vfprintf@fmt	PTR const unsigned char  size(1) Largest target is 26
		 -> STR_1(CODE[26]), STR_2(CODE[20]), STR_3(CODE[21]), 

    vfprintf@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 


Critical Paths under _main in COMRAM

    _main->_sprintf
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_dtoa
    _read_prec_or_width->___wmul
    _dtoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _abs->___awmod
    ___fltol->___fladd
    ___flmul->___xxtofl
    ___fladd->___flmul
    _UpdateClock->___awmod
    _LCD_setline->_LCD_sendbyte
    _LCD_sendstring->_LCD_sendbyte
    _LCD_Init->_LCD_sendbyte
    _LCD_sendbyte->_LCD_sendnibble
    _ArrayAverage->___lwdiv

Critical Paths under _HighISR in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _HighISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _HighISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _HighISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _HighISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _HighISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _HighISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _HighISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _HighISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _HighISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _HighISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _HighISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _HighISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _HighISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _HighISR in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
<<<<<<< Updated upstream
 (0) _main                                                36    36      0   16970
                                              0 BANK0     36    36      0
=======
 (0) _main                                               243   243      0   34911
                                             70 COMRAM    18    18      0
                                              0 BANK1    225   225      0
                         _ADC_getval
>>>>>>> Stashed changes
                           _ADC_init
                        _ArrayAppend
                       _ArrayAverage
                    _Interrupts_init
                           _LCD_Init
                     _LCD_sendstring
                        _LCD_setline
                  _LEDarray_disp_bin
                      _LEDarray_init
                        _Timer0_init
                        _UpdateClock
                            ___fladd
                            ___flmul
                            ___fltol
                             ___wmul
                           ___xxtofl
                            _sprintf
 ---------------------------------------------------------------------------------
<<<<<<< Updated upstream
 (1) _sprintf                                             25    15     10   10262
                                             46 COMRAM    23    13     10
                           _vfprintf
 ---------------------------------------------------------------------------------
 (2) _vfprintf                                             4     1      3    9605
                                             42 COMRAM     4     1      3
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (3) _vfpfcnvrt                                           12     9      3    9246
=======
 (1) _sprintf                                             26    15     11   10718
                                             46 COMRAM    24    13     11
                           _vfprintf
 ---------------------------------------------------------------------------------
 (2) _vfprintf                                             4     1      3   10061
                                             42 COMRAM     4     1      3
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (3) _vfpfcnvrt                                           12     9      3    9702
>>>>>>> Stashed changes
                                             31 COMRAM    11     8      3
                               _dtoa
                              _fputc
                 _read_prec_or_width
 ---------------------------------------------------------------------------------
<<<<<<< Updated upstream
 (4) _read_prec_or_width                                   5     3      2    3835
                                              6 COMRAM     5     3      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4    3503
=======
 (4) _read_prec_or_width                                   5     3      2    4291
                                              6 COMRAM     5     3      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4    3959
>>>>>>> Stashed changes
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) _dtoa                                                11     8      3    4079
                                             20 COMRAM    11     8      3
                            ___awdiv
                            ___awmod
                                _abs
                                _pad
 ---------------------------------------------------------------------------------
 (5) _pad                                                  7     3      4    2172
                                             13 COMRAM     7     3      4
                              _fputc
                              _fputs
 ---------------------------------------------------------------------------------
 (6) _fputs                                                5     3      2    1083
                                              8 COMRAM     5     3      2
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _fputc                                                8     5      3     682
                                              0 COMRAM     8     5      3
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (5) _abs                                                  4     2      2     142
                                              6 COMRAM     4     2      2
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (5) ___awdiv                                              8     4      4     452
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
<<<<<<< Updated upstream
 (1) _UpdateClock                                         40    30     10    2762
                                              6 COMRAM    40    30     10
=======
 (1) ___xxtofl                                            14    10      4     398
                                              0 COMRAM    14    10      4
 ---------------------------------------------------------------------------------
 (1) ___fltol                                             10     6      4     305
                                             55 COMRAM    10     6      4
                            ___fladd (ARG)
                            ___flmul (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (1) ___flmul                                             25    17      8    1744
                                             14 COMRAM    25    17      8
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (1) ___fladd                                             16     8      8    2388
                                             39 COMRAM    16     8      8
                            ___flmul (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (1) _UpdateClock                                         50    30     20    3654
                                              6 COMRAM    50    30     20
>>>>>>> Stashed changes
                            ___awmod
 ---------------------------------------------------------------------------------
 (5) ___awmod                                              6     2      4     752
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _Timer0_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LEDarray_init                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LEDarray_disp_bin                                    2     0      2     274
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _LCD_setline                                          1     1      0     882
                                              3 COMRAM     1     1      0
                       _LCD_sendbyte
 ---------------------------------------------------------------------------------
 (1) _LCD_sendstring                                       2     0      2    1111
                                              3 COMRAM     2     0      2
                       _LCD_sendbyte
 ---------------------------------------------------------------------------------
 (1) _LCD_Init                                             2     2      0     926
                                              3 COMRAM     2     2      0
                       _LCD_sendbyte
                     _LCD_sendnibble
 ---------------------------------------------------------------------------------
 (2) _LCD_sendbyte                                         2     1      1     838
                                              1 COMRAM     2     1      1
                     _LCD_sendnibble
 ---------------------------------------------------------------------------------
 (3) _LCD_sendnibble                                       1     1      0      88
                                              0 COMRAM     1     1      0
                          _LCD_E_TOG
 ---------------------------------------------------------------------------------
 (4) _LCD_E_TOG                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Interrupts_init                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ArrayAverage                                        13     9      4     951
                                              7 COMRAM    13     9      4
                            ___lwdiv
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     618
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _ArrayAppend                                         11     5      6    1435
                                              0 COMRAM    11     5      6
 ---------------------------------------------------------------------------------
 (1) _ADC_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ADC_getval                                           4     2      2      46
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _HighISR                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_getval
   _ADC_init
   _ArrayAppend
   _ArrayAverage
     ___lwdiv
   _Interrupts_init
   _LCD_Init
     _LCD_sendbyte
       _LCD_sendnibble
         _LCD_E_TOG
     _LCD_sendnibble
   _LCD_sendstring
     _LCD_sendbyte
   _LCD_setline
     _LCD_sendbyte
   _LEDarray_disp_bin
   _LEDarray_init
   _Timer0_init
   _UpdateClock
     ___awmod
<<<<<<< Updated upstream
=======
   ___fladd
     ___flmul (ARG)
       ___xxtofl (ARG)
     ___xxtofl (ARG)
   ___flmul
   ___fltol
     ___fladd (ARG)
     ___flmul (ARG)
     ___xxtofl (ARG)
   ___wmul
   ___xxtofl
>>>>>>> Stashed changes
   _sprintf
     _vfprintf
       _vfpfcnvrt
         _dtoa
           ___awdiv
           ___awmod
           _abs
             ___awmod (ARG)
           _pad
             _fputc
               _putch
             _fputs
               _fputc
         _fputc
         _read_prec_or_width
           ___wmul

 _HighISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             DE9      0       0      46        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     E1      E5       7       89.5%
BITBANK13           EA      0       0      30        0.0%
BANK13              EA      0       0      31        0.0%
BITBANK0            A0      0       0       4        0.0%
<<<<<<< Updated upstream
BANK0               A0     24      5E       5       58.8%
=======
BANK0               A0      0      38       5       35.0%
>>>>>>> Stashed changes
BITBIGSFRllhhhh     84      0       0      38        0.0%
BITBIGSFRllhhll     5E      0       0      41        0.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     58      5D       1       98.9%
BITBIGSFRhhl        4A      0       0      34        0.0%
BITBIGSFRllhhlh     33      0       0      40        0.0%
BITBIGSFRllll       30      0       0      44        0.0%
BITBIGSFRhhhl       1B      0       0      33        0.0%
BITBIGSFRllhhhh     14      0       0      35        0.0%
BITBIGSFRhhhh        D      0       0      32        0.0%
BITBIGSFRlllh        9      0       0      43        0.0%
BITBIGSFRllhl        9      0       0      42        0.0%
BITBIGSFRllhhhl      8      0       0      39        0.0%
BITBIGSFRllhhhh      6      0       0      37        0.0%
BITBIGSFRllhhhh      3      0       0      36        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
<<<<<<< Updated upstream
ABS                  0      0      A8      45        0.0%
DATA                 0      0      A8       3        0.0%
=======
ABS                  0      0     17A      45        0.0%
DATA                 0      0     17A       3        0.0%
>>>>>>> Stashed changes
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.45 build 20230818022343 
<<<<<<< Updated upstream
Symbol Table                                                                                   Fri Feb 09 02:31:35 2024

                        l53 1F78                          l73 1FC6                ___awdiv@sign 0006  
       ___wmul@multiplicand 0003           ??_Interrupts_init 0001                         l121 18EA  
                       l130 1944                         l122 18EC                         l131 1958  
                       l123 1900                         l300 1EE8                         l132 195A  
                       l124 1902                         l133 196E                         l125 1916  
                       l134 1970                         l126 1918                         l118 1F34  
                       l135 1984                         l127 192C                         l136 1986  
                       l128 192E                         l137 199A                         l129 1942  
                       l226 1F92                         l139 199C                         l253 1384  
                       l309 1F0E                         l272 1FB8                         l281 1D4C  
                       l283 1D5A                         l275 1D0A                         l540 1A60  
                       l277 1D20                         l286 1F58                         l294 1E52  
                       l279 1D36                         l289 18D4                         l553 1B10  
                       l987 1E86                         _abs 1E88                         _pad 1C6A  
              ___awmod@sign 0006                         wreg 0FE8                        l1010 1CD8  
                      l1012 1CF2                        l1007 1C9A                        l1015 1566  
                      l1032 1BB6                        l2001 1E96                        l2003 1FAC  
                      l2011 150C                        l1051 1506                        ?_abs 0007  
                      l1028 166E                        l1036 1BBE                        l2005 1FAE  
                      l1061 1EA2                        l2021 154E                        l2013 1520  
                      l2101 13C4                        l2007 1FB6                        l2031 157E  
                      l2023 155A                        l2015 1528                        l2111 13E2  
                      l2103 13CC                        l1064 1EBA                        l2201 185E  
                      l2041 15EC                        l2033 15AC                        l2025 1562  
                      l2017 1538                        l2009 1508                        l2121 1454  
                      l2105 13CE                        l2113 1418                        l1057 1D9C  
                      l2211 18B2                        l2203 1876                        l2051 1646  
                      l2043 15FE                        l2035 15B0                        l2027 156E  
                      l2019 153E                        l2131 14C0                        l2123 145E  
                      l2115 1428                        l2107 13DA                        l1076 1C68  
                      l1084 1E18                        l2221 1F8E                        l2213 18BC  
                      l2205 1880                        l2301 1242                        l2053 164C  
                      l2045 160E                        l2037 15B6                        l2029 1578  
                      l2061 1B1A                        l2125 147E                        l2117 143C  
                      l2223 1F90                        l2215 1F7A                        l2151 1F42  
                      l2207 1890                        l2311 12FA                        l2303 126E  
                      l2231 0E7E                        l1087 1FC8                        l2055 1658  
                      l2047 1628                        l2039 15D2                        l2063 1B40  
                      l2071 1B8C                        l2135 14D4                        l2127 149E  
                      l2119 144A                        l2217 1F84                        l2081 1D22  
                      l2073 1CF6                        l2153 1F4A                        l2209 189A  
                      l2321 18D6                        l2313 1308                        l2305 1288  
                      l2241 0F02                        l2233 0EA4                        l2225 0E46  
                      l2049 1636                        l2065 1B48                        l2129 14B6  
                      l2161 1D74                        l2401 16C6                        l2219 1F8C  
                      l2091 1D52                        l2083 1D30                        l2075 1D04  
                      l2155 1F50                        l2331 193C                        l2323 18E4  
                      l2171 1F62                        l2315 132C                        l2307 12B4  
                      l2251 0F86                        l2243 0F28                        l2235 0EAE  
                      l2227 0E58                        l2067 1B64                        l2059 1B12  
                      l2139 14E0                        l2163 1D94                        l2411 16E6  
                      l2403 16CE                        l2085 1D38                        l2077 1D0C  
                      l2149 1F38                        l2181 17CE                        l2341 1E1C  
                      l2333 1952                        l2325 18FA                        l2173 1F6C  
                      l2317 1352                        l2309 12BC                        l2261 101A  
                      l2253 0FAA                        l2245 0F32                        l2237 0ED4  
                      l2229 0E6A                        l2069 1B84                        l2093 1386  
                      l2157 1D5C                        l2421 1742                        l2413 16EE  
                      l2405 16D6                        l2087 1D46                        l2079 1D1A  
                      l2191 1826                        l2183 17E4                        l2343 1E2E  
                      l2335 1968                        l2327 1910                        l2167 1F10  
                      l2175 1F76                        l2319 1360                        l2271 10BC  
                      l2263 1034                        l2255 0FCE                        l2247 0F56  
                      l2239 0EDE                        l2095 13AC                        l2159 1D64  
                      l2351 1E5C                        l2431 17A6                        l2423 1748  
                      l2415 1702                        l2407 16DE                        l2177 1FBA  
                      l2089 1D4E                        l2193 182C                        l2185 17EA  
                      l2361 1EBC                        l2345 1E38                        l2337 197E  
                      l2329 1926                        l2169 1F5A                        l2281 1132  
                      l2273 10CE                        l2265 105A                        l2257 0FF4  
                      l2249 0F7C                        l2097 13B4                        l2353 1E64  
                      l2425 1774                        l2417 170A                        l2409 16DE  
                      l2195 183C                        l2187 1800                        l2179 17B6  
                      l2363 1EC0                        l2347 1E48                        l2339 1994  
                      l2291 11C6                        l2283 1158                        l2275 10F2  
                      l2267 1074                        l2259 1002                        l2099 13C0  
                      l2355 1E6C                        l2427 177C                        l2419 1736  
                      l2371 1674                        l2197 1846                        l2189 1810  
                      l2365 1ED0                        l2293 11EE                        l2285 1172  
                      l2269 1098                        l2277 1100                        l2357 1E7C  
                      l2349 1E54                        l2429 1782                        l2381 1686  
                      l2373 1678                        l2199 1854                        l2367 1ED2  
                      l2287 118C                        l2279 1118                        l2295 11F8  
                      l1911 19BC                        l1903 199E                        l2391 169E  
                      l2383 1688                        l2375 167C                        l2297 1220  
                      l2289 11B4                        l1921 19F0                        l1913 19CA  
                      l1905 19A2                        l2393 16A6                        l2385 168A  
                      l2377 1680                        l2369 1670                        l2299 123A  
                      l1931 1A2A                        l1923 19F8                        l1915 19D2  
                      l1907 19B0                        l2395 16AE                        l2387 168C  
                      l2379 1684                        l1941 1A50                        l1933 1A32  
                      l1925 1A00                        l1917 19D6                        l1909 19B8  
                      l2397 16B6                        l2389 1696                        l1951 1A74  
                      l1943 1A58                        l1935 1A34                        l1927 1A0E  
                      l1919 19DE                        l2399 16BE                        l1961 1AA8  
                      l1953 1A7C                        l1937 1A3A                        l1929 1A14  
                      l1881 1BEA                        l1971 1AE4                        l1963 1AB0  
                      l1955 1A80                        l1947 1A62                        l1939 1A40  
                      l1883 1C06                        l1875 1BC0                        l1891 1DEA  
                      l1973 1AEA                        l1965 1AB8                        l1957 1A8E  
                      l1949 1A66                        l1885 1C38                        l1877 1BD0  
                      l1893 1DF8                        l2597 140A                        ?_pad 000E  
                      l1967 1AC6                        l1975 1AF0                        l1959 1A96  
                      l1879 1BE0                        l1895 1DFC                        l1991 1CA6  
                      l1983 1C6A                        l1977 1B00                        l1969 1ADC  
                      l1889 1DDE                        l1993 1CB6                        l1985 1C78  
                      l1897 1EEA                        l1979 1B08                        l1995 1CBA  
                      l1987 1C84                        l1899 1F06                        l1997 1CE6  
                      l1989 1C92                        l1999 1E88                main@TestMode 0072  
                      STR_1 0E01                        STR_2 0E30                        STR_3 0E1B  
                      u2000 12FA                        u2001 12F6                        u2010 1352  
                      u2011 134E                        u2100 1994                        u2020 18E4  
                      u2101 1990                        u2021 18E0                        u2110 1E2E  
                      u2030 18FA                        u1310 1BD0                        u2111 1E2A  
                      u2031 18F6                        u1311 1BCC                        u2120 1E48  
                      u2040 1910                        u1400 1A2A                        u1320 1BE0  
                      u2121 1E44                        u2041 190C                        u1401 1A26  
                      u1321 1BDC                        u2130 1EE8                        u2050 1926  
                      u1410 1A50                        u1330 1C06                        u2131 1EE4  
                      u2051 1922                        u1411 1A4C                        u1331 1C02  
                      u2060 193C                        u1420 1A74                        u1340 1C38  
                      u1500 1CD8                        u2140 1702                        u2061 1938  
                      u1421 1A70                        u1341 1C34                        u1501 1CD4  
                      u2141 16FE                        u2070 1952                        u1430 1A8E  
                      u1350 1E18                        u1510 1CE6                        u2071 194E  
                      u1431 1A8A                        u1351 1E14                        u1511 1CE2  
                      u2080 1968                        u1440 1AA8                        u1360 19B0  
                      u1520 1E96                        u1600 1628                        u2081 1964  
                      u1441 1AA4                        u1361 19AC                        u1521 1E92  
                      u1601 1624                        u2090 197E                        u1450 1AC6  
                      u1370 19CA                        u1610 1636                        u1530 151C  
                      u2091 197A                        u1451 1AC2                        u1371 19C6  
                      u1611 1632                        u1531 1516                        u1460 1ADC  
                      u1380 19F0                        u1620 1646                        u1540 151E  
                      u1700 1428                        u1461 1AD8                        u1381 19EC  
                      u1621 1642                        u1701 1424                        u1470 1B00  
                      u1390 1A0E                        u1550 1538                        u1630 1B40  
                      u1710 144A                        u1471 1AFC                        u1391 1A0A  
                      u1551 1534                        u1631 1B3C                        u1711 1446  
                      u1800 0F28                        u1480 1C78                        u1560 154E  
                      u1640 1BB6                        u1720 147E                        u1801 0F24  
                      u1481 1C74                        u1561 154A                        u1641 1BB2  
                      u1721 147A                        u1650 1D04                        u1810 0F7C  
                      u1490 1C92                        u1570 15EC                        u1730 149E  
                      u1651 1D00                        u1811 0F78                        u1491 1C8E  
                      u1571 15E8                        u1731 149A                        u1660 1D1A  
                      u1900 1132                        u1820 0FF4                        u1580 15FE  
                      u1661 1D16                        u2517 17D8                        u1901 112E  
                      u1821 0FF0                        u1581 15FA                        u1670 1D30  
                      u1910 1158                        u1830 101A                        u1590 160E  
                      u1750 1D94                        u1671 1D2C                        u2607 18C6  
                      u2527 17F0                        u1911 1154                        u1831 1016  
                      u1591 160A                        u1751 1D90                        u1680 1D46  
                      u1920 1172                        u1840 1034                        u1681 1D42  
                      u2617 1F52                        u1745 1F40                        u2537 1806  
                      u1921 116E                        u1841 1030                        u1761 0E50  
                      u1746 1F42                        u1930 118C                        u1850 105A  
                      u1770 0E6A                        u1690 13AC                        u2627 1D54  
                      u2547 181C                        u1931 1188                        u1851 1056  
                      u1771 0E66                        u1691 13A8                        u1940 11C6  
                      u1860 1074                        u1780 0EA4                        u2637 1FB0  
                      u2557 1832                        u1941 11C2                        u1861 1070  
                      u1781 0EA0                        u1950 1220                        u1870 1098  
                      u1790 0ED4                        u2567 1848                        u1951 121C  
                      u1871 1094                        u1791 0ED0                        u1960 123A  
                      u1880 10CE                        u2577 1868                        u1961 1236  
                      u1881 10CA                        u1970 126E                        u1890 1118  
                      u2587 1886                        u1971 126A                        u1891 1114  
                      u1980 1288                        u2597 18A4                        u1981 1284  
                      u1990 12B4                        u1991 12B0                        i2l79 002C  
                      abs@a 0007                        _dbuf 0084                        _main 1670  
                      _dtoa 1508                        _prec 0048                        pad@i 0013  
                      pad@p 0010                        fsr1h 0FE2                        fsr2h 0FDA  
                      indf1 0FE7                        indf2 0FDF                        fsr1l 0FE1  
                      fsr2l 0FD9                        btemp 004B                ?_LCD_setline 0001  
                      prodh 0FF4                        prodl 0FF3                        start 0030  
          __end_of_ADC_init 1F94             __end_of_HighISR 0030                ___param_bank 0000  
                     ??_abs 0009                       ??_pad 0012            __end_of_LCD_Init 18D6  
                     ?_main 0001                       ?_dtoa 0015                       _ADPCH 0F5F  
           __end_of___awdiv 1A62             __end_of___awmod 1B12             ___awdiv@divisor 0003  
           ___awdiv@counter 0005                vfpfcnvrt@fmt 0021                       _TMR0H 0FD4  
                     _TMR0L 0FD3                       _flags 004A         read_prec_or_width@c 0009  
       read_prec_or_width@n 000A                       _fputc 1BC0                       _fputs 1DDE  
                     pad@fp 000E                       _width 0046                       _putch 1FC8  
                     dtoa@d 0016                       dtoa@i 001E                       dtoa@p 001A  
                     dtoa@s 001D                       dtoa@w 001B               ?_LCD_sendbyte 0002  
                     tablat 0FF5                       plusw1 0FE3                       plusw2 0FDB  
                     ttemp5 004C                       ttemp6 004F                       ttemp7 0053  
                     status 0FD8                       wtemp8 004C             __end_of_sprintf 1E88  
           __initialization 1D9E                __end_of_main 17B6                __end_of_dtoa 1670  
         __end_of_LCD_E_TOG 1FBA                      ??_main 0046                      ??_dtoa 0018  
             __activetblptr 0003  __end_of_read_prec_or_width 1BC0                      ?_fputc 0001  
                    ?_fputs 0009                      _ADRESH 0F64              ??_LCD_sendbyte 0003  
          ___awdiv@dividend 0001                      ?_putch 0001            UpdateClock@hours 0009  
                    i2l2433 000A                      i2l2435 001A                      i2l2437 0022  
                    i2l2439 0028            UpdateClock@years 000D               vfpfcnvrt@done 0029  
                 ??_HighISR 0001           _LEDarray_disp_bin 18D6          ?_LEDarray_disp_bin 0001  
             ??_Timer0_init 0001                vfprintf@cfmt 002E                      ___wmul 1EEA  
                 ??___awdiv 0005                   ??___awmod 0005        read_prec_or_width@ap 0008  
       ??_LEDarray_disp_bin 0003                      clear_0 1DC4            ___awdiv@quotient 0007  
           ___awmod@divisor 0003                      isa$std 0001             ___awmod@counter 0005  
                    pad@buf 000F                      dtoa@fp 0015                      fputc@c 0001  
                    fputs@c 000B                      fputs@i 000C                      fputs@s 0009  
              __mediumconst 0000                      tblptrh 0FF7                      tblptrl 0FF6  
                    tblptru 0FF8                   ?_ADC_init 0001                      putch@c 0001  
          __end_of_vfprintf 1D9E                   ??_sprintf 0039   __end_of_LEDarray_disp_bin 199E  
                __accesstop 0060               ??_UpdateClock 0011     __end_of__initialization 1DD4  
                 ?_LCD_Init 0001               ___rparam_used 0001               _LEDarray_init 1F10  
           _Interrupts_init 1FBA              __pcstackCOMRAM 0001                __pidataBANK0 1F94  
             __end_of_fputc 1C6A               __end_of_fputs 1E1A               __end_of_putch 1FCA  
       __end_of_Timer0_init 1F7A                  ??_ADC_init 0001                     ??_fputc 0004  
                   ??_fputs 000B                     ??_putch 0001           UpdateClock@F14152 00A6  
                __pbssBANK0 0084         UpdateClock@DSTstate 000E                  ??_LCD_Init 0004  
            _LCD_sendnibble 1CF4              ?_LEDarray_init 0001              _LCD_sendstring 1EBC  
       __end_of_UpdateClock 1386                     ?___wmul 0001        __end_of_LCD_sendbyte 1F5A  
         UpdateClock@months 000C      __end_of_LCD_sendnibble 1D5C         UpdateClock@TestMode 000F  
   __end_of_Interrupts_init 1FC8                     _HighISR 0008      __end_of_LCD_sendstring 1EEA  
                 _ADREFbits 0F58                     __Hparam 0000                     __Lparam 0000  
               _Timer0_init 1F5A                     ___awdiv 199E                     ___awmod 1A62  
                 ?_vfprintf 002B                __psmallconst 0E00                     __pcinit 1D9E  
                   __ramtop 0E00                     __ptext0 1670                     __ptext1 1E54  
                   __ptext2 1D5C                     __ptext3 1386                     __ptext4 1B12  
                   __ptext5 1EEA                     __ptext6 1508                     __ptext7 1C6A  
                   __ptext8 1DDE                     __ptext9 1BC0       read_prec_or_width@fmt 0007  
          ___awmod@dividend 0001                   _LCD_E_TOG 1FAC             LCD_setline@line 0004  
                   _sprintf 1E54        end_of_initialization 1DD4             ?_LCD_sendnibble 0001  
                   fputc@fp 0003             ??_LEDarray_init 0001                     fputs@fp 000A  
               _UpdateClock 0E46             ?_LCD_sendstring 0004          _read_prec_or_width 1B12  
         __end_of_vfpfcnvrt 1508                     postdec1 0FE5                     postdec2 0FDD  
       ?_read_prec_or_width 0007                     postinc0 0FEE                     postinc1 0FE6  
                   postinc2 0FDE            vfpfcnvrt@convarg 0025                  ??_vfprintf 002E  
                ?_LCD_E_TOG 0001                   _TRISAbits 0F81                   _TRISBbits 0F82  
                 _TRISCbits 0F83                   _TRISDbits 0F84                   _TRISEbits 0F85  
                 _TRISFbits 0F86                   _TRISGbits 0F87                   _TRISHbits 0F88  
      ??_read_prec_or_width 0009                 _CM1CON0bits 0ED0                 _CM1CON1bits 0ED1  
          ?_Interrupts_init 0001                  main@buffer 0060                 vfpfcnvrt@ap 0022  
               vfpfcnvrt@cp 002A                 vfpfcnvrt@fp 0020              __end_of___wmul 1F10  
      LCD_sendnibble@number 0001         start_initialization 1D9E                 __end_of_abs 1EBC  
               __end_of_pad 1CF4                _LCD_sendbyte 1F36             UpdateClock@days 000A  
             ??_LCD_setline 0004                 vfprintf@fmt 002C        LCD_sendstring@string 0004  
                  ??___wmul 0005                 __pdataBANK0 00A6                 __pbssCOMRAM 0046  
               ??_LCD_E_TOG 0001               __pcstackBANK0 0060                    ?_HighISR 0001  
                 _dtoa$1868 0018                ?_Timer0_init 0001                   __pintcode 0008  
                  ?___awdiv 0001                    ?___awmod 0001         __end_of_LCD_setline 1E54  
               __smallconst 0E00            ??_LCD_sendnibble 0001                    _ADC_init 1F7A  
          ??_LCD_sendstring 0005                    ?_sprintf 002F            LCD_sendbyte@Byte 0003  
                  _LCD_Init 17B6            LCD_sendbyte@type 0002                ?_UpdateClock 0007  
            ___wmul@product 0005                    _LATAbits 0F79          UpdateClock@minutes 0008  
        UpdateClock@seconds 0007                    _LATBbits 0F7A                    _LATCbits 0F7B  
                  _LATDbits 0F7C                    _LATEbits 0F7D                    _LATFbits 0F7E  
                  _LATGbits 0F7F                    _LATHbits 0F80                    _IPR0bits 0E1F  
                  _PIE0bits 0E29                    i2u215_40 001A                    i2u215_41 0016  
                  _PIR0bits 0E33                   _vfpfcnvrt 1386                  _ADCON0bits 0F60  
         ___wmul@multiplier 0001                   main@clock 0074      UpdateClock@DaysInMonth 0017  
                _CM1NCHbits 0ED2                  _CM1PCHbits 0ED3                   copy_data0 1DB2  
     __end_of_LEDarray_init 1F36              UpdateClock@DoW 000B                 _LCD_setline 1E1A  
                  __Hrparam 0000                  vfprintf@ap 002D                    __Lrparam 0000  
                vfprintf@fp 002B                  ?_vfpfcnvrt 0020                  _ANSELAbits 0E92  
                sprintf@fmt 0030                  _T0CON0bits 0FD5                  _T0CON1bits 0FD6  
                  __ptext10 1FC8                    __ptext11 1E88                    __ptext20 17B6  
                  __ptext12 199E                    __ptext21 1F36                    __ptext13 0E46  
                  __ptext22 1CF4                    __ptext14 1A62                    __ptext23 1FAC  
                  __ptext15 1F5A                    __ptext24 1FBA                    __ptext16 1F10  
                  __ptext25 1F7A                    __ptext17 18D6                    __ptext18 1E1A  
                  __ptext19 1EBC     LEDarray_disp_bin@number 0001                  _GLOBALsecs 00A4  
                  isa$xinst 0000                    int$flags 004B                    _vfprintf 1D5C  
                _INTCONbits 0FF2                    intlevel2 0000                   sprintf@ap 0039  
              _DAC1CON0bits 0EC6                _DAC1CON1bits 0EC7                 ??_vfpfcnvrt 0023  
                  sprintf@f 003A                    sprintf@s 002F  
=======
Symbol Table                                                                                   Fri Feb 09 04:48:40 2024

                        l43 10FC                          l46 11DA                          l48 11D4  
                        l81 3502                ___awdiv@sign 0006         ___wmul@multiplicand 0003  
         ??_Interrupts_init 0001                         l103 3550                         l310 3262  
                       l151 2CA2                         l312 3278                         l160 2CFC  
                       l152 2CA4                         l305 3542                         l161 2D10  
                       l153 2CB8                         l314 328E                         l322 2B86  
                       l162 2D12                         l154 2CBA                         l163 2D26  
                       l155 2CCE                         l316 329C                         l308 324C  
                       l164 2D28                         l156 2CD0                         l148 34BE  
                       l261 3454                         l333 3442                         l165 2D3C  
                       l157 2CE4                         l262 3472                         l166 2D3E  
                       l158 2CE6                         l319 34E2                         l327 33DA  
                       l167 2D52                         l159 2CFA                         l256 351C  
                       l600 2F82                         l353 30BE                         l169 2D54  
                       l259 3446                         l347 31C0                         l356 3498  
                       l286 1CDE                         l901 1FE8                         l653 2C8C  
                       l910 20B8                         l911 20A6                         l587 2E18  
                       l854 3234                         l847 322C                         l970 2264  
                       l884 1ECE                         l980 24C0                         l893 219E  
                       l885 1EBC                         l886 1E82                         l974 25C8  
                       l977 245A                         l987 258A                         l979 24D2  
                       _abs 33DC                         _pad 30C0                ___awmod@sign 0006  
                       wreg 0FE8                ___flmul@aexp 0020                ___flmul@bexp 0021  
              ___flmul@sign 001B                ___flmul@temp 0026                ___flmul@prod 0022  
              ___fltol@exp1 0041                        l1011 2620                        l1014 277C  
                      l1111 340E                        l1104 3328                        l1025 2714  
                      l1018 26B8                        l1034 3364                        l1123 2ED2  
                      l1131 33A0                        ?_abs 0007                        l1108 33F6  
                      l1134 3552                        l1054 30F0                        l1062 295E  
                      l3000 350E                        l1057 312E                        l3002 3516  
                      l1059 3148                        l1075 2A66                        l1083 3030  
                      l3004 3518                        l3006 351A                        l3110 2C8E  
                      l1079 3028                        l3120 2CF4                        l3112 2C9C  
                      l3200 1CFC                        l3130 3444                        l3122 2D0A  
                      l3114 2CB2                        l3202 1D0C                        l3210 1D36  
                      l1098 28FE                        l3132 345A                        l3140 3156  
                      l3124 2D20                        l3116 2CC8                        l4100 1800  
                      l3300 1F00                        l3220 1D66                        l3212 1D46  
                      l3204 1D1C                        l3134 346A                        l3142 315E  
                      l3150 3196                        l3126 2D36                        l3118 2CDE  
                      l4110 1890                        l4102 1828                        l3310 1F3C  
                      l3302 1F10                        l3230 1DA6                        l3222 1D74  
                      l3214 1D4C                        l3206 1D2C                        l3144 317E  
                      l3160 309A                        l3152 3032                        l3128 2D4C  
                      l4120 1932                        l4112 18B8                        l4104 1834  
                      l3320 1F82                        l3312 1F4A                        l3304 1F1E  
                      l3240 1DE0                        l3232 1DA8                        l3224 1D76  
                      l3216 1D5E                        l3208 1D2E                        l3400 21BA  
                      l4200 0E6C                        l3138 314A                        l3162 30B6  
                      l3154 3046                        l3170 33C0                        l4130 19E0  
                      l4122 194E                        l4114 18E0                        l4106 185C  
                      l3330 1FFE                        l3322 1FB6                        l3314 1F4C  
                      l3306 1F2C                        l3250 1DF4                        l3242 1DE4  
                      l3226 1D86                        l3234 1DB0                        l3218 1D60  
                      l3410 21F2                        l3402 21BC                        l4210 0E94  
                      l4202 0E74                        l3148 3192                        l3156 306C  
                      l3172 33D0                        l4140 1A60                        l4132 19F2  
                      l4124 1976                        l4116 1908                        l4108 1884  
                      l3340 203A                        l3332 200E                        l3324 1FB8  
                      l3316 1F56                        l3308 1F38                        l3260 1E08  
                      l3252 1DF8                        l3244 1DE8                        l3236 1DC0  
                      l3228 1D96                        l3500 24FC                        l3420 221E  
                      l3412 2202                        l3404 21CC                        l2700 2DF8  
                      l3180 3346                        l4300 0FFC                        l4220 0EBC  
                      l4212 0E9C                        l4204 0E7C                        l3158 3070  
                      l3190 3426                        l3166 33A4                        l2710 2ED8  
                      l4150 1AFE                        l4142 1A88                        l4134 1A1A  
                      l4126 1992                        l4118 1918                        l3350 2066  
                      l3342 203C                        l3326 1FC8                        l3318 1F5C  
                      l3270 1E1C                        l3262 1E0C                        l3254 1DFC  
                      l3246 1DEC                        l3238 1DD2                        l3510 2572  
                      l3502 2526                        l3430 2274                        l3422 222E  
                      l3414 2208                        l3406 21DC                        l2702 2E08  
                      l3182 3356                        l3174 332A                        l4310 1024  
                      l4302 1004                        l4230 0EE4                        l4222 0EC4  
                      l4214 0EA4                        l4206 0E84                        l3192 342A  
                      l3168 33B6                        l2720 2F08                        l2712 2EE6  
                      l4160 1B84                        l4152 1B2A                        l4144 1AA4  
                      l4128 19B8                        l4136 1A2A                        l4080 16EA  
                      l3360 209E                        l3344 204A                        l3336 2022  
                      l3352 2068                        l3328 1FD8                        l3280 1E7A  
                      l3264 1E10                        l3256 1E00                        l3248 1DF0  
                      l3272 1E20                        l3512 258E                        l3520 25B4  
                      l3504 252A                        l3440 22AE                        l3432 2284  
                      l3424 223E                        l3416 220E                        l3408 21EC  
                      l3600 2722                        l2704 2E10                        l2640 2E3A  
                      l2800 29CA                        l3176 3336                        l4400 12B8  
                      l4320 104C                        l4312 102C                        l4304 100C  
                      l4240 0F0C                        l4232 0EEC                        l4224 0ECC  
                      l4216 0EAC                        l4208 0E8C                        l3186 3410  
                      l2730 2F4E                        l2722 2F1A                        l2714 2EEE  
                      l4170 1C46                        l4162 1BB2                        l4146 1AC0  
                      l4138 1A44                        l4154 1B36                        l4090 1770  
                      l4082 16FC                        l3370 211C                        l3346 2052  
                      l3338 202C                        l3354 2076                        l3290 1EB0  
                      l3282 1E90                        l3274 1E24                        l3266 1E14  
                      l3258 1E04                        l3194 1CE0                        l3522 25B8  
                      l3514 259E                        l3506 2544                        l3450 2300  
                      l3442 22C4                        l3426 224E                        l3418 221C  
                      l3610 276A                        l3602 2724                        l2642 2E44  
                      l2650 3366                        l2802 29E4                        l2810 2A2E  
                      l3178 333E                        l4410 1324                        l4402 12F0  
                      l4330 1074                        l4322 1054                        l4314 1034  
                      l4306 1014                        l4250 0F34                        l4242 0F14  
                      l4234 0EF4                        l4226 0ED4                        l4218 0EB4  
                      l3188 3414                        l2740 2F7A                        l2732 2F56  
                      l2724 2F22                        l2716 2EF2                        l2708 2ED4  
                      l4172 1C56                        l4164 1BCE                        l4156 1B60  
                      l4148 1AEC                        l4092 177C                        l4084 1714  
                      l3380 2162                        l3364 20C8                        l3372 211E  
                      l3356 207A                        l3348 2056                        l3292 1EBA  
                      l3284 1E9C                        l3276 1E4E                        l3268 1E18  
                      l3196 1CEC                        l3516 25AC                        l3508 2558  
                      l3460 2346                        l3452 230E                        l3444 22D0  
                      l3436 2298                        l3428 2254                        l3540 2BF2  
                      l3532 2BB2                        l3612 276C                        l3604 2728  
                      l2644 2E60                        l2636 2E1A                        l2652 3372  
                      l2812 2A3E                        l2804 29F6                        l2660 3490  
                      l2820 2F84                        l2900 28D8                        l4420 13B0  
                      l4412 132C                        l4404 12FA                        l4340 109C  
                      l4332 107C                        l4324 105C                        l4316 103C  
                      l4308 101C                        l4260 0F5C                        l4252 0F3C  
                      l4244 0F1C                        l4236 0EFC                        l4228 0EDC  
                      l4180 0E46                        l2910 34C2                        l2734 2F5C  
                      l2726 2F2A                        l2718 2F00                        l4174 1C7E  
                      l4166 1BFC                        l4158 1B7C                        l4094 17A4  
                      l4086 173C                        l4078 16D8                        l3390 218C  
                      l3382 2170                        l3374 212E                        l3366 20D4  
                      l3358 2088                        l3294 1EDC                        l3286 1EA0  
                      l3278 1E6A                        l3198 1CFA                        l3518 25AE  
                      l3470 23B4                        l3462 2360                        l3454 231A  
                      l3446 22E8                        l3438 22A4                        l3550 2C22  
                      l3542 2C00                        l3534 2BDC                        l3526 2B88  
                      l3606 274C                        l2670 2D70                        l2646 2E92  
                      l2638 2E2A                        l2654 3380                        l2750 30E8  
                      l2814 2A44                        l2806 2A06                        l2830 2FF6  
                      l2822 2F8C                        l4430 13FA                        l4422 13BC  
                      l4414 1340                        l4406 1310                        l4350 10C4  
                      l4342 10A4                        l4334 1084                        l4326 1064  
                      l4318 1044                        l4270 0F84                        l4262 0F64  
                      l4254 0F44                        l4246 0F24                        l4238 0F04  
                      l4190 0E5A                        l4182 0E4A                        l2920 31CA  
                      l2840 325C                        l2912 34CC                        l2728 2F38  
                      l2736 2F62                        l4176 1CA6                        l4168 1C04  
                      l4096 17CC                        l4088 1748                        l3392 218E  
                      l3384 2176                        l3376 213E                        l3368 20E2  
                      l3296 1EEC                        l3288 1EAE                        l3480 244A  
                      l3472 23DE                        l3464 2370                        l3456 232A  
                      l3448 22F4                        l3560 2C4C                        l3552 2C2C  
                      l3536 2BDE                        l3528 2B9E                        l3608 275C  
                      l2680 2D96                        l2672 2D74                        l2664 2D56  
                      l2760 33DC                        l2656 3384                        l2752 30FC  
                      l2744 30C0                        l2816 2A50                        l2808 2A20  
                      l2824 2FB2                        l2832 2FFE                        l4440 143C  
                      l4432 141C                        l4424 13D2                        l4416 1348  
                      l4408 1320                        l4360 10EC                        l4352 10CC  
                      l4344 10AC                        l4336 108C                        l4328 106C  
                      l4280 0FAC                        l4272 0F8C                        l4264 0F6C  
                      l4256 0F4C                        l4248 0F2C                        l4192 0E5C  
                      l4184 0E4E                        l2930 3200                        l2922 31DC  
                      l2850 3290                        l2842 3264                        l2834 3238  
                      l2914 34D4                        l2738 2F72                        l4178 1CB6  
                      l4098 17D8                        l3386 2178                        l3378 215E  
                      l3490 248A                        l3482 2458                        l3474 2414  
                      l3466 238C                        l3458 2336                        l3562 2C5C  
                      l3538 2BEE                        l3570 25CC                        l2690 2DCC  
                      l2682 2DA8                        l2674 2D82                        l2666 2D5A  
                      l2762 33EA                        l2754 310C                        l2746 30CE  
                      l2770 2900                        l2658 3474                        l2826 2FBA  
                      l4450 154E                        l4442 1444                        l4434 1424  
                      l4426 13D6                        l4418 1376                        l4370 1164  
                      l4362 10EC                        l4354 10D4                        l4346 10B4  
                      l4338 1094                        l4290 0FD4                        l4282 0FB4  
                      l4274 0F94                        l4266 0F74                        l4258 0F54  
                      l4194 0E5E                        l4186 0E52                        l2932 3216  
                      l2924 31E4                        l2764 3536                        l2852 3294  
                      l2844 3272                        l2836 3246                        l2916 34DA  
                      l3388 217E                        l3492 24B8                        l3484 246A  
                      l3476 2422                        l3468 2398                        l3396 21A0  
                      l3564 2C6C                        l3548 2C18                        l3572 25DC  
                      l2692 2DE2                        l2684 2DB0                        l2676 2D8A  
                      l2668 2D68                        l2756 3110                        l2748 30DA  
                      l2780 2936                        l2772 2904                        l2828 2FD6  
                      l2860 27B8                        l2940 32E8                        l4460 1632  
                      l4452 15CA                        l4444 144C                        l4436 142C  
                      l4428 13EE                        l4380 11DC                        l4372 1180  
                      l4364 10F4                        l4356 10DC                        l4348 10BC  
                      l4292 0FDC                        l4284 0FBC                        l4276 0F9C  
                      l4268 0F7C                        l4196 0E60                        l4188 0E56  
                      l2934 321E                        l2926 31EC                        l2918 31C2  
                      l2766 3538                        l2846 327A                        l2838 324E  
                      l2950 349A                        l3486 2478                        l3478 2440  
                      l3398 21AC                        l3566 2C7C                        l3558 2C40  
                      l3590 26A2                        l3582 265A                        l3574 25EA  
                      l2694 2DEA                        l2686 2DB8                        l2678 2D8E  
                      l2758 313C                        l2790 2970                        l2782 2946  
                      l2774 2918                        l2862 27BC                        l2854 277E  
                      l2942 32F0                        l4470 168A                        l4462 1640  
                      l4454 15E6                        l4446 1454                        l4438 1434  
                      l4382 11EE                        l4374 1192                        l4390 125C  
                      l4366 1104                        l4358 10E4                        l4294 0FE4  
                      l4286 0FC4                        l4278 0FA4                        l4198 0E62  
                      ?_pad 000E                        l2936 3220                        l2928 31FA  
                      l2960 3544                        l2768 3540                        l2848 3288  
                      l2952 34E4                        l3496 24E2                        l3488 247C  
                      l3592 26AE                        l3584 2662                        l3576 2630  
                      l2696 2DEC                        l2688 2DC6                        l2792 2976  
                      l2784 2952                        l2776 2920                        l2880 2842  
                      l2872 27DA                        l2864 27C4                        l2856 27A4  
                      l2944 3300                        l4472 1696                        l4464 164C  
                      l4448 1460                        l4456 15EC                        l4392 1278  
                      l4384 1204                        l4376 11A8                        l4368 1158  
                      l4296 0FEC                        l4288 0FCC                        l2938 3226  
                      l2970 2AB2                        l2962 2A68                        l2954 34EC  
                      l3498 24EE                        l3594 26EA                        l3586 266E  
                      l3578 2646                        l2698 2DF2                        l2794 29A4  
                      l2786 295A                        l2778 2930                        l2890 28AE  
                      l2882 284C                        l2866 27C6                        l2874 2810  
                      l2858 27AC                        l2946 3320                        l4474 169C  
                      l4458 1616                        l4466 1654                        l4394 127A  
                      l4386 121A                        l4378 11BE                        l4298 0FF4  
                      l2980 2AF8                        l2972 2AC2                        l2964 2A80  
                      l2956 34F6                        l3596 26F6                        l3588 26A0  
                      l2796 29A8                        l2788 2966                        l2892 28B8  
                      l2884 2856                        l2876 2820                        l2868 27D2  
                      l4476 16C4                        l4468 165A                        l4396 128C  
                      l4388 1252                        l2990 2B42                        l2982 2B06  
                      l2974 2AD8                        l2966 2A96                        l2958 3500  
                      l3598 2704                        l2798 29AE                        l2886 2876  
                      l2878 2834                        l4398 12A2                        l2992 2B4C  
                      l2984 2B10                        l2976 2ADE                        l2968 2A9C  
                      l2896 28CC                        l2888 2896                        l2994 2B64  
                      l2986 2B28                        l2978 2AEE                        l4498 2802  
                      l2996 2B6E                        l2988 2B32                        l2998 3504  
              main@TestMode 011D                        STR_1 0E01                        STR_2 0E30  
                      STR_3 0E1B                        u3100 2D36                        u2300 2E60  
                      u3101 2D32                        u2301 2E5C                        u3110 2D4C  
                      u3030 2C9C                        u2310 2E92                        u3111 2D48  
                      u3031 2C98                        u2311 2E8E                        u3120 3454  
                      u3040 2CB2                        u2400 2F00                        u3200 1D1C  
                      u2320 33A0                        u3121 3450                        u3041 2CAE  
                      u2401 2EFC                        u3201 1D18                        u2321 339C  
                      u3130 31C0                        u3050 2CC8                        u2410 2F1A  
                      u3210 1D5E                        u2330 2D68                        u3131 31BC  
                      u3051 2CC4                        u2411 2F16                        u3211 1D5A  
                      u2331 2D64                        u3140 309A                        u3060 2CDE  
                      u2420 2F38                        u3300 1E90                        u3220 1D74  
                      u2340 2D82                        u2500 2914                        u3141 3096  
                      u3061 2CDA                        u2421 2F34                        u3301 1E8C  
                      u3221 1D70                        u2341 2D7E                        u2501 290E  
                      u3150 33B6                        u3070 2CF4                        u2430 2F4E  
                      u3310 1EAE                        u3230 1D86                        u2350 2DA8  
                      u2510 2916                        u3151 33B2                        u3071 2CF0  
                      u2431 2F4A                        u3311 1EAA                        u3231 1D82  
                      u2351 2DA4                        u3160 33D0                        u3080 2D0A  
                      u2440 2F72                        u3400 1FFE                        u3320 1ECE  
                      u3240 1D96                        u2360 2DC6                        u2280 2E2A  
                      u2520 2930                        u2600 2FB2                        u3161 33CC  
                      u3081 2D06                        u2441 2F6E                        u3401 1FFA  
                      u3321 1ECA                        u3241 1D92                        u2361 2DC2  
                      u2281 2E26                        u2521 292C                        u2601 2FAE  
                      u3170 3442                        u3090 2D20                        u3410 200E  
                      u3330 1EDC                        u3250 1DD2                        u2370 2DE2  
                      u2290 2E3A                        u2450 30CE                        u2530 2946  
                      u2610 3028                        u3171 343E                        u3091 2D1C  
                      u3411 200A                        u3331 1ED8                        u3251 1DCE  
                      u2371 2DDE                        u2291 2E36                        u2451 30CA  
                      u2531 2942                        u2611 3024                        u2620 3246  
                      u3500 20E2                        u3420 203A                        u3340 1EEC  
                      u3260 1DE0                        u3180 1CFA                        u2380 2E08  
                      u2460 30E8                        u2540 29E4                        u2700 2896  
                      u2621 3242                        u3501 20DE                        u3421 2036  
                      u3341 1EE8                        u3261 1DDC                        u3181 1CF6  
                      u2381 2E04                        u2461 30E4                        u2541 29E0  
                      u2701 2892                        u2630 325C                        u2390 2EE6  
                      u3510 211C                        u3430 204A                        u3350 1F1E  
                      u3270 1E4E                        u3190 1D0C                        u2470 312E  
                      u2550 29F6                        u2631 3258                        u5007 34DC  
                      u2391 2EE2                        u3511 2118                        u3431 2046  
                      u3351 1F1A                        u3271 1E4A                        u3191 1D08  
                      u2471 312A                        u2551 29F2                        u2720 31DC  
                      u2640 3272                        u3520 212E                        u3440 2066  
                      u3360 1F2C                        u3280 1E66                        u3600 221C  
                      u2480 313C                        u2560 2A06                        u2721 31D8  
                      u5017 3296                        u2641 326E                        u3521 212A  
                      u3441 2062                        u3361 1F28                        u3281 1E60  
                      u3601 2218                        u2481 3138                        u2561 2A02  
                      u2730 31FA                        u2650 3288                        u3530 213E  
                      u3450 2076                        u3370 1F4A                        u3290 1E68  
                      u3610 222E                        u2490 33EA                        u2570 2A20  
                      u2731 31F6                        u5027 353A                        u2651 3284  
                      u2715 34CA                        u3531 213A                        u3451 2072  
                      u3371 1F46                        u3611 222A                        u2491 33E6  
                      u2571 2A1C                        u2740 3216                        u2716 34CC  
                      u4500 17CC                        u3540 215E                        u3460 2088  
                      u3380 1F82                        u3700 24CE                        u3620 223E  
                      u2580 2A2E                        u2660 27A4                        u2741 3212  
                      u4501 17C8                        u3541 215A                        u3461 2084  
                      u3381 1F7E                        u3701 24CA                        u3621 223A  
                      u2581 2A2A                        u2661 27A0                        u4510 1828  
                      u3550 2170                        u3470 209E                        u3390 1FC8  
                      u3710 24E2                        u3630 2274                        u2590 2A3E  
                      u2670 2820                        u2750 3320                        u4511 1824  
                      u3551 216C                        u3471 209A                        u3391 1FC4  
                      u3711 24DE                        u3631 2270                        u2591 2A3A  
                      u2671 281C                        u2751 331C                        u4600 1A44  
                      u4520 1884                        u3560 218C                        u3480 20B4  
                      u3720 24FC                        u3640 2284                        u3800 2C3C  
                      u2680 2842                        u4601 1A40                        u4521 1880  
                      u3561 2188                        u3481 20B0                        u3721 24F8  
                      u3641 2280                        u3801 2C38                        u2681 283E  
                      u4610 1A60                        u4530 1908                        u3490 20C8  
                      u3730 2544                        u3650 23FE                        u3570 21BA  
                      u3810 2C5C                        u2690 2876                        u4611 1A5C  
                      u4531 1904                        u3491 20C4                        u3731 2540  
                      u3571 21B6                        u3811 2C58                        u2691 2872  
                      u4700 1BFC                        u4620 1A88                        u4540 1932  
                      u3740 2572                        u3660 2458                        u3580 21CC  
                      u3820 2C6C                        u3900 2722                        u4701 1BF8  
                      u4621 1A84                        u4541 192E                        u4461 16E2  
                      u3741 256E                        u3661 2454                        u3581 21C8  
                      u3821 2C68                        u3901 271E                        u4710 1C46  
                      u4630 1AA4                        u4550 194E                        u4470 16FC  
                      u3750 25AC                        u3670 2478                        u3590 21DC  
                      u3910 275C                        u3830 25DC                        u4711 1C42  
                      u4631 1AA0                        u4551 194A                        u4471 16F8  
                      u3751 25A8                        u3671 2474                        u3655 23F4  
                      u3591 21D8                        u3911 2758                        u3831 25D8  
                      u4720 1CA6                        u4640 1AC0                        u4560 1976  
                      u4480 173C                        u3680 248A                        u3760 2B9E  
                      u3920 276A                        u3840 25EA                        u4800 121A  
                      u4721 1CA2                        u4641 1ABC                        u4561 1972  
                      u4481 1738                        u3681 2486                        u3761 2B9A  
                      u3921 2766                        u3841 25E6                        u4801 1216  
                      u4650 1AFE                        u4570 1992                        u4490 1770  
                      u3690 24B8                        u3770 2BD2                        u3850 2646  
                      u4810 1278                        u4730 1180                        u4651 1AFA  
                      u4571 198E                        u4491 176C                        u3691 24B4  
                      u3851 2642                        u4811 1274                        u4731 117C  
                      u4660 1B60                        u4580 19B8                        u3780 2C00  
                      u3860 269C                        u4820 128C                        u4740 1192  
                      u4661 1B5C                        u4581 19B4                        u3781 2BFC  
                      u3861 2698                        u4821 1288                        u4741 118E  
                      u4670 1B7C                        u4590 19F2                        u3790 2C14  
                      u3870 26E6                        u4830 12A2                        u4750 11A8  
                      u4671 1B78                        u4591 19EE                        u3791 2C10  
                      u3775 2BC8                        u3871 26E2                        u4831 129E  
                      u4751 11A4                        u4680 1BB2                        u3880 2704  
                      u4840 12B8                        u4760 11BE                        u4681 1BAE  
                      u3881 2700                        u4841 12B4                        u4761 11BA  
                      u4690 1BCE                        u3890 2714                        u4850 1310  
                      u4770 11D4                        u4907 2A8A                        u4691 1BCA  
                      u3891 2710                        u4851 130C                        u4771 11D0  
                      u4860 1340                        u4780 11EE                        u4917 2AA2  
                      u4861 133C                        u4781 11EA                        u4870 13D2  
                      u4790 1204                        u4927 2AB8                        u4871 13CE  
                      u4791 1200                        u4880 13EE                        u4937 2ACE  
                      u4881 13EA                        u4890 1616                        u4947 2AE4  
                      u4891 1612                        u4957 2AFA                        u4967 2B1A  
                      u4977 2B38                        u4987 2B56                        u4997 2B78  
                      abs@a 0007                        _dbuf 0060                        _main 0E46  
                      _dtoa 2900                        _prec 005B                        pad@i 0013  
                      pad@p 0010                        fsr1h 0FE2                        fsr2h 0FDA  
                      indf1 0FE7                        indf2 0FDF                        fsr1l 0FE1  
                      fsr2l 0FD9                        btemp 005E                ?_LCD_setline 0001  
                      prodh 0FF4                        prodl 0FF3                        start 0030  
          __end_of_ADC_init 351E         main@light_threshold 011F             __end_of_HighISR 0030  
              ___param_bank 0000         __end_of_ArrayAppend 31C2                       ??_abs 0009  
                     ??_pad 0012                main@daycount 011B            __end_of_LCD_Init 2B88  
             ___fltol@sign1 0040             __end_of___fladd 21A0                       ?_main 0001  
                     ?_dtoa 0015                       _ADPCH 0F5F             __end_of___awdiv 2E1A  
           __end_of___awmod 2F84             __end_of___flmul 25CA             __end_of___fltol 2C8E  
           ___awdiv@divisor 0003             __end_of___lwdiv 3236                       i2l109 002C  
           ___awdiv@counter 0005                vfpfcnvrt@fmt 0021                       _TMR0H 0FD4  
                     _TMR0L 0FD3                       _flags 005D         read_prec_or_width@c 0009  
       read_prec_or_width@n 000A                       _fputc 2E1A                       _fputs 3366  
                     pad@fp 000E                       _width 0059                       _putch 3552  
                     main@i 0127                       dtoa@d 0016                       dtoa@i 001E  
                     dtoa@p 001A                       dtoa@s 001D                       dtoa@w 001B  
             ?_LCD_sendbyte 0002        main@avgSolarMidnight 0121                       tablat 0FF5  
                     plusw1 0FE3                       plusw2 0FDB                       ttemp5 005F  
                     ttemp6 0062                       ttemp7 0066                       status 0FD8  
                     wtemp8 005F             __end_of_sprintf 3366             __initialization 329E  
           ArrayAppend@Time 0005                __end_of_main 16D8                __end_of_dtoa 2A68  
           ArrayAppend@size 0003        __end_of_ArrayAverage 30C0           __end_of_LCD_E_TOG 3544  
                    ??_main 0047                      ??_dtoa 0018               __activetblptr 0003  
           ArrayAverage@sum 0011  __end_of_read_prec_or_width 3032                      ?_fputc 0001  
                    ?_fputs 0009                      _ADRESH 0F64              ??_LCD_sendbyte 0003  
          ___awdiv@dividend 0001                      ?_putch 0001            UpdateClock@hours 000D  
                    i2l3920 0028                      i2l3914 000A                      i2l3916 001A  
                    i2l3918 0022            UpdateClock@years 0015               vfpfcnvrt@done 0029  
                 ??_HighISR 0001            __end_of___xxtofl 277E                 _ArrayAppend 314A  
         _LEDarray_disp_bin 2C8E          ?_LEDarray_disp_bin 0001                ??_ADC_getval 0003  
             ??_Timer0_init 0001                vfprintf@cfmt 002E                   ??___fladd 0030  
                    ___wmul 3474                   ??___awdiv 0005                   ??___awmod 0005  
                 ??___flmul 0017                   ??___fltol 003C                   ??___lwdiv 0005  
      read_prec_or_width@ap 0008         ??_LEDarray_disp_bin 0003                      clear_0 32CE  
          ___awdiv@quotient 0007             ___awmod@divisor 0003               main@operation 0123  
                    _ticker 01E3                      isa$std 0001             ___awmod@counter 0005  
                    pad@buf 000F                      dtoa@fp 0015                      fputc@c 0001  
                    fputs@c 000B                      fputs@i 000C                      fputs@s 0009  
              __mediumconst 0000      main@knownSolarMidnight 0114                      tblptrh 0FF7  
                    tblptrl 0FF6                      tblptru 0FF8                   ?_ADC_init 0001  
                    putch@c 0001            __end_of_vfprintf 332A                   ??_sprintf 003A  
        __end_of_ADC_getval 3474                ___xxtofl@arg 000B                ___xxtofl@exp 000A  
 __end_of_LEDarray_disp_bin 2D56                ___xxtofl@val 0001                  __accesstop 0060  
             ??_UpdateClock 001B     __end_of__initialization 32DE                   ?_LCD_Init 0001  
             ___rparam_used 0001                  ___fltol@f1 0038               _LEDarray_init 349A  
           _Interrupts_init 3544              __pcstackCOMRAM 0001                __pidataBANK0 351E  
             __end_of_fputc 2ED4               __end_of_fputs 33A2               __end_of_putch 3554  
       __end_of_Timer0_init 3504                  ??_ADC_init 0001                     ??_fputc 0004  
                   ??_fputs 000B                     ??_putch 0001           UpdateClock@F14155 0080  
                __pbssBANK0 0060                  __pbssBANK1 01E1         UpdateClock@DSTstate 0017  
                ??_LCD_Init 0004              _LCD_sendnibble 3236       ArrayAverage@arrayTime 0008  
          ArrayAverage@size 000A              ?_LEDarray_init 0001              _LCD_sendstring 3410  
       __end_of_UpdateClock 1CE0                     ?___wmul 0001        __end_of_LCD_sendbyte 34E4  
                 ?___xxtofl 0001           UpdateClock@ticker 0007           UpdateClock@months 0013  
    __end_of_LCD_sendnibble 329E                _ArrayAverage 3032         UpdateClock@TestMode 0019  
   __end_of_Interrupts_init 3552                     _HighISR 0008      __end_of_LCD_sendstring 3444  
      ArrayAppend@arrayTime 0001                   _ADREFbits 0F58                     __Hparam 0000  
                   __Lparam 0000                 _Timer0_init 34E4                     ___fladd 1CE0  
                   ___awdiv 2D56                     ___awmod 2ED4                     ___flmul 21A0  
            main@hours_temp 0125                     ___fltol 2B88                     ___lwdiv 31C2  
                 ?_vfprintf 002B                __psmallconst 0E00                     __pcinit 329E  
                   __ramtop 0E00                     __ptext0 0E46                     __ptext1 332A  
                   __ptext2 32E8                     __ptext3 277E                     __ptext4 2F84  
                   __ptext5 3474                     __ptext6 2900                     __ptext7 30C0  
                   __ptext8 3366                     __ptext9 2E1A       read_prec_or_width@fmt 0007  
                ??___xxtofl 0005            ___awmod@dividend 0001                   _LCD_E_TOG 3536  
           LCD_setline@line 0004                     _sprintf 332A        end_of_initialization 32DE  
           ?_LCD_sendnibble 0001            ADC_getval@tmpval 0003                     fputc@fp 0003  
           ??_LEDarray_init 0001                     fputs@fp 000A                 _UpdateClock 16D8  
           ?_LCD_sendstring 0004                ?_ArrayAppend 0001          _read_prec_or_width 2F84  
         __end_of_vfpfcnvrt 2900                     postdec1 0FE5                     postdec2 0FDD  
       ?_read_prec_or_width 0007                     postinc0 0FEE                     postinc1 0FE6  
                   postinc2 0FDE            vfpfcnvrt@convarg 0025                  ??_vfprintf 002E  
         main@SolarMidnight 0129           main@SolarPerMonth 0189                 ___fladd@grs 0037  
             ___xxtofl@sign 0009                  ?_LCD_E_TOG 0001                   _TRISAbits 0F81  
                 _TRISBbits 0F82                   _TRISCbits 0F83                   _TRISDbits 0F84  
                 _TRISEbits 0F85                   _TRISFbits 0F86                   _TRISGbits 0F87  
                 _TRISHbits 0F88        ??_read_prec_or_width 0009       main@previousClockDays 0118  
               _CM1CON0bits 0ED0                 _CM1CON1bits 0ED1            ?_Interrupts_init 0001  
               ___flmul@grs 001C                  main@buffer 0100                 vfpfcnvrt@ap 0022  
               vfpfcnvrt@cp 002A                 vfpfcnvrt@fp 0020              __end_of___wmul 349A  
      LCD_sendnibble@number 0001         start_initialization 329E                 __end_of_abs 3410  
               __end_of_pad 314A                _LCD_sendbyte 34C0         ArrayAverage@average 000F  
           UpdateClock@days 000F               ??_LCD_setline 0004                 vfprintf@fmt 002C  
      LCD_sendstring@string 0004                    ??___wmul 0005                 __pdataBANK0 0080  
                 ___fladd@a 002C                   ___fladd@b 0028                   ___flmul@a 0013  
                 ___flmul@b 000F                 __pbssCOMRAM 0059                 ??_LCD_E_TOG 0001  
             __pcstackBANK1 0100                    ?_HighISR 0001            main@minutes_temp 0112  
          ___lwdiv@dividend 0001                   _dtoa$1936 0018                ?_Timer0_init 0001  
                 __pintcode 0008                    ?___fladd 0028                    ?___awdiv 0001  
                  ?___awmod 0001                    ?___flmul 000F                    ?___fltol 0038  
       __end_of_LCD_setline 33DC                    ?___lwdiv 0001                 __smallconst 0E00  
          ??_LCD_sendnibble 0001                    _ADC_init 3504            ___lwdiv@quotient 0005  
          ??_LCD_sendstring 0006                    ?_sprintf 002F            LCD_sendbyte@Byte 0003  
                  _LCD_Init 2A68            LCD_sendbyte@type 0002                ?_UpdateClock 0007  
            ___wmul@product 0005                    _LATAbits 0F79          UpdateClock@minutes 000B  
        UpdateClock@seconds 0009                    _LATBbits 0F7A                    _LATCbits 0F7B  
                  _LATDbits 0F7C                    _LATEbits 0F7D                    _LATFbits 0F7E  
                  _LATGbits 0F7F                    _LATHbits 0F80                    _IPR0bits 0E1F  
                  _PIE0bits 0E29                    i2u410_40 001A                    i2u410_41 0016  
                  _PIR0bits 0E33                   _vfpfcnvrt 277E                  _ADCON0bits 0F60  
         ___wmul@multiplier 0001                   main@clock 01D1      UpdateClock@DaysInMonth 0021  
                _CM1NCHbits 0ED2                  _CM1PCHbits 0ED3                   copy_data0 32B2  
             ArrayAverage@i 0013       __end_of_LEDarray_init 34C0              UpdateClock@DoW 0011  
               _LCD_setline 33A2                    __Hrparam 0000                  _ADC_getval 3444  
                vfprintf@ap 002D                    __Lrparam 0000                  vfprintf@fp 002B  
                ?_vfpfcnvrt 0020                  _ANSELAbits 0E92             main@minute_diff 0116  
                sprintf@fmt 0031                    ___xxtofl 25CA                  _T0CON0bits 0FD5  
                _T0CON1bits 0FD6                    _main$298 011A             ___lwdiv@divisor 0003  
           ___lwdiv@counter 0007                    __ptext10 3552                    __ptext11 33DC  
                  __ptext20 349A                    __ptext12 2D56                    __ptext21 2C8E  
                  __ptext13 25CA                    __ptext30 31C2                    __ptext22 33A2  
                  __ptext14 2B88                    __ptext31 314A                    __ptext23 3410  
                  __ptext15 21A0                    __ptext32 3504                    __ptext24 2A68  
                  __ptext16 1CE0                    __ptext33 3444                    __ptext25 34C0  
                  __ptext17 16D8                    __ptext26 3236                    __ptext18 2ED4  
                  __ptext27 3536                    __ptext19 34E4                    __ptext28 3544  
                  __ptext29 3032     LEDarray_disp_bin@number 0001                  _GLOBALsecs 01E1  
                  isa$xinst 0000                    int$flags 005E                    main@Dawn 0169  
                  main@Dusk 0149                    _vfprintf 32E8                ArrayAppend@i 000A  
                _INTCONbits 0FF2               ?_ArrayAverage 0008                    intlevel2 0000  
                 sprintf@ap 003A                _DAC1CON0bits 0EC6                _DAC1CON1bits 0EC7  
               ?_ADC_getval 0001                 ??_vfpfcnvrt 0023                    sprintf@f 003B  
                  sprintf@s 002F               ___fladd@signs 0034              ??_ArrayAverage 000C  
              ___fladd@aexp 0035                ___fladd@bexp 0036               ??_ArrayAppend 0007  
>>>>>>> Stashed changes
