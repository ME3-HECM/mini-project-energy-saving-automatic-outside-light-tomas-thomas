

Microchip MPLAB XC8 Assembler V2.45 build 20230818022343 
                                                                                               Fri Feb 09 02:58:18 2024

Microchip MPLAB XC8 C Compiler v2.45 (Free license) build 20230818022343 Og1 
     1                           	processor	18F67K40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1,group=3
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=2
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=3
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=3
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=3
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=3
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=2
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=2
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=2
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=2
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=2
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=2
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1,group=2
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    49                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    50                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    51                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    52                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    53   000000                     
    54                           ; Generated 21/07/2023 GMT
    55                           ; 
    56                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    57                           ; All rights reserved.
    58                           ; 
    59                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    60                           ; 
    61                           ; Redistribution and use in source and binary forms, with or without modification, are
    62                           ; permitted provided that the following conditions are met:
    63                           ; 
    64                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    65                           ;        conditions and the following disclaimer.
    66                           ; 
    67                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    68                           ;        of conditions and the following disclaimer in the documentation and/or other
    69                           ;        materials provided with the distribution. Publication is not required when
    70                           ;        this file is used in an embedded application.
    71                           ; 
    72                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    73                           ;        software without specific prior written permission.
    74                           ; 
    75                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    76                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    77                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    78                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    79                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    80                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    81                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    82                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    83                           ; 
    84                           ; 
    85                           ; Code-generator required, PIC18F67K40 Definitions
    86                           ; 
    87                           ; SFR Addresses
    88   000000                     
    89                           	psect	idataBANK0
    90   0033D8                     __pidataBANK0:
    91                           	callstack 0
    92                           
    93                           ;initializer for UpdateClock@F14152
    94   0033D8  001F               	dw	31
    95   0033DA  001C               	dw	28
    96   0033DC  001F               	dw	31
    97   0033DE  001E               	dw	30
    98   0033E0  001F               	dw	31
    99   0033E2  001E               	dw	30
   100   0033E4  001F               	dw	31
   101   0033E6  001F               	dw	31
   102   0033E8  001E               	dw	30
   103   0033EA  001F               	dw	31
   104   0033EC  001E               	dw	30
   105   0033EE  001F               	dw	31
   106   000000                     _TRISCbits	set	3971
   107   000000                     _TRISEbits	set	3973
   108   000000                     _LATEbits	set	3965
   109   000000                     _LATCbits	set	3963
   110   000000                     _T0CON0bits	set	4053
   111   000000                     _T0CON1bits	set	4054
   112   000000                     _CM1CON1bits	set	3793
   113   000000                     _LATBbits	set	3962
   114   000000                     _TRISBbits	set	3970
   115   000000                     _LATFbits	set	3966
   116   000000                     _TRISFbits	set	3974
   117   000000                     _LATGbits	set	3967
   118   000000                     _TRISGbits	set	3975
   119   000000                     _TRISAbits	set	3969
   120   000000                     _LATHbits	set	3968
   121   000000                     _TRISHbits	set	3976
   122   000000                     _IPR0bits	set	3615
   123   000000                     _PIE0bits	set	3625
   124   000000                     _ANSELAbits	set	3730
   125   000000                     _LATDbits	set	3964
   126   000000                     _TRISDbits	set	3972
   127   000000                     _TMR0L	set	4051
   128   000000                     _TMR0H	set	4052
   129   000000                     _INTCONbits	set	4082
   130   000000                     _DAC1CON0bits	set	3782
   131   000000                     _ADREFbits	set	3928
   132   000000                     _ADPCH	set	3935
   133   000000                     _ADRESH	set	3940
   134   000000                     _ADCON0bits	set	3936
   135   000000                     _LATAbits	set	3961
   136   000000                     _CM1CON0bits	set	3792
   137   000000                     _CM1NCHbits	set	3794
   138   000000                     _DAC1CON1bits	set	3783
   139   000000                     _CM1PCHbits	set	3795
   140   000000                     _PIR0bits	set	3635
   141                           
   142                           	psect	smallconst
   143   000E00                     __psmallconst:
   144                           	callstack 0
   145   000E00  00                 	db	0
   146   000E01                     STR_1:
   147                           
   148                           ; BSR set to: 14
   149   000E01  54                 	db	84	;'T'
   150   000E02  69                 	db	105	;'i'
   151   000E03  6D                 	db	109	;'m'
   152   000E04  65                 	db	101	;'e'
   153   000E05  3A                 	db	58	;':'
   154   000E06  25                 	db	37
   155   000E07  30                 	db	48	;'0'
   156   000E08  32                 	db	50	;'2'
   157   000E09  64                 	db	100	;'d'
   158   000E0A  3A                 	db	58	;':'
   159   000E0B  25                 	db	37
   160   000E0C  30                 	db	48	;'0'
   161   000E0D  32                 	db	50	;'2'
   162   000E0E  64                 	db	100	;'d'
   163   000E0F  3A                 	db	58	;':'
   164   000E10  25                 	db	37
   165   000E11  30                 	db	48	;'0'
   166   000E12  32                 	db	50	;'2'
   167   000E13  64                 	db	100	;'d'
   168   000E14  20                 	db	32
   169   000E15  44                 	db	68	;'D'
   170   000E16  25                 	db	37
   171   000E17  30                 	db	48	;'0'
   172   000E18  31                 	db	49	;'1'
   173   000E19  64                 	db	100	;'d'
   174   000E1A  00                 	db	0
   175   000E1B                     
   176                           ; BSR set to: 14
   177   000E1B  54                 	db	84	;'T'
   178   000E1C  69                 	db	105	;'i'
   179   000E1D  6D                 	db	109	;'m'
   180   000E1E  65                 	db	101	;'e'
   181   000E1F  3A                 	db	58	;':'
   182   000E20  20                 	db	32
   183   000E21  25                 	db	37
   184   000E22  30                 	db	48	;'0'
   185   000E23  32                 	db	50	;'2'
   186   000E24  64                 	db	100	;'d'
   187   000E25  3A                 	db	58	;':'
   188   000E26  25                 	db	37
   189   000E27  30                 	db	48	;'0'
   190   000E28  32                 	db	50	;'2'
   191   000E29  64                 	db	100	;'d'
   192   000E2A  3A                 	db	58	;':'
   193   000E2B  25                 	db	37
   194   000E2C  30                 	db	48	;'0'
   195   000E2D  34                 	db	52	;'4'
   196   000E2E  64                 	db	100	;'d'
   197   000E2F  00                 	db	0
   198   000E30                     STR_2:
   199                           
   200                           ; BSR set to: 14
   201   000E30  44                 	db	68	;'D'
   202   000E31  61                 	db	97	;'a'
   203   000E32  74                 	db	116	;'t'
   204   000E33  65                 	db	101	;'e'
   205   000E34  3A                 	db	58	;':'
   206   000E35  25                 	db	37
   207   000E36  30                 	db	48	;'0'
   208   000E37  32                 	db	50	;'2'
   209   000E38  64                 	db	100	;'d'
   210   000E39  2F                 	db	47
   211   000E3A  25                 	db	37
   212   000E3B  30                 	db	48	;'0'
   213   000E3C  32                 	db	50	;'2'
   214   000E3D  64                 	db	100	;'d'
   215   000E3E  2F                 	db	47
   216   000E3F  25                 	db	37
   217   000E40  30                 	db	48	;'0'
   218   000E41  34                 	db	52	;'4'
   219   000E42  64                 	db	100	;'d'
   220   000E43  00                 	db	0
   221   000E44  00                 	db	0	; dummy byte at the end
   222   000000                     
   223                           ; #config settings
   224                           
   225                           	psect	cinit
   226   00315C                     __pcinit:
   227                           	callstack 0
   228   00315C                     start_initialization:
   229                           	callstack 0
   230   00315C                     __initialization:
   231                           	callstack 0
   232                           
   233                           ; Initialize objects allocated to BANK0 (24 bytes)
   234                           ; load TBLPTR registers with __pidataBANK0
   235   00315C  0ED8               	movlw	low __pidataBANK0
   236   00315E  6EF6               	movwf	tblptrl,c
   237   003160  0E33               	movlw	high __pidataBANK0
   238   003162  6EF7               	movwf	tblptrh,c
   239   003164  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   240   003166  6EF8               	movwf	tblptru,c
   241   003168  EE00  F080         	lfsr	0,__pdataBANK0
   242   00316C  EE10 F018          	lfsr	1,24
   243   003170                     copy_data0:
   244   003170  0009               	tblrd		*+
   245   003172  CFF5 FFEE          	movff	tablat,postinc0
   246   003176  50E5               	movf	postdec1,w,c
   247   003178  50E1               	movf	fsr1l,w,c
   248   00317A  E1FA               	bnz	copy_data0
   249                           
   250                           ; Clear objects allocated to BANK1 (2 bytes)
   251   00317C  0101               	movlb	1
   252   00317E  6BE2               	clrf	(__pbssBANK1+1)& (0+255),b
   253   003180  6BE1               	clrf	__pbssBANK1& (0+255),b
   254                           
   255                           ; Clear objects allocated to BANK0 (32 bytes)
   256   003182  EE00  F060         	lfsr	0,__pbssBANK0
   257   003186  0E20               	movlw	32
   258   003188                     clear_0:
   259   003188  6AEE               	clrf	postinc0,c
   260   00318A  06E8               	decf	wreg,f,c
   261   00318C  E1FD               	bnz	clear_0
   262                           
   263                           ; Clear objects allocated to COMRAM (5 bytes)
   264   00318E  6A5D               	clrf	(__pbssCOMRAM+4)& (0+255),c
   265   003190  6A5C               	clrf	(__pbssCOMRAM+3)& (0+255),c
   266   003192  6A5B               	clrf	(__pbssCOMRAM+2)& (0+255),c
   267   003194  6A5A               	clrf	(__pbssCOMRAM+1)& (0+255),c
   268   003196  6A59               	clrf	__pbssCOMRAM& (0+255),c
   269   003198                     end_of_initialization:
   270                           	callstack 0
   271   003198                     __end_of__initialization:
   272                           	callstack 0
   273   003198  905E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   274   00319A  925E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   275   00319C  0100               	movlb	0
   276   00319E  EF23  F007         	goto	_main	;jump to C main() function
   277                           
   278                           	psect	bssCOMRAM
   279   000059                     __pbssCOMRAM:
   280                           	callstack 0
   281   000059                     _width:
   282                           	callstack 0
   283   000059                     	ds	2
   284   00005B                     _prec:
   285                           	callstack 0
   286   00005B                     	ds	2
   287   00005D                     _flags:
   288                           	callstack 0
   289   00005D                     	ds	1
   290                           
   291                           	psect	bssBANK0
   292   000060                     __pbssBANK0:
   293                           	callstack 0
   294   000060                     _dbuf:
   295                           	callstack 0
   296   000060                     	ds	32
   297                           
   298                           	psect	dataBANK0
   299   000080                     __pdataBANK0:
   300                           	callstack 0
   301   000080                     UpdateClock@F14152:
   302                           	callstack 0
   303   000080                     	ds	24
   304                           
   305                           	psect	bssBANK1
   306   0001E1                     __pbssBANK1:
   307                           	callstack 0
   308   0001E1                     _GLOBALsecs:
   309                           	callstack 0
   310   0001E1                     	ds	2
   311                           
   312                           	psect	cstackBANK1
   313   000100                     __pcstackBANK1:
   314                           	callstack 0
   315   000100                     main@buffer:
   316                           	callstack 0
   317                           
   318                           ; 18 bytes @ 0x0
   319   000100                     	ds	18
   320   000112                     main@minutes_temp:
   321                           	callstack 0
   322                           
   323                           ; 2 bytes @ 0x12
   324   000112                     	ds	2
   325   000114                     main@knownSolarMidnight:
   326                           	callstack 0
   327                           
   328                           ; 2 bytes @ 0x14
   329   000114                     	ds	2
   330   000116                     main@avgSolarMidnight:
   331                           	callstack 0
   332                           
   333                           ; 2 bytes @ 0x16
   334   000116                     	ds	2
   335   000118                     main@minute_diff:
   336                           	callstack 0
   337                           
   338                           ; 2 bytes @ 0x18
   339   000118                     	ds	2
   340   00011A                     main@previousClockDays:
   341                           	callstack 0
   342                           
   343                           ; 2 bytes @ 0x1A
   344   00011A                     	ds	2
   345   00011C                     _main$297:
   346                           	callstack 0
   347                           
   348                           ; 1 bytes @ 0x1C
   349   00011C                     	ds	1
   350   00011D                     main@daycount:
   351                           	callstack 0
   352                           
   353                           ; 2 bytes @ 0x1D
   354   00011D                     	ds	2
   355   00011F                     main@light_threshold:
   356                           	callstack 0
   357                           
   358                           ; 2 bytes @ 0x1F
   359   00011F                     	ds	2
   360   000121                     main@operation:
   361                           	callstack 0
   362                           
   363                           ; 2 bytes @ 0x21
   364   000121                     	ds	2
   365   000123                     main@TestMode:
   366                           	callstack 0
   367                           
   368                           ; 2 bytes @ 0x23
   369   000123                     	ds	2
   370   000125                     main@hours_temp:
   371                           	callstack 0
   372                           
   373                           ; 2 bytes @ 0x25
   374   000125                     	ds	2
   375   000127                     main@i:
   376                           	callstack 0
   377                           
   378                           ; 2 bytes @ 0x27
   379   000127                     	ds	2
   380   000129                     main@SolarMidnight:
   381                           	callstack 0
   382                           
   383                           ; 32 bytes @ 0x29
   384   000129                     	ds	32
   385   000149                     main@Dusk:
   386                           	callstack 0
   387                           
   388                           ; 32 bytes @ 0x49
   389   000149                     	ds	32
   390   000169                     main@Dawn:
   391                           	callstack 0
   392                           
   393                           ; 32 bytes @ 0x69
   394   000169                     	ds	32
   395   000189                     main@SolarPerMonth:
   396                           	callstack 0
   397                           
   398                           ; 72 bytes @ 0x89
   399   000189                     	ds	72
   400   0001D1                     main@clock:
   401                           	callstack 0
   402                           
   403                           ; 16 bytes @ 0xD1
   404   0001D1                     	ds	16
   405                           
   406                           	psect	cstackCOMRAM
   407   000001                     __pcstackCOMRAM:
   408                           	callstack 0
   409   000001                     ?_ADC_getval:
   410                           	callstack 0
   411   000001                     ?___wmul:
   412                           	callstack 0
   413   000001                     ?___awdiv:
   414                           	callstack 0
   415   000001                     ?___awmod:
   416                           	callstack 0
   417   000001                     ?___lwdiv:
   418                           	callstack 0
   419   000001                     ?___xxtofl:
   420                           	callstack 0
   421   000001                     LCD_sendnibble@number:
   422                           	callstack 0
   423   000001                     LEDarray_disp_bin@number:
   424                           	callstack 0
   425   000001                     ArrayAppend@arrayTime:
   426                           	callstack 0
   427   000001                     ___wmul@multiplier:
   428                           	callstack 0
   429   000001                     ___awdiv@dividend:
   430                           	callstack 0
   431   000001                     ___awmod@dividend:
   432                           	callstack 0
   433   000001                     ___lwdiv@dividend:
   434                           	callstack 0
   435   000001                     fputc@c:
   436                           	callstack 0
   437   000001                     ___xxtofl@val:
   438                           	callstack 0
   439                           
   440                           ; 4 bytes @ 0x0
   441   000001                     	ds	1
   442   000002                     LCD_sendbyte@type:
   443                           	callstack 0
   444                           
   445                           ; 1 bytes @ 0x1
   446   000002                     	ds	1
   447   000003                     LCD_sendbyte@Byte:
   448                           	callstack 0
   449   000003                     fputc@fp:
   450                           	callstack 0
   451   000003                     ADC_getval@tmpval:
   452                           	callstack 0
   453   000003                     ArrayAppend@size:
   454                           	callstack 0
   455   000003                     ___wmul@multiplicand:
   456                           	callstack 0
   457   000003                     ___awdiv@divisor:
   458                           	callstack 0
   459   000003                     ___awmod@divisor:
   460                           	callstack 0
   461   000003                     ___lwdiv@divisor:
   462                           	callstack 0
   463                           
   464                           ; 2 bytes @ 0x2
   465   000003                     	ds	1
   466   000004                     ??_LCD_Init:
   467   000004                     ??_fputc:
   468   000004                     LCD_setline@line:
   469                           	callstack 0
   470   000004                     LCD_sendstring@string:
   471                           	callstack 0
   472                           
   473                           ; 2 bytes @ 0x3
   474   000004                     	ds	1
   475   000005                     ??___xxtofl:
   476   000005                     ___awdiv@counter:
   477                           	callstack 0
   478   000005                     ___awmod@counter:
   479                           	callstack 0
   480   000005                     ArrayAppend@Time:
   481                           	callstack 0
   482   000005                     ___wmul@product:
   483                           	callstack 0
   484   000005                     ___lwdiv@quotient:
   485                           	callstack 0
   486                           
   487                           ; 2 bytes @ 0x4
   488   000005                     	ds	1
   489   000006                     ___awdiv@sign:
   490                           	callstack 0
   491   000006                     ___awmod@sign:
   492                           	callstack 0
   493                           
   494                           ; 1 bytes @ 0x5
   495   000006                     	ds	1
   496   000007                     ??_ArrayAppend:
   497   000007                     ?_abs:
   498                           	callstack 0
   499   000007                     ?_read_prec_or_width:
   500                           	callstack 0
   501   000007                     ___lwdiv@counter:
   502                           	callstack 0
   503   000007                     read_prec_or_width@fmt:
   504                           	callstack 0
   505   000007                     UpdateClock@seconds:
   506                           	callstack 0
   507   000007                     ___awdiv@quotient:
   508                           	callstack 0
   509   000007                     abs@a:
   510                           	callstack 0
   511                           
   512                           ; 2 bytes @ 0x6
   513   000007                     	ds	1
   514   000008                     ?_ArrayAverage:
   515                           	callstack 0
   516   000008                     read_prec_or_width@ap:
   517                           	callstack 0
   518   000008                     ArrayAverage@arrayTime:
   519                           	callstack 0
   520                           
   521                           ; 2 bytes @ 0x7
   522   000008                     	ds	1
   523   000009                     ??_abs:
   524   000009                     ___xxtofl@sign:
   525                           	callstack 0
   526   000009                     read_prec_or_width@c:
   527                           	callstack 0
   528   000009                     fputs@s:
   529                           	callstack 0
   530   000009                     UpdateClock@minutes:
   531                           	callstack 0
   532                           
   533                           ; 2 bytes @ 0x8
   534   000009                     	ds	1
   535   00000A                     ___xxtofl@exp:
   536                           	callstack 0
   537   00000A                     fputs@fp:
   538                           	callstack 0
   539   00000A                     ArrayAppend@i:
   540                           	callstack 0
   541   00000A                     ArrayAverage@size:
   542                           	callstack 0
   543   00000A                     read_prec_or_width@n:
   544                           	callstack 0
   545                           
   546                           ; 2 bytes @ 0x9
   547   00000A                     	ds	1
   548   00000B                     fputs@c:
   549                           	callstack 0
   550   00000B                     UpdateClock@hours:
   551                           	callstack 0
   552   00000B                     ___xxtofl@arg:
   553                           	callstack 0
   554                           
   555                           ; 4 bytes @ 0xA
   556   00000B                     	ds	1
   557   00000C                     ??_ArrayAverage:
   558   00000C                     fputs@i:
   559                           	callstack 0
   560                           
   561                           ; 2 bytes @ 0xB
   562   00000C                     	ds	1
   563   00000D                     UpdateClock@days:
   564                           	callstack 0
   565                           
   566                           ; 2 bytes @ 0xC
   567   00000D                     	ds	1
   568   00000E                     pad@fp:
   569                           	callstack 0
   570                           
   571                           ; 1 bytes @ 0xD
   572   00000E                     	ds	1
   573   00000F                     ?___flmul:
   574                           	callstack 0
   575   00000F                     pad@buf:
   576                           	callstack 0
   577   00000F                     UpdateClock@DoW:
   578                           	callstack 0
   579   00000F                     ArrayAverage@average:
   580                           	callstack 0
   581   00000F                     ___flmul@b:
   582                           	callstack 0
   583                           
   584                           ; 4 bytes @ 0xE
   585   00000F                     	ds	1
   586   000010                     pad@p:
   587                           	callstack 0
   588                           
   589                           ; 2 bytes @ 0xF
   590   000010                     	ds	1
   591   000011                     UpdateClock@months:
   592                           	callstack 0
   593   000011                     ArrayAverage@sum:
   594                           	callstack 0
   595                           
   596                           ; 2 bytes @ 0x10
   597   000011                     	ds	1
   598   000012                     ??_pad:
   599                           
   600                           ; 1 bytes @ 0x11
   601   000012                     	ds	1
   602   000013                     UpdateClock@years:
   603                           	callstack 0
   604   000013                     ArrayAverage@i:
   605                           	callstack 0
   606   000013                     pad@i:
   607                           	callstack 0
   608   000013                     ___flmul@a:
   609                           	callstack 0
   610                           
   611                           ; 4 bytes @ 0x12
   612   000013                     	ds	2
   613   000015                     dtoa@fp:
   614                           	callstack 0
   615   000015                     UpdateClock@DSTstate:
   616                           	callstack 0
   617                           
   618                           ; 2 bytes @ 0x14
   619   000015                     	ds	1
   620   000016                     dtoa@d:
   621                           	callstack 0
   622                           
   623                           ; 2 bytes @ 0x15
   624   000016                     	ds	1
   625   000017                     ??___flmul:
   626   000017                     UpdateClock@TestMode:
   627                           	callstack 0
   628                           
   629                           ; 2 bytes @ 0x16
   630   000017                     	ds	1
   631   000018                     _dtoa$1930:
   632                           	callstack 0
   633                           
   634                           ; 2 bytes @ 0x17
   635   000018                     	ds	1
   636   000019                     ??_UpdateClock:
   637                           
   638                           ; 1 bytes @ 0x18
   639   000019                     	ds	1
   640   00001A                     dtoa@p:
   641                           	callstack 0
   642                           
   643                           ; 1 bytes @ 0x19
   644   00001A                     	ds	1
   645   00001B                     ___flmul@sign:
   646                           	callstack 0
   647   00001B                     dtoa@w:
   648                           	callstack 0
   649                           
   650                           ; 2 bytes @ 0x1A
   651   00001B                     	ds	1
   652   00001C                     ___flmul@grs:
   653                           	callstack 0
   654                           
   655                           ; 4 bytes @ 0x1B
   656   00001C                     	ds	1
   657   00001D                     dtoa@s:
   658                           	callstack 0
   659                           
   660                           ; 1 bytes @ 0x1C
   661   00001D                     	ds	1
   662   00001E                     dtoa@i:
   663                           	callstack 0
   664                           
   665                           ; 2 bytes @ 0x1D
   666   00001E                     	ds	1
   667   00001F                     UpdateClock@DaysInMonth:
   668                           	callstack 0
   669                           
   670                           ; 24 bytes @ 0x1E
   671   00001F                     	ds	1
   672   000020                     ___flmul@aexp:
   673                           	callstack 0
   674   000020                     vfpfcnvrt@fp:
   675                           	callstack 0
   676                           
   677                           ; 1 bytes @ 0x1F
   678   000020                     	ds	1
   679   000021                     ___flmul@bexp:
   680                           	callstack 0
   681   000021                     vfpfcnvrt@fmt:
   682                           	callstack 0
   683                           
   684                           ; 1 bytes @ 0x20
   685   000021                     	ds	1
   686   000022                     vfpfcnvrt@ap:
   687                           	callstack 0
   688   000022                     ___flmul@prod:
   689                           	callstack 0
   690                           
   691                           ; 4 bytes @ 0x21
   692   000022                     	ds	1
   693   000023                     ??_vfpfcnvrt:
   694                           
   695                           ; 1 bytes @ 0x22
   696   000023                     	ds	2
   697   000025                     vfpfcnvrt@convarg:
   698                           	callstack 0
   699                           
   700                           ; 4 bytes @ 0x24
   701   000025                     	ds	1
   702   000026                     ___flmul@temp:
   703                           	callstack 0
   704                           
   705                           ; 2 bytes @ 0x25
   706   000026                     	ds	2
   707   000028                     ?___fladd:
   708                           	callstack 0
   709   000028                     ___fladd@b:
   710                           	callstack 0
   711                           
   712                           ; 4 bytes @ 0x27
   713   000028                     	ds	1
   714   000029                     vfpfcnvrt@done:
   715                           	callstack 0
   716                           
   717                           ; 1 bytes @ 0x28
   718   000029                     	ds	1
   719   00002A                     vfpfcnvrt@cp:
   720                           	callstack 0
   721                           
   722                           ; 1 bytes @ 0x29
   723   00002A                     	ds	1
   724   00002B                     ?_vfprintf:
   725                           	callstack 0
   726   00002B                     vfprintf@fp:
   727                           	callstack 0
   728                           
   729                           ; 1 bytes @ 0x2A
   730   00002B                     	ds	1
   731   00002C                     vfprintf@fmt:
   732                           	callstack 0
   733   00002C                     ___fladd@a:
   734                           	callstack 0
   735                           
   736                           ; 4 bytes @ 0x2B
   737   00002C                     	ds	1
   738   00002D                     vfprintf@ap:
   739                           	callstack 0
   740                           
   741                           ; 1 bytes @ 0x2C
   742   00002D                     	ds	1
   743   00002E                     vfprintf@cfmt:
   744                           	callstack 0
   745                           
   746                           ; 1 bytes @ 0x2D
   747   00002E                     	ds	1
   748   00002F                     ?_sprintf:
   749                           	callstack 0
   750   00002F                     sprintf@s:
   751                           	callstack 0
   752                           
   753                           ; 2 bytes @ 0x2E
   754   00002F                     	ds	1
   755   000030                     ??___fladd:
   756                           
   757                           ; 1 bytes @ 0x2F
   758   000030                     	ds	1
   759   000031                     sprintf@fmt:
   760                           	callstack 0
   761                           
   762                           ; 1 bytes @ 0x30
   763   000031                     	ds	3
   764   000034                     ___fladd@signs:
   765                           	callstack 0
   766                           
   767                           ; 1 bytes @ 0x33
   768   000034                     	ds	1
   769   000035                     ___fladd@aexp:
   770                           	callstack 0
   771                           
   772                           ; 1 bytes @ 0x34
   773   000035                     	ds	1
   774   000036                     ___fladd@bexp:
   775                           	callstack 0
   776                           
   777                           ; 1 bytes @ 0x35
   778   000036                     	ds	1
   779   000037                     ___fladd@grs:
   780                           	callstack 0
   781                           
   782                           ; 1 bytes @ 0x36
   783   000037                     	ds	1
   784   000038                     ?___fltol:
   785                           	callstack 0
   786   000038                     ___fltol@f1:
   787                           	callstack 0
   788                           
   789                           ; 4 bytes @ 0x37
   790   000038                     	ds	2
   791   00003A                     sprintf@ap:
   792                           	callstack 0
   793                           
   794                           ; 1 bytes @ 0x39
   795   00003A                     	ds	1
   796   00003B                     sprintf@f:
   797                           	callstack 0
   798                           
   799                           ; 12 bytes @ 0x3A
   800   00003B                     	ds	1
   801   00003C                     ??___fltol:
   802                           
   803                           ; 1 bytes @ 0x3B
   804   00003C                     	ds	4
   805   000040                     ___fltol@sign1:
   806                           	callstack 0
   807                           
   808                           ; 1 bytes @ 0x3F
   809   000040                     	ds	1
   810   000041                     ___fltol@exp1:
   811                           	callstack 0
   812                           
   813                           ; 1 bytes @ 0x40
   814   000041                     	ds	6
   815   000047                     ??_main:
   816                           
   817                           ; 1 bytes @ 0x46
   818   000047                     	ds	18
   819                           
   820 ;;
   821 ;;Main: autosize = 0, tempsize = 18, incstack = 0, save=0
   822 ;;
   823 ;; *************** function _main *****************
   824 ;; Defined at:
   825 ;;		line 19 in file "main.c"
   826 ;; Parameters:    Size  Location     Type
   827 ;;		None
   828 ;; Auto vars:     Size  Location     Type
   829 ;;  i               2   39[BANK1 ] int 
   830 ;;  SolarMidnigh   32   41[BANK1 ] struct array_structure
   831 ;;  hours_temp      2   37[BANK1 ] int 
   832 ;;  operation       2   33[BANK1 ] int 
   833 ;;  minute_diff     2   24[BANK1 ] int 
   834 ;;  avgSolarMidn    2   22[BANK1 ] int 
   835 ;;  knownSolarMi    2   20[BANK1 ] int 
   836 ;;  minutes_temp    2   18[BANK1 ] int 
   837 ;;  SolarPerMont   72  137[BANK1 ] struct month_structure
   838 ;;  Dawn           32  105[BANK1 ] struct array_structure
   839 ;;  Dusk           32   73[BANK1 ] struct array_structure
   840 ;;  buffer         18    0[BANK1 ] unsigned char [18]
   841 ;;  clock          16  209[BANK1 ] struct time_structure
   842 ;;  TestMode        2   35[BANK1 ] int 
   843 ;;  light_thresh    2   31[BANK1 ] unsigned int 
   844 ;;  daycount        2   29[BANK1 ] unsigned int 
   845 ;;  previousCloc    2   26[BANK1 ] unsigned int 
   846 ;; Return value:  Size  Location     Type
   847 ;;                  1    wreg      void 
   848 ;; Registers used:
   849 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   850 ;; Tracked objects:
   851 ;;		On entry : 0/0
   852 ;;		On exit  : 0/0
   853 ;;		Unchanged: 0/0
   854 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   855 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   856 ;;      Locals:         0       0     225       0       0       0       0       0       0       0       0       0       
      +0       0       0
   857 ;;      Temps:         18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   858 ;;      Totals:        18       0     225       0       0       0       0       0       0       0       0       0       
      +0       0       0
   859 ;;Total ram usage:      243 bytes
   860 ;; Hardware stack levels required when called: 9
   861 ;; This function calls:
   862 ;;		_ADC_getval
   863 ;;		_ADC_init
   864 ;;		_ArrayAppend
   865 ;;		_ArrayAverage
   866 ;;		_Interrupts_init
   867 ;;		_LCD_Init
   868 ;;		_LCD_sendstring
   869 ;;		_LCD_setline
   870 ;;		_LEDarray_disp_bin
   871 ;;		_LEDarray_init
   872 ;;		_Timer0_init
   873 ;;		_UpdateClock
   874 ;;		___fladd
   875 ;;		___flmul
   876 ;;		___fltol
   877 ;;		___wmul
   878 ;;		___xxtofl
   879 ;;		_sprintf
   880 ;; This function is called by:
   881 ;;		Startup code after reset
   882 ;; This function uses a non-reentrant model
   883 ;;
   884                           
   885                           	psect	text0
   886   000E46                     __ptext0:
   887                           	callstack 0
   888   000E46                     _main:
   889                           	callstack 22
   890   000E46                     
   891                           ;main.c: 22:     LEDarray_init();
   892   000E46  ECAA  F019         	call	_LEDarray_init	;wreg free
   893   000E4A                     
   894                           ;main.c: 23:     Timer0_init();
   895   000E4A  ECCF  F019         	call	_Timer0_init	;wreg free
   896   000E4E                     
   897                           ;main.c: 24:     Interrupts_init();
   898   000E4E  ECFF  F019         	call	_Interrupts_init	;wreg free
   899   000E52                     
   900                           ;main.c: 25:     LCD_Init();
   901   000E52  EC93  F014         	call	_LCD_Init	;wreg free
   902   000E56                     
   903                           ;main.c: 26:     ADC_init();
   904   000E56  ECDF  F019         	call	_ADC_init	;wreg free
   905   000E5A                     
   906                           ;main.c: 28:     char buffer[18];;main.c: 32:     TRISDbits.TRISD7 = 0;
   907   000E5A  9E84               	bcf	132,7,c	;volatile
   908   000E5C                     
   909                           ;main.c: 33:     LATDbits.LATD7 = 0;
   910   000E5C  9E7C               	bcf	124,7,c	;volatile
   911   000E5E                     
   912                           ;main.c: 36:     TRISHbits.TRISH3 = 0;
   913   000E5E  9688               	bcf	136,3,c	;volatile
   914   000E60                     
   915                           ;main.c: 37:     LATHbits.LATH3 = 0;
   916   000E60  9680               	bcf	128,3,c	;volatile
   917   000E62                     
   918                           ;main.c: 46:     int TestMode = 1;
   919   000E62  0E00               	movlw	0
   920   000E64  0101               	movlb	1	; () banked
   921   000E66  6F24               	movwf	(main@TestMode+1)& (0+255),b
   922   000E68  0E01               	movlw	1
   923   000E6A  6F23               	movwf	main@TestMode& (0+255),b
   924   000E6C                     
   925                           ; BSR set to: 1
   926                           ;main.c: 51:     struct time_structure clock;;main.c: 53:         GLOBALsecs = 55;
   927   000E6C  0E00               	movlw	0
   928   000E6E  6FE2               	movwf	(_GLOBALsecs+1)& (0+255),b
   929   000E70  0E37               	movlw	55
   930   000E72  6FE1               	movwf	_GLOBALsecs& (0+255),b
   931   000E74                     
   932                           ; BSR set to: 1
   933                           ;main.c: 54:         clock.minutes = 59;
   934   000E74  0E00               	movlw	0
   935   000E76  6FD4               	movwf	(main@clock+3)& (0+255),b
   936   000E78  0E3B               	movlw	59
   937   000E7A  6FD3               	movwf	(main@clock+2)& (0+255),b
   938   000E7C                     
   939                           ; BSR set to: 1
   940                           ;main.c: 55:         clock.hours = 22;
   941   000E7C  0E00               	movlw	0
   942   000E7E  6FD6               	movwf	(main@clock+5)& (0+255),b
   943   000E80  0E16               	movlw	22
   944   000E82  6FD5               	movwf	(main@clock+4)& (0+255),b
   945   000E84                     
   946                           ; BSR set to: 1
   947                           ;main.c: 56:         clock.days = 28;
   948   000E84  0E00               	movlw	0
   949   000E86  6FD8               	movwf	(main@clock+7)& (0+255),b
   950   000E88  0E1C               	movlw	28
   951   000E8A  6FD7               	movwf	(main@clock+6)& (0+255),b
   952   000E8C                     
   953                           ; BSR set to: 1
   954                           ;main.c: 57:         clock.DoW = 5;
   955   000E8C  0E00               	movlw	0
   956   000E8E  6FDA               	movwf	(main@clock+9)& (0+255),b
   957   000E90  0E05               	movlw	5
   958   000E92  6FD9               	movwf	(main@clock+8)& (0+255),b
   959   000E94                     
   960                           ; BSR set to: 1
   961                           ;main.c: 58:         clock.months = 2;
   962   000E94  0E00               	movlw	0
   963   000E96  6FDC               	movwf	(main@clock+11)& (0+255),b
   964   000E98  0E02               	movlw	2
   965   000E9A  6FDB               	movwf	(main@clock+10)& (0+255),b
   966   000E9C                     
   967                           ; BSR set to: 1
   968                           ;main.c: 59:         clock.years = 2024;
   969   000E9C  0E07               	movlw	7
   970   000E9E  6FDE               	movwf	(main@clock+13)& (0+255),b
   971   000EA0  0EE8               	movlw	232
   972   000EA2  6FDD               	movwf	(main@clock+12)& (0+255),b
   973   000EA4                     
   974                           ; BSR set to: 1
   975                           ;main.c: 60:         clock.DSTstate = 0;
   976   000EA4  0E00               	movlw	0
   977   000EA6  6FE0               	movwf	(main@clock+15)& (0+255),b
   978   000EA8  0E00               	movlw	0
   979   000EAA  6FDF               	movwf	(main@clock+14)& (0+255),b
   980   000EAC                     
   981                           ; BSR set to: 1
   982                           ;main.c: 92:     struct month_structure SolarPerMonth;;main.c: 93:     SolarPerMonth.day
      +                          s[0] = 31;
   983   000EAC  0E00               	movlw	0
   984   000EAE  6FBA               	movwf	(main@SolarPerMonth+49)& (0+255),b
   985   000EB0  0E1F               	movlw	31
   986   000EB2  6FB9               	movwf	(main@SolarPerMonth+48)& (0+255),b
   987   000EB4                     
   988                           ; BSR set to: 1
   989                           ;main.c: 94:     SolarPerMonth.days[1] = 28;
   990   000EB4  0E00               	movlw	0
   991   000EB6  6FBC               	movwf	(main@SolarPerMonth+51)& (0+255),b
   992   000EB8  0E1C               	movlw	28
   993   000EBA  6FBB               	movwf	(main@SolarPerMonth+50)& (0+255),b
   994   000EBC                     
   995                           ; BSR set to: 1
   996                           ;main.c: 95:     SolarPerMonth.days[2] = 31;
   997   000EBC  0E00               	movlw	0
   998   000EBE  6FBE               	movwf	(main@SolarPerMonth+53)& (0+255),b
   999   000EC0  0E1F               	movlw	31
  1000   000EC2  6FBD               	movwf	(main@SolarPerMonth+52)& (0+255),b
  1001   000EC4                     
  1002                           ; BSR set to: 1
  1003                           ;main.c: 96:     SolarPerMonth.days[3] = 30;
  1004   000EC4  0E00               	movlw	0
  1005   000EC6  6FC0               	movwf	(main@SolarPerMonth+55)& (0+255),b
  1006   000EC8  0E1E               	movlw	30
  1007   000ECA  6FBF               	movwf	(main@SolarPerMonth+54)& (0+255),b
  1008   000ECC                     
  1009                           ; BSR set to: 1
  1010                           ;main.c: 97:     SolarPerMonth.days[4] = 31;
  1011   000ECC  0E00               	movlw	0
  1012   000ECE  6FC2               	movwf	(main@SolarPerMonth+57)& (0+255),b
  1013   000ED0  0E1F               	movlw	31
  1014   000ED2  6FC1               	movwf	(main@SolarPerMonth+56)& (0+255),b
  1015   000ED4                     
  1016                           ; BSR set to: 1
  1017                           ;main.c: 98:     SolarPerMonth.days[5] = 30;
  1018   000ED4  0E00               	movlw	0
  1019   000ED6  6FC4               	movwf	(main@SolarPerMonth+59)& (0+255),b
  1020   000ED8  0E1E               	movlw	30
  1021   000EDA  6FC3               	movwf	(main@SolarPerMonth+58)& (0+255),b
  1022   000EDC                     
  1023                           ; BSR set to: 1
  1024                           ;main.c: 99:     SolarPerMonth.days[6] = 31;
  1025   000EDC  0E00               	movlw	0
  1026   000EDE  6FC6               	movwf	(main@SolarPerMonth+61)& (0+255),b
  1027   000EE0  0E1F               	movlw	31
  1028   000EE2  6FC5               	movwf	(main@SolarPerMonth+60)& (0+255),b
  1029   000EE4                     
  1030                           ; BSR set to: 1
  1031                           ;main.c: 100:     SolarPerMonth.days[7] = 31;
  1032   000EE4  0E00               	movlw	0
  1033   000EE6  6FC8               	movwf	(main@SolarPerMonth+63)& (0+255),b
  1034   000EE8  0E1F               	movlw	31
  1035   000EEA  6FC7               	movwf	(main@SolarPerMonth+62)& (0+255),b
  1036   000EEC                     
  1037                           ; BSR set to: 1
  1038                           ;main.c: 101:     SolarPerMonth.days[8] = 30;
  1039   000EEC  0E00               	movlw	0
  1040   000EEE  6FCA               	movwf	(main@SolarPerMonth+65)& (0+255),b
  1041   000EF0  0E1E               	movlw	30
  1042   000EF2  6FC9               	movwf	(main@SolarPerMonth+64)& (0+255),b
  1043   000EF4                     
  1044                           ; BSR set to: 1
  1045                           ;main.c: 102:     SolarPerMonth.days[9] = 31;
  1046   000EF4  0E00               	movlw	0
  1047   000EF6  6FCC               	movwf	(main@SolarPerMonth+67)& (0+255),b
  1048   000EF8  0E1F               	movlw	31
  1049   000EFA  6FCB               	movwf	(main@SolarPerMonth+66)& (0+255),b
  1050   000EFC                     
  1051                           ; BSR set to: 1
  1052                           ;main.c: 103:     SolarPerMonth.days[10] = 30;
  1053   000EFC  0E00               	movlw	0
  1054   000EFE  6FCE               	movwf	(main@SolarPerMonth+69)& (0+255),b
  1055   000F00  0E1E               	movlw	30
  1056   000F02  6FCD               	movwf	(main@SolarPerMonth+68)& (0+255),b
  1057   000F04                     
  1058                           ; BSR set to: 1
  1059                           ;main.c: 104:     SolarPerMonth.days[11] = 31;
  1060   000F04  0E00               	movlw	0
  1061   000F06  6FD0               	movwf	(main@SolarPerMonth+71)& (0+255),b
  1062   000F08  0E1F               	movlw	31
  1063   000F0A  6FCF               	movwf	(main@SolarPerMonth+70)& (0+255),b
  1064   000F0C                     
  1065                           ; BSR set to: 1
  1066                           ;main.c: 106:     SolarPerMonth.solarMidHours[0] = 0;
  1067   000F0C  0E00               	movlw	0
  1068   000F0E  6FA2               	movwf	(main@SolarPerMonth+25)& (0+255),b
  1069   000F10  0E00               	movlw	0
  1070   000F12  6FA1               	movwf	(main@SolarPerMonth+24)& (0+255),b
  1071   000F14                     
  1072                           ; BSR set to: 1
  1073                           ;main.c: 107:     SolarPerMonth.solarMidHours[1] = 0;
  1074   000F14  0E00               	movlw	0
  1075   000F16  6FA4               	movwf	(main@SolarPerMonth+27)& (0+255),b
  1076   000F18  0E00               	movlw	0
  1077   000F1A  6FA3               	movwf	(main@SolarPerMonth+26)& (0+255),b
  1078   000F1C                     
  1079                           ; BSR set to: 1
  1080                           ;main.c: 108:     SolarPerMonth.solarMidHours[2] = 0;
  1081   000F1C  0E00               	movlw	0
  1082   000F1E  6FA6               	movwf	(main@SolarPerMonth+29)& (0+255),b
  1083   000F20  0E00               	movlw	0
  1084   000F22  6FA5               	movwf	(main@SolarPerMonth+28)& (0+255),b
  1085   000F24                     
  1086                           ; BSR set to: 1
  1087                           ;main.c: 109:     SolarPerMonth.solarMidHours[3] = 0;
  1088   000F24  0E00               	movlw	0
  1089   000F26  6FA8               	movwf	(main@SolarPerMonth+31)& (0+255),b
  1090   000F28  0E00               	movlw	0
  1091   000F2A  6FA7               	movwf	(main@SolarPerMonth+30)& (0+255),b
  1092   000F2C                     
  1093                           ; BSR set to: 1
  1094                           ;main.c: 110:     SolarPerMonth.solarMidHours[4] = 23;
  1095   000F2C  0E00               	movlw	0
  1096   000F2E  6FAA               	movwf	(main@SolarPerMonth+33)& (0+255),b
  1097   000F30  0E17               	movlw	23
  1098   000F32  6FA9               	movwf	(main@SolarPerMonth+32)& (0+255),b
  1099   000F34                     
  1100                           ; BSR set to: 1
  1101                           ;main.c: 111:     SolarPerMonth.solarMidHours[5] = 0;
  1102   000F34  0E00               	movlw	0
  1103   000F36  6FAC               	movwf	(main@SolarPerMonth+35)& (0+255),b
  1104   000F38  0E00               	movlw	0
  1105   000F3A  6FAB               	movwf	(main@SolarPerMonth+34)& (0+255),b
  1106   000F3C                     
  1107                           ; BSR set to: 1
  1108                           ;main.c: 112:     SolarPerMonth.solarMidHours[6] = 0;
  1109   000F3C  0E00               	movlw	0
  1110   000F3E  6FAE               	movwf	(main@SolarPerMonth+37)& (0+255),b
  1111   000F40  0E00               	movlw	0
  1112   000F42  6FAD               	movwf	(main@SolarPerMonth+36)& (0+255),b
  1113   000F44                     
  1114                           ; BSR set to: 1
  1115                           ;main.c: 113:     SolarPerMonth.solarMidHours[7] = 0;
  1116   000F44  0E00               	movlw	0
  1117   000F46  6FB0               	movwf	(main@SolarPerMonth+39)& (0+255),b
  1118   000F48  0E00               	movlw	0
  1119   000F4A  6FAF               	movwf	(main@SolarPerMonth+38)& (0+255),b
  1120   000F4C                     
  1121                           ; BSR set to: 1
  1122                           ;main.c: 114:     SolarPerMonth.solarMidHours[8] = 23;
  1123   000F4C  0E00               	movlw	0
  1124   000F4E  6FB2               	movwf	(main@SolarPerMonth+41)& (0+255),b
  1125   000F50  0E17               	movlw	23
  1126   000F52  6FB1               	movwf	(main@SolarPerMonth+40)& (0+255),b
  1127   000F54                     
  1128                           ; BSR set to: 1
  1129                           ;main.c: 115:     SolarPerMonth.solarMidHours[9] = 23;
  1130   000F54  0E00               	movlw	0
  1131   000F56  6FB4               	movwf	(main@SolarPerMonth+43)& (0+255),b
  1132   000F58  0E17               	movlw	23
  1133   000F5A  6FB3               	movwf	(main@SolarPerMonth+42)& (0+255),b
  1134   000F5C                     
  1135                           ; BSR set to: 1
  1136                           ;main.c: 116:     SolarPerMonth.solarMidHours[10] = 23;
  1137   000F5C  0E00               	movlw	0
  1138   000F5E  6FB6               	movwf	(main@SolarPerMonth+45)& (0+255),b
  1139   000F60  0E17               	movlw	23
  1140   000F62  6FB5               	movwf	(main@SolarPerMonth+44)& (0+255),b
  1141   000F64                     
  1142                           ; BSR set to: 1
  1143                           ;main.c: 117:     SolarPerMonth.solarMidHours[11] = 23;
  1144   000F64  0E00               	movlw	0
  1145   000F66  6FB8               	movwf	(main@SolarPerMonth+47)& (0+255),b
  1146   000F68  0E17               	movlw	23
  1147   000F6A  6FB7               	movwf	(main@SolarPerMonth+46)& (0+255),b
  1148   000F6C                     
  1149                           ; BSR set to: 1
  1150                           ;main.c: 119:     SolarPerMonth.solarMidMinutes[0] = 9;
  1151   000F6C  0E00               	movlw	0
  1152   000F6E  6F8A               	movwf	(main@SolarPerMonth+1)& (0+255),b
  1153   000F70  0E09               	movlw	9
  1154   000F72  6F89               	movwf	main@SolarPerMonth& (0+255),b
  1155   000F74                     
  1156                           ; BSR set to: 1
  1157                           ;main.c: 120:     SolarPerMonth.solarMidMinutes[1] = 13;
  1158   000F74  0E00               	movlw	0
  1159   000F76  6F8C               	movwf	(main@SolarPerMonth+3)& (0+255),b
  1160   000F78  0E0D               	movlw	13
  1161   000F7A  6F8B               	movwf	(main@SolarPerMonth+2)& (0+255),b
  1162   000F7C                     
  1163                           ; BSR set to: 1
  1164                           ;main.c: 121:     SolarPerMonth.solarMidMinutes[2] = 8;
  1165   000F7C  0E00               	movlw	0
  1166   000F7E  6F8E               	movwf	(main@SolarPerMonth+5)& (0+255),b
  1167   000F80  0E08               	movlw	8
  1168   000F82  6F8D               	movwf	(main@SolarPerMonth+4)& (0+255),b
  1169   000F84                     
  1170                           ; BSR set to: 1
  1171                           ;main.c: 122:     SolarPerMonth.solarMidMinutes[3] = 1;
  1172   000F84  0E00               	movlw	0
  1173   000F86  6F90               	movwf	(main@SolarPerMonth+7)& (0+255),b
  1174   000F88  0E01               	movlw	1
  1175   000F8A  6F8F               	movwf	(main@SolarPerMonth+6)& (0+255),b
  1176   000F8C                     
  1177                           ; BSR set to: 1
  1178                           ;main.c: 123:     SolarPerMonth.solarMidMinutes[4] = 57;
  1179   000F8C  0E00               	movlw	0
  1180   000F8E  6F92               	movwf	(main@SolarPerMonth+9)& (0+255),b
  1181   000F90  0E39               	movlw	57
  1182   000F92  6F91               	movwf	(main@SolarPerMonth+8)& (0+255),b
  1183   000F94                     
  1184                           ; BSR set to: 1
  1185                           ;main.c: 124:     SolarPerMonth.solarMidMinutes[5] = 1;
  1186   000F94  0E00               	movlw	0
  1187   000F96  6F94               	movwf	(main@SolarPerMonth+11)& (0+255),b
  1188   000F98  0E01               	movlw	1
  1189   000F9A  6F93               	movwf	(main@SolarPerMonth+10)& (0+255),b
  1190   000F9C                     
  1191                           ; BSR set to: 1
  1192                           ;main.c: 125:     SolarPerMonth.solarMidMinutes[6] = 5;
  1193   000F9C  0E00               	movlw	0
  1194   000F9E  6F96               	movwf	(main@SolarPerMonth+13)& (0+255),b
  1195   000FA0  0E05               	movlw	5
  1196   000FA2  6F95               	movwf	(main@SolarPerMonth+12)& (0+255),b
  1197   000FA4                     
  1198                           ; BSR set to: 1
  1199                           ;main.c: 126:     SolarPerMonth.solarMidMinutes[7] = 3;
  1200   000FA4  0E00               	movlw	0
  1201   000FA6  6F98               	movwf	(main@SolarPerMonth+15)& (0+255),b
  1202   000FA8  0E03               	movlw	3
  1203   000FAA  6F97               	movwf	(main@SolarPerMonth+14)& (0+255),b
  1204   000FAC                     
  1205                           ; BSR set to: 1
  1206                           ;main.c: 127:     SolarPerMonth.solarMidMinutes[8] = 55;
  1207   000FAC  0E00               	movlw	0
  1208   000FAE  6F9A               	movwf	(main@SolarPerMonth+17)& (0+255),b
  1209   000FB0  0E37               	movlw	55
  1210   000FB2  6F99               	movwf	(main@SolarPerMonth+16)& (0+255),b
  1211   000FB4                     
  1212                           ; BSR set to: 1
  1213                           ;main.c: 128:     SolarPerMonth.solarMidMinutes[9] = 47;
  1214   000FB4  0E00               	movlw	0
  1215   000FB6  6F9C               	movwf	(main@SolarPerMonth+19)& (0+255),b
  1216   000FB8  0E2F               	movlw	47
  1217   000FBA  6F9B               	movwf	(main@SolarPerMonth+18)& (0+255),b
  1218   000FBC                     
  1219                           ; BSR set to: 1
  1220                           ;main.c: 129:     SolarPerMonth.solarMidMinutes[10] = 46;
  1221   000FBC  0E00               	movlw	0
  1222   000FBE  6F9E               	movwf	(main@SolarPerMonth+21)& (0+255),b
  1223   000FC0  0E2E               	movlw	46
  1224   000FC2  6F9D               	movwf	(main@SolarPerMonth+20)& (0+255),b
  1225   000FC4                     
  1226                           ; BSR set to: 1
  1227                           ;main.c: 130:     SolarPerMonth.solarMidMinutes[11] = 56;
  1228   000FC4  0E00               	movlw	0
  1229   000FC6  6FA0               	movwf	(main@SolarPerMonth+23)& (0+255),b
  1230   000FC8  0E38               	movlw	56
  1231   000FCA  6F9F               	movwf	(main@SolarPerMonth+22)& (0+255),b
  1232   000FCC                     
  1233                           ; BSR set to: 1
  1234                           ;main.c: 146:     struct array_structure Dawn;;main.c: 147:         Dawn.size = 7;
  1235   000FCC  0E00               	movlw	0
  1236   000FCE  6F6A               	movwf	(main@Dawn+1)& (0+255),b
  1237   000FD0  0E07               	movlw	7
  1238   000FD2  6F69               	movwf	main@Dawn& (0+255),b
  1239   000FD4                     
  1240                           ; BSR set to: 1
  1241                           ;main.c: 148:         Dawn.count = 0;
  1242   000FD4  0E00               	movlw	0
  1243   000FD6  6F6C               	movwf	(main@Dawn+3)& (0+255),b
  1244   000FD8  0E00               	movlw	0
  1245   000FDA  6F6B               	movwf	(main@Dawn+2)& (0+255),b
  1246   000FDC                     
  1247                           ; BSR set to: 1
  1248                           ;main.c: 150:         Dawn.hours[0] = 0;
  1249   000FDC  0E00               	movlw	0
  1250   000FDE  6F6E               	movwf	(main@Dawn+5)& (0+255),b
  1251   000FE0  0E00               	movlw	0
  1252   000FE2  6F6D               	movwf	(main@Dawn+4)& (0+255),b
  1253   000FE4                     
  1254                           ; BSR set to: 1
  1255                           ;main.c: 151:         Dawn.hours[1] = 0;
  1256   000FE4  0E00               	movlw	0
  1257   000FE6  6F70               	movwf	(main@Dawn+7)& (0+255),b
  1258   000FE8  0E00               	movlw	0
  1259   000FEA  6F6F               	movwf	(main@Dawn+6)& (0+255),b
  1260   000FEC                     
  1261                           ; BSR set to: 1
  1262                           ;main.c: 152:         Dawn.hours[2] = 0;
  1263   000FEC  0E00               	movlw	0
  1264   000FEE  6F72               	movwf	(main@Dawn+9)& (0+255),b
  1265   000FF0  0E00               	movlw	0
  1266   000FF2  6F71               	movwf	(main@Dawn+8)& (0+255),b
  1267   000FF4                     
  1268                           ; BSR set to: 1
  1269                           ;main.c: 153:         Dawn.hours[3] = 0;
  1270   000FF4  0E00               	movlw	0
  1271   000FF6  6F74               	movwf	(main@Dawn+11)& (0+255),b
  1272   000FF8  0E00               	movlw	0
  1273   000FFA  6F73               	movwf	(main@Dawn+10)& (0+255),b
  1274   000FFC                     
  1275                           ; BSR set to: 1
  1276                           ;main.c: 154:         Dawn.hours[4] = 0;
  1277   000FFC  0E00               	movlw	0
  1278   000FFE  6F76               	movwf	(main@Dawn+13)& (0+255),b
  1279   001000  0E00               	movlw	0
  1280   001002  6F75               	movwf	(main@Dawn+12)& (0+255),b
  1281   001004                     
  1282                           ; BSR set to: 1
  1283                           ;main.c: 155:         Dawn.hours[5] = 0;
  1284   001004  0E00               	movlw	0
  1285   001006  6F78               	movwf	(main@Dawn+15)& (0+255),b
  1286   001008  0E00               	movlw	0
  1287   00100A  6F77               	movwf	(main@Dawn+14)& (0+255),b
  1288   00100C                     
  1289                           ; BSR set to: 1
  1290                           ;main.c: 156:         Dawn.hours[6] = 0;
  1291   00100C  0E00               	movlw	0
  1292   00100E  6F7A               	movwf	(main@Dawn+17)& (0+255),b
  1293   001010  0E00               	movlw	0
  1294   001012  6F79               	movwf	(main@Dawn+16)& (0+255),b
  1295   001014                     
  1296                           ; BSR set to: 1
  1297                           ;main.c: 158:         Dawn.minutes[0] = 0;
  1298   001014  0E00               	movlw	0
  1299   001016  6F7C               	movwf	(main@Dawn+19)& (0+255),b
  1300   001018  0E00               	movlw	0
  1301   00101A  6F7B               	movwf	(main@Dawn+18)& (0+255),b
  1302   00101C                     
  1303                           ; BSR set to: 1
  1304                           ;main.c: 159:         Dawn.minutes[1] = 0;
  1305   00101C  0E00               	movlw	0
  1306   00101E  6F7E               	movwf	(main@Dawn+21)& (0+255),b
  1307   001020  0E00               	movlw	0
  1308   001022  6F7D               	movwf	(main@Dawn+20)& (0+255),b
  1309   001024                     
  1310                           ; BSR set to: 1
  1311                           ;main.c: 160:         Dawn.minutes[2] = 0;
  1312   001024  0E00               	movlw	0
  1313   001026  6F80               	movwf	(main@Dawn+23)& (0+255),b
  1314   001028  0E00               	movlw	0
  1315   00102A  6F7F               	movwf	(main@Dawn+22)& (0+255),b
  1316   00102C                     
  1317                           ; BSR set to: 1
  1318                           ;main.c: 161:         Dawn.minutes[3] = 0;
  1319   00102C  0E00               	movlw	0
  1320   00102E  6F82               	movwf	(main@Dawn+25)& (0+255),b
  1321   001030  0E00               	movlw	0
  1322   001032  6F81               	movwf	(main@Dawn+24)& (0+255),b
  1323   001034                     
  1324                           ; BSR set to: 1
  1325                           ;main.c: 162:         Dawn.minutes[4] = 0;
  1326   001034  0E00               	movlw	0
  1327   001036  6F84               	movwf	(main@Dawn+27)& (0+255),b
  1328   001038  0E00               	movlw	0
  1329   00103A  6F83               	movwf	(main@Dawn+26)& (0+255),b
  1330   00103C                     
  1331                           ; BSR set to: 1
  1332                           ;main.c: 163:         Dawn.minutes[5] = 0;
  1333   00103C  0E00               	movlw	0
  1334   00103E  6F86               	movwf	(main@Dawn+29)& (0+255),b
  1335   001040  0E00               	movlw	0
  1336   001042  6F85               	movwf	(main@Dawn+28)& (0+255),b
  1337   001044                     
  1338                           ; BSR set to: 1
  1339                           ;main.c: 164:         Dawn.minutes[6] = 0;
  1340   001044  0E00               	movlw	0
  1341   001046  6F88               	movwf	(main@Dawn+31)& (0+255),b
  1342   001048  0E00               	movlw	0
  1343   00104A  6F87               	movwf	(main@Dawn+30)& (0+255),b
  1344   00104C                     
  1345                           ; BSR set to: 1
  1346                           ;main.c: 166:     struct array_structure Dusk;;main.c: 167:         Dusk.size = 7;
  1347   00104C  0E00               	movlw	0
  1348   00104E  6F4A               	movwf	(main@Dusk+1)& (0+255),b
  1349   001050  0E07               	movlw	7
  1350   001052  6F49               	movwf	main@Dusk& (0+255),b
  1351   001054                     
  1352                           ; BSR set to: 1
  1353                           ;main.c: 168:         Dusk.count = 0;
  1354   001054  0E00               	movlw	0
  1355   001056  6F4C               	movwf	(main@Dusk+3)& (0+255),b
  1356   001058  0E00               	movlw	0
  1357   00105A  6F4B               	movwf	(main@Dusk+2)& (0+255),b
  1358   00105C                     
  1359                           ; BSR set to: 1
  1360                           ;main.c: 170:         Dusk.hours[0] = 0;
  1361   00105C  0E00               	movlw	0
  1362   00105E  6F4E               	movwf	(main@Dusk+5)& (0+255),b
  1363   001060  0E00               	movlw	0
  1364   001062  6F4D               	movwf	(main@Dusk+4)& (0+255),b
  1365   001064                     
  1366                           ; BSR set to: 1
  1367                           ;main.c: 171:         Dusk.hours[1] = 0;
  1368   001064  0E00               	movlw	0
  1369   001066  6F50               	movwf	(main@Dusk+7)& (0+255),b
  1370   001068  0E00               	movlw	0
  1371   00106A  6F4F               	movwf	(main@Dusk+6)& (0+255),b
  1372   00106C                     
  1373                           ; BSR set to: 1
  1374                           ;main.c: 172:         Dusk.hours[2] = 0;
  1375   00106C  0E00               	movlw	0
  1376   00106E  6F52               	movwf	(main@Dusk+9)& (0+255),b
  1377   001070  0E00               	movlw	0
  1378   001072  6F51               	movwf	(main@Dusk+8)& (0+255),b
  1379   001074                     
  1380                           ; BSR set to: 1
  1381                           ;main.c: 173:         Dusk.hours[3] = 0;
  1382   001074  0E00               	movlw	0
  1383   001076  6F54               	movwf	(main@Dusk+11)& (0+255),b
  1384   001078  0E00               	movlw	0
  1385   00107A  6F53               	movwf	(main@Dusk+10)& (0+255),b
  1386   00107C                     
  1387                           ; BSR set to: 1
  1388                           ;main.c: 174:         Dusk.hours[4] = 0;
  1389   00107C  0E00               	movlw	0
  1390   00107E  6F56               	movwf	(main@Dusk+13)& (0+255),b
  1391   001080  0E00               	movlw	0
  1392   001082  6F55               	movwf	(main@Dusk+12)& (0+255),b
  1393   001084                     
  1394                           ; BSR set to: 1
  1395                           ;main.c: 175:         Dusk.hours[5] = 0;
  1396   001084  0E00               	movlw	0
  1397   001086  6F58               	movwf	(main@Dusk+15)& (0+255),b
  1398   001088  0E00               	movlw	0
  1399   00108A  6F57               	movwf	(main@Dusk+14)& (0+255),b
  1400   00108C                     
  1401                           ; BSR set to: 1
  1402                           ;main.c: 176:         Dusk.hours[6] = 0;
  1403   00108C  0E00               	movlw	0
  1404   00108E  6F5A               	movwf	(main@Dusk+17)& (0+255),b
  1405   001090  0E00               	movlw	0
  1406   001092  6F59               	movwf	(main@Dusk+16)& (0+255),b
  1407   001094                     
  1408                           ; BSR set to: 1
  1409                           ;main.c: 178:         Dusk.minutes[0] = 0;
  1410   001094  0E00               	movlw	0
  1411   001096  6F5C               	movwf	(main@Dusk+19)& (0+255),b
  1412   001098  0E00               	movlw	0
  1413   00109A  6F5B               	movwf	(main@Dusk+18)& (0+255),b
  1414   00109C                     
  1415                           ; BSR set to: 1
  1416                           ;main.c: 179:         Dusk.minutes[1] = 0;
  1417   00109C  0E00               	movlw	0
  1418   00109E  6F5E               	movwf	(main@Dusk+21)& (0+255),b
  1419   0010A0  0E00               	movlw	0
  1420   0010A2  6F5D               	movwf	(main@Dusk+20)& (0+255),b
  1421   0010A4                     
  1422                           ; BSR set to: 1
  1423                           ;main.c: 180:         Dusk.minutes[2] = 0;
  1424   0010A4  0E00               	movlw	0
  1425   0010A6  6F60               	movwf	(main@Dusk+23)& (0+255),b
  1426   0010A8  0E00               	movlw	0
  1427   0010AA  6F5F               	movwf	(main@Dusk+22)& (0+255),b
  1428   0010AC                     
  1429                           ; BSR set to: 1
  1430                           ;main.c: 181:         Dusk.minutes[3] = 0;
  1431   0010AC  0E00               	movlw	0
  1432   0010AE  6F62               	movwf	(main@Dusk+25)& (0+255),b
  1433   0010B0  0E00               	movlw	0
  1434   0010B2  6F61               	movwf	(main@Dusk+24)& (0+255),b
  1435   0010B4                     
  1436                           ; BSR set to: 1
  1437                           ;main.c: 182:         Dusk.minutes[4] = 0;
  1438   0010B4  0E00               	movlw	0
  1439   0010B6  6F64               	movwf	(main@Dusk+27)& (0+255),b
  1440   0010B8  0E00               	movlw	0
  1441   0010BA  6F63               	movwf	(main@Dusk+26)& (0+255),b
  1442   0010BC                     
  1443                           ; BSR set to: 1
  1444                           ;main.c: 183:         Dusk.minutes[5] = 0;
  1445   0010BC  0E00               	movlw	0
  1446   0010BE  6F66               	movwf	(main@Dusk+29)& (0+255),b
  1447   0010C0  0E00               	movlw	0
  1448   0010C2  6F65               	movwf	(main@Dusk+28)& (0+255),b
  1449   0010C4                     
  1450                           ; BSR set to: 1
  1451                           ;main.c: 184:         Dusk.minutes[6] = 0;
  1452   0010C4  0E00               	movlw	0
  1453   0010C6  6F68               	movwf	(main@Dusk+31)& (0+255),b
  1454   0010C8  0E00               	movlw	0
  1455   0010CA  6F67               	movwf	(main@Dusk+30)& (0+255),b
  1456   0010CC                     
  1457                           ; BSR set to: 1
  1458                           ;main.c: 199:     unsigned int light_threshold = 70;
  1459   0010CC  0E00               	movlw	0
  1460   0010CE  6F20               	movwf	(main@light_threshold+1)& (0+255),b
  1461   0010D0  0E46               	movlw	70
  1462   0010D2  6F1F               	movwf	main@light_threshold& (0+255),b
  1463   0010D4                     
  1464                           ; BSR set to: 1
  1465                           ;main.c: 202:     unsigned int daycount = 0;
  1466   0010D4  0E00               	movlw	0
  1467   0010D6  6F1E               	movwf	(main@daycount+1)& (0+255),b
  1468   0010D8  0E00               	movlw	0
  1469   0010DA  6F1D               	movwf	main@daycount& (0+255),b
  1470   0010DC                     
  1471                           ; BSR set to: 1
  1472                           ;main.c: 205:     unsigned int previousClockDays = clock.days;
  1473   0010DC  C1D7  F11A         	movff	main@clock+6,main@previousClockDays
  1474   0010E0  C1D8  F11B         	movff	main@clock+7,main@previousClockDays+1
  1475   0010E4                     
  1476                           ; BSR set to: 1
  1477                           ;main.c: 212:     clock.seconds = GLOBALsecs;
  1478   0010E4  C1E1  F1D1         	movff	_GLOBALsecs,main@clock
  1479   0010E8  C1E2  F1D2         	movff	_GLOBALsecs+1,main@clock+1
  1480   0010EC                     
  1481                           ; BSR set to: 1
  1482                           ;main.c: 214:             clock.seconds = 0;
  1483   0010EC  0E00               	movlw	0
  1484   0010EE  6FD2               	movwf	(main@clock+1)& (0+255),b
  1485   0010F0  0E00               	movlw	0
  1486   0010F2  6FD1               	movwf	main@clock& (0+255),b
  1487   0010F4                     
  1488                           ; BSR set to: 1
  1489                           ;main.c: 215:             GLOBALsecs = clock.hours;
  1490   0010F4  C1D5  F1E1         	movff	main@clock+4,_GLOBALsecs
  1491   0010F8  C1D6  F1E2         	movff	main@clock+5,_GLOBALsecs+1
  1492   0010FC                     l4348:
  1493                           
  1494                           ; BSR set to: 1
  1495                           ;main.c: 221:         if (TestMode == 0){clock.seconds = GLOBALsecs;}
  1496   0010FC  5123               	movf	main@TestMode& (0+255),w,b
  1497   0010FE  1124               	iorwf	(main@TestMode+1)& (0+255),w,b
  1498   001100  A4D8               	btfss	status,2,c
  1499   001102  EF85  F008         	goto	u4601
  1500   001106  EF87  F008         	goto	u4600
  1501   00110A                     u4601:
  1502   00110A  EF8B  F008         	goto	l4352
  1503   00110E                     u4600:
  1504   00110E                     
  1505                           ; BSR set to: 1
  1506   00110E  C1E1  F1D1         	movff	_GLOBALsecs,main@clock
  1507   001112  C1E2  F1D2         	movff	_GLOBALsecs+1,main@clock+1
  1508   001116                     l4352:
  1509                           
  1510                           ; BSR set to: 1
  1511                           ;main.c: 222:         UpdateClock(&GLOBALsecs, &clock.minutes, &clock.hours, &clock.days
      +                          , &clock.DoW, &clock.months, &clock.years, &clock.DSTstate, TestMode);
  1512   001116  0EE1               	movlw	low _GLOBALsecs
  1513   001118  6E07               	movwf	UpdateClock@seconds^0,c
  1514   00111A  0E01               	movlw	high _GLOBALsecs
  1515   00111C  6E08               	movwf	(UpdateClock@seconds+1)^0,c
  1516   00111E  0ED3               	movlw	low (main@clock+2)
  1517   001120  6E09               	movwf	UpdateClock@minutes^0,c
  1518   001122  0E01               	movlw	high (main@clock+2)
  1519   001124  6E0A               	movwf	(UpdateClock@minutes+1)^0,c
  1520   001126  0ED5               	movlw	low (main@clock+4)
  1521   001128  6E0B               	movwf	UpdateClock@hours^0,c
  1522   00112A  0E01               	movlw	high (main@clock+4)
  1523   00112C  6E0C               	movwf	(UpdateClock@hours+1)^0,c
  1524   00112E  0ED7               	movlw	low (main@clock+6)
  1525   001130  6E0D               	movwf	UpdateClock@days^0,c
  1526   001132  0E01               	movlw	high (main@clock+6)
  1527   001134  6E0E               	movwf	(UpdateClock@days+1)^0,c
  1528   001136  0ED9               	movlw	low (main@clock+8)
  1529   001138  6E0F               	movwf	UpdateClock@DoW^0,c
  1530   00113A  0E01               	movlw	high (main@clock+8)
  1531   00113C  6E10               	movwf	(UpdateClock@DoW+1)^0,c
  1532   00113E  0EDB               	movlw	low (main@clock+10)
  1533   001140  6E11               	movwf	UpdateClock@months^0,c
  1534   001142  0E01               	movlw	high (main@clock+10)
  1535   001144  6E12               	movwf	(UpdateClock@months+1)^0,c
  1536   001146  0EDD               	movlw	low (main@clock+12)
  1537   001148  6E13               	movwf	UpdateClock@years^0,c
  1538   00114A  0E01               	movlw	high (main@clock+12)
  1539   00114C  6E14               	movwf	(UpdateClock@years+1)^0,c
  1540   00114E  0EDF               	movlw	low (main@clock+14)
  1541   001150  6E15               	movwf	UpdateClock@DSTstate^0,c
  1542   001152  0E01               	movlw	high (main@clock+14)
  1543   001154  6E16               	movwf	(UpdateClock@DSTstate+1)^0,c
  1544   001156  C123  F017         	movff	main@TestMode,UpdateClock@TestMode
  1545   00115A  C124  F018         	movff	main@TestMode+1,UpdateClock@TestMode+1
  1546   00115E  ECF9  F00A         	call	_UpdateClock	;wreg free
  1547   001162                     
  1548                           ;main.c: 225:         LEDarray_disp_bin(clock.hours);
  1549   001162  C1D5  F001         	movff	main@clock+4,LEDarray_disp_bin@number
  1550   001166  C1D6  F002         	movff	main@clock+5,LEDarray_disp_bin@number+1
  1551   00116A  ECA6  F015         	call	_LEDarray_disp_bin	;wreg free
  1552   00116E                     
  1553                           ;main.c: 228:         LCD_setline(1);
  1554   00116E  0E01               	movlw	1
  1555   001170  EC2E  F019         	call	_LCD_setline
  1556   001174                     
  1557                           ;main.c: 229:         sprintf(buffer, "Time:%02d:%02d:%02d D%01d",clock.hours, clock.min
      +                          utes, clock.seconds, clock.DoW);
  1558   001174  0E00               	movlw	low main@buffer
  1559   001176  6E2F               	movwf	sprintf@s^0,c
  1560   001178  0E01               	movlw	high main@buffer
  1561   00117A  6E30               	movwf	(sprintf@s+1)^0,c
  1562   00117C  0E01               	movlw	low STR_1
  1563   00117E  6E31               	movwf	sprintf@fmt^0,c
  1564   001180  C1D5  F032         	movff	main@clock+4,?_sprintf+3
  1565   001184  C1D6  F033         	movff	main@clock+5,?_sprintf+4
  1566   001188  C1D3  F034         	movff	main@clock+2,?_sprintf+5
  1567   00118C  C1D4  F035         	movff	main@clock+3,?_sprintf+6
  1568   001190  C1D1  F036         	movff	main@clock,?_sprintf+7
  1569   001194  C1D2  F037         	movff	main@clock+1,?_sprintf+8
  1570   001198  C1D9  F038         	movff	main@clock+8,?_sprintf+9
  1571   00119C  C1DA  F039         	movff	main@clock+9,?_sprintf+10
  1572   0011A0  ECF2  F018         	call	_sprintf	;wreg free
  1573   0011A4                     
  1574                           ;main.c: 230:         LCD_sendstring(buffer);
  1575   0011A4  0E00               	movlw	low main@buffer
  1576   0011A6  6E04               	movwf	LCD_sendstring@string^0,c
  1577   0011A8  0E01               	movlw	high main@buffer
  1578   0011AA  6E05               	movwf	(LCD_sendstring@string+1)^0,c
  1579   0011AC  EC65  F019         	call	_LCD_sendstring	;wreg free
  1580   0011B0                     
  1581                           ;main.c: 231:         LCD_setline(2);
  1582   0011B0  0E02               	movlw	2
  1583   0011B2  EC2E  F019         	call	_LCD_setline
  1584   0011B6                     
  1585                           ;main.c: 232:         sprintf(buffer, "Date:%02d/%02d/%04d",clock.days, clock.months, cl
      +                          ock.years);
  1586   0011B6  0E00               	movlw	low main@buffer
  1587   0011B8  6E2F               	movwf	sprintf@s^0,c
  1588   0011BA  0E01               	movlw	high main@buffer
  1589   0011BC  6E30               	movwf	(sprintf@s+1)^0,c
  1590   0011BE  0E30               	movlw	low STR_2
  1591   0011C0  6E31               	movwf	sprintf@fmt^0,c
  1592   0011C2  C1D7  F032         	movff	main@clock+6,?_sprintf+3
  1593   0011C6  C1D8  F033         	movff	main@clock+7,?_sprintf+4
  1594   0011CA  C1DB  F034         	movff	main@clock+10,?_sprintf+5
  1595   0011CE  C1DC  F035         	movff	main@clock+11,?_sprintf+6
  1596   0011D2  C1DD  F036         	movff	main@clock+12,?_sprintf+7
  1597   0011D6  C1DE  F037         	movff	main@clock+13,?_sprintf+8
  1598   0011DA  ECF2  F018         	call	_sprintf	;wreg free
  1599   0011DE                     
  1600                           ;main.c: 233:         LCD_sendstring(buffer);
  1601   0011DE  0E00               	movlw	low main@buffer
  1602   0011E0  6E04               	movwf	LCD_sendstring@string^0,c
  1603   0011E2  0E01               	movlw	high main@buffer
  1604   0011E4  6E05               	movwf	(LCD_sendstring@string+1)^0,c
  1605   0011E6  EC65  F019         	call	_LCD_sendstring	;wreg free
  1606   0011EA                     
  1607                           ;main.c: 236:         if (ADC_getval() < light_threshold){
  1608   0011EA  EC7F  F019         	call	_ADC_getval	;wreg free
  1609   0011EE  0101               	movlb	1	; () banked
  1610   0011F0  511F               	movf	main@light_threshold& (0+255),w,b
  1611   0011F2  5C01               	subwf	?_ADC_getval^0,w,c
  1612   0011F4  5120               	movf	(main@light_threshold+1)& (0+255),w,b
  1613   0011F6  5802               	subwfb	(?_ADC_getval+1)^0,w,c
  1614   0011F8  B0D8               	btfsc	status,0,c
  1615   0011FA  EF01  F009         	goto	u4611
  1616   0011FE  EF03  F009         	goto	u4610
  1617   001202                     u4611:
  1618   001202  EF35  F009         	goto	l4388
  1619   001206                     u4610:
  1620   001206                     
  1621                           ; BSR set to: 1
  1622                           ;main.c: 237:             if ((clock.hours >= 1 && clock.hours < 5) || (clock.hours >= 8
      +                           && clock.hours < 15)) {
  1623   001206  51D5               	movf	(main@clock+4)& (0+255),w,b
  1624   001208  11D6               	iorwf	(main@clock+5)& (0+255),w,b
  1625   00120A  B4D8               	btfsc	status,2,c
  1626   00120C  EF0A  F009         	goto	u4621
  1627   001210  EF0C  F009         	goto	u4620
  1628   001214                     u4621:
  1629   001214  EF17  F009         	goto	l4374
  1630   001218                     u4620:
  1631   001218                     
  1632                           ; BSR set to: 1
  1633   001218  51D6               	movf	(main@clock+5)& (0+255),w,b
  1634   00121A  E109               	bnz	u4630
  1635   00121C  0E05               	movlw	5
  1636   00121E  5DD5               	subwf	(main@clock+4)& (0+255),w,b
  1637   001220  A0D8               	btfss	status,0,c
  1638   001222  EF15  F009         	goto	u4631
  1639   001226  EF17  F009         	goto	u4630
  1640   00122A                     u4631:
  1641   00122A  EF2D  F009         	goto	l47
  1642   00122E                     u4630:
  1643   00122E                     l4374:
  1644                           
  1645                           ; BSR set to: 1
  1646   00122E  51D6               	movf	(main@clock+5)& (0+255),w,b
  1647   001230  E109               	bnz	u4640
  1648   001232  0E08               	movlw	8
  1649   001234  5DD5               	subwf	(main@clock+4)& (0+255),w,b
  1650   001236  A0D8               	btfss	status,0,c
  1651   001238  EF20  F009         	goto	u4641
  1652   00123C  EF22  F009         	goto	u4640
  1653   001240                     u4641:
  1654   001240  EF30  F009         	goto	l45
  1655   001244                     u4640:
  1656   001244                     
  1657                           ; BSR set to: 1
  1658   001244  51D6               	movf	(main@clock+5)& (0+255),w,b
  1659   001246  E107               	bnz	u4651
  1660   001248  0E0F               	movlw	15
  1661   00124A  5DD5               	subwf	(main@clock+4)& (0+255),w,b
  1662   00124C  B0D8               	btfsc	status,0,c
  1663   00124E  EF2B  F009         	goto	u4651
  1664   001252  EF2D  F009         	goto	u4650
  1665   001256                     u4651:
  1666   001256  EF30  F009         	goto	l45
  1667   00125A                     u4650:
  1668   00125A                     l47:
  1669                           
  1670                           ; BSR set to: 1
  1671                           ;main.c: 238:                 LATHbits.LATH3 = 0;
  1672   00125A  9680               	bcf	128,3,c	;volatile
  1673                           
  1674                           ;main.c: 239:             }
  1675   00125C  EF35  F009         	goto	l4388
  1676   001260                     l45:
  1677                           
  1678                           ; BSR set to: 1
  1679                           ;main.c: 242:                 LATHbits.LATH3 = 1;
  1680   001260  8680               	bsf	128,3,c	;volatile
  1681   001262                     
  1682                           ; BSR set to: 1
  1683                           ;main.c: 243:                 if ((Dusk.count = 0)&&(clock.hours >=15 && clock.hours < 8
      +                          )) {
  1684   001262  0E00               	movlw	0
  1685   001264  6F4C               	movwf	(main@Dusk+3)& (0+255),b
  1686   001266  0E00               	movlw	0
  1687   001268  6F4B               	movwf	(main@Dusk+2)& (0+255),b
  1688   00126A                     l4388:
  1689                           
  1690                           ; BSR set to: 1
  1691                           ;main.c: 252:         if (ADC_getval() > light_threshold){
  1692   00126A  EC7F  F019         	call	_ADC_getval	;wreg free
  1693   00126E  5001               	movf	?_ADC_getval^0,w,c
  1694   001270  0101               	movlb	1	; () banked
  1695   001272  5D1F               	subwf	main@light_threshold& (0+255),w,b
  1696   001274  5002               	movf	(?_ADC_getval+1)^0,w,c
  1697   001276  5920               	subwfb	(main@light_threshold+1)& (0+255),w,b
  1698   001278  B0D8               	btfsc	status,0,c
  1699   00127A  EF41  F009         	goto	u4661
  1700   00127E  EF43  F009         	goto	u4660
  1701   001282                     u4661:
  1702   001282  EF48  F009         	goto	l4402
  1703   001286                     u4660:
  1704   001286                     
  1705                           ; BSR set to: 1
  1706                           ;main.c: 253:             LATHbits.LATH3 = 0;
  1707   001286  9680               	bcf	128,3,c	;volatile
  1708   001288                     
  1709                           ; BSR set to: 1
  1710                           ;main.c: 254:             if ((Dawn.count = 0)&&(clock.hours >=4 && clock.hours < 8)) {
  1711   001288  0E00               	movlw	0
  1712   00128A  6F6C               	movwf	(main@Dawn+3)& (0+255),b
  1713   00128C  0E00               	movlw	0
  1714   00128E  6F6B               	movwf	(main@Dawn+2)& (0+255),b
  1715   001290                     l4402:
  1716                           
  1717                           ; BSR set to: 1
  1718                           ;main.c: 261:         if (clock.days > previousClockDays) {
  1719   001290  51D7               	movf	(main@clock+6)& (0+255),w,b
  1720   001292  5D1A               	subwf	main@previousClockDays& (0+255),w,b
  1721   001294  51D8               	movf	(main@clock+7)& (0+255),w,b
  1722   001296  591B               	subwfb	(main@previousClockDays+1)& (0+255),w,b
  1723   001298  B0D8               	btfsc	status,0,c
  1724   00129A  EF51  F009         	goto	u4671
  1725   00129E  EF53  F009         	goto	u4670
  1726   0012A2                     u4671:
  1727   0012A2  EF7E  F008         	goto	l4348
  1728   0012A6                     u4670:
  1729   0012A6                     
  1730                           ; BSR set to: 1
  1731                           ;main.c: 262:             Dawn.count = 0;
  1732   0012A6  0E00               	movlw	0
  1733   0012A8  6F6C               	movwf	(main@Dawn+3)& (0+255),b
  1734   0012AA  0E00               	movlw	0
  1735   0012AC  6F6B               	movwf	(main@Dawn+2)& (0+255),b
  1736                           
  1737                           ;main.c: 263:             Dusk.count = 0;
  1738   0012AE  0E00               	movlw	0
  1739   0012B0  6F4C               	movwf	(main@Dusk+3)& (0+255),b
  1740   0012B2  0E00               	movlw	0
  1741   0012B4  6F4B               	movwf	(main@Dusk+2)& (0+255),b
  1742   0012B6                     
  1743                           ; BSR set to: 1
  1744                           ;main.c: 264:             daycount++;
  1745   0012B6  4B1D               	infsnz	main@daycount& (0+255),f,b
  1746   0012B8  2B1E               	incf	(main@daycount+1)& (0+255),f,b
  1747   0012BA                     
  1748                           ; BSR set to: 1
  1749                           ;main.c: 266:             previousClockDays = clock.days;
  1750   0012BA  C1D7  F11A         	movff	main@clock+6,main@previousClockDays
  1751   0012BE  C1D8  F11B         	movff	main@clock+7,main@previousClockDays+1
  1752   0012C2                     
  1753                           ; BSR set to: 1
  1754                           ;main.c: 268:             if (daycount == 7) {
  1755   0012C2  0E07               	movlw	7
  1756   0012C4  191D               	xorwf	main@daycount& (0+255),w,b
  1757   0012C6  111E               	iorwf	(main@daycount+1)& (0+255),w,b
  1758   0012C8  A4D8               	btfss	status,2,c
  1759   0012CA  EF69  F009         	goto	u4681
  1760   0012CE  EF6B  F009         	goto	u4680
  1761   0012D2                     u4681:
  1762   0012D2  EF7E  F008         	goto	l4348
  1763   0012D6                     u4680:
  1764   0012D6                     
  1765                           ; BSR set to: 1
  1766                           ;main.c: 274:                 int operation = 0;
  1767   0012D6  0E00               	movlw	0
  1768   0012D8  6F22               	movwf	(main@operation+1)& (0+255),b
  1769   0012DA  0E00               	movlw	0
  1770   0012DC  6F21               	movwf	main@operation& (0+255),b
  1771   0012DE                     
  1772                           ; BSR set to: 1
  1773                           ;main.c: 276:                 int hours_temp = SolarPerMonth.solarMidHours[(clock.months
      +                           - 1)];
  1774   0012DE  EE21  F0DB         	lfsr	2,main@clock+10
  1775   0012E2  CFDE F047          	movff	postinc2,??_main
  1776   0012E6  CFDD F048          	movff	postdec2,??_main+1
  1777   0012EA  90D8               	bcf	status,0,c
  1778   0012EC  3647               	rlcf	??_main^0,f,c
  1779   0012EE  3648               	rlcf	(??_main+1)^0,f,c
  1780   0012F0  0E16               	movlw	22
  1781   0012F2  2647               	addwf	??_main^0,f,c
  1782   0012F4  0E00               	movlw	0
  1783   0012F6  2248               	addwfc	(??_main+1)^0,f,c
  1784   0012F8  0E89               	movlw	low main@SolarPerMonth
  1785   0012FA  2447               	addwf	??_main^0,w,c
  1786   0012FC  6ED9               	movwf	fsr2l,c
  1787   0012FE  0E01               	movlw	high main@SolarPerMonth
  1788   001300  2048               	addwfc	(??_main+1)^0,w,c
  1789   001302  6EDA               	movwf	fsr2h,c
  1790   001304  CFDE F125          	movff	postinc2,main@hours_temp
  1791   001308  CFDD F126          	movff	postdec2,main@hours_temp+1
  1792   00130C                     
  1793                           ; BSR set to: 1
  1794                           ;main.c: 277:                 int minutes_temp = SolarPerMonth.solarMidMinutes[(clock.mo
      +                          nths - 1)];
  1795   00130C  EE21  F0DB         	lfsr	2,main@clock+10
  1796   001310  CFDE F047          	movff	postinc2,??_main
  1797   001314  CFDD F048          	movff	postdec2,??_main+1
  1798   001318  90D8               	bcf	status,0,c
  1799   00131A  3647               	rlcf	??_main^0,f,c
  1800   00131C  3648               	rlcf	(??_main+1)^0,f,c
  1801   00131E  0EFE               	movlw	254
  1802   001320  2447               	addwf	??_main^0,w,c
  1803   001322  6E49               	movwf	(??_main+2)^0,c
  1804   001324  0EFF               	movlw	255
  1805   001326  2048               	addwfc	(??_main+1)^0,w,c
  1806   001328  6E4A               	movwf	(??_main+3)^0,c
  1807   00132A  0E89               	movlw	low main@SolarPerMonth
  1808   00132C  2449               	addwf	(??_main+2)^0,w,c
  1809   00132E  6ED9               	movwf	fsr2l,c
  1810   001330  0E01               	movlw	high main@SolarPerMonth
  1811   001332  204A               	addwfc	(??_main+3)^0,w,c
  1812   001334  6EDA               	movwf	fsr2h,c
  1813   001336  CFDE F112          	movff	postinc2,main@minutes_temp
  1814   00133A  CFDD F113          	movff	postdec2,main@minutes_temp+1
  1815                           
  1816                           ;main.c: 279:                 if (clock.DSTstate = 1) {hours_temp = hours_temp + 1;}
  1817   00133E  0E00               	movlw	0
  1818   001340  6FE0               	movwf	(main@clock+15)& (0+255),b
  1819   001342  0E01               	movlw	1
  1820   001344  6FDF               	movwf	(main@clock+14)& (0+255),b
  1821   001346                     
  1822                           ; BSR set to: 1
  1823   001346  0E01               	movlw	1
  1824   001348  2525               	addwf	main@hours_temp& (0+255),w,b
  1825   00134A  6F25               	movwf	main@hours_temp& (0+255),b
  1826   00134C  0E00               	movlw	0
  1827   00134E  2126               	addwfc	(main@hours_temp+1)& (0+255),w,b
  1828   001350  6F26               	movwf	(main@hours_temp+1)& (0+255),b
  1829   001352                     
  1830                           ; BSR set to: 1
  1831                           ;main.c: 280:                 if (hours_temp = 0 || hours_temp == 1) {hours_temp = hours
      +                          _temp + 24;}
  1832   001352  0E01               	movlw	1
  1833   001354  6F1C               	movwf	_main$297& (0+255),b
  1834   001356  0525               	decf	main@hours_temp& (0+255),w,b
  1835   001358  1126               	iorwf	(main@hours_temp+1)& (0+255),w,b
  1836   00135A  B4D8               	btfsc	status,2,c
  1837   00135C  EFB2  F009         	goto	u4691
  1838   001360  EFB4  F009         	goto	u4690
  1839   001364                     u4691:
  1840   001364  EFB6  F009         	goto	l4424
  1841   001368                     u4690:
  1842   001368                     
  1843                           ; BSR set to: 1
  1844   001368  0E00               	movlw	0
  1845   00136A  6F1C               	movwf	_main$297& (0+255),b
  1846   00136C                     l4424:
  1847                           
  1848                           ; BSR set to: 1
  1849   00136C  C11C  F125         	movff	_main$297,main@hours_temp
  1850   001370  6B26               	clrf	(main@hours_temp+1)& (0+255),b
  1851   001372  5125               	movf	main@hours_temp& (0+255),w,b
  1852   001374  1126               	iorwf	(main@hours_temp+1)& (0+255),w,b
  1853   001376  B4D8               	btfsc	status,2,c
  1854   001378  EFC0  F009         	goto	u4701
  1855   00137C  EFC2  F009         	goto	u4700
  1856   001380                     u4701:
  1857   001380  EFC8  F009         	goto	l4428
  1858   001384                     u4700:
  1859   001384                     
  1860                           ; BSR set to: 1
  1861   001384  0E18               	movlw	24
  1862   001386  2525               	addwf	main@hours_temp& (0+255),w,b
  1863   001388  6F25               	movwf	main@hours_temp& (0+255),b
  1864   00138A  0E00               	movlw	0
  1865   00138C  2126               	addwfc	(main@hours_temp+1)& (0+255),w,b
  1866   00138E  6F26               	movwf	(main@hours_temp+1)& (0+255),b
  1867   001390                     l4428:
  1868                           
  1869                           ; BSR set to: 1
  1870                           ;main.c: 283:                 int knownSolarMidnight = hours_temp*60 + minutes_temp;
  1871   001390  C125  F001         	movff	main@hours_temp,___wmul@multiplier
  1872   001394  C126  F002         	movff	main@hours_temp+1,___wmul@multiplier+1
  1873   001398  0E00               	movlw	0
  1874   00139A  6E04               	movwf	(___wmul@multiplicand+1)^0,c
  1875   00139C  0E3C               	movlw	60
  1876   00139E  6E03               	movwf	___wmul@multiplicand^0,c
  1877   0013A0  EC97  F019         	call	___wmul	;wreg free
  1878   0013A4  0101               	movlb	1	; () banked
  1879   0013A6  5112               	movf	main@minutes_temp& (0+255),w,b
  1880   0013A8  2401               	addwf	?___wmul^0,w,c
  1881   0013AA  6F14               	movwf	main@knownSolarMidnight& (0+255),b
  1882   0013AC  5113               	movf	(main@minutes_temp+1)& (0+255),w,b
  1883   0013AE  2002               	addwfc	(?___wmul+1)^0,w,c
  1884   0013B0  6F15               	movwf	(main@knownSolarMidnight+1)& (0+255),b
  1885   0013B2                     
  1886                           ; BSR set to: 1
  1887                           ;main.c: 285:                 struct array_structure SolarMidnight;;main.c: 286:        
      +                                       SolarMidnight.minutes[0] = 0;
  1888   0013B2  0E00               	movlw	0
  1889   0013B4  6F3C               	movwf	(main@SolarMidnight+19)& (0+255),b
  1890   0013B6  0E00               	movlw	0
  1891   0013B8  6F3B               	movwf	(main@SolarMidnight+18)& (0+255),b
  1892   0013BA                     
  1893                           ; BSR set to: 1
  1894                           ;main.c: 287:                     SolarMidnight.minutes[1] = 0;
  1895   0013BA  0E00               	movlw	0
  1896   0013BC  6F3E               	movwf	(main@SolarMidnight+21)& (0+255),b
  1897   0013BE  0E00               	movlw	0
  1898   0013C0  6F3D               	movwf	(main@SolarMidnight+20)& (0+255),b
  1899   0013C2                     
  1900                           ; BSR set to: 1
  1901                           ;main.c: 288:                     SolarMidnight.minutes[2] = 0;
  1902   0013C2  0E00               	movlw	0
  1903   0013C4  6F40               	movwf	(main@SolarMidnight+23)& (0+255),b
  1904   0013C6  0E00               	movlw	0
  1905   0013C8  6F3F               	movwf	(main@SolarMidnight+22)& (0+255),b
  1906   0013CA                     
  1907                           ; BSR set to: 1
  1908                           ;main.c: 289:                     SolarMidnight.minutes[3] = 0;
  1909   0013CA  0E00               	movlw	0
  1910   0013CC  6F42               	movwf	(main@SolarMidnight+25)& (0+255),b
  1911   0013CE  0E00               	movlw	0
  1912   0013D0  6F41               	movwf	(main@SolarMidnight+24)& (0+255),b
  1913   0013D2                     
  1914                           ; BSR set to: 1
  1915                           ;main.c: 290:                     SolarMidnight.minutes[4] = 0;
  1916   0013D2  0E00               	movlw	0
  1917   0013D4  6F44               	movwf	(main@SolarMidnight+27)& (0+255),b
  1918   0013D6  0E00               	movlw	0
  1919   0013D8  6F43               	movwf	(main@SolarMidnight+26)& (0+255),b
  1920   0013DA                     
  1921                           ; BSR set to: 1
  1922                           ;main.c: 291:                     SolarMidnight.minutes[5] = 0;
  1923   0013DA  0E00               	movlw	0
  1924   0013DC  6F46               	movwf	(main@SolarMidnight+29)& (0+255),b
  1925   0013DE  0E00               	movlw	0
  1926   0013E0  6F45               	movwf	(main@SolarMidnight+28)& (0+255),b
  1927   0013E2                     
  1928                           ; BSR set to: 1
  1929                           ;main.c: 292:                     SolarMidnight.minutes[6] = 0;
  1930   0013E2  0E00               	movlw	0
  1931   0013E4  6F48               	movwf	(main@SolarMidnight+31)& (0+255),b
  1932   0013E6  0E00               	movlw	0
  1933   0013E8  6F47               	movwf	(main@SolarMidnight+30)& (0+255),b
  1934   0013EA                     
  1935                           ; BSR set to: 1
  1936                           ;main.c: 295:                 for (int i = 0; i <= Dawn.size-1; i++) {
  1937   0013EA  0E00               	movlw	0
  1938   0013EC  6F28               	movwf	(main@i+1)& (0+255),b
  1939   0013EE  0E00               	movlw	0
  1940   0013F0  6F27               	movwf	main@i& (0+255),b
  1941   0013F2  EFC1  F00A         	goto	l4454
  1942   0013F6                     l4446:
  1943                           
  1944                           ; BSR set to: 1
  1945                           ;main.c: 296:                     operation = (Dawn.hours[i] * 60 + Dawn.minutes[i]) + (
      +                          Dusk.hours[i]*60 + Dusk.minutes[i]);
  1946   0013F6  C127  F047         	movff	main@i,??_main
  1947   0013FA  C128  F048         	movff	main@i+1,??_main+1
  1948   0013FE  90D8               	bcf	status,0,c
  1949   001400  3647               	rlcf	??_main^0,f,c
  1950   001402  3648               	rlcf	(??_main+1)^0,f,c
  1951   001404  0E12               	movlw	18
  1952   001406  2647               	addwf	??_main^0,f,c
  1953   001408  0E00               	movlw	0
  1954   00140A  2248               	addwfc	(??_main+1)^0,f,c
  1955   00140C  0E69               	movlw	low main@Dawn
  1956   00140E  2447               	addwf	??_main^0,w,c
  1957   001410  6ED9               	movwf	fsr2l,c
  1958   001412  0E01               	movlw	high main@Dawn
  1959   001414  2048               	addwfc	(??_main+1)^0,w,c
  1960   001416  6EDA               	movwf	fsr2h,c
  1961   001418  CFDE F049          	movff	postinc2,??_main+2
  1962   00141C  CFDD F04A          	movff	postdec2,??_main+3
  1963   001420  C127  F04B         	movff	main@i,??_main+4
  1964   001424  C128  F04C         	movff	main@i+1,??_main+5
  1965   001428  90D8               	bcf	status,0,c
  1966   00142A  364B               	rlcf	(??_main+4)^0,f,c
  1967   00142C  364C               	rlcf	(??_main+5)^0,f,c
  1968   00142E  0E12               	movlw	18
  1969   001430  264B               	addwf	(??_main+4)^0,f,c
  1970   001432  0E00               	movlw	0
  1971   001434  224C               	addwfc	(??_main+5)^0,f,c
  1972   001436  0E49               	movlw	low main@Dusk
  1973   001438  244B               	addwf	(??_main+4)^0,w,c
  1974   00143A  6ED9               	movwf	fsr2l,c
  1975   00143C  0E01               	movlw	high main@Dusk
  1976   00143E  204C               	addwfc	(??_main+5)^0,w,c
  1977   001440  6EDA               	movwf	fsr2h,c
  1978   001442  CFDE F04D          	movff	postinc2,??_main+6
  1979   001446  CFDD F04E          	movff	postdec2,??_main+7
  1980   00144A  C127  F04F         	movff	main@i,??_main+8
  1981   00144E  C128  F050         	movff	main@i+1,??_main+9
  1982   001452  90D8               	bcf	status,0,c
  1983   001454  364F               	rlcf	(??_main+8)^0,f,c
  1984   001456  3650               	rlcf	(??_main+9)^0,f,c
  1985   001458  0E04               	movlw	4
  1986   00145A  264F               	addwf	(??_main+8)^0,f,c
  1987   00145C  0E00               	movlw	0
  1988   00145E  2250               	addwfc	(??_main+9)^0,f,c
  1989   001460  0E49               	movlw	low main@Dusk
  1990   001462  244F               	addwf	(??_main+8)^0,w,c
  1991   001464  6ED9               	movwf	fsr2l,c
  1992   001466  0E01               	movlw	high main@Dusk
  1993   001468  2050               	addwfc	(??_main+9)^0,w,c
  1994   00146A  6EDA               	movwf	fsr2h,c
  1995   00146C  CFDE F001          	movff	postinc2,___wmul@multiplier
  1996   001470  CFDD F002          	movff	postdec2,___wmul@multiplier+1
  1997   001474  0E00               	movlw	0
  1998   001476  6E04               	movwf	(___wmul@multiplicand+1)^0,c
  1999   001478  0E3C               	movlw	60
  2000   00147A  6E03               	movwf	___wmul@multiplicand^0,c
  2001   00147C  EC97  F019         	call	___wmul	;wreg free
  2002   001480  C001  F051         	movff	?___wmul,??_main+10
  2003   001484  C002  F052         	movff	?___wmul+1,??_main+11
  2004   001488  C127  F053         	movff	main@i,??_main+12
  2005   00148C  C128  F054         	movff	main@i+1,??_main+13
  2006   001490  90D8               	bcf	status,0,c
  2007   001492  3653               	rlcf	(??_main+12)^0,f,c
  2008   001494  3654               	rlcf	(??_main+13)^0,f,c
  2009   001496  0E04               	movlw	4
  2010   001498  2653               	addwf	(??_main+12)^0,f,c
  2011   00149A  0E00               	movlw	0
  2012   00149C  2254               	addwfc	(??_main+13)^0,f,c
  2013   00149E  0E69               	movlw	low main@Dawn
  2014   0014A0  2453               	addwf	(??_main+12)^0,w,c
  2015   0014A2  6ED9               	movwf	fsr2l,c
  2016   0014A4  0E01               	movlw	high main@Dawn
  2017   0014A6  2054               	addwfc	(??_main+13)^0,w,c
  2018   0014A8  6EDA               	movwf	fsr2h,c
  2019   0014AA  CFDE F001          	movff	postinc2,___wmul@multiplier
  2020   0014AE  CFDD F002          	movff	postdec2,___wmul@multiplier+1
  2021   0014B2  0E00               	movlw	0
  2022   0014B4  6E04               	movwf	(___wmul@multiplicand+1)^0,c
  2023   0014B6  0E3C               	movlw	60
  2024   0014B8  6E03               	movwf	___wmul@multiplicand^0,c
  2025   0014BA  EC97  F019         	call	___wmul	;wreg free
  2026   0014BE  5001               	movf	?___wmul^0,w,c
  2027   0014C0  2451               	addwf	(??_main+10)^0,w,c
  2028   0014C2  6E55               	movwf	(??_main+14)^0,c
  2029   0014C4  5002               	movf	(?___wmul+1)^0,w,c
  2030   0014C6  2052               	addwfc	(??_main+11)^0,w,c
  2031   0014C8  6E56               	movwf	(??_main+15)^0,c
  2032   0014CA  504D               	movf	(??_main+6)^0,w,c
  2033   0014CC  2455               	addwf	(??_main+14)^0,w,c
  2034   0014CE  6E57               	movwf	(??_main+16)^0,c
  2035   0014D0  504E               	movf	(??_main+7)^0,w,c
  2036   0014D2  2056               	addwfc	(??_main+15)^0,w,c
  2037   0014D4  6E58               	movwf	(??_main+17)^0,c
  2038   0014D6  5049               	movf	(??_main+2)^0,w,c
  2039   0014D8  2457               	addwf	(??_main+16)^0,w,c
  2040   0014DA  0101               	movlb	1	; () banked
  2041   0014DC  6F21               	movwf	main@operation& (0+255),b
  2042   0014DE  504A               	movf	(??_main+3)^0,w,c
  2043   0014E0  2058               	addwfc	(??_main+17)^0,w,c
  2044   0014E2  6F22               	movwf	(main@operation+1)& (0+255),b
  2045   0014E4                     
  2046                           ; BSR set to: 1
  2047                           ;main.c: 297:                     operation = operation * 0.5 + 12*60;
  2048   0014E4  0E00               	movlw	0
  2049   0014E6  6E2C               	movwf	___fladd@a^0,c
  2050   0014E8  0E00               	movlw	0
  2051   0014EA  6E2D               	movwf	(___fladd@a+1)^0,c
  2052   0014EC  0E34               	movlw	52
  2053   0014EE  6E2E               	movwf	(___fladd@a+2)^0,c
  2054   0014F0  0E44               	movlw	68
  2055   0014F2  6E2F               	movwf	(___fladd@a+3)^0,c
  2056   0014F4  0E00               	movlw	0
  2057   0014F6  6E13               	movwf	___flmul@a^0,c
  2058   0014F8  0E00               	movlw	0
  2059   0014FA  6E14               	movwf	(___flmul@a+1)^0,c
  2060   0014FC  0E00               	movlw	0
  2061   0014FE  6E15               	movwf	(___flmul@a+2)^0,c
  2062   001500  0E3F               	movlw	63
  2063   001502  6E16               	movwf	(___flmul@a+3)^0,c
  2064   001504  C121  F001         	movff	main@operation,___xxtofl@val
  2065   001508  C122  F002         	movff	main@operation+1,___xxtofl@val+1
  2066   00150C  0E00               	movlw	0
  2067   00150E  BE02               	btfsc	(___xxtofl@val+1)^0,7,c
  2068   001510  0EFF               	movlw	-1
  2069   001512  6E03               	movwf	(___xxtofl@val+2)^0,c
  2070   001514  6E04               	movwf	(___xxtofl@val+3)^0,c
  2071   001516  0E01               	movlw	1
  2072   001518  EC44  F012         	call	___xxtofl
  2073   00151C  C001  F00F         	movff	?___xxtofl,___flmul@b
  2074   001520  C002  F010         	movff	?___xxtofl+1,___flmul@b+1
  2075   001524  C003  F011         	movff	?___xxtofl+2,___flmul@b+2
  2076   001528  C004  F012         	movff	?___xxtofl+3,___flmul@b+3
  2077   00152C  EC2F  F010         	call	___flmul	;wreg free
  2078   001530  C00F  F028         	movff	?___flmul,___fladd@b
  2079   001534  C010  F029         	movff	?___flmul+1,___fladd@b+1
  2080   001538  C011  F02A         	movff	?___flmul+2,___fladd@b+2
  2081   00153C  C012  F02B         	movff	?___flmul+3,___fladd@b+3
  2082   001540  ECCF  F00D         	call	___fladd	;wreg free
  2083   001544  C028  F038         	movff	?___fladd,___fltol@f1
  2084   001548  C029  F039         	movff	?___fladd+1,___fltol@f1+1
  2085   00154C  C02A  F03A         	movff	?___fladd+2,___fltol@f1+2
  2086   001550  C02B  F03B         	movff	?___fladd+3,___fltol@f1+3
  2087   001554  EC23  F015         	call	___fltol	;wreg free
  2088   001558  C038  F121         	movff	?___fltol,main@operation
  2089   00155C  C039  F122         	movff	?___fltol+1,main@operation+1
  2090   001560                     
  2091                           ;main.c: 298:                     ArrayAppend(SolarMidnight.minutes, 7, operation);
  2092   001560  0E3B               	movlw	low (main@SolarMidnight+18)
  2093   001562  6E01               	movwf	ArrayAppend@arrayTime^0,c
  2094   001564  0E01               	movlw	high (main@SolarMidnight+18)
  2095   001566  6E02               	movwf	(ArrayAppend@arrayTime+1)^0,c
  2096   001568  0E00               	movlw	0
  2097   00156A  6E04               	movwf	(ArrayAppend@size+1)^0,c
  2098   00156C  0E07               	movlw	7
  2099   00156E  6E03               	movwf	ArrayAppend@size^0,c
  2100   001570  C121  F005         	movff	main@operation,ArrayAppend@Time
  2101   001574  C122  F006         	movff	main@operation+1,ArrayAppend@Time+1
  2102   001578  EC04  F018         	call	_ArrayAppend	;wreg free
  2103   00157C                     
  2104                           ;main.c: 299:                 }
  2105   00157C  0101               	movlb	1	; () banked
  2106   00157E  4B27               	infsnz	main@i& (0+255),f,b
  2107   001580  2B28               	incf	(main@i+1)& (0+255),f,b
  2108   001582                     l4454:
  2109                           
  2110                           ; BSR set to: 1
  2111   001582  0EFF               	movlw	255
  2112   001584  2569               	addwf	main@Dawn& (0+255),w,b
  2113   001586  6E47               	movwf	??_main^0,c
  2114   001588  0EFF               	movlw	255
  2115   00158A  216A               	addwfc	(main@Dawn+1)& (0+255),w,b
  2116   00158C  6E48               	movwf	(??_main+1)^0,c
  2117   00158E  5127               	movf	main@i& (0+255),w,b
  2118   001590  5C47               	subwf	??_main^0,w,c
  2119   001592  5048               	movf	(??_main+1)^0,w,c
  2120   001594  0A80               	xorlw	128
  2121   001596  6E49               	movwf	(??_main+2)^0,c
  2122   001598  5128               	movf	(main@i+1)& (0+255),w,b
  2123   00159A  0A80               	xorlw	128
  2124   00159C  5849               	subwfb	(??_main+2)^0,w,c
  2125   00159E  B0D8               	btfsc	status,0,c
  2126   0015A0  EFD4  F00A         	goto	u4711
  2127   0015A4  EFD6  F00A         	goto	u4710
  2128   0015A8                     u4711:
  2129   0015A8  EFFB  F009         	goto	l4446
  2130   0015AC                     u4710:
  2131   0015AC                     
  2132                           ; BSR set to: 1
  2133                           ;main.c: 300:                 int avgSolarMidnight = ArrayAverage(SolarMidnight.minutes,
      +                           7);
  2134   0015AC  0E3B               	movlw	low (main@SolarMidnight+18)
  2135   0015AE  6E08               	movwf	ArrayAverage@arrayTime^0,c
  2136   0015B0  0E01               	movlw	high (main@SolarMidnight+18)
  2137   0015B2  6E09               	movwf	(ArrayAverage@arrayTime+1)^0,c
  2138   0015B4  0E00               	movlw	0
  2139   0015B6  6E0B               	movwf	(ArrayAverage@size+1)^0,c
  2140   0015B8  0E07               	movlw	7
  2141   0015BA  6E0A               	movwf	ArrayAverage@size^0,c
  2142   0015BC  EC78  F017         	call	_ArrayAverage	;wreg free
  2143   0015C0  C008  F116         	movff	?_ArrayAverage,main@avgSolarMidnight
  2144   0015C4  C009  F117         	movff	?_ArrayAverage+1,main@avgSolarMidnight+1
  2145   0015C8                     
  2146                           ;main.c: 301:                 int minute_diff = knownSolarMidnight - avgSolarMidnight;
  2147   0015C8  0101               	movlb	1	; () banked
  2148   0015CA  5116               	movf	main@avgSolarMidnight& (0+255),w,b
  2149   0015CC  5D14               	subwf	main@knownSolarMidnight& (0+255),w,b
  2150   0015CE  6F18               	movwf	main@minute_diff& (0+255),b
  2151   0015D0  5117               	movf	(main@avgSolarMidnight+1)& (0+255),w,b
  2152   0015D2  5915               	subwfb	(main@knownSolarMidnight+1)& (0+255),w,b
  2153   0015D4  6F19               	movwf	(main@minute_diff+1)& (0+255),b
  2154   0015D6                     
  2155                           ; BSR set to: 1
  2156                           ;main.c: 304:                 clock.minutes = clock.minutes + minute_diff;
  2157   0015D6  5118               	movf	main@minute_diff& (0+255),w,b
  2158   0015D8  25D3               	addwf	(main@clock+2)& (0+255),w,b
  2159   0015DA  6FD3               	movwf	(main@clock+2)& (0+255),b
  2160   0015DC  5119               	movf	(main@minute_diff+1)& (0+255),w,b
  2161   0015DE  21D4               	addwfc	(main@clock+3)& (0+255),w,b
  2162   0015E0  6FD4               	movwf	(main@clock+3)& (0+255),b
  2163   0015E2                     
  2164                           ; BSR set to: 1
  2165                           ;main.c: 308:                 daycount = 0;
  2166   0015E2  0E00               	movlw	0
  2167   0015E4  6F1E               	movwf	(main@daycount+1)& (0+255),b
  2168   0015E6  0E00               	movlw	0
  2169   0015E8  6F1D               	movwf	main@daycount& (0+255),b
  2170   0015EA  EF7E  F008         	goto	l4348
  2171   0015EE  EF18  F000         	goto	start
  2172   0015F2                     __end_of_main:
  2173                           	callstack 0
  2174                           
  2175 ;; *************** function _sprintf *****************
  2176 ;; Defined at:
  2177 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\nf_sprintf.c"
  2178 ;; Parameters:    Size  Location     Type
  2179 ;;  s               2   46[COMRAM] PTR unsigned char 
  2180 ;;		 -> main@buffer(18), 
  2181 ;;  fmt             1   48[COMRAM] PTR const unsigned char 
  2182 ;;		 -> STR_3(21), STR_2(20), STR_1(26), 
  2183 ;; Auto vars:     Size  Location     Type
  2184 ;;  f              12   58[COMRAM] struct _IO_FILE
  2185 ;;  ret             2    0        int 
  2186 ;;  ap              1   57[COMRAM] PTR void [1]
  2187 ;;		 -> ?_sprintf(2), 
  2188 ;; Return value:  Size  Location     Type
  2189 ;;                  2   46[COMRAM] int 
  2190 ;; Registers used:
  2191 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2192 ;; Tracked objects:
  2193 ;;		On entry : 0/0
  2194 ;;		On exit  : 0/0
  2195 ;;		Unchanged: 0/0
  2196 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2197 ;;      Params:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2198 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2199 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2200 ;;      Totals:        24       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2201 ;;Total ram usage:       24 bytes
  2202 ;; Hardware stack levels used: 1
  2203 ;; Hardware stack levels required when called: 8
  2204 ;; This function calls:
  2205 ;;		_vfprintf
  2206 ;; This function is called by:
  2207 ;;		_main
  2208 ;;		_ADC2String
  2209 ;; This function uses a non-reentrant model
  2210 ;;
  2211                           
  2212                           	psect	text1
  2213   0031E4                     __ptext1:
  2214                           	callstack 0
  2215   0031E4                     _sprintf:
  2216                           	callstack 22
  2217   0031E4  0E32               	movlw	low (?_sprintf+3)
  2218   0031E6  6E3A               	movwf	sprintf@ap^0,c
  2219   0031E8  C02F  F03B         	movff	sprintf@s,sprintf@f
  2220   0031EC  C030  F03C         	movff	sprintf@s+1,sprintf@f+1
  2221   0031F0  0E00               	movlw	0
  2222   0031F2  6E3F               	movwf	(sprintf@f+4)^0,c
  2223   0031F4  0E00               	movlw	0
  2224   0031F6  6E3E               	movwf	(sprintf@f+3)^0,c
  2225   0031F8  0E00               	movlw	0
  2226   0031FA  6E46               	movwf	(sprintf@f+11)^0,c
  2227   0031FC  0E00               	movlw	0
  2228   0031FE  6E45               	movwf	(sprintf@f+10)^0,c
  2229   003200  0E3B               	movlw	low sprintf@f
  2230   003202  6E2B               	movwf	vfprintf@fp^0,c
  2231   003204  C031  F02C         	movff	sprintf@fmt,vfprintf@fmt
  2232   003208  0E3A               	movlw	low sprintf@ap
  2233   00320A  6E2D               	movwf	vfprintf@ap^0,c
  2234   00320C  ECD1  F018         	call	_vfprintf	;wreg free
  2235   003210  503E               	movf	(sprintf@f+3)^0,w,c
  2236   003212  242F               	addwf	sprintf@s^0,w,c
  2237   003214  6ED9               	movwf	fsr2l,c
  2238   003216  503F               	movf	(sprintf@f+4)^0,w,c
  2239   003218  2030               	addwfc	(sprintf@s+1)^0,w,c
  2240   00321A  6EDA               	movwf	fsr2h,c
  2241   00321C  6ADF               	clrf	indf2,c
  2242   00321E  0012               	return		;funcret
  2243   003220                     __end_of_sprintf:
  2244                           	callstack 0
  2245                           
  2246 ;; *************** function _vfprintf *****************
  2247 ;; Defined at:
  2248 ;;		line 1817 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
  2249 ;; Parameters:    Size  Location     Type
  2250 ;;  fp              1   42[COMRAM] PTR struct _IO_FILE
  2251 ;;		 -> sprintf@f(12), 
  2252 ;;  fmt             1   43[COMRAM] PTR const unsigned char 
  2253 ;;		 -> STR_3(21), STR_2(20), STR_1(26), 
  2254 ;;  ap              1   44[COMRAM] PTR PTR void 
  2255 ;;		 -> sprintf@ap(1), 
  2256 ;; Auto vars:     Size  Location     Type
  2257 ;;  cfmt            1   45[COMRAM] PTR unsigned char 
  2258 ;;		 -> STR_3(21), STR_2(20), STR_1(26), 
  2259 ;; Return value:  Size  Location     Type
  2260 ;;                  2   42[COMRAM] int 
  2261 ;; Registers used:
  2262 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2263 ;; Tracked objects:
  2264 ;;		On entry : 0/0
  2265 ;;		On exit  : 0/0
  2266 ;;		Unchanged: 0/0
  2267 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2268 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2269 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2270 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2271 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2272 ;;Total ram usage:        4 bytes
  2273 ;; Hardware stack levels used: 1
  2274 ;; Hardware stack levels required when called: 7
  2275 ;; This function calls:
  2276 ;;		_vfpfcnvrt
  2277 ;; This function is called by:
  2278 ;;		_sprintf
  2279 ;; This function uses a non-reentrant model
  2280 ;;
  2281                           
  2282                           	psect	text2
  2283   0031A2                     __ptext2:
  2284                           	callstack 0
  2285   0031A2                     _vfprintf:
  2286                           	callstack 22
  2287   0031A2                     
  2288                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1817: int vfprint
      +                          f(FILE *fp, const char *fmt, va_list ap);C:\Program Files\Microchip\xc8\v2.45\pic\source
      +                          s\c99\common\doprnt.c: 1818: {;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\comm
      +                          on\doprnt.c: 1820:     char *cfmt;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\
      +                          common\doprnt.c: 1822:     cfmt = (char *)fmt;
  2289   0031A2  C02C  F02E         	movff	vfprintf@fmt,vfprintf@cfmt
  2290                           
  2291                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1826:     while (
      +                          *cfmt) {
  2292   0031A6  EFDD  F018         	goto	l2934
  2293   0031AA                     l2932:
  2294                           
  2295                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1830:    vfpfcnvr
      +                          t(fp, &cfmt, ap);
  2296   0031AA  C02B  F020         	movff	vfprintf@fp,vfpfcnvrt@fp
  2297   0031AE  0E2E               	movlw	low vfprintf@cfmt
  2298   0031B0  6E21               	movwf	vfpfcnvrt@fmt^0,c
  2299   0031B2  C02D  F022         	movff	vfprintf@ap,vfpfcnvrt@ap
  2300   0031B6  EC1E  F013         	call	_vfpfcnvrt	;wreg free
  2301   0031BA                     l2934:
  2302                           
  2303                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1826:     while (
      +                          *cfmt) {
  2304   0031BA  C02E  FFF6         	movff	vfprintf@cfmt,tblptrl
  2305   0031BE                     	if	1	;There is more than 1 active tblptr byte
  2306   0031BE  0E0E               	movlw	high __smallconst
  2307   0031C0  6EF7               	movwf	tblptrh,c
  2308   0031C2                     	endif
  2309   0031C2                     	if	0	;tblptru may be non-zero
  2310   0031C2                     	endif
  2311   0031C2                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  2312   0031C2  0E00               	movlw	low (__smallconst shr (0+16))
  2313   0031C4  6EF8               	movwf	tblptru,c
  2314   0031C6                     	endif
  2315   0031C6  0008               	tblrd		*
  2316   0031C8  50F5               	movf	tablat,w,c
  2317   0031CA  0900               	iorlw	0
  2318   0031CC  A4D8               	btfss	status,2,c
  2319   0031CE  EFEB  F018         	goto	u2691
  2320   0031D2  EFED  F018         	goto	u2690
  2321   0031D6                     u2691:
  2322   0031D6  EFD5  F018         	goto	l2932
  2323   0031DA                     u2690:
  2324   0031DA                     
  2325                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1835:  return 0;
  2326   0031DA  0E00               	movlw	0
  2327   0031DC  6E2C               	movwf	(?_vfprintf+1)^0,c
  2328   0031DE  0E00               	movlw	0
  2329   0031E0  6E2B               	movwf	?_vfprintf^0,c
  2330   0031E2  0012               	return		;funcret
  2331   0031E4                     __end_of_vfprintf:
  2332                           	callstack 0
  2333                           
  2334 ;; *************** function _vfpfcnvrt *****************
  2335 ;; Defined at:
  2336 ;;		line 1177 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
  2337 ;; Parameters:    Size  Location     Type
  2338 ;;  fp              1   31[COMRAM] PTR struct _IO_FILE
  2339 ;;		 -> sprintf@f(12), 
  2340 ;;  fmt             1   32[COMRAM] PTR PTR unsigned char 
  2341 ;;		 -> vfprintf@cfmt(1), 
  2342 ;;  ap              1   33[COMRAM] PTR PTR void 
  2343 ;;		 -> sprintf@ap(1), 
  2344 ;; Auto vars:     Size  Location     Type
  2345 ;;  convarg         4   36[COMRAM] struct .
  2346 ;;  cp              1   41[COMRAM] PTR unsigned char 
  2347 ;;		 -> STR_3(21), STR_2(20), STR_1(26), 
  2348 ;;  done            1   40[COMRAM] _Bool 
  2349 ;;  c               1    0        unsigned char 
  2350 ;; Return value:  Size  Location     Type
  2351 ;;                  1    wreg      void 
  2352 ;; Registers used:
  2353 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2354 ;; Tracked objects:
  2355 ;;		On entry : 0/0
  2356 ;;		On exit  : 0/0
  2357 ;;		Unchanged: 0/0
  2358 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2359 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2360 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2361 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2362 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2363 ;;Total ram usage:       11 bytes
  2364 ;; Hardware stack levels used: 1
  2365 ;; Hardware stack levels required when called: 6
  2366 ;; This function calls:
  2367 ;;		_dtoa
  2368 ;;		_fputc
  2369 ;;		_read_prec_or_width
  2370 ;; This function is called by:
  2371 ;;		_vfprintf
  2372 ;; This function uses a non-reentrant model
  2373 ;;
  2374                           
  2375                           	psect	text3
  2376   00263C                     __ptext3:
  2377                           	callstack 0
  2378   00263C                     _vfpfcnvrt:
  2379                           	callstack 22
  2380   00263C                     
  2381                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1177: vfpfcnvrt(F
      +                          ILE *fp, char *fmt[], va_list ap);C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\c
      +                          ommon\doprnt.c: 1178: {;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\dopr
      +                          nt.c: 1179:     char c, *cp;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common
      +                          \doprnt.c: 1180:     _Bool done;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\co
      +                          mmon\doprnt.c: 1188:  } convarg;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\co
      +                          mmon\doprnt.c: 1201:     if ((*fmt)[0] == '%') {
  2382   00263C  5021               	movf	vfpfcnvrt@fmt^0,w,c
  2383   00263E  6ED9               	movwf	fsr2l,c
  2384   002640  6ADA               	clrf	fsr2h,c
  2385   002642  CFDF FFF6          	movff	indf2,tblptrl
  2386   002646                     	if	1	;There is more than 1 active tblptr byte
  2387   002646  0E0E               	movlw	high __smallconst
  2388   002648  6EF7               	movwf	tblptrh,c
  2389   00264A                     	endif
  2390   00264A                     	if	0	;tblptru may be non-zero
  2391   00264A                     	endif
  2392   00264A                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  2393   00264A  0E00               	movlw	low (__smallconst shr (0+16))
  2394   00264C  6EF8               	movwf	tblptru,c
  2395   00264E                     	endif
  2396   00264E  0008               	tblrd		*
  2397   002650  50F5               	movf	tablat,w,c
  2398   002652  0A25               	xorlw	37
  2399   002654  A4D8               	btfss	status,2,c
  2400   002656  EF2F  F013         	goto	u2601
  2401   00265A  EF31  F013         	goto	u2600
  2402   00265E                     u2601:
  2403   00265E  EFCB  F013         	goto	l2890
  2404   002662                     u2600:
  2405   002662                     
  2406                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1202:         ++*
      +                          fmt;
  2407   002662  5021               	movf	vfpfcnvrt@fmt^0,w,c
  2408   002664  6ED9               	movwf	fsr2l,c
  2409   002666  6ADA               	clrf	fsr2h,c
  2410   002668  2ADF               	incf	indf2,f,c
  2411   00266A                     
  2412                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1204:         fla
      +                          gs = width = 0;
  2413   00266A  0E00               	movlw	0
  2414   00266C  6E5A               	movwf	(_width+1)^0,c
  2415   00266E  0E00               	movlw	0
  2416   002670  6E59               	movwf	_width^0,c
  2417   002672  C059  F05D         	movff	_width,_flags
  2418   002676                     
  2419                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1205:         pre
      +                          c = -1;
  2420   002676  685B               	setf	_prec^0,c
  2421   002678  685C               	setf	(_prec+1)^0,c
  2422   00267A                     
  2423                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1209:         don
      +                          e = 0;
  2424   00267A  0E00               	movlw	0
  2425   00267C  6E29               	movwf	vfpfcnvrt@done^0,c
  2426                           
  2427                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1210:         whi
      +                          le (!done) {
  2428   00267E  EF67  F013         	goto	l2864
  2429   002682                     l2854:
  2430                           
  2431                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1220:            
      +                                   flags |= (1 << 1);
  2432   002682  825D               	bsf	_flags^0,1,c
  2433   002684                     
  2434                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1221:            
      +                                   ++*fmt;
  2435   002684  5021               	movf	vfpfcnvrt@fmt^0,w,c
  2436   002686  6ED9               	movwf	fsr2l,c
  2437   002688  6ADA               	clrf	fsr2h,c
  2438   00268A  2ADF               	incf	indf2,f,c
  2439                           
  2440                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1222:            
      +                                   break;
  2441   00268C  EF67  F013         	goto	l2864
  2442   002690                     l2858:
  2443                           
  2444                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1243:            
      +                                   done = 1;
  2445   002690  0E01               	movlw	1
  2446   002692  6E29               	movwf	vfpfcnvrt@done^0,c
  2447                           
  2448                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1244:            
      +                                   break;
  2449   002694  EF67  F013         	goto	l2864
  2450   002698                     l2862:
  2451   002698  5021               	movf	vfpfcnvrt@fmt^0,w,c
  2452   00269A  6ED9               	movwf	fsr2l,c
  2453   00269C  6ADA               	clrf	fsr2h,c
  2454   00269E  CFDF FFF6          	movff	indf2,tblptrl
  2455   0026A2                     	if	1	;There is more than 1 active tblptr byte
  2456   0026A2  0E0E               	movlw	high __smallconst
  2457   0026A4  6EF7               	movwf	tblptrh,c
  2458   0026A6                     	endif
  2459   0026A6                     	if	0	;tblptru may be non-zero
  2460   0026A6                     	endif
  2461   0026A6                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  2462   0026A6  0E00               	movlw	low (__smallconst shr (0+16))
  2463   0026A8  6EF8               	movwf	tblptru,c
  2464   0026AA                     	endif
  2465   0026AA  0008               	tblrd		*
  2466   0026AC  50F5               	movf	tablat,w,c
  2467   0026AE  6E23               	movwf	??_vfpfcnvrt^0,c
  2468   0026B0  6A24               	clrf	(??_vfpfcnvrt+1)^0,c
  2469                           
  2470                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2471                           ; Switch size 1, requested type "simple"
  2472                           ; Number of cases is 1, Range of values is 0 to 0
  2473                           ; switch strategies available:
  2474                           ; Name         Instructions Cycles
  2475                           ; simple_byte            4     3 (average)
  2476                           ;	Chosen strategy is simple_byte
  2477   0026B2  5024               	movf	(??_vfpfcnvrt+1)^0,w,c
  2478   0026B4  0A00               	xorlw	0	; case 0
  2479   0026B6  B4D8               	btfsc	status,2,c
  2480   0026B8  EF60  F013         	goto	l4484
  2481   0026BC  EF48  F013         	goto	l2858
  2482   0026C0                     l4484:
  2483                           
  2484                           ; Switch size 1, requested type "simple"
  2485                           ; Number of cases is 1, Range of values is 48 to 48
  2486                           ; switch strategies available:
  2487                           ; Name         Instructions Cycles
  2488                           ; simple_byte            4     3 (average)
  2489                           ;	Chosen strategy is simple_byte
  2490   0026C0  5023               	movf	??_vfpfcnvrt^0,w,c
  2491   0026C2  0A30               	xorlw	48	; case 48
  2492   0026C4  B4D8               	btfsc	status,2,c
  2493   0026C6  EF41  F013         	goto	l2854
  2494   0026CA  EF48  F013         	goto	l2858
  2495   0026CE                     l2864:
  2496                           
  2497                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1210:         whi
      +                          le (!done) {
  2498   0026CE  5029               	movf	vfpfcnvrt@done^0,w,c
  2499   0026D0  B4D8               	btfsc	status,2,c
  2500   0026D2  EF6D  F013         	goto	u2611
  2501   0026D6  EF6F  F013         	goto	u2610
  2502   0026DA                     u2611:
  2503   0026DA  EF4C  F013         	goto	l2862
  2504   0026DE                     u2610:
  2505   0026DE                     
  2506                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1256:   width = r
      +                          ead_prec_or_width(fmt, ap);
  2507   0026DE  C021  F007         	movff	vfpfcnvrt@fmt,read_prec_or_width@fmt
  2508   0026E2  C022  F008         	movff	vfpfcnvrt@ap,read_prec_or_width@ap
  2509   0026E6  EC21  F017         	call	_read_prec_or_width	;wreg free
  2510   0026EA  C007  F059         	movff	?_read_prec_or_width,_width
  2511   0026EE  C008  F05A         	movff	?_read_prec_or_width+1,_width+1
  2512   0026F2                     
  2513                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1257:   if (width
      +                           < 0) {
  2514   0026F2  BE5A               	btfsc	(_width+1)^0,7,c
  2515   0026F4  EF80  F013         	goto	u2620
  2516   0026F8  EF7E  F013         	goto	u2621
  2517   0026FC                     u2621:
  2518   0026FC  EF85  F013         	goto	l2872
  2519   002700                     u2620:
  2520   002700                     
  2521                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1258:    flags |=
      +                           (1 << 0);
  2522   002700  805D               	bsf	_flags^0,0,c
  2523                           
  2524                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1259:    width = 
      +                          -width;
  2525   002702  6C59               	negf	_width^0,c
  2526   002704  1E5A               	comf	(_width+1)^0,f,c
  2527   002706  B0D8               	btfsc	status,0,c
  2528   002708  2A5A               	incf	(_width+1)^0,f,c
  2529   00270A                     l2872:
  2530                           
  2531                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1291:   cp = *fmt
      +                          ;
  2532   00270A  5021               	movf	vfpfcnvrt@fmt^0,w,c
  2533   00270C  6ED9               	movwf	fsr2l,c
  2534   00270E  6ADA               	clrf	fsr2h,c
  2535   002710  50DF               	movf	indf2,w,c
  2536   002712  6E2A               	movwf	vfpfcnvrt@cp^0,c
  2537   002714                     
  2538                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1361:   if (*cp =
      +                          = 'd' || *cp == 'i') {
  2539   002714  C02A  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  2540   002718                     	if	1	;There is more than 1 active tblptr byte
  2541   002718  0E0E               	movlw	high __smallconst
  2542   00271A  6EF7               	movwf	tblptrh,c
  2543   00271C                     	endif
  2544   00271C                     	if	0	;tblptru may be non-zero
  2545   00271C                     	endif
  2546   00271C                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  2547   00271C  0E00               	movlw	low (__smallconst shr (0+16))
  2548   00271E  6EF8               	movwf	tblptru,c
  2549   002720                     	endif
  2550   002720  0008               	tblrd		*
  2551   002722  50F5               	movf	tablat,w,c
  2552   002724  0A64               	xorlw	100
  2553   002726  B4D8               	btfsc	status,2,c
  2554   002728  EF98  F013         	goto	u2631
  2555   00272C  EF9A  F013         	goto	u2630
  2556   002730                     u2631:
  2557   002730  EFAA  F013         	goto	l2878
  2558   002734                     u2630:
  2559   002734  C02A  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  2560   002738                     	if	1	;There is more than 1 active tblptr byte
  2561   002738  0E0E               	movlw	high __smallconst
  2562   00273A  6EF7               	movwf	tblptrh,c
  2563   00273C                     	endif
  2564   00273C                     	if	0	;tblptru may be non-zero
  2565   00273C                     	endif
  2566   00273C                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  2567   00273C  0E00               	movlw	low (__smallconst shr (0+16))
  2568   00273E  6EF8               	movwf	tblptru,c
  2569   002740                     	endif
  2570   002740  0008               	tblrd		*
  2571   002742  50F5               	movf	tablat,w,c
  2572   002744  0A69               	xorlw	105
  2573   002746  A4D8               	btfss	status,2,c
  2574   002748  EFA8  F013         	goto	u2641
  2575   00274C  EFAA  F013         	goto	u2640
  2576   002750                     u2641:
  2577   002750  EFC5  F013         	goto	l2886
  2578   002754                     u2640:
  2579   002754                     l2878:
  2580                           
  2581                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1404:    convarg.
      +                          sint = (vfpf_sint_t)(int)(*(int *)__va_arg(*(int **)ap, (int)0));
  2582   002754  5022               	movf	vfpfcnvrt@ap^0,w,c
  2583   002756  6ED9               	movwf	fsr2l,c
  2584   002758  6ADA               	clrf	fsr2h,c
  2585   00275A  0E02               	movlw	2
  2586   00275C  26DF               	addwf	indf2,f,c
  2587   00275E  5CDF               	subwf	indf2,w,c
  2588   002760  6ED9               	movwf	fsr2l,c
  2589   002762  6ADA               	clrf	fsr2h,c
  2590   002764  CFDE F025          	movff	postinc2,vfpfcnvrt@convarg
  2591   002768  CFDE F026          	movff	postinc2,vfpfcnvrt@convarg+1
  2592   00276C                     
  2593                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1406:    *fmt = c
      +                          p+1;
  2594   00276C  5021               	movf	vfpfcnvrt@fmt^0,w,c
  2595   00276E  6ED9               	movwf	fsr2l,c
  2596   002770  6ADA               	clrf	fsr2h,c
  2597   002772  282A               	incf	vfpfcnvrt@cp^0,w,c
  2598   002774  6EDF               	movwf	indf2,c
  2599   002776                     
  2600                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1432:    return (
      +                          void) dtoa(fp, convarg.sint);;	Return value of _vfpfcnvrt is never used
  2601   002776  C020  F015         	movff	vfpfcnvrt@fp,dtoa@fp
  2602   00277A  C025  F016         	movff	vfpfcnvrt@convarg,dtoa@d
  2603   00277E  C026  F017         	movff	vfpfcnvrt@convarg+1,dtoa@d+1
  2604   002782  ECDF  F013         	call	_dtoa	;wreg free
  2605   002786  EFDE  F013         	goto	l1090
  2606   00278A                     l2886:
  2607                           
  2608                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1806:         ++*
      +                          fmt;
  2609   00278A  5021               	movf	vfpfcnvrt@fmt^0,w,c
  2610   00278C  6ED9               	movwf	fsr2l,c
  2611   00278E  6ADA               	clrf	fsr2h,c
  2612   002790  2ADF               	incf	indf2,f,c
  2613   002792  EFDE  F013         	goto	l1090
  2614   002796                     l2890:
  2615                           
  2616                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1811:     fputc((
      +                          int)(*fmt)[0], fp);
  2617   002796  5021               	movf	vfpfcnvrt@fmt^0,w,c
  2618   002798  6ED9               	movwf	fsr2l,c
  2619   00279A  6ADA               	clrf	fsr2h,c
  2620   00279C  CFDF FFF6          	movff	indf2,tblptrl
  2621   0027A0                     	if	1	;There is more than 1 active tblptr byte
  2622   0027A0  0E0E               	movlw	high __smallconst
  2623   0027A2  6EF7               	movwf	tblptrh,c
  2624   0027A4                     	endif
  2625   0027A4                     	if	0	;tblptru may be non-zero
  2626   0027A4                     	endif
  2627   0027A4                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  2628   0027A4  0E00               	movlw	low (__smallconst shr (0+16))
  2629   0027A6  6EF8               	movwf	tblptru,c
  2630   0027A8                     	endif
  2631   0027A8  0008               	tblrd		*
  2632   0027AA  50F5               	movf	tablat,w,c
  2633   0027AC  6E01               	movwf	fputc@c^0,c
  2634   0027AE  6A02               	clrf	(fputc@c+1)^0,c
  2635   0027B0  C020  F003         	movff	vfpfcnvrt@fp,fputc@fp
  2636   0027B4  EC6C  F016         	call	_fputc	;wreg free
  2637   0027B8  EFC5  F013         	goto	l2886
  2638   0027BC                     l1090:
  2639   0027BC  0012               	return		;funcret
  2640   0027BE                     __end_of_vfpfcnvrt:
  2641                           	callstack 0
  2642                           
  2643 ;; *************** function _read_prec_or_width *****************
  2644 ;; Defined at:
  2645 ;;		line 1158 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
  2646 ;; Parameters:    Size  Location     Type
  2647 ;;  fmt             1    6[COMRAM] PTR PTR const unsigned c
  2648 ;;		 -> vfprintf@cfmt(1), 
  2649 ;;  ap              1    7[COMRAM] PTR PTR void [1]
  2650 ;;		 -> sprintf@ap(1), 
  2651 ;; Auto vars:     Size  Location     Type
  2652 ;;  c               1    8[COMRAM] unsigned char 
  2653 ;;  n               2    9[COMRAM] int 
  2654 ;; Return value:  Size  Location     Type
  2655 ;;                  2    6[COMRAM] int 
  2656 ;; Registers used:
  2657 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2658 ;; Tracked objects:
  2659 ;;		On entry : 0/0
  2660 ;;		On exit  : 0/0
  2661 ;;		Unchanged: 0/0
  2662 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2663 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2664 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2665 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2666 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2667 ;;Total ram usage:        5 bytes
  2668 ;; Hardware stack levels used: 1
  2669 ;; Hardware stack levels required when called: 2
  2670 ;; This function calls:
  2671 ;;		___wmul
  2672 ;; This function is called by:
  2673 ;;		_vfpfcnvrt
  2674 ;; This function uses a non-reentrant model
  2675 ;;
  2676                           
  2677                           	psect	text4
  2678   002E42                     __ptext4:
  2679                           	callstack 0
  2680   002E42                     _read_prec_or_width:
  2681                           	callstack 25
  2682   002E42                     
  2683                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1159:     int n =
      +                           0;
  2684   002E42  0E00               	movlw	0
  2685   002E44  6E0B               	movwf	(read_prec_or_width@n+1)^0,c
  2686   002E46  0E00               	movlw	0
  2687   002E48  6E0A               	movwf	read_prec_or_width@n^0,c
  2688   002E4A                     
  2689                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1160:     if ((*f
      +                          mt)[0] == '*') {
  2690   002E4A  5007               	movf	read_prec_or_width@fmt^0,w,c
  2691   002E4C  6ED9               	movwf	fsr2l,c
  2692   002E4E  6ADA               	clrf	fsr2h,c
  2693   002E50  CFDF FFF6          	movff	indf2,tblptrl
  2694   002E54                     	if	1	;There is more than 1 active tblptr byte
  2695   002E54  0E0E               	movlw	high __smallconst
  2696   002E56  6EF7               	movwf	tblptrh,c
  2697   002E58                     	endif
  2698   002E58                     	if	0	;tblptru may be non-zero
  2699   002E58                     	endif
  2700   002E58                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  2701   002E58  0E00               	movlw	low (__smallconst shr (0+16))
  2702   002E5A  6EF8               	movwf	tblptru,c
  2703   002E5C                     	endif
  2704   002E5C  0008               	tblrd		*
  2705   002E5E  50F5               	movf	tablat,w,c
  2706   002E60  0A2A               	xorlw	42
  2707   002E62  A4D8               	btfss	status,2,c
  2708   002E64  EF36  F017         	goto	u2541
  2709   002E68  EF38  F017         	goto	u2540
  2710   002E6C                     u2541:
  2711   002E6C  EF5E  F017         	goto	l2822
  2712   002E70                     u2540:
  2713   002E70                     
  2714                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1161:         ++*
      +                          fmt;
  2715   002E70  5007               	movf	read_prec_or_width@fmt^0,w,c
  2716   002E72  6ED9               	movwf	fsr2l,c
  2717   002E74  6ADA               	clrf	fsr2h,c
  2718   002E76  2ADF               	incf	indf2,f,c
  2719   002E78                     
  2720                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1162:         n =
      +                           (*(int *)__va_arg(*(int **)*ap, (int)0));
  2721   002E78  5008               	movf	read_prec_or_width@ap^0,w,c
  2722   002E7A  6ED9               	movwf	fsr2l,c
  2723   002E7C  6ADA               	clrf	fsr2h,c
  2724   002E7E  0E02               	movlw	2
  2725   002E80  26DF               	addwf	indf2,f,c
  2726   002E82  5CDF               	subwf	indf2,w,c
  2727   002E84  6ED9               	movwf	fsr2l,c
  2728   002E86  6ADA               	clrf	fsr2h,c
  2729   002E88  CFDE F00A          	movff	postinc2,read_prec_or_width@n
  2730   002E8C  CFDE F00B          	movff	postinc2,read_prec_or_width@n+1
  2731                           
  2732                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1163:     } else 
      +                          {
  2733   002E90  EF73  F017         	goto	l1071
  2734   002E94                     l2818:
  2735                           
  2736                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1166:            
      +                           n = n * 10 + c;
  2737   002E94  C00A  F001         	movff	read_prec_or_width@n,___wmul@multiplier
  2738   002E98  C00B  F002         	movff	read_prec_or_width@n+1,___wmul@multiplier+1
  2739   002E9C  0E00               	movlw	0
  2740   002E9E  6E04               	movwf	(___wmul@multiplicand+1)^0,c
  2741   002EA0  0E0A               	movlw	10
  2742   002EA2  6E03               	movwf	___wmul@multiplicand^0,c
  2743   002EA4  EC97  F019         	call	___wmul	;wreg free
  2744   002EA8  5009               	movf	read_prec_or_width@c^0,w,c
  2745   002EAA  2401               	addwf	?___wmul^0,w,c
  2746   002EAC  6E0A               	movwf	read_prec_or_width@n^0,c
  2747   002EAE  0E00               	movlw	0
  2748   002EB0  2002               	addwfc	(?___wmul+1)^0,w,c
  2749   002EB2  6E0B               	movwf	(read_prec_or_width@n+1)^0,c
  2750   002EB4                     
  2751                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1167:            
      +                           ++*fmt;
  2752   002EB4  5007               	movf	read_prec_or_width@fmt^0,w,c
  2753   002EB6  6ED9               	movwf	fsr2l,c
  2754   002EB8  6ADA               	clrf	fsr2h,c
  2755   002EBA  2ADF               	incf	indf2,f,c
  2756   002EBC                     l2822:
  2757                           
  2758                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1165:         whi
      +                          le ((c = ((unsigned)(*fmt)[0]) - '0') < 10) {
  2759   002EBC  5007               	movf	read_prec_or_width@fmt^0,w,c
  2760   002EBE  6ED9               	movwf	fsr2l,c
  2761   002EC0  6ADA               	clrf	fsr2h,c
  2762   002EC2  CFDF FFF6          	movff	indf2,tblptrl
  2763   002EC6                     	if	1	;There is more than 1 active tblptr byte
  2764   002EC6  0E0E               	movlw	high __smallconst
  2765   002EC8  6EF7               	movwf	tblptrh,c
  2766   002ECA                     	endif
  2767   002ECA                     	if	0	;tblptru may be non-zero
  2768   002ECA                     	endif
  2769   002ECA                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  2770   002ECA  0E00               	movlw	low (__smallconst shr (0+16))
  2771   002ECC  6EF8               	movwf	tblptru,c
  2772   002ECE                     	endif
  2773   002ECE  0008               	tblrd		*
  2774   002ED0  50F5               	movf	tablat,w,c
  2775   002ED2  0FD0               	addlw	208
  2776   002ED4  6E09               	movwf	read_prec_or_width@c^0,c
  2777   002ED6  0E09               	movlw	9
  2778   002ED8  6409               	cpfsgt	read_prec_or_width@c^0,c
  2779   002EDA  EF71  F017         	goto	u2551
  2780   002EDE  EF73  F017         	goto	u2550
  2781   002EE2                     u2551:
  2782   002EE2  EF4A  F017         	goto	l2818
  2783   002EE6                     u2550:
  2784   002EE6                     l1071:
  2785                           
  2786                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1170:     return 
      +                          n;
  2787   002EE6  C00A  F007         	movff	read_prec_or_width@n,?_read_prec_or_width
  2788   002EEA  C00B  F008         	movff	read_prec_or_width@n+1,?_read_prec_or_width+1
  2789   002EEE  0012               	return		;funcret
  2790   002EF0                     __end_of_read_prec_or_width:
  2791                           	callstack 0
  2792                           
  2793 ;; *************** function ___wmul *****************
  2794 ;; Defined at:
  2795 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\Umul16.c"
  2796 ;; Parameters:    Size  Location     Type
  2797 ;;  multiplier      2    0[COMRAM] unsigned int 
  2798 ;;  multiplicand    2    2[COMRAM] unsigned int 
  2799 ;; Auto vars:     Size  Location     Type
  2800 ;;  product         2    4[COMRAM] unsigned int 
  2801 ;; Return value:  Size  Location     Type
  2802 ;;                  2    0[COMRAM] unsigned int 
  2803 ;; Registers used:
  2804 ;;		wreg, status,2, status,0, prodl, prodh
  2805 ;; Tracked objects:
  2806 ;;		On entry : 0/0
  2807 ;;		On exit  : 0/0
  2808 ;;		Unchanged: 0/0
  2809 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2810 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2811 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2812 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2813 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2814 ;;Total ram usage:        6 bytes
  2815 ;; Hardware stack levels used: 1
  2816 ;; Hardware stack levels required when called: 1
  2817 ;; This function calls:
  2818 ;;		Nothing
  2819 ;; This function is called by:
  2820 ;;		_main
  2821 ;;		_read_prec_or_width
  2822 ;;		_LEDarray_disp_light
  2823 ;;		_LEDarray_disp_PPM
  2824 ;;		_ADC2String
  2825 ;; This function uses a non-reentrant model
  2826 ;;
  2827                           
  2828                           	psect	text5
  2829   00332E                     __ptext5:
  2830                           	callstack 0
  2831   00332E                     ___wmul:
  2832                           	callstack 25
  2833   00332E  5001               	movf	___wmul@multiplier^0,w,c
  2834   003330  0203               	mulwf	___wmul@multiplicand^0,c
  2835   003332  CFF3 F005          	movff	prodl,___wmul@product
  2836   003336  CFF4 F006          	movff	prodh,___wmul@product+1
  2837   00333A  5001               	movf	___wmul@multiplier^0,w,c
  2838   00333C  0204               	mulwf	(___wmul@multiplicand+1)^0,c
  2839   00333E  50F3               	movf	243,w,c
  2840   003340  2606               	addwf	(___wmul@product+1)^0,f,c
  2841   003342  5002               	movf	(___wmul@multiplier+1)^0,w,c
  2842   003344  0203               	mulwf	___wmul@multiplicand^0,c
  2843   003346  50F3               	movf	243,w,c
  2844   003348  2606               	addwf	(___wmul@product+1)^0,f,c
  2845   00334A  C005  F001         	movff	___wmul@product,?___wmul
  2846   00334E  C006  F002         	movff	___wmul@product+1,?___wmul+1
  2847   003352  0012               	return		;funcret
  2848   003354                     __end_of___wmul:
  2849                           	callstack 0
  2850                           
  2851 ;; *************** function _dtoa *****************
  2852 ;; Defined at:
  2853 ;;		line 513 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
  2854 ;; Parameters:    Size  Location     Type
  2855 ;;  fp              1   20[COMRAM] PTR struct _IO_FILE
  2856 ;;		 -> sprintf@f(12), 
  2857 ;;  d               2   21[COMRAM] int 
  2858 ;; Auto vars:     Size  Location     Type
  2859 ;;  i               2   29[COMRAM] int 
  2860 ;;  w               2   26[COMRAM] int 
  2861 ;;  s               1   28[COMRAM] unsigned char 
  2862 ;;  p               1   25[COMRAM] _Bool 
  2863 ;; Return value:  Size  Location     Type
  2864 ;;                  1    wreg      void 
  2865 ;; Registers used:
  2866 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2867 ;; Tracked objects:
  2868 ;;		On entry : 0/0
  2869 ;;		On exit  : 0/0
  2870 ;;		Unchanged: 0/0
  2871 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2872 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2873 ;;      Locals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2874 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2875 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2876 ;;Total ram usage:       11 bytes
  2877 ;; Hardware stack levels used: 1
  2878 ;; Hardware stack levels required when called: 5
  2879 ;; This function calls:
  2880 ;;		___awdiv
  2881 ;;		___awmod
  2882 ;;		_abs
  2883 ;;		_pad
  2884 ;; This function is called by:
  2885 ;;		_vfpfcnvrt
  2886 ;; This function uses a non-reentrant model
  2887 ;;
  2888                           
  2889                           	psect	text6
  2890   0027BE                     __ptext6:
  2891                           	callstack 0
  2892   0027BE                     _dtoa:
  2893                           	callstack 22
  2894   0027BE                     
  2895                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 513: static void 
      +                          dtoa(FILE *fp, vfpf_sint_t d);C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\commo
      +                          n\doprnt.c: 514: {;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c:
      +                           515:  char s;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 516
      +                          :     int i, w;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 52
      +                          0:  _Bool p = 1;
  2896   0027BE  0E01               	movlw	1
  2897   0027C0  6E1A               	movwf	dtoa@p^0,c
  2898   0027C2                     
  2899                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 524:     s = d < 
      +                          0 ? 1 : 0;
  2900   0027C2  BE17               	btfsc	(dtoa@d+1)^0,7,c
  2901   0027C4  EFE6  F013         	goto	u2441
  2902   0027C8  EFE9  F013         	goto	u2440
  2903   0027CC                     u2441:
  2904   0027CC  0E01               	movlw	1
  2905   0027CE  EFEA  F013         	goto	u2450
  2906   0027D2                     u2440:
  2907   0027D2  0E00               	movlw	0
  2908   0027D4                     u2450:
  2909   0027D4  6E1D               	movwf	dtoa@s^0,c
  2910   0027D6                     
  2911                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 535:     w = widt
      +                          h;
  2912   0027D6  C059  F01B         	movff	_width,dtoa@w
  2913   0027DA  C05A  F01C         	movff	_width+1,dtoa@w+1
  2914   0027DE                     
  2915                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 536:     if (s
  2916   0027DE  501D               	movf	dtoa@s^0,w,c
  2917   0027E0  B4D8               	btfsc	status,2,c
  2918   0027E2  EFF5  F013         	goto	u2461
  2919   0027E6  EFF7  F013         	goto	u2460
  2920   0027EA                     u2461:
  2921   0027EA  EF0E  F014         	goto	l1054
  2922   0027EE                     u2460:
  2923   0027EE                     
  2924                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 540:     ) {;C:\P
      +                          rogram Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 541:         --w;
  2925   0027EE  061B               	decf	dtoa@w^0,f,c
  2926   0027F0  A0D8               	btfss	status,0,c
  2927   0027F2  061C               	decf	(dtoa@w+1)^0,f,c
  2928   0027F4                     
  2929                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 542:   s = s ? '-
      +                          ' : '+';
  2930   0027F4  501D               	movf	dtoa@s^0,w,c
  2931   0027F6  A4D8               	btfss	status,2,c
  2932   0027F8  EF00  F014         	goto	u2471
  2933   0027FC  EF02  F014         	goto	u2470
  2934   002800                     u2471:
  2935   002800  EF08  F014         	goto	l2774
  2936   002804                     u2470:
  2937   002804  0E00               	movlw	0
  2938   002806  6E19               	movwf	(_dtoa$1930+1)^0,c
  2939   002808  0E2B               	movlw	43
  2940   00280A  6E18               	movwf	_dtoa$1930^0,c
  2941   00280C  EF0C  F014         	goto	l2776
  2942   002810                     l2774:
  2943   002810  0E00               	movlw	0
  2944   002812  6E19               	movwf	(_dtoa$1930+1)^0,c
  2945   002814  0E2D               	movlw	45
  2946   002816  6E18               	movwf	_dtoa$1930^0,c
  2947   002818                     l2776:
  2948   002818  C018  F01D         	movff	_dtoa$1930,dtoa@s
  2949   00281C                     l1054:
  2950                           
  2951                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 552:     i = size
      +                          of(dbuf) - 1;
  2952   00281C  0E00               	movlw	0
  2953   00281E  6E1F               	movwf	(dtoa@i+1)^0,c
  2954   002820  0E1F               	movlw	31
  2955   002822  6E1E               	movwf	dtoa@i^0,c
  2956   002824                     
  2957                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 553:     dbuf[i] 
      +                          = '\0';
  2958   002824  0E00               	movlw	0
  2959   002826  0100               	movlb	0	; () banked
  2960   002828  6F7F               	movwf	(_dbuf+31)& (0+255),b
  2961                           
  2962                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 554:     while (!
      +                          (i < 1) && (d != 0
  2963   00282A  EF44  F014         	goto	l2790
  2964   00282E                     l2780:
  2965                           
  2966                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 563:     )) {;C:\
      +                          Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 564:         --i;
  2967   00282E  061E               	decf	dtoa@i^0,f,c
  2968   002830  A0D8               	btfss	status,0,c
  2969   002832  061F               	decf	(dtoa@i+1)^0,f,c
  2970   002834                     
  2971                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 565:         dbuf
      +                          [i] = (char)((int)'0' + abs(d % 10));
  2972   002834  501E               	movf	dtoa@i^0,w,c
  2973   002836  0F60               	addlw	low _dbuf
  2974   002838  6ED9               	movwf	fsr2l,c
  2975   00283A  6ADA               	clrf	fsr2h,c
  2976   00283C  C016  F001         	movff	dtoa@d,___awmod@dividend
  2977   002840  C017  F002         	movff	dtoa@d+1,___awmod@dividend+1
  2978   002844  0E00               	movlw	0
  2979   002846  6E04               	movwf	(___awmod@divisor+1)^0,c
  2980   002848  0E0A               	movlw	10
  2981   00284A  6E03               	movwf	___awmod@divisor^0,c
  2982   00284C  ECC9  F016         	call	___awmod	;wreg free
  2983   002850  C001  F007         	movff	?___awmod,abs@a
  2984   002854  C002  F008         	movff	?___awmod+1,abs@a+1
  2985   002858  EC4B  F019         	call	_abs	;wreg free
  2986   00285C  5007               	movf	?_abs^0,w,c
  2987   00285E  0F30               	addlw	48
  2988   002860  6EDF               	movwf	indf2,c
  2989   002862                     
  2990                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 569:   p = 0;
  2991   002862  0E00               	movlw	0
  2992   002864  6E1A               	movwf	dtoa@p^0,c
  2993   002866                     
  2994                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 571:         --w;
  2995   002866  061B               	decf	dtoa@w^0,f,c
  2996   002868  A0D8               	btfss	status,0,c
  2997   00286A  061C               	decf	(dtoa@w+1)^0,f,c
  2998   00286C                     
  2999                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 572:         d = 
      +                          d / 10;
  3000   00286C  C016  F001         	movff	dtoa@d,___awdiv@dividend
  3001   002870  C017  F002         	movff	dtoa@d+1,___awdiv@dividend+1
  3002   002874  0E00               	movlw	0
  3003   002876  6E04               	movwf	(___awdiv@divisor+1)^0,c
  3004   002878  0E0A               	movlw	10
  3005   00287A  6E03               	movwf	___awdiv@divisor^0,c
  3006   00287C  EC0A  F016         	call	___awdiv	;wreg free
  3007   002880  C001  F016         	movff	?___awdiv,dtoa@d
  3008   002884  C002  F017         	movff	?___awdiv+1,dtoa@d+1
  3009   002888                     l2790:
  3010                           
  3011                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 554:     while (!
      +                          (i < 1) && (d != 0
  3012   002888  BE1F               	btfsc	(dtoa@i+1)^0,7,c
  3013   00288A  EF4F  F014         	goto	u2481
  3014   00288E  501F               	movf	(dtoa@i+1)^0,w,c
  3015   002890  E108               	bnz	u2480
  3016   002892  041E               	decf	dtoa@i^0,w,c
  3017   002894  A0D8               	btfss	status,0,c
  3018   002896  EF4F  F014         	goto	u2481
  3019   00289A  EF51  F014         	goto	u2480
  3020   00289E                     u2481:
  3021   00289E  EF76  F014         	goto	l2800
  3022   0028A2                     u2480:
  3023   0028A2  5016               	movf	dtoa@d^0,w,c
  3024   0028A4  1017               	iorwf	(dtoa@d+1)^0,w,c
  3025   0028A6  A4D8               	btfss	status,2,c
  3026   0028A8  EF58  F014         	goto	u2491
  3027   0028AC  EF5A  F014         	goto	u2490
  3028   0028B0                     u2491:
  3029   0028B0  EF17  F014         	goto	l2780
  3030   0028B4                     u2490:
  3031   0028B4  501A               	movf	dtoa@p^0,w,c
  3032   0028B6  A4D8               	btfss	status,2,c
  3033   0028B8  EF60  F014         	goto	u2501
  3034   0028BC  EF62  F014         	goto	u2500
  3035   0028C0                     u2501:
  3036   0028C0  EF17  F014         	goto	l2780
  3037   0028C4                     u2500:
  3038   0028C4  BE1C               	btfsc	(dtoa@w+1)^0,7,c
  3039   0028C6  EF6D  F014         	goto	u2511
  3040   0028CA  501C               	movf	(dtoa@w+1)^0,w,c
  3041   0028CC  E108               	bnz	u2510
  3042   0028CE  041B               	decf	dtoa@w^0,w,c
  3043   0028D0  A0D8               	btfss	status,0,c
  3044   0028D2  EF6D  F014         	goto	u2511
  3045   0028D6  EF6F  F014         	goto	u2510
  3046   0028DA                     u2511:
  3047   0028DA  EF76  F014         	goto	l2800
  3048   0028DE                     u2510:
  3049   0028DE  B25D               	btfsc	_flags^0,1,c
  3050   0028E0  EF74  F014         	goto	u2521
  3051   0028E4  EF76  F014         	goto	u2520
  3052   0028E8                     u2521:
  3053   0028E8  EF17  F014         	goto	l2780
  3054   0028EC                     u2520:
  3055   0028EC                     l2800:
  3056                           
  3057                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 576:     if (s !=
      +                           0) {
  3058   0028EC  501D               	movf	dtoa@s^0,w,c
  3059   0028EE  B4D8               	btfsc	status,2,c
  3060   0028F0  EF7C  F014         	goto	u2531
  3061   0028F4  EF7E  F014         	goto	u2530
  3062   0028F8                     u2531:
  3063   0028F8  EF87  F014         	goto	l2806
  3064   0028FC                     u2530:
  3065   0028FC                     
  3066                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 577:         --i;
  3067   0028FC  061E               	decf	dtoa@i^0,f,c
  3068   0028FE  A0D8               	btfss	status,0,c
  3069   002900  061F               	decf	(dtoa@i+1)^0,f,c
  3070   002902                     
  3071                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 578:         dbuf
      +                          [i] = s;
  3072   002902  501E               	movf	dtoa@i^0,w,c
  3073   002904  0F60               	addlw	low _dbuf
  3074   002906  6ED9               	movwf	fsr2l,c
  3075   002908  6ADA               	clrf	fsr2h,c
  3076   00290A  C01D  FFDF         	movff	dtoa@s,indf2
  3077   00290E                     l2806:
  3078                           
  3079                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 582:     return (
      +                          void) pad(fp, &dbuf[i], w);
  3080   00290E  C015  F00E         	movff	dtoa@fp,pad@fp
  3081   002912  501E               	movf	dtoa@i^0,w,c
  3082   002914  0F60               	addlw	low _dbuf
  3083   002916  6E0F               	movwf	pad@buf^0,c
  3084   002918  C01B  F010         	movff	dtoa@w,pad@p
  3085   00291C  C01C  F011         	movff	dtoa@w+1,pad@p+1
  3086   002920  ECBF  F017         	call	_pad	;wreg free
  3087   002924  0012               	return		;funcret
  3088   002926                     __end_of_dtoa:
  3089                           	callstack 0
  3090                           
  3091 ;; *************** function _pad *****************
  3092 ;; Defined at:
  3093 ;;		line 193 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
  3094 ;; Parameters:    Size  Location     Type
  3095 ;;  fp              1   13[COMRAM] PTR struct _IO_FILE
  3096 ;;		 -> sprintf@f(12), 
  3097 ;;  buf             1   14[COMRAM] PTR unsigned char 
  3098 ;;		 -> dbuf(32), 
  3099 ;;  p               2   15[COMRAM] int 
  3100 ;; Auto vars:     Size  Location     Type
  3101 ;;  i               2   18[COMRAM] int 
  3102 ;; Return value:  Size  Location     Type
  3103 ;;                  1    wreg      void 
  3104 ;; Registers used:
  3105 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  3106 ;; Tracked objects:
  3107 ;;		On entry : 0/0
  3108 ;;		On exit  : 0/0
  3109 ;;		Unchanged: 0/0
  3110 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3111 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3112 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3113 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3114 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3115 ;;Total ram usage:        7 bytes
  3116 ;; Hardware stack levels used: 1
  3117 ;; Hardware stack levels required when called: 4
  3118 ;; This function calls:
  3119 ;;		_fputc
  3120 ;;		_fputs
  3121 ;; This function is called by:
  3122 ;;		_dtoa
  3123 ;; This function uses a non-reentrant model
  3124 ;;
  3125                           
  3126                           	psect	text7
  3127   002F7E                     __ptext7:
  3128                           	callstack 0
  3129   002F7E                     _pad:
  3130                           	callstack 22
  3131   002F7E                     
  3132                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 193: static void 
      +                          pad(FILE *fp, char *buf, int p);C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\com
      +                          mon\doprnt.c: 194: {;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.
      +                          c: 195:     int i;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c:
      +                           199:     if (flags & (1 << 0)) {
  3133   002F7E  A05D               	btfss	_flags^0,0,c
  3134   002F80  EFC4  F017         	goto	u2391
  3135   002F84  EFC6  F017         	goto	u2390
  3136   002F88                     u2391:
  3137   002F88  EFCC  F017         	goto	l2738
  3138   002F8C                     u2390:
  3139   002F8C                     
  3140                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 200:         fput
      +                          s((const char *)buf, fp);
  3141   002F8C  C00F  F009         	movff	pad@buf,fputs@s
  3142   002F90  C00E  F00A         	movff	pad@fp,fputs@fp
  3143   002F94  EC10  F019         	call	_fputs	;wreg free
  3144   002F98                     l2738:
  3145                           
  3146                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 205:  if (p < 0) 
      +                          {
  3147   002F98  BE11               	btfsc	(pad@p+1)^0,7,c
  3148   002F9A  EFD3  F017         	goto	u2400
  3149   002F9E  EFD1  F017         	goto	u2401
  3150   002FA2                     u2401:
  3151   002FA2  EFD7  F017         	goto	l1046
  3152   002FA6                     u2400:
  3153   002FA6                     
  3154                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 206:   p = 0;
  3155   002FA6  0E00               	movlw	0
  3156   002FA8  6E11               	movwf	(pad@p+1)^0,c
  3157   002FAA  0E00               	movlw	0
  3158   002FAC  6E10               	movwf	pad@p^0,c
  3159   002FAE                     l1046:
  3160                           
  3161                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 208:     i = 0;
  3162   002FAE  0E00               	movlw	0
  3163   002FB0  6E14               	movwf	(pad@i+1)^0,c
  3164   002FB2  0E00               	movlw	0
  3165   002FB4  6E13               	movwf	pad@i^0,c
  3166                           
  3167                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 209:     while (i
      +                           < p) {
  3168   002FB6  EFE7  F017         	goto	l2746
  3169   002FBA                     l2742:
  3170                           
  3171                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 210:         fput
      +                          c(' ', fp);
  3172   002FBA  0E00               	movlw	0
  3173   002FBC  6E02               	movwf	(fputc@c+1)^0,c
  3174   002FBE  0E20               	movlw	32
  3175   002FC0  6E01               	movwf	fputc@c^0,c
  3176   002FC2  C00E  F003         	movff	pad@fp,fputc@fp
  3177   002FC6  EC6C  F016         	call	_fputc	;wreg free
  3178   002FCA                     
  3179                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 211:         ++i;
  3180   002FCA  4A13               	infsnz	pad@i^0,f,c
  3181   002FCC  2A14               	incf	(pad@i+1)^0,f,c
  3182   002FCE                     l2746:
  3183                           
  3184                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 209:     while (i
      +                           < p) {
  3185   002FCE  5010               	movf	pad@p^0,w,c
  3186   002FD0  5C13               	subwf	pad@i^0,w,c
  3187   002FD2  5014               	movf	(pad@i+1)^0,w,c
  3188   002FD4  0A80               	xorlw	128
  3189   002FD6  6E12               	movwf	??_pad^0,c
  3190   002FD8  5011               	movf	(pad@p+1)^0,w,c
  3191   002FDA  0A80               	xorlw	128
  3192   002FDC  5812               	subwfb	??_pad^0,w,c
  3193   002FDE  A0D8               	btfss	status,0,c
  3194   002FE0  EFF4  F017         	goto	u2411
  3195   002FE4  EFF6  F017         	goto	u2410
  3196   002FE8                     u2411:
  3197   002FE8  EFDD  F017         	goto	l2742
  3198   002FEC                     u2410:
  3199   002FEC                     
  3200                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 216:     if (!(fl
      +                          ags & (1 << 0))) {
  3201   002FEC  B05D               	btfsc	_flags^0,0,c
  3202   002FEE  EFFB  F017         	goto	u2421
  3203   002FF2  EFFD  F017         	goto	u2420
  3204   002FF6                     u2421:
  3205   002FF6  EF03  F018         	goto	l1051
  3206   002FFA                     u2420:
  3207   002FFA                     
  3208                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 218:         fput
      +                          s((const char *)buf, fp);
  3209   002FFA  C00F  F009         	movff	pad@buf,fputs@s
  3210   002FFE  C00E  F00A         	movff	pad@fp,fputs@fp
  3211   003002  EC10  F019         	call	_fputs	;wreg free
  3212   003006                     l1051:
  3213   003006  0012               	return		;funcret
  3214   003008                     __end_of_pad:
  3215                           	callstack 0
  3216                           
  3217 ;; *************** function _fputs *****************
  3218 ;; Defined at:
  3219 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\nf_fputs.c"
  3220 ;; Parameters:    Size  Location     Type
  3221 ;;  s               1    8[COMRAM] PTR const unsigned char 
  3222 ;;		 -> dbuf(32), 
  3223 ;;  fp              1    9[COMRAM] PTR struct _IO_FILE
  3224 ;;		 -> sprintf@f(12), 
  3225 ;; Auto vars:     Size  Location     Type
  3226 ;;  i               2   11[COMRAM] int 
  3227 ;;  c               1   10[COMRAM] unsigned char 
  3228 ;; Return value:  Size  Location     Type
  3229 ;;                  2    8[COMRAM] int 
  3230 ;; Registers used:
  3231 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  3232 ;; Tracked objects:
  3233 ;;		On entry : 0/0
  3234 ;;		On exit  : 0/0
  3235 ;;		Unchanged: 0/0
  3236 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3237 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3238 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3239 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3240 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3241 ;;Total ram usage:        5 bytes
  3242 ;; Hardware stack levels used: 1
  3243 ;; Hardware stack levels required when called: 3
  3244 ;; This function calls:
  3245 ;;		_fputc
  3246 ;; This function is called by:
  3247 ;;		_pad
  3248 ;; This function uses a non-reentrant model
  3249 ;;
  3250                           
  3251                           	psect	text8
  3252   003220                     __ptext8:
  3253                           	callstack 0
  3254   003220                     _fputs:
  3255                           	callstack 22
  3256   003220  0E00               	movlw	0
  3257   003222  6E0D               	movwf	(fputs@i+1)^0,c
  3258   003224  0E00               	movlw	0
  3259   003226  6E0C               	movwf	fputs@i^0,c
  3260   003228  EF1F  F019         	goto	l2646
  3261   00322C                     l2642:
  3262   00322C  C00B  F001         	movff	fputs@c,fputc@c
  3263   003230  6A02               	clrf	(fputc@c+1)^0,c
  3264   003232  C00A  F003         	movff	fputs@fp,fputc@fp
  3265   003236  EC6C  F016         	call	_fputc	;wreg free
  3266   00323A  4A0C               	infsnz	fputs@i^0,f,c
  3267   00323C  2A0D               	incf	(fputs@i+1)^0,f,c
  3268   00323E                     l2646:
  3269   00323E  5009               	movf	fputs@s^0,w,c
  3270   003240  240C               	addwf	fputs@i^0,w,c
  3271   003242  6ED9               	movwf	fsr2l,c
  3272   003244  6ADA               	clrf	fsr2h,c
  3273   003246  50DF               	movf	indf2,w,c
  3274   003248  6E0B               	movwf	fputs@c^0,c
  3275   00324A  500B               	movf	fputs@c^0,w,c
  3276   00324C  A4D8               	btfss	status,2,c
  3277   00324E  EF2B  F019         	goto	u2261
  3278   003252  EF2D  F019         	goto	u2260
  3279   003256                     u2261:
  3280   003256  EF16  F019         	goto	l2642
  3281   00325A                     u2260:
  3282   00325A  0012               	return		;funcret
  3283   00325C                     __end_of_fputs:
  3284                           	callstack 0
  3285                           
  3286 ;; *************** function _fputc *****************
  3287 ;; Defined at:
  3288 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\nf_fputc.c"
  3289 ;; Parameters:    Size  Location     Type
  3290 ;;  c               2    0[COMRAM] int 
  3291 ;;  fp              1    2[COMRAM] PTR struct _IO_FILE
  3292 ;;		 -> sprintf@f(12), 
  3293 ;; Auto vars:     Size  Location     Type
  3294 ;;		None
  3295 ;; Return value:  Size  Location     Type
  3296 ;;                  2    0[COMRAM] int 
  3297 ;; Registers used:
  3298 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  3299 ;; Tracked objects:
  3300 ;;		On entry : 0/0
  3301 ;;		On exit  : 0/0
  3302 ;;		Unchanged: 0/0
  3303 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3304 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3305 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3306 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3307 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3308 ;;Total ram usage:        8 bytes
  3309 ;; Hardware stack levels used: 1
  3310 ;; Hardware stack levels required when called: 2
  3311 ;; This function calls:
  3312 ;;		_putch
  3313 ;; This function is called by:
  3314 ;;		_pad
  3315 ;;		_vfpfcnvrt
  3316 ;;		_fputs
  3317 ;; This function uses a non-reentrant model
  3318 ;;
  3319                           
  3320                           	psect	text9
  3321   002CD8                     __ptext9:
  3322                           	callstack 0
  3323   002CD8                     _fputc:
  3324                           	callstack 25
  3325   002CD8  5003               	movf	fputc@fp^0,w,c
  3326   002CDA  B4D8               	btfsc	status,2,c
  3327   002CDC  EF72  F016         	goto	u2221
  3328   002CE0  EF74  F016         	goto	u2220
  3329   002CE4                     u2221:
  3330   002CE4  EF7C  F016         	goto	l2630
  3331   002CE8                     u2220:
  3332   002CE8  5003               	movf	fputc@fp^0,w,c
  3333   002CEA  A4D8               	btfss	status,2,c
  3334   002CEC  EF7A  F016         	goto	u2231
  3335   002CF0  EF7C  F016         	goto	u2230
  3336   002CF4                     u2231:
  3337   002CF4  EF81  F016         	goto	l2632
  3338   002CF8                     u2230:
  3339   002CF8                     l2630:
  3340   002CF8  5001               	movf	fputc@c^0,w,c
  3341   002CFA  EC06  F01A         	call	_putch
  3342   002CFE  EFC8  F016         	goto	l1115
  3343   002D02                     l2632:
  3344   002D02  5003               	movf	fputc@fp^0,w,c
  3345   002D04  6ED9               	movwf	fsr2l,c
  3346   002D06  6ADA               	clrf	fsr2h,c
  3347   002D08  0E0A               	movlw	10
  3348   002D0A  26D9               	addwf	fsr2l,f,c
  3349   002D0C  50DE               	movf	postinc2,w,c
  3350   002D0E  10DE               	iorwf	postinc2,w,c
  3351   002D10  B4D8               	btfsc	status,2,c
  3352   002D12  EF8D  F016         	goto	u2241
  3353   002D16  EF8F  F016         	goto	u2240
  3354   002D1A                     u2241:
  3355   002D1A  EFA8  F016         	goto	l2636
  3356   002D1E                     u2240:
  3357   002D1E  5003               	movf	fputc@fp^0,w,c
  3358   002D20  6ED9               	movwf	fsr2l,c
  3359   002D22  6ADA               	clrf	fsr2h,c
  3360   002D24  0E0A               	movlw	10
  3361   002D26  26D9               	addwf	fsr2l,f,c
  3362   002D28  5003               	movf	fputc@fp^0,w,c
  3363   002D2A  6EE1               	movwf	fsr1l,c
  3364   002D2C  6AE2               	clrf	fsr1h,c
  3365   002D2E  0E03               	movlw	3
  3366   002D30  26E1               	addwf	fsr1l,f,c
  3367   002D32  50DE               	movf	postinc2,w,c
  3368   002D34  5CE6               	subwf	postinc1,w,c
  3369   002D36  50E6               	movf	postinc1,w,c
  3370   002D38  0A80               	xorlw	128
  3371   002D3A  6E08               	movwf	(??_fputc+4)^0,c
  3372   002D3C  50DE               	movf	postinc2,w,c
  3373   002D3E  0A80               	xorlw	128
  3374   002D40  5808               	subwfb	(??_fputc+4)^0,w,c
  3375   002D42  B0D8               	btfsc	status,0,c
  3376   002D44  EFA6  F016         	goto	u2251
  3377   002D48  EFA8  F016         	goto	u2250
  3378   002D4C                     u2251:
  3379   002D4C  EFC8  F016         	goto	l1115
  3380   002D50                     u2250:
  3381   002D50                     l2636:
  3382   002D50  5003               	movf	fputc@fp^0,w,c
  3383   002D52  6ED9               	movwf	fsr2l,c
  3384   002D54  6ADA               	clrf	fsr2h,c
  3385   002D56  0E03               	movlw	3
  3386   002D58  26D9               	addwf	fsr2l,f,c
  3387   002D5A  CFDE F004          	movff	postinc2,??_fputc
  3388   002D5E  CFDD F005          	movff	postdec2,??_fputc+1
  3389   002D62  5003               	movf	fputc@fp^0,w,c
  3390   002D64  6ED9               	movwf	fsr2l,c
  3391   002D66  6ADA               	clrf	fsr2h,c
  3392   002D68  CFDE F006          	movff	postinc2,??_fputc+2
  3393   002D6C  CFDD F007          	movff	postdec2,??_fputc+3
  3394   002D70  5004               	movf	??_fputc^0,w,c
  3395   002D72  2406               	addwf	(??_fputc+2)^0,w,c
  3396   002D74  6ED9               	movwf	fsr2l,c
  3397   002D76  5005               	movf	(??_fputc+1)^0,w,c
  3398   002D78  2007               	addwfc	(??_fputc+3)^0,w,c
  3399   002D7A  6EDA               	movwf	fsr2h,c
  3400   002D7C  C001  FFDF         	movff	fputc@c,indf2
  3401   002D80  5003               	movf	fputc@fp^0,w,c
  3402   002D82  6ED9               	movwf	fsr2l,c
  3403   002D84  6ADA               	clrf	fsr2h,c
  3404   002D86  0E03               	movlw	3
  3405   002D88  26D9               	addwf	fsr2l,f,c
  3406   002D8A  2ADE               	incf	postinc2,f,c
  3407   002D8C  0E00               	movlw	0
  3408   002D8E  22DD               	addwfc	postdec2,f,c
  3409   002D90                     l1115:
  3410   002D90  0012               	return		;funcret
  3411   002D92                     __end_of_fputc:
  3412                           	callstack 0
  3413                           
  3414 ;; *************** function _putch *****************
  3415 ;; Defined at:
  3416 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\putch.c"
  3417 ;; Parameters:    Size  Location     Type
  3418 ;;  c               1    wreg     unsigned char 
  3419 ;; Auto vars:     Size  Location     Type
  3420 ;;  c               1    0[COMRAM] unsigned char 
  3421 ;; Return value:  Size  Location     Type
  3422 ;;                  1    wreg      void 
  3423 ;; Registers used:
  3424 ;;		wreg
  3425 ;; Tracked objects:
  3426 ;;		On entry : 0/0
  3427 ;;		On exit  : 0/0
  3428 ;;		Unchanged: 0/0
  3429 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3430 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3431 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3432 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3433 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3434 ;;Total ram usage:        0 bytes
  3435 ;; Hardware stack levels used: 1
  3436 ;; Hardware stack levels required when called: 1
  3437 ;; This function calls:
  3438 ;;		Nothing
  3439 ;; This function is called by:
  3440 ;;		_fputc
  3441 ;; This function uses a non-reentrant model
  3442 ;;
  3443                           
  3444                           	psect	text10
  3445   00340C                     __ptext10:
  3446                           	callstack 0
  3447   00340C                     _putch:
  3448                           	callstack 25
  3449   00340C  0012               	return		;funcret
  3450   00340E                     __end_of_putch:
  3451                           	callstack 0
  3452                           
  3453 ;; *************** function _abs *****************
  3454 ;; Defined at:
  3455 ;;		line 1 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\abs.c"
  3456 ;; Parameters:    Size  Location     Type
  3457 ;;  a               2    6[COMRAM] int 
  3458 ;; Auto vars:     Size  Location     Type
  3459 ;;		None
  3460 ;; Return value:  Size  Location     Type
  3461 ;;                  2    6[COMRAM] int 
  3462 ;; Registers used:
  3463 ;;		wreg, status,2, status,0
  3464 ;; Tracked objects:
  3465 ;;		On entry : 0/0
  3466 ;;		On exit  : 0/0
  3467 ;;		Unchanged: 0/0
  3468 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3469 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3470 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3471 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3472 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3473 ;;Total ram usage:        4 bytes
  3474 ;; Hardware stack levels used: 1
  3475 ;; Hardware stack levels required when called: 1
  3476 ;; This function calls:
  3477 ;;		Nothing
  3478 ;; This function is called by:
  3479 ;;		_dtoa
  3480 ;; This function uses a non-reentrant model
  3481 ;;
  3482                           
  3483                           	psect	text11
  3484   003296                     __ptext11:
  3485                           	callstack 0
  3486   003296                     _abs:
  3487                           	callstack 25
  3488   003296  BE08               	btfsc	(abs@a+1)^0,7,c
  3489   003298  EF50  F019         	goto	u2431
  3490   00329C  EF52  F019         	goto	u2430
  3491   0032A0                     u2431:
  3492   0032A0  EF58  F019         	goto	l1100
  3493   0032A4                     u2430:
  3494   0032A4  C007  F007         	movff	abs@a,?_abs
  3495   0032A8  C008  F008         	movff	abs@a+1,?_abs+1
  3496   0032AC  EF64  F019         	goto	l1103
  3497   0032B0                     l1100:
  3498   0032B0  C007  F009         	movff	abs@a,??_abs
  3499   0032B4  C008  F00A         	movff	abs@a+1,??_abs+1
  3500   0032B8  1E09               	comf	??_abs^0,f,c
  3501   0032BA  1E0A               	comf	(??_abs+1)^0,f,c
  3502   0032BC  4A09               	infsnz	??_abs^0,f,c
  3503   0032BE  2A0A               	incf	(??_abs+1)^0,f,c
  3504   0032C0  C009  F007         	movff	??_abs,?_abs
  3505   0032C4  C00A  F008         	movff	??_abs+1,?_abs+1
  3506   0032C8                     l1103:
  3507   0032C8  0012               	return		;funcret
  3508   0032CA                     __end_of_abs:
  3509                           	callstack 0
  3510                           
  3511 ;; *************** function ___awdiv *****************
  3512 ;; Defined at:
  3513 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\awdiv.c"
  3514 ;; Parameters:    Size  Location     Type
  3515 ;;  dividend        2    0[COMRAM] int 
  3516 ;;  divisor         2    2[COMRAM] int 
  3517 ;; Auto vars:     Size  Location     Type
  3518 ;;  quotient        2    6[COMRAM] int 
  3519 ;;  sign            1    5[COMRAM] unsigned char 
  3520 ;;  counter         1    4[COMRAM] unsigned char 
  3521 ;; Return value:  Size  Location     Type
  3522 ;;                  2    0[COMRAM] int 
  3523 ;; Registers used:
  3524 ;;		wreg, status,2, status,0
  3525 ;; Tracked objects:
  3526 ;;		On entry : 0/0
  3527 ;;		On exit  : 0/0
  3528 ;;		Unchanged: 0/0
  3529 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3530 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3531 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3532 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3533 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3534 ;;Total ram usage:        8 bytes
  3535 ;; Hardware stack levels used: 1
  3536 ;; Hardware stack levels required when called: 1
  3537 ;; This function calls:
  3538 ;;		Nothing
  3539 ;; This function is called by:
  3540 ;;		_dtoa
  3541 ;; This function uses a non-reentrant model
  3542 ;;
  3543                           
  3544                           	psect	text12
  3545   002C14                     __ptext12:
  3546                           	callstack 0
  3547   002C14                     ___awdiv:
  3548                           	callstack 25
  3549   002C14  0E00               	movlw	0
  3550   002C16  6E06               	movwf	___awdiv@sign^0,c
  3551   002C18  BE04               	btfsc	(___awdiv@divisor+1)^0,7,c
  3552   002C1A  EF13  F016         	goto	u2270
  3553   002C1E  EF11  F016         	goto	u2271
  3554   002C22                     u2271:
  3555   002C22  EF19  F016         	goto	l2662
  3556   002C26                     u2270:
  3557   002C26  6C03               	negf	___awdiv@divisor^0,c
  3558   002C28  1E04               	comf	(___awdiv@divisor+1)^0,f,c
  3559   002C2A  B0D8               	btfsc	status,0,c
  3560   002C2C  2A04               	incf	(___awdiv@divisor+1)^0,f,c
  3561   002C2E  0E01               	movlw	1
  3562   002C30  6E06               	movwf	___awdiv@sign^0,c
  3563   002C32                     l2662:
  3564   002C32  BE02               	btfsc	(___awdiv@dividend+1)^0,7,c
  3565   002C34  EF20  F016         	goto	u2280
  3566   002C38  EF1E  F016         	goto	u2281
  3567   002C3C                     u2281:
  3568   002C3C  EF26  F016         	goto	l2668
  3569   002C40                     u2280:
  3570   002C40  6C01               	negf	___awdiv@dividend^0,c
  3571   002C42  1E02               	comf	(___awdiv@dividend+1)^0,f,c
  3572   002C44  B0D8               	btfsc	status,0,c
  3573   002C46  2A02               	incf	(___awdiv@dividend+1)^0,f,c
  3574   002C48  0E01               	movlw	1
  3575   002C4A  1A06               	xorwf	___awdiv@sign^0,f,c
  3576   002C4C                     l2668:
  3577   002C4C  0E00               	movlw	0
  3578   002C4E  6E08               	movwf	(___awdiv@quotient+1)^0,c
  3579   002C50  0E00               	movlw	0
  3580   002C52  6E07               	movwf	___awdiv@quotient^0,c
  3581   002C54  5003               	movf	___awdiv@divisor^0,w,c
  3582   002C56  1004               	iorwf	(___awdiv@divisor+1)^0,w,c
  3583   002C58  B4D8               	btfsc	status,2,c
  3584   002C5A  EF31  F016         	goto	u2291
  3585   002C5E  EF33  F016         	goto	u2290
  3586   002C62                     u2291:
  3587   002C62  EF5B  F016         	goto	l2690
  3588   002C66                     u2290:
  3589   002C66  0E01               	movlw	1
  3590   002C68  6E05               	movwf	___awdiv@counter^0,c
  3591   002C6A  EF3B  F016         	goto	l2676
  3592   002C6E                     l2674:
  3593   002C6E  90D8               	bcf	status,0,c
  3594   002C70  3603               	rlcf	___awdiv@divisor^0,f,c
  3595   002C72  3604               	rlcf	(___awdiv@divisor+1)^0,f,c
  3596   002C74  2A05               	incf	___awdiv@counter^0,f,c
  3597   002C76                     l2676:
  3598   002C76  AE04               	btfss	(___awdiv@divisor+1)^0,7,c
  3599   002C78  EF40  F016         	goto	u2301
  3600   002C7C  EF42  F016         	goto	u2300
  3601   002C80                     u2301:
  3602   002C80  EF37  F016         	goto	l2674
  3603   002C84                     u2300:
  3604   002C84                     l2678:
  3605   002C84  90D8               	bcf	status,0,c
  3606   002C86  3607               	rlcf	___awdiv@quotient^0,f,c
  3607   002C88  3608               	rlcf	(___awdiv@quotient+1)^0,f,c
  3608   002C8A  5003               	movf	___awdiv@divisor^0,w,c
  3609   002C8C  5C01               	subwf	___awdiv@dividend^0,w,c
  3610   002C8E  5004               	movf	(___awdiv@divisor+1)^0,w,c
  3611   002C90  5802               	subwfb	(___awdiv@dividend+1)^0,w,c
  3612   002C92  A0D8               	btfss	status,0,c
  3613   002C94  EF4E  F016         	goto	u2311
  3614   002C98  EF50  F016         	goto	u2310
  3615   002C9C                     u2311:
  3616   002C9C  EF55  F016         	goto	l2686
  3617   002CA0                     u2310:
  3618   002CA0  5003               	movf	___awdiv@divisor^0,w,c
  3619   002CA2  5E01               	subwf	___awdiv@dividend^0,f,c
  3620   002CA4  5004               	movf	(___awdiv@divisor+1)^0,w,c
  3621   002CA6  5A02               	subwfb	(___awdiv@dividend+1)^0,f,c
  3622   002CA8  8007               	bsf	___awdiv@quotient^0,0,c
  3623   002CAA                     l2686:
  3624   002CAA  90D8               	bcf	status,0,c
  3625   002CAC  3204               	rrcf	(___awdiv@divisor+1)^0,f,c
  3626   002CAE  3203               	rrcf	___awdiv@divisor^0,f,c
  3627   002CB0  2E05               	decfsz	___awdiv@counter^0,f,c
  3628   002CB2  EF42  F016         	goto	l2678
  3629   002CB6                     l2690:
  3630   002CB6  5006               	movf	___awdiv@sign^0,w,c
  3631   002CB8  B4D8               	btfsc	status,2,c
  3632   002CBA  EF61  F016         	goto	u2321
  3633   002CBE  EF63  F016         	goto	u2320
  3634   002CC2                     u2321:
  3635   002CC2  EF67  F016         	goto	l2694
  3636   002CC6                     u2320:
  3637   002CC6  6C07               	negf	___awdiv@quotient^0,c
  3638   002CC8  1E08               	comf	(___awdiv@quotient+1)^0,f,c
  3639   002CCA  B0D8               	btfsc	status,0,c
  3640   002CCC  2A08               	incf	(___awdiv@quotient+1)^0,f,c
  3641   002CCE                     l2694:
  3642   002CCE  C007  F001         	movff	___awdiv@quotient,?___awdiv
  3643   002CD2  C008  F002         	movff	___awdiv@quotient+1,?___awdiv+1
  3644   002CD6  0012               	return		;funcret
  3645   002CD8                     __end_of___awdiv:
  3646                           	callstack 0
  3647                           
  3648 ;; *************** function ___xxtofl *****************
  3649 ;; Defined at:
  3650 ;;		line 10 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\xxtofl.c"
  3651 ;; Parameters:    Size  Location     Type
  3652 ;;  sign            1    wreg     unsigned char 
  3653 ;;  val             4    0[COMRAM] long 
  3654 ;; Auto vars:     Size  Location     Type
  3655 ;;  sign            1    8[COMRAM] unsigned char 
  3656 ;;  arg             4   10[COMRAM] unsigned long 
  3657 ;;  exp             1    9[COMRAM] unsigned char 
  3658 ;; Return value:  Size  Location     Type
  3659 ;;                  4    0[COMRAM] unsigned char 
  3660 ;; Registers used:
  3661 ;;		wreg, status,2, status,0
  3662 ;; Tracked objects:
  3663 ;;		On entry : 0/0
  3664 ;;		On exit  : 0/0
  3665 ;;		Unchanged: 0/0
  3666 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3667 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3668 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3669 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3670 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3671 ;;Total ram usage:       14 bytes
  3672 ;; Hardware stack levels used: 1
  3673 ;; Hardware stack levels required when called: 1
  3674 ;; This function calls:
  3675 ;;		Nothing
  3676 ;; This function is called by:
  3677 ;;		_main
  3678 ;; This function uses a non-reentrant model
  3679 ;;
  3680                           
  3681                           	psect	text13
  3682   002488                     __ptext13:
  3683                           	callstack 0
  3684   002488                     ___xxtofl:
  3685                           	callstack 29
  3686                           
  3687                           ;incstack = 0
  3688                           ;___xxtofl@sign stored from wreg
  3689   002488  6E09               	movwf	___xxtofl@sign^0,c
  3690   00248A  5009               	movf	___xxtofl@sign^0,w,c
  3691   00248C  B4D8               	btfsc	status,2,c
  3692   00248E  EF4B  F012         	goto	u3761
  3693   002492  EF4D  F012         	goto	u3760
  3694   002496                     u3761:
  3695   002496  EF6F  F012         	goto	l1003
  3696   00249A                     u3760:
  3697   00249A  BE04               	btfsc	(___xxtofl@val+3)^0,7,c
  3698   00249C  EF54  F012         	goto	u3770
  3699   0024A0  EF52  F012         	goto	u3771
  3700   0024A4                     u3771:
  3701   0024A4  EF6F  F012         	goto	l1003
  3702   0024A8                     u3770:
  3703   0024A8  C001  F005         	movff	___xxtofl@val,??___xxtofl
  3704   0024AC  C002  F006         	movff	___xxtofl@val+1,??___xxtofl+1
  3705   0024B0  C003  F007         	movff	___xxtofl@val+2,??___xxtofl+2
  3706   0024B4  C004  F008         	movff	___xxtofl@val+3,??___xxtofl+3
  3707   0024B8  1E05               	comf	??___xxtofl^0,f,c
  3708   0024BA  1E06               	comf	(??___xxtofl+1)^0,f,c
  3709   0024BC  1E07               	comf	(??___xxtofl+2)^0,f,c
  3710   0024BE  1E08               	comf	(??___xxtofl+3)^0,f,c
  3711   0024C0  2A05               	incf	??___xxtofl^0,f,c
  3712   0024C2  0E00               	movlw	0
  3713   0024C4  2206               	addwfc	(??___xxtofl+1)^0,f,c
  3714   0024C6  2207               	addwfc	(??___xxtofl+2)^0,f,c
  3715   0024C8  2208               	addwfc	(??___xxtofl+3)^0,f,c
  3716   0024CA  C005  F00B         	movff	??___xxtofl,___xxtofl@arg
  3717   0024CE  C006  F00C         	movff	??___xxtofl+1,___xxtofl@arg+1
  3718   0024D2  C007  F00D         	movff	??___xxtofl+2,___xxtofl@arg+2
  3719   0024D6  C008  F00E         	movff	??___xxtofl+3,___xxtofl@arg+3
  3720   0024DA  EF77  F012         	goto	l3560
  3721   0024DE                     l1003:
  3722   0024DE  C001  F00B         	movff	___xxtofl@val,___xxtofl@arg
  3723   0024E2  C002  F00C         	movff	___xxtofl@val+1,___xxtofl@arg+1
  3724   0024E6  C003  F00D         	movff	___xxtofl@val+2,___xxtofl@arg+2
  3725   0024EA  C004  F00E         	movff	___xxtofl@val+3,___xxtofl@arg+3
  3726   0024EE                     l3560:
  3727   0024EE  5001               	movf	___xxtofl@val^0,w,c
  3728   0024F0  1002               	iorwf	(___xxtofl@val+1)^0,w,c
  3729   0024F2  1003               	iorwf	(___xxtofl@val+2)^0,w,c
  3730   0024F4  1004               	iorwf	(___xxtofl@val+3)^0,w,c
  3731   0024F6  A4D8               	btfss	status,2,c
  3732   0024F8  EF80  F012         	goto	u3781
  3733   0024FC  EF82  F012         	goto	u3780
  3734   002500                     u3781:
  3735   002500  EF8C  F012         	goto	l3566
  3736   002504                     u3780:
  3737   002504  0E00               	movlw	0
  3738   002506  6E01               	movwf	?___xxtofl^0,c
  3739   002508  0E00               	movlw	0
  3740   00250A  6E02               	movwf	(?___xxtofl+1)^0,c
  3741   00250C  0E00               	movlw	0
  3742   00250E  6E03               	movwf	(?___xxtofl+2)^0,c
  3743   002510  0E00               	movlw	0
  3744   002512  6E04               	movwf	(?___xxtofl+3)^0,c
  3745   002514  EF1D  F013         	goto	l1006
  3746   002518                     l3566:
  3747   002518  0E96               	movlw	150
  3748   00251A  6E0A               	movwf	___xxtofl@exp^0,c
  3749   00251C  EF96  F012         	goto	l3570
  3750   002520                     l3568:
  3751   002520  2A0A               	incf	___xxtofl@exp^0,f,c
  3752   002522  90D8               	bcf	status,0,c
  3753   002524  320E               	rrcf	(___xxtofl@arg+3)^0,f,c
  3754   002526  320D               	rrcf	(___xxtofl@arg+2)^0,f,c
  3755   002528  320C               	rrcf	(___xxtofl@arg+1)^0,f,c
  3756   00252A  320B               	rrcf	___xxtofl@arg^0,f,c
  3757   00252C                     l3570:
  3758   00252C  0E00               	movlw	0
  3759   00252E  140B               	andwf	___xxtofl@arg^0,w,c
  3760   002530  6E05               	movwf	??___xxtofl^0,c
  3761   002532  0E00               	movlw	0
  3762   002534  140C               	andwf	(___xxtofl@arg+1)^0,w,c
  3763   002536  6E06               	movwf	(??___xxtofl+1)^0,c
  3764   002538  0E00               	movlw	0
  3765   00253A  140D               	andwf	(___xxtofl@arg+2)^0,w,c
  3766   00253C  6E07               	movwf	(??___xxtofl+2)^0,c
  3767   00253E  0EFE               	movlw	254
  3768   002540  140E               	andwf	(___xxtofl@arg+3)^0,w,c
  3769   002542  6E08               	movwf	(??___xxtofl+3)^0,c
  3770   002544  5005               	movf	??___xxtofl^0,w,c
  3771   002546  1006               	iorwf	(??___xxtofl+1)^0,w,c
  3772   002548  1007               	iorwf	(??___xxtofl+2)^0,w,c
  3773   00254A  1008               	iorwf	(??___xxtofl+3)^0,w,c
  3774   00254C  A4D8               	btfss	status,2,c
  3775   00254E  EFAB  F012         	goto	u3791
  3776   002552  EFAD  F012         	goto	u3790
  3777   002556                     u3791:
  3778   002556  EF90  F012         	goto	l3568
  3779   00255A                     u3790:
  3780   00255A  EFBB  F012         	goto	l1010
  3781   00255E                     l3572:
  3782   00255E  2A0A               	incf	___xxtofl@exp^0,f,c
  3783   002560  0E01               	movlw	1
  3784   002562  260B               	addwf	___xxtofl@arg^0,f,c
  3785   002564  0E00               	movlw	0
  3786   002566  220C               	addwfc	(___xxtofl@arg+1)^0,f,c
  3787   002568  220D               	addwfc	(___xxtofl@arg+2)^0,f,c
  3788   00256A  220E               	addwfc	(___xxtofl@arg+3)^0,f,c
  3789   00256C  90D8               	bcf	status,0,c
  3790   00256E  320E               	rrcf	(___xxtofl@arg+3)^0,f,c
  3791   002570  320D               	rrcf	(___xxtofl@arg+2)^0,f,c
  3792   002572  320C               	rrcf	(___xxtofl@arg+1)^0,f,c
  3793   002574  320B               	rrcf	___xxtofl@arg^0,f,c
  3794   002576                     l1010:
  3795   002576  0E00               	movlw	0
  3796   002578  140B               	andwf	___xxtofl@arg^0,w,c
  3797   00257A  6E05               	movwf	??___xxtofl^0,c
  3798   00257C  0E00               	movlw	0
  3799   00257E  140C               	andwf	(___xxtofl@arg+1)^0,w,c
  3800   002580  6E06               	movwf	(??___xxtofl+1)^0,c
  3801   002582  0E00               	movlw	0
  3802   002584  140D               	andwf	(___xxtofl@arg+2)^0,w,c
  3803   002586  6E07               	movwf	(??___xxtofl+2)^0,c
  3804   002588  0EFF               	movlw	255
  3805   00258A  140E               	andwf	(___xxtofl@arg+3)^0,w,c
  3806   00258C  6E08               	movwf	(??___xxtofl+3)^0,c
  3807   00258E  5005               	movf	??___xxtofl^0,w,c
  3808   002590  1006               	iorwf	(??___xxtofl+1)^0,w,c
  3809   002592  1007               	iorwf	(??___xxtofl+2)^0,w,c
  3810   002594  1008               	iorwf	(??___xxtofl+3)^0,w,c
  3811   002596  A4D8               	btfss	status,2,c
  3812   002598  EFD0  F012         	goto	u3801
  3813   00259C  EFD2  F012         	goto	u3800
  3814   0025A0                     u3801:
  3815   0025A0  EFAF  F012         	goto	l3572
  3816   0025A4                     u3800:
  3817   0025A4  EFDA  F012         	goto	l3580
  3818   0025A8                     l3578:
  3819   0025A8  060A               	decf	___xxtofl@exp^0,f,c
  3820   0025AA  90D8               	bcf	status,0,c
  3821   0025AC  360B               	rlcf	___xxtofl@arg^0,f,c
  3822   0025AE  360C               	rlcf	(___xxtofl@arg+1)^0,f,c
  3823   0025B0  360D               	rlcf	(___xxtofl@arg+2)^0,f,c
  3824   0025B2  360E               	rlcf	(___xxtofl@arg+3)^0,f,c
  3825   0025B4                     l3580:
  3826   0025B4  BE0D               	btfsc	(___xxtofl@arg+2)^0,7,c
  3827   0025B6  EFDF  F012         	goto	u3811
  3828   0025BA  EFE1  F012         	goto	u3810
  3829   0025BE                     u3811:
  3830   0025BE  EFE9  F012         	goto	l1017
  3831   0025C2                     u3810:
  3832   0025C2  0E02               	movlw	2
  3833   0025C4  600A               	cpfslt	___xxtofl@exp^0,c
  3834   0025C6  EFE7  F012         	goto	u3821
  3835   0025CA  EFE9  F012         	goto	u3820
  3836   0025CE                     u3821:
  3837   0025CE  EFD4  F012         	goto	l3578
  3838   0025D2                     u3820:
  3839   0025D2                     l1017:
  3840   0025D2  B00A               	btfsc	___xxtofl@exp^0,0,c
  3841   0025D4  EFEE  F012         	goto	u3831
  3842   0025D8  EFF0  F012         	goto	u3830
  3843   0025DC                     u3831:
  3844   0025DC  EFF1  F012         	goto	l3586
  3845   0025E0                     u3830:
  3846   0025E0  9E0D               	bcf	(___xxtofl@arg+2)^0,7,c
  3847   0025E2                     l3586:
  3848   0025E2  90D8               	bcf	status,0,c
  3849   0025E4  320A               	rrcf	___xxtofl@exp^0,f,c
  3850   0025E6  C00A  F005         	movff	___xxtofl@exp,??___xxtofl
  3851   0025EA  6A06               	clrf	(??___xxtofl+1)^0,c
  3852   0025EC  6A07               	clrf	(??___xxtofl+2)^0,c
  3853   0025EE  6A08               	clrf	(??___xxtofl+3)^0,c
  3854   0025F0  C005  F008         	movff	??___xxtofl,??___xxtofl+3
  3855   0025F4  6A07               	clrf	(??___xxtofl+2)^0,c
  3856   0025F6  6A06               	clrf	(??___xxtofl+1)^0,c
  3857   0025F8  6A05               	clrf	??___xxtofl^0,c
  3858   0025FA  5005               	movf	??___xxtofl^0,w,c
  3859   0025FC  120B               	iorwf	___xxtofl@arg^0,f,c
  3860   0025FE  5006               	movf	(??___xxtofl+1)^0,w,c
  3861   002600  120C               	iorwf	(___xxtofl@arg+1)^0,f,c
  3862   002602  5007               	movf	(??___xxtofl+2)^0,w,c
  3863   002604  120D               	iorwf	(___xxtofl@arg+2)^0,f,c
  3864   002606  5008               	movf	(??___xxtofl+3)^0,w,c
  3865   002608  120E               	iorwf	(___xxtofl@arg+3)^0,f,c
  3866   00260A  5009               	movf	___xxtofl@sign^0,w,c
  3867   00260C  B4D8               	btfsc	status,2,c
  3868   00260E  EF0B  F013         	goto	u3841
  3869   002612  EF0D  F013         	goto	u3840
  3870   002616                     u3841:
  3871   002616  EF15  F013         	goto	l3596
  3872   00261A                     u3840:
  3873   00261A  BE04               	btfsc	(___xxtofl@val+3)^0,7,c
  3874   00261C  EF14  F013         	goto	u3850
  3875   002620  EF12  F013         	goto	u3851
  3876   002624                     u3851:
  3877   002624  EF15  F013         	goto	l3596
  3878   002628                     u3850:
  3879   002628  8E0E               	bsf	(___xxtofl@arg+3)^0,7,c
  3880   00262A                     l3596:
  3881   00262A  C00B  F001         	movff	___xxtofl@arg,?___xxtofl
  3882   00262E  C00C  F002         	movff	___xxtofl@arg+1,?___xxtofl+1
  3883   002632  C00D  F003         	movff	___xxtofl@arg+2,?___xxtofl+2
  3884   002636  C00E  F004         	movff	___xxtofl@arg+3,?___xxtofl+3
  3885   00263A                     l1006:
  3886   00263A  0012               	return		;funcret
  3887   00263C                     __end_of___xxtofl:
  3888                           	callstack 0
  3889                           
  3890 ;; *************** function ___fltol *****************
  3891 ;; Defined at:
  3892 ;;		line 43 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\fltol.c"
  3893 ;; Parameters:    Size  Location     Type
  3894 ;;  f1              4   55[COMRAM] unsigned char 
  3895 ;; Auto vars:     Size  Location     Type
  3896 ;;  exp1            1   64[COMRAM] unsigned char 
  3897 ;;  sign1           1   63[COMRAM] unsigned char 
  3898 ;; Return value:  Size  Location     Type
  3899 ;;                  4   55[COMRAM] long 
  3900 ;; Registers used:
  3901 ;;		wreg, status,2, status,0
  3902 ;; Tracked objects:
  3903 ;;		On entry : 0/0
  3904 ;;		On exit  : 0/0
  3905 ;;		Unchanged: 0/0
  3906 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3907 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3908 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3909 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3910 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3911 ;;Total ram usage:       10 bytes
  3912 ;; Hardware stack levels used: 1
  3913 ;; Hardware stack levels required when called: 1
  3914 ;; This function calls:
  3915 ;;		Nothing
  3916 ;; This function is called by:
  3917 ;;		_main
  3918 ;; This function uses a non-reentrant model
  3919 ;;
  3920                           
  3921                           	psect	text14
  3922   002A46                     __ptext14:
  3923                           	callstack 0
  3924   002A46                     ___fltol:
  3925                           	callstack 29
  3926   002A46  343A               	rlcf	(___fltol@f1+2)^0,w,c
  3927   002A48  343B               	rlcf	(___fltol@f1+3)^0,w,c
  3928   002A4A  6E41               	movwf	___fltol@exp1^0,c
  3929   002A4C  5041               	movf	___fltol@exp1^0,w,c
  3930   002A4E  A4D8               	btfss	status,2,c
  3931   002A50  EF2C  F015         	goto	u3691
  3932   002A54  EF2E  F015         	goto	u3690
  3933   002A58                     u3691:
  3934   002A58  EF38  F015         	goto	l3516
  3935   002A5C                     u3690:
  3936   002A5C                     l3512:
  3937   002A5C  0E00               	movlw	0
  3938   002A5E  6E38               	movwf	?___fltol^0,c
  3939   002A60  0E00               	movlw	0
  3940   002A62  6E39               	movwf	(?___fltol+1)^0,c
  3941   002A64  0E00               	movlw	0
  3942   002A66  6E3A               	movwf	(?___fltol+2)^0,c
  3943   002A68  0E00               	movlw	0
  3944   002A6A  6E3B               	movwf	(?___fltol+3)^0,c
  3945   002A6C  EFA5  F015         	goto	l645
  3946   002A70                     l3516:
  3947   002A70  C038  F03C         	movff	___fltol@f1,??___fltol
  3948   002A74  C039  F03D         	movff	___fltol@f1+1,??___fltol+1
  3949   002A78  C03A  F03E         	movff	___fltol@f1+2,??___fltol+2
  3950   002A7C  C03B  F03F         	movff	___fltol@f1+3,??___fltol+3
  3951   002A80  0E20               	movlw	32
  3952   002A82  EF48  F015         	goto	u3700
  3953   002A86                     u3705:
  3954   002A86  90D8               	bcf	status,0,c
  3955   002A88  323F               	rrcf	(??___fltol+3)^0,f,c
  3956   002A8A  323E               	rrcf	(??___fltol+2)^0,f,c
  3957   002A8C  323D               	rrcf	(??___fltol+1)^0,f,c
  3958   002A8E  323C               	rrcf	??___fltol^0,f,c
  3959   002A90                     u3700:
  3960   002A90  2EE8               	decfsz	wreg,f,c
  3961   002A92  EF43  F015         	goto	u3705
  3962   002A96  503C               	movf	??___fltol^0,w,c
  3963   002A98  6E40               	movwf	___fltol@sign1^0,c
  3964   002A9A  8E3A               	bsf	(___fltol@f1+2)^0,7,c
  3965   002A9C  0EFF               	movlw	255
  3966   002A9E  1638               	andwf	___fltol@f1^0,f,c
  3967   002AA0  0EFF               	movlw	255
  3968   002AA2  1639               	andwf	(___fltol@f1+1)^0,f,c
  3969   002AA4  0EFF               	movlw	255
  3970   002AA6  163A               	andwf	(___fltol@f1+2)^0,f,c
  3971   002AA8  0E00               	movlw	0
  3972   002AAA  163B               	andwf	(___fltol@f1+3)^0,f,c
  3973   002AAC  0E96               	movlw	150
  3974   002AAE  5E41               	subwf	___fltol@exp1^0,f,c
  3975   002AB0  BE41               	btfsc	___fltol@exp1^0,7,c
  3976   002AB2  EF5F  F015         	goto	u3710
  3977   002AB6  EF5D  F015         	goto	u3711
  3978   002ABA                     u3711:
  3979   002ABA  EF75  F015         	goto	l3536
  3980   002ABE                     u3710:
  3981   002ABE  5041               	movf	___fltol@exp1^0,w,c
  3982   002AC0  0A80               	xorlw	128
  3983   002AC2  0F97               	addlw	151
  3984   002AC4  B0D8               	btfsc	status,0,c
  3985   002AC6  EF67  F015         	goto	u3721
  3986   002ACA  EF69  F015         	goto	u3720
  3987   002ACE                     u3721:
  3988   002ACE  EF6B  F015         	goto	l3532
  3989   002AD2                     u3720:
  3990   002AD2  EF2E  F015         	goto	l3512
  3991   002AD6                     l3532:
  3992   002AD6  90D8               	bcf	status,0,c
  3993   002AD8  323B               	rrcf	(___fltol@f1+3)^0,f,c
  3994   002ADA  323A               	rrcf	(___fltol@f1+2)^0,f,c
  3995   002ADC  3239               	rrcf	(___fltol@f1+1)^0,f,c
  3996   002ADE  3238               	rrcf	___fltol@f1^0,f,c
  3997   002AE0  3E41               	incfsz	___fltol@exp1^0,f,c
  3998   002AE2  EF6B  F015         	goto	l3532
  3999   002AE6  EF8D  F015         	goto	l3546
  4000   002AEA                     l3536:
  4001   002AEA  0E1F               	movlw	31
  4002   002AEC  6441               	cpfsgt	___fltol@exp1^0,c
  4003   002AEE  EF7B  F015         	goto	u3731
  4004   002AF2  EF7D  F015         	goto	u3730
  4005   002AF6                     u3731:
  4006   002AF6  EF85  F015         	goto	l3544
  4007   002AFA                     u3730:
  4008   002AFA  EF2E  F015         	goto	l3512
  4009   002AFE                     l3542:
  4010   002AFE  90D8               	bcf	status,0,c
  4011   002B00  3638               	rlcf	___fltol@f1^0,f,c
  4012   002B02  3639               	rlcf	(___fltol@f1+1)^0,f,c
  4013   002B04  363A               	rlcf	(___fltol@f1+2)^0,f,c
  4014   002B06  363B               	rlcf	(___fltol@f1+3)^0,f,c
  4015   002B08  0641               	decf	___fltol@exp1^0,f,c
  4016   002B0A                     l3544:
  4017   002B0A  5041               	movf	___fltol@exp1^0,w,c
  4018   002B0C  A4D8               	btfss	status,2,c
  4019   002B0E  EF8B  F015         	goto	u3741
  4020   002B12  EF8D  F015         	goto	u3740
  4021   002B16                     u3741:
  4022   002B16  EF7F  F015         	goto	l3542
  4023   002B1A                     u3740:
  4024   002B1A                     l3546:
  4025   002B1A  5040               	movf	___fltol@sign1^0,w,c
  4026   002B1C  B4D8               	btfsc	status,2,c
  4027   002B1E  EF93  F015         	goto	u3751
  4028   002B22  EF95  F015         	goto	u3750
  4029   002B26                     u3751:
  4030   002B26  EF9D  F015         	goto	l3550
  4031   002B2A                     u3750:
  4032   002B2A  1E3B               	comf	(___fltol@f1+3)^0,f,c
  4033   002B2C  1E3A               	comf	(___fltol@f1+2)^0,f,c
  4034   002B2E  1E39               	comf	(___fltol@f1+1)^0,f,c
  4035   002B30  6C38               	negf	___fltol@f1^0,c
  4036   002B32  0E00               	movlw	0
  4037   002B34  2239               	addwfc	(___fltol@f1+1)^0,f,c
  4038   002B36  223A               	addwfc	(___fltol@f1+2)^0,f,c
  4039   002B38  223B               	addwfc	(___fltol@f1+3)^0,f,c
  4040   002B3A                     l3550:
  4041   002B3A  C038  F038         	movff	___fltol@f1,?___fltol
  4042   002B3E  C039  F039         	movff	___fltol@f1+1,?___fltol+1
  4043   002B42  C03A  F03A         	movff	___fltol@f1+2,?___fltol+2
  4044   002B46  C03B  F03B         	movff	___fltol@f1+3,?___fltol+3
  4045   002B4A                     l645:
  4046   002B4A  0012               	return		;funcret
  4047   002B4C                     __end_of___fltol:
  4048                           	callstack 0
  4049                           
  4050 ;; *************** function ___flmul *****************
  4051 ;; Defined at:
  4052 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\sprcmul.c"
  4053 ;; Parameters:    Size  Location     Type
  4054 ;;  b               4   14[COMRAM] long 
  4055 ;;  a               4   18[COMRAM] long 
  4056 ;; Auto vars:     Size  Location     Type
  4057 ;;  prod            4   33[COMRAM] struct .
  4058 ;;  grs             4   27[COMRAM] unsigned long 
  4059 ;;  temp            2   37[COMRAM] struct .
  4060 ;;  bexp            1   32[COMRAM] unsigned char 
  4061 ;;  aexp            1   31[COMRAM] unsigned char 
  4062 ;;  sign            1   26[COMRAM] unsigned char 
  4063 ;; Return value:  Size  Location     Type
  4064 ;;                  4   14[COMRAM] unsigned char 
  4065 ;; Registers used:
  4066 ;;		wreg, status,2, status,0, prodl, prodh
  4067 ;; Tracked objects:
  4068 ;;		On entry : 0/0
  4069 ;;		On exit  : 0/0
  4070 ;;		Unchanged: 0/0
  4071 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4072 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4073 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4074 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4075 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4076 ;;Total ram usage:       25 bytes
  4077 ;; Hardware stack levels used: 1
  4078 ;; Hardware stack levels required when called: 1
  4079 ;; This function calls:
  4080 ;;		Nothing
  4081 ;; This function is called by:
  4082 ;;		_main
  4083 ;; This function uses a non-reentrant model
  4084 ;;
  4085                           
  4086                           	psect	text15
  4087   00205E                     __ptext15:
  4088                           	callstack 0
  4089   00205E                     ___flmul:
  4090                           	callstack 29
  4091   00205E  5012               	movf	(___flmul@b+3)^0,w,c
  4092   002060  0B80               	andlw	128
  4093   002062  6E1B               	movwf	___flmul@sign^0,c
  4094   002064  5012               	movf	(___flmul@b+3)^0,w,c
  4095   002066  2412               	addwf	(___flmul@b+3)^0,w,c
  4096   002068  6E21               	movwf	___flmul@bexp^0,c
  4097   00206A  AE11               	btfss	(___flmul@b+2)^0,7,c
  4098   00206C  EF3A  F010         	goto	u3501
  4099   002070  EF3C  F010         	goto	u3500
  4100   002074                     u3501:
  4101   002074  EF3D  F010         	goto	l3386
  4102   002078                     u3500:
  4103   002078  8021               	bsf	___flmul@bexp^0,0,c
  4104   00207A                     l3386:
  4105   00207A  5021               	movf	___flmul@bexp^0,w,c
  4106   00207C  B4D8               	btfsc	status,2,c
  4107   00207E  EF43  F010         	goto	u3511
  4108   002082  EF45  F010         	goto	u3510
  4109   002086                     u3511:
  4110   002086  EF58  F010         	goto	l3394
  4111   00208A                     u3510:
  4112   00208A  2821               	incf	___flmul@bexp^0,w,c
  4113   00208C  A4D8               	btfss	status,2,c
  4114   00208E  EF4B  F010         	goto	u3521
  4115   002092  EF4D  F010         	goto	u3520
  4116   002096                     u3521:
  4117   002096  EF55  F010         	goto	l3392
  4118   00209A                     u3520:
  4119   00209A  0E00               	movlw	0
  4120   00209C  6E0F               	movwf	___flmul@b^0,c
  4121   00209E  0E00               	movlw	0
  4122   0020A0  6E10               	movwf	(___flmul@b+1)^0,c
  4123   0020A2  0E00               	movlw	0
  4124   0020A4  6E11               	movwf	(___flmul@b+2)^0,c
  4125   0020A6  0E00               	movlw	0
  4126   0020A8  6E12               	movwf	(___flmul@b+3)^0,c
  4127   0020AA                     l3392:
  4128   0020AA  8E11               	bsf	(___flmul@b+2)^0,7,c
  4129   0020AC  EF60  F010         	goto	l3396
  4130   0020B0                     l3394:
  4131   0020B0  0E00               	movlw	0
  4132   0020B2  6E0F               	movwf	___flmul@b^0,c
  4133   0020B4  0E00               	movlw	0
  4134   0020B6  6E10               	movwf	(___flmul@b+1)^0,c
  4135   0020B8  0E00               	movlw	0
  4136   0020BA  6E11               	movwf	(___flmul@b+2)^0,c
  4137   0020BC  0E00               	movlw	0
  4138   0020BE  6E12               	movwf	(___flmul@b+3)^0,c
  4139   0020C0                     l3396:
  4140   0020C0  5016               	movf	(___flmul@a+3)^0,w,c
  4141   0020C2  0B80               	andlw	128
  4142   0020C4  1A1B               	xorwf	___flmul@sign^0,f,c
  4143   0020C6  5016               	movf	(___flmul@a+3)^0,w,c
  4144   0020C8  2416               	addwf	(___flmul@a+3)^0,w,c
  4145   0020CA  6E20               	movwf	___flmul@aexp^0,c
  4146   0020CC  AE15               	btfss	(___flmul@a+2)^0,7,c
  4147   0020CE  EF6B  F010         	goto	u3531
  4148   0020D2  EF6D  F010         	goto	u3530
  4149   0020D6                     u3531:
  4150   0020D6  EF6E  F010         	goto	l3404
  4151   0020DA                     u3530:
  4152   0020DA  8020               	bsf	___flmul@aexp^0,0,c
  4153   0020DC                     l3404:
  4154   0020DC  5020               	movf	___flmul@aexp^0,w,c
  4155   0020DE  B4D8               	btfsc	status,2,c
  4156   0020E0  EF74  F010         	goto	u3541
  4157   0020E4  EF76  F010         	goto	u3540
  4158   0020E8                     u3541:
  4159   0020E8  EF89  F010         	goto	l3412
  4160   0020EC                     u3540:
  4161   0020EC  2820               	incf	___flmul@aexp^0,w,c
  4162   0020EE  A4D8               	btfss	status,2,c
  4163   0020F0  EF7C  F010         	goto	u3551
  4164   0020F4  EF7E  F010         	goto	u3550
  4165   0020F8                     u3551:
  4166   0020F8  EF86  F010         	goto	l3410
  4167   0020FC                     u3550:
  4168   0020FC  0E00               	movlw	0
  4169   0020FE  6E13               	movwf	___flmul@a^0,c
  4170   002100  0E00               	movlw	0
  4171   002102  6E14               	movwf	(___flmul@a+1)^0,c
  4172   002104  0E00               	movlw	0
  4173   002106  6E15               	movwf	(___flmul@a+2)^0,c
  4174   002108  0E00               	movlw	0
  4175   00210A  6E16               	movwf	(___flmul@a+3)^0,c
  4176   00210C                     l3410:
  4177   00210C  8E15               	bsf	(___flmul@a+2)^0,7,c
  4178   00210E  EF91  F010         	goto	l962
  4179   002112                     l3412:
  4180   002112  0E00               	movlw	0
  4181   002114  6E13               	movwf	___flmul@a^0,c
  4182   002116  0E00               	movlw	0
  4183   002118  6E14               	movwf	(___flmul@a+1)^0,c
  4184   00211A  0E00               	movlw	0
  4185   00211C  6E15               	movwf	(___flmul@a+2)^0,c
  4186   00211E  0E00               	movlw	0
  4187   002120  6E16               	movwf	(___flmul@a+3)^0,c
  4188   002122                     l962:
  4189   002122  5020               	movf	___flmul@aexp^0,w,c
  4190   002124  B4D8               	btfsc	status,2,c
  4191   002126  EF97  F010         	goto	u3561
  4192   00212A  EF99  F010         	goto	u3560
  4193   00212E                     u3561:
  4194   00212E  EFA1  F010         	goto	l3416
  4195   002132                     u3560:
  4196   002132  5021               	movf	___flmul@bexp^0,w,c
  4197   002134  A4D8               	btfss	status,2,c
  4198   002136  EF9F  F010         	goto	u3571
  4199   00213A  EFA1  F010         	goto	u3570
  4200   00213E                     u3571:
  4201   00213E  EFAB  F010         	goto	l3420
  4202   002142                     u3570:
  4203   002142                     l3416:
  4204   002142  0E00               	movlw	0
  4205   002144  6E0F               	movwf	?___flmul^0,c
  4206   002146  0E00               	movlw	0
  4207   002148  6E10               	movwf	(?___flmul+1)^0,c
  4208   00214A  0E00               	movlw	0
  4209   00214C  6E11               	movwf	(?___flmul+2)^0,c
  4210   00214E  0E00               	movlw	0
  4211   002150  6E12               	movwf	(?___flmul+3)^0,c
  4212   002152  EF43  F012         	goto	l966
  4213   002156                     l3420:
  4214   002156  5015               	movf	(___flmul@a+2)^0,w,c
  4215   002158  020F               	mulwf	___flmul@b^0,c
  4216   00215A  CFF3 F026          	movff	prodl,___flmul@temp
  4217   00215E  CFF4 F027          	movff	prodh,___flmul@temp+1
  4218   002162  5026               	movf	___flmul@temp^0,w,c
  4219   002164  6E1C               	movwf	___flmul@grs^0,c
  4220   002166  6A1D               	clrf	(___flmul@grs+1)^0,c
  4221   002168  6A1E               	clrf	(___flmul@grs+2)^0,c
  4222   00216A  6A1F               	clrf	(___flmul@grs+3)^0,c
  4223   00216C  5027               	movf	(___flmul@temp+1)^0,w,c
  4224   00216E  6E22               	movwf	___flmul@prod^0,c
  4225   002170  6A23               	clrf	(___flmul@prod+1)^0,c
  4226   002172  6A24               	clrf	(___flmul@prod+2)^0,c
  4227   002174  6A25               	clrf	(___flmul@prod+3)^0,c
  4228   002176  5014               	movf	(___flmul@a+1)^0,w,c
  4229   002178  0210               	mulwf	(___flmul@b+1)^0,c
  4230   00217A  CFF3 F026          	movff	prodl,___flmul@temp
  4231   00217E  CFF4 F027          	movff	prodh,___flmul@temp+1
  4232   002182  5026               	movf	___flmul@temp^0,w,c
  4233   002184  261C               	addwf	___flmul@grs^0,f,c
  4234   002186  0E00               	movlw	0
  4235   002188  221D               	addwfc	(___flmul@grs+1)^0,f,c
  4236   00218A  221E               	addwfc	(___flmul@grs+2)^0,f,c
  4237   00218C  221F               	addwfc	(___flmul@grs+3)^0,f,c
  4238   00218E  5027               	movf	(___flmul@temp+1)^0,w,c
  4239   002190  2622               	addwf	___flmul@prod^0,f,c
  4240   002192  0E00               	movlw	0
  4241   002194  2223               	addwfc	(___flmul@prod+1)^0,f,c
  4242   002196  2224               	addwfc	(___flmul@prod+2)^0,f,c
  4243   002198  2225               	addwfc	(___flmul@prod+3)^0,f,c
  4244   00219A  5013               	movf	___flmul@a^0,w,c
  4245   00219C  0211               	mulwf	(___flmul@b+2)^0,c
  4246   00219E  CFF3 F026          	movff	prodl,___flmul@temp
  4247   0021A2  CFF4 F027          	movff	prodh,___flmul@temp+1
  4248   0021A6  5026               	movf	___flmul@temp^0,w,c
  4249   0021A8  261C               	addwf	___flmul@grs^0,f,c
  4250   0021AA  0E00               	movlw	0
  4251   0021AC  221D               	addwfc	(___flmul@grs+1)^0,f,c
  4252   0021AE  221E               	addwfc	(___flmul@grs+2)^0,f,c
  4253   0021B0  221F               	addwfc	(___flmul@grs+3)^0,f,c
  4254   0021B2  5027               	movf	(___flmul@temp+1)^0,w,c
  4255   0021B4  2622               	addwf	___flmul@prod^0,f,c
  4256   0021B6  0E00               	movlw	0
  4257   0021B8  2223               	addwfc	(___flmul@prod+1)^0,f,c
  4258   0021BA  2224               	addwfc	(___flmul@prod+2)^0,f,c
  4259   0021BC  2225               	addwfc	(___flmul@prod+3)^0,f,c
  4260   0021BE  C01E  F01F         	movff	___flmul@grs+2,___flmul@grs+3
  4261   0021C2  C01D  F01E         	movff	___flmul@grs+1,___flmul@grs+2
  4262   0021C6  C01C  F01D         	movff	___flmul@grs,___flmul@grs+1
  4263   0021CA  6A1C               	clrf	___flmul@grs^0,c
  4264   0021CC  5013               	movf	___flmul@a^0,w,c
  4265   0021CE  0210               	mulwf	(___flmul@b+1)^0,c
  4266   0021D0  CFF3 F026          	movff	prodl,___flmul@temp
  4267   0021D4  CFF4 F027          	movff	prodh,___flmul@temp+1
  4268   0021D8  5026               	movf	___flmul@temp^0,w,c
  4269   0021DA  261C               	addwf	___flmul@grs^0,f,c
  4270   0021DC  5027               	movf	(___flmul@temp+1)^0,w,c
  4271   0021DE  221D               	addwfc	(___flmul@grs+1)^0,f,c
  4272   0021E0  0E00               	movlw	0
  4273   0021E2  221E               	addwfc	(___flmul@grs+2)^0,f,c
  4274   0021E4  0E00               	movlw	0
  4275   0021E6  221F               	addwfc	(___flmul@grs+3)^0,f,c
  4276   0021E8  5014               	movf	(___flmul@a+1)^0,w,c
  4277   0021EA  020F               	mulwf	___flmul@b^0,c
  4278   0021EC  CFF3 F026          	movff	prodl,___flmul@temp
  4279   0021F0  CFF4 F027          	movff	prodh,___flmul@temp+1
  4280   0021F4  5026               	movf	___flmul@temp^0,w,c
  4281   0021F6  261C               	addwf	___flmul@grs^0,f,c
  4282   0021F8  5027               	movf	(___flmul@temp+1)^0,w,c
  4283   0021FA  221D               	addwfc	(___flmul@grs+1)^0,f,c
  4284   0021FC  0E00               	movlw	0
  4285   0021FE  221E               	addwfc	(___flmul@grs+2)^0,f,c
  4286   002200  0E00               	movlw	0
  4287   002202  221F               	addwfc	(___flmul@grs+3)^0,f,c
  4288   002204  C01E  F01F         	movff	___flmul@grs+2,___flmul@grs+3
  4289   002208  C01D  F01E         	movff	___flmul@grs+1,___flmul@grs+2
  4290   00220C  C01C  F01D         	movff	___flmul@grs,___flmul@grs+1
  4291   002210  6A1C               	clrf	___flmul@grs^0,c
  4292   002212  5013               	movf	___flmul@a^0,w,c
  4293   002214  020F               	mulwf	___flmul@b^0,c
  4294   002216  CFF3 F026          	movff	prodl,___flmul@temp
  4295   00221A  CFF4 F027          	movff	prodh,___flmul@temp+1
  4296   00221E  5026               	movf	___flmul@temp^0,w,c
  4297   002220  261C               	addwf	___flmul@grs^0,f,c
  4298   002222  5027               	movf	(___flmul@temp+1)^0,w,c
  4299   002224  221D               	addwfc	(___flmul@grs+1)^0,f,c
  4300   002226  0E00               	movlw	0
  4301   002228  221E               	addwfc	(___flmul@grs+2)^0,f,c
  4302   00222A  0E00               	movlw	0
  4303   00222C  221F               	addwfc	(___flmul@grs+3)^0,f,c
  4304   00222E  5015               	movf	(___flmul@a+2)^0,w,c
  4305   002230  0210               	mulwf	(___flmul@b+1)^0,c
  4306   002232  CFF3 F026          	movff	prodl,___flmul@temp
  4307   002236  CFF4 F027          	movff	prodh,___flmul@temp+1
  4308   00223A  5026               	movf	___flmul@temp^0,w,c
  4309   00223C  2622               	addwf	___flmul@prod^0,f,c
  4310   00223E  5027               	movf	(___flmul@temp+1)^0,w,c
  4311   002240  2223               	addwfc	(___flmul@prod+1)^0,f,c
  4312   002242  0E00               	movlw	0
  4313   002244  2224               	addwfc	(___flmul@prod+2)^0,f,c
  4314   002246  0E00               	movlw	0
  4315   002248  2225               	addwfc	(___flmul@prod+3)^0,f,c
  4316   00224A  5014               	movf	(___flmul@a+1)^0,w,c
  4317   00224C  0211               	mulwf	(___flmul@b+2)^0,c
  4318   00224E  CFF3 F026          	movff	prodl,___flmul@temp
  4319   002252  CFF4 F027          	movff	prodh,___flmul@temp+1
  4320   002256  5026               	movf	___flmul@temp^0,w,c
  4321   002258  2622               	addwf	___flmul@prod^0,f,c
  4322   00225A  5027               	movf	(___flmul@temp+1)^0,w,c
  4323   00225C  2223               	addwfc	(___flmul@prod+1)^0,f,c
  4324   00225E  0E00               	movlw	0
  4325   002260  2224               	addwfc	(___flmul@prod+2)^0,f,c
  4326   002262  0E00               	movlw	0
  4327   002264  2225               	addwfc	(___flmul@prod+3)^0,f,c
  4328   002266  5015               	movf	(___flmul@a+2)^0,w,c
  4329   002268  0211               	mulwf	(___flmul@b+2)^0,c
  4330   00226A  CFF3 F026          	movff	prodl,___flmul@temp
  4331   00226E  CFF4 F027          	movff	prodh,___flmul@temp+1
  4332   002272  5026               	movf	___flmul@temp^0,w,c
  4333   002274  6E17               	movwf	??___flmul^0,c
  4334   002276  5027               	movf	(___flmul@temp+1)^0,w,c
  4335   002278  6E18               	movwf	(??___flmul+1)^0,c
  4336   00227A  6A19               	clrf	(??___flmul+2)^0,c
  4337   00227C  6A1A               	clrf	(??___flmul+3)^0,c
  4338   00227E  C019  F01A         	movff	??___flmul+2,??___flmul+3
  4339   002282  C018  F019         	movff	??___flmul+1,??___flmul+2
  4340   002286  C017  F018         	movff	??___flmul,??___flmul+1
  4341   00228A  6A17               	clrf	??___flmul^0,c
  4342   00228C  5017               	movf	??___flmul^0,w,c
  4343   00228E  2622               	addwf	___flmul@prod^0,f,c
  4344   002290  5018               	movf	(??___flmul+1)^0,w,c
  4345   002292  2223               	addwfc	(___flmul@prod+1)^0,f,c
  4346   002294  5019               	movf	(??___flmul+2)^0,w,c
  4347   002296  2224               	addwfc	(___flmul@prod+2)^0,f,c
  4348   002298  501A               	movf	(??___flmul+3)^0,w,c
  4349   00229A  2225               	addwfc	(___flmul@prod+3)^0,f,c
  4350   00229C  C01C  F017         	movff	___flmul@grs,??___flmul
  4351   0022A0  C01D  F018         	movff	___flmul@grs+1,??___flmul+1
  4352   0022A4  C01E  F019         	movff	___flmul@grs+2,??___flmul+2
  4353   0022A8  C01F  F01A         	movff	___flmul@grs+3,??___flmul+3
  4354   0022AC  0E19               	movlw	25
  4355   0022AE  EF5E  F011         	goto	u3580
  4356   0022B2                     u3585:
  4357   0022B2  90D8               	bcf	status,0,c
  4358   0022B4  321A               	rrcf	(??___flmul+3)^0,f,c
  4359   0022B6  3219               	rrcf	(??___flmul+2)^0,f,c
  4360   0022B8  3218               	rrcf	(??___flmul+1)^0,f,c
  4361   0022BA  3217               	rrcf	??___flmul^0,f,c
  4362   0022BC                     u3580:
  4363   0022BC  2EE8               	decfsz	wreg,f,c
  4364   0022BE  EF59  F011         	goto	u3585
  4365   0022C2  5017               	movf	??___flmul^0,w,c
  4366   0022C4  2622               	addwf	___flmul@prod^0,f,c
  4367   0022C6  5018               	movf	(??___flmul+1)^0,w,c
  4368   0022C8  2223               	addwfc	(___flmul@prod+1)^0,f,c
  4369   0022CA  5019               	movf	(??___flmul+2)^0,w,c
  4370   0022CC  2224               	addwfc	(___flmul@prod+2)^0,f,c
  4371   0022CE  501A               	movf	(??___flmul+3)^0,w,c
  4372   0022D0  2225               	addwfc	(___flmul@prod+3)^0,f,c
  4373   0022D2  C01E  F01F         	movff	___flmul@grs+2,___flmul@grs+3
  4374   0022D6  C01D  F01E         	movff	___flmul@grs+1,___flmul@grs+2
  4375   0022DA  C01C  F01D         	movff	___flmul@grs,___flmul@grs+1
  4376   0022DE  6A1C               	clrf	___flmul@grs^0,c
  4377   0022E0  5020               	movf	___flmul@aexp^0,w,c
  4378   0022E2  C021  F017         	movff	___flmul@bexp,??___flmul
  4379   0022E6  6A18               	clrf	(??___flmul+1)^0,c
  4380   0022E8  2617               	addwf	??___flmul^0,f,c
  4381   0022EA  0E00               	movlw	0
  4382   0022EC  2218               	addwfc	(??___flmul+1)^0,f,c
  4383   0022EE  0E82               	movlw	130
  4384   0022F0  2417               	addwf	??___flmul^0,w,c
  4385   0022F2  6E26               	movwf	___flmul@temp^0,c
  4386   0022F4  0EFF               	movlw	255
  4387   0022F6  2018               	addwfc	(??___flmul+1)^0,w,c
  4388   0022F8  6E27               	movwf	(___flmul@temp+1)^0,c
  4389   0022FA  EF94  F011         	goto	l3468
  4390   0022FE                     l3462:
  4391   0022FE  90D8               	bcf	status,0,c
  4392   002300  3622               	rlcf	___flmul@prod^0,f,c
  4393   002302  3623               	rlcf	(___flmul@prod+1)^0,f,c
  4394   002304  3624               	rlcf	(___flmul@prod+2)^0,f,c
  4395   002306  3625               	rlcf	(___flmul@prod+3)^0,f,c
  4396   002308  AE1F               	btfss	(___flmul@grs+3)^0,7,c
  4397   00230A  EF89  F011         	goto	u3591
  4398   00230E  EF8B  F011         	goto	u3590
  4399   002312                     u3591:
  4400   002312  EF8C  F011         	goto	l969
  4401   002316                     u3590:
  4402   002316  8022               	bsf	___flmul@prod^0,0,c
  4403   002318                     l969:
  4404   002318  90D8               	bcf	status,0,c
  4405   00231A  361C               	rlcf	___flmul@grs^0,f,c
  4406   00231C  361D               	rlcf	(___flmul@grs+1)^0,f,c
  4407   00231E  361E               	rlcf	(___flmul@grs+2)^0,f,c
  4408   002320  361F               	rlcf	(___flmul@grs+3)^0,f,c
  4409   002322  0626               	decf	___flmul@temp^0,f,c
  4410   002324  A0D8               	btfss	status,0,c
  4411   002326  0627               	decf	(___flmul@temp+1)^0,f,c
  4412   002328                     l3468:
  4413   002328  AE24               	btfss	(___flmul@prod+2)^0,7,c
  4414   00232A  EF99  F011         	goto	u3601
  4415   00232E  EF9B  F011         	goto	u3600
  4416   002332                     u3601:
  4417   002332  EF7F  F011         	goto	l3462
  4418   002336                     u3600:
  4419   002336  0E00               	movlw	0
  4420   002338  6E20               	movwf	___flmul@aexp^0,c
  4421   00233A  AE1F               	btfss	(___flmul@grs+3)^0,7,c
  4422   00233C  EFA2  F011         	goto	u3611
  4423   002340  EFA4  F011         	goto	u3610
  4424   002344                     u3611:
  4425   002344  EFC8  F011         	goto	l971
  4426   002348                     u3610:
  4427   002348  0EFF               	movlw	255
  4428   00234A  141C               	andwf	___flmul@grs^0,w,c
  4429   00234C  6E17               	movwf	??___flmul^0,c
  4430   00234E  0EFF               	movlw	255
  4431   002350  141D               	andwf	(___flmul@grs+1)^0,w,c
  4432   002352  6E18               	movwf	(??___flmul+1)^0,c
  4433   002354  0EFF               	movlw	255
  4434   002356  141E               	andwf	(___flmul@grs+2)^0,w,c
  4435   002358  6E19               	movwf	(??___flmul+2)^0,c
  4436   00235A  0E7F               	movlw	127
  4437   00235C  141F               	andwf	(___flmul@grs+3)^0,w,c
  4438   00235E  6E1A               	movwf	(??___flmul+3)^0,c
  4439   002360  5017               	movf	??___flmul^0,w,c
  4440   002362  1018               	iorwf	(??___flmul+1)^0,w,c
  4441   002364  1019               	iorwf	(??___flmul+2)^0,w,c
  4442   002366  101A               	iorwf	(??___flmul+3)^0,w,c
  4443   002368  B4D8               	btfsc	status,2,c
  4444   00236A  EFB9  F011         	goto	u3621
  4445   00236E  EFBB  F011         	goto	u3620
  4446   002372                     u3621:
  4447   002372  EFBF  F011         	goto	l972
  4448   002376                     u3620:
  4449   002376                     l3476:
  4450   002376  0E01               	movlw	1
  4451   002378  6E20               	movwf	___flmul@aexp^0,c
  4452   00237A  EFC8  F011         	goto	l971
  4453   00237E                     l972:
  4454   00237E  A022               	btfss	___flmul@prod^0,0,c
  4455   002380  EFC4  F011         	goto	u3631
  4456   002384  EFC6  F011         	goto	u3630
  4457   002388                     u3631:
  4458   002388  EFC8  F011         	goto	l971
  4459   00238C                     u3630:
  4460   00238C  EFBB  F011         	goto	l3476
  4461   002390                     l971:
  4462   002390  5020               	movf	___flmul@aexp^0,w,c
  4463   002392  B4D8               	btfsc	status,2,c
  4464   002394  EFCE  F011         	goto	u3641
  4465   002398  EFD0  F011         	goto	u3640
  4466   00239C                     u3641:
  4467   00239C  EFF4  F011         	goto	l3488
  4468   0023A0                     u3640:
  4469   0023A0  0E01               	movlw	1
  4470   0023A2  2622               	addwf	___flmul@prod^0,f,c
  4471   0023A4  0E00               	movlw	0
  4472   0023A6  2223               	addwfc	(___flmul@prod+1)^0,f,c
  4473   0023A8  2224               	addwfc	(___flmul@prod+2)^0,f,c
  4474   0023AA  2225               	addwfc	(___flmul@prod+3)^0,f,c
  4475   0023AC  A025               	btfss	(___flmul@prod+3)^0,0,c
  4476   0023AE  EFDB  F011         	goto	u3651
  4477   0023B2  EFDD  F011         	goto	u3650
  4478   0023B6                     u3651:
  4479   0023B6  EFF4  F011         	goto	l3488
  4480   0023BA                     u3650:
  4481   0023BA  C022  F017         	movff	___flmul@prod,??___flmul
  4482   0023BE  C023  F018         	movff	___flmul@prod+1,??___flmul+1
  4483   0023C2  C024  F019         	movff	___flmul@prod+2,??___flmul+2
  4484   0023C6  C025  F01A         	movff	___flmul@prod+3,??___flmul+3
  4485   0023CA  341A               	rlcf	(??___flmul+3)^0,w,c
  4486   0023CC  321A               	rrcf	(??___flmul+3)^0,f,c
  4487   0023CE  3219               	rrcf	(??___flmul+2)^0,f,c
  4488   0023D0  3218               	rrcf	(??___flmul+1)^0,f,c
  4489   0023D2  3217               	rrcf	??___flmul^0,f,c
  4490   0023D4  C017  F022         	movff	??___flmul,___flmul@prod
  4491   0023D8  C018  F023         	movff	??___flmul+1,___flmul@prod+1
  4492   0023DC  C019  F024         	movff	??___flmul+2,___flmul@prod+2
  4493   0023E0  C01A  F025         	movff	??___flmul+3,___flmul@prod+3
  4494   0023E4  4A26               	infsnz	___flmul@temp^0,f,c
  4495   0023E6  2A27               	incf	(___flmul@temp+1)^0,f,c
  4496   0023E8                     l3488:
  4497   0023E8  BE27               	btfsc	(___flmul@temp+1)^0,7,c
  4498   0023EA  EFFF  F011         	goto	u3661
  4499   0023EE  5027               	movf	(___flmul@temp+1)^0,w,c
  4500   0023F0  E108               	bnz	u3660
  4501   0023F2  2826               	incf	___flmul@temp^0,w,c
  4502   0023F4  A0D8               	btfss	status,0,c
  4503   0023F6  EFFF  F011         	goto	u3661
  4504   0023FA  EF01  F012         	goto	u3660
  4505   0023FE                     u3661:
  4506   0023FE  EF0B  F012         	goto	l3492
  4507   002402                     u3660:
  4508   002402  0E00               	movlw	0
  4509   002404  6E22               	movwf	___flmul@prod^0,c
  4510   002406  0E00               	movlw	0
  4511   002408  6E23               	movwf	(___flmul@prod+1)^0,c
  4512   00240A  0E80               	movlw	128
  4513   00240C  6E24               	movwf	(___flmul@prod+2)^0,c
  4514   00240E  0E7F               	movlw	127
  4515   002410  6E25               	movwf	(___flmul@prod+3)^0,c
  4516   002412  EF39  F012         	goto	l3504
  4517   002416                     l3492:
  4518   002416  BE27               	btfsc	(___flmul@temp+1)^0,7,c
  4519   002418  EF18  F012         	goto	u3670
  4520   00241C  5027               	movf	(___flmul@temp+1)^0,w,c
  4521   00241E  E106               	bnz	u3671
  4522   002420  0426               	decf	___flmul@temp^0,w,c
  4523   002422  B0D8               	btfsc	status,0,c
  4524   002424  EF16  F012         	goto	u3671
  4525   002428  EF18  F012         	goto	u3670
  4526   00242C                     u3671:
  4527   00242C  EF24  F012         	goto	l979
  4528   002430                     u3670:
  4529   002430  0E00               	movlw	0
  4530   002432  6E22               	movwf	___flmul@prod^0,c
  4531   002434  0E00               	movlw	0
  4532   002436  6E23               	movwf	(___flmul@prod+1)^0,c
  4533   002438  0E00               	movlw	0
  4534   00243A  6E24               	movwf	(___flmul@prod+2)^0,c
  4535   00243C  0E00               	movlw	0
  4536   00243E  6E25               	movwf	(___flmul@prod+3)^0,c
  4537   002440  0E00               	movlw	0
  4538   002442  6E1B               	movwf	___flmul@sign^0,c
  4539   002444  EF39  F012         	goto	l3504
  4540   002448                     l979:
  4541   002448  C026  F021         	movff	___flmul@temp,___flmul@bexp
  4542   00244C  0EFF               	movlw	255
  4543   00244E  1622               	andwf	___flmul@prod^0,f,c
  4544   002450  0EFF               	movlw	255
  4545   002452  1623               	andwf	(___flmul@prod+1)^0,f,c
  4546   002454  0E7F               	movlw	127
  4547   002456  1624               	andwf	(___flmul@prod+2)^0,f,c
  4548   002458  0E00               	movlw	0
  4549   00245A  1625               	andwf	(___flmul@prod+3)^0,f,c
  4550   00245C  A021               	btfss	___flmul@bexp^0,0,c
  4551   00245E  EF33  F012         	goto	u3681
  4552   002462  EF35  F012         	goto	u3680
  4553   002466                     u3681:
  4554   002466  EF36  F012         	goto	l3502
  4555   00246A                     u3680:
  4556   00246A  8E24               	bsf	(___flmul@prod+2)^0,7,c
  4557   00246C                     l3502:
  4558   00246C  90D8               	bcf	status,0,c
  4559   00246E  3021               	rrcf	___flmul@bexp^0,w,c
  4560   002470  6E25               	movwf	(___flmul@prod+3)^0,c
  4561   002472                     l3504:
  4562   002472  501B               	movf	___flmul@sign^0,w,c
  4563   002474  1225               	iorwf	(___flmul@prod+3)^0,f,c
  4564   002476  C022  F00F         	movff	___flmul@prod,?___flmul
  4565   00247A  C023  F010         	movff	___flmul@prod+1,?___flmul+1
  4566   00247E  C024  F011         	movff	___flmul@prod+2,?___flmul+2
  4567   002482  C025  F012         	movff	___flmul@prod+3,?___flmul+3
  4568   002486                     l966:
  4569   002486  0012               	return		;funcret
  4570   002488                     __end_of___flmul:
  4571                           	callstack 0
  4572                           
  4573 ;; *************** function ___fladd *****************
  4574 ;; Defined at:
  4575 ;;		line 10 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\sprcadd.c"
  4576 ;; Parameters:    Size  Location     Type
  4577 ;;  b               4   39[COMRAM] unsigned char 
  4578 ;;  a               4   43[COMRAM] unsigned char 
  4579 ;; Auto vars:     Size  Location     Type
  4580 ;;  grs             1   54[COMRAM] unsigned char 
  4581 ;;  bexp            1   53[COMRAM] unsigned char 
  4582 ;;  aexp            1   52[COMRAM] unsigned char 
  4583 ;;  signs           1   51[COMRAM] unsigned char 
  4584 ;; Return value:  Size  Location     Type
  4585 ;;                  4   39[COMRAM] unsigned char 
  4586 ;; Registers used:
  4587 ;;		wreg, status,2, status,0
  4588 ;; Tracked objects:
  4589 ;;		On entry : 0/0
  4590 ;;		On exit  : 0/0
  4591 ;;		Unchanged: 0/0
  4592 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4593 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4594 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4595 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4596 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4597 ;;Total ram usage:       16 bytes
  4598 ;; Hardware stack levels used: 1
  4599 ;; Hardware stack levels required when called: 1
  4600 ;; This function calls:
  4601 ;;		Nothing
  4602 ;; This function is called by:
  4603 ;;		_main
  4604 ;; This function uses a non-reentrant model
  4605 ;;
  4606                           
  4607                           	psect	text16
  4608   001B9E                     __ptext16:
  4609                           	callstack 0
  4610   001B9E                     ___fladd:
  4611                           	callstack 29
  4612   001B9E  502B               	movf	(___fladd@b+3)^0,w,c
  4613   001BA0  0B80               	andlw	128
  4614   001BA2  6E34               	movwf	___fladd@signs^0,c
  4615   001BA4  502B               	movf	(___fladd@b+3)^0,w,c
  4616   001BA6  242B               	addwf	(___fladd@b+3)^0,w,c
  4617   001BA8  6E36               	movwf	___fladd@bexp^0,c
  4618   001BAA  AE2A               	btfss	(___fladd@b+2)^0,7,c
  4619   001BAC  EFDA  F00D         	goto	u3111
  4620   001BB0  EFDC  F00D         	goto	u3110
  4621   001BB4                     u3111:
  4622   001BB4  EFDD  F00D         	goto	l3184
  4623   001BB8                     u3110:
  4624   001BB8  8036               	bsf	___fladd@bexp^0,0,c
  4625   001BBA                     l3184:
  4626   001BBA  5036               	movf	___fladd@bexp^0,w,c
  4627   001BBC  B4D8               	btfsc	status,2,c
  4628   001BBE  EFE3  F00D         	goto	u3121
  4629   001BC2  EFE5  F00D         	goto	u3120
  4630   001BC6                     u3121:
  4631   001BC6  EFFA  F00D         	goto	l3194
  4632   001BCA                     u3120:
  4633   001BCA  2836               	incf	___fladd@bexp^0,w,c
  4634   001BCC  A4D8               	btfss	status,2,c
  4635   001BCE  EFEB  F00D         	goto	u3131
  4636   001BD2  EFED  F00D         	goto	u3130
  4637   001BD6                     u3131:
  4638   001BD6  EFF5  F00D         	goto	l3190
  4639   001BDA                     u3130:
  4640   001BDA  0E00               	movlw	0
  4641   001BDC  6E28               	movwf	___fladd@b^0,c
  4642   001BDE  0E00               	movlw	0
  4643   001BE0  6E29               	movwf	(___fladd@b+1)^0,c
  4644   001BE2  0E00               	movlw	0
  4645   001BE4  6E2A               	movwf	(___fladd@b+2)^0,c
  4646   001BE6  0E00               	movlw	0
  4647   001BE8  6E2B               	movwf	(___fladd@b+3)^0,c
  4648   001BEA                     l3190:
  4649   001BEA  8E2A               	bsf	(___fladd@b+2)^0,7,c
  4650   001BEC  0E00               	movlw	0
  4651   001BEE  6E2B               	movwf	(___fladd@b+3)^0,c
  4652   001BF0  EF02  F00E         	goto	l3196
  4653   001BF4                     l3194:
  4654   001BF4  0E00               	movlw	0
  4655   001BF6  6E28               	movwf	___fladd@b^0,c
  4656   001BF8  0E00               	movlw	0
  4657   001BFA  6E29               	movwf	(___fladd@b+1)^0,c
  4658   001BFC  0E00               	movlw	0
  4659   001BFE  6E2A               	movwf	(___fladd@b+2)^0,c
  4660   001C00  0E00               	movlw	0
  4661   001C02  6E2B               	movwf	(___fladd@b+3)^0,c
  4662   001C04                     l3196:
  4663   001C04  502F               	movf	(___fladd@a+3)^0,w,c
  4664   001C06  0B80               	andlw	128
  4665   001C08  6E35               	movwf	___fladd@aexp^0,c
  4666   001C0A  5034               	movf	___fladd@signs^0,w,c
  4667   001C0C  1835               	xorwf	___fladd@aexp^0,w,c
  4668   001C0E  B4D8               	btfsc	status,2,c
  4669   001C10  EF0C  F00E         	goto	u3141
  4670   001C14  EF0E  F00E         	goto	u3140
  4671   001C18                     u3141:
  4672   001C18  EF0F  F00E         	goto	l3202
  4673   001C1C                     u3140:
  4674   001C1C  8C34               	bsf	___fladd@signs^0,6,c
  4675   001C1E                     l3202:
  4676   001C1E  502F               	movf	(___fladd@a+3)^0,w,c
  4677   001C20  242F               	addwf	(___fladd@a+3)^0,w,c
  4678   001C22  6E35               	movwf	___fladd@aexp^0,c
  4679   001C24  AE2E               	btfss	(___fladd@a+2)^0,7,c
  4680   001C26  EF17  F00E         	goto	u3151
  4681   001C2A  EF19  F00E         	goto	u3150
  4682   001C2E                     u3151:
  4683   001C2E  EF1A  F00E         	goto	l3208
  4684   001C32                     u3150:
  4685   001C32  8035               	bsf	___fladd@aexp^0,0,c
  4686   001C34                     l3208:
  4687   001C34  5035               	movf	___fladd@aexp^0,w,c
  4688   001C36  B4D8               	btfsc	status,2,c
  4689   001C38  EF20  F00E         	goto	u3161
  4690   001C3C  EF22  F00E         	goto	u3160
  4691   001C40                     u3161:
  4692   001C40  EF37  F00E         	goto	l3218
  4693   001C44                     u3160:
  4694   001C44  2835               	incf	___fladd@aexp^0,w,c
  4695   001C46  A4D8               	btfss	status,2,c
  4696   001C48  EF28  F00E         	goto	u3171
  4697   001C4C  EF2A  F00E         	goto	u3170
  4698   001C50                     u3171:
  4699   001C50  EF32  F00E         	goto	l3214
  4700   001C54                     u3170:
  4701   001C54  0E00               	movlw	0
  4702   001C56  6E2C               	movwf	___fladd@a^0,c
  4703   001C58  0E00               	movlw	0
  4704   001C5A  6E2D               	movwf	(___fladd@a+1)^0,c
  4705   001C5C  0E00               	movlw	0
  4706   001C5E  6E2E               	movwf	(___fladd@a+2)^0,c
  4707   001C60  0E00               	movlw	0
  4708   001C62  6E2F               	movwf	(___fladd@a+3)^0,c
  4709   001C64                     l3214:
  4710   001C64  8E2E               	bsf	(___fladd@a+2)^0,7,c
  4711   001C66  0E00               	movlw	0
  4712   001C68  6E2F               	movwf	(___fladd@a+3)^0,c
  4713   001C6A  EF3F  F00E         	goto	l3220
  4714   001C6E                     l3218:
  4715   001C6E  0E00               	movlw	0
  4716   001C70  6E2C               	movwf	___fladd@a^0,c
  4717   001C72  0E00               	movlw	0
  4718   001C74  6E2D               	movwf	(___fladd@a+1)^0,c
  4719   001C76  0E00               	movlw	0
  4720   001C78  6E2E               	movwf	(___fladd@a+2)^0,c
  4721   001C7A  0E00               	movlw	0
  4722   001C7C  6E2F               	movwf	(___fladd@a+3)^0,c
  4723   001C7E                     l3220:
  4724   001C7E  5036               	movf	___fladd@bexp^0,w,c
  4725   001C80  5C35               	subwf	___fladd@aexp^0,w,c
  4726   001C82  B0D8               	btfsc	status,0,c
  4727   001C84  EF46  F00E         	goto	u3181
  4728   001C88  EF48  F00E         	goto	u3180
  4729   001C8C                     u3181:
  4730   001C8C  EF6F  F00E         	goto	l3256
  4731   001C90                     u3180:
  4732   001C90  AC34               	btfss	___fladd@signs^0,6,c
  4733   001C92  EF4D  F00E         	goto	u3191
  4734   001C96  EF4F  F00E         	goto	u3190
  4735   001C9A                     u3191:
  4736   001C9A  EF51  F00E         	goto	l3226
  4737   001C9E                     u3190:
  4738   001C9E  0E80               	movlw	128
  4739   001CA0  1A34               	xorwf	___fladd@signs^0,f,c
  4740   001CA2                     l3226:
  4741   001CA2  C036  F037         	movff	___fladd@bexp,___fladd@grs
  4742   001CA6  C035  F036         	movff	___fladd@aexp,___fladd@bexp
  4743   001CAA  C037  F035         	movff	___fladd@grs,___fladd@aexp
  4744   001CAE  C028  F037         	movff	___fladd@b,___fladd@grs
  4745   001CB2  C02C  F028         	movff	___fladd@a,___fladd@b
  4746   001CB6  C037  F02C         	movff	___fladd@grs,___fladd@a
  4747   001CBA  C029  F037         	movff	___fladd@b+1,___fladd@grs
  4748   001CBE  C02D  F029         	movff	___fladd@a+1,___fladd@b+1
  4749   001CC2  C037  F02D         	movff	___fladd@grs,___fladd@a+1
  4750   001CC6  C02A  F037         	movff	___fladd@b+2,___fladd@grs
  4751   001CCA  C02E  F02A         	movff	___fladd@a+2,___fladd@b+2
  4752   001CCE  C037  F02E         	movff	___fladd@grs,___fladd@a+2
  4753   001CD2  C02B  F037         	movff	___fladd@b+3,___fladd@grs
  4754   001CD6  C02F  F02B         	movff	___fladd@a+3,___fladd@b+3
  4755   001CDA  C037  F02F         	movff	___fladd@grs,___fladd@a+3
  4756   001CDE                     l3256:
  4757   001CDE  0E00               	movlw	0
  4758   001CE0  6E37               	movwf	___fladd@grs^0,c
  4759   001CE2  5036               	movf	___fladd@bexp^0,w,c
  4760   001CE4  C035  F030         	movff	___fladd@aexp,??___fladd
  4761   001CE8  6A31               	clrf	(??___fladd+1)^0,c
  4762   001CEA  5E30               	subwf	??___fladd^0,f,c
  4763   001CEC  0E00               	movlw	0
  4764   001CEE  5A31               	subwfb	(??___fladd+1)^0,f,c
  4765   001CF0  BE31               	btfsc	(??___fladd+1)^0,7,c
  4766   001CF2  EF84  F00E         	goto	u3201
  4767   001CF6  5031               	movf	(??___fladd+1)^0,w,c
  4768   001CF8  E109               	bnz	u3200
  4769   001CFA  0E1A               	movlw	26
  4770   001CFC  5C30               	subwf	??___fladd^0,w,c
  4771   001CFE  A0D8               	btfss	status,0,c
  4772   001D00  EF84  F00E         	goto	u3201
  4773   001D04  EF86  F00E         	goto	u3200
  4774   001D08                     u3201:
  4775   001D08  EFBD  F00E         	goto	l877
  4776   001D0C                     u3200:
  4777   001D0C  5028               	movf	___fladd@b^0,w,c
  4778   001D0E  1029               	iorwf	(___fladd@b+1)^0,w,c
  4779   001D10  102A               	iorwf	(___fladd@b+2)^0,w,c
  4780   001D12  102B               	iorwf	(___fladd@b+3)^0,w,c
  4781   001D14  A4D8               	btfss	status,2,c
  4782   001D16  EF8F  F00E         	goto	u3211
  4783   001D1A  EF92  F00E         	goto	u3210
  4784   001D1E                     u3211:
  4785   001D1E  0E01               	movlw	1
  4786   001D20  EF93  F00E         	goto	u3220
  4787   001D24                     u3210:
  4788   001D24  0E00               	movlw	0
  4789   001D26                     u3220:
  4790   001D26  6E37               	movwf	___fladd@grs^0,c
  4791   001D28  0E00               	movlw	0
  4792   001D2A  6E28               	movwf	___fladd@b^0,c
  4793   001D2C  0E00               	movlw	0
  4794   001D2E  6E29               	movwf	(___fladd@b+1)^0,c
  4795   001D30  0E00               	movlw	0
  4796   001D32  6E2A               	movwf	(___fladd@b+2)^0,c
  4797   001D34  0E00               	movlw	0
  4798   001D36  6E2B               	movwf	(___fladd@b+3)^0,c
  4799   001D38  C035  F036         	movff	___fladd@aexp,___fladd@bexp
  4800   001D3C  EFC6  F00E         	goto	l876
  4801   001D40                     l878:
  4802   001D40  A037               	btfss	___fladd@grs^0,0,c
  4803   001D42  EFA5  F00E         	goto	u3231
  4804   001D46  EFA7  F00E         	goto	u3230
  4805   001D4A                     u3231:
  4806   001D4A  EFAD  F00E         	goto	l3268
  4807   001D4E                     u3230:
  4808   001D4E  90D8               	bcf	status,0,c
  4809   001D50  3037               	rrcf	___fladd@grs^0,w,c
  4810   001D52  0901               	iorlw	1
  4811   001D54  6E37               	movwf	___fladd@grs^0,c
  4812   001D56  EFAF  F00E         	goto	l3270
  4813   001D5A                     l3268:
  4814   001D5A  90D8               	bcf	status,0,c
  4815   001D5C  3237               	rrcf	___fladd@grs^0,f,c
  4816   001D5E                     l3270:
  4817   001D5E  A028               	btfss	___fladd@b^0,0,c
  4818   001D60  EFB4  F00E         	goto	u3241
  4819   001D64  EFB6  F00E         	goto	u3240
  4820   001D68                     u3241:
  4821   001D68  EFB7  F00E         	goto	l3274
  4822   001D6C                     u3240:
  4823   001D6C  8E37               	bsf	___fladd@grs^0,7,c
  4824   001D6E                     l3274:
  4825   001D6E  342B               	rlcf	(___fladd@b+3)^0,w,c
  4826   001D70  322B               	rrcf	(___fladd@b+3)^0,f,c
  4827   001D72  322A               	rrcf	(___fladd@b+2)^0,f,c
  4828   001D74  3229               	rrcf	(___fladd@b+1)^0,f,c
  4829   001D76  3228               	rrcf	___fladd@b^0,f,c
  4830   001D78  2A36               	incf	___fladd@bexp^0,f,c
  4831   001D7A                     l877:
  4832   001D7A  5035               	movf	___fladd@aexp^0,w,c
  4833   001D7C  5C36               	subwf	___fladd@bexp^0,w,c
  4834   001D7E  A0D8               	btfss	status,0,c
  4835   001D80  EFC4  F00E         	goto	u3251
  4836   001D84  EFC6  F00E         	goto	u3250
  4837   001D88                     u3251:
  4838   001D88  EFA0  F00E         	goto	l878
  4839   001D8C                     u3250:
  4840   001D8C                     l876:
  4841   001D8C  BC34               	btfsc	___fladd@signs^0,6,c
  4842   001D8E  EFCB  F00E         	goto	u3261
  4843   001D92  EFCD  F00E         	goto	u3260
  4844   001D96                     u3261:
  4845   001D96  EF0D  F00F         	goto	l3302
  4846   001D9A                     u3260:
  4847   001D9A  5036               	movf	___fladd@bexp^0,w,c
  4848   001D9C  A4D8               	btfss	status,2,c
  4849   001D9E  EFD3  F00E         	goto	u3271
  4850   001DA2  EFD5  F00E         	goto	u3270
  4851   001DA6                     u3271:
  4852   001DA6  EFDF  F00E         	goto	l3284
  4853   001DAA                     u3270:
  4854   001DAA  0E00               	movlw	0
  4855   001DAC  6E28               	movwf	?___fladd^0,c
  4856   001DAE  0E00               	movlw	0
  4857   001DB0  6E29               	movwf	(?___fladd+1)^0,c
  4858   001DB2  0E00               	movlw	0
  4859   001DB4  6E2A               	movwf	(?___fladd+2)^0,c
  4860   001DB6  0E00               	movlw	0
  4861   001DB8  6E2B               	movwf	(?___fladd+3)^0,c
  4862   001DBA  EF2E  F010         	goto	l885
  4863   001DBE                     l3284:
  4864   001DBE  502C               	movf	___fladd@a^0,w,c
  4865   001DC0  2628               	addwf	___fladd@b^0,f,c
  4866   001DC2  502D               	movf	(___fladd@a+1)^0,w,c
  4867   001DC4  2229               	addwfc	(___fladd@b+1)^0,f,c
  4868   001DC6  502E               	movf	(___fladd@a+2)^0,w,c
  4869   001DC8  222A               	addwfc	(___fladd@b+2)^0,f,c
  4870   001DCA  502F               	movf	(___fladd@a+3)^0,w,c
  4871   001DCC  222B               	addwfc	(___fladd@b+3)^0,f,c
  4872   001DCE  A02B               	btfss	(___fladd@b+3)^0,0,c
  4873   001DD0  EFEC  F00E         	goto	u3281
  4874   001DD4  EFEE  F00E         	goto	u3280
  4875   001DD8                     u3281:
  4876   001DD8  EF9A  F00F         	goto	l3338
  4877   001DDC                     u3280:
  4878   001DDC  A037               	btfss	___fladd@grs^0,0,c
  4879   001DDE  EFF3  F00E         	goto	u3291
  4880   001DE2  EFF5  F00E         	goto	u3290
  4881   001DE6                     u3291:
  4882   001DE6  EFFB  F00E         	goto	l3292
  4883   001DEA                     u3290:
  4884   001DEA  90D8               	bcf	status,0,c
  4885   001DEC  3037               	rrcf	___fladd@grs^0,w,c
  4886   001DEE  0901               	iorlw	1
  4887   001DF0  6E37               	movwf	___fladd@grs^0,c
  4888   001DF2  EFFD  F00E         	goto	l3294
  4889   001DF6                     l3292:
  4890   001DF6  90D8               	bcf	status,0,c
  4891   001DF8  3237               	rrcf	___fladd@grs^0,f,c
  4892   001DFA                     l3294:
  4893   001DFA  A028               	btfss	___fladd@b^0,0,c
  4894   001DFC  EF02  F00F         	goto	u3301
  4895   001E00  EF04  F00F         	goto	u3300
  4896   001E04                     u3301:
  4897   001E04  EF05  F00F         	goto	l3298
  4898   001E08                     u3300:
  4899   001E08  8E37               	bsf	___fladd@grs^0,7,c
  4900   001E0A                     l3298:
  4901   001E0A  342B               	rlcf	(___fladd@b+3)^0,w,c
  4902   001E0C  322B               	rrcf	(___fladd@b+3)^0,f,c
  4903   001E0E  322A               	rrcf	(___fladd@b+2)^0,f,c
  4904   001E10  3229               	rrcf	(___fladd@b+1)^0,f,c
  4905   001E12  3228               	rrcf	___fladd@b^0,f,c
  4906   001E14  2A36               	incf	___fladd@bexp^0,f,c
  4907   001E16  EF9A  F00F         	goto	l3338
  4908   001E1A                     l3302:
  4909   001E1A  502C               	movf	___fladd@a^0,w,c
  4910   001E1C  5C28               	subwf	___fladd@b^0,w,c
  4911   001E1E  502D               	movf	(___fladd@a+1)^0,w,c
  4912   001E20  5829               	subwfb	(___fladd@b+1)^0,w,c
  4913   001E22  502E               	movf	(___fladd@a+2)^0,w,c
  4914   001E24  582A               	subwfb	(___fladd@b+2)^0,w,c
  4915   001E26  502B               	movf	(___fladd@b+3)^0,w,c
  4916   001E28  0A80               	xorlw	128
  4917   001E2A  6E30               	movwf	??___fladd^0,c
  4918   001E2C  502F               	movf	(___fladd@a+3)^0,w,c
  4919   001E2E  0A80               	xorlw	128
  4920   001E30  5830               	subwfb	??___fladd^0,w,c
  4921   001E32  B0D8               	btfsc	status,0,c
  4922   001E34  EF1E  F00F         	goto	u3311
  4923   001E38  EF20  F00F         	goto	u3310
  4924   001E3C                     u3311:
  4925   001E3C  EF4B  F00F         	goto	l3312
  4926   001E40                     u3310:
  4927   001E40  5028               	movf	___fladd@b^0,w,c
  4928   001E42  5C2C               	subwf	___fladd@a^0,w,c
  4929   001E44  6E30               	movwf	??___fladd^0,c
  4930   001E46  5029               	movf	(___fladd@b+1)^0,w,c
  4931   001E48  582D               	subwfb	(___fladd@a+1)^0,w,c
  4932   001E4A  6E31               	movwf	(??___fladd+1)^0,c
  4933   001E4C  502A               	movf	(___fladd@b+2)^0,w,c
  4934   001E4E  582E               	subwfb	(___fladd@a+2)^0,w,c
  4935   001E50  6E32               	movwf	(??___fladd+2)^0,c
  4936   001E52  502B               	movf	(___fladd@b+3)^0,w,c
  4937   001E54  582F               	subwfb	(___fladd@a+3)^0,w,c
  4938   001E56  6E33               	movwf	(??___fladd+3)^0,c
  4939   001E58  0EFF               	movlw	255
  4940   001E5A  2430               	addwf	??___fladd^0,w,c
  4941   001E5C  6E28               	movwf	___fladd@b^0,c
  4942   001E5E  0EFF               	movlw	255
  4943   001E60  2031               	addwfc	(??___fladd+1)^0,w,c
  4944   001E62  6E29               	movwf	(___fladd@b+1)^0,c
  4945   001E64  0EFF               	movlw	255
  4946   001E66  2032               	addwfc	(??___fladd+2)^0,w,c
  4947   001E68  6E2A               	movwf	(___fladd@b+2)^0,c
  4948   001E6A  0EFF               	movlw	255
  4949   001E6C  2033               	addwfc	(??___fladd+3)^0,w,c
  4950   001E6E  6E2B               	movwf	(___fladd@b+3)^0,c
  4951   001E70  0E80               	movlw	128
  4952   001E72  1A34               	xorwf	___fladd@signs^0,f,c
  4953   001E74  6C37               	negf	___fladd@grs^0,c
  4954   001E76  5037               	movf	___fladd@grs^0,w,c
  4955   001E78  A4D8               	btfss	status,2,c
  4956   001E7A  EF41  F00F         	goto	u3321
  4957   001E7E  EF43  F00F         	goto	u3320
  4958   001E82                     u3321:
  4959   001E82  EF53  F00F         	goto	l893
  4960   001E86                     u3320:
  4961   001E86  0E01               	movlw	1
  4962   001E88  2628               	addwf	___fladd@b^0,f,c
  4963   001E8A  0E00               	movlw	0
  4964   001E8C  2229               	addwfc	(___fladd@b+1)^0,f,c
  4965   001E8E  222A               	addwfc	(___fladd@b+2)^0,f,c
  4966   001E90  222B               	addwfc	(___fladd@b+3)^0,f,c
  4967   001E92  EF53  F00F         	goto	l893
  4968   001E96                     l3312:
  4969   001E96  502C               	movf	___fladd@a^0,w,c
  4970   001E98  5E28               	subwf	___fladd@b^0,f,c
  4971   001E9A  502D               	movf	(___fladd@a+1)^0,w,c
  4972   001E9C  5A29               	subwfb	(___fladd@b+1)^0,f,c
  4973   001E9E  502E               	movf	(___fladd@a+2)^0,w,c
  4974   001EA0  5A2A               	subwfb	(___fladd@b+2)^0,f,c
  4975   001EA2  502F               	movf	(___fladd@a+3)^0,w,c
  4976   001EA4  5A2B               	subwfb	(___fladd@b+3)^0,f,c
  4977   001EA6                     l893:
  4978   001EA6  5028               	movf	___fladd@b^0,w,c
  4979   001EA8  1029               	iorwf	(___fladd@b+1)^0,w,c
  4980   001EAA  102A               	iorwf	(___fladd@b+2)^0,w,c
  4981   001EAC  102B               	iorwf	(___fladd@b+3)^0,w,c
  4982   001EAE  A4D8               	btfss	status,2,c
  4983   001EB0  EF5C  F00F         	goto	u3331
  4984   001EB4  EF5E  F00F         	goto	u3330
  4985   001EB8                     u3331:
  4986   001EB8  EF93  F00F         	goto	l3336
  4987   001EBC                     u3330:
  4988   001EBC  5037               	movf	___fladd@grs^0,w,c
  4989   001EBE  A4D8               	btfss	status,2,c
  4990   001EC0  EF64  F00F         	goto	u3341
  4991   001EC4  EF66  F00F         	goto	u3340
  4992   001EC8                     u3341:
  4993   001EC8  EF93  F00F         	goto	l3336
  4994   001ECC                     u3340:
  4995   001ECC  0E00               	movlw	0
  4996   001ECE  6E28               	movwf	?___fladd^0,c
  4997   001ED0  0E00               	movlw	0
  4998   001ED2  6E29               	movwf	(?___fladd+1)^0,c
  4999   001ED4  0E00               	movlw	0
  5000   001ED6  6E2A               	movwf	(?___fladd+2)^0,c
  5001   001ED8  0E00               	movlw	0
  5002   001EDA  6E2B               	movwf	(?___fladd+3)^0,c
  5003   001EDC  EF2E  F010         	goto	l885
  5004   001EE0                     l3320:
  5005   001EE0  90D8               	bcf	status,0,c
  5006   001EE2  3628               	rlcf	___fladd@b^0,f,c
  5007   001EE4  3629               	rlcf	(___fladd@b+1)^0,f,c
  5008   001EE6  362A               	rlcf	(___fladd@b+2)^0,f,c
  5009   001EE8  362B               	rlcf	(___fladd@b+3)^0,f,c
  5010   001EEA  AE37               	btfss	___fladd@grs^0,7,c
  5011   001EEC  EF7A  F00F         	goto	u3351
  5012   001EF0  EF7C  F00F         	goto	u3350
  5013   001EF4                     u3351:
  5014   001EF4  EF7D  F00F         	goto	l3326
  5015   001EF8                     u3350:
  5016   001EF8  8028               	bsf	___fladd@b^0,0,c
  5017   001EFA                     l3326:
  5018   001EFA  A037               	btfss	___fladd@grs^0,0,c
  5019   001EFC  EF82  F00F         	goto	u3361
  5020   001F00  EF84  F00F         	goto	u3360
  5021   001F04                     u3361:
  5022   001F04  EF88  F00F         	goto	l3330
  5023   001F08                     u3360:
  5024   001F08  80D8               	bsf	status,0,c
  5025   001F0A  3637               	rlcf	___fladd@grs^0,f,c
  5026   001F0C  EF8A  F00F         	goto	l3332
  5027   001F10                     l3330:
  5028   001F10  90D8               	bcf	status,0,c
  5029   001F12  3637               	rlcf	___fladd@grs^0,f,c
  5030   001F14                     l3332:
  5031   001F14  5036               	movf	___fladd@bexp^0,w,c
  5032   001F16  B4D8               	btfsc	status,2,c
  5033   001F18  EF90  F00F         	goto	u3371
  5034   001F1C  EF92  F00F         	goto	u3370
  5035   001F20                     u3371:
  5036   001F20  EF93  F00F         	goto	l3336
  5037   001F24                     u3370:
  5038   001F24  0636               	decf	___fladd@bexp^0,f,c
  5039   001F26                     l3336:
  5040   001F26  AE2A               	btfss	(___fladd@b+2)^0,7,c
  5041   001F28  EF98  F00F         	goto	u3381
  5042   001F2C  EF9A  F00F         	goto	u3380
  5043   001F30                     u3381:
  5044   001F30  EF70  F00F         	goto	l3320
  5045   001F34                     u3380:
  5046   001F34                     l3338:
  5047   001F34  0E00               	movlw	0
  5048   001F36  6E35               	movwf	___fladd@aexp^0,c
  5049   001F38  AE37               	btfss	___fladd@grs^0,7,c
  5050   001F3A  EFA1  F00F         	goto	u3391
  5051   001F3E  EFA3  F00F         	goto	u3390
  5052   001F42                     u3391:
  5053   001F42  EFBB  F00F         	goto	l902
  5054   001F46                     u3390:
  5055   001F46  C037  F030         	movff	___fladd@grs,??___fladd
  5056   001F4A  0E7F               	movlw	127
  5057   001F4C  1630               	andwf	??___fladd^0,f,c
  5058   001F4E  B4D8               	btfsc	status,2,c
  5059   001F50  EFAC  F00F         	goto	u3401
  5060   001F54  EFAE  F00F         	goto	u3400
  5061   001F58                     u3401:
  5062   001F58  EFB2  F00F         	goto	l903
  5063   001F5C                     u3400:
  5064   001F5C                     l3344:
  5065   001F5C  0E01               	movlw	1
  5066   001F5E  6E35               	movwf	___fladd@aexp^0,c
  5067   001F60  EFBB  F00F         	goto	l902
  5068   001F64                     l903:
  5069   001F64  A028               	btfss	___fladd@b^0,0,c
  5070   001F66  EFB7  F00F         	goto	u3411
  5071   001F6A  EFB9  F00F         	goto	u3410
  5072   001F6E                     u3411:
  5073   001F6E  EFBB  F00F         	goto	l902
  5074   001F72                     u3410:
  5075   001F72  EFAE  F00F         	goto	l3344
  5076   001F76                     l902:
  5077   001F76  5035               	movf	___fladd@aexp^0,w,c
  5078   001F78  B4D8               	btfsc	status,2,c
  5079   001F7A  EFC1  F00F         	goto	u3421
  5080   001F7E  EFC3  F00F         	goto	u3420
  5081   001F82                     u3421:
  5082   001F82  EFEE  F00F         	goto	l3356
  5083   001F86                     u3420:
  5084   001F86  0E01               	movlw	1
  5085   001F88  2628               	addwf	___fladd@b^0,f,c
  5086   001F8A  0E00               	movlw	0
  5087   001F8C  2229               	addwfc	(___fladd@b+1)^0,f,c
  5088   001F8E  222A               	addwfc	(___fladd@b+2)^0,f,c
  5089   001F90  222B               	addwfc	(___fladd@b+3)^0,f,c
  5090   001F92  A02B               	btfss	(___fladd@b+3)^0,0,c
  5091   001F94  EFCE  F00F         	goto	u3431
  5092   001F98  EFD0  F00F         	goto	u3430
  5093   001F9C                     u3431:
  5094   001F9C  EFEE  F00F         	goto	l3356
  5095   001FA0                     u3430:
  5096   001FA0  C028  F030         	movff	___fladd@b,??___fladd
  5097   001FA4  C029  F031         	movff	___fladd@b+1,??___fladd+1
  5098   001FA8  C02A  F032         	movff	___fladd@b+2,??___fladd+2
  5099   001FAC  C02B  F033         	movff	___fladd@b+3,??___fladd+3
  5100   001FB0  3433               	rlcf	(??___fladd+3)^0,w,c
  5101   001FB2  3233               	rrcf	(??___fladd+3)^0,f,c
  5102   001FB4  3232               	rrcf	(??___fladd+2)^0,f,c
  5103   001FB6  3231               	rrcf	(??___fladd+1)^0,f,c
  5104   001FB8  3230               	rrcf	??___fladd^0,f,c
  5105   001FBA  C030  F028         	movff	??___fladd,___fladd@b
  5106   001FBE  C031  F029         	movff	??___fladd+1,___fladd@b+1
  5107   001FC2  C032  F02A         	movff	??___fladd+2,___fladd@b+2
  5108   001FC6  C033  F02B         	movff	??___fladd+3,___fladd@b+3
  5109   001FCA  2836               	incf	___fladd@bexp^0,w,c
  5110   001FCC  B4D8               	btfsc	status,2,c
  5111   001FCE  EFEB  F00F         	goto	u3441
  5112   001FD2  EFED  F00F         	goto	u3440
  5113   001FD6                     u3441:
  5114   001FD6  EFEE  F00F         	goto	l3356
  5115   001FDA                     u3440:
  5116   001FDA  2A36               	incf	___fladd@bexp^0,f,c
  5117   001FDC                     l3356:
  5118   001FDC  2836               	incf	___fladd@bexp^0,w,c
  5119   001FDE  B4D8               	btfsc	status,2,c
  5120   001FE0  EFF4  F00F         	goto	u3451
  5121   001FE4  EFF6  F00F         	goto	u3450
  5122   001FE8                     u3451:
  5123   001FE8  EFFE  F00F         	goto	l3360
  5124   001FEC                     u3450:
  5125   001FEC  5036               	movf	___fladd@bexp^0,w,c
  5126   001FEE  A4D8               	btfss	status,2,c
  5127   001FF0  EFFC  F00F         	goto	u3461
  5128   001FF4  EFFE  F00F         	goto	u3460
  5129   001FF8                     u3461:
  5130   001FF8  EF10  F010         	goto	l3364
  5131   001FFC                     u3460:
  5132   001FFC                     l3360:
  5133   001FFC  0E00               	movlw	0
  5134   001FFE  6E28               	movwf	___fladd@b^0,c
  5135   002000  0E00               	movlw	0
  5136   002002  6E29               	movwf	(___fladd@b+1)^0,c
  5137   002004  0E00               	movlw	0
  5138   002006  6E2A               	movwf	(___fladd@b+2)^0,c
  5139   002008  0E00               	movlw	0
  5140   00200A  6E2B               	movwf	(___fladd@b+3)^0,c
  5141   00200C  5036               	movf	___fladd@bexp^0,w,c
  5142   00200E  A4D8               	btfss	status,2,c
  5143   002010  EF0C  F010         	goto	u3471
  5144   002014  EF0E  F010         	goto	u3470
  5145   002018                     u3471:
  5146   002018  EF10  F010         	goto	l3364
  5147   00201C                     u3470:
  5148   00201C  0E00               	movlw	0
  5149   00201E  6E34               	movwf	___fladd@signs^0,c
  5150   002020                     l3364:
  5151   002020  A036               	btfss	___fladd@bexp^0,0,c
  5152   002022  EF15  F010         	goto	u3481
  5153   002026  EF17  F010         	goto	u3480
  5154   00202A                     u3481:
  5155   00202A  EF1A  F010         	goto	l3368
  5156   00202E                     u3480:
  5157   00202E  8E2A               	bsf	(___fladd@b+2)^0,7,c
  5158   002030  EF1B  F010         	goto	l3370
  5159   002034                     l3368:
  5160   002034  9E2A               	bcf	(___fladd@b+2)^0,7,c
  5161   002036                     l3370:
  5162   002036  90D8               	bcf	status,0,c
  5163   002038  3036               	rrcf	___fladd@bexp^0,w,c
  5164   00203A  6E2B               	movwf	(___fladd@b+3)^0,c
  5165   00203C  AE34               	btfss	___fladd@signs^0,7,c
  5166   00203E  EF23  F010         	goto	u3491
  5167   002042  EF25  F010         	goto	u3490
  5168   002046                     u3491:
  5169   002046  EF26  F010         	goto	l3376
  5170   00204A                     u3490:
  5171   00204A  8E2B               	bsf	(___fladd@b+3)^0,7,c
  5172   00204C                     l3376:
  5173   00204C  C028  F028         	movff	___fladd@b,?___fladd
  5174   002050  C029  F029         	movff	___fladd@b+1,?___fladd+1
  5175   002054  C02A  F02A         	movff	___fladd@b+2,?___fladd+2
  5176   002058  C02B  F02B         	movff	___fladd@b+3,?___fladd+3
  5177   00205C                     l885:
  5178   00205C  0012               	return		;funcret
  5179   00205E                     __end_of___fladd:
  5180                           	callstack 0
  5181                           
  5182 ;; *************** function _UpdateClock *****************
  5183 ;; Defined at:
  5184 ;;		line 6 in file "clock.c"
  5185 ;; Parameters:    Size  Location     Type
  5186 ;;  seconds         2    6[COMRAM] PTR int 
  5187 ;;		 -> GLOBALsecs(2), 
  5188 ;;  minutes         2    8[COMRAM] PTR int 
  5189 ;;		 -> main@clock(16), 
  5190 ;;  hours           2   10[COMRAM] PTR int 
  5191 ;;		 -> main@clock(16), 
  5192 ;;  days            2   12[COMRAM] PTR int 
  5193 ;;		 -> main@clock(16), 
  5194 ;;  DoW             2   14[COMRAM] PTR int 
  5195 ;;		 -> main@clock(16), 
  5196 ;;  months          2   16[COMRAM] PTR int 
  5197 ;;		 -> main@clock(16), 
  5198 ;;  years           2   18[COMRAM] PTR int 
  5199 ;;		 -> main@clock(16), 
  5200 ;;  DSTstate        2   20[COMRAM] PTR int 
  5201 ;;		 -> main@clock(16), 
  5202 ;;  TestMode        2   22[COMRAM] int 
  5203 ;; Auto vars:     Size  Location     Type
  5204 ;;  DaysInMonth    24   30[COMRAM] int [12]
  5205 ;; Return value:  Size  Location     Type
  5206 ;;                  1    wreg      void 
  5207 ;; Registers used:
  5208 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5209 ;; Tracked objects:
  5210 ;;		On entry : 0/0
  5211 ;;		On exit  : 0/0
  5212 ;;		Unchanged: 0/0
  5213 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5214 ;;      Params:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5215 ;;      Locals:        24       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5216 ;;      Temps:          6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5217 ;;      Totals:        48       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5218 ;;Total ram usage:       48 bytes
  5219 ;; Hardware stack levels used: 1
  5220 ;; Hardware stack levels required when called: 2
  5221 ;; This function calls:
  5222 ;;		___awmod
  5223 ;; This function is called by:
  5224 ;;		_main
  5225 ;; This function uses a non-reentrant model
  5226 ;;
  5227                           
  5228                           	psect	text17
  5229   0015F2                     __ptext17:
  5230                           	callstack 0
  5231   0015F2                     _UpdateClock:
  5232                           	callstack 28
  5233   0015F2                     
  5234                           ;clock.c: 8:     int DaysInMonth[] = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
  5235   0015F2  EE20  F080         	lfsr	2,UpdateClock@F14152
  5236   0015F6  EE10  F01F         	lfsr	1,UpdateClock@DaysInMonth
  5237   0015FA  0E17               	movlw	23
  5238   0015FC                     u4341:
  5239   0015FC  CFDB FFE3          	movff	plusw2,plusw1
  5240   001600  06E8               	decf	wreg,f,c
  5241   001602  E2FC               	bc	u4341
  5242   001604                     
  5243                           ;clock.c: 10:     if (TestMode == 1){
  5244   001604  0417               	decf	UpdateClock@TestMode^0,w,c
  5245   001606  1018               	iorwf	(UpdateClock@TestMode+1)^0,w,c
  5246   001608  A4D8               	btfss	status,2,c
  5247   00160A  EF09  F00B         	goto	u4351
  5248   00160E  EF0B  F00B         	goto	u4350
  5249   001612                     u4351:
  5250   001612  EF31  F00B         	goto	l4076
  5251   001616                     u4350:
  5252   001616                     
  5253                           ;clock.c: 11:        *hours = *seconds;
  5254   001616  C007  FFD9         	movff	UpdateClock@seconds,fsr2l
  5255   00161A  C008  FFDA         	movff	UpdateClock@seconds+1,fsr2h
  5256   00161E  C00B  FFE1         	movff	UpdateClock@hours,fsr1l
  5257   001622  C00C  FFE2         	movff	UpdateClock@hours+1,fsr1h
  5258   001626  CFDE FFE6          	movff	postinc2,postinc1
  5259   00162A  CFDD FFE5          	movff	postdec2,postdec1
  5260   00162E                     
  5261                           ;clock.c: 12:         if (*seconds >= 24 ){
  5262   00162E  C007  FFD9         	movff	UpdateClock@seconds,fsr2l
  5263   001632  C008  FFDA         	movff	UpdateClock@seconds+1,fsr2h
  5264   001636  0E01               	movlw	1
  5265   001638  BEDB               	btfsc	plusw2,7,c
  5266   00163A  EF29  F00B         	goto	u4361
  5267   00163E  0E01               	movlw	1
  5268   001640  50DB               	movf	plusw2,w,c
  5269   001642  E109               	bnz	u4360
  5270   001644  0E18               	movlw	24
  5271   001646  5CDE               	subwf	postinc2,w,c
  5272   001648  A0D8               	btfss	status,0,c
  5273   00164A  EF29  F00B         	goto	u4361
  5274   00164E  EF2B  F00B         	goto	u4360
  5275   001652                     u4361:
  5276   001652  EF31  F00B         	goto	l4076
  5277   001656                     u4360:
  5278   001656                     
  5279                           ;clock.c: 13:             *seconds = 0;
  5280   001656  C007  FFD9         	movff	UpdateClock@seconds,fsr2l
  5281   00165A  C008  FFDA         	movff	UpdateClock@seconds+1,fsr2h
  5282   00165E  6ADE               	clrf	postinc2,c
  5283   001660  6ADD               	clrf	postdec2,c
  5284   001662                     l4076:
  5285                           
  5286                           ;clock.c: 17:     if (*seconds >= 60 ){
  5287   001662  C007  FFD9         	movff	UpdateClock@seconds,fsr2l
  5288   001666  C008  FFDA         	movff	UpdateClock@seconds+1,fsr2h
  5289   00166A  0E01               	movlw	1
  5290   00166C  BEDB               	btfsc	plusw2,7,c
  5291   00166E  EF43  F00B         	goto	u4371
  5292   001672  0E01               	movlw	1
  5293   001674  50DB               	movf	plusw2,w,c
  5294   001676  E109               	bnz	u4370
  5295   001678  0E3C               	movlw	60
  5296   00167A  5CDE               	subwf	postinc2,w,c
  5297   00167C  A0D8               	btfss	status,0,c
  5298   00167E  EF43  F00B         	goto	u4371
  5299   001682  EF45  F00B         	goto	u4370
  5300   001686                     u4371:
  5301   001686  EF5F  F00B         	goto	l4082
  5302   00168A                     u4370:
  5303   00168A                     
  5304                           ;clock.c: 18:         *seconds = 0;
  5305   00168A  C007  FFD9         	movff	UpdateClock@seconds,fsr2l
  5306   00168E  C008  FFDA         	movff	UpdateClock@seconds+1,fsr2h
  5307   001692  6ADE               	clrf	postinc2,c
  5308   001694  6ADD               	clrf	postdec2,c
  5309   001696                     
  5310                           ;clock.c: 19:         *minutes = *minutes + 1;
  5311   001696  C009  FFD9         	movff	UpdateClock@minutes,fsr2l
  5312   00169A  C00A  FFDA         	movff	UpdateClock@minutes+1,fsr2h
  5313   00169E  CFDE F019          	movff	postinc2,??_UpdateClock
  5314   0016A2  CFDD F01A          	movff	postdec2,??_UpdateClock+1
  5315   0016A6  0E01               	movlw	1
  5316   0016A8  2619               	addwf	??_UpdateClock^0,f,c
  5317   0016AA  0E00               	movlw	0
  5318   0016AC  221A               	addwfc	(??_UpdateClock+1)^0,f,c
  5319   0016AE  C009  FFD9         	movff	UpdateClock@minutes,fsr2l
  5320   0016B2  C00A  FFDA         	movff	UpdateClock@minutes+1,fsr2h
  5321   0016B6  C019  FFDE         	movff	??_UpdateClock,postinc2
  5322   0016BA  C01A  FFDD         	movff	??_UpdateClock+1,postdec2
  5323   0016BE                     l4082:
  5324                           
  5325                           ;clock.c: 22:     if (*minutes >= 60){
  5326   0016BE  C009  FFD9         	movff	UpdateClock@minutes,fsr2l
  5327   0016C2  C00A  FFDA         	movff	UpdateClock@minutes+1,fsr2h
  5328   0016C6  0E01               	movlw	1
  5329   0016C8  BEDB               	btfsc	plusw2,7,c
  5330   0016CA  EF71  F00B         	goto	u4381
  5331   0016CE  0E01               	movlw	1
  5332   0016D0  50DB               	movf	plusw2,w,c
  5333   0016D2  E109               	bnz	u4380
  5334   0016D4  0E3C               	movlw	60
  5335   0016D6  5CDE               	subwf	postinc2,w,c
  5336   0016D8  A0D8               	btfss	status,0,c
  5337   0016DA  EF71  F00B         	goto	u4381
  5338   0016DE  EF73  F00B         	goto	u4380
  5339   0016E2                     u4381:
  5340   0016E2  EF8D  F00B         	goto	l4088
  5341   0016E6                     u4380:
  5342   0016E6                     
  5343                           ;clock.c: 23:         *minutes = 0;
  5344   0016E6  C009  FFD9         	movff	UpdateClock@minutes,fsr2l
  5345   0016EA  C00A  FFDA         	movff	UpdateClock@minutes+1,fsr2h
  5346   0016EE  6ADE               	clrf	postinc2,c
  5347   0016F0  6ADD               	clrf	postdec2,c
  5348   0016F2                     
  5349                           ;clock.c: 24:         *hours = *hours + 1;
  5350   0016F2  C00B  FFD9         	movff	UpdateClock@hours,fsr2l
  5351   0016F6  C00C  FFDA         	movff	UpdateClock@hours+1,fsr2h
  5352   0016FA  CFDE F019          	movff	postinc2,??_UpdateClock
  5353   0016FE  CFDD F01A          	movff	postdec2,??_UpdateClock+1
  5354   001702  0E01               	movlw	1
  5355   001704  2619               	addwf	??_UpdateClock^0,f,c
  5356   001706  0E00               	movlw	0
  5357   001708  221A               	addwfc	(??_UpdateClock+1)^0,f,c
  5358   00170A  C00B  FFD9         	movff	UpdateClock@hours,fsr2l
  5359   00170E  C00C  FFDA         	movff	UpdateClock@hours+1,fsr2h
  5360   001712  C019  FFDE         	movff	??_UpdateClock,postinc2
  5361   001716  C01A  FFDD         	movff	??_UpdateClock+1,postdec2
  5362   00171A                     l4088:
  5363                           
  5364                           ;clock.c: 27:     if (*hours >= 24){
  5365   00171A  C00B  FFD9         	movff	UpdateClock@hours,fsr2l
  5366   00171E  C00C  FFDA         	movff	UpdateClock@hours+1,fsr2h
  5367   001722  0E01               	movlw	1
  5368   001724  BEDB               	btfsc	plusw2,7,c
  5369   001726  EF9F  F00B         	goto	u4391
  5370   00172A  0E01               	movlw	1
  5371   00172C  50DB               	movf	plusw2,w,c
  5372   00172E  E109               	bnz	u4390
  5373   001730  0E18               	movlw	24
  5374   001732  5CDE               	subwf	postinc2,w,c
  5375   001734  A0D8               	btfss	status,0,c
  5376   001736  EF9F  F00B         	goto	u4391
  5377   00173A  EFA1  F00B         	goto	u4390
  5378   00173E                     u4391:
  5379   00173E  EFCF  F00B         	goto	l4096
  5380   001742                     u4390:
  5381   001742                     
  5382                           ;clock.c: 28:         *hours = 0;
  5383   001742  C00B  FFD9         	movff	UpdateClock@hours,fsr2l
  5384   001746  C00C  FFDA         	movff	UpdateClock@hours+1,fsr2h
  5385   00174A  6ADE               	clrf	postinc2,c
  5386   00174C  6ADD               	clrf	postdec2,c
  5387   00174E                     
  5388                           ;clock.c: 29:         *days = *days + 1;
  5389   00174E  C00D  FFD9         	movff	UpdateClock@days,fsr2l
  5390   001752  C00E  FFDA         	movff	UpdateClock@days+1,fsr2h
  5391   001756  CFDE F019          	movff	postinc2,??_UpdateClock
  5392   00175A  CFDD F01A          	movff	postdec2,??_UpdateClock+1
  5393   00175E  0E01               	movlw	1
  5394   001760  2619               	addwf	??_UpdateClock^0,f,c
  5395   001762  0E00               	movlw	0
  5396   001764  221A               	addwfc	(??_UpdateClock+1)^0,f,c
  5397   001766  C00D  FFD9         	movff	UpdateClock@days,fsr2l
  5398   00176A  C00E  FFDA         	movff	UpdateClock@days+1,fsr2h
  5399   00176E  C019  FFDE         	movff	??_UpdateClock,postinc2
  5400   001772  C01A  FFDD         	movff	??_UpdateClock+1,postdec2
  5401   001776                     
  5402                           ;clock.c: 30:         *DoW = *DoW + 1;
  5403   001776  C00F  FFD9         	movff	UpdateClock@DoW,fsr2l
  5404   00177A  C010  FFDA         	movff	UpdateClock@DoW+1,fsr2h
  5405   00177E  CFDE F019          	movff	postinc2,??_UpdateClock
  5406   001782  CFDD F01A          	movff	postdec2,??_UpdateClock+1
  5407   001786  0E01               	movlw	1
  5408   001788  2619               	addwf	??_UpdateClock^0,f,c
  5409   00178A  0E00               	movlw	0
  5410   00178C  221A               	addwfc	(??_UpdateClock+1)^0,f,c
  5411   00178E  C00F  FFD9         	movff	UpdateClock@DoW,fsr2l
  5412   001792  C010  FFDA         	movff	UpdateClock@DoW+1,fsr2h
  5413   001796  C019  FFDE         	movff	??_UpdateClock,postinc2
  5414   00179A  C01A  FFDD         	movff	??_UpdateClock+1,postdec2
  5415   00179E                     l4096:
  5416                           
  5417                           ;clock.c: 33:     if (*DoW >= 8){
  5418   00179E  C00F  FFD9         	movff	UpdateClock@DoW,fsr2l
  5419   0017A2  C010  FFDA         	movff	UpdateClock@DoW+1,fsr2h
  5420   0017A6  0E01               	movlw	1
  5421   0017A8  BEDB               	btfsc	plusw2,7,c
  5422   0017AA  EFE1  F00B         	goto	u4401
  5423   0017AE  0E01               	movlw	1
  5424   0017B0  50DB               	movf	plusw2,w,c
  5425   0017B2  E109               	bnz	u4400
  5426   0017B4  0E08               	movlw	8
  5427   0017B6  5CDE               	subwf	postinc2,w,c
  5428   0017B8  A0D8               	btfss	status,0,c
  5429   0017BA  EFE1  F00B         	goto	u4401
  5430   0017BE  EFE3  F00B         	goto	u4400
  5431   0017C2                     u4401:
  5432   0017C2  EFEB  F00B         	goto	l4100
  5433   0017C6                     u4400:
  5434   0017C6                     
  5435                           ;clock.c: 34:         *DoW = 1;
  5436   0017C6  C00F  FFD9         	movff	UpdateClock@DoW,fsr2l
  5437   0017CA  C010  FFDA         	movff	UpdateClock@DoW+1,fsr2h
  5438   0017CE  0E01               	movlw	1
  5439   0017D0  6EDE               	movwf	postinc2,c
  5440   0017D2  0E00               	movlw	0
  5441   0017D4  6EDD               	movwf	postdec2,c
  5442   0017D6                     l4100:
  5443                           
  5444                           ;clock.c: 37:     if((*DSTstate == 0) && (*months == 3) && (*days >= 25) && (*DoW == 7) 
      +                          && ( *hours >= 1) ){
  5445   0017D6  C015  FFD9         	movff	UpdateClock@DSTstate,fsr2l
  5446   0017DA  C016  FFDA         	movff	UpdateClock@DSTstate+1,fsr2h
  5447   0017DE  50DE               	movf	postinc2,w,c
  5448   0017E0  10DE               	iorwf	postinc2,w,c
  5449   0017E2  A4D8               	btfss	status,2,c
  5450   0017E4  EFF6  F00B         	goto	u4411
  5451   0017E8  EFF8  F00B         	goto	u4410
  5452   0017EC                     u4411:
  5453   0017EC  EF74  F00C         	goto	l4118
  5454   0017F0                     u4410:
  5455   0017F0  C011  FFD9         	movff	UpdateClock@months,fsr2l
  5456   0017F4  C012  FFDA         	movff	UpdateClock@months+1,fsr2h
  5457   0017F8  0E03               	movlw	3
  5458   0017FA  18DE               	xorwf	postinc2,w,c
  5459   0017FC  10DE               	iorwf	postinc2,w,c
  5460   0017FE  A4D8               	btfss	status,2,c
  5461   001800  EF04  F00C         	goto	u4421
  5462   001804  EF06  F00C         	goto	u4420
  5463   001808                     u4421:
  5464   001808  EF74  F00C         	goto	l4118
  5465   00180C                     u4420:
  5466   00180C  C00D  FFD9         	movff	UpdateClock@days,fsr2l
  5467   001810  C00E  FFDA         	movff	UpdateClock@days+1,fsr2h
  5468   001814  0E01               	movlw	1
  5469   001816  BEDB               	btfsc	plusw2,7,c
  5470   001818  EF18  F00C         	goto	u4431
  5471   00181C  0E01               	movlw	1
  5472   00181E  50DB               	movf	plusw2,w,c
  5473   001820  E109               	bnz	u4430
  5474   001822  0E19               	movlw	25
  5475   001824  5CDE               	subwf	postinc2,w,c
  5476   001826  A0D8               	btfss	status,0,c
  5477   001828  EF18  F00C         	goto	u4431
  5478   00182C  EF1A  F00C         	goto	u4430
  5479   001830                     u4431:
  5480   001830  EF74  F00C         	goto	l4118
  5481   001834                     u4430:
  5482   001834  C00F  FFD9         	movff	UpdateClock@DoW,fsr2l
  5483   001838  C010  FFDA         	movff	UpdateClock@DoW+1,fsr2h
  5484   00183C  0E07               	movlw	7
  5485   00183E  18DE               	xorwf	postinc2,w,c
  5486   001840  10DE               	iorwf	postinc2,w,c
  5487   001842  A4D8               	btfss	status,2,c
  5488   001844  EF26  F00C         	goto	u4441
  5489   001848  EF28  F00C         	goto	u4440
  5490   00184C                     u4441:
  5491   00184C  EF74  F00C         	goto	l4118
  5492   001850                     u4440:
  5493   001850  C00B  FFD9         	movff	UpdateClock@hours,fsr2l
  5494   001854  C00C  FFDA         	movff	UpdateClock@hours+1,fsr2h
  5495   001858  0E01               	movlw	1
  5496   00185A  BEDB               	btfsc	plusw2,7,c
  5497   00185C  EF39  F00C         	goto	u4451
  5498   001860  0E01               	movlw	1
  5499   001862  50DB               	movf	plusw2,w,c
  5500   001864  E108               	bnz	u4450
  5501   001866  04DE               	decf	postinc2,w,c
  5502   001868  A0D8               	btfss	status,0,c
  5503   00186A  EF39  F00C         	goto	u4451
  5504   00186E  EF3B  F00C         	goto	u4450
  5505   001872                     u4451:
  5506   001872  EF74  F00C         	goto	l4118
  5507   001876                     u4450:
  5508   001876                     
  5509                           ;clock.c: 39:         *hours = *hours + 1;
  5510   001876  C00B  FFD9         	movff	UpdateClock@hours,fsr2l
  5511   00187A  C00C  FFDA         	movff	UpdateClock@hours+1,fsr2h
  5512   00187E  CFDE F019          	movff	postinc2,??_UpdateClock
  5513   001882  CFDD F01A          	movff	postdec2,??_UpdateClock+1
  5514   001886  0E01               	movlw	1
  5515   001888  2619               	addwf	??_UpdateClock^0,f,c
  5516   00188A  0E00               	movlw	0
  5517   00188C  221A               	addwfc	(??_UpdateClock+1)^0,f,c
  5518   00188E  C00B  FFD9         	movff	UpdateClock@hours,fsr2l
  5519   001892  C00C  FFDA         	movff	UpdateClock@hours+1,fsr2h
  5520   001896  C019  FFDE         	movff	??_UpdateClock,postinc2
  5521   00189A  C01A  FFDD         	movff	??_UpdateClock+1,postdec2
  5522   00189E                     
  5523                           ;clock.c: 40:         if (TestMode == 1){
  5524   00189E  0417               	decf	UpdateClock@TestMode^0,w,c
  5525   0018A0  1018               	iorwf	(UpdateClock@TestMode+1)^0,w,c
  5526   0018A2  A4D8               	btfss	status,2,c
  5527   0018A4  EF56  F00C         	goto	u4461
  5528   0018A8  EF58  F00C         	goto	u4460
  5529   0018AC                     u4461:
  5530   0018AC  EF6C  F00C         	goto	l4116
  5531   0018B0                     u4460:
  5532   0018B0                     
  5533                           ;clock.c: 41:             *seconds = *seconds + 1;
  5534   0018B0  C007  FFD9         	movff	UpdateClock@seconds,fsr2l
  5535   0018B4  C008  FFDA         	movff	UpdateClock@seconds+1,fsr2h
  5536   0018B8  CFDE F019          	movff	postinc2,??_UpdateClock
  5537   0018BC  CFDD F01A          	movff	postdec2,??_UpdateClock+1
  5538   0018C0  0E01               	movlw	1
  5539   0018C2  2619               	addwf	??_UpdateClock^0,f,c
  5540   0018C4  0E00               	movlw	0
  5541   0018C6  221A               	addwfc	(??_UpdateClock+1)^0,f,c
  5542   0018C8  C007  FFD9         	movff	UpdateClock@seconds,fsr2l
  5543   0018CC  C008  FFDA         	movff	UpdateClock@seconds+1,fsr2h
  5544   0018D0  C019  FFDE         	movff	??_UpdateClock,postinc2
  5545   0018D4  C01A  FFDD         	movff	??_UpdateClock+1,postdec2
  5546   0018D8                     l4116:
  5547                           
  5548                           ;clock.c: 43:         *DSTstate = 1;
  5549   0018D8  C015  FFD9         	movff	UpdateClock@DSTstate,fsr2l
  5550   0018DC  C016  FFDA         	movff	UpdateClock@DSTstate+1,fsr2h
  5551   0018E0  0E01               	movlw	1
  5552   0018E2  6EDE               	movwf	postinc2,c
  5553   0018E4  0E00               	movlw	0
  5554   0018E6  6EDD               	movwf	postdec2,c
  5555   0018E8                     l4118:
  5556                           
  5557                           ;clock.c: 47:     if((*DSTstate==1) && (*months == 10) && (*days >= 25) && (*DoW == 7) &
      +                          & (*hours == 2) ){
  5558   0018E8  C015  FFD9         	movff	UpdateClock@DSTstate,fsr2l
  5559   0018EC  C016  FFDA         	movff	UpdateClock@DSTstate+1,fsr2h
  5560   0018F0  04DE               	decf	postinc2,w,c
  5561   0018F2  10DE               	iorwf	postinc2,w,c
  5562   0018F4  A4D8               	btfss	status,2,c
  5563   0018F6  EF7F  F00C         	goto	u4471
  5564   0018FA  EF81  F00C         	goto	u4470
  5565   0018FE                     u4471:
  5566   0018FE  EFFA  F00C         	goto	l4136
  5567   001902                     u4470:
  5568   001902  C011  FFD9         	movff	UpdateClock@months,fsr2l
  5569   001906  C012  FFDA         	movff	UpdateClock@months+1,fsr2h
  5570   00190A  0E0A               	movlw	10
  5571   00190C  18DE               	xorwf	postinc2,w,c
  5572   00190E  10DE               	iorwf	postinc2,w,c
  5573   001910  A4D8               	btfss	status,2,c
  5574   001912  EF8D  F00C         	goto	u4481
  5575   001916  EF8F  F00C         	goto	u4480
  5576   00191A                     u4481:
  5577   00191A  EFFA  F00C         	goto	l4136
  5578   00191E                     u4480:
  5579   00191E  C00D  FFD9         	movff	UpdateClock@days,fsr2l
  5580   001922  C00E  FFDA         	movff	UpdateClock@days+1,fsr2h
  5581   001926  0E01               	movlw	1
  5582   001928  BEDB               	btfsc	plusw2,7,c
  5583   00192A  EFA1  F00C         	goto	u4491
  5584   00192E  0E01               	movlw	1
  5585   001930  50DB               	movf	plusw2,w,c
  5586   001932  E109               	bnz	u4490
  5587   001934  0E19               	movlw	25
  5588   001936  5CDE               	subwf	postinc2,w,c
  5589   001938  A0D8               	btfss	status,0,c
  5590   00193A  EFA1  F00C         	goto	u4491
  5591   00193E  EFA3  F00C         	goto	u4490
  5592   001942                     u4491:
  5593   001942  EFFA  F00C         	goto	l4136
  5594   001946                     u4490:
  5595   001946  C00F  FFD9         	movff	UpdateClock@DoW,fsr2l
  5596   00194A  C010  FFDA         	movff	UpdateClock@DoW+1,fsr2h
  5597   00194E  0E07               	movlw	7
  5598   001950  18DE               	xorwf	postinc2,w,c
  5599   001952  10DE               	iorwf	postinc2,w,c
  5600   001954  A4D8               	btfss	status,2,c
  5601   001956  EFAF  F00C         	goto	u4501
  5602   00195A  EFB1  F00C         	goto	u4500
  5603   00195E                     u4501:
  5604   00195E  EFFA  F00C         	goto	l4136
  5605   001962                     u4500:
  5606   001962  C00B  FFD9         	movff	UpdateClock@hours,fsr2l
  5607   001966  C00C  FFDA         	movff	UpdateClock@hours+1,fsr2h
  5608   00196A  0E02               	movlw	2
  5609   00196C  18DE               	xorwf	postinc2,w,c
  5610   00196E  10DE               	iorwf	postinc2,w,c
  5611   001970  A4D8               	btfss	status,2,c
  5612   001972  EFBD  F00C         	goto	u4511
  5613   001976  EFBF  F00C         	goto	u4510
  5614   00197A                     u4511:
  5615   00197A  EFFA  F00C         	goto	l4136
  5616   00197E                     u4510:
  5617   00197E                     
  5618                           ;clock.c: 48:         *hours = *hours - 1;
  5619   00197E  C00B  FFD9         	movff	UpdateClock@hours,fsr2l
  5620   001982  C00C  FFDA         	movff	UpdateClock@hours+1,fsr2h
  5621   001986  CFDE F019          	movff	postinc2,??_UpdateClock
  5622   00198A  CFDD F01A          	movff	postdec2,??_UpdateClock+1
  5623   00198E  0EFF               	movlw	255
  5624   001990  2419               	addwf	??_UpdateClock^0,w,c
  5625   001992  6E1B               	movwf	(??_UpdateClock+2)^0,c
  5626   001994  0EFF               	movlw	255
  5627   001996  201A               	addwfc	(??_UpdateClock+1)^0,w,c
  5628   001998  6E1C               	movwf	(??_UpdateClock+3)^0,c
  5629   00199A  C00B  FFD9         	movff	UpdateClock@hours,fsr2l
  5630   00199E  C00C  FFDA         	movff	UpdateClock@hours+1,fsr2h
  5631   0019A2  C01B  FFDE         	movff	??_UpdateClock+2,postinc2
  5632   0019A6  C01C  FFDD         	movff	??_UpdateClock+3,postdec2
  5633   0019AA                     
  5634                           ;clock.c: 49:         if (TestMode == 1){
  5635   0019AA  0417               	decf	UpdateClock@TestMode^0,w,c
  5636   0019AC  1018               	iorwf	(UpdateClock@TestMode+1)^0,w,c
  5637   0019AE  A4D8               	btfss	status,2,c
  5638   0019B0  EFDC  F00C         	goto	u4521
  5639   0019B4  EFDE  F00C         	goto	u4520
  5640   0019B8                     u4521:
  5641   0019B8  EFF4  F00C         	goto	l4134
  5642   0019BC                     u4520:
  5643   0019BC                     
  5644                           ;clock.c: 50:             *seconds = *seconds - 1;
  5645   0019BC  C007  FFD9         	movff	UpdateClock@seconds,fsr2l
  5646   0019C0  C008  FFDA         	movff	UpdateClock@seconds+1,fsr2h
  5647   0019C4  CFDE F019          	movff	postinc2,??_UpdateClock
  5648   0019C8  CFDD F01A          	movff	postdec2,??_UpdateClock+1
  5649   0019CC  0EFF               	movlw	255
  5650   0019CE  2419               	addwf	??_UpdateClock^0,w,c
  5651   0019D0  6E1B               	movwf	(??_UpdateClock+2)^0,c
  5652   0019D2  0EFF               	movlw	255
  5653   0019D4  201A               	addwfc	(??_UpdateClock+1)^0,w,c
  5654   0019D6  6E1C               	movwf	(??_UpdateClock+3)^0,c
  5655   0019D8  C007  FFD9         	movff	UpdateClock@seconds,fsr2l
  5656   0019DC  C008  FFDA         	movff	UpdateClock@seconds+1,fsr2h
  5657   0019E0  C01B  FFDE         	movff	??_UpdateClock+2,postinc2
  5658   0019E4  C01C  FFDD         	movff	??_UpdateClock+3,postdec2
  5659   0019E8                     l4134:
  5660                           
  5661                           ;clock.c: 52:         *DSTstate = 0;
  5662   0019E8  C015  FFD9         	movff	UpdateClock@DSTstate,fsr2l
  5663   0019EC  C016  FFDA         	movff	UpdateClock@DSTstate+1,fsr2h
  5664   0019F0  6ADE               	clrf	postinc2,c
  5665   0019F2  6ADD               	clrf	postdec2,c
  5666   0019F4                     l4136:
  5667                           
  5668                           ;clock.c: 56:     if ((*years)%4 == 0 && *months == 2){
  5669   0019F4  C013  FFD9         	movff	UpdateClock@years,fsr2l
  5670   0019F8  C014  FFDA         	movff	UpdateClock@years+1,fsr2h
  5671   0019FC  CFDE F019          	movff	postinc2,??_UpdateClock
  5672   001A00  CFDD F01A          	movff	postdec2,??_UpdateClock+1
  5673   001A04  0E03               	movlw	3
  5674   001A06  1619               	andwf	??_UpdateClock^0,f,c
  5675   001A08  0E00               	movlw	0
  5676   001A0A  161A               	andwf	(??_UpdateClock+1)^0,f,c
  5677   001A0C  5019               	movf	??_UpdateClock^0,w,c
  5678   001A0E  101A               	iorwf	(??_UpdateClock+1)^0,w,c
  5679   001A10  A4D8               	btfss	status,2,c
  5680   001A12  EF0D  F00D         	goto	u4531
  5681   001A16  EF0F  F00D         	goto	u4530
  5682   001A1A                     u4531:
  5683   001A1A  EF21  F00D         	goto	l4142
  5684   001A1E                     u4530:
  5685   001A1E  C011  FFD9         	movff	UpdateClock@months,fsr2l
  5686   001A22  C012  FFDA         	movff	UpdateClock@months+1,fsr2h
  5687   001A26  0E02               	movlw	2
  5688   001A28  18DE               	xorwf	postinc2,w,c
  5689   001A2A  10DE               	iorwf	postinc2,w,c
  5690   001A2C  A4D8               	btfss	status,2,c
  5691   001A2E  EF1B  F00D         	goto	u4541
  5692   001A32  EF1D  F00D         	goto	u4540
  5693   001A36                     u4541:
  5694   001A36  EF21  F00D         	goto	l4142
  5695   001A3A                     u4540:
  5696   001A3A                     
  5697                           ;clock.c: 57:        DaysInMonth[1] = 29;
  5698   001A3A  0E00               	movlw	0
  5699   001A3C  6E22               	movwf	(UpdateClock@DaysInMonth+3)^0,c
  5700   001A3E  0E1D               	movlw	29
  5701   001A40  6E21               	movwf	(UpdateClock@DaysInMonth+2)^0,c
  5702   001A42                     l4142:
  5703                           
  5704                           ;clock.c: 61:     if (*years%100 == 0 && *months == 2 && *years%400 != 0){
  5705   001A42  C013  FFD9         	movff	UpdateClock@years,fsr2l
  5706   001A46  C014  FFDA         	movff	UpdateClock@years+1,fsr2h
  5707   001A4A  CFDE F001          	movff	postinc2,___awmod@dividend
  5708   001A4E  CFDD F002          	movff	postdec2,___awmod@dividend+1
  5709   001A52  0E00               	movlw	0
  5710   001A54  6E04               	movwf	(___awmod@divisor+1)^0,c
  5711   001A56  0E64               	movlw	100
  5712   001A58  6E03               	movwf	___awmod@divisor^0,c
  5713   001A5A  ECC9  F016         	call	___awmod	;wreg free
  5714   001A5E  5001               	movf	?___awmod^0,w,c
  5715   001A60  1002               	iorwf	(?___awmod+1)^0,w,c
  5716   001A62  A4D8               	btfss	status,2,c
  5717   001A64  EF36  F00D         	goto	u4551
  5718   001A68  EF38  F00D         	goto	u4550
  5719   001A6C                     u4551:
  5720   001A6C  EF61  F00D         	goto	l4150
  5721   001A70                     u4550:
  5722   001A70  C011  FFD9         	movff	UpdateClock@months,fsr2l
  5723   001A74  C012  FFDA         	movff	UpdateClock@months+1,fsr2h
  5724   001A78  0E02               	movlw	2
  5725   001A7A  18DE               	xorwf	postinc2,w,c
  5726   001A7C  10DE               	iorwf	postinc2,w,c
  5727   001A7E  A4D8               	btfss	status,2,c
  5728   001A80  EF44  F00D         	goto	u4561
  5729   001A84  EF46  F00D         	goto	u4560
  5730   001A88                     u4561:
  5731   001A88  EF61  F00D         	goto	l4150
  5732   001A8C                     u4560:
  5733   001A8C  C013  FFD9         	movff	UpdateClock@years,fsr2l
  5734   001A90  C014  FFDA         	movff	UpdateClock@years+1,fsr2h
  5735   001A94  CFDE F001          	movff	postinc2,___awmod@dividend
  5736   001A98  CFDD F002          	movff	postdec2,___awmod@dividend+1
  5737   001A9C  0E01               	movlw	1
  5738   001A9E  6E04               	movwf	(___awmod@divisor+1)^0,c
  5739   001AA0  0E90               	movlw	144
  5740   001AA2  6E03               	movwf	___awmod@divisor^0,c
  5741   001AA4  ECC9  F016         	call	___awmod	;wreg free
  5742   001AA8  5001               	movf	?___awmod^0,w,c
  5743   001AAA  1002               	iorwf	(?___awmod+1)^0,w,c
  5744   001AAC  B4D8               	btfsc	status,2,c
  5745   001AAE  EF5B  F00D         	goto	u4571
  5746   001AB2  EF5D  F00D         	goto	u4570
  5747   001AB6                     u4571:
  5748   001AB6  EF61  F00D         	goto	l4150
  5749   001ABA                     u4570:
  5750   001ABA                     
  5751                           ;clock.c: 62:             DaysInMonth[1] = 28;
  5752   001ABA  0E00               	movlw	0
  5753   001ABC  6E22               	movwf	(UpdateClock@DaysInMonth+3)^0,c
  5754   001ABE  0E1C               	movlw	28
  5755   001AC0  6E21               	movwf	(UpdateClock@DaysInMonth+2)^0,c
  5756   001AC2                     l4150:
  5757                           
  5758                           ;clock.c: 66:     if (*days > (DaysInMonth[*months-1] ) ) {
  5759   001AC2  C00D  FFD9         	movff	UpdateClock@days,fsr2l
  5760   001AC6  C00E  FFDA         	movff	UpdateClock@days+1,fsr2h
  5761   001ACA  C011  FFE1         	movff	UpdateClock@months,fsr1l
  5762   001ACE  C012  FFE2         	movff	UpdateClock@months+1,fsr1h
  5763   001AD2  50E7               	movf	indf1,w,c
  5764   001AD4  0D02               	mullw	2
  5765   001AD6  CFF3 F01B          	movff	prodl,??_UpdateClock+2
  5766   001ADA  0EFE               	movlw	254
  5767   001ADC  261B               	addwf	(??_UpdateClock+2)^0,f,c
  5768   001ADE  501B               	movf	(??_UpdateClock+2)^0,w,c
  5769   001AE0  0F1F               	addlw	low UpdateClock@DaysInMonth
  5770   001AE2  6EE1               	movwf	fsr1l,c
  5771   001AE4  6AE2               	clrf	fsr1h,c
  5772   001AE6  50DE               	movf	postinc2,w,c
  5773   001AE8  5CE6               	subwf	postinc1,w,c
  5774   001AEA  50E6               	movf	postinc1,w,c
  5775   001AEC  0A80               	xorlw	128
  5776   001AEE  6E1E               	movwf	(??_UpdateClock+5)^0,c
  5777   001AF0  50DE               	movf	postinc2,w,c
  5778   001AF2  0A80               	xorlw	128
  5779   001AF4  581E               	subwfb	(??_UpdateClock+5)^0,w,c
  5780   001AF6  B0D8               	btfsc	status,0,c
  5781   001AF8  EF80  F00D         	goto	u4581
  5782   001AFC  EF82  F00D         	goto	u4580
  5783   001B00                     u4581:
  5784   001B00  EFCE  F00D         	goto	l278
  5785   001B04                     u4580:
  5786   001B04                     
  5787                           ;clock.c: 67:         *days = 1;
  5788   001B04  C00D  FFD9         	movff	UpdateClock@days,fsr2l
  5789   001B08  C00E  FFDA         	movff	UpdateClock@days+1,fsr2h
  5790   001B0C  0E01               	movlw	1
  5791   001B0E  6EDE               	movwf	postinc2,c
  5792   001B10  0E00               	movlw	0
  5793   001B12  6EDD               	movwf	postdec2,c
  5794   001B14                     
  5795                           ;clock.c: 68:         *months = *months + 1 ;
  5796   001B14  C011  FFD9         	movff	UpdateClock@months,fsr2l
  5797   001B18  C012  FFDA         	movff	UpdateClock@months+1,fsr2h
  5798   001B1C  CFDE F019          	movff	postinc2,??_UpdateClock
  5799   001B20  CFDD F01A          	movff	postdec2,??_UpdateClock+1
  5800   001B24  0E01               	movlw	1
  5801   001B26  2619               	addwf	??_UpdateClock^0,f,c
  5802   001B28  0E00               	movlw	0
  5803   001B2A  221A               	addwfc	(??_UpdateClock+1)^0,f,c
  5804   001B2C  C011  FFD9         	movff	UpdateClock@months,fsr2l
  5805   001B30  C012  FFDA         	movff	UpdateClock@months+1,fsr2h
  5806   001B34  C019  FFDE         	movff	??_UpdateClock,postinc2
  5807   001B38  C01A  FFDD         	movff	??_UpdateClock+1,postdec2
  5808   001B3C                     
  5809                           ;clock.c: 70:         if (*months >= 12+1) {
  5810   001B3C  C011  FFD9         	movff	UpdateClock@months,fsr2l
  5811   001B40  C012  FFDA         	movff	UpdateClock@months+1,fsr2h
  5812   001B44  0E01               	movlw	1
  5813   001B46  BEDB               	btfsc	plusw2,7,c
  5814   001B48  EFB0  F00D         	goto	u4591
  5815   001B4C  0E01               	movlw	1
  5816   001B4E  50DB               	movf	plusw2,w,c
  5817   001B50  E109               	bnz	u4590
  5818   001B52  0E0D               	movlw	13
  5819   001B54  5CDE               	subwf	postinc2,w,c
  5820   001B56  A0D8               	btfss	status,0,c
  5821   001B58  EFB0  F00D         	goto	u4591
  5822   001B5C  EFB2  F00D         	goto	u4590
  5823   001B60                     u4591:
  5824   001B60  EFCE  F00D         	goto	l278
  5825   001B64                     u4590:
  5826   001B64                     
  5827                           ;clock.c: 71:             *months = 1;
  5828   001B64  C011  FFD9         	movff	UpdateClock@months,fsr2l
  5829   001B68  C012  FFDA         	movff	UpdateClock@months+1,fsr2h
  5830   001B6C  0E01               	movlw	1
  5831   001B6E  6EDE               	movwf	postinc2,c
  5832   001B70  0E00               	movlw	0
  5833   001B72  6EDD               	movwf	postdec2,c
  5834   001B74                     
  5835                           ;clock.c: 72:             *years = *years + 1;
  5836   001B74  C013  FFD9         	movff	UpdateClock@years,fsr2l
  5837   001B78  C014  FFDA         	movff	UpdateClock@years+1,fsr2h
  5838   001B7C  CFDE F019          	movff	postinc2,??_UpdateClock
  5839   001B80  CFDD F01A          	movff	postdec2,??_UpdateClock+1
  5840   001B84  0E01               	movlw	1
  5841   001B86  2619               	addwf	??_UpdateClock^0,f,c
  5842   001B88  0E00               	movlw	0
  5843   001B8A  221A               	addwfc	(??_UpdateClock+1)^0,f,c
  5844   001B8C  C013  FFD9         	movff	UpdateClock@years,fsr2l
  5845   001B90  C014  FFDA         	movff	UpdateClock@years+1,fsr2h
  5846   001B94  C019  FFDE         	movff	??_UpdateClock,postinc2
  5847   001B98  C01A  FFDD         	movff	??_UpdateClock+1,postdec2
  5848   001B9C                     l278:
  5849   001B9C  0012               	return		;funcret
  5850   001B9E                     __end_of_UpdateClock:
  5851                           	callstack 0
  5852                           
  5853 ;; *************** function ___awmod *****************
  5854 ;; Defined at:
  5855 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\awmod.c"
  5856 ;; Parameters:    Size  Location     Type
  5857 ;;  dividend        2    0[COMRAM] int 
  5858 ;;  divisor         2    2[COMRAM] int 
  5859 ;; Auto vars:     Size  Location     Type
  5860 ;;  sign            1    5[COMRAM] unsigned char 
  5861 ;;  counter         1    4[COMRAM] unsigned char 
  5862 ;; Return value:  Size  Location     Type
  5863 ;;                  2    0[COMRAM] int 
  5864 ;; Registers used:
  5865 ;;		wreg, status,2, status,0
  5866 ;; Tracked objects:
  5867 ;;		On entry : 0/0
  5868 ;;		On exit  : 0/0
  5869 ;;		Unchanged: 0/0
  5870 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5871 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5872 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5873 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5874 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5875 ;;Total ram usage:        6 bytes
  5876 ;; Hardware stack levels used: 1
  5877 ;; Hardware stack levels required when called: 1
  5878 ;; This function calls:
  5879 ;;		Nothing
  5880 ;; This function is called by:
  5881 ;;		_UpdateClock
  5882 ;;		_dtoa
  5883 ;; This function uses a non-reentrant model
  5884 ;;
  5885                           
  5886                           	psect	text18
  5887   002D92                     __ptext18:
  5888                           	callstack 0
  5889   002D92                     ___awmod:
  5890                           	callstack 25
  5891   002D92  0E00               	movlw	0
  5892   002D94  6E06               	movwf	___awmod@sign^0,c
  5893   002D96  BE02               	btfsc	(___awmod@dividend+1)^0,7,c
  5894   002D98  EFD2  F016         	goto	u2330
  5895   002D9C  EFD0  F016         	goto	u2331
  5896   002DA0                     u2331:
  5897   002DA0  EFD8  F016         	goto	l2706
  5898   002DA4                     u2330:
  5899   002DA4  6C01               	negf	___awmod@dividend^0,c
  5900   002DA6  1E02               	comf	(___awmod@dividend+1)^0,f,c
  5901   002DA8  B0D8               	btfsc	status,0,c
  5902   002DAA  2A02               	incf	(___awmod@dividend+1)^0,f,c
  5903   002DAC  0E01               	movlw	1
  5904   002DAE  6E06               	movwf	___awmod@sign^0,c
  5905   002DB0                     l2706:
  5906   002DB0  BE04               	btfsc	(___awmod@divisor+1)^0,7,c
  5907   002DB2  EFDF  F016         	goto	u2340
  5908   002DB6  EFDD  F016         	goto	u2341
  5909   002DBA                     u2341:
  5910   002DBA  EFE3  F016         	goto	l2710
  5911   002DBE                     u2340:
  5912   002DBE  6C03               	negf	___awmod@divisor^0,c
  5913   002DC0  1E04               	comf	(___awmod@divisor+1)^0,f,c
  5914   002DC2  B0D8               	btfsc	status,0,c
  5915   002DC4  2A04               	incf	(___awmod@divisor+1)^0,f,c
  5916   002DC6                     l2710:
  5917   002DC6  5003               	movf	___awmod@divisor^0,w,c
  5918   002DC8  1004               	iorwf	(___awmod@divisor+1)^0,w,c
  5919   002DCA  B4D8               	btfsc	status,2,c
  5920   002DCC  EFEA  F016         	goto	u2351
  5921   002DD0  EFEC  F016         	goto	u2350
  5922   002DD4                     u2351:
  5923   002DD4  EF10  F017         	goto	l2726
  5924   002DD8                     u2350:
  5925   002DD8  0E01               	movlw	1
  5926   002DDA  6E05               	movwf	___awmod@counter^0,c
  5927   002DDC  EFF4  F016         	goto	l2716
  5928   002DE0                     l2714:
  5929   002DE0  90D8               	bcf	status,0,c
  5930   002DE2  3603               	rlcf	___awmod@divisor^0,f,c
  5931   002DE4  3604               	rlcf	(___awmod@divisor+1)^0,f,c
  5932   002DE6  2A05               	incf	___awmod@counter^0,f,c
  5933   002DE8                     l2716:
  5934   002DE8  AE04               	btfss	(___awmod@divisor+1)^0,7,c
  5935   002DEA  EFF9  F016         	goto	u2361
  5936   002DEE  EFFB  F016         	goto	u2360
  5937   002DF2                     u2361:
  5938   002DF2  EFF0  F016         	goto	l2714
  5939   002DF6                     u2360:
  5940   002DF6                     l2718:
  5941   002DF6  5003               	movf	___awmod@divisor^0,w,c
  5942   002DF8  5C01               	subwf	___awmod@dividend^0,w,c
  5943   002DFA  5004               	movf	(___awmod@divisor+1)^0,w,c
  5944   002DFC  5802               	subwfb	(___awmod@dividend+1)^0,w,c
  5945   002DFE  A0D8               	btfss	status,0,c
  5946   002E00  EF04  F017         	goto	u2371
  5947   002E04  EF06  F017         	goto	u2370
  5948   002E08                     u2371:
  5949   002E08  EF0A  F017         	goto	l2722
  5950   002E0C                     u2370:
  5951   002E0C  5003               	movf	___awmod@divisor^0,w,c
  5952   002E0E  5E01               	subwf	___awmod@dividend^0,f,c
  5953   002E10  5004               	movf	(___awmod@divisor+1)^0,w,c
  5954   002E12  5A02               	subwfb	(___awmod@dividend+1)^0,f,c
  5955   002E14                     l2722:
  5956   002E14  90D8               	bcf	status,0,c
  5957   002E16  3204               	rrcf	(___awmod@divisor+1)^0,f,c
  5958   002E18  3203               	rrcf	___awmod@divisor^0,f,c
  5959   002E1A  2E05               	decfsz	___awmod@counter^0,f,c
  5960   002E1C  EFFB  F016         	goto	l2718
  5961   002E20                     l2726:
  5962   002E20  5006               	movf	___awmod@sign^0,w,c
  5963   002E22  B4D8               	btfsc	status,2,c
  5964   002E24  EF16  F017         	goto	u2381
  5965   002E28  EF18  F017         	goto	u2380
  5966   002E2C                     u2381:
  5967   002E2C  EF1C  F017         	goto	l2730
  5968   002E30                     u2380:
  5969   002E30  6C01               	negf	___awmod@dividend^0,c
  5970   002E32  1E02               	comf	(___awmod@dividend+1)^0,f,c
  5971   002E34  B0D8               	btfsc	status,0,c
  5972   002E36  2A02               	incf	(___awmod@dividend+1)^0,f,c
  5973   002E38                     l2730:
  5974   002E38  C001  F001         	movff	___awmod@dividend,?___awmod
  5975   002E3C  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
  5976   002E40  0012               	return		;funcret
  5977   002E42                     __end_of___awmod:
  5978                           	callstack 0
  5979                           
  5980 ;; *************** function _Timer0_init *****************
  5981 ;; Defined at:
  5982 ;;		line 8 in file "timers.c"
  5983 ;; Parameters:    Size  Location     Type
  5984 ;;		None
  5985 ;; Auto vars:     Size  Location     Type
  5986 ;;		None
  5987 ;; Return value:  Size  Location     Type
  5988 ;;                  1    wreg      void 
  5989 ;; Registers used:
  5990 ;;		wreg, status,2
  5991 ;; Tracked objects:
  5992 ;;		On entry : 0/0
  5993 ;;		On exit  : 0/0
  5994 ;;		Unchanged: 0/0
  5995 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5996 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5997 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5998 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5999 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6000 ;;Total ram usage:        0 bytes
  6001 ;; Hardware stack levels used: 1
  6002 ;; Hardware stack levels required when called: 1
  6003 ;; This function calls:
  6004 ;;		Nothing
  6005 ;; This function is called by:
  6006 ;;		_main
  6007 ;; This function uses a non-reentrant model
  6008 ;;
  6009                           
  6010                           	psect	text19
  6011   00339E                     __ptext19:
  6012                           	callstack 0
  6013   00339E                     _Timer0_init:
  6014                           	callstack 29
  6015   00339E                     
  6016                           ;timers.c: 10:     T0CON1bits.T0CS=0b010;
  6017   00339E  50D6               	movf	214,w,c	;volatile
  6018   0033A0  0B1F               	andlw	-225
  6019   0033A2  0940               	iorlw	64
  6020   0033A4  6ED6               	movwf	214,c	;volatile
  6021   0033A6                     
  6022                           ;timers.c: 11:     T0CON1bits.T0ASYNC=1;
  6023   0033A6  88D6               	bsf	214,4,c	;volatile
  6024                           
  6025                           ;timers.c: 13:     T0CON1bits.T0CKPS=0b1000;
  6026   0033A8  50D6               	movf	214,w,c	;volatile
  6027   0033AA  0BF0               	andlw	-16
  6028   0033AC  0908               	iorlw	8
  6029   0033AE  6ED6               	movwf	214,c	;volatile
  6030   0033B0                     
  6031                           ;timers.c: 15:     T0CON0bits.T016BIT=1;
  6032   0033B0  88D5               	bsf	213,4,c	;volatile
  6033                           
  6034                           ;timers.c: 18:     TMR0H = 0b00001011;
  6035   0033B2  0E0B               	movlw	11
  6036   0033B4  6ED4               	movwf	212,c	;volatile
  6037                           
  6038                           ;timers.c: 19:     TMR0L = 0b11011100;
  6039   0033B6  0EDC               	movlw	220
  6040   0033B8  6ED3               	movwf	211,c	;volatile
  6041   0033BA                     
  6042                           ;timers.c: 35:     T0CON0bits.T0EN=1;
  6043   0033BA  8ED5               	bsf	213,7,c	;volatile
  6044   0033BC  0012               	return		;funcret
  6045   0033BE                     __end_of_Timer0_init:
  6046                           	callstack 0
  6047                           
  6048 ;; *************** function _LEDarray_init *****************
  6049 ;; Defined at:
  6050 ;;		line 8 in file "LEDarray.c"
  6051 ;; Parameters:    Size  Location     Type
  6052 ;;		None
  6053 ;; Auto vars:     Size  Location     Type
  6054 ;;		None
  6055 ;; Return value:  Size  Location     Type
  6056 ;;                  1    wreg      void 
  6057 ;; Registers used:
  6058 ;;		None
  6059 ;; Tracked objects:
  6060 ;;		On entry : 0/0
  6061 ;;		On exit  : 0/0
  6062 ;;		Unchanged: 0/0
  6063 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6064 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6065 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6066 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6067 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6068 ;;Total ram usage:        0 bytes
  6069 ;; Hardware stack levels used: 1
  6070 ;; Hardware stack levels required when called: 1
  6071 ;; This function calls:
  6072 ;;		Nothing
  6073 ;; This function is called by:
  6074 ;;		_main
  6075 ;; This function uses a non-reentrant model
  6076 ;;
  6077                           
  6078                           	psect	text20
  6079   003354                     __ptext20:
  6080                           	callstack 0
  6081   003354                     _LEDarray_init:
  6082                           	callstack 29
  6083   003354                     
  6084                           ;LEDarray.c: 16:     TRISGbits.TRISG0 = 0;
  6085   003354  9087               	bcf	135,0,c	;volatile
  6086                           
  6087                           ;LEDarray.c: 17:     LATGbits.LATG0 = 0;
  6088   003356  907F               	bcf	127,0,c	;volatile
  6089                           
  6090                           ;LEDarray.c: 19:     TRISGbits.TRISG1 = 0;
  6091   003358  9287               	bcf	135,1,c	;volatile
  6092                           
  6093                           ;LEDarray.c: 20:     LATGbits.LATG1 = 0;
  6094   00335A  927F               	bcf	127,1,c	;volatile
  6095                           
  6096                           ;LEDarray.c: 22:     TRISAbits.TRISA2 = 0;
  6097   00335C  9481               	bcf	129,2,c	;volatile
  6098                           
  6099                           ;LEDarray.c: 23:     LATAbits.LATA2 = 0;
  6100   00335E  9479               	bcf	121,2,c	;volatile
  6101                           
  6102                           ;LEDarray.c: 25:     TRISFbits.TRISF6 = 0;
  6103   003360  9C86               	bcf	134,6,c	;volatile
  6104                           
  6105                           ;LEDarray.c: 26:     LATFbits.LATF6 = 0;
  6106   003362  9C7E               	bcf	126,6,c	;volatile
  6107                           
  6108                           ;LEDarray.c: 28:     TRISAbits.TRISA4 = 0;
  6109   003364  9881               	bcf	129,4,c	;volatile
  6110                           
  6111                           ;LEDarray.c: 29:     LATAbits.LATA4 = 0;
  6112   003366  9879               	bcf	121,4,c	;volatile
  6113                           
  6114                           ;LEDarray.c: 31:     TRISAbits.TRISA5 = 0;
  6115   003368  9A81               	bcf	129,5,c	;volatile
  6116                           
  6117                           ;LEDarray.c: 32:     LATAbits.LATA5 = 0;
  6118   00336A  9A79               	bcf	121,5,c	;volatile
  6119                           
  6120                           ;LEDarray.c: 34:     TRISFbits.TRISF0 = 0;
  6121   00336C  9086               	bcf	134,0,c	;volatile
  6122                           
  6123                           ;LEDarray.c: 35:     LATFbits.LATF0 = 0;
  6124   00336E  907E               	bcf	126,0,c	;volatile
  6125                           
  6126                           ;LEDarray.c: 37:     TRISBbits.TRISB0 = 0;
  6127   003370  9082               	bcf	130,0,c	;volatile
  6128                           
  6129                           ;LEDarray.c: 38:     LATBbits.LATB0 = 0;
  6130   003372  907A               	bcf	122,0,c	;volatile
  6131                           
  6132                           ;LEDarray.c: 40:     TRISBbits.TRISB1 = 0;
  6133   003374  9282               	bcf	130,1,c	;volatile
  6134                           
  6135                           ;LEDarray.c: 41:     LATBbits.LATB1 = 0;
  6136   003376  927A               	bcf	122,1,c	;volatile
  6137   003378  0012               	return		;funcret
  6138   00337A                     __end_of_LEDarray_init:
  6139                           	callstack 0
  6140                           
  6141 ;; *************** function _LEDarray_disp_bin *****************
  6142 ;; Defined at:
  6143 ;;		line 49 in file "LEDarray.c"
  6144 ;; Parameters:    Size  Location     Type
  6145 ;;  number          2    0[COMRAM] unsigned int 
  6146 ;; Auto vars:     Size  Location     Type
  6147 ;;		None
  6148 ;; Return value:  Size  Location     Type
  6149 ;;                  1    wreg      void 
  6150 ;; Registers used:
  6151 ;;		None
  6152 ;; Tracked objects:
  6153 ;;		On entry : 0/0
  6154 ;;		On exit  : 0/0
  6155 ;;		Unchanged: 0/0
  6156 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6157 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6158 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6159 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6160 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6161 ;;Total ram usage:        2 bytes
  6162 ;; Hardware stack levels used: 1
  6163 ;; Hardware stack levels required when called: 1
  6164 ;; This function calls:
  6165 ;;		Nothing
  6166 ;; This function is called by:
  6167 ;;		_main
  6168 ;; This function uses a non-reentrant model
  6169 ;;
  6170                           
  6171                           	psect	text21
  6172   002B4C                     __ptext21:
  6173                           	callstack 0
  6174   002B4C                     _LEDarray_disp_bin:
  6175                           	callstack 29
  6176   002B4C                     
  6177                           ;LEDarray.c: 49: void LEDarray_disp_bin(unsigned int number);LEDarray.c: 50: {;LEDarray.
      +                          c: 53:     if (number & 0b000000001){ LATGbits.LATG0 = 1 ; }
  6178   002B4C  A001               	btfss	LEDarray_disp_bin@number^0,0,c
  6179   002B4E  EFAB  F015         	goto	u2961
  6180   002B52  EFAD  F015         	goto	u2960
  6181   002B56                     u2961:
  6182   002B56  EFB0  F015         	goto	l108
  6183   002B5A                     u2960:
  6184   002B5A  807F               	bsf	127,0,c	;volatile
  6185   002B5C  EFB1  F015         	goto	l109
  6186   002B60                     l108:
  6187   002B60  907F               	bcf	127,0,c	;volatile
  6188   002B62                     l109:
  6189                           
  6190                           ;LEDarray.c: 56:     if (number & 0b000000010){ LATGbits.LATG1 = 1 ; }
  6191   002B62  A201               	btfss	LEDarray_disp_bin@number^0,1,c
  6192   002B64  EFB6  F015         	goto	u2971
  6193   002B68  EFB8  F015         	goto	u2970
  6194   002B6C                     u2971:
  6195   002B6C  EFBB  F015         	goto	l110
  6196   002B70                     u2970:
  6197   002B70  827F               	bsf	127,1,c	;volatile
  6198   002B72  EFBC  F015         	goto	l111
  6199   002B76                     l110:
  6200   002B76  927F               	bcf	127,1,c	;volatile
  6201   002B78                     l111:
  6202                           
  6203                           ;LEDarray.c: 59:     if (number & 0b000000100){ LATAbits.LATA2 = 1 ; }
  6204   002B78  A401               	btfss	LEDarray_disp_bin@number^0,2,c
  6205   002B7A  EFC1  F015         	goto	u2981
  6206   002B7E  EFC3  F015         	goto	u2980
  6207   002B82                     u2981:
  6208   002B82  EFC6  F015         	goto	l112
  6209   002B86                     u2980:
  6210   002B86  8479               	bsf	121,2,c	;volatile
  6211   002B88  EFC7  F015         	goto	l113
  6212   002B8C                     l112:
  6213   002B8C  9479               	bcf	121,2,c	;volatile
  6214   002B8E                     l113:
  6215                           
  6216                           ;LEDarray.c: 62:     if (number & 0b000001000){ LATFbits.LATF6 = 1 ; }
  6217   002B8E  A601               	btfss	LEDarray_disp_bin@number^0,3,c
  6218   002B90  EFCC  F015         	goto	u2991
  6219   002B94  EFCE  F015         	goto	u2990
  6220   002B98                     u2991:
  6221   002B98  EFD1  F015         	goto	l114
  6222   002B9C                     u2990:
  6223   002B9C  8C7E               	bsf	126,6,c	;volatile
  6224   002B9E  EFD2  F015         	goto	l115
  6225   002BA2                     l114:
  6226   002BA2  9C7E               	bcf	126,6,c	;volatile
  6227   002BA4                     l115:
  6228                           
  6229                           ;LEDarray.c: 65:     if (number & 0b000010000){ LATAbits.LATA4 = 1 ; }
  6230   002BA4  A801               	btfss	LEDarray_disp_bin@number^0,4,c
  6231   002BA6  EFD7  F015         	goto	u3001
  6232   002BAA  EFD9  F015         	goto	u3000
  6233   002BAE                     u3001:
  6234   002BAE  EFDC  F015         	goto	l116
  6235   002BB2                     u3000:
  6236   002BB2  8879               	bsf	121,4,c	;volatile
  6237   002BB4  EFDD  F015         	goto	l117
  6238   002BB8                     l116:
  6239   002BB8  9879               	bcf	121,4,c	;volatile
  6240   002BBA                     l117:
  6241                           
  6242                           ;LEDarray.c: 68:     if (number & 0b000100000){ LATAbits.LATA5 = 1 ; }
  6243   002BBA  AA01               	btfss	LEDarray_disp_bin@number^0,5,c
  6244   002BBC  EFE2  F015         	goto	u3011
  6245   002BC0  EFE4  F015         	goto	u3010
  6246   002BC4                     u3011:
  6247   002BC4  EFE7  F015         	goto	l118
  6248   002BC8                     u3010:
  6249   002BC8  8A79               	bsf	121,5,c	;volatile
  6250   002BCA  EFE8  F015         	goto	l119
  6251   002BCE                     l118:
  6252   002BCE  9A79               	bcf	121,5,c	;volatile
  6253   002BD0                     l119:
  6254                           
  6255                           ;LEDarray.c: 71:     if (number & 0b001000000){ LATFbits.LATF0 = 1 ; }
  6256   002BD0  AC01               	btfss	LEDarray_disp_bin@number^0,6,c
  6257   002BD2  EFED  F015         	goto	u3021
  6258   002BD6  EFEF  F015         	goto	u3020
  6259   002BDA                     u3021:
  6260   002BDA  EFF2  F015         	goto	l120
  6261   002BDE                     u3020:
  6262   002BDE  807E               	bsf	126,0,c	;volatile
  6263   002BE0  EFF3  F015         	goto	l121
  6264   002BE4                     l120:
  6265   002BE4  907E               	bcf	126,0,c	;volatile
  6266   002BE6                     l121:
  6267                           
  6268                           ;LEDarray.c: 74:     if (number & 0b010000000){ LATBbits.LATB0 = 1 ; }
  6269   002BE6  AE01               	btfss	LEDarray_disp_bin@number^0,7,c
  6270   002BE8  EFF8  F015         	goto	u3031
  6271   002BEC  EFFA  F015         	goto	u3030
  6272   002BF0                     u3031:
  6273   002BF0  EFFD  F015         	goto	l122
  6274   002BF4                     u3030:
  6275   002BF4  807A               	bsf	122,0,c	;volatile
  6276   002BF6  EFFE  F015         	goto	l123
  6277   002BFA                     l122:
  6278   002BFA  907A               	bcf	122,0,c	;volatile
  6279   002BFC                     l123:
  6280                           
  6281                           ;LEDarray.c: 77:     if (number & 0b100000000){ LATBbits.LATB1 = 1 ; }
  6282   002BFC  A002               	btfss	(LEDarray_disp_bin@number+1)^0,0,c
  6283   002BFE  EF03  F016         	goto	u3041
  6284   002C02  EF05  F016         	goto	u3040
  6285   002C06                     u3041:
  6286   002C06  EF08  F016         	goto	l124
  6287   002C0A                     u3040:
  6288   002C0A  827A               	bsf	122,1,c	;volatile
  6289   002C0C  EF09  F016         	goto	l126
  6290   002C10                     l124:
  6291   002C10  927A               	bcf	122,1,c	;volatile
  6292   002C12                     l126:
  6293   002C12  0012               	return		;funcret
  6294   002C14                     __end_of_LEDarray_disp_bin:
  6295                           	callstack 0
  6296                           
  6297 ;; *************** function _LCD_setline *****************
  6298 ;; Defined at:
  6299 ;;		line 120 in file "LCD.c"
  6300 ;; Parameters:    Size  Location     Type
  6301 ;;  line            1    wreg     unsigned char 
  6302 ;; Auto vars:     Size  Location     Type
  6303 ;;  line            1    3[COMRAM] unsigned char 
  6304 ;; Return value:  Size  Location     Type
  6305 ;;                  1    wreg      void 
  6306 ;; Registers used:
  6307 ;;		wreg, status,2, status,0, cstack
  6308 ;; Tracked objects:
  6309 ;;		On entry : 0/0
  6310 ;;		On exit  : 0/0
  6311 ;;		Unchanged: 0/0
  6312 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6313 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6314 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6315 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6316 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6317 ;;Total ram usage:        1 bytes
  6318 ;; Hardware stack levels used: 1
  6319 ;; Hardware stack levels required when called: 4
  6320 ;; This function calls:
  6321 ;;		_LCD_sendbyte
  6322 ;; This function is called by:
  6323 ;;		_main
  6324 ;; This function uses a non-reentrant model
  6325 ;;
  6326                           
  6327                           	psect	text22
  6328   00325C                     __ptext22:
  6329                           	callstack 0
  6330   00325C                     _LCD_setline:
  6331                           	callstack 26
  6332                           
  6333                           ;incstack = 0
  6334                           ;LCD_setline@line stored from wreg
  6335   00325C  6E04               	movwf	LCD_setline@line^0,c
  6336   00325E                     
  6337                           ;LCD.c: 120: void LCD_setline (char line);LCD.c: 121: {;LCD.c: 124:     if (line == 2){
  6338   00325E  0E02               	movlw	2
  6339   003260  1804               	xorwf	LCD_setline@line^0,w,c
  6340   003262  A4D8               	btfss	status,2,c
  6341   003264  EF36  F019         	goto	u3051
  6342   003268  EF38  F019         	goto	u3050
  6343   00326C                     u3051:
  6344   00326C  EF3D  F019         	goto	l3118
  6345   003270                     u3050:
  6346   003270                     
  6347                           ;LCD.c: 125:         LCD_sendbyte(0xC0,0);
  6348   003270  0E00               	movlw	0
  6349   003272  6E02               	movwf	LCD_sendbyte@type^0,c
  6350   003274  0EC0               	movlw	192
  6351   003276  ECBD  F019         	call	_LCD_sendbyte
  6352   00327A                     l3118:
  6353                           
  6354                           ;LCD.c: 128:     if (line==1){
  6355   00327A  0404               	decf	LCD_setline@line^0,w,c
  6356   00327C  A4D8               	btfss	status,2,c
  6357   00327E  EF43  F019         	goto	u3061
  6358   003282  EF45  F019         	goto	u3060
  6359   003286                     u3061:
  6360   003286  EF4A  F019         	goto	l333
  6361   00328A                     u3060:
  6362   00328A                     
  6363                           ;LCD.c: 129:         LCD_sendbyte(0x80,0);
  6364   00328A  0E00               	movlw	0
  6365   00328C  6E02               	movwf	LCD_sendbyte@type^0,c
  6366   00328E  0E80               	movlw	128
  6367   003290  ECBD  F019         	call	_LCD_sendbyte
  6368   003294                     l333:
  6369   003294  0012               	return		;funcret
  6370   003296                     __end_of_LCD_setline:
  6371                           	callstack 0
  6372                           
  6373 ;; *************** function _LCD_sendstring *****************
  6374 ;; Defined at:
  6375 ;;		line 136 in file "LCD.c"
  6376 ;; Parameters:    Size  Location     Type
  6377 ;;  string          2    3[COMRAM] PTR unsigned char 
  6378 ;;		 -> main@buffer(18), 
  6379 ;; Auto vars:     Size  Location     Type
  6380 ;;		None
  6381 ;; Return value:  Size  Location     Type
  6382 ;;                  1    wreg      void 
  6383 ;; Registers used:
  6384 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6385 ;; Tracked objects:
  6386 ;;		On entry : 0/0
  6387 ;;		On exit  : 0/0
  6388 ;;		Unchanged: 0/0
  6389 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6390 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6391 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6392 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6393 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6394 ;;Total ram usage:        2 bytes
  6395 ;; Hardware stack levels used: 1
  6396 ;; Hardware stack levels required when called: 4
  6397 ;; This function calls:
  6398 ;;		_LCD_sendbyte
  6399 ;; This function is called by:
  6400 ;;		_main
  6401 ;;		_ADC2String
  6402 ;; This function uses a non-reentrant model
  6403 ;;
  6404                           
  6405                           	psect	text23
  6406   0032CA                     __ptext23:
  6407                           	callstack 0
  6408   0032CA                     _LCD_sendstring:
  6409                           	callstack 26
  6410   0032CA                     
  6411                           ;LCD.c: 136: void LCD_sendstring(char *string);LCD.c: 137: {;LCD.c: 139:     while(*stri
      +                          ng != 0){
  6412   0032CA  EF72  F019         	goto	l3140
  6413   0032CE                     l3136:
  6414                           
  6415                           ;LCD.c: 140:   LCD_sendbyte(*string++,1);
  6416   0032CE  0E01               	movlw	1
  6417   0032D0  6E02               	movwf	LCD_sendbyte@type^0,c
  6418   0032D2  C004  FFD9         	movff	LCD_sendstring@string,fsr2l
  6419   0032D6  C005  FFDA         	movff	LCD_sendstring@string+1,fsr2h
  6420   0032DA  50DF               	movf	indf2,w,c
  6421   0032DC  ECBD  F019         	call	_LCD_sendbyte
  6422   0032E0  4A04               	infsnz	LCD_sendstring@string^0,f,c
  6423   0032E2  2A05               	incf	(LCD_sendstring@string+1)^0,f,c
  6424   0032E4                     l3140:
  6425                           
  6426                           ;LCD.c: 139:     while(*string != 0){
  6427   0032E4  C004  FFD9         	movff	LCD_sendstring@string,fsr2l
  6428   0032E8  C005  FFDA         	movff	LCD_sendstring@string+1,fsr2h
  6429   0032EC  50DF               	movf	indf2,w,c
  6430   0032EE  A4D8               	btfss	status,2,c
  6431   0032F0  EF7C  F019         	goto	u3071
  6432   0032F4  EF7E  F019         	goto	u3070
  6433   0032F8                     u3071:
  6434   0032F8  EF67  F019         	goto	l3136
  6435   0032FC                     u3070:
  6436   0032FC  0012               	return		;funcret
  6437   0032FE                     __end_of_LCD_sendstring:
  6438                           	callstack 0
  6439                           
  6440 ;; *************** function _LCD_Init *****************
  6441 ;; Defined at:
  6442 ;;		line 57 in file "LCD.c"
  6443 ;; Parameters:    Size  Location     Type
  6444 ;;		None
  6445 ;; Auto vars:     Size  Location     Type
  6446 ;;		None
  6447 ;; Return value:  Size  Location     Type
  6448 ;;                  1    wreg      void 
  6449 ;; Registers used:
  6450 ;;		wreg, status,2, status,0, cstack
  6451 ;; Tracked objects:
  6452 ;;		On entry : 0/0
  6453 ;;		On exit  : 0/0
  6454 ;;		Unchanged: 0/0
  6455 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6456 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6457 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6458 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6459 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6460 ;;Total ram usage:        2 bytes
  6461 ;; Hardware stack levels used: 1
  6462 ;; Hardware stack levels required when called: 4
  6463 ;; This function calls:
  6464 ;;		_LCD_sendbyte
  6465 ;;		_LCD_sendnibble
  6466 ;; This function is called by:
  6467 ;;		_main
  6468 ;; This function uses a non-reentrant model
  6469 ;;
  6470                           
  6471                           	psect	text24
  6472   002926                     __ptext24:
  6473                           	callstack 0
  6474   002926                     _LCD_Init:
  6475                           	callstack 26
  6476   002926                     
  6477                           ;LCD.c: 69:     TRISBbits.TRISB3 = 0;
  6478   002926  9682               	bcf	130,3,c	;volatile
  6479                           
  6480                           ;LCD.c: 71:     LATBbits.LATB3 = 0;
  6481   002928  967A               	bcf	122,3,c	;volatile
  6482                           
  6483                           ;LCD.c: 73:     TRISBbits.TRISB2 = 0;
  6484   00292A  9482               	bcf	130,2,c	;volatile
  6485                           
  6486                           ;LCD.c: 75:     LATBbits.LATB2 = 0;
  6487   00292C  947A               	bcf	122,2,c	;volatile
  6488                           
  6489                           ;LCD.c: 77:     TRISEbits.TRISE3 = 0;
  6490   00292E  9685               	bcf	133,3,c	;volatile
  6491                           
  6492                           ;LCD.c: 79:     LATEbits.LATE3 = 0;
  6493   002930  967D               	bcf	125,3,c	;volatile
  6494                           
  6495                           ;LCD.c: 81:     TRISEbits.TRISE1 = 0;
  6496   002932  9285               	bcf	133,1,c	;volatile
  6497                           
  6498                           ;LCD.c: 83:     LATEbits.LATE1 = 0;
  6499   002934  927D               	bcf	125,1,c	;volatile
  6500                           
  6501                           ;LCD.c: 85:     TRISCbits.TRISC2 = 0;
  6502   002936  9483               	bcf	131,2,c	;volatile
  6503                           
  6504                           ;LCD.c: 86:     LATCbits.LATC2 = 0;
  6505   002938  947B               	bcf	123,2,c	;volatile
  6506                           
  6507                           ;LCD.c: 88:     TRISCbits.TRISC6 = 0;
  6508   00293A  9C83               	bcf	131,6,c	;volatile
  6509                           
  6510                           ;LCD.c: 89:     LATCbits.LATC6 = 0;
  6511   00293C  9C7B               	bcf	123,6,c	;volatile
  6512   00293E                     
  6513                           ;LCD.c: 91:     _delay((unsigned long)((150)*(64000000/4000.0)));
  6514   00293E  0E0D               	movlw	13
  6515   002940  6E05               	movwf	(??_LCD_Init+1)^0,c
  6516   002942  0E2D               	movlw	45
  6517   002944  6E04               	movwf	??_LCD_Init^0,c
  6518   002946  0ED8               	movlw	216
  6519   002948                     u4727:
  6520   002948  2EE8               	decfsz	wreg,f,c
  6521   00294A  D7FE               	bra	u4727
  6522   00294C  2E04               	decfsz	??_LCD_Init^0,f,c
  6523   00294E  D7FC               	bra	u4727
  6524   002950  2E05               	decfsz	(??_LCD_Init+1)^0,f,c
  6525   002952  D7FA               	bra	u4727
  6526   002954                     
  6527                           ;LCD.c: 92:     LCD_sendnibble(0b0011);
  6528   002954  0E03               	movlw	3
  6529   002956  EC7A  F018         	call	_LCD_sendnibble
  6530   00295A                     
  6531                           ;LCD.c: 93:     _delay((unsigned long)((5)*(64000000/4000.0)));
  6532   00295A  0E68               	movlw	104
  6533   00295C  6E04               	movwf	??_LCD_Init^0,c
  6534   00295E  0EE4               	movlw	228
  6535   002960                     u4737:
  6536   002960  2EE8               	decfsz	wreg,f,c
  6537   002962  D7FE               	bra	u4737
  6538   002964  2E04               	decfsz	??_LCD_Init^0,f,c
  6539   002966  D7FC               	bra	u4737
  6540   002968  D000               	nop2	
  6541                           
  6542                           ;LCD.c: 94:     LCD_sendnibble(0b0011);
  6543   00296A  0E03               	movlw	3
  6544   00296C  EC7A  F018         	call	_LCD_sendnibble
  6545   002970                     
  6546                           ;LCD.c: 95:     _delay((unsigned long)((150)*(64000000/4000000.0)));
  6547   002970  0E04               	movlw	4
  6548   002972  6E04               	movwf	??_LCD_Init^0,c
  6549   002974  0E1C               	movlw	28
  6550   002976                     u4747:
  6551   002976  2EE8               	decfsz	wreg,f,c
  6552   002978  D7FE               	bra	u4747
  6553   00297A  2E04               	decfsz	??_LCD_Init^0,f,c
  6554   00297C  D7FC               	bra	u4747
  6555   00297E  D000               	nop2	
  6556   002980                     
  6557                           ;LCD.c: 96:     LCD_sendnibble(0b0011);
  6558   002980  0E03               	movlw	3
  6559   002982  EC7A  F018         	call	_LCD_sendnibble
  6560                           
  6561                           ;LCD.c: 97:     _delay((unsigned long)((150)*(64000000/4000000.0)));
  6562   002986  0E04               	movlw	4
  6563   002988  6E04               	movwf	??_LCD_Init^0,c
  6564   00298A  0E1C               	movlw	28
  6565   00298C                     u4757:
  6566   00298C  2EE8               	decfsz	wreg,f,c
  6567   00298E  D7FE               	bra	u4757
  6568   002990  2E04               	decfsz	??_LCD_Init^0,f,c
  6569   002992  D7FC               	bra	u4757
  6570   002994  D000               	nop2	
  6571   002996                     
  6572                           ;LCD.c: 98:     LCD_sendnibble(0b0010);
  6573   002996  0E02               	movlw	2
  6574   002998  EC7A  F018         	call	_LCD_sendnibble
  6575   00299C                     
  6576                           ;LCD.c: 99:     _delay((unsigned long)((150)*(64000000/4000000.0)));
  6577   00299C  0E04               	movlw	4
  6578   00299E  6E04               	movwf	??_LCD_Init^0,c
  6579   0029A0  0E1C               	movlw	28
  6580   0029A2                     u4767:
  6581   0029A2  2EE8               	decfsz	wreg,f,c
  6582   0029A4  D7FE               	bra	u4767
  6583   0029A6  2E04               	decfsz	??_LCD_Init^0,f,c
  6584   0029A8  D7FC               	bra	u4767
  6585   0029AA  D000               	nop2	
  6586   0029AC                     
  6587                           ;LCD.c: 100:     LCD_sendbyte(0b00101100,0);
  6588   0029AC  0E00               	movlw	0
  6589   0029AE  6E02               	movwf	LCD_sendbyte@type^0,c
  6590   0029B0  0E2C               	movlw	44
  6591   0029B2  ECBD  F019         	call	_LCD_sendbyte
  6592   0029B6                     
  6593                           ;LCD.c: 101:     _delay((unsigned long)((100)*(64000000/4000000.0)));
  6594   0029B6  0EE4               	movlw	228
  6595   0029B8                     u4777:
  6596   0029B8  D000               	nop2	
  6597   0029BA  D000               	nop2	
  6598   0029BC  2EE8               	decfsz	wreg,f,c
  6599   0029BE  D7FC               	bra	u4777
  6600   0029C0  D000               	nop2	
  6601   0029C2  D000               	nop2	
  6602   0029C4                     
  6603                           ;LCD.c: 102:     LCD_sendbyte(0b00001000,0);
  6604   0029C4  0E00               	movlw	0
  6605   0029C6  6E02               	movwf	LCD_sendbyte@type^0,c
  6606   0029C8  0E08               	movlw	8
  6607   0029CA  ECBD  F019         	call	_LCD_sendbyte
  6608   0029CE                     
  6609                           ;LCD.c: 103:     _delay((unsigned long)((100)*(64000000/4000.0)));
  6610   0029CE  0E09               	movlw	9
  6611   0029D0  6E05               	movwf	(??_LCD_Init+1)^0,c
  6612   0029D2  0E1E               	movlw	30
  6613   0029D4  6E04               	movwf	??_LCD_Init^0,c
  6614   0029D6  0EE4               	movlw	228
  6615   0029D8                     u4787:
  6616   0029D8  2EE8               	decfsz	wreg,f,c
  6617   0029DA  D7FE               	bra	u4787
  6618   0029DC  2E04               	decfsz	??_LCD_Init^0,f,c
  6619   0029DE  D7FC               	bra	u4787
  6620   0029E0  2E05               	decfsz	(??_LCD_Init+1)^0,f,c
  6621   0029E2  D7FA               	bra	u4787
  6622   0029E4  D000               	nop2	
  6623   0029E6                     
  6624                           ;LCD.c: 104:     LCD_sendbyte(0b00000001,0);
  6625   0029E6  0E00               	movlw	0
  6626   0029E8  6E02               	movwf	LCD_sendbyte@type^0,c
  6627   0029EA  0E01               	movlw	1
  6628   0029EC  ECBD  F019         	call	_LCD_sendbyte
  6629   0029F0                     
  6630                           ;LCD.c: 105:     _delay((unsigned long)((5)*(64000000/4000.0)));
  6631   0029F0  0E68               	movlw	104
  6632   0029F2  6E04               	movwf	??_LCD_Init^0,c
  6633   0029F4  0EE4               	movlw	228
  6634   0029F6                     u4797:
  6635   0029F6  2EE8               	decfsz	wreg,f,c
  6636   0029F8  D7FE               	bra	u4797
  6637   0029FA  2E04               	decfsz	??_LCD_Init^0,f,c
  6638   0029FC  D7FC               	bra	u4797
  6639   0029FE  D000               	nop2	
  6640   002A00                     
  6641                           ;LCD.c: 106:     LCD_sendbyte(0b00000110,0);
  6642   002A00  0E00               	movlw	0
  6643   002A02  6E02               	movwf	LCD_sendbyte@type^0,c
  6644   002A04  0E06               	movlw	6
  6645   002A06  ECBD  F019         	call	_LCD_sendbyte
  6646   002A0A                     
  6647                           ;LCD.c: 107:     _delay((unsigned long)((100)*(64000000/4000.0)));
  6648   002A0A  0E09               	movlw	9
  6649   002A0C  6E05               	movwf	(??_LCD_Init+1)^0,c
  6650   002A0E  0E1E               	movlw	30
  6651   002A10  6E04               	movwf	??_LCD_Init^0,c
  6652   002A12  0EE4               	movlw	228
  6653   002A14                     u4807:
  6654   002A14  2EE8               	decfsz	wreg,f,c
  6655   002A16  D7FE               	bra	u4807
  6656   002A18  2E04               	decfsz	??_LCD_Init^0,f,c
  6657   002A1A  D7FC               	bra	u4807
  6658   002A1C  2E05               	decfsz	(??_LCD_Init+1)^0,f,c
  6659   002A1E  D7FA               	bra	u4807
  6660   002A20  D000               	nop2	
  6661   002A22                     
  6662                           ;LCD.c: 108:     LCD_sendbyte(0b00001100,0);
  6663   002A22  0E00               	movlw	0
  6664   002A24  6E02               	movwf	LCD_sendbyte@type^0,c
  6665   002A26  0E0C               	movlw	12
  6666   002A28  ECBD  F019         	call	_LCD_sendbyte
  6667   002A2C                     
  6668                           ;LCD.c: 109:     _delay((unsigned long)((100)*(64000000/4000.0)));
  6669   002A2C  0E09               	movlw	9
  6670   002A2E  6E05               	movwf	(??_LCD_Init+1)^0,c
  6671   002A30  0E1E               	movlw	30
  6672   002A32  6E04               	movwf	??_LCD_Init^0,c
  6673   002A34  0EE4               	movlw	228
  6674   002A36                     u4817:
  6675   002A36  2EE8               	decfsz	wreg,f,c
  6676   002A38  D7FE               	bra	u4817
  6677   002A3A  2E04               	decfsz	??_LCD_Init^0,f,c
  6678   002A3C  D7FC               	bra	u4817
  6679   002A3E  2E05               	decfsz	(??_LCD_Init+1)^0,f,c
  6680   002A40  D7FA               	bra	u4817
  6681   002A42  D000               	nop2	
  6682   002A44  0012               	return		;funcret
  6683   002A46                     __end_of_LCD_Init:
  6684                           	callstack 0
  6685                           
  6686 ;; *************** function _LCD_sendbyte *****************
  6687 ;; Defined at:
  6688 ;;		line 40 in file "LCD.c"
  6689 ;; Parameters:    Size  Location     Type
  6690 ;;  Byte            1    wreg     unsigned char 
  6691 ;;  type            1    1[COMRAM] unsigned char 
  6692 ;; Auto vars:     Size  Location     Type
  6693 ;;  Byte            1    2[COMRAM] unsigned char 
  6694 ;; Return value:  Size  Location     Type
  6695 ;;                  1    wreg      void 
  6696 ;; Registers used:
  6697 ;;		wreg, status,2, status,0, cstack
  6698 ;; Tracked objects:
  6699 ;;		On entry : 0/0
  6700 ;;		On exit  : 0/0
  6701 ;;		Unchanged: 0/0
  6702 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6703 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6704 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6705 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6706 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6707 ;;Total ram usage:        2 bytes
  6708 ;; Hardware stack levels used: 1
  6709 ;; Hardware stack levels required when called: 3
  6710 ;; This function calls:
  6711 ;;		_LCD_sendnibble
  6712 ;; This function is called by:
  6713 ;;		_LCD_Init
  6714 ;;		_LCD_setline
  6715 ;;		_LCD_sendstring
  6716 ;;		_LCD_scroll
  6717 ;; This function uses a non-reentrant model
  6718 ;;
  6719                           
  6720                           	psect	text25
  6721   00337A                     __ptext25:
  6722                           	callstack 0
  6723   00337A                     _LCD_sendbyte:
  6724                           	callstack 26
  6725                           
  6726                           ;incstack = 0
  6727                           ;LCD_sendbyte@Byte stored from wreg
  6728   00337A  6E03               	movwf	LCD_sendbyte@Byte^0,c
  6729   00337C                     
  6730                           ;LCD.c: 40: void LCD_sendbyte(unsigned char Byte, char type);LCD.c: 41: {;LCD.c: 42:    
      +                           LATCbits.LATC6 = type;
  6731   00337C  B002               	btfsc	LCD_sendbyte@type^0,0,c
  6732   00337E  D002               	bra	u2655
  6733   003380  9C7B               	bcf	123,6,c	;volatile
  6734   003382  D001               	bra	u2656
  6735   003384                     u2655:
  6736   003384  8C7B               	bsf	123,6,c	;volatile
  6737   003386                     u2656:
  6738   003386                     
  6739                           ;LCD.c: 44:     LCD_sendnibble(Byte>>4);
  6740   003386  3803               	swapf	LCD_sendbyte@Byte^0,w,c
  6741   003388  0B0F               	andlw	15
  6742   00338A  EC7A  F018         	call	_LCD_sendnibble
  6743   00338E                     
  6744                           ;LCD.c: 45:     LCD_sendnibble(Byte);
  6745   00338E  5003               	movf	LCD_sendbyte@Byte^0,w,c
  6746   003390  EC7A  F018         	call	_LCD_sendnibble
  6747   003394                     
  6748                           ;LCD.c: 51:     _delay((unsigned long)((50)*(64000000/4000000.0)));
  6749   003394  0EA0               	movlw	160
  6750   003396                     u4827:
  6751   003396  D000               	nop2	
  6752   003398  2EE8               	decfsz	wreg,f,c
  6753   00339A  D7FD               	bra	u4827
  6754   00339C  0012               	return		;funcret
  6755   00339E                     __end_of_LCD_sendbyte:
  6756                           	callstack 0
  6757                           
  6758 ;; *************** function _LCD_sendnibble *****************
  6759 ;; Defined at:
  6760 ;;		line 22 in file "LCD.c"
  6761 ;; Parameters:    Size  Location     Type
  6762 ;;  number          1    wreg     unsigned char 
  6763 ;; Auto vars:     Size  Location     Type
  6764 ;;  number          1    0[COMRAM] unsigned char 
  6765 ;; Return value:  Size  Location     Type
  6766 ;;                  1    wreg      void 
  6767 ;; Registers used:
  6768 ;;		wreg, cstack
  6769 ;; Tracked objects:
  6770 ;;		On entry : 0/0
  6771 ;;		On exit  : 0/0
  6772 ;;		Unchanged: 0/0
  6773 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6774 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6775 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6776 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6777 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6778 ;;Total ram usage:        1 bytes
  6779 ;; Hardware stack levels used: 1
  6780 ;; Hardware stack levels required when called: 2
  6781 ;; This function calls:
  6782 ;;		_LCD_E_TOG
  6783 ;; This function is called by:
  6784 ;;		_LCD_sendbyte
  6785 ;;		_LCD_Init
  6786 ;; This function uses a non-reentrant model
  6787 ;;
  6788                           
  6789                           	psect	text26
  6790   0030F4                     __ptext26:
  6791                           	callstack 0
  6792   0030F4                     _LCD_sendnibble:
  6793                           	callstack 26
  6794                           
  6795                           ;incstack = 0
  6796                           ;LCD_sendnibble@number stored from wreg
  6797   0030F4  6E01               	movwf	LCD_sendnibble@number^0,c
  6798   0030F6                     
  6799                           ;LCD.c: 22: void LCD_sendnibble(unsigned char number);LCD.c: 23: {;LCD.c: 24:     if (nu
      +                          mber & 0b0001) {LATBbits.LATB3=1;} else {LATBbits.LATB3=0;}
  6800   0030F6  A001               	btfss	LCD_sendnibble@number^0,0,c
  6801   0030F8  EF80  F018         	goto	u2561
  6802   0030FC  EF82  F018         	goto	u2560
  6803   003100                     u2561:
  6804   003100  EF85  F018         	goto	l314
  6805   003104                     u2560:
  6806   003104  867A               	bsf	122,3,c	;volatile
  6807   003106  EF86  F018         	goto	l2828
  6808   00310A                     l314:
  6809   00310A  967A               	bcf	122,3,c	;volatile
  6810   00310C                     l2828:
  6811                           
  6812                           ;LCD.c: 25:     if (number & 0b0010) {LATBbits.LATB2=1;} else {LATBbits.LATB2=0;}
  6813   00310C  A201               	btfss	LCD_sendnibble@number^0,1,c
  6814   00310E  EF8B  F018         	goto	u2571
  6815   003112  EF8D  F018         	goto	u2570
  6816   003116                     u2571:
  6817   003116  EF90  F018         	goto	l316
  6818   00311A                     u2570:
  6819   00311A  847A               	bsf	122,2,c	;volatile
  6820   00311C  EF91  F018         	goto	l2832
  6821   003120                     l316:
  6822   003120  947A               	bcf	122,2,c	;volatile
  6823   003122                     l2832:
  6824                           
  6825                           ;LCD.c: 26:     if (number & 0b0100) {LATEbits.LATE3=1;} else {LATEbits.LATE3=0;}
  6826   003122  A401               	btfss	LCD_sendnibble@number^0,2,c
  6827   003124  EF96  F018         	goto	u2581
  6828   003128  EF98  F018         	goto	u2580
  6829   00312C                     u2581:
  6830   00312C  EF9B  F018         	goto	l318
  6831   003130                     u2580:
  6832   003130  867D               	bsf	125,3,c	;volatile
  6833   003132  EF9C  F018         	goto	l2836
  6834   003136                     l318:
  6835   003136  967D               	bcf	125,3,c	;volatile
  6836   003138                     l2836:
  6837                           
  6838                           ;LCD.c: 27:     if (number & 0b1000) {LATEbits.LATE1=1;} else {LATEbits.LATE1=0;}
  6839   003138  A601               	btfss	LCD_sendnibble@number^0,3,c
  6840   00313A  EFA1  F018         	goto	u2591
  6841   00313E  EFA3  F018         	goto	u2590
  6842   003142                     u2591:
  6843   003142  EFA6  F018         	goto	l320
  6844   003146                     u2590:
  6845   003146  827D               	bsf	125,1,c	;volatile
  6846   003148  EFA7  F018         	goto	l2840
  6847   00314C                     l320:
  6848   00314C  927D               	bcf	125,1,c	;volatile
  6849   00314E                     l2840:
  6850                           
  6851                           ;LCD.c: 31:     LCD_E_TOG();
  6852   00314E  ECF8  F019         	call	_LCD_E_TOG	;wreg free
  6853   003152                     
  6854                           ;LCD.c: 32:     _delay((unsigned long)((5)*(64000000/4000000.0)));
  6855   003152  0E1A               	movlw	26
  6856   003154                     u4837:
  6857   003154  2EE8               	decfsz	wreg,f,c
  6858   003156  D7FE               	bra	u4837
  6859   003158  D000               	nop2	
  6860   00315A  0012               	return		;funcret
  6861   00315C                     __end_of_LCD_sendnibble:
  6862                           	callstack 0
  6863                           
  6864 ;; *************** function _LCD_E_TOG *****************
  6865 ;; Defined at:
  6866 ;;		line 10 in file "LCD.c"
  6867 ;; Parameters:    Size  Location     Type
  6868 ;;		None
  6869 ;; Auto vars:     Size  Location     Type
  6870 ;;		None
  6871 ;; Return value:  Size  Location     Type
  6872 ;;                  1    wreg      void 
  6873 ;; Registers used:
  6874 ;;		wreg
  6875 ;; Tracked objects:
  6876 ;;		On entry : 0/0
  6877 ;;		On exit  : 0/0
  6878 ;;		Unchanged: 0/0
  6879 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6880 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6881 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6882 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6883 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6884 ;;Total ram usage:        0 bytes
  6885 ;; Hardware stack levels used: 1
  6886 ;; Hardware stack levels required when called: 1
  6887 ;; This function calls:
  6888 ;;		Nothing
  6889 ;; This function is called by:
  6890 ;;		_LCD_sendnibble
  6891 ;; This function uses a non-reentrant model
  6892 ;;
  6893                           
  6894                           	psect	text27
  6895   0033F0                     __ptext27:
  6896                           	callstack 0
  6897   0033F0                     _LCD_E_TOG:
  6898                           	callstack 26
  6899   0033F0                     
  6900                           ;LCD.c: 13:      LATCbits.LATC2 = 1;
  6901   0033F0  847B               	bsf	123,2,c	;volatile
  6902   0033F2                     
  6903                           ;LCD.c: 14:  _delay((unsigned long)((2)*(64000000/4000000.0)));
  6904   0033F2  0E0A               	movlw	10
  6905   0033F4                     u4847:
  6906   0033F4  2EE8               	decfsz	wreg,f,c
  6907   0033F6  D7FE               	bra	u4847
  6908   0033F8  D000               	nop2	
  6909   0033FA                     
  6910                           ;LCD.c: 15:      LATCbits.LATC2 = 0;
  6911   0033FA  947B               	bcf	123,2,c	;volatile
  6912   0033FC  0012               	return		;funcret
  6913   0033FE                     __end_of_LCD_E_TOG:
  6914                           	callstack 0
  6915                           
  6916 ;; *************** function _Interrupts_init *****************
  6917 ;; Defined at:
  6918 ;;		line 9 in file "interrupts.c"
  6919 ;; Parameters:    Size  Location     Type
  6920 ;;		None
  6921 ;; Auto vars:     Size  Location     Type
  6922 ;;		None
  6923 ;; Return value:  Size  Location     Type
  6924 ;;                  1    wreg      void 
  6925 ;; Registers used:
  6926 ;;		None
  6927 ;; Tracked objects:
  6928 ;;		On entry : 0/0
  6929 ;;		On exit  : 0/0
  6930 ;;		Unchanged: 0/0
  6931 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6932 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6933 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6934 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6935 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6936 ;;Total ram usage:        0 bytes
  6937 ;; Hardware stack levels used: 1
  6938 ;; Hardware stack levels required when called: 1
  6939 ;; This function calls:
  6940 ;;		Nothing
  6941 ;; This function is called by:
  6942 ;;		_main
  6943 ;; This function uses a non-reentrant model
  6944 ;;
  6945                           
  6946                           	psect	text28
  6947   0033FE                     __ptext28:
  6948                           	callstack 0
  6949   0033FE                     _Interrupts_init:
  6950                           	callstack 29
  6951   0033FE                     
  6952                           ;interrupts.c: 15:   INTCONbits.PEIE = 1;
  6953   0033FE  8CF2               	bsf	242,6,c	;volatile
  6954                           
  6955                           ;interrupts.c: 19:     PIE0bits.TMR0IE = 1;
  6956   003400  010E               	movlb	14	; () banked
  6957   003402  8B29               	bsf	41,5,b	;volatile
  6958                           
  6959                           ;interrupts.c: 20:     PIR0bits.TMR0IF = 0;
  6960   003404  9B33               	bcf	51,5,b	;volatile
  6961                           
  6962                           ;interrupts.c: 21:     IPR0bits.TMR0IP = 1;
  6963   003406  8B1F               	bsf	31,5,b	;volatile
  6964                           
  6965                           ;interrupts.c: 24:     INTCONbits.GIE=1;
  6966   003408  8EF2               	bsf	242,7,c	;volatile
  6967   00340A                     
  6968                           ; BSR set to: 14
  6969   00340A  0012               	return		;funcret
  6970   00340C                     __end_of_Interrupts_init:
  6971                           	callstack 0
  6972                           
  6973 ;; *************** function _ArrayAverage *****************
  6974 ;; Defined at:
  6975 ;;		line 24 in file "arrayfunction.c"
  6976 ;; Parameters:    Size  Location     Type
  6977 ;;  arrayTime       2    7[COMRAM] PTR int 
  6978 ;;		 -> main@SolarMidnight(32), 
  6979 ;;  size            2    9[COMRAM] int 
  6980 ;; Auto vars:     Size  Location     Type
  6981 ;;  i               2   18[COMRAM] int 
  6982 ;;  sum             2   16[COMRAM] unsigned int 
  6983 ;;  average         2   14[COMRAM] unsigned int 
  6984 ;; Return value:  Size  Location     Type
  6985 ;;                  2    7[COMRAM] int 
  6986 ;; Registers used:
  6987 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6988 ;; Tracked objects:
  6989 ;;		On entry : 0/0
  6990 ;;		On exit  : 0/0
  6991 ;;		Unchanged: 0/0
  6992 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6993 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6994 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6995 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6996 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6997 ;;Total ram usage:       13 bytes
  6998 ;; Hardware stack levels used: 1
  6999 ;; Hardware stack levels required when called: 2
  7000 ;; This function calls:
  7001 ;;		___lwdiv
  7002 ;; This function is called by:
  7003 ;;		_main
  7004 ;; This function uses a non-reentrant model
  7005 ;;
  7006                           
  7007                           	psect	text29
  7008   002EF0                     __ptext29:
  7009                           	callstack 0
  7010   002EF0                     _ArrayAverage:
  7011                           	callstack 28
  7012   002EF0                     
  7013                           ;arrayfunction.c: 25:     unsigned int sum = 0;
  7014   002EF0  0E00               	movlw	0
  7015   002EF2  6E12               	movwf	(ArrayAverage@sum+1)^0,c
  7016   002EF4  0E00               	movlw	0
  7017   002EF6  6E11               	movwf	ArrayAverage@sum^0,c
  7018                           
  7019                           ;arrayfunction.c: 26:     unsigned int average;;arrayfunction.c: 28:     for (int i = 0;
      +                           i <= size-1; i++) {
  7020   002EF8  0E00               	movlw	0
  7021   002EFA  6E14               	movwf	(ArrayAverage@i+1)^0,c
  7022   002EFC  0E00               	movlw	0
  7023   002EFE  6E13               	movwf	ArrayAverage@i^0,c
  7024   002F00  EF97  F017         	goto	l3170
  7025   002F04                     l3166:
  7026                           
  7027                           ;arrayfunction.c: 29:         sum = sum + arrayTime[i];
  7028   002F04  90D8               	bcf	status,0,c
  7029   002F06  3413               	rlcf	ArrayAverage@i^0,w,c
  7030   002F08  6ED9               	movwf	fsr2l,c
  7031   002F0A  3414               	rlcf	(ArrayAverage@i+1)^0,w,c
  7032   002F0C  6EDA               	movwf	fsr2h,c
  7033   002F0E  5008               	movf	ArrayAverage@arrayTime^0,w,c
  7034   002F10  26D9               	addwf	fsr2l,f,c
  7035   002F12  5009               	movf	(ArrayAverage@arrayTime+1)^0,w,c
  7036   002F14  22DA               	addwfc	fsr2h,f,c
  7037   002F16  CFDE F00C          	movff	postinc2,??_ArrayAverage
  7038   002F1A  CFDD F00D          	movff	postdec2,??_ArrayAverage+1
  7039   002F1E  5011               	movf	ArrayAverage@sum^0,w,c
  7040   002F20  240C               	addwf	??_ArrayAverage^0,w,c
  7041   002F22  6E11               	movwf	ArrayAverage@sum^0,c
  7042   002F24  5012               	movf	(ArrayAverage@sum+1)^0,w,c
  7043   002F26  200D               	addwfc	(??_ArrayAverage+1)^0,w,c
  7044   002F28  6E12               	movwf	(ArrayAverage@sum+1)^0,c
  7045   002F2A                     
  7046                           ;arrayfunction.c: 30:     }
  7047   002F2A  4A13               	infsnz	ArrayAverage@i^0,f,c
  7048   002F2C  2A14               	incf	(ArrayAverage@i+1)^0,f,c
  7049   002F2E                     l3170:
  7050   002F2E  0EFF               	movlw	255
  7051   002F30  240A               	addwf	ArrayAverage@size^0,w,c
  7052   002F32  6E0C               	movwf	??_ArrayAverage^0,c
  7053   002F34  0EFF               	movlw	255
  7054   002F36  200B               	addwfc	(ArrayAverage@size+1)^0,w,c
  7055   002F38  6E0D               	movwf	(??_ArrayAverage+1)^0,c
  7056   002F3A  5013               	movf	ArrayAverage@i^0,w,c
  7057   002F3C  5C0C               	subwf	??_ArrayAverage^0,w,c
  7058   002F3E  500D               	movf	(??_ArrayAverage+1)^0,w,c
  7059   002F40  0A80               	xorlw	128
  7060   002F42  6E0E               	movwf	(??_ArrayAverage+2)^0,c
  7061   002F44  5014               	movf	(ArrayAverage@i+1)^0,w,c
  7062   002F46  0A80               	xorlw	128
  7063   002F48  580E               	subwfb	(??_ArrayAverage+2)^0,w,c
  7064   002F4A  B0D8               	btfsc	status,0,c
  7065   002F4C  EFAA  F017         	goto	u3101
  7066   002F50  EFAC  F017         	goto	u3100
  7067   002F54                     u3101:
  7068   002F54  EF82  F017         	goto	l3166
  7069   002F58                     u3100:
  7070   002F58                     
  7071                           ;arrayfunction.c: 32:     average = sum/size;
  7072   002F58  C011  F001         	movff	ArrayAverage@sum,___lwdiv@dividend
  7073   002F5C  C012  F002         	movff	ArrayAverage@sum+1,___lwdiv@dividend+1
  7074   002F60  C00A  F003         	movff	ArrayAverage@size,___lwdiv@divisor
  7075   002F64  C00B  F004         	movff	ArrayAverage@size+1,___lwdiv@divisor+1
  7076   002F68  EC40  F018         	call	___lwdiv	;wreg free
  7077   002F6C  C001  F00F         	movff	?___lwdiv,ArrayAverage@average
  7078   002F70  C002  F010         	movff	?___lwdiv+1,ArrayAverage@average+1
  7079   002F74                     
  7080                           ;arrayfunction.c: 34:     return average;
  7081   002F74  C00F  F008         	movff	ArrayAverage@average,?_ArrayAverage
  7082   002F78  C010  F009         	movff	ArrayAverage@average+1,?_ArrayAverage+1
  7083   002F7C  0012               	return		;funcret
  7084   002F7E                     __end_of_ArrayAverage:
  7085                           	callstack 0
  7086                           
  7087 ;; *************** function ___lwdiv *****************
  7088 ;; Defined at:
  7089 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\lwdiv.c"
  7090 ;; Parameters:    Size  Location     Type
  7091 ;;  dividend        2    0[COMRAM] unsigned int 
  7092 ;;  divisor         2    2[COMRAM] unsigned int 
  7093 ;; Auto vars:     Size  Location     Type
  7094 ;;  quotient        2    4[COMRAM] unsigned int 
  7095 ;;  counter         1    6[COMRAM] unsigned char 
  7096 ;; Return value:  Size  Location     Type
  7097 ;;                  2    0[COMRAM] unsigned int 
  7098 ;; Registers used:
  7099 ;;		wreg, status,2, status,0
  7100 ;; Tracked objects:
  7101 ;;		On entry : 0/0
  7102 ;;		On exit  : 0/0
  7103 ;;		Unchanged: 0/0
  7104 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7105 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7106 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7107 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7108 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7109 ;;Total ram usage:        7 bytes
  7110 ;; Hardware stack levels used: 1
  7111 ;; Hardware stack levels required when called: 1
  7112 ;; This function calls:
  7113 ;;		Nothing
  7114 ;; This function is called by:
  7115 ;;		_ArrayAverage
  7116 ;;		_ADC2String
  7117 ;; This function uses a non-reentrant model
  7118 ;;
  7119                           
  7120                           	psect	text30
  7121   003080                     __ptext30:
  7122                           	callstack 0
  7123   003080                     ___lwdiv:
  7124                           	callstack 28
  7125   003080  0E00               	movlw	0
  7126   003082  6E06               	movwf	(___lwdiv@quotient+1)^0,c
  7127   003084  0E00               	movlw	0
  7128   003086  6E05               	movwf	___lwdiv@quotient^0,c
  7129   003088  5003               	movf	___lwdiv@divisor^0,w,c
  7130   00308A  1004               	iorwf	(___lwdiv@divisor+1)^0,w,c
  7131   00308C  B4D8               	btfsc	status,2,c
  7132   00308E  EF4B  F018         	goto	u2661
  7133   003092  EF4D  F018         	goto	u2660
  7134   003096                     u2661:
  7135   003096  EF75  F018         	goto	l839
  7136   00309A                     u2660:
  7137   00309A  0E01               	movlw	1
  7138   00309C  6E07               	movwf	___lwdiv@counter^0,c
  7139   00309E  EF55  F018         	goto	l2916
  7140   0030A2                     l2914:
  7141   0030A2  90D8               	bcf	status,0,c
  7142   0030A4  3603               	rlcf	___lwdiv@divisor^0,f,c
  7143   0030A6  3604               	rlcf	(___lwdiv@divisor+1)^0,f,c
  7144   0030A8  2A07               	incf	___lwdiv@counter^0,f,c
  7145   0030AA                     l2916:
  7146   0030AA  AE04               	btfss	(___lwdiv@divisor+1)^0,7,c
  7147   0030AC  EF5A  F018         	goto	u2671
  7148   0030B0  EF5C  F018         	goto	u2670
  7149   0030B4                     u2671:
  7150   0030B4  EF51  F018         	goto	l2914
  7151   0030B8                     u2670:
  7152   0030B8                     l2918:
  7153   0030B8  90D8               	bcf	status,0,c
  7154   0030BA  3605               	rlcf	___lwdiv@quotient^0,f,c
  7155   0030BC  3606               	rlcf	(___lwdiv@quotient+1)^0,f,c
  7156   0030BE  5003               	movf	___lwdiv@divisor^0,w,c
  7157   0030C0  5C01               	subwf	___lwdiv@dividend^0,w,c
  7158   0030C2  5004               	movf	(___lwdiv@divisor+1)^0,w,c
  7159   0030C4  5802               	subwfb	(___lwdiv@dividend+1)^0,w,c
  7160   0030C6  A0D8               	btfss	status,0,c
  7161   0030C8  EF68  F018         	goto	u2681
  7162   0030CC  EF6A  F018         	goto	u2680
  7163   0030D0                     u2681:
  7164   0030D0  EF6F  F018         	goto	l2926
  7165   0030D4                     u2680:
  7166   0030D4  5003               	movf	___lwdiv@divisor^0,w,c
  7167   0030D6  5E01               	subwf	___lwdiv@dividend^0,f,c
  7168   0030D8  5004               	movf	(___lwdiv@divisor+1)^0,w,c
  7169   0030DA  5A02               	subwfb	(___lwdiv@dividend+1)^0,f,c
  7170   0030DC  8005               	bsf	___lwdiv@quotient^0,0,c
  7171   0030DE                     l2926:
  7172   0030DE  90D8               	bcf	status,0,c
  7173   0030E0  3204               	rrcf	(___lwdiv@divisor+1)^0,f,c
  7174   0030E2  3203               	rrcf	___lwdiv@divisor^0,f,c
  7175   0030E4  2E07               	decfsz	___lwdiv@counter^0,f,c
  7176   0030E6  EF5C  F018         	goto	l2918
  7177   0030EA                     l839:
  7178   0030EA  C005  F001         	movff	___lwdiv@quotient,?___lwdiv
  7179   0030EE  C006  F002         	movff	___lwdiv@quotient+1,?___lwdiv+1
  7180   0030F2  0012               	return		;funcret
  7181   0030F4                     __end_of___lwdiv:
  7182                           	callstack 0
  7183                           
  7184 ;; *************** function _ArrayAppend *****************
  7185 ;; Defined at:
  7186 ;;		line 6 in file "arrayfunction.c"
  7187 ;; Parameters:    Size  Location     Type
  7188 ;;  arrayTime       2    0[COMRAM] PTR int 
  7189 ;;		 -> main@SolarMidnight(32), main@Dusk(32), main@Dawn(32), 
  7190 ;;  size            2    2[COMRAM] int 
  7191 ;;  Time            2    4[COMRAM] int 
  7192 ;; Auto vars:     Size  Location     Type
  7193 ;;  i               2    9[COMRAM] int 
  7194 ;; Return value:  Size  Location     Type
  7195 ;;                  2    0[COMRAM] int 
  7196 ;; Registers used:
  7197 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  7198 ;; Tracked objects:
  7199 ;;		On entry : 0/0
  7200 ;;		On exit  : 0/0
  7201 ;;		Unchanged: 0/0
  7202 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7203 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7204 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7205 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7206 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7207 ;;Total ram usage:       11 bytes
  7208 ;; Hardware stack levels used: 1
  7209 ;; Hardware stack levels required when called: 1
  7210 ;; This function calls:
  7211 ;;		Nothing
  7212 ;; This function is called by:
  7213 ;;		_main
  7214 ;; This function uses a non-reentrant model
  7215 ;;
  7216                           
  7217                           	psect	text31
  7218   003008                     __ptext31:
  7219                           	callstack 0
  7220   003008                     _ArrayAppend:
  7221                           	callstack 29
  7222   003008                     
  7223                           ;arrayfunction.c: 8:         for (int i = 1; i <= size-1; i++) {
  7224   003008  0E00               	movlw	0
  7225   00300A  6E0B               	movwf	(ArrayAppend@i+1)^0,c
  7226   00300C  0E01               	movlw	1
  7227   00300E  6E0A               	movwf	ArrayAppend@i^0,c
  7228   003010  EF2A  F018         	goto	l3162
  7229   003014                     l3152:
  7230                           
  7231                           ;arrayfunction.c: 10:             if (i = 6) {
  7232   003014  0E00               	movlw	0
  7233   003016  6E0B               	movwf	(ArrayAppend@i+1)^0,c
  7234   003018  0E06               	movlw	6
  7235   00301A  6E0A               	movwf	ArrayAppend@i^0,c
  7236   00301C                     
  7237                           ;arrayfunction.c: 11:                 arrayTime[i-1] = arrayTime[i];
  7238   00301C  EE20 F00C          	lfsr	2,12
  7239   003020  5001               	movf	ArrayAppend@arrayTime^0,w,c
  7240   003022  26D9               	addwf	fsr2l,f,c
  7241   003024  5002               	movf	(ArrayAppend@arrayTime+1)^0,w,c
  7242   003026  22DA               	addwfc	fsr2h,f,c
  7243   003028  EE10 F00A          	lfsr	1,10
  7244   00302C  5001               	movf	ArrayAppend@arrayTime^0,w,c
  7245   00302E  26E1               	addwf	fsr1l,f,c
  7246   003030  5002               	movf	(ArrayAppend@arrayTime+1)^0,w,c
  7247   003032  22E2               	addwfc	fsr1h,f,c
  7248   003034  CFDE FFE6          	movff	postinc2,postinc1
  7249   003038  CFDD FFE5          	movff	postdec2,postdec1
  7250   00303C                     
  7251                           ;arrayfunction.c: 12:                 arrayTime[i] = Time;
  7252   00303C  EE20 F00C          	lfsr	2,12
  7253   003040  5001               	movf	ArrayAppend@arrayTime^0,w,c
  7254   003042  26D9               	addwf	fsr2l,f,c
  7255   003044  5002               	movf	(ArrayAppend@arrayTime+1)^0,w,c
  7256   003046  22DA               	addwfc	fsr2h,f,c
  7257   003048  C005  FFDE         	movff	ArrayAppend@Time,postinc2
  7258   00304C  C006  FFDD         	movff	ArrayAppend@Time+1,postdec2
  7259   003050                     
  7260                           ;arrayfunction.c: 18:         }
  7261   003050  4A0A               	infsnz	ArrayAppend@i^0,f,c
  7262   003052  2A0B               	incf	(ArrayAppend@i+1)^0,f,c
  7263   003054                     l3162:
  7264   003054  0EFF               	movlw	255
  7265   003056  2403               	addwf	ArrayAppend@size^0,w,c
  7266   003058  6E07               	movwf	??_ArrayAppend^0,c
  7267   00305A  0EFF               	movlw	255
  7268   00305C  2004               	addwfc	(ArrayAppend@size+1)^0,w,c
  7269   00305E  6E08               	movwf	(??_ArrayAppend+1)^0,c
  7270   003060  500A               	movf	ArrayAppend@i^0,w,c
  7271   003062  5C07               	subwf	??_ArrayAppend^0,w,c
  7272   003064  5008               	movf	(??_ArrayAppend+1)^0,w,c
  7273   003066  0A80               	xorlw	128
  7274   003068  6E09               	movwf	(??_ArrayAppend+2)^0,c
  7275   00306A  500B               	movf	(ArrayAppend@i+1)^0,w,c
  7276   00306C  0A80               	xorlw	128
  7277   00306E  5809               	subwfb	(??_ArrayAppend+2)^0,w,c
  7278   003070  B0D8               	btfsc	status,0,c
  7279   003072  EF3D  F018         	goto	u3091
  7280   003076  EF3F  F018         	goto	u3090
  7281   00307A                     u3091:
  7282   00307A  EF0A  F018         	goto	l3152
  7283   00307E                     u3090:
  7284   00307E  0012               	return		;funcret
  7285   003080                     __end_of_ArrayAppend:
  7286                           	callstack 0
  7287                           
  7288 ;; *************** function _ADC_init *****************
  7289 ;; Defined at:
  7290 ;;		line 9 in file "ADC.c"
  7291 ;; Parameters:    Size  Location     Type
  7292 ;;		None
  7293 ;; Auto vars:     Size  Location     Type
  7294 ;;		None
  7295 ;; Return value:  Size  Location     Type
  7296 ;;                  1    wreg      void 
  7297 ;; Registers used:
  7298 ;;		wreg, status,2
  7299 ;; Tracked objects:
  7300 ;;		On entry : 0/0
  7301 ;;		On exit  : 0/0
  7302 ;;		Unchanged: 0/0
  7303 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7304 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7305 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7306 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7307 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7308 ;;Total ram usage:        0 bytes
  7309 ;; Hardware stack levels used: 1
  7310 ;; Hardware stack levels required when called: 1
  7311 ;; This function calls:
  7312 ;;		Nothing
  7313 ;; This function is called by:
  7314 ;;		_main
  7315 ;; This function uses a non-reentrant model
  7316 ;;
  7317                           
  7318                           	psect	text32
  7319   0033BE                     __ptext32:
  7320                           	callstack 0
  7321   0033BE                     _ADC_init:
  7322                           	callstack 29
  7323   0033BE                     
  7324                           ;ADC.c: 11:     TRISAbits.TRISA3=1;
  7325   0033BE  8681               	bsf	129,3,c	;volatile
  7326                           
  7327                           ;ADC.c: 12:     ANSELAbits.ANSELA3=1;
  7328   0033C0  010E               	movlb	14	; () banked
  7329   0033C2  8792               	bsf	146,3,b	;volatile
  7330                           
  7331                           ;ADC.c: 14:     ADREFbits.ADNREF = 0;
  7332   0033C4  010F               	movlb	15	; () banked
  7333   0033C6  9958               	bcf	88,4,b	;volatile
  7334   0033C8                     
  7335                           ; BSR set to: 15
  7336                           ;ADC.c: 15:     ADREFbits.ADPREF = 0b00;
  7337   0033C8  0EFC               	movlw	-4
  7338   0033CA  1758               	andwf	88,f,b	;volatile
  7339                           
  7340                           ;ADC.c: 16:     ADPCH=0b11;
  7341   0033CC  0E03               	movlw	3
  7342   0033CE  6F5F               	movwf	95,b	;volatile
  7343   0033D0                     
  7344                           ; BSR set to: 15
  7345                           ;ADC.c: 17:     ADCON0bits.ADFM = 0;
  7346   0033D0  9460               	bcf	96,2,c	;volatile
  7347   0033D2                     
  7348                           ; BSR set to: 15
  7349                           ;ADC.c: 18:     ADCON0bits.ADCS = 1;
  7350   0033D2  8860               	bsf	96,4,c	;volatile
  7351   0033D4                     
  7352                           ; BSR set to: 15
  7353                           ;ADC.c: 19:     ADCON0bits.ADON = 1;
  7354   0033D4  8E60               	bsf	96,7,c	;volatile
  7355   0033D6                     
  7356                           ; BSR set to: 15
  7357   0033D6  0012               	return		;funcret
  7358   0033D8                     __end_of_ADC_init:
  7359                           	callstack 0
  7360                           
  7361 ;; *************** function _ADC_getval *****************
  7362 ;; Defined at:
  7363 ;;		line 22 in file "ADC.c"
  7364 ;; Parameters:    Size  Location     Type
  7365 ;;		None
  7366 ;; Auto vars:     Size  Location     Type
  7367 ;;  tmpval          2    2[COMRAM] unsigned int 
  7368 ;; Return value:  Size  Location     Type
  7369 ;;                  2    0[COMRAM] unsigned int 
  7370 ;; Registers used:
  7371 ;;		wreg, status,2, status,0
  7372 ;; Tracked objects:
  7373 ;;		On entry : 0/0
  7374 ;;		On exit  : 0/0
  7375 ;;		Unchanged: 0/0
  7376 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7377 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7378 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7379 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7380 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7381 ;;Total ram usage:        4 bytes
  7382 ;; Hardware stack levels used: 1
  7383 ;; Hardware stack levels required when called: 1
  7384 ;; This function calls:
  7385 ;;		Nothing
  7386 ;; This function is called by:
  7387 ;;		_main
  7388 ;; This function uses a non-reentrant model
  7389 ;;
  7390                           
  7391                           	psect	text33
  7392   0032FE                     __ptext33:
  7393                           	callstack 0
  7394   0032FE                     _ADC_getval:
  7395                           	callstack 29
  7396   0032FE                     
  7397                           ;ADC.c: 24:     unsigned int tmpval;;ADC.c: 26:     ADCON0bits.GO = 1;
  7398   0032FE  8060               	bsf	96,0,c	;volatile
  7399   003300                     l83:
  7400   003300  B060               	btfsc	96,0,c	;volatile
  7401   003302  EF85  F019         	goto	u3081
  7402   003306  EF87  F019         	goto	u3080
  7403   00330A                     u3081:
  7404   00330A  EF80  F019         	goto	l83
  7405   00330E                     u3080:
  7406   00330E                     
  7407                           ;ADC.c: 30:     tmpval = ADRESH;
  7408   00330E  CF64 F003          	movff	3940,ADC_getval@tmpval	;volatile
  7409   003312  6A04               	clrf	(ADC_getval@tmpval+1)^0,c
  7410   003314                     
  7411                           ;ADC.c: 34:     tmpval = 255 - tmpval;
  7412   003314  5003               	movf	ADC_getval@tmpval^0,w,c
  7413   003316  08FF               	sublw	255
  7414   003318  6E03               	movwf	ADC_getval@tmpval^0,c
  7415   00331A  5004               	movf	(ADC_getval@tmpval+1)^0,w,c
  7416   00331C  A0D8               	btfss	status,0,c
  7417   00331E  2AE8               	incf	wreg,f,c
  7418   003320  0800               	sublw	0
  7419   003322  6E04               	movwf	(ADC_getval@tmpval+1)^0,c
  7420   003324                     
  7421                           ;ADC.c: 36:     return tmpval;
  7422   003324  C003  F001         	movff	ADC_getval@tmpval,?_ADC_getval
  7423   003328  C004  F002         	movff	ADC_getval@tmpval+1,?_ADC_getval+1
  7424   00332C  0012               	return		;funcret
  7425   00332E                     __end_of_ADC_getval:
  7426                           	callstack 0
  7427                           
  7428 ;; *************** function _HighISR *****************
  7429 ;; Defined at:
  7430 ;;		line 31 in file "interrupts.c"
  7431 ;; Parameters:    Size  Location     Type
  7432 ;;		None
  7433 ;; Auto vars:     Size  Location     Type
  7434 ;;		None
  7435 ;; Return value:  Size  Location     Type
  7436 ;;                  1    wreg      void 
  7437 ;; Registers used:
  7438 ;;		wreg, status,2, status,0
  7439 ;; Tracked objects:
  7440 ;;		On entry : 0/0
  7441 ;;		On exit  : 0/0
  7442 ;;		Unchanged: 0/0
  7443 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7444 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7445 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7446 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7447 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7448 ;;Total ram usage:        0 bytes
  7449 ;; Hardware stack levels used: 1
  7450 ;; This function calls:
  7451 ;;		Nothing
  7452 ;; This function is called by:
  7453 ;;		Interrupt level 2
  7454 ;; This function uses a non-reentrant model
  7455 ;;
  7456                           
  7457                           	psect	intcode
  7458   000008                     __pintcode:
  7459                           	callstack 0
  7460   000008                     _HighISR:
  7461                           	callstack 22
  7462                           
  7463                           ;incstack = 0
  7464   000008  825E               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  7465   00000A                     
  7466                           ;interrupts.c: 35:     if(PIR0bits.TMR0IF){
  7467   00000A  010E               	movlb	14	; () banked
  7468   00000C  AB33               	btfss	51,5,b	;volatile
  7469   00000E  EF0B  F000         	goto	i2u433_41
  7470   000012  EF0D  F000         	goto	i2u433_40
  7471   000016                     i2u433_41:
  7472   000016  EF16  F000         	goto	i2l241
  7473   00001A                     i2u433_40:
  7474   00001A                     
  7475                           ; BSR set to: 14
  7476                           ;interrupts.c: 37:         TMR0H = 0b00001011;
  7477   00001A  0E0B               	movlw	11
  7478   00001C  6ED4               	movwf	212,c	;volatile
  7479                           
  7480                           ;interrupts.c: 38:         TMR0L = 0b11011100;
  7481   00001E  0EDC               	movlw	220
  7482   000020  6ED3               	movwf	211,c	;volatile
  7483   000022                     
  7484                           ; BSR set to: 14
  7485                           ;interrupts.c: 39:         GLOBALsecs++;
  7486   000022  0101               	movlb	1	; () banked
  7487   000024  4BE1               	infsnz	_GLOBALsecs& (0+255),f,b
  7488   000026  2BE2               	incf	(_GLOBALsecs+1)& (0+255),f,b
  7489   000028                     
  7490                           ; BSR set to: 1
  7491                           ;interrupts.c: 40:         PIR0bits.TMR0IF=0;
  7492   000028  010E               	movlb	14	; () banked
  7493   00002A  9B33               	bcf	51,5,b	;volatile
  7494   00002C                     i2l241:
  7495                           
  7496                           ; BSR set to: 14
  7497   00002C  925E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  7498   00002E  0011               	retfie		f
  7499   000030                     __end_of_HighISR:
  7500                           	callstack 0
  7501                           
  7502                           	psect	rparam
  7503   000000                     
  7504                           	psect	temp
  7505   00005E                     btemp:
  7506                           	callstack 0
  7507   00005E                     	ds	1
  7508   000000                     int$flags	set	btemp
  7509   000000                     wtemp8	set	btemp+1
  7510   000000                     ttemp5	set	btemp+1
  7511   000000                     ttemp6	set	btemp+4
  7512   000000                     ttemp7	set	btemp+8
  7513                           
  7514                           	psect	config
  7515                           
  7516                           ;Config register CONFIG1L @ 0x300000
  7517                           ;	External Oscillator mode Selection bits
  7518                           ;	FEXTOSC = HS, HS (crystal oscillator) above 8 MHz; PFM set to high power
  7519                           ;	Power-up default value for COSC bits
  7520                           ;	RSTOSC = EXTOSC_4PLL, EXTOSC with 4x PLL, with EXTOSC operating per FEXTOSC bits
  7521   300000                     	org	3145728
  7522   300000  AA                 	db	170
  7523                           
  7524                           ;Config register CONFIG1H @ 0x300001
  7525                           ;	unspecified, using default values
  7526                           ;	Clock Out Enable bit
  7527                           ;	CLKOUTEN = 0x1, unprogrammed default
  7528                           ;	Clock Switch Enable bit
  7529                           ;	CSWEN = 0x1, unprogrammed default
  7530                           ;	Fail-Safe Clock Monitor Enable bit
  7531                           ;	FCMEN = 0x1, unprogrammed default
  7532   300001                     	org	3145729
  7533   300001  FF                 	db	255
  7534                           
  7535                           ;Config register CONFIG3L @ 0x300004
  7536                           ;	WDT Period Select bits
  7537                           ;	WDTCPS = 0x1F, unprogrammed default
  7538                           ;	WDT operating mode
  7539                           ;	WDTE = OFF, WDT Disabled
  7540   300004                     	org	3145732
  7541   300004  9F                 	db	159
  7542                           
  7543                           ;Config register CONFIG3H @ 0x300005
  7544                           ;	unspecified, using default values
  7545                           ;	WDT Window Select bits
  7546                           ;	WDTCWS = 0x7, unprogrammed default
  7547                           ;	WDT input clock selector
  7548                           ;	WDTCCS = 0x7, unprogrammed default
  7549   300005                     	org	3145733
  7550   300005  FF                 	db	255
  7551                           tosu	equ	0xFFF
  7552                           tosh	equ	0xFFE
  7553                           tosl	equ	0xFFD
  7554                           stkptr	equ	0xFFC
  7555                           pclatu	equ	0xFFB
  7556                           pclath	equ	0xFFA
  7557                           pcl	equ	0xFF9
  7558                           tblptru	equ	0xFF8
  7559                           tblptrh	equ	0xFF7
  7560                           tblptrl	equ	0xFF6
  7561                           tablat	equ	0xFF5
  7562                           prodh	equ	0xFF4
  7563                           prodl	equ	0xFF3
  7564                           indf0	equ	0xFEF
  7565                           postinc0	equ	0xFEE
  7566                           postdec0	equ	0xFED
  7567                           preinc0	equ	0xFEC
  7568                           plusw0	equ	0xFEB
  7569                           fsr0h	equ	0xFEA
  7570                           fsr0l	equ	0xFE9
  7571                           wreg	equ	0xFE8
  7572                           indf1	equ	0xFE7
  7573                           postinc1	equ	0xFE6
  7574                           postdec1	equ	0xFE5
  7575                           preinc1	equ	0xFE4
  7576                           plusw1	equ	0xFE3
  7577                           fsr1h	equ	0xFE2
  7578                           fsr1l	equ	0xFE1
  7579                           bsr	equ	0xFE0
  7580                           indf2	equ	0xFDF
  7581                           postinc2	equ	0xFDE
  7582                           postdec2	equ	0xFDD
  7583                           preinc2	equ	0xFDC
  7584                           plusw2	equ	0xFDB
  7585                           fsr2h	equ	0xFDA
  7586                           fsr2l	equ	0xFD9
  7587                           status	equ	0xFD8

Data Sizes:
    Strings     67
    Constant    0
    Data        24
    BSS         39
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     88      93
    BANK0           160      0      56
    BANK1           256    225     227
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          234      0       0

Pointer List with Targets:

    ArrayAppend@arrayTime	PTR int  size(2) Largest target is 32
		 -> main@Dawn(BANK1[32]), main@Dusk(BANK1[32]), main@SolarMidnight(BANK1[32]), 

    ArrayAverage@arrayTime	PTR int  size(2) Largest target is 32
		 -> main@SolarMidnight(BANK1[32]), 

    dtoa@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    f$.$buffer	PTR unsigned char  size(2) Largest target is 0

    f$.$source	PTR const unsigned char  size(2) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    fputc@fp$.$buffer	PTR unsigned char  size(2) Largest target is 0

    fputc@fp$.$source	PTR const unsigned char  size(2) Largest target is 0

    fputs@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    fputs@s	PTR const unsigned char  size(1) Largest target is 32
		 -> dbuf(BANK0[32]), 

    LCD_sendstring@string	PTR unsigned char  size(2) Largest target is 18
		 -> main@buffer(BANK1[18]), 

    pad@buf	PTR unsigned char  size(1) Largest target is 32
		 -> dbuf(BANK0[32]), 

    pad@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    read_prec_or_width@ap	PTR PTR void [1] size(1) Largest target is 1
		 -> sprintf@ap(COMRAM[1]), 

    read_prec_or_width@fmt	PTR PTR const unsigned char  size(1) Largest target is 1
		 -> vfprintf@cfmt(COMRAM[1]), 

    S1851$buffer	PTR unsigned char  size(2) Largest target is 0

    S1851$source	PTR const unsigned char  size(2) Largest target is 0

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    sprintf@fmt	PTR const unsigned char  size(1) Largest target is 26
		 -> STR_1(CODE[26]), STR_2(CODE[20]), STR_3(CODE[21]), 

    sprintf@s	PTR unsigned char  size(2) Largest target is 18
		 -> main@buffer(BANK1[18]), 

    UpdateClock@days	PTR int  size(2) Largest target is 16
		 -> main@clock(BANK1[16]), 

    UpdateClock@DoW	PTR int  size(2) Largest target is 16
		 -> main@clock(BANK1[16]), 

    UpdateClock@DSTstate	PTR int  size(2) Largest target is 16
		 -> main@clock(BANK1[16]), 

    UpdateClock@hours	PTR int  size(2) Largest target is 16
		 -> main@clock(BANK1[16]), 

    UpdateClock@minutes	PTR int  size(2) Largest target is 16
		 -> main@clock(BANK1[16]), 

    UpdateClock@months	PTR int  size(2) Largest target is 16
		 -> main@clock(BANK1[16]), 

    UpdateClock@seconds	PTR int  size(2) Largest target is 2
		 -> GLOBALsecs(BANK1[2]), 

    UpdateClock@years	PTR int  size(2) Largest target is 16
		 -> main@clock(BANK1[16]), 

    vfpfcnvrt@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(COMRAM[1]), 

    vfpfcnvrt@cp	PTR unsigned char  size(1) Largest target is 26
		 -> STR_1(CODE[26]), STR_2(CODE[20]), STR_3(CODE[21]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(1) Largest target is 1
		 -> vfprintf@cfmt(COMRAM[1]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    vfprintf@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(COMRAM[1]), 

    vfprintf@cfmt	PTR unsigned char  size(1) Largest target is 26
		 -> STR_1(CODE[26]), STR_2(CODE[20]), STR_3(CODE[21]), 

    vfprintf@fmt	PTR const unsigned char  size(1) Largest target is 26
		 -> STR_1(CODE[26]), STR_2(CODE[20]), STR_3(CODE[21]), 

    vfprintf@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 


Critical Paths under _main in COMRAM

    _main->_sprintf
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_dtoa
    _read_prec_or_width->___wmul
    _dtoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _abs->___awmod
    ___fltol->___fladd
    ___flmul->___xxtofl
    ___fladd->___flmul
    _UpdateClock->___awmod
    _LCD_setline->_LCD_sendbyte
    _LCD_sendstring->_LCD_sendbyte
    _LCD_Init->_LCD_sendbyte
    _LCD_sendbyte->_LCD_sendnibble
    _ArrayAverage->___lwdiv

Critical Paths under _HighISR in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _HighISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _HighISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _HighISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _HighISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _HighISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _HighISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _HighISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _HighISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _HighISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _HighISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _HighISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _HighISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _HighISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _HighISR in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                               243   243      0   34670
                                             70 COMRAM    18    18      0
                                              0 BANK1    225   225      0
                         _ADC_getval
                           _ADC_init
                        _ArrayAppend
                       _ArrayAverage
                    _Interrupts_init
                           _LCD_Init
                     _LCD_sendstring
                        _LCD_setline
                  _LEDarray_disp_bin
                      _LEDarray_init
                        _Timer0_init
                        _UpdateClock
                            ___fladd
                            ___flmul
                            ___fltol
                             ___wmul
                           ___xxtofl
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             26    15     11   10718
                                             46 COMRAM    24    13     11
                           _vfprintf
 ---------------------------------------------------------------------------------
 (2) _vfprintf                                             4     1      3   10061
                                             42 COMRAM     4     1      3
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (3) _vfpfcnvrt                                           12     9      3    9702
                                             31 COMRAM    11     8      3
                               _dtoa
                              _fputc
                 _read_prec_or_width
 ---------------------------------------------------------------------------------
 (4) _read_prec_or_width                                   5     3      2    4291
                                              6 COMRAM     5     3      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4    3959
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) _dtoa                                                11     8      3    4079
                                             20 COMRAM    11     8      3
                            ___awdiv
                            ___awmod
                                _abs
                                _pad
 ---------------------------------------------------------------------------------
 (5) _pad                                                  7     3      4    2172
                                             13 COMRAM     7     3      4
                              _fputc
                              _fputs
 ---------------------------------------------------------------------------------
 (6) _fputs                                                5     3      2    1083
                                              8 COMRAM     5     3      2
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _fputc                                                8     5      3     682
                                              0 COMRAM     8     5      3
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (5) _abs                                                  4     2      2     142
                                              6 COMRAM     4     2      2
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (5) ___awdiv                                              8     4      4     452
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (1) ___xxtofl                                            14    10      4     398
                                              0 COMRAM    14    10      4
 ---------------------------------------------------------------------------------
 (1) ___fltol                                             10     6      4     305
                                             55 COMRAM    10     6      4
                            ___fladd (ARG)
                            ___flmul (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (1) ___flmul                                             25    17      8    1744
                                             14 COMRAM    25    17      8
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (1) ___fladd                                             16     8      8    2388
                                             39 COMRAM    16     8      8
                            ___flmul (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (1) _UpdateClock                                         48    30     18    3440
                                              6 COMRAM    48    30     18
                            ___awmod
 ---------------------------------------------------------------------------------
 (5) ___awmod                                              6     2      4     752
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _Timer0_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LEDarray_init                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LEDarray_disp_bin                                    2     0      2     274
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _LCD_setline                                          1     1      0     882
                                              3 COMRAM     1     1      0
                       _LCD_sendbyte
 ---------------------------------------------------------------------------------
 (1) _LCD_sendstring                                       2     0      2    1111
                                              3 COMRAM     2     0      2
                       _LCD_sendbyte
 ---------------------------------------------------------------------------------
 (1) _LCD_Init                                             2     2      0     926
                                              3 COMRAM     2     2      0
                       _LCD_sendbyte
                     _LCD_sendnibble
 ---------------------------------------------------------------------------------
 (2) _LCD_sendbyte                                         2     1      1     838
                                              1 COMRAM     2     1      1
                     _LCD_sendnibble
 ---------------------------------------------------------------------------------
 (3) _LCD_sendnibble                                       1     1      0      88
                                              0 COMRAM     1     1      0
                          _LCD_E_TOG
 ---------------------------------------------------------------------------------
 (4) _LCD_E_TOG                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Interrupts_init                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ArrayAverage                                        13     9      4     951
                                              7 COMRAM    13     9      4
                            ___lwdiv
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     618
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _ArrayAppend                                         11     5      6    1435
                                              0 COMRAM    11     5      6
 ---------------------------------------------------------------------------------
 (1) _ADC_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ADC_getval                                           4     2      2      46
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _HighISR                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_getval
   _ADC_init
   _ArrayAppend
   _ArrayAverage
     ___lwdiv
   _Interrupts_init
   _LCD_Init
     _LCD_sendbyte
       _LCD_sendnibble
         _LCD_E_TOG
     _LCD_sendnibble
   _LCD_sendstring
     _LCD_sendbyte
   _LCD_setline
     _LCD_sendbyte
   _LEDarray_disp_bin
   _LEDarray_init
   _Timer0_init
   _UpdateClock
     ___awmod
   ___fladd
     ___flmul (ARG)
       ___xxtofl (ARG)
     ___xxtofl (ARG)
   ___flmul
   ___fltol
     ___fladd (ARG)
     ___flmul (ARG)
     ___xxtofl (ARG)
   ___wmul
   ___xxtofl
   _sprintf
     _vfprintf
       _vfpfcnvrt
         _dtoa
           ___awdiv
           ___awmod
           _abs
             ___awmod (ARG)
           _pad
             _fputc
               _putch
             _fputs
               _fputc
         _fputc
         _read_prec_or_width
           ___wmul

 _HighISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             DE9      0       0      46        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     E1      E3       7       88.7%
BITBANK13           EA      0       0      30        0.0%
BANK13              EA      0       0      31        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0      38       5       35.0%
BITBIGSFRllhlhh     84      0       0      38        0.0%
BITBIGSFRlllhh      5E      0       0      41        0.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     58      5D       1       98.9%
BITBIGSFRhhll       4A      0       0      34        0.0%
BITBIGSFRllhll      33      0       0      40        0.0%
BITBIGSFRlllll      30      0       0      44        0.0%
BITBIGSFRhhlhh      1B      0       0      33        0.0%
BITBIGSFRllhhhh     14      0       0      35        0.0%
BITBIGSFRhhh         D      0       0      32        0.0%
BITBIGSFRllllh       9      0       0      43        0.0%
BITBIGSFRlllhl       9      0       0      42        0.0%
BITBIGSFRllhlhl      8      0       0      39        0.0%
BITBIGSFRllhhl       6      0       0      37        0.0%
BITBIGSFRllhhhl      3      0       0      36        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     178      45        0.0%
DATA                 0      0     178       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.45 build 20230818022343 
Symbol Table                                                                                   Fri Feb 09 02:58:18 2024

                        l45 1260                          l47 125A                          l80 33D6  
                        l83 3300                          l85 330E                          l86 332C  
              ___awdiv@sign 0006         ___wmul@multiplicand 0003           ??_Interrupts_init 0001  
                       l110 2B76                         l111 2B78                         l120 2BE4  
                       l112 2B8C                         l121 2BE6                         l113 2B8E  
                       l105 3378                         l122 2BFA                         l114 2BA2  
                       l123 2BFC                         l115 2BA4                         l124 2C10  
                       l116 2BB8                         l108 2B60                         l117 2BBA  
                       l109 2B62                         l126 2C12                         l118 2BCE  
                       l311 33FC                         l119 2BD0                         l320 314C  
                       l322 315A                         l314 310A                         l235 340A  
                       l316 3120                         l325 339C                         l333 3294  
                       l318 3136                         l254 33BC                         l328 2A44  
                       l339 32FC                         l292 2F7C                         l348 3352  
                       l286 307E                         l278 1B9C                         l645 2B4A  
                       l902 1F76                         l903 1F64                         l592 2E40  
                       l579 2CD6                         l846 30F2                         l839 30EA  
                       l962 2122                         l971 2390                         l876 1D8C  
                       l972 237E                         l893 1EA6                         l885 205C  
                       l877 1D7A                         l878 1D40                         l966 2486  
                       l969 2318                         l979 2448                         _abs 3296  
                       _pad 2F7E                ___awmod@sign 0006                         wreg 0FE8  
              ___flmul@aexp 0020                ___flmul@bexp 0021                ___flmul@sign 001B  
              ___flmul@temp 0026                ___flmul@prod 0022                ___fltol@exp1 0041  
                      l1010 2576                        l1003 24DE                        l1100 32B0  
                      l1006 263A                        l1103 32C8                        l1017 25D2  
                      l1026 321E                        l1115 2D90                        l1123 325A  
                      l1051 3006                        ?_abs 0007                        l1126 340C  
                      l1046 2FAE                        l1054 281C                        l1071 2EE6  
                      l1049 2FEC                        l1090 27BC                        l1067 2924  
                      l1075 2EEE                        l3100 2B86                        l3110 2BF4  
                      l3102 2B9C                        l3120 328A                        l3112 2C0A  
                      l3104 2BB2                        l3200 1C1C                        l1096 31E2  
                      l3114 325E                        l3106 2BC8                        l3210 1C44  
                      l3202 1C1E                        l3130 3210                        l3122 31E4  
                      l3140 32E4                        l3116 3270                        l3108 2BDE  
                      l4100 17D6                        l3300 1E14                        l3220 1C7E  
                      l3212 1C54                        l3204 1C24                        l3124 31F0  
                      l3142 32FE                        l3150 3008                        l3134 32CA  
                      l3118 327A                        l4110 1876                        l4102 17F0  
                      l3310 1E86                        l3302 1E1A                        l3230 1CAA  
                      l3222 1C90                        l3214 1C64                        l3206 1C32  
                      l3126 31F8                        l3144 3314                        l3160 3050  
                      l3152 3014                        l3136 32CE                        l4120 1902  
                      l4112 189E                        l4104 180C                        l3320 1EE0  
                      l3304 1E40                        l3312 1E96                        l3240 1CBE  
                      l3232 1CAE                        l3224 1C9E                        l3216 1C66  
                      l3208 1C34                        l3400 20CC                        l3128 3200  
                      l4200 0EB4                        l3146 3324                        l3154 301C  
                      l3162 3054                        l3170 2F2E                        l3138 32E0  
                      l4130 19AA                        l4122 191E                        l4114 18B0  
                      l4106 1834                        l3330 1F10                        l3322 1EEA  
                      l3314 1EBC                        l3306 1E74                        l3250 1CD2  
                      l3242 1CC2                        l3234 1CB2                        l3226 1CA2  
                      l3218 1C6E                        l3410 210C                        l3402 20DA  
                      l4210 0EDC                        l4202 0EBC                        l3156 303C  
                      l3172 2F58                        l3164 2EF0                        l2700 2D96  
                      l4140 1A3A                        l4132 19BC                        l4124 1946  
                      l4116 18D8                        l4108 1850                        l3340 1F38  
                      l3332 1F14                        l3324 1EF8                        l3316 1ECC  
                      l3308 1E76                        l3260 1D0C                        l3252 1CD6  
                      l3244 1CC6                        l3236 1CB6                        l3228 1CA6  
                      l3180 1BAA                        l3500 246A                        l3420 2156  
                      l3412 2112                        l3404 20DC                        l4300 1044  
                      l4220 0F04                        l4212 0EE4                        l4204 0EC4  
                      l3174 2F74                        l3166 2F04                        l3094 2B4C  
                      l2710 2DC6                        l2702 2DA4                        l4150 1AC2  
                      l4142 1A42                        l4134 19E8                        l4126 1962  
                      l4118 18E8                        l4070 1616                        l3350 1F92  
                      l3342 1F46                        l3334 1F24                        l3326 1EFA  
                      l3270 1D5E                        l3262 1D28                        l3254 1CDA  
                      l3246 1CCA                        l3238 1CBA                        l3190 1BEA  
                      l3182 1BB8                        l3502 246C                        l3430 21A6  
                      l3422 2162                        l3414 2132                        l3406 20EC  
                      l3510 2A46                        l2630 2CF8                        l4310 106C  
                      l4302 104C                        l4230 0F2C                        l4222 0F0C  
                      l4214 0EEC                        l4206 0ECC                        l3168 2F2A  
                      l3096 2B5A                        l2720 2E0C                        l2712 2DD8  
                      l2704 2DAC                        l4160 1B74                        l4152 1B04  
                      l4144 1A70                        l4128 197E                        l4136 19F4  
                      l4080 1696                        l4072 162E                        l3360 1FFC  
                      l3352 1FA0                        l3344 1F5C                        l3328 1F08  
                      l3336 1F26                        l3280 1DAA                        l3272 1D6C  
                      l3264 1D38                        l3248 1CCE                        l3256 1CDE  
                      l3192 1BEC                        l3184 1BBA                        l3504 2472  
                      l3440 21E8                        l3432 21B2                        l3424 216C  
                      l3416 2142                        l3408 20FC                        l3520 2A9C  
                      l3512 2A5C                        l2632 2D02                        l2640 3220  
                      l2800 28EC                        l4320 1094                        l4312 1074  
                      l4304 1054                        l4240 0F54                        l4232 0F34  
                      l4224 0F14                        l4216 0EF4                        l4208 0ED4  
                      l3098 2B70                        l2730 2E38                        l2722 2E14  
                      l2714 2DE0                        l2706 2DB0                        l4154 1B14  
                      l4146 1A8C                        l4138 1A1E                        l4090 1742  
                      l4082 16BE                        l4074 1656                        l4066 15F2  
                      l3370 2036                        l3362 201C                        l3354 1FDA  
                      l3290 1DEA                        l3338 1F34                        l3274 1D6E  
                      l3266 1D4E                        l3258 1CE2                        l3186 1BCA  
                      l3194 1BF4                        l3178 1B9E                        l3506 2476  
                      l3450 224A                        l3442 21F4                        l3434 21BE  
                      l3426 2182                        l3522 2AAC                        l2634 2D1E  
                      l2626 2CD8                        l2642 322C                        l2802 28FC  
                      l2650 334A                        l2810 2E42                        l4410 12C2  
                      l4402 1290                        l4330 10BC                        l4322 109C  
                      l4314 107C                        l4306 105C                        l4250 0F7C  
                      l4242 0F5C                        l4234 0F3C                        l4226 0F1C  
                      l4218 0EFC                        l4170 0E56                        l4162 0E46  
                      l2900 337C                        l2724 2E1A                        l2716 2DE8  
                      l2708 2DBE                        l4156 1B3C                        l4148 1ABA  
                      l4092 174E                        l4084 16E6                        l4076 1662  
                      l4068 1604                        l3372 203C                        l3364 2020  
                      l3348 1F86                        l3356 1FDC                        l3292 1DF6  
                      l3284 1DBE                        l3276 1D78                        l3268 1D5A  
                      l3196 1C04                        l3188 1BDA                        l3460 22E0  
                      l3452 2256                        l3444 2204                        l3436 21CC  
                      l3428 218E                        l3380 205E                        l3532 2AD6  
                      l3524 2AB0                        l3516 2A70                        l2660 2C2E  
                      l2636 2D50                        l2628 2CE8                        l2644 323A  
                      l2740 2FA6                        l2804 2902                        l2820 2EB4  
                      l2812 2E4A                        l4420 1352                        l4412 12D6  
                      l4404 12A6                        l4340 10E4                        l4332 10C4  
                      l4324 10A4                        l4316 1084                        l4308 1064  
                      l4260 0FA4                        l4252 0F84                        l4244 0F64  
                      l4236 0F44                        l4228 0F24                        l4180 0E62  
                      l4172 0E5A                        l4164 0E4A                        l2910 3088  
                      l2830 311A                        l2902 3386                        l2718 2DF6  
                      l2726 2E20                        l4158 1B64                        l4094 1776  
                      l4086 16F2                        l4078 168A                        l3374 204A  
                      l3366 202E                        l3358 1FEC                        l3294 1DFA  
                      l3286 1DCE                        l3278 1D9A                        l3198 1C0A  
                      l3470 2336                        l3462 22FE                        l3454 2272  
                      l3446 221E                        l3438 21D8                        l3390 209A  
                      l3382 206A                        l3550 2B3A                        l3542 2AFE  
                      l3534 2AE0                        l3526 2ABE                        l3518 2A9A  
                      l2670 2C54                        l2662 2C32                        l2654 2C14  
                      l2750 3296                        l2646 323E                        l2742 2FBA  
                      l2734 2F7E                        l2806 290E                        l2814 2E70  
                      l2822 2EBC                        l4430 13B2                        l4422 1368  
                      l4414 12DE                        l4406 12B6                        l4350 110E  
                      l4342 10EC                        l4334 10CC                        l4326 10AC  
                      l4318 108C                        l4270 0FCC                        l4262 0FAC  
                      l4254 0F8C                        l4246 0F6C                        l4238 0F4C  
                      l4190 0E8C                        l4182 0E6C                        l4174 0E5C  
                      l4166 0E4E                        l2920 30BE                        l2912 309A  
                      l2840 314E                        l2832 3122                        l2824 30F6  
                      l2904 338E                        l2728 2E30                        l4096 179E  
                      l4088 171A                        l3376 204C                        l3368 2034  
                      l3296 1E08                        l3288 1DDC                        l3480 23A0  
                      l3472 233A                        l3464 2308                        l3456 229C  
                      l3448 222E                        l3392 20AA                        l3384 2078  
                      l3544 2B0A                        l3536 2AEA                        l3560 24EE  
                      l2680 2C8A                        l2672 2C66                        l2664 2C40  
                      l2656 2C18                        l2752 32A4                        l2744 2FCA  
                      l2736 2F8C                        l2760 27BE                        l2648 332E  
                      l2816 2E78                        l4440 13DA                        l4432 13BA  
                      l4424 136C                        l4416 130C                        l4408 12BA  
                      l4360 11A4                        l4352 1116                        l4344 10EC  
                      l4336 10D4                        l4328 10B4                        l4280 0FF4  
                      l4272 0FD4                        l4264 0FB4                        l4256 0F94  
                      l4248 0F74                        l4192 0E94                        l4184 0E74  
                      l4176 0E5E                        l4168 0E52                        l2922 30D4  
                      l2914 30A2                        l2754 33F0                        l2842 3152  
                      l2834 3130                        l2826 3104                        l2906 3394  
                      l4098 17C6                        l3298 1E0A                        l3490 2402  
                      l3482 23AC                        l3474 2348                        l3466 2316  
                      l3458 22D2                        l3394 20B0                        l3386 207A  
                      l3546 2B1A                        l3570 252C                        l3562 2504  
                      l3554 248A                        l2682 2CA0                        l2674 2C6E  
                      l2690 2CB6                        l2666 2C48                        l2658 2C26  
                      l2746 2FCE                        l2738 2F98                        l2770 27F4  
                      l2762 27C2                        l2818 2E94                        l2850 2676  
                      l2930 31A2                        l4450 1560                        l4442 13E2  
                      l4434 13C2                        l4426 1384                        l4418 1346  
                      l4370 1206                        l4362 11B0                        l4354 1162  
                      l4346 10F4                        l4338 10DC                        l4290 101C  
                      l4282 0FFC                        l4274 0FDC                        l4266 0FBC  
                      l4258 0F9C                        l4194 0E9C                        l4186 0E7C  
                      l4178 0E60                        l2924 30DC                        l2916 30AA  
                      l2908 3080                        l2756 33F2                        l2836 3138  
                      l2828 310C                        l2940 3354                        l3492 2416  
                      l3484 23BA                        l3476 2376                        l3468 2328  
                      l3396 20C0                        l3388 208A                        l3548 2B2A  
                      l3580 25B4                        l3572 255E                        l3556 249A  
                      l2692 2CC6                        l2684 2CA8                        l2676 2C76  
                      l2668 2C4C                        l2748 2FFA                        l2780 282E  
                      l2772 2804                        l2764 27D6                        l2852 267A  
                      l2844 263C                        l2932 31AA                        l4460 15D6  
                      l4452 157C                        l4444 13EA                        l4436 13CA  
                      l4428 1390                        l4372 1218                        l4364 11B6  
                      l4356 116E                        l4348 10FC                        l4292 1024  
                      l4284 1004                        l4276 0FE4                        l4268 0FC4  
                      l4196 0EA4                        l4188 0E84                        l2926 30DE  
                      l2918 30B8                        l2950 33FE                        l2758 33FA  
                      l2838 3146                        l2942 339E                        l3494 2430  
                      l3486 23E4                        l3398 20C6                        l3590 260A  
                      l3582 25C2                        l3574 2560                        l3566 2518  
                      l3558 24A8                        l2694 2CCE                        l2686 2CAA  
                      l2678 2C84                        l2782 2834                        l2790 2888  
                      l2774 2810                        l2766 27DE                        l2870 2700  
                      l2862 2698                        l2854 2682                        l2846 2662  
                      l2934 31BA                        l4462 15E2                        l4446 13F6  
                      l4454 1582                        l4438 13D2                        l4390 1286  
                      l4374 122E                        l4366 11DE                        l4358 1174  
                      l4294 102C                        l4286 100C                        l4278 0FEC  
                      l4198 0EAC                        ?_pad 000E                        l2928 30E4  
                      l2960 2970                        l2952 2926                        l2944 33A6  
                      l3496 244C                        l3488 23E8                        l3592 261A  
                      l3584 25E0                        l3576 256C                        l3568 2520  
                      l2688 2CB0                        l2792 28A2                        l2784 2862  
                      l2776 2818                        l2768 27EE                        l2880 276C  
                      l2872 270A                        l2856 2684                        l2864 26CE  
                      l2848 266A                        l2936 31DA                        l4456 15AC  
                      l4448 14E4                        l4392 1288                        l4376 1244  
                      l4368 11EA                        l4296 1034                        l4288 1014  
                      l2970 29B6                        l2962 2980                        l2954 293E  
                      l2946 33B0                        l2698 2D92                        l3498 245C  
                      l3594 2628                        l3586 25E2                        l3578 25A8  
                      l2794 28B4                        l2786 2866                        l2778 2824  
                      l2882 2776                        l2874 2714                        l2866 26DE  
                      l2858 2690                        l2890 2796                        l4458 15C8  
                      l4378 1262                        l4298 103C                        l2980 2A00  
                      l2972 29C4                        l2964 2996                        l2956 2954  
                      l2948 33BA                        l3596 262A                        l3588 25E6  
                      l2796 28C4                        l2788 286C                        l2876 2734  
                      l2868 26F2                        l4484 26C0                        l4388 126A  
                      l2990 33C8                        l2982 2A0A                        l2974 29CE  
                      l2966 299C                        l2958 295A                        l2798 28DE  
                      l2886 278A                        l2878 2754                        l2992 33D0  
                      l2984 2A22                        l2976 29E6                        l2968 29AC  
                      l2994 33D2                        l2986 2A2C                        l2978 29F0  
                      l2996 33D4                        l2988 33BE                main@TestMode 0123  
                      STR_1 0E01                        STR_2 0E30                        STR_3 0E1B  
                      u3000 2BB2                        u3001 2BAE                        u3010 2BC8  
                      u3011 2BC4                        u3100 2F58                        u3020 2BDE  
                      u2300 2C84                        u2220 2CE8                        u3101 2F54  
                      u3021 2BDA                        u2301 2C80                        u2221 2CE4  
                      u3030 2BF4                        u3110 1BB8                        u2310 2CA0  
                      u2230 2CF8                        u3031 2BF0                        u3111 1BB4  
                      u2311 2C9C                        u2231 2CF4                        u3040 2C0A  
                      u3200 1D0C                        u3120 1BCA                        u2320 2CC6  
                      u2240 2D1E                        u2400 2FA6                        u3041 2C06  
                      u3201 1D08                        u3121 1BC6                        u2321 2CC2  
                      u2241 2D1A                        u2401 2FA2                        u3050 3270  
                      u2330 2DA4                        u3210 1D24                        u3130 1BDA  
                      u2250 2D50                        u2410 2FEC                        u3051 326C  
                      u2331 2DA0                        u3211 1D1E                        u3131 1BD6  
                      u2251 2D4C                        u2411 2FE8                        u3060 328A  
                      u2340 2DBE                        u3300 1E08                        u3220 1D26  
                      u3140 1C1C                        u2260 325A                        u2420 2FFA  
                      u2500 28C4                        u3061 3286                        u2341 2DBA  
                      u3301 1E04                        u3141 1C18                        u2261 3256  
                      u2421 2FF6                        u2501 28C0                        u3070 32FC  
                      u2350 2DD8                        u3310 1E40                        u3230 1D4E  
                      u3150 1C32                        u2270 2C26                        u2430 32A4  
                      u2510 28DE                        u3071 32F8                        u2351 2DD4  
                      u3311 1E3C                        u3231 1D4A                        u3151 1C2E  
                      u2271 2C22                        u2431 32A0                        u2511 28DA  
                      u3080 330E                        u2360 2DF6                        u3400 1F5C  
                      u3320 1E86                        u3240 1D6C                        u3160 1C44  
                      u2280 2C40                        u2520 28EC                        u2440 27D2  
                      u2600 2662                        u3081 330A                        u2361 2DF2  
                      u3401 1F58                        u3321 1E82                        u3241 1D68  
                      u3161 1C40                        u2281 2C3C                        u2521 28E8  
                      u2441 27CC                        u2601 265E                        u3090 307E  
                      u2370 2E0C                        u3410 1F72                        u3330 1EBC  
                      u3250 1D8C                        u3170 1C54                        u2290 2C66  
                      u2530 28FC                        u2450 27D4                        u2610 26DE  
                      u3091 307A                        u2371 2E08                        u3411 1F6E  
                      u3331 1EB8                        u3251 1D88                        u3171 1C50  
                      u2291 2C62                        u2531 28F8                        u2611 26DA  
                      u2380 2E30                        u3420 1F86                        u3340 1ECC  
                      u3260 1D9A                        u3180 1C90                        u3500 2078  
                      u2460 27EE                        u2540 2E70                        u2620 2700  
                      u2381 2E2C                        u3421 1F82                        u3341 1EC8  
                      u3261 1D96                        u3181 1C8C                        u3501 2074  
                      u2461 27EA                        u2541 2E6C                        u2621 26FC  
                      u3430 1FA0                        u3350 1EF8                        u3270 1DAA  
                      u3190 1C9E                        u3510 208A                        u2390 2F8C  
                      u2470 2804                        u2550 2EE6                        u2630 2734  
                      u3431 1F9C                        u3351 1EF4                        u3271 1DA6  
                      u3191 1C9A                        u3511 2086                        u2391 2F88  
                      u2471 2800                        u2551 2EE2                        u2631 2730  
                      u2560 3104                        u4400 17C6                        u3440 1FDA  
                      u3360 1F08                        u3280 1DDC                        u3600 2336  
                      u3520 209A                        u2480 28A2                        u2640 2754  
                      u2561 3100                        u4401 17C2                        u3441 1FD6  
                      u3361 1F04                        u3281 1DD8                        u3601 2332  
                      u3521 2096                        u2481 289E                        u2641 2750  
                      u2570 311A                        u4410 17F0                        u3450 1FEC  
                      u3370 1F24                        u3290 1DEA                        u3610 2348  
                      u3530 20DA                        u2490 28B4                        u2571 3116  
                      u4411 17EC                        u3451 1FE8                        u3371 1F20  
                      u3291 1DE6                        u3611 2344                        u3531 20D6  
                      u2491 28B0                        u2660 309A                        u2580 3130  
                      u4500 1962                        u4420 180C                        u3460 1FFC  
                      u3380 1F34                        u3620 2376                        u3540 20EC  
                      u3700 2A90                        u2661 3096                        u2581 312C  
                      u4501 195E                        u4421 1808                        u4341 15FC  
                      u3461 1FF8                        u3381 1F30                        u3621 2372  
                      u3541 20E8                        u2670 30B8                        u2590 3146  
                      u4510 197E                        u4430 1834                        u4350 1616  
                      u3470 201C                        u3390 1F46                        u3630 238C  
                      u3550 20FC                        u3710 2ABE                        u2671 30B4  
                      u2591 3142                        u2655 3384                        u4511 197A  
                      u4431 1830                        u4351 1612                        u3471 2018  
                      u3391 1F42                        u3631 2388                        u3551 20F8  
                      u3711 2ABA                        u2680 30D4                        u2656 3386  
                      u4520 19BC                        u4440 1850                        u4360 1656  
                      u3480 202E                        u3640 23A0                        u3560 2132  
                      u3720 2AD2                        u3800 25A4                        u4600 110E  
                      u2681 30D0                        u4521 19B8                        u4441 184C  
                      u4361 1652                        u3481 202A                        u3641 239C  
                      u3561 212E                        u3721 2ACE                        u3705 2A86  
                      u3801 25A0                        u4601 110A                        u4530 1A1E  
                      u4450 1876                        u4370 168A                        u3490 204A  
                      u3650 23BA                        u3570 2142                        u3730 2AFA  
                      u3810 25C2                        u2690 31DA                        u4610 1206  
                      u4531 1A1A                        u4451 1872                        u4371 1686  
                      u3491 2046                        u3651 23B6                        u3571 213E  
                      u3731 2AF6                        u3811 25BE                        u2691 31D6  
                      u4611 1202                        u4540 1A3A                        u4460 18B0  
                      u4380 16E6                        u3660 2402                        u3580 22BC  
                      u3740 2B1A                        u3820 25D2                        u4700 1384  
                      u4620 1218                        u4541 1A36                        u4461 18AC  
                      u4381 16E2                        u3661 23FE                        u3741 2B16  
                      u3821 25CE                        u4701 1380                        u4621 1214  
                      u4550 1A70                        u4470 1902                        u4390 1742  
                      u3670 2430                        u3590 2316                        u3750 2B2A  
                      u3830 25E0                        u4710 15AC                        u4630 122E  
                      u4551 1A6C                        u4471 18FE                        u4391 173E  
                      u3671 242C                        u3591 2312                        u3751 2B26  
                      u3831 25DC                        u4711 15A8                        u4631 122A  
                      u2960 2B5A                        u4560 1A8C                        u4480 191E  
                      u3680 246A                        u3840 261A                        u3760 249A  
                      u4640 1244                        u2961 2B56                        u4561 1A88  
                      u4481 191A                        u3681 2466                        u3585 22B2  
                      u3841 2616                        u3761 2496                        u4641 1240  
                      u2970 2B70                        u4570 1ABA                        u4490 1946  
                      u3690 2A5C                        u3850 2628                        u3770 24A8  
                      u4650 125A                        u2971 2B6C                        u4571 1AB6  
                      u4491 1942                        u3691 2A58                        u3851 2624  
                      u3771 24A4                        u4651 1256                        u2980 2B86  
                      u4580 1B04                        u3780 2504                        u4660 1286  
                      u2981 2B82                        u4581 1B00                        u3781 2500  
                      u4661 1282                        u2990 2B9C                        u4590 1B64  
                      u3790 255A                        u4670 12A6                        u4807 2A14  
                      u4727 2948                        u2991 2B98                        u4591 1B60  
                      u3791 2556                        u4671 12A2                        u4680 12D6  
                      u4817 2A36                        u4737 2960                        u4681 12D2  
                      u4690 1368                        u4827 3396                        u4747 2976  
                      u4691 1364                        u4837 3154                        u4757 298C  
                      u4847 33F4                        u4767 29A2                        u4777 29B8  
                      u4787 29D8                        u4797 29F6                        abs@a 0007  
                      _dbuf 0060                        _main 0E46                        _dtoa 27BE  
                      _prec 005B                        pad@i 0013                        pad@p 0010  
                      fsr1h 0FE2                        fsr2h 0FDA                        indf1 0FE7  
                      indf2 0FDF                        fsr1l 0FE1                        fsr2l 0FD9  
                      btemp 005E                ?_LCD_setline 0001                        prodh 0FF4  
                      prodl 0FF3                        start 0030            __end_of_ADC_init 33D8  
       main@light_threshold 011F             __end_of_HighISR 0030                ___param_bank 0000  
       __end_of_ArrayAppend 3080                       ??_abs 0009                       ??_pad 0012  
              main@daycount 011D            __end_of_LCD_Init 2A46               ___fltol@sign1 0040  
           __end_of___fladd 205E                       ?_main 0001                       ?_dtoa 0015  
                     _ADPCH 0F5F             __end_of___awdiv 2CD8             __end_of___awmod 2E42  
           __end_of___flmul 2488             __end_of___fltol 2B4C             ___awdiv@divisor 0003  
           __end_of___lwdiv 30F4                       i2l241 002C             ___awdiv@counter 0005  
              vfpfcnvrt@fmt 0021                       _TMR0H 0FD4                       _TMR0L 0FD3  
                     _flags 005D         read_prec_or_width@c 0009         read_prec_or_width@n 000A  
                     _fputc 2CD8                       _fputs 3220                       pad@fp 000E  
                     _width 0059                       _putch 340C                       main@i 0127  
                     dtoa@d 0016                       dtoa@i 001E                       dtoa@p 001A  
                     dtoa@s 001D                       dtoa@w 001B               ?_LCD_sendbyte 0002  
      main@avgSolarMidnight 0116                       tablat 0FF5                       plusw1 0FE3  
                     plusw2 0FDB                       ttemp5 005F                       ttemp6 0062  
                     ttemp7 0066                       status 0FD8                       wtemp8 005F  
           __end_of_sprintf 3220             __initialization 315C             ArrayAppend@Time 0005  
              __end_of_main 15F2                __end_of_dtoa 2926             ArrayAppend@size 0003  
      __end_of_ArrayAverage 2F7E           __end_of_LCD_E_TOG 33FE                      ??_main 0047  
                    ??_dtoa 0018               __activetblptr 0003             ArrayAverage@sum 0011  
__end_of_read_prec_or_width 2EF0                      ?_fputc 0001                      ?_fputs 0009  
                    _ADRESH 0F64              ??_LCD_sendbyte 0003            ___awdiv@dividend 0001  
                    ?_putch 0001            UpdateClock@hours 000B                      i2l4030 0022  
                    i2l4032 0028                      i2l4026 000A                      i2l4028 001A  
          UpdateClock@years 0013               vfpfcnvrt@done 0029                   ??_HighISR 0001  
          __end_of___xxtofl 263C                 _ArrayAppend 3008           _LEDarray_disp_bin 2B4C  
        ?_LEDarray_disp_bin 0001                ??_ADC_getval 0003               ??_Timer0_init 0001  
              vfprintf@cfmt 002E                   ??___fladd 0030                      ___wmul 332E  
                 ??___awdiv 0005                   ??___awmod 0005                   ??___flmul 0017  
                 ??___fltol 003C                   ??___lwdiv 0005        read_prec_or_width@ap 0008  
       ??_LEDarray_disp_bin 0003                      clear_0 3188            ___awdiv@quotient 0007  
           ___awmod@divisor 0003               main@operation 0121                      isa$std 0001  
           ___awmod@counter 0005                      pad@buf 000F                      dtoa@fp 0015  
                    fputc@c 0001                      fputs@c 000B                      fputs@i 000C  
                    fputs@s 0009                __mediumconst 0000      main@knownSolarMidnight 0114  
                    tblptrh 0FF7                      tblptrl 0FF6                      tblptru 0FF8  
                 ?_ADC_init 0001                      putch@c 0001            __end_of_vfprintf 31E4  
                 ??_sprintf 003A          __end_of_ADC_getval 332E                ___xxtofl@arg 000B  
              ___xxtofl@exp 000A   __end_of_LEDarray_disp_bin 2C14                ___xxtofl@val 0001  
                __accesstop 0060               ??_UpdateClock 0019     __end_of__initialization 3198  
                 ?_LCD_Init 0001               ___rparam_used 0001                  ___fltol@f1 0038  
             _LEDarray_init 3354             _Interrupts_init 33FE              __pcstackCOMRAM 0001  
              __pidataBANK0 33D8               __end_of_fputc 2D92               __end_of_fputs 325C  
             __end_of_putch 340E         __end_of_Timer0_init 33BE                  ??_ADC_init 0001  
                   ??_fputc 0004                     ??_fputs 000B                     ??_putch 0001  
         UpdateClock@F14152 0080                  __pbssBANK0 0060                  __pbssBANK1 01E1  
       UpdateClock@DSTstate 0015                  ??_LCD_Init 0004              _LCD_sendnibble 30F4  
     ArrayAverage@arrayTime 0008            ArrayAverage@size 000A              ?_LEDarray_init 0001  
            _LCD_sendstring 32CA         __end_of_UpdateClock 1B9E                     ?___wmul 0001  
      __end_of_LCD_sendbyte 339E                   ?___xxtofl 0001           UpdateClock@months 0011  
    __end_of_LCD_sendnibble 315C                _ArrayAverage 2EF0         UpdateClock@TestMode 0017  
   __end_of_Interrupts_init 340C                     _HighISR 0008      __end_of_LCD_sendstring 32FE  
      ArrayAppend@arrayTime 0001                   _ADREFbits 0F58                     __Hparam 0000  
                   __Lparam 0000                 _Timer0_init 339E                     ___fladd 1B9E  
                   ___awdiv 2C14                     ___awmod 2D92                     ___flmul 205E  
            main@hours_temp 0125                     ___fltol 2A46                     ___lwdiv 3080  
                 ?_vfprintf 002B                __psmallconst 0E00                     __pcinit 315C  
                   __ramtop 0E00                     __ptext0 0E46                     __ptext1 31E4  
                   __ptext2 31A2                     __ptext3 263C                     __ptext4 2E42  
                   __ptext5 332E                     __ptext6 27BE                     __ptext7 2F7E  
                   __ptext8 3220                     __ptext9 2CD8       read_prec_or_width@fmt 0007  
                ??___xxtofl 0005            ___awmod@dividend 0001                   _LCD_E_TOG 33F0  
           LCD_setline@line 0004                     _sprintf 31E4        end_of_initialization 3198  
           ?_LCD_sendnibble 0001            ADC_getval@tmpval 0003                     fputc@fp 0003  
           ??_LEDarray_init 0001                     fputs@fp 000A                 _UpdateClock 15F2  
           ?_LCD_sendstring 0004                ?_ArrayAppend 0001          _read_prec_or_width 2E42  
         __end_of_vfpfcnvrt 27BE                     postdec1 0FE5                     postdec2 0FDD  
       ?_read_prec_or_width 0007                     postinc0 0FEE                     postinc1 0FE6  
                   postinc2 0FDE            vfpfcnvrt@convarg 0025                  ??_vfprintf 002E  
         main@SolarMidnight 0129           main@SolarPerMonth 0189                 ___fladd@grs 0037  
             ___xxtofl@sign 0009                  ?_LCD_E_TOG 0001                   _TRISAbits 0F81  
                 _TRISBbits 0F82                   _TRISCbits 0F83                   _TRISDbits 0F84  
                 _TRISEbits 0F85                   _TRISFbits 0F86                   _TRISGbits 0F87  
                 _TRISHbits 0F88        ??_read_prec_or_width 0009       main@previousClockDays 011A  
               _CM1CON0bits 0ED0                 _CM1CON1bits 0ED1            ?_Interrupts_init 0001  
               ___flmul@grs 001C                  main@buffer 0100                 vfpfcnvrt@ap 0022  
               vfpfcnvrt@cp 002A                 vfpfcnvrt@fp 0020              __end_of___wmul 3354  
      LCD_sendnibble@number 0001         start_initialization 315C                 __end_of_abs 32CA  
               __end_of_pad 3008                _LCD_sendbyte 337A         ArrayAverage@average 000F  
           UpdateClock@days 000D               ??_LCD_setline 0004                 vfprintf@fmt 002C  
      LCD_sendstring@string 0004                    ??___wmul 0005                 __pdataBANK0 0080  
                 ___fladd@a 002C                   ___fladd@b 0028                   ___flmul@a 0013  
                 ___flmul@b 000F                 __pbssCOMRAM 0059                 ??_LCD_E_TOG 0001  
             __pcstackBANK1 0100                    ?_HighISR 0001            main@minutes_temp 0112  
          ___lwdiv@dividend 0001                   _dtoa$1930 0018                ?_Timer0_init 0001  
                 __pintcode 0008                    ?___fladd 0028                    ?___awdiv 0001  
                  ?___awmod 0001                    ?___flmul 000F                    ?___fltol 0038  
       __end_of_LCD_setline 3296                    ?___lwdiv 0001                 __smallconst 0E00  
          ??_LCD_sendnibble 0001                    _ADC_init 33BE            ___lwdiv@quotient 0005  
          ??_LCD_sendstring 0006                    ?_sprintf 002F            LCD_sendbyte@Byte 0003  
                  _LCD_Init 2926            LCD_sendbyte@type 0002                ?_UpdateClock 0007  
            ___wmul@product 0005                    _LATAbits 0F79          UpdateClock@minutes 0009  
        UpdateClock@seconds 0007                    _LATBbits 0F7A                    _LATCbits 0F7B  
                  _LATDbits 0F7C                    _LATEbits 0F7D                    _LATFbits 0F7E  
                  _LATGbits 0F7F                    _LATHbits 0F80                    _IPR0bits 0E1F  
                  _PIE0bits 0E29                    _PIR0bits 0E33                    i2u433_40 001A  
                  i2u433_41 0016                   _vfpfcnvrt 263C                  _ADCON0bits 0F60  
         ___wmul@multiplier 0001                   main@clock 01D1      UpdateClock@DaysInMonth 001F  
                _CM1NCHbits 0ED2                  _CM1PCHbits 0ED3                   copy_data0 3170  
             ArrayAverage@i 0013       __end_of_LEDarray_init 337A              UpdateClock@DoW 000F  
               _LCD_setline 325C                    __Hrparam 0000                  _ADC_getval 32FE  
                vfprintf@ap 002D                    __Lrparam 0000                  vfprintf@fp 002B  
                ?_vfpfcnvrt 0020                  _ANSELAbits 0E92             main@minute_diff 0118  
                sprintf@fmt 0031                    ___xxtofl 2488                  _T0CON0bits 0FD5  
                _T0CON1bits 0FD6                    _main$297 011C             ___lwdiv@divisor 0003  
           ___lwdiv@counter 0007                    __ptext10 340C                    __ptext11 3296  
                  __ptext20 3354                    __ptext12 2C14                    __ptext21 2B4C  
                  __ptext13 2488                    __ptext30 3080                    __ptext22 325C  
                  __ptext14 2A46                    __ptext31 3008                    __ptext23 32CA  
                  __ptext15 205E                    __ptext32 33BE                    __ptext24 2926  
                  __ptext16 1B9E                    __ptext33 32FE                    __ptext25 337A  
                  __ptext17 15F2                    __ptext26 30F4                    __ptext18 2D92  
                  __ptext27 33F0                    __ptext19 339E                    __ptext28 33FE  
                  __ptext29 2EF0     LEDarray_disp_bin@number 0001                  _GLOBALsecs 01E1  
                  isa$xinst 0000                    int$flags 005E                    main@Dawn 0169  
                  main@Dusk 0149                    _vfprintf 31A2                ArrayAppend@i 000A  
                _INTCONbits 0FF2               ?_ArrayAverage 0008                    intlevel2 0000  
                 sprintf@ap 003A                _DAC1CON0bits 0EC6                _DAC1CON1bits 0EC7  
               ?_ADC_getval 0001                 ??_vfpfcnvrt 0023                    sprintf@f 003B  
                  sprintf@s 002F               ___fladd@signs 0034              ??_ArrayAverage 000C  
              ___fladd@aexp 0035                ___fladd@bexp 0036               ??_ArrayAppend 0007  
