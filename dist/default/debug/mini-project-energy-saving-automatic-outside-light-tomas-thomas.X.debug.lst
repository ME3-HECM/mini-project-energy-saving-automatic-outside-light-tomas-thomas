

Microchip MPLAB XC8 Assembler V2.45 build 20230818022343 
                                                                                               Thu Feb 08 22:02:07 2024

Microchip MPLAB XC8 C Compiler v2.45 (Free license) build 20230818022343 Og1 
     1                           	processor	18F67K40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1
    14                           	psect	text4,global,reloc=2,class=CODE,delta=1
    15                           	psect	text5,global,reloc=2,class=CODE,delta=1
    16                           	psect	text6,global,reloc=2,class=CODE,delta=1
    17                           	psect	text7,global,reloc=2,class=CODE,delta=1
    18                           	psect	text8,global,reloc=2,class=CODE,delta=1
    19                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    20                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
    21                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    22                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    23                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    24                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    25   000000                     
    26                           ; Generated 21/07/2023 GMT
    27                           ; 
    28                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    29                           ; All rights reserved.
    30                           ; 
    31                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    32                           ; 
    33                           ; Redistribution and use in source and binary forms, with or without modification, are
    34                           ; permitted provided that the following conditions are met:
    35                           ; 
    36                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    37                           ;        conditions and the following disclaimer.
    38                           ; 
    39                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    40                           ;        of conditions and the following disclaimer in the documentation and/or other
    41                           ;        materials provided with the distribution. Publication is not required when
    42                           ;        this file is used in an embedded application.
    43                           ; 
    44                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    45                           ;        software without specific prior written permission.
    46                           ; 
    47                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    48                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    49                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    50                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    51                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    52                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    53                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    54                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    55                           ; 
    56                           ; 
    57                           ; Code-generator required, PIC18F67K40 Definitions
    58                           ; 
    59                           ; SFR Addresses
    60   000000                     _T0CON0bits	set	4053
    61   000000                     _T0CON1bits	set	4054
    62   000000                     _CM1CON1bits	set	3793
    63                           
    64                           	psect	nvCOMRAM
    65   000044                     __pnvCOMRAM:
    66                           	callstack 0
    67   000044                     _GLOBALsecs:
    68                           	callstack 0
    69   000044                     	ds	2
    70   000000                     _IPR0bits	set	3615
    71   000000                     _PIE0bits	set	3625
    72   000000                     _ANSELAbits	set	3730
    73   000000                     _LATDbits	set	3964
    74   000000                     _TRISDbits	set	3972
    75   000000                     _TRISFbits	set	3974
    76   000000                     _TRISGbits	set	3975
    77   000000                     _TRISHbits	set	3976
    78   000000                     _LATFbits	set	3966
    79   000000                     _LATGbits	set	3967
    80   000000                     _LATHbits	set	3968
    81   000000                     _TMR0L	set	4051
    82   000000                     _TMR0H	set	4052
    83   000000                     _INTCONbits	set	4082
    84   000000                     _TRISBbits	set	3970
    85   000000                     _TRISAbits	set	3969
    86   000000                     _DAC1CON0bits	set	3782
    87   000000                     _ADREFbits	set	3928
    88   000000                     _ADPCH	set	3935
    89   000000                     _ADRESH	set	3940
    90   000000                     _ADCON0bits	set	3936
    91   000000                     _LATAbits	set	3961
    92   000000                     _LATBbits	set	3962
    93   000000                     _CM1CON0bits	set	3792
    94   000000                     _CM1NCHbits	set	3794
    95   000000                     _DAC1CON1bits	set	3783
    96   000000                     _CM1PCHbits	set	3795
    97   000000                     _PIR0bits	set	3635
    98                           
    99                           ; #config settings
   100                           
   101                           	psect	cinit
   102   001478                     __pcinit:
   103                           	callstack 0
   104   001478                     start_initialization:
   105                           	callstack 0
   106   001478                     __initialization:
   107                           	callstack 0
   108                           
   109                           ; Clear objects allocated to COMRAM (56 bytes)
   110   001478  EE00  F001         	lfsr	0,__pbssCOMRAM
   111   00147C  0E38               	movlw	56
   112   00147E                     clear_0:
   113   00147E  6AEE               	clrf	postinc0,c
   114   001480  06E8               	decf	wreg,f,c
   115   001482  E1FD               	bnz	clear_0
   116   001484                     end_of_initialization:
   117                           	callstack 0
   118   001484                     __end_of__initialization:
   119                           	callstack 0
   120   001484  9046               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   121   001486  9246               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   122   001488  0100               	movlb	0
   123   00148A  EF01  F007         	goto	_main	;jump to C main() function
   124                           
   125                           	psect	bssCOMRAM
   126   000001                     __pbssCOMRAM:
   127                           	callstack 0
   128   000001                     	ds	14
   129   00000F                     	ds	14
   130   00001D                     	ds	14
   131   00002B                     	ds	14
   132                           
   133                           	psect	cstackBANK0
   134   000060                     __pcstackBANK0:
   135                           	callstack 0
   136   000060                     main@14170:
   137                           	callstack 0
   138                           
   139                           ; 14 bytes @ 0x0
   140   000060                     	ds	14
   141   00006E                     main@14172:
   142                           	callstack 0
   143                           
   144                           ; 14 bytes @ 0xE
   145   00006E                     	ds	14
   146   00007C                     main@14166:
   147                           	callstack 0
   148                           
   149                           ; 14 bytes @ 0x1C
   150   00007C                     	ds	14
   151   00008A                     main@14168:
   152                           	callstack 0
   153                           
   154                           ; 14 bytes @ 0x2A
   155   00008A                     	ds	14
   156   000098                     main@light_threshold:
   157                           	callstack 0
   158                           
   159                           ; 2 bytes @ 0x38
   160   000098                     	ds	2
   161   00009A                     main@curval:
   162                           	callstack 0
   163                           
   164                           ; 2 bytes @ 0x3A
   165   00009A                     	ds	2
   166   00009C                     main@Jan:
   167                           	callstack 0
   168                           
   169                           ; 6 bytes @ 0x3C
   170   00009C                     	ds	6
   171   0000A2                     main@Feb:
   172                           	callstack 0
   173                           
   174                           ; 6 bytes @ 0x42
   175   0000A2                     	ds	6
   176   0000A8                     main@Mar:
   177                           	callstack 0
   178                           
   179                           ; 6 bytes @ 0x48
   180   0000A8                     	ds	6
   181   0000AE                     main@Apr:
   182                           	callstack 0
   183                           
   184                           ; 6 bytes @ 0x4E
   185   0000AE                     	ds	6
   186   0000B4                     main@May:
   187                           	callstack 0
   188                           
   189                           ; 6 bytes @ 0x54
   190   0000B4                     	ds	6
   191   0000BA                     main@Jun:
   192                           	callstack 0
   193                           
   194                           ; 6 bytes @ 0x5A
   195   0000BA                     	ds	6
   196   0000C0                     main@Jul:
   197                           	callstack 0
   198                           
   199                           ; 6 bytes @ 0x60
   200   0000C0                     	ds	6
   201   0000C6                     main@Aug:
   202                           	callstack 0
   203                           
   204                           ; 6 bytes @ 0x66
   205   0000C6                     	ds	6
   206   0000CC                     main@Sep:
   207                           	callstack 0
   208                           
   209                           ; 6 bytes @ 0x6C
   210   0000CC                     	ds	6
   211   0000D2                     main@Oct:
   212                           	callstack 0
   213                           
   214                           ; 6 bytes @ 0x72
   215   0000D2                     	ds	6
   216   0000D8                     main@Nov:
   217                           	callstack 0
   218                           
   219                           ; 6 bytes @ 0x78
   220   0000D8                     	ds	6
   221   0000DE                     main@Dec:
   222                           	callstack 0
   223                           
   224                           ; 6 bytes @ 0x7E
   225   0000DE                     	ds	6
   226   0000E4                     main@Dusk:
   227                           	callstack 0
   228                           
   229                           ; 6 bytes @ 0x84
   230   0000E4                     	ds	6
   231   0000EA                     main@DSTon:
   232                           	callstack 0
   233                           
   234                           ; 8 bytes @ 0x8A
   235   0000EA                     	ds	8
   236   0000F2                     main@Dawn:
   237                           	callstack 0
   238                           
   239                           ; 6 bytes @ 0x92
   240   0000F2                     	ds	6
   241   0000F8                     main@clock:
   242                           	callstack 0
   243                           
   244                           ; 8 bytes @ 0x98
   245   0000F8                     	ds	8
   246                           
   247                           	psect	cstackCOMRAM
   248   000039                     __pcstackCOMRAM:
   249                           	callstack 0
   250   000039                     ?_ADC_getval:
   251                           	callstack 0
   252   000039                     UpdateClock@seconds:
   253                           	callstack 0
   254   000039                     LEDarray_disp_bin@number:
   255                           	callstack 0
   256   000039                     ArrayAppend@arrayTime:
   257                           	callstack 0
   258                           
   259                           ; 2 bytes @ 0x0
   260   000039                     	ds	1
   261   00003A                     UpdateClock@minutes:
   262                           	callstack 0
   263                           
   264                           ; 1 bytes @ 0x1
   265   00003A                     	ds	1
   266   00003B                     UpdateClock@hours:
   267                           	callstack 0
   268   00003B                     ADC_getval@tmpval:
   269                           	callstack 0
   270   00003B                     ArrayAppend@size:
   271                           	callstack 0
   272                           
   273                           ; 2 bytes @ 0x2
   274   00003B                     	ds	1
   275   00003C                     UpdateClock@days:
   276                           	callstack 0
   277                           
   278                           ; 1 bytes @ 0x3
   279   00003C                     	ds	1
   280   00003D                     ??_UpdateClock:
   281   00003D                     ArrayAppend@Time:
   282                           	callstack 0
   283                           
   284                           ; 2 bytes @ 0x4
   285   00003D                     	ds	2
   286   00003F                     ??_ArrayAppend:
   287                           
   288                           ; 1 bytes @ 0x6
   289   00003F                     	ds	3
   290   000042                     ArrayAppend@i:
   291                           	callstack 0
   292                           
   293                           ; 2 bytes @ 0x9
   294   000042                     	ds	2
   295   000044                     
   296                           ; 1 bytes @ 0xB
   297 ;;
   298 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   299 ;;
   300 ;; *************** function _main *****************
   301 ;; Defined at:
   302 ;;		line 28 in file "main.c"
   303 ;; Parameters:    Size  Location     Type
   304 ;;		None
   305 ;; Auto vars:     Size  Location     Type
   306 ;;  curval          2   58[BANK0 ] unsigned int 
   307 ;;  14168          14   42[BANK0 ] int [7]
   308 ;;  14166          14   28[BANK0 ] int [7]
   309 ;;  14172          14   14[BANK0 ] int [7]
   310 ;;  14170          14    0[BANK0 ] int [7]
   311 ;;  clock           8  152[BANK0 ] struct time_structure
   312 ;;  DSTon           8  138[BANK0 ] struct time_structure
   313 ;;  Dawn            6  146[BANK0 ] struct array_structure
   314 ;;  Dusk            6  132[BANK0 ] struct array_structure
   315 ;;  Dec             6  126[BANK0 ] struct month_structure
   316 ;;  Nov             6  120[BANK0 ] struct month_structure
   317 ;;  Oct             6  114[BANK0 ] struct month_structure
   318 ;;  Sep             6  108[BANK0 ] struct month_structure
   319 ;;  Aug             6  102[BANK0 ] struct month_structure
   320 ;;  Jul             6   96[BANK0 ] struct month_structure
   321 ;;  Jun             6   90[BANK0 ] struct month_structure
   322 ;;  May             6   84[BANK0 ] struct month_structure
   323 ;;  Apr             6   78[BANK0 ] struct month_structure
   324 ;;  Mar             6   72[BANK0 ] struct month_structure
   325 ;;  Feb             6   66[BANK0 ] struct month_structure
   326 ;;  Jan             6   60[BANK0 ] struct month_structure
   327 ;;  light_thresh    2   56[BANK0 ] unsigned int 
   328 ;; Return value:  Size  Location     Type
   329 ;;                  1    wreg      void 
   330 ;; Registers used:
   331 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
   332 ;; Tracked objects:
   333 ;;		On entry : 0/0
   334 ;;		On exit  : 0/0
   335 ;;		Unchanged: 0/0
   336 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   337 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   338 ;;      Locals:         0     160       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   339 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   340 ;;      Totals:         0     160       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   341 ;;Total ram usage:      160 bytes
   342 ;; Hardware stack levels required when called: 2
   343 ;; This function calls:
   344 ;;		_ADC_getval
   345 ;;		_ADC_init
   346 ;;		_ArrayAppend
   347 ;;		_Interrupts_init
   348 ;;		_LEDarray_disp_bin
   349 ;;		_LEDarray_init
   350 ;;		_Timer0_init
   351 ;;		_UpdateClock
   352 ;; This function is called by:
   353 ;;		Startup code after reset
   354 ;; This function uses a non-reentrant model
   355 ;;
   356                           
   357                           	psect	text0
   358   000E02                     __ptext0:
   359                           	callstack 0
   360   000E02                     _main:
   361                           	callstack 29
   362   000E02                     
   363                           ;main.c: 216:         Dawn.hours = (int[]){0, 0, 0, 0, 0, 0, 0};;main.c: 217:         Da
      +                          wn.minutes = (int[]){0, 0, 0, 0, 0, 0, 0};;main.c: 221:         Dusk.hours = (int[]){0, 
      +                          0, 0, 0, 0, 0, 0};;main.c: 222:         Dusk.minutes = (int[]){0, 0, 0, 0, 0, 0, 0};;mai
      +                          n.c: 31:     LEDarray_init();
   364   000E02  EC0C  F00A         	call	_LEDarray_init	;wreg free
   365   000E06                     
   366                           ;main.c: 32:     Timer0_init();
   367   000E06  EC1F  F00A         	call	_Timer0_init	;wreg free
   368   000E0A                     
   369                           ;main.c: 33:     Interrupts_init();
   370   000E0A  EC47  F00A         	call	_Interrupts_init	;wreg free
   371   000E0E                     
   372                           ;main.c: 37:     TRISDbits.TRISD7 = 0;
   373   000E0E  9E84               	bcf	132,7,c	;volatile
   374   000E10                     
   375                           ;main.c: 38:     LATDbits.LATD7 = 0;
   376   000E10  9E7C               	bcf	124,7,c	;volatile
   377   000E12                     
   378                           ;main.c: 41:     TRISHbits.TRISH3 = 0;
   379   000E12  9688               	bcf	136,3,c	;volatile
   380   000E14                     
   381                           ;main.c: 42:     LATHbits.LATH3 = 0;
   382   000E14  9680               	bcf	128,3,c	;volatile
   383   000E16                     
   384                           ;main.c: 54:     struct time_structure clock;;main.c: 56:         GLOBALsecs = 50;
   385   000E16  0E00               	movlw	0
   386   000E18  6E45               	movwf	(_GLOBALsecs+1)^0,c
   387   000E1A  0E32               	movlw	50
   388   000E1C  6E44               	movwf	_GLOBALsecs^0,c
   389   000E1E                     
   390                           ;main.c: 57:         clock.minutes = 59;
   391   000E1E  0E00               	movlw	0
   392   000E20  0100               	movlb	0	; () banked
   393   000E22  6FFB               	movwf	(main@clock+3)& (0+255),b
   394   000E24  0E3B               	movlw	59
   395   000E26  6FFA               	movwf	(main@clock+2)& (0+255),b
   396   000E28                     
   397                           ; BSR set to: 0
   398                           ;main.c: 58:         clock.hours = 12;
   399   000E28  0E00               	movlw	0
   400   000E2A  6FFD               	movwf	(main@clock+5)& (0+255),b
   401   000E2C  0E0C               	movlw	12
   402   000E2E  6FFC               	movwf	(main@clock+4)& (0+255),b
   403   000E30                     
   404                           ; BSR set to: 0
   405                           ;main.c: 59:         clock.days = 1;
   406   000E30  0E00               	movlw	0
   407   000E32  6FFF               	movwf	(main@clock+7)& (0+255),b
   408   000E34  0E01               	movlw	1
   409   000E36  6FFE               	movwf	(main@clock+6)& (0+255),b
   410   000E38                     
   411                           ; BSR set to: 0
   412                           ;main.c: 63:     struct time_structure DSTon;;main.c: 64:         DSTon.minutes = 0;
   413   000E38  0E00               	movlw	0
   414   000E3A  6FED               	movwf	(main@DSTon+3)& (0+255),b
   415   000E3C  0E00               	movlw	0
   416   000E3E  6FEC               	movwf	(main@DSTon+2)& (0+255),b
   417   000E40                     
   418                           ; BSR set to: 0
   419                           ;main.c: 65:         DSTon.hours = 0;
   420   000E40  0E00               	movlw	0
   421   000E42  6FEF               	movwf	(main@DSTon+5)& (0+255),b
   422   000E44  0E00               	movlw	0
   423   000E46  6FEE               	movwf	(main@DSTon+4)& (0+255),b
   424   000E48                     
   425                           ; BSR set to: 0
   426                           ;main.c: 66:         DSTon.days = 0;
   427   000E48  0E00               	movlw	0
   428   000E4A  6FF1               	movwf	(main@DSTon+7)& (0+255),b
   429   000E4C  0E00               	movlw	0
   430   000E4E  6FF0               	movwf	(main@DSTon+6)& (0+255),b
   431   000E50                     
   432                           ; BSR set to: 0
   433                           ;main.c: 72:         GLOBALsecs = clock.hours;
   434   000E50  C0FC  F044         	movff	main@clock+4,_GLOBALsecs
   435   000E54  C0FD  F045         	movff	main@clock+5,_GLOBALsecs+1
   436   000E58                     
   437                           ; BSR set to: 0
   438                           ;main.c: 130:     struct month_structure Jan;;main.c: 132:         Jan.days = 31;
   439   000E58  0E00               	movlw	0
   440   000E5A  6FA1               	movwf	(main@Jan+5)& (0+255),b
   441   000E5C  0E1F               	movlw	31
   442   000E5E  6FA0               	movwf	(main@Jan+4)& (0+255),b
   443   000E60                     
   444                           ; BSR set to: 0
   445                           ;main.c: 133:         Jan.solarMidHours = 0;
   446   000E60  0E00               	movlw	0
   447   000E62  6F9F               	movwf	(main@Jan+3)& (0+255),b
   448   000E64  0E00               	movlw	0
   449   000E66  6F9E               	movwf	(main@Jan+2)& (0+255),b
   450   000E68                     
   451                           ; BSR set to: 0
   452                           ;main.c: 134:         Jan.solarMidMinutes = 9;
   453   000E68  0E00               	movlw	0
   454   000E6A  6F9D               	movwf	(main@Jan+1)& (0+255),b
   455   000E6C  0E09               	movlw	9
   456   000E6E  6F9C               	movwf	main@Jan& (0+255),b
   457   000E70                     
   458                           ; BSR set to: 0
   459                           ;main.c: 136:     struct month_structure Feb;;main.c: 138:         Feb.days = 28;
   460   000E70  0E00               	movlw	0
   461   000E72  6FA7               	movwf	(main@Feb+5)& (0+255),b
   462   000E74  0E1C               	movlw	28
   463   000E76  6FA6               	movwf	(main@Feb+4)& (0+255),b
   464   000E78                     
   465                           ; BSR set to: 0
   466                           ;main.c: 139:         Feb.solarMidHours = 0;
   467   000E78  0E00               	movlw	0
   468   000E7A  6FA5               	movwf	(main@Feb+3)& (0+255),b
   469   000E7C  0E00               	movlw	0
   470   000E7E  6FA4               	movwf	(main@Feb+2)& (0+255),b
   471   000E80                     
   472                           ; BSR set to: 0
   473                           ;main.c: 140:         Feb.solarMidMinutes = 13;
   474   000E80  0E00               	movlw	0
   475   000E82  6FA3               	movwf	(main@Feb+1)& (0+255),b
   476   000E84  0E0D               	movlw	13
   477   000E86  6FA2               	movwf	main@Feb& (0+255),b
   478   000E88                     
   479                           ; BSR set to: 0
   480                           ;main.c: 142:     struct month_structure Mar;;main.c: 144:         Mar.days = 31;
   481   000E88  0E00               	movlw	0
   482   000E8A  6FAD               	movwf	(main@Mar+5)& (0+255),b
   483   000E8C  0E1F               	movlw	31
   484   000E8E  6FAC               	movwf	(main@Mar+4)& (0+255),b
   485   000E90                     
   486                           ; BSR set to: 0
   487                           ;main.c: 145:         Mar.solarMidHours = 0;
   488   000E90  0E00               	movlw	0
   489   000E92  6FAB               	movwf	(main@Mar+3)& (0+255),b
   490   000E94  0E00               	movlw	0
   491   000E96  6FAA               	movwf	(main@Mar+2)& (0+255),b
   492   000E98                     
   493                           ; BSR set to: 0
   494                           ;main.c: 146:         Mar.solarMidMinutes = 8;
   495   000E98  0E00               	movlw	0
   496   000E9A  6FA9               	movwf	(main@Mar+1)& (0+255),b
   497   000E9C  0E08               	movlw	8
   498   000E9E  6FA8               	movwf	main@Mar& (0+255),b
   499   000EA0                     
   500                           ; BSR set to: 0
   501                           ;main.c: 148:     struct month_structure Apr;;main.c: 150:         Apr.days = 30;
   502   000EA0  0E00               	movlw	0
   503   000EA2  6FB3               	movwf	(main@Apr+5)& (0+255),b
   504   000EA4  0E1E               	movlw	30
   505   000EA6  6FB2               	movwf	(main@Apr+4)& (0+255),b
   506   000EA8                     
   507                           ; BSR set to: 0
   508                           ;main.c: 151:         Apr.solarMidHours = 0;
   509   000EA8  0E00               	movlw	0
   510   000EAA  6FB1               	movwf	(main@Apr+3)& (0+255),b
   511   000EAC  0E00               	movlw	0
   512   000EAE  6FB0               	movwf	(main@Apr+2)& (0+255),b
   513   000EB0                     
   514                           ; BSR set to: 0
   515                           ;main.c: 152:         Apr.solarMidMinutes = 1;
   516   000EB0  0E00               	movlw	0
   517   000EB2  6FAF               	movwf	(main@Apr+1)& (0+255),b
   518   000EB4  0E01               	movlw	1
   519   000EB6  6FAE               	movwf	main@Apr& (0+255),b
   520   000EB8                     
   521                           ; BSR set to: 0
   522                           ;main.c: 154:     struct month_structure May;;main.c: 156:         May.days = 31;
   523   000EB8  0E00               	movlw	0
   524   000EBA  6FB9               	movwf	(main@May+5)& (0+255),b
   525   000EBC  0E1F               	movlw	31
   526   000EBE  6FB8               	movwf	(main@May+4)& (0+255),b
   527   000EC0                     
   528                           ; BSR set to: 0
   529                           ;main.c: 157:         May.solarMidHours = 23;
   530   000EC0  0E00               	movlw	0
   531   000EC2  6FB7               	movwf	(main@May+3)& (0+255),b
   532   000EC4  0E17               	movlw	23
   533   000EC6  6FB6               	movwf	(main@May+2)& (0+255),b
   534   000EC8                     
   535                           ; BSR set to: 0
   536                           ;main.c: 158:         May.solarMidMinutes = 57;
   537   000EC8  0E00               	movlw	0
   538   000ECA  6FB5               	movwf	(main@May+1)& (0+255),b
   539   000ECC  0E39               	movlw	57
   540   000ECE  6FB4               	movwf	main@May& (0+255),b
   541   000ED0                     
   542                           ; BSR set to: 0
   543                           ;main.c: 160:     struct month_structure Jun;;main.c: 162:         Jun.days = 30;
   544   000ED0  0E00               	movlw	0
   545   000ED2  6FBF               	movwf	(main@Jun+5)& (0+255),b
   546   000ED4  0E1E               	movlw	30
   547   000ED6  6FBE               	movwf	(main@Jun+4)& (0+255),b
   548   000ED8                     
   549                           ; BSR set to: 0
   550                           ;main.c: 163:         Jun.solarMidHours = 0;
   551   000ED8  0E00               	movlw	0
   552   000EDA  6FBD               	movwf	(main@Jun+3)& (0+255),b
   553   000EDC  0E00               	movlw	0
   554   000EDE  6FBC               	movwf	(main@Jun+2)& (0+255),b
   555   000EE0                     
   556                           ; BSR set to: 0
   557                           ;main.c: 164:         Jun.solarMidMinutes = 1;
   558   000EE0  0E00               	movlw	0
   559   000EE2  6FBB               	movwf	(main@Jun+1)& (0+255),b
   560   000EE4  0E01               	movlw	1
   561   000EE6  6FBA               	movwf	main@Jun& (0+255),b
   562   000EE8                     
   563                           ; BSR set to: 0
   564                           ;main.c: 166:     struct month_structure Jul;;main.c: 168:         Jul.days = 31;
   565   000EE8  0E00               	movlw	0
   566   000EEA  6FC5               	movwf	(main@Jul+5)& (0+255),b
   567   000EEC  0E1F               	movlw	31
   568   000EEE  6FC4               	movwf	(main@Jul+4)& (0+255),b
   569   000EF0                     
   570                           ; BSR set to: 0
   571                           ;main.c: 169:         Jul.solarMidHours = 0;
   572   000EF0  0E00               	movlw	0
   573   000EF2  6FC3               	movwf	(main@Jul+3)& (0+255),b
   574   000EF4  0E00               	movlw	0
   575   000EF6  6FC2               	movwf	(main@Jul+2)& (0+255),b
   576   000EF8                     
   577                           ; BSR set to: 0
   578                           ;main.c: 170:         Jul.solarMidMinutes = 5;
   579   000EF8  0E00               	movlw	0
   580   000EFA  6FC1               	movwf	(main@Jul+1)& (0+255),b
   581   000EFC  0E05               	movlw	5
   582   000EFE  6FC0               	movwf	main@Jul& (0+255),b
   583   000F00                     
   584                           ; BSR set to: 0
   585                           ;main.c: 172:     struct month_structure Aug;;main.c: 174:         Aug.days = 31;
   586   000F00  0E00               	movlw	0
   587   000F02  6FCB               	movwf	(main@Aug+5)& (0+255),b
   588   000F04  0E1F               	movlw	31
   589   000F06  6FCA               	movwf	(main@Aug+4)& (0+255),b
   590   000F08                     
   591                           ; BSR set to: 0
   592                           ;main.c: 175:         Aug.solarMidHours = 0;
   593   000F08  0E00               	movlw	0
   594   000F0A  6FC9               	movwf	(main@Aug+3)& (0+255),b
   595   000F0C  0E00               	movlw	0
   596   000F0E  6FC8               	movwf	(main@Aug+2)& (0+255),b
   597   000F10                     
   598                           ; BSR set to: 0
   599                           ;main.c: 176:         Aug.solarMidMinutes = 3;
   600   000F10  0E00               	movlw	0
   601   000F12  6FC7               	movwf	(main@Aug+1)& (0+255),b
   602   000F14  0E03               	movlw	3
   603   000F16  6FC6               	movwf	main@Aug& (0+255),b
   604   000F18                     
   605                           ; BSR set to: 0
   606                           ;main.c: 178:     struct month_structure Sep;;main.c: 180:         Sep.days = 30;
   607   000F18  0E00               	movlw	0
   608   000F1A  6FD1               	movwf	(main@Sep+5)& (0+255),b
   609   000F1C  0E1E               	movlw	30
   610   000F1E  6FD0               	movwf	(main@Sep+4)& (0+255),b
   611   000F20                     
   612                           ; BSR set to: 0
   613                           ;main.c: 181:         Sep.solarMidHours = 23;
   614   000F20  0E00               	movlw	0
   615   000F22  6FCF               	movwf	(main@Sep+3)& (0+255),b
   616   000F24  0E17               	movlw	23
   617   000F26  6FCE               	movwf	(main@Sep+2)& (0+255),b
   618   000F28                     
   619                           ; BSR set to: 0
   620                           ;main.c: 182:         Sep.solarMidMinutes = 55;
   621   000F28  0E00               	movlw	0
   622   000F2A  6FCD               	movwf	(main@Sep+1)& (0+255),b
   623   000F2C  0E37               	movlw	55
   624   000F2E  6FCC               	movwf	main@Sep& (0+255),b
   625   000F30                     
   626                           ; BSR set to: 0
   627                           ;main.c: 184:     struct month_structure Oct;;main.c: 186:         Oct.days = 31;
   628   000F30  0E00               	movlw	0
   629   000F32  6FD7               	movwf	(main@Oct+5)& (0+255),b
   630   000F34  0E1F               	movlw	31
   631   000F36  6FD6               	movwf	(main@Oct+4)& (0+255),b
   632   000F38                     
   633                           ; BSR set to: 0
   634                           ;main.c: 187:         Oct.solarMidHours = 23;
   635   000F38  0E00               	movlw	0
   636   000F3A  6FD5               	movwf	(main@Oct+3)& (0+255),b
   637   000F3C  0E17               	movlw	23
   638   000F3E  6FD4               	movwf	(main@Oct+2)& (0+255),b
   639   000F40                     
   640                           ; BSR set to: 0
   641                           ;main.c: 188:         Oct.solarMidMinutes = 47;
   642   000F40  0E00               	movlw	0
   643   000F42  6FD3               	movwf	(main@Oct+1)& (0+255),b
   644   000F44  0E2F               	movlw	47
   645   000F46  6FD2               	movwf	main@Oct& (0+255),b
   646   000F48                     
   647                           ; BSR set to: 0
   648                           ;main.c: 190:     struct month_structure Nov;;main.c: 192:         Nov.days = 30;
   649   000F48  0E00               	movlw	0
   650   000F4A  6FDD               	movwf	(main@Nov+5)& (0+255),b
   651   000F4C  0E1E               	movlw	30
   652   000F4E  6FDC               	movwf	(main@Nov+4)& (0+255),b
   653   000F50                     
   654                           ; BSR set to: 0
   655                           ;main.c: 193:         Nov.solarMidHours = 23;
   656   000F50  0E00               	movlw	0
   657   000F52  6FDB               	movwf	(main@Nov+3)& (0+255),b
   658   000F54  0E17               	movlw	23
   659   000F56  6FDA               	movwf	(main@Nov+2)& (0+255),b
   660   000F58                     
   661                           ; BSR set to: 0
   662                           ;main.c: 194:         Nov.solarMidMinutes = 46;
   663   000F58  0E00               	movlw	0
   664   000F5A  6FD9               	movwf	(main@Nov+1)& (0+255),b
   665   000F5C  0E2E               	movlw	46
   666   000F5E  6FD8               	movwf	main@Nov& (0+255),b
   667   000F60                     
   668                           ; BSR set to: 0
   669                           ;main.c: 196:     struct month_structure Dec;;main.c: 198:         Dec.days = 31;
   670   000F60  0E00               	movlw	0
   671   000F62  6FE3               	movwf	(main@Dec+5)& (0+255),b
   672   000F64  0E1F               	movlw	31
   673   000F66  6FE2               	movwf	(main@Dec+4)& (0+255),b
   674   000F68                     
   675                           ; BSR set to: 0
   676                           ;main.c: 199:         Dec.solarMidHours = 23;
   677   000F68  0E00               	movlw	0
   678   000F6A  6FE1               	movwf	(main@Dec+3)& (0+255),b
   679   000F6C  0E17               	movlw	23
   680   000F6E  6FE0               	movwf	(main@Dec+2)& (0+255),b
   681   000F70                     
   682                           ; BSR set to: 0
   683                           ;main.c: 200:         Dec.solarMidMinutes = 56;
   684   000F70  0E00               	movlw	0
   685   000F72  6FDF               	movwf	(main@Dec+1)& (0+255),b
   686   000F74  0E38               	movlw	56
   687   000F76  6FDE               	movwf	main@Dec& (0+255),b
   688   000F78                     
   689                           ; BSR set to: 0
   690                           ;main.c: 214:     struct array_structure Dawn;;main.c: 215:         Dawn.size = 7;
   691   000F78  0E00               	movlw	0
   692   000F7A  6FF3               	movwf	(main@Dawn+1)& (0+255),b
   693   000F7C  0E07               	movlw	7
   694   000F7E  6FF2               	movwf	main@Dawn& (0+255),b
   695   000F80                     
   696                           ; BSR set to: 0
   697                           ;main.c: 216:         Dawn.hours = (int[]){0, 0, 0, 0, 0, 0, 0};
   698   000F80  EE20  F07C         	lfsr	2,main@14166
   699   000F84  0E0D               	movlw	13
   700   000F86                     u881:
   701   000F86  6ADE               	clrf	postinc2,c
   702   000F88  06E8               	decf	wreg,f,c
   703   000F8A  E2FD               	bc	u881
   704   000F8C                     
   705                           ; BSR set to: 0
   706   000F8C  0E00               	movlw	high main@14166
   707   000F8E  6FF5               	movwf	(main@Dawn+3)& (0+255),b
   708   000F90  0E7C               	movlw	low main@14166
   709   000F92  6FF4               	movwf	(main@Dawn+2)& (0+255),b
   710   000F94                     
   711                           ; BSR set to: 0
   712                           ;main.c: 217:         Dawn.minutes = (int[]){0, 0, 0, 0, 0, 0, 0};
   713   000F94  EE20  F08A         	lfsr	2,main@14168
   714   000F98  0E0D               	movlw	13
   715   000F9A                     u891:
   716   000F9A  6ADE               	clrf	postinc2,c
   717   000F9C  06E8               	decf	wreg,f,c
   718   000F9E  E2FD               	bc	u891
   719   000FA0                     
   720                           ; BSR set to: 0
   721   000FA0  0E00               	movlw	high main@14168
   722   000FA2  6FF7               	movwf	(main@Dawn+5)& (0+255),b
   723   000FA4  0E8A               	movlw	low main@14168
   724   000FA6  6FF6               	movwf	(main@Dawn+4)& (0+255),b
   725   000FA8                     
   726                           ; BSR set to: 0
   727                           ;main.c: 219:     struct array_structure Dusk;;main.c: 220:         Dusk.size = 7;
   728   000FA8  0E00               	movlw	0
   729   000FAA  6FE5               	movwf	(main@Dusk+1)& (0+255),b
   730   000FAC  0E07               	movlw	7
   731   000FAE  6FE4               	movwf	main@Dusk& (0+255),b
   732   000FB0                     
   733                           ; BSR set to: 0
   734                           ;main.c: 221:         Dusk.hours = (int[]){0, 0, 0, 0, 0, 0, 0};
   735   000FB0  EE20  F060         	lfsr	2,main@14170
   736   000FB4  0E0D               	movlw	13
   737   000FB6                     u901:
   738   000FB6  6ADE               	clrf	postinc2,c
   739   000FB8  06E8               	decf	wreg,f,c
   740   000FBA  E2FD               	bc	u901
   741   000FBC                     
   742                           ; BSR set to: 0
   743   000FBC  0E00               	movlw	high main@14170
   744   000FBE  6FE7               	movwf	(main@Dusk+3)& (0+255),b
   745   000FC0  0E60               	movlw	low main@14170
   746   000FC2  6FE6               	movwf	(main@Dusk+2)& (0+255),b
   747   000FC4                     
   748                           ; BSR set to: 0
   749                           ;main.c: 222:         Dusk.minutes = (int[]){0, 0, 0, 0, 0, 0, 0};
   750   000FC4  EE20  F06E         	lfsr	2,main@14172
   751   000FC8  0E0D               	movlw	13
   752   000FCA                     u911:
   753   000FCA  6ADE               	clrf	postinc2,c
   754   000FCC  06E8               	decf	wreg,f,c
   755   000FCE  E2FD               	bc	u911
   756   000FD0                     
   757                           ; BSR set to: 0
   758   000FD0  0E00               	movlw	high main@14172
   759   000FD2  6FE9               	movwf	(main@Dusk+5)& (0+255),b
   760   000FD4  0E6E               	movlw	low main@14172
   761   000FD6  6FE8               	movwf	(main@Dusk+4)& (0+255),b
   762   000FD8                     
   763                           ; BSR set to: 0
   764                           ;main.c: 233:     ADC_init();
   765   000FD8  EC2F  F00A         	call	_ADC_init	;wreg free
   766                           
   767                           ;main.c: 236:     unsigned int light_threshold = 70;
   768   000FDC  0E00               	movlw	0
   769   000FDE  0100               	movlb	0	; () banked
   770   000FE0  6F99               	movwf	(main@light_threshold+1)& (0+255),b
   771   000FE2  0E46               	movlw	70
   772   000FE4  6F98               	movwf	main@light_threshold& (0+255),b
   773   000FE6                     l1585:
   774                           
   775                           ;main.c: 245:         clock.seconds = GLOBALsecs;
   776   000FE6  C044  F0F8         	movff	_GLOBALsecs,main@clock
   777   000FEA  C045  F0F9         	movff	_GLOBALsecs+1,main@clock+1
   778   000FEE                     
   779                           ;main.c: 246:         UpdateClock(&GLOBALsecs, &clock.minutes, &clock.hours, &clock.days
      +                          );
   780   000FEE  0E44               	movlw	low _GLOBALsecs
   781   000FF0  6E39               	movwf	UpdateClock@seconds^0,c
   782   000FF2  0EFA               	movlw	low (main@clock+2)
   783   000FF4  6E3A               	movwf	UpdateClock@minutes^0,c
   784   000FF6  0EFC               	movlw	low (main@clock+4)
   785   000FF8  6E3B               	movwf	UpdateClock@hours^0,c
   786   000FFA  0EFE               	movlw	low (main@clock+6)
   787   000FFC  6E3C               	movwf	UpdateClock@days^0,c
   788   000FFE  EC9C  F008         	call	_UpdateClock	;wreg free
   789   001002                     
   790                           ;main.c: 249:         LEDarray_disp_bin(clock.hours);
   791   001002  C0FC  F039         	movff	main@clock+4,LEDarray_disp_bin@number
   792   001006  C0FD  F03A         	movff	main@clock+5,LEDarray_disp_bin@number+1
   793   00100A  EC54  F009         	call	_LEDarray_disp_bin	;wreg free
   794   00100E                     
   795                           ;main.c: 262:         unsigned int curval = ADC_getval();
   796   00100E  ECF4  F009         	call	_ADC_getval	;wreg free
   797   001012  C039  F09A         	movff	?_ADC_getval,main@curval
   798   001016  C03A  F09B         	movff	?_ADC_getval+1,main@curval+1
   799   00101A                     
   800                           ;main.c: 265:         if (curval < light_threshold){
   801   00101A  0100               	movlb	0	; () banked
   802   00101C  5198               	movf	main@light_threshold& (0+255),w,b
   803   00101E  5D9A               	subwf	main@curval& (0+255),w,b
   804   001020  5199               	movf	(main@light_threshold+1)& (0+255),w,b
   805   001022  599B               	subwfb	(main@curval+1)& (0+255),w,b
   806   001024  B0D8               	btfsc	status,0,c
   807   001026  EF17  F008         	goto	u921
   808   00102A  EF19  F008         	goto	u920
   809   00102E                     u921:
   810   00102E  EF54  F008         	goto	l1603
   811   001032                     u920:
   812   001032                     
   813                           ; BSR set to: 0
   814                           ;main.c: 268:             if ((clock.hours >= 1 && clock.hours < 5) || (clock.hours >= 8
      +                           && clock.hours < 15)) {
   815   001032  BFFD               	btfsc	(main@clock+5)& (0+255),7,b
   816   001034  EF24  F008         	goto	u931
   817   001038  51FD               	movf	(main@clock+5)& (0+255),w,b
   818   00103A  E108               	bnz	u930
   819   00103C  05FC               	decf	(main@clock+4)& (0+255),w,b
   820   00103E  A0D8               	btfss	status,0,c
   821   001040  EF24  F008         	goto	u931
   822   001044  EF26  F008         	goto	u930
   823   001048                     u931:
   824   001048  EF34  F008         	goto	l1599
   825   00104C                     u930:
   826   00104C                     
   827                           ; BSR set to: 0
   828   00104C  BFFD               	btfsc	(main@clock+5)& (0+255),7,b
   829   00104E  EF32  F008         	goto	u941
   830   001052  51FD               	movf	(main@clock+5)& (0+255),w,b
   831   001054  E109               	bnz	u940
   832   001056  0E05               	movlw	5
   833   001058  5DFC               	subwf	(main@clock+4)& (0+255),w,b
   834   00105A  A0D8               	btfss	status,0,c
   835   00105C  EF32  F008         	goto	u941
   836   001060  EF34  F008         	goto	u940
   837   001064                     u941:
   838   001064  EF50  F008         	goto	l43
   839   001068                     u940:
   840   001068                     l1599:
   841                           
   842                           ; BSR set to: 0
   843   001068  BFFD               	btfsc	(main@clock+5)& (0+255),7,b
   844   00106A  EF40  F008         	goto	u951
   845   00106E  51FD               	movf	(main@clock+5)& (0+255),w,b
   846   001070  E109               	bnz	u950
   847   001072  0E08               	movlw	8
   848   001074  5DFC               	subwf	(main@clock+4)& (0+255),w,b
   849   001076  A0D8               	btfss	status,0,c
   850   001078  EF40  F008         	goto	u951
   851   00107C  EF42  F008         	goto	u950
   852   001080                     u951:
   853   001080  EF53  F008         	goto	l41
   854   001084                     u950:
   855   001084                     
   856                           ; BSR set to: 0
   857   001084  BFFD               	btfsc	(main@clock+5)& (0+255),7,b
   858   001086  EF50  F008         	goto	u960
   859   00108A  51FD               	movf	(main@clock+5)& (0+255),w,b
   860   00108C  E107               	bnz	u961
   861   00108E  0E0F               	movlw	15
   862   001090  5DFC               	subwf	(main@clock+4)& (0+255),w,b
   863   001092  B0D8               	btfsc	status,0,c
   864   001094  EF4E  F008         	goto	u961
   865   001098  EF50  F008         	goto	u960
   866   00109C                     u961:
   867   00109C  EF53  F008         	goto	l41
   868   0010A0                     u960:
   869   0010A0                     l43:
   870                           
   871                           ; BSR set to: 0
   872                           ;main.c: 269:                 LATHbits.LATH3 = 0;
   873   0010A0  9680               	bcf	128,3,c	;volatile
   874                           
   875                           ;main.c: 270:             }
   876   0010A2  EF54  F008         	goto	l1603
   877   0010A6                     l41:
   878                           
   879                           ; BSR set to: 0
   880                           ;main.c: 273:                 LATHbits.LATH3 = 1;
   881   0010A6  8680               	bsf	128,3,c	;volatile
   882   0010A8                     l1603:
   883                           
   884                           ; BSR set to: 0
   885                           ;main.c: 277:         if (curval > light_threshold){
   886   0010A8  519A               	movf	main@curval& (0+255),w,b
   887   0010AA  5D98               	subwf	main@light_threshold& (0+255),w,b
   888   0010AC  519B               	movf	(main@curval+1)& (0+255),w,b
   889   0010AE  5999               	subwfb	(main@light_threshold+1)& (0+255),w,b
   890   0010B0  B0D8               	btfsc	status,0,c
   891   0010B2  EF5D  F008         	goto	u971
   892   0010B6  EF5F  F008         	goto	u970
   893   0010BA                     u971:
   894   0010BA  EFF3  F007         	goto	l1585
   895   0010BE                     u970:
   896   0010BE                     
   897                           ; BSR set to: 0
   898                           ;main.c: 278:             LATHbits.LATH3 = 0;
   899   0010BE  9680               	bcf	128,3,c	;volatile
   900   0010C0                     
   901                           ; BSR set to: 0
   902                           ;main.c: 280:             if (clock.hours >=4 && clock.hours < 8) {
   903   0010C0  BFFD               	btfsc	(main@clock+5)& (0+255),7,b
   904   0010C2  EF6C  F008         	goto	u981
   905   0010C6  51FD               	movf	(main@clock+5)& (0+255),w,b
   906   0010C8  E109               	bnz	u980
   907   0010CA  0E04               	movlw	4
   908   0010CC  5DFC               	subwf	(main@clock+4)& (0+255),w,b
   909   0010CE  A0D8               	btfss	status,0,c
   910   0010D0  EF6C  F008         	goto	u981
   911   0010D4  EF6E  F008         	goto	u980
   912   0010D8                     u981:
   913   0010D8  EFF3  F007         	goto	l1585
   914   0010DC                     u980:
   915   0010DC                     
   916                           ; BSR set to: 0
   917   0010DC  BFFD               	btfsc	(main@clock+5)& (0+255),7,b
   918   0010DE  EF7C  F008         	goto	u990
   919   0010E2  51FD               	movf	(main@clock+5)& (0+255),w,b
   920   0010E4  E107               	bnz	u991
   921   0010E6  0E08               	movlw	8
   922   0010E8  5DFC               	subwf	(main@clock+4)& (0+255),w,b
   923   0010EA  B0D8               	btfsc	status,0,c
   924   0010EC  EF7A  F008         	goto	u991
   925   0010F0  EF7C  F008         	goto	u990
   926   0010F4                     u991:
   927   0010F4  EFF3  F007         	goto	l1585
   928   0010F8                     u990:
   929   0010F8                     
   930                           ; BSR set to: 0
   931                           ;main.c: 281:                 ArrayAppend(Dawn.hours, Dawn.size, clock.hours);
   932   0010F8  C0F4  F039         	movff	main@Dawn+2,ArrayAppend@arrayTime
   933   0010FC  C0F5  F03A         	movff	main@Dawn+3,ArrayAppend@arrayTime+1
   934   001100  C0F2  F03B         	movff	main@Dawn,ArrayAppend@size
   935   001104  C0F3  F03C         	movff	main@Dawn+1,ArrayAppend@size+1
   936   001108  C0FC  F03D         	movff	main@clock+4,ArrayAppend@Time
   937   00110C  C0FD  F03E         	movff	main@clock+5,ArrayAppend@Time+1
   938   001110  ECB8  F009         	call	_ArrayAppend	;wreg free
   939                           
   940                           ;main.c: 282:                 ArrayAppend(Dawn.minutes, Dawn.size, clock.minutes);
   941   001114  C0F6  F039         	movff	main@Dawn+4,ArrayAppend@arrayTime
   942   001118  C0F7  F03A         	movff	main@Dawn+5,ArrayAppend@arrayTime+1
   943   00111C  C0F2  F03B         	movff	main@Dawn,ArrayAppend@size
   944   001120  C0F3  F03C         	movff	main@Dawn+1,ArrayAppend@size+1
   945   001124  C0FA  F03D         	movff	main@clock+2,ArrayAppend@Time
   946   001128  C0FB  F03E         	movff	main@clock+3,ArrayAppend@Time+1
   947   00112C  ECB8  F009         	call	_ArrayAppend	;wreg free
   948   001130  EFF3  F007         	goto	l1585
   949   001134  EF16  F000         	goto	start
   950   001138                     __end_of_main:
   951                           	callstack 0
   952                           
   953 ;; *************** function _UpdateClock *****************
   954 ;; Defined at:
   955 ;;		line 24 in file "clock.c"
   956 ;; Parameters:    Size  Location     Type
   957 ;;  seconds         1    0[COMRAM] PTR int 
   958 ;;		 -> GLOBALsecs(2), 
   959 ;;  minutes         1    1[COMRAM] PTR int 
   960 ;;		 -> main@clock(8), 
   961 ;;  hours           1    2[COMRAM] PTR int 
   962 ;;		 -> main@clock(8), 
   963 ;;  days            1    3[COMRAM] PTR int 
   964 ;;		 -> main@clock(8), 
   965 ;; Auto vars:     Size  Location     Type
   966 ;;		None
   967 ;; Return value:  Size  Location     Type
   968 ;;                  1    wreg      void 
   969 ;; Registers used:
   970 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
   971 ;; Tracked objects:
   972 ;;		On entry : 0/0
   973 ;;		On exit  : 0/0
   974 ;;		Unchanged: 0/0
   975 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   976 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   977 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   978 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   979 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   980 ;;Total ram usage:        6 bytes
   981 ;; Hardware stack levels used: 1
   982 ;; Hardware stack levels required when called: 1
   983 ;; This function calls:
   984 ;;		Nothing
   985 ;; This function is called by:
   986 ;;		_main
   987 ;; This function uses a non-reentrant model
   988 ;;
   989                           
   990                           	psect	text1
   991   001138                     __ptext1:
   992                           	callstack 0
   993   001138                     _UpdateClock:
   994                           	callstack 29
   995   001138                     
   996                           ;clock.c: 27:             *hours = *seconds;
   997   001138  5039               	movf	UpdateClock@seconds^0,w,c
   998   00113A  6ED9               	movwf	fsr2l,c
   999   00113C  6ADA               	clrf	fsr2h,c
  1000   00113E  503B               	movf	UpdateClock@hours^0,w,c
  1001   001140  6EE1               	movwf	fsr1l,c
  1002   001142  6AE2               	clrf	fsr1h,c
  1003   001144  CFDE FFE6          	movff	postinc2,postinc1
  1004   001148  CFDD FFE5          	movff	postdec2,postdec1
  1005   00114C                     
  1006                           ;clock.c: 28:             if (*seconds >= 24 ){
  1007   00114C  5039               	movf	UpdateClock@seconds^0,w,c
  1008   00114E  6ED9               	movwf	fsr2l,c
  1009   001150  6ADA               	clrf	fsr2h,c
  1010   001152  0E01               	movlw	1
  1011   001154  BEDB               	btfsc	plusw2,7,c
  1012   001156  EFB7  F008         	goto	u731
  1013   00115A  0E01               	movlw	1
  1014   00115C  50DB               	movf	plusw2,w,c
  1015   00115E  E109               	bnz	u730
  1016   001160  0E18               	movlw	24
  1017   001162  5CDE               	subwf	postinc2,w,c
  1018   001164  A0D8               	btfss	status,0,c
  1019   001166  EFB7  F008         	goto	u731
  1020   00116A  EFB9  F008         	goto	u730
  1021   00116E                     u731:
  1022   00116E  EFD5  F008         	goto	l1401
  1023   001172                     u730:
  1024   001172                     
  1025                           ;clock.c: 29:                 *seconds = 0;
  1026   001172  5039               	movf	UpdateClock@seconds^0,w,c
  1027   001174  6ED9               	movwf	fsr2l,c
  1028   001176  6ADA               	clrf	fsr2h,c
  1029   001178  6ADE               	clrf	postinc2,c
  1030   00117A  6ADD               	clrf	postdec2,c
  1031                           
  1032                           ;clock.c: 30:                 *hours = 0;
  1033   00117C  503B               	movf	UpdateClock@hours^0,w,c
  1034   00117E  6ED9               	movwf	fsr2l,c
  1035   001180  6ADA               	clrf	fsr2h,c
  1036   001182  6ADE               	clrf	postinc2,c
  1037   001184  6ADD               	clrf	postdec2,c
  1038   001186                     
  1039                           ;clock.c: 31:                 *days = *days + 1;
  1040   001186  503C               	movf	UpdateClock@days^0,w,c
  1041   001188  6ED9               	movwf	fsr2l,c
  1042   00118A  6ADA               	clrf	fsr2h,c
  1043   00118C  CFDE F03D          	movff	postinc2,??_UpdateClock
  1044   001190  CFDD F03E          	movff	postdec2,??_UpdateClock+1
  1045   001194  0E01               	movlw	1
  1046   001196  263D               	addwf	??_UpdateClock^0,f,c
  1047   001198  0E00               	movlw	0
  1048   00119A  223E               	addwfc	(??_UpdateClock+1)^0,f,c
  1049   00119C  503C               	movf	UpdateClock@days^0,w,c
  1050   00119E  6ED9               	movwf	fsr2l,c
  1051   0011A0  6ADA               	clrf	fsr2h,c
  1052   0011A2  C03D  FFDE         	movff	??_UpdateClock,postinc2
  1053   0011A6  C03E  FFDD         	movff	??_UpdateClock+1,postdec2
  1054   0011AA                     l1401:
  1055                           
  1056                           ;clock.c: 35:     if (*seconds >= 60 ){
  1057   0011AA  5039               	movf	UpdateClock@seconds^0,w,c
  1058   0011AC  6ED9               	movwf	fsr2l,c
  1059   0011AE  6ADA               	clrf	fsr2h,c
  1060   0011B0  0E01               	movlw	1
  1061   0011B2  BEDB               	btfsc	plusw2,7,c
  1062   0011B4  EFE6  F008         	goto	u741
  1063   0011B8  0E01               	movlw	1
  1064   0011BA  50DB               	movf	plusw2,w,c
  1065   0011BC  E109               	bnz	u740
  1066   0011BE  0E3C               	movlw	60
  1067   0011C0  5CDE               	subwf	postinc2,w,c
  1068   0011C2  A0D8               	btfss	status,0,c
  1069   0011C4  EFE6  F008         	goto	u741
  1070   0011C8  EFE8  F008         	goto	u740
  1071   0011CC                     u741:
  1072   0011CC  EFFF  F008         	goto	l1407
  1073   0011D0                     u740:
  1074   0011D0                     
  1075                           ;clock.c: 36:         *seconds = 0;
  1076   0011D0  5039               	movf	UpdateClock@seconds^0,w,c
  1077   0011D2  6ED9               	movwf	fsr2l,c
  1078   0011D4  6ADA               	clrf	fsr2h,c
  1079   0011D6  6ADE               	clrf	postinc2,c
  1080   0011D8  6ADD               	clrf	postdec2,c
  1081   0011DA                     
  1082                           ;clock.c: 37:         *minutes = *minutes + 1;
  1083   0011DA  503A               	movf	UpdateClock@minutes^0,w,c
  1084   0011DC  6ED9               	movwf	fsr2l,c
  1085   0011DE  6ADA               	clrf	fsr2h,c
  1086   0011E0  CFDE F03D          	movff	postinc2,??_UpdateClock
  1087   0011E4  CFDD F03E          	movff	postdec2,??_UpdateClock+1
  1088   0011E8  0E01               	movlw	1
  1089   0011EA  263D               	addwf	??_UpdateClock^0,f,c
  1090   0011EC  0E00               	movlw	0
  1091   0011EE  223E               	addwfc	(??_UpdateClock+1)^0,f,c
  1092   0011F0  503A               	movf	UpdateClock@minutes^0,w,c
  1093   0011F2  6ED9               	movwf	fsr2l,c
  1094   0011F4  6ADA               	clrf	fsr2h,c
  1095   0011F6  C03D  FFDE         	movff	??_UpdateClock,postinc2
  1096   0011FA  C03E  FFDD         	movff	??_UpdateClock+1,postdec2
  1097   0011FE                     l1407:
  1098                           
  1099                           ;clock.c: 40:     if (*minutes >= 60){
  1100   0011FE  503A               	movf	UpdateClock@minutes^0,w,c
  1101   001200  6ED9               	movwf	fsr2l,c
  1102   001202  6ADA               	clrf	fsr2h,c
  1103   001204  0E01               	movlw	1
  1104   001206  BEDB               	btfsc	plusw2,7,c
  1105   001208  EF10  F009         	goto	u751
  1106   00120C  0E01               	movlw	1
  1107   00120E  50DB               	movf	plusw2,w,c
  1108   001210  E109               	bnz	u750
  1109   001212  0E3C               	movlw	60
  1110   001214  5CDE               	subwf	postinc2,w,c
  1111   001216  A0D8               	btfss	status,0,c
  1112   001218  EF10  F009         	goto	u751
  1113   00121C  EF12  F009         	goto	u750
  1114   001220                     u751:
  1115   001220  EF29  F009         	goto	l1413
  1116   001224                     u750:
  1117   001224                     
  1118                           ;clock.c: 41:     *minutes = 0;
  1119   001224  503A               	movf	UpdateClock@minutes^0,w,c
  1120   001226  6ED9               	movwf	fsr2l,c
  1121   001228  6ADA               	clrf	fsr2h,c
  1122   00122A  6ADE               	clrf	postinc2,c
  1123   00122C  6ADD               	clrf	postdec2,c
  1124   00122E                     
  1125                           ;clock.c: 42:     *hours = *hours + 1;
  1126   00122E  503B               	movf	UpdateClock@hours^0,w,c
  1127   001230  6ED9               	movwf	fsr2l,c
  1128   001232  6ADA               	clrf	fsr2h,c
  1129   001234  CFDE F03D          	movff	postinc2,??_UpdateClock
  1130   001238  CFDD F03E          	movff	postdec2,??_UpdateClock+1
  1131   00123C  0E01               	movlw	1
  1132   00123E  263D               	addwf	??_UpdateClock^0,f,c
  1133   001240  0E00               	movlw	0
  1134   001242  223E               	addwfc	(??_UpdateClock+1)^0,f,c
  1135   001244  503B               	movf	UpdateClock@hours^0,w,c
  1136   001246  6ED9               	movwf	fsr2l,c
  1137   001248  6ADA               	clrf	fsr2h,c
  1138   00124A  C03D  FFDE         	movff	??_UpdateClock,postinc2
  1139   00124E  C03E  FFDD         	movff	??_UpdateClock+1,postdec2
  1140   001252                     l1413:
  1141                           
  1142                           ;clock.c: 45:     if (*hours >= 24){
  1143   001252  503B               	movf	UpdateClock@hours^0,w,c
  1144   001254  6ED9               	movwf	fsr2l,c
  1145   001256  6ADA               	clrf	fsr2h,c
  1146   001258  0E01               	movlw	1
  1147   00125A  BEDB               	btfsc	plusw2,7,c
  1148   00125C  EF3A  F009         	goto	u761
  1149   001260  0E01               	movlw	1
  1150   001262  50DB               	movf	plusw2,w,c
  1151   001264  E109               	bnz	u760
  1152   001266  0E18               	movlw	24
  1153   001268  5CDE               	subwf	postinc2,w,c
  1154   00126A  A0D8               	btfss	status,0,c
  1155   00126C  EF3A  F009         	goto	u761
  1156   001270  EF3C  F009         	goto	u760
  1157   001274                     u761:
  1158   001274  EF53  F009         	goto	l255
  1159   001278                     u760:
  1160   001278                     
  1161                           ;clock.c: 46:     *hours = 0;
  1162   001278  503B               	movf	UpdateClock@hours^0,w,c
  1163   00127A  6ED9               	movwf	fsr2l,c
  1164   00127C  6ADA               	clrf	fsr2h,c
  1165   00127E  6ADE               	clrf	postinc2,c
  1166   001280  6ADD               	clrf	postdec2,c
  1167   001282                     
  1168                           ;clock.c: 47:     *days = *days + 1;
  1169   001282  503C               	movf	UpdateClock@days^0,w,c
  1170   001284  6ED9               	movwf	fsr2l,c
  1171   001286  6ADA               	clrf	fsr2h,c
  1172   001288  CFDE F03D          	movff	postinc2,??_UpdateClock
  1173   00128C  CFDD F03E          	movff	postdec2,??_UpdateClock+1
  1174   001290  0E01               	movlw	1
  1175   001292  263D               	addwf	??_UpdateClock^0,f,c
  1176   001294  0E00               	movlw	0
  1177   001296  223E               	addwfc	(??_UpdateClock+1)^0,f,c
  1178   001298  503C               	movf	UpdateClock@days^0,w,c
  1179   00129A  6ED9               	movwf	fsr2l,c
  1180   00129C  6ADA               	clrf	fsr2h,c
  1181   00129E  C03D  FFDE         	movff	??_UpdateClock,postinc2
  1182   0012A2  C03E  FFDD         	movff	??_UpdateClock+1,postdec2
  1183   0012A6                     l255:
  1184   0012A6  0012               	return		;funcret
  1185   0012A8                     __end_of_UpdateClock:
  1186                           	callstack 0
  1187                           
  1188 ;; *************** function _Timer0_init *****************
  1189 ;; Defined at:
  1190 ;;		line 8 in file "timers.c"
  1191 ;; Parameters:    Size  Location     Type
  1192 ;;		None
  1193 ;; Auto vars:     Size  Location     Type
  1194 ;;		None
  1195 ;; Return value:  Size  Location     Type
  1196 ;;                  1    wreg      void 
  1197 ;; Registers used:
  1198 ;;		wreg, status,2
  1199 ;; Tracked objects:
  1200 ;;		On entry : 0/0
  1201 ;;		On exit  : 0/0
  1202 ;;		Unchanged: 0/0
  1203 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1204 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1205 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1206 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1207 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1208 ;;Total ram usage:        0 bytes
  1209 ;; Hardware stack levels used: 1
  1210 ;; Hardware stack levels required when called: 1
  1211 ;; This function calls:
  1212 ;;		Nothing
  1213 ;; This function is called by:
  1214 ;;		_main
  1215 ;; This function uses a non-reentrant model
  1216 ;;
  1217                           
  1218                           	psect	text2
  1219   00143E                     __ptext2:
  1220                           	callstack 0
  1221   00143E                     _Timer0_init:
  1222                           	callstack 29
  1223   00143E                     
  1224                           ;timers.c: 10:     T0CON1bits.T0CS=0b010;
  1225   00143E  50D6               	movf	214,w,c	;volatile
  1226   001440  0B1F               	andlw	-225
  1227   001442  0940               	iorlw	64
  1228   001444  6ED6               	movwf	214,c	;volatile
  1229   001446                     
  1230                           ;timers.c: 11:     T0CON1bits.T0ASYNC=1;
  1231   001446  88D6               	bsf	214,4,c	;volatile
  1232                           
  1233                           ;timers.c: 13:     T0CON1bits.T0CKPS=0b1000;
  1234   001448  50D6               	movf	214,w,c	;volatile
  1235   00144A  0BF0               	andlw	-16
  1236   00144C  0908               	iorlw	8
  1237   00144E  6ED6               	movwf	214,c	;volatile
  1238   001450                     
  1239                           ;timers.c: 15:     T0CON0bits.T016BIT=1;
  1240   001450  88D5               	bsf	213,4,c	;volatile
  1241                           
  1242                           ;timers.c: 18:     TMR0H = 0b00001011;
  1243   001452  0E0B               	movlw	11
  1244   001454  6ED4               	movwf	212,c	;volatile
  1245                           
  1246                           ;timers.c: 19:     TMR0L = 0b11011100;
  1247   001456  0EDC               	movlw	220
  1248   001458  6ED3               	movwf	211,c	;volatile
  1249   00145A                     
  1250                           ;timers.c: 35:     T0CON0bits.T0EN=1;
  1251   00145A  8ED5               	bsf	213,7,c	;volatile
  1252   00145C  0012               	return		;funcret
  1253   00145E                     __end_of_Timer0_init:
  1254                           	callstack 0
  1255                           
  1256 ;; *************** function _LEDarray_init *****************
  1257 ;; Defined at:
  1258 ;;		line 8 in file "LEDarray.c"
  1259 ;; Parameters:    Size  Location     Type
  1260 ;;		None
  1261 ;; Auto vars:     Size  Location     Type
  1262 ;;		None
  1263 ;; Return value:  Size  Location     Type
  1264 ;;                  1    wreg      void 
  1265 ;; Registers used:
  1266 ;;		None
  1267 ;; Tracked objects:
  1268 ;;		On entry : 0/0
  1269 ;;		On exit  : 0/0
  1270 ;;		Unchanged: 0/0
  1271 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1272 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1273 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1274 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1275 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1276 ;;Total ram usage:        0 bytes
  1277 ;; Hardware stack levels used: 1
  1278 ;; Hardware stack levels required when called: 1
  1279 ;; This function calls:
  1280 ;;		Nothing
  1281 ;; This function is called by:
  1282 ;;		_main
  1283 ;; This function uses a non-reentrant model
  1284 ;;
  1285                           
  1286                           	psect	text3
  1287   001418                     __ptext3:
  1288                           	callstack 0
  1289   001418                     _LEDarray_init:
  1290                           	callstack 29
  1291   001418                     
  1292                           ;LEDarray.c: 16:     TRISGbits.TRISG0 = 0;
  1293   001418  9087               	bcf	135,0,c	;volatile
  1294                           
  1295                           ;LEDarray.c: 17:     LATGbits.LATG0 = 0;
  1296   00141A  907F               	bcf	127,0,c	;volatile
  1297                           
  1298                           ;LEDarray.c: 19:     TRISGbits.TRISG1 = 0;
  1299   00141C  9287               	bcf	135,1,c	;volatile
  1300                           
  1301                           ;LEDarray.c: 20:     LATGbits.LATG1 = 0;
  1302   00141E  927F               	bcf	127,1,c	;volatile
  1303                           
  1304                           ;LEDarray.c: 22:     TRISAbits.TRISA2 = 0;
  1305   001420  9481               	bcf	129,2,c	;volatile
  1306                           
  1307                           ;LEDarray.c: 23:     LATAbits.LATA2 = 0;
  1308   001422  9479               	bcf	121,2,c	;volatile
  1309                           
  1310                           ;LEDarray.c: 25:     TRISFbits.TRISF6 = 0;
  1311   001424  9C86               	bcf	134,6,c	;volatile
  1312                           
  1313                           ;LEDarray.c: 26:     LATFbits.LATF6 = 0;
  1314   001426  9C7E               	bcf	126,6,c	;volatile
  1315                           
  1316                           ;LEDarray.c: 28:     TRISAbits.TRISA4 = 0;
  1317   001428  9881               	bcf	129,4,c	;volatile
  1318                           
  1319                           ;LEDarray.c: 29:     LATAbits.LATA4 = 0;
  1320   00142A  9879               	bcf	121,4,c	;volatile
  1321                           
  1322                           ;LEDarray.c: 31:     TRISAbits.TRISA5 = 0;
  1323   00142C  9A81               	bcf	129,5,c	;volatile
  1324                           
  1325                           ;LEDarray.c: 32:     LATAbits.LATA5 = 0;
  1326   00142E  9A79               	bcf	121,5,c	;volatile
  1327                           
  1328                           ;LEDarray.c: 34:     TRISFbits.TRISF0 = 0;
  1329   001430  9086               	bcf	134,0,c	;volatile
  1330                           
  1331                           ;LEDarray.c: 35:     LATFbits.LATF0 = 0;
  1332   001432  907E               	bcf	126,0,c	;volatile
  1333                           
  1334                           ;LEDarray.c: 37:     TRISBbits.TRISB0 = 0;
  1335   001434  9082               	bcf	130,0,c	;volatile
  1336                           
  1337                           ;LEDarray.c: 38:     LATBbits.LATB0 = 0;
  1338   001436  907A               	bcf	122,0,c	;volatile
  1339                           
  1340                           ;LEDarray.c: 40:     TRISBbits.TRISB1 = 0;
  1341   001438  9282               	bcf	130,1,c	;volatile
  1342                           
  1343                           ;LEDarray.c: 41:     LATBbits.LATB1 = 0;
  1344   00143A  927A               	bcf	122,1,c	;volatile
  1345   00143C  0012               	return		;funcret
  1346   00143E                     __end_of_LEDarray_init:
  1347                           	callstack 0
  1348                           
  1349 ;; *************** function _LEDarray_disp_bin *****************
  1350 ;; Defined at:
  1351 ;;		line 49 in file "LEDarray.c"
  1352 ;; Parameters:    Size  Location     Type
  1353 ;;  number          2    0[COMRAM] unsigned int 
  1354 ;; Auto vars:     Size  Location     Type
  1355 ;;		None
  1356 ;; Return value:  Size  Location     Type
  1357 ;;                  1    wreg      void 
  1358 ;; Registers used:
  1359 ;;		None
  1360 ;; Tracked objects:
  1361 ;;		On entry : 0/0
  1362 ;;		On exit  : 0/0
  1363 ;;		Unchanged: 0/0
  1364 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1365 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1366 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1367 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1368 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1369 ;;Total ram usage:        2 bytes
  1370 ;; Hardware stack levels used: 1
  1371 ;; Hardware stack levels required when called: 1
  1372 ;; This function calls:
  1373 ;;		Nothing
  1374 ;; This function is called by:
  1375 ;;		_main
  1376 ;; This function uses a non-reentrant model
  1377 ;;
  1378                           
  1379                           	psect	text4
  1380   0012A8                     __ptext4:
  1381                           	callstack 0
  1382   0012A8                     _LEDarray_disp_bin:
  1383                           	callstack 29
  1384   0012A8                     
  1385                           ;LEDarray.c: 49: void LEDarray_disp_bin(unsigned int number);LEDarray.c: 50: {;LEDarray.
      +                          c: 53:     if (number & 0b000000001){ LATGbits.LATG0 = 1 ; }
  1386   0012A8  A039               	btfss	LEDarray_disp_bin@number^0,0,c
  1387   0012AA  EF59  F009         	goto	u771
  1388   0012AE  EF5B  F009         	goto	u770
  1389   0012B2                     u771:
  1390   0012B2  EF5E  F009         	goto	l94
  1391   0012B6                     u770:
  1392   0012B6  807F               	bsf	127,0,c	;volatile
  1393   0012B8  EF5F  F009         	goto	l95
  1394   0012BC                     l94:
  1395   0012BC  907F               	bcf	127,0,c	;volatile
  1396   0012BE                     l95:
  1397                           
  1398                           ;LEDarray.c: 56:     if (number & 0b000000010){ LATGbits.LATG1 = 1 ; }
  1399   0012BE  A239               	btfss	LEDarray_disp_bin@number^0,1,c
  1400   0012C0  EF64  F009         	goto	u781
  1401   0012C4  EF66  F009         	goto	u780
  1402   0012C8                     u781:
  1403   0012C8  EF69  F009         	goto	l96
  1404   0012CC                     u780:
  1405   0012CC  827F               	bsf	127,1,c	;volatile
  1406   0012CE  EF6A  F009         	goto	l97
  1407   0012D2                     l96:
  1408   0012D2  927F               	bcf	127,1,c	;volatile
  1409   0012D4                     l97:
  1410                           
  1411                           ;LEDarray.c: 59:     if (number & 0b000000100){ LATAbits.LATA2 = 1 ; }
  1412   0012D4  A439               	btfss	LEDarray_disp_bin@number^0,2,c
  1413   0012D6  EF6F  F009         	goto	u791
  1414   0012DA  EF71  F009         	goto	u790
  1415   0012DE                     u791:
  1416   0012DE  EF74  F009         	goto	l98
  1417   0012E2                     u790:
  1418   0012E2  8479               	bsf	121,2,c	;volatile
  1419   0012E4  EF75  F009         	goto	l99
  1420   0012E8                     l98:
  1421   0012E8  9479               	bcf	121,2,c	;volatile
  1422   0012EA                     l99:
  1423                           
  1424                           ;LEDarray.c: 62:     if (number & 0b000001000){ LATFbits.LATF6 = 1 ; }
  1425   0012EA  A639               	btfss	LEDarray_disp_bin@number^0,3,c
  1426   0012EC  EF7A  F009         	goto	u801
  1427   0012F0  EF7C  F009         	goto	u800
  1428   0012F4                     u801:
  1429   0012F4  EF7F  F009         	goto	l100
  1430   0012F8                     u800:
  1431   0012F8  8C7E               	bsf	126,6,c	;volatile
  1432   0012FA  EF80  F009         	goto	l101
  1433   0012FE                     l100:
  1434   0012FE  9C7E               	bcf	126,6,c	;volatile
  1435   001300                     l101:
  1436                           
  1437                           ;LEDarray.c: 65:     if (number & 0b000010000){ LATAbits.LATA4 = 1 ; }
  1438   001300  A839               	btfss	LEDarray_disp_bin@number^0,4,c
  1439   001302  EF85  F009         	goto	u811
  1440   001306  EF87  F009         	goto	u810
  1441   00130A                     u811:
  1442   00130A  EF8A  F009         	goto	l102
  1443   00130E                     u810:
  1444   00130E  8879               	bsf	121,4,c	;volatile
  1445   001310  EF8B  F009         	goto	l103
  1446   001314                     l102:
  1447   001314  9879               	bcf	121,4,c	;volatile
  1448   001316                     l103:
  1449                           
  1450                           ;LEDarray.c: 68:     if (number & 0b000100000){ LATAbits.LATA5 = 1 ; }
  1451   001316  AA39               	btfss	LEDarray_disp_bin@number^0,5,c
  1452   001318  EF90  F009         	goto	u821
  1453   00131C  EF92  F009         	goto	u820
  1454   001320                     u821:
  1455   001320  EF95  F009         	goto	l104
  1456   001324                     u820:
  1457   001324  8A79               	bsf	121,5,c	;volatile
  1458   001326  EF96  F009         	goto	l105
  1459   00132A                     l104:
  1460   00132A  9A79               	bcf	121,5,c	;volatile
  1461   00132C                     l105:
  1462                           
  1463                           ;LEDarray.c: 71:     if (number & 0b001000000){ LATFbits.LATF0 = 1 ; }
  1464   00132C  AC39               	btfss	LEDarray_disp_bin@number^0,6,c
  1465   00132E  EF9B  F009         	goto	u831
  1466   001332  EF9D  F009         	goto	u830
  1467   001336                     u831:
  1468   001336  EFA0  F009         	goto	l106
  1469   00133A                     u830:
  1470   00133A  807E               	bsf	126,0,c	;volatile
  1471   00133C  EFA1  F009         	goto	l107
  1472   001340                     l106:
  1473   001340  907E               	bcf	126,0,c	;volatile
  1474   001342                     l107:
  1475                           
  1476                           ;LEDarray.c: 74:     if (number & 0b010000000){ LATBbits.LATB0 = 1 ; }
  1477   001342  AE39               	btfss	LEDarray_disp_bin@number^0,7,c
  1478   001344  EFA6  F009         	goto	u841
  1479   001348  EFA8  F009         	goto	u840
  1480   00134C                     u841:
  1481   00134C  EFAB  F009         	goto	l108
  1482   001350                     u840:
  1483   001350  807A               	bsf	122,0,c	;volatile
  1484   001352  EFAC  F009         	goto	l109
  1485   001356                     l108:
  1486   001356  907A               	bcf	122,0,c	;volatile
  1487   001358                     l109:
  1488                           
  1489                           ;LEDarray.c: 77:     if (number & 0b100000000){ LATBbits.LATB1 = 1 ; }
  1490   001358  A03A               	btfss	(LEDarray_disp_bin@number+1)^0,0,c
  1491   00135A  EFB1  F009         	goto	u851
  1492   00135E  EFB3  F009         	goto	u850
  1493   001362                     u851:
  1494   001362  EFB6  F009         	goto	l110
  1495   001366                     u850:
  1496   001366  827A               	bsf	122,1,c	;volatile
  1497   001368  EFB7  F009         	goto	l112
  1498   00136C                     l110:
  1499   00136C  927A               	bcf	122,1,c	;volatile
  1500   00136E                     l112:
  1501   00136E  0012               	return		;funcret
  1502   001370                     __end_of_LEDarray_disp_bin:
  1503                           	callstack 0
  1504                           
  1505 ;; *************** function _Interrupts_init *****************
  1506 ;; Defined at:
  1507 ;;		line 9 in file "interrupts.c"
  1508 ;; Parameters:    Size  Location     Type
  1509 ;;		None
  1510 ;; Auto vars:     Size  Location     Type
  1511 ;;		None
  1512 ;; Return value:  Size  Location     Type
  1513 ;;                  1    wreg      void 
  1514 ;; Registers used:
  1515 ;;		None
  1516 ;; Tracked objects:
  1517 ;;		On entry : 0/0
  1518 ;;		On exit  : 0/0
  1519 ;;		Unchanged: 0/0
  1520 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1521 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1522 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1523 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1524 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1525 ;;Total ram usage:        0 bytes
  1526 ;; Hardware stack levels used: 1
  1527 ;; Hardware stack levels required when called: 1
  1528 ;; This function calls:
  1529 ;;		Nothing
  1530 ;; This function is called by:
  1531 ;;		_main
  1532 ;; This function uses a non-reentrant model
  1533 ;;
  1534                           
  1535                           	psect	text5
  1536   00148E                     __ptext5:
  1537                           	callstack 0
  1538   00148E                     _Interrupts_init:
  1539                           	callstack 29
  1540   00148E                     
  1541                           ;interrupts.c: 15:   INTCONbits.PEIE = 1;
  1542   00148E  8CF2               	bsf	242,6,c	;volatile
  1543                           
  1544                           ;interrupts.c: 19:     PIE0bits.TMR0IE = 1;
  1545   001490  010E               	movlb	14	; () banked
  1546   001492  8B29               	bsf	41,5,b	;volatile
  1547                           
  1548                           ;interrupts.c: 20:     PIR0bits.TMR0IF = 0;
  1549   001494  9B33               	bcf	51,5,b	;volatile
  1550                           
  1551                           ;interrupts.c: 21:     IPR0bits.TMR0IP = 1;
  1552   001496  8B1F               	bsf	31,5,b	;volatile
  1553                           
  1554                           ;interrupts.c: 24:     INTCONbits.GIE=1;
  1555   001498  8EF2               	bsf	242,7,c	;volatile
  1556   00149A                     
  1557                           ; BSR set to: 14
  1558   00149A  0012               	return		;funcret
  1559   00149C                     __end_of_Interrupts_init:
  1560                           	callstack 0
  1561                           
  1562 ;; *************** function _ArrayAppend *****************
  1563 ;; Defined at:
  1564 ;;		line 6 in file "synchronisation.c"
  1565 ;; Parameters:    Size  Location     Type
  1566 ;;  arrayTime       2    0[COMRAM] PTR int 
  1567 ;;		 -> RAM(3583), main@14168(14), main@14166(14), 
  1568 ;;  size            2    2[COMRAM] int 
  1569 ;;  Time            2    4[COMRAM] int 
  1570 ;; Auto vars:     Size  Location     Type
  1571 ;;  i               2    9[COMRAM] int 
  1572 ;; Return value:  Size  Location     Type
  1573 ;;                  2    0[COMRAM] int 
  1574 ;; Registers used:
  1575 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  1576 ;; Tracked objects:
  1577 ;;		On entry : 0/0
  1578 ;;		On exit  : 0/0
  1579 ;;		Unchanged: 0/0
  1580 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1581 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1582 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1583 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1584 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1585 ;;Total ram usage:       11 bytes
  1586 ;; Hardware stack levels used: 1
  1587 ;; Hardware stack levels required when called: 1
  1588 ;; This function calls:
  1589 ;;		Nothing
  1590 ;; This function is called by:
  1591 ;;		_main
  1592 ;; This function uses a non-reentrant model
  1593 ;;
  1594                           
  1595                           	psect	text6
  1596   001370                     __ptext6:
  1597                           	callstack 0
  1598   001370                     _ArrayAppend:
  1599                           	callstack 29
  1600   001370                     
  1601                           ;synchronisation.c: 8:         for (int i = 1; i <= size-1; i++) {
  1602   001370  0E00               	movlw	0
  1603   001372  6E43               	movwf	(ArrayAppend@i+1)^0,c
  1604   001374  0E01               	movlw	1
  1605   001376  6E42               	movwf	ArrayAppend@i^0,c
  1606   001378  EFDE  F009         	goto	l1459
  1607   00137C                     l1449:
  1608                           
  1609                           ;synchronisation.c: 10:             if (i = 6) {
  1610   00137C  0E00               	movlw	0
  1611   00137E  6E43               	movwf	(ArrayAppend@i+1)^0,c
  1612   001380  0E06               	movlw	6
  1613   001382  6E42               	movwf	ArrayAppend@i^0,c
  1614   001384                     
  1615                           ;synchronisation.c: 11:                 arrayTime[i-1] = arrayTime[i];
  1616   001384  EE20 F00C          	lfsr	2,12
  1617   001388  5039               	movf	ArrayAppend@arrayTime^0,w,c
  1618   00138A  26D9               	addwf	fsr2l,f,c
  1619   00138C  503A               	movf	(ArrayAppend@arrayTime+1)^0,w,c
  1620   00138E  22DA               	addwfc	fsr2h,f,c
  1621   001390  EE10 F00A          	lfsr	1,10
  1622   001394  5039               	movf	ArrayAppend@arrayTime^0,w,c
  1623   001396  26E1               	addwf	fsr1l,f,c
  1624   001398  503A               	movf	(ArrayAppend@arrayTime+1)^0,w,c
  1625   00139A  22E2               	addwfc	fsr1h,f,c
  1626   00139C  CFDE FFE6          	movff	postinc2,postinc1
  1627   0013A0  CFDD FFE5          	movff	postdec2,postdec1
  1628   0013A4                     
  1629                           ;synchronisation.c: 12:                 arrayTime[i] = Time;
  1630   0013A4  EE20 F00C          	lfsr	2,12
  1631   0013A8  5039               	movf	ArrayAppend@arrayTime^0,w,c
  1632   0013AA  26D9               	addwf	fsr2l,f,c
  1633   0013AC  503A               	movf	(ArrayAppend@arrayTime+1)^0,w,c
  1634   0013AE  22DA               	addwfc	fsr2h,f,c
  1635   0013B0  C03D  FFDE         	movff	ArrayAppend@Time,postinc2
  1636   0013B4  C03E  FFDD         	movff	ArrayAppend@Time+1,postdec2
  1637   0013B8                     
  1638                           ;synchronisation.c: 18:         }
  1639   0013B8  4A42               	infsnz	ArrayAppend@i^0,f,c
  1640   0013BA  2A43               	incf	(ArrayAppend@i+1)^0,f,c
  1641   0013BC                     l1459:
  1642   0013BC  0EFF               	movlw	255
  1643   0013BE  243B               	addwf	ArrayAppend@size^0,w,c
  1644   0013C0  6E3F               	movwf	??_ArrayAppend^0,c
  1645   0013C2  0EFF               	movlw	255
  1646   0013C4  203C               	addwfc	(ArrayAppend@size+1)^0,w,c
  1647   0013C6  6E40               	movwf	(??_ArrayAppend+1)^0,c
  1648   0013C8  5042               	movf	ArrayAppend@i^0,w,c
  1649   0013CA  5C3F               	subwf	??_ArrayAppend^0,w,c
  1650   0013CC  5040               	movf	(??_ArrayAppend+1)^0,w,c
  1651   0013CE  0A80               	xorlw	128
  1652   0013D0  6E41               	movwf	(??_ArrayAppend+2)^0,c
  1653   0013D2  5043               	movf	(ArrayAppend@i+1)^0,w,c
  1654   0013D4  0A80               	xorlw	128
  1655   0013D6  5841               	subwfb	(??_ArrayAppend+2)^0,w,c
  1656   0013D8  B0D8               	btfsc	status,0,c
  1657   0013DA  EFF1  F009         	goto	u871
  1658   0013DE  EFF3  F009         	goto	u870
  1659   0013E2                     u871:
  1660   0013E2  EFBE  F009         	goto	l1449
  1661   0013E6                     u870:
  1662   0013E6  0012               	return		;funcret
  1663   0013E8                     __end_of_ArrayAppend:
  1664                           	callstack 0
  1665                           
  1666 ;; *************** function _ADC_init *****************
  1667 ;; Defined at:
  1668 ;;		line 9 in file "ADC.c"
  1669 ;; Parameters:    Size  Location     Type
  1670 ;;		None
  1671 ;; Auto vars:     Size  Location     Type
  1672 ;;		None
  1673 ;; Return value:  Size  Location     Type
  1674 ;;                  1    wreg      void 
  1675 ;; Registers used:
  1676 ;;		wreg, status,2
  1677 ;; Tracked objects:
  1678 ;;		On entry : 0/0
  1679 ;;		On exit  : 0/0
  1680 ;;		Unchanged: 0/0
  1681 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1682 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1683 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1684 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1685 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1686 ;;Total ram usage:        0 bytes
  1687 ;; Hardware stack levels used: 1
  1688 ;; Hardware stack levels required when called: 1
  1689 ;; This function calls:
  1690 ;;		Nothing
  1691 ;; This function is called by:
  1692 ;;		_main
  1693 ;; This function uses a non-reentrant model
  1694 ;;
  1695                           
  1696                           	psect	text7
  1697   00145E                     __ptext7:
  1698                           	callstack 0
  1699   00145E                     _ADC_init:
  1700                           	callstack 29
  1701   00145E                     
  1702                           ;ADC.c: 11:     TRISAbits.TRISA3=1;
  1703   00145E  8681               	bsf	129,3,c	;volatile
  1704                           
  1705                           ;ADC.c: 12:     ANSELAbits.ANSELA3=1;
  1706   001460  010E               	movlb	14	; () banked
  1707   001462  8792               	bsf	146,3,b	;volatile
  1708                           
  1709                           ;ADC.c: 14:     ADREFbits.ADNREF = 0;
  1710   001464  010F               	movlb	15	; () banked
  1711   001466  9958               	bcf	88,4,b	;volatile
  1712   001468                     
  1713                           ; BSR set to: 15
  1714                           ;ADC.c: 15:     ADREFbits.ADPREF = 0b00;
  1715   001468  0EFC               	movlw	-4
  1716   00146A  1758               	andwf	88,f,b	;volatile
  1717                           
  1718                           ;ADC.c: 16:     ADPCH=0b11;
  1719   00146C  0E03               	movlw	3
  1720   00146E  6F5F               	movwf	95,b	;volatile
  1721   001470                     
  1722                           ; BSR set to: 15
  1723                           ;ADC.c: 17:     ADCON0bits.ADFM = 0;
  1724   001470  9460               	bcf	96,2,c	;volatile
  1725   001472                     
  1726                           ; BSR set to: 15
  1727                           ;ADC.c: 18:     ADCON0bits.ADCS = 1;
  1728   001472  8860               	bsf	96,4,c	;volatile
  1729   001474                     
  1730                           ; BSR set to: 15
  1731                           ;ADC.c: 19:     ADCON0bits.ADON = 1;
  1732   001474  8E60               	bsf	96,7,c	;volatile
  1733   001476                     
  1734                           ; BSR set to: 15
  1735   001476  0012               	return		;funcret
  1736   001478                     __end_of_ADC_init:
  1737                           	callstack 0
  1738                           
  1739 ;; *************** function _ADC_getval *****************
  1740 ;; Defined at:
  1741 ;;		line 22 in file "ADC.c"
  1742 ;; Parameters:    Size  Location     Type
  1743 ;;		None
  1744 ;; Auto vars:     Size  Location     Type
  1745 ;;  tmpval          2    2[COMRAM] unsigned int 
  1746 ;; Return value:  Size  Location     Type
  1747 ;;                  2    0[COMRAM] unsigned int 
  1748 ;; Registers used:
  1749 ;;		wreg, status,2, status,0
  1750 ;; Tracked objects:
  1751 ;;		On entry : 0/0
  1752 ;;		On exit  : 0/0
  1753 ;;		Unchanged: 0/0
  1754 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1755 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1756 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1757 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1758 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1759 ;;Total ram usage:        4 bytes
  1760 ;; Hardware stack levels used: 1
  1761 ;; Hardware stack levels required when called: 1
  1762 ;; This function calls:
  1763 ;;		Nothing
  1764 ;; This function is called by:
  1765 ;;		_main
  1766 ;; This function uses a non-reentrant model
  1767 ;;
  1768                           
  1769                           	psect	text8
  1770   0013E8                     __ptext8:
  1771                           	callstack 0
  1772   0013E8                     _ADC_getval:
  1773                           	callstack 29
  1774   0013E8                     
  1775                           ;ADC.c: 24:     unsigned int tmpval;;ADC.c: 26:     ADCON0bits.GO = 1;
  1776   0013E8  8060               	bsf	96,0,c	;volatile
  1777   0013EA                     l69:
  1778   0013EA  B060               	btfsc	96,0,c	;volatile
  1779   0013EC  EFFA  F009         	goto	u861
  1780   0013F0  EFFC  F009         	goto	u860
  1781   0013F4                     u861:
  1782   0013F4  EFF5  F009         	goto	l69
  1783   0013F8                     u860:
  1784   0013F8                     
  1785                           ;ADC.c: 30:     tmpval = ADRESH;
  1786   0013F8  CF64 F03B          	movff	3940,ADC_getval@tmpval	;volatile
  1787   0013FC  6A3C               	clrf	(ADC_getval@tmpval+1)^0,c
  1788   0013FE                     
  1789                           ;ADC.c: 34:     tmpval = 255 - tmpval;
  1790   0013FE  503B               	movf	ADC_getval@tmpval^0,w,c
  1791   001400  08FF               	sublw	255
  1792   001402  6E3B               	movwf	ADC_getval@tmpval^0,c
  1793   001404  503C               	movf	(ADC_getval@tmpval+1)^0,w,c
  1794   001406  A0D8               	btfss	status,0,c
  1795   001408  2AE8               	incf	wreg,f,c
  1796   00140A  0800               	sublw	0
  1797   00140C  6E3C               	movwf	(ADC_getval@tmpval+1)^0,c
  1798   00140E                     
  1799                           ;ADC.c: 36:     return tmpval;
  1800   00140E  C03B  F039         	movff	ADC_getval@tmpval,?_ADC_getval
  1801   001412  C03C  F03A         	movff	ADC_getval@tmpval+1,?_ADC_getval+1
  1802   001416  0012               	return		;funcret
  1803   001418                     __end_of_ADC_getval:
  1804                           	callstack 0
  1805                           
  1806 ;; *************** function _HighISR *****************
  1807 ;; Defined at:
  1808 ;;		line 31 in file "interrupts.c"
  1809 ;; Parameters:    Size  Location     Type
  1810 ;;		None
  1811 ;; Auto vars:     Size  Location     Type
  1812 ;;		None
  1813 ;; Return value:  Size  Location     Type
  1814 ;;                  1    wreg      void 
  1815 ;; Registers used:
  1816 ;;		wreg, status,2, status,0
  1817 ;; Tracked objects:
  1818 ;;		On entry : 0/0
  1819 ;;		On exit  : 0/0
  1820 ;;		Unchanged: 0/0
  1821 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1822 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1823 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1824 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1825 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1826 ;;Total ram usage:        0 bytes
  1827 ;; Hardware stack levels used: 1
  1828 ;; This function calls:
  1829 ;;		Nothing
  1830 ;; This function is called by:
  1831 ;;		Interrupt level 2
  1832 ;; This function uses a non-reentrant model
  1833 ;;
  1834                           
  1835                           	psect	intcode
  1836   000008                     __pintcode:
  1837                           	callstack 0
  1838   000008                     _HighISR:
  1839                           	callstack 29
  1840                           
  1841                           ;incstack = 0
  1842   000008  8246               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  1843   00000A                     
  1844                           ;interrupts.c: 35:     if(PIR0bits.TMR0IF){
  1845   00000A  010E               	movlb	14	; () banked
  1846   00000C  AB33               	btfss	51,5,b	;volatile
  1847   00000E  EF0B  F000         	goto	i2u72_41
  1848   000012  EF0D  F000         	goto	i2u72_40
  1849   000016                     i2u72_41:
  1850   000016  EF14  F000         	goto	i2l227
  1851   00001A                     i2u72_40:
  1852   00001A                     
  1853                           ; BSR set to: 14
  1854                           ;interrupts.c: 37:         TMR0H = 0b00001011;
  1855   00001A  0E0B               	movlw	11
  1856   00001C  6ED4               	movwf	212,c	;volatile
  1857                           
  1858                           ;interrupts.c: 38:         TMR0L = 0b11011100;
  1859   00001E  0EDC               	movlw	220
  1860   000020  6ED3               	movwf	211,c	;volatile
  1861   000022                     
  1862                           ; BSR set to: 14
  1863                           ;interrupts.c: 39:         GLOBALsecs++;
  1864   000022  4A44               	infsnz	_GLOBALsecs^0,f,c
  1865   000024  2A45               	incf	(_GLOBALsecs+1)^0,f,c
  1866   000026                     
  1867                           ; BSR set to: 14
  1868                           ;interrupts.c: 40:         PIR0bits.TMR0IF=0;
  1869   000026  9B33               	bcf	51,5,b	;volatile
  1870   000028                     i2l227:
  1871                           
  1872                           ; BSR set to: 14
  1873   000028  9246               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1874   00002A  0011               	retfie		f
  1875   00002C                     __end_of_HighISR:
  1876                           	callstack 0
  1877                           
  1878                           	psect	smallconst
  1879   000E00                     __psmallconst:
  1880                           	callstack 0
  1881   000E00  00                 	db	0
  1882   000E01  00                 	db	0	; dummy byte at the end
  1883   000000                     
  1884                           	psect	rparam
  1885   000000                     
  1886                           	psect	temp
  1887   000046                     btemp:
  1888                           	callstack 0
  1889   000046                     	ds	1
  1890   000000                     int$flags	set	btemp
  1891   000000                     wtemp8	set	btemp+1
  1892   000000                     ttemp5	set	btemp+1
  1893   000000                     ttemp6	set	btemp+4
  1894   000000                     ttemp7	set	btemp+8
  1895                           
  1896                           	psect	config
  1897                           
  1898                           ;Config register CONFIG1L @ 0x300000
  1899                           ;	External Oscillator mode Selection bits
  1900                           ;	FEXTOSC = HS, HS (crystal oscillator) above 8 MHz; PFM set to high power
  1901                           ;	Power-up default value for COSC bits
  1902                           ;	RSTOSC = EXTOSC_4PLL, EXTOSC with 4x PLL, with EXTOSC operating per FEXTOSC bits
  1903   300000                     	org	3145728
  1904   300000  AA                 	db	170
  1905                           
  1906                           ;Config register CONFIG1H @ 0x300001
  1907                           ;	unspecified, using default values
  1908                           ;	Clock Out Enable bit
  1909                           ;	CLKOUTEN = 0x1, unprogrammed default
  1910                           ;	Clock Switch Enable bit
  1911                           ;	CSWEN = 0x1, unprogrammed default
  1912                           ;	Fail-Safe Clock Monitor Enable bit
  1913                           ;	FCMEN = 0x1, unprogrammed default
  1914   300001                     	org	3145729
  1915   300001  FF                 	db	255
  1916                           
  1917                           ;Config register CONFIG3L @ 0x300004
  1918                           ;	WDT Period Select bits
  1919                           ;	WDTCPS = 0x1F, unprogrammed default
  1920                           ;	WDT operating mode
  1921                           ;	WDTE = OFF, WDT Disabled
  1922   300004                     	org	3145732
  1923   300004  9F                 	db	159
  1924                           
  1925                           ;Config register CONFIG3H @ 0x300005
  1926                           ;	unspecified, using default values
  1927                           ;	WDT Window Select bits
  1928                           ;	WDTCWS = 0x7, unprogrammed default
  1929                           ;	WDT input clock selector
  1930                           ;	WDTCCS = 0x7, unprogrammed default
  1931   300005                     	org	3145733
  1932   300005  FF                 	db	255
  1933                           tosu	equ	0xFFF
  1934                           tosh	equ	0xFFE
  1935                           tosl	equ	0xFFD
  1936                           stkptr	equ	0xFFC
  1937                           pclatu	equ	0xFFB
  1938                           pclath	equ	0xFFA
  1939                           pcl	equ	0xFF9
  1940                           tblptru	equ	0xFF8
  1941                           tblptrh	equ	0xFF7
  1942                           tblptrl	equ	0xFF6
  1943                           tablat	equ	0xFF5
  1944                           prodh	equ	0xFF4
  1945                           prodl	equ	0xFF3
  1946                           indf0	equ	0xFEF
  1947                           postinc0	equ	0xFEE
  1948                           postdec0	equ	0xFED
  1949                           preinc0	equ	0xFEC
  1950                           plusw0	equ	0xFEB
  1951                           fsr0h	equ	0xFEA
  1952                           fsr0l	equ	0xFE9
  1953                           wreg	equ	0xFE8
  1954                           indf1	equ	0xFE7
  1955                           postinc1	equ	0xFE6
  1956                           postdec1	equ	0xFE5
  1957                           preinc1	equ	0xFE4
  1958                           plusw1	equ	0xFE3
  1959                           fsr1h	equ	0xFE2
  1960                           fsr1l	equ	0xFE1
  1961                           bsr	equ	0xFE0
  1962                           indf2	equ	0xFDF
  1963                           postinc2	equ	0xFDE
  1964                           postdec2	equ	0xFDD
  1965                           preinc2	equ	0xFDC
  1966                           plusw2	equ	0xFDB
  1967                           fsr2h	equ	0xFDA
  1968                           fsr2l	equ	0xFD9
  1969                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         56
    Persistent  2
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     11      69
    BANK0           160    160     160
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          234      0       0

Pointer List with Targets:

    ArrayAppend@arrayTime	PTR int  size(2) Largest target is 3583
		 -> main@14166(BANK0[14]), main@14168(BANK0[14]), RAM(DATA[3583]), 

    UpdateClock@days	PTR int  size(1) Largest target is 8
		 -> main@clock(BANK0[8]), 

    UpdateClock@hours	PTR int  size(1) Largest target is 8
		 -> main@clock(BANK0[8]), 

    UpdateClock@minutes	PTR int  size(1) Largest target is 8
		 -> main@clock(BANK0[8]), 

    UpdateClock@seconds	PTR int  size(1) Largest target is 2
		 -> GLOBALsecs(COMRAM[2]), 


Critical Paths under _main in COMRAM

    _main->_ArrayAppend

Critical Paths under _HighISR in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _HighISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _HighISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _HighISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _HighISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _HighISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _HighISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _HighISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _HighISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _HighISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _HighISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _HighISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _HighISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _HighISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _HighISR in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                               160   160      0    3230
                                              0 BANK0    160   160      0
                         _ADC_getval
                           _ADC_init
                        _ArrayAppend
                    _Interrupts_init
                  _LEDarray_disp_bin
                      _LEDarray_init
                        _Timer0_init
                        _UpdateClock
 ---------------------------------------------------------------------------------
 (1) _UpdateClock                                          6     2      4     722
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _Timer0_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LEDarray_init                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LEDarray_disp_bin                                    2     0      2     274
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _Interrupts_init                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ArrayAppend                                         11     5      6     751
                                              0 COMRAM    11     5      6
 ---------------------------------------------------------------------------------
 (1) _ADC_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ADC_getval                                           4     2      2      46
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (2) _HighISR                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_getval
   _ADC_init
   _ArrayAppend
   _Interrupts_init
   _LEDarray_disp_bin
   _LEDarray_init
   _Timer0_init
   _UpdateClock

 _HighISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             DE9      0       0      50        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK13           EA      0       0      30        0.0%
BANK13              EA      0       0      31        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     A0      A0       5      100.0%
BITBIGSFRllhlhh     84      0       0      42        0.0%
BITBIGSFRlllhh      5E      0       0      45        0.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E      B      45       1       73.4%
BITBIGSFRhhll       4A      0       0      34        0.0%
BITBIGSFRllhll      33      0       0      44        0.0%
BITBIGSFRlllll      30      0       0      48        0.0%
BITBIGSFRhhlhh      1B      0       0      33        0.0%
BITBIGSFRllhhhh     14      0       0      39        0.0%
BITBIGSFRhhh         D      0       0      32        0.0%
BITBIGSFRllllh       9      0       0      47        0.0%
BITBIGSFRlllhl       9      0       0      46        0.0%
BITBIGSFRllhlhl      8      0       0      43        0.0%
BITBIGSFRllhhl       6      0       0      41        0.0%
BITBIGSFRllhhhl      3      0       0      40        0.0%
BITBIGSFRllhhhh      1      0       0      38        0.0%
BITBIGSFRlhh         1      0       0      36        0.0%
BITBIGSFRlhl         1      0       0      37        0.0%
BITBIGSFRhl          1      0       0      35        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      E5      49        0.0%
DATA                 0      0      E5       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.45 build 20230818022343 
Symbol Table                                                                                   Thu Feb 08 22:02:07 2024

                       l41 10A6                         l43 10A0                         l71 13F8  
                       l72 1416                         l66 1476                         l91 143C  
                       l69 13EA                         l94 12BC                         l95 12BE  
                       l96 12D2                         l97 12D4                         l98 12E8  
                       l99 12EA          ??_Interrupts_init 0039                        l100 12FE  
                      l101 1300                        l110 136C                        l102 1314  
                      l103 1316                        l112 136E                        l104 132A  
                      l105 132C                        l106 1340                        l107 1342  
                      l108 1356                        l221 149A                        l109 1358  
                      l240 145C                        l263 13E6                        l255 12A6  
                      u800 12F8                        u801 12F4                        u810 130E  
                      u730 1172                        u811 130A                        u731 116E  
                      u820 1324                        u740 11D0                        u821 1320  
                      u741 11CC                        u901 0FB6                        u830 133A  
                      u750 1224                        u831 1336                        u751 1220  
                      u911 0FCA                        u840 1350                        u760 1278  
                      u920 1032                        u841 134C                        u761 1274  
                      u921 102E                        u850 1366                        u770 12B6  
                      u930 104C                        u851 1362                        u771 12B2  
                      u931 1048                        u860 13F8                        u780 12CC  
                      u940 1068                        u861 13F4                        u781 12C8  
                      u941 1064                        u870 13E6                        u790 12E2  
                      u950 1084                        u871 13E2                        u791 12DE  
                      u951 1080                        u960 10A0                        u961 109C  
                      u881 0F86                        u970 10BE                        u971 10BA  
                      u891 0F9A                        u980 10DC                        u981 10D8  
                      u990 10F8                        u991 10F4                        wreg 0FE8  
                     l1401 11AA                       l1411 122E                       l1403 11D0  
                     l1421 12B6                       l1413 1252                       l1405 11DA  
                     l1501 0E80                       l1431 1324                       l1423 12CC  
                     l1415 1278                       l1407 11FE                       l1511 0EA8  
                     l1503 0E88                       l1441 13FE                       l1433 133A  
                     l1425 12E2                       l1417 1282                       l1409 1224  
                     l1601 1084                       l1521 0ED0                       l1513 0EB0  
                     l1505 0E90                       l1443 140E                       l1451 1384  
                     l1435 1350                       l1427 12F8                       l1419 12A8  
                     l1371 1418                       l1611 10F8                       l1603 10A8  
                     l1531 0EF8                       l1523 0ED8                       l1515 0EB8  
                     l1507 0E98                       l1453 13A4                       l1381 148E  
                     l1437 1366                       l1429 130E                       l1373 143E  
                     l1605 10BE                       l1541 0F20                       l1533 0F00  
                     l1525 0EE0                       l1517 0EC0                       l1509 0EA0  
                     l1461 0E02                       l1439 13E8                       l1391 1474  
                     l1383 145E                       l1447 1370                       l1375 1446  
                     l1607 10C0                       l1551 0F48                       l1543 0F28  
                     l1535 0F08                       l1527 0EE8                       l1519 0EC8  
                     l1471 0E12                       l1463 0E06                       l1385 1468  
                     l1457 13B8                       l1449 137C                       l1377 1450  
                     l1393 1138                       l1609 10DC                       l1561 0F70  
                     l1553 0F50                       l1545 0F30                       l1537 0F10  
                     l1529 0EF0                       l1481 0E30                       l1473 0E14  
                     l1465 0E0A                       l1387 1470                       l1459 13BC  
                     l1379 145A                       l1395 114C                       l1571 0FA0  
                     l1563 0F78                       l1555 0F58                       l1547 0F38  
                     l1539 0F18                       l1491 0E58                       l1483 0E38  
                     l1475 0E16                       l1467 0E0E                       l1389 1472  
                     l1397 1172                       l1581 0FD0                       l1573 0FA8  
                     l1565 0F80                       l1557 0F60                       l1549 0F40  
                     l1493 0E60                       l1485 0E40                       l1477 0E1E  
                     l1469 0E10                       l1399 1186                       l1591 100E  
                     l1583 0FD8                       l1575 0FB0                       l1567 0F8C  
                     l1559 0F68                       l1495 0E68                       l1487 0E48  
                     l1479 0E28                       l1593 101A                       l1585 0FE6  
                     l1577 0FBC                       l1569 0F94                       l1497 0E70  
                     l1489 0E50                       l1595 1032                       l1587 0FEE  
                     l1579 0FC4                       l1499 0E78                       l1597 104C  
                     l1589 1002                       l1599 1068                       _main 0E02  
                     fsr1h 0FE2                       fsr2h 0FDA                       fsr1l 0FE1  
                     fsr2l 0FD9                       btemp 0046                       start 002C  
         __end_of_ADC_init 1478        main@light_threshold 0098            __end_of_HighISR 002C  
             ___param_bank 0000        __end_of_ArrayAppend 13E8                      ?_main 0039  
                    _ADPCH 0F5F                      i2l227 0028                      _TMR0H 0FD4  
                    _TMR0L 0FD3                      plusw2 0FDB                      ttemp5 0047  
                    ttemp6 004A                      ttemp7 004E                      status 0FD8  
                    wtemp8 0047            __initialization 1478            ArrayAppend@Time 003D  
             __end_of_main 1138            ArrayAppend@size 003B                     ??_main 0044  
            __activetblptr 0000                     _ADRESH 0F64           UpdateClock@hours 003B  
                   i2l1361 000A                     i2l1363 001A                     i2l1365 0022  
                   i2l1367 0026                  ??_HighISR 0039                _ArrayAppend 1370  
        _LEDarray_disp_bin 12A8         ?_LEDarray_disp_bin 0039               ??_ADC_getval 003B  
            ??_Timer0_init 0039        ??_LEDarray_disp_bin 003B                     clear_0 147E  
                   isa$std 0001               __mediumconst 0000                  ?_ADC_init 0039  
       __end_of_ADC_getval 1418  __end_of_LEDarray_disp_bin 1370                 __accesstop 0060  
            ??_UpdateClock 003D    __end_of__initialization 1484              ___rparam_used 0001  
            _LEDarray_init 1418            _Interrupts_init 148E             __pcstackCOMRAM 0039  
      __end_of_Timer0_init 145E                 ??_ADC_init 0039                 __pnvCOMRAM 0044  
           ?_LEDarray_init 0039        __end_of_UpdateClock 12A8                    i2u72_40 001A  
                  i2u72_41 0016    __end_of_Interrupts_init 149C                    _HighISR 0008  
     ArrayAppend@arrayTime 0039                  _ADREFbits 0F58                    __Hparam 0000  
                  __Lparam 0000                _Timer0_init 143E               __psmallconst 0E00  
                  __pcinit 1478                    __ramtop 0E00                    __ptext0 0E02  
                  __ptext1 1138                    __ptext2 143E                    __ptext3 1418  
                  __ptext4 12A8                    __ptext5 148E                    __ptext6 1370  
                  __ptext7 145E                    __ptext8 13E8                    main@Dec 00DE  
                  main@Feb 00A2                    main@Aug 00C6                    main@Apr 00AE  
                  main@Jan 009C                    main@Mar 00A8                    main@May 00B4  
                  main@Oct 00D2                    main@Jul 00C0                    main@Jun 00BA  
                  main@Sep 00CC                    main@Nov 00D8       end_of_initialization 1484  
         ADC_getval@tmpval 003B            ??_LEDarray_init 0039                _UpdateClock 1138  
             ?_ArrayAppend 0039                    postdec1 0FE5                    postdec2 0FDD  
                  postinc0 0FEE                    postinc1 0FE6                    postinc2 0FDE  
               main@F14171 0001                 main@F14165 002B                 main@F14167 001D  
               main@F14169 000F                  _TRISAbits 0F81                  _TRISBbits 0F82  
                _TRISDbits 0F84                  _TRISFbits 0F86                  _TRISGbits 0F87  
                _TRISHbits 0F88                _CM1CON0bits 0ED0                _CM1CON1bits 0ED1  
         ?_Interrupts_init 0039                 main@curval 009A        start_initialization 1478  
          UpdateClock@days 003C                __pbssCOMRAM 0001              __pcstackBANK0 0060  
                 ?_HighISR 0039               ?_Timer0_init 0039                  __pintcode 0008  
              __smallconst 0E00                   _ADC_init 145E               ?_UpdateClock 0039  
                 _LATAbits 0F79         UpdateClock@minutes 003A         UpdateClock@seconds 0039  
                 _LATBbits 0F7A                   _LATDbits 0F7C                   _LATFbits 0F7E  
                 _LATGbits 0F7F                   _LATHbits 0F80                   _IPR0bits 0E1F  
                 _PIE0bits 0E29                   _PIR0bits 0E33                  main@14170 0060  
                main@14172 006E                  main@14166 007C                  main@14168 008A  
                main@DSTon 00EA                 _ADCON0bits 0F60                  main@clock 00F8  
               _CM1NCHbits 0ED2                 _CM1PCHbits 0ED3      __end_of_LEDarray_init 143E  
                 __Hrparam 0000                 _ADC_getval 13E8                   __Lrparam 0000  
               _ANSELAbits 0E92                 _T0CON0bits 0FD5                 _T0CON1bits 0FD6  
  LEDarray_disp_bin@number 0039                 _GLOBALsecs 0044                   isa$xinst 0000  
                 int$flags 0046                   main@Dawn 00F2                   main@Dusk 00E4  
             ArrayAppend@i 0042                 _INTCONbits 0FF2                   intlevel2 0000  
             _DAC1CON0bits 0EC6               _DAC1CON1bits 0EC7                ?_ADC_getval 0039  
            ??_ArrayAppend 003F  
